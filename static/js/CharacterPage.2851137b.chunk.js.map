{"version":3,"sources":["interface/CharacterParsesList/CharacterParsesList.js","interface/CharacterParses/CharacterParses.js","interface/CharacterPage/CharacterPage.tsx","common/getRankingColor.ts","game/ZONES.ts"],"names":["TRINKET_SLOTS","GEAR_SLOTS","TRINKET1","TRINKET2","styles","icon","width","height","marginRight","CharacterParsesList","props","renderItem","bind","specName","this","class","replace","item","index","includes","quality","ItemLink","key","id","className","Icon","trinkets","style","border","elem","metric","formatNumber","persecondamount","toLocaleUpperCase","formatPercentage","historical_percent","parses","map","url","makePlainUrl","report_code","report_fight","difficulty","name","advanced","character_name","to","color","src","iconPath","spec","alt","getDifficultyLabel","rankingColor","formatPerformance","gear","filter","itemFilter","talents","talent","SpellIcon","textAlign","Date","start_time","toLocaleDateString","aria-hidden","marginLeft","React","PureComponent","ORDER_BY","ERRORS","CHARACTER_NOT_FOUND","NO_PARSES_FOR_TIER","CHARACTER_HIDDEN","WCL_API_ERROR","UNKNOWN_API_ERROR","UNEXPECTED","NOT_RESPONDING","CharacterParses","state","specs","activeSpec","activeDifficultyIds","Object","values","DIFFICULTIES","activeZoneID","activeEncounter","sortBy","image","avatarImage","isLoading","error","errorMessage","ITEMS","realmSlug","realm","updateDifficulty","updateSpec","load","changeParseStructure","updateZoneMetricBoss","appendHistory","fetchBattleNetInfo","player","appendReportHistory","code","region","end","now","type","REPORT_HISTORY_TYPES","CHARACTER","playerName","playerRealm","playerRegion","playerClass","zone","boss","setState","diff","newDiff","newSpec","rawParses","updatedTrinkets","forEach","slotID","encounterName","reportID","fightID","rank","outOf","total","startTime","characterName","length","trinket","fetch","makeItemApiUrl","then","response","json","data","catch","makeCharacterApiUrl","status","ok","thumbnail","imageUrl","role","retryingPromise","exports","default","realms","realmsInRegion","lowerCaseRealm","toLowerCase","find","console","warn","findRealm","slug","refresh","getRealmSlug","urlEncodedName","encodeURIComponent","urlEncodedRealm","fetchWcl","includeCombatantInfo","timeframe","_","Number","undefined","hidden","charClass","SPECS","e","self","indexOf","err","CharacterNotFoundError","captureException","WclApiError","message","UnknownApiError","href","target","rel","filterParses","battleNetUrl","backgroundImage","backgroundPosition","fontSize","WarcraftLogs","Armory","Wipefest","value","onChange","ZONES","reverse","defaultValue","zoneBosses","onClick","difficultyId","overflow","preventDefault","display","i18n","padding","margin","ActivityIndicator","text","filteredParses","sort","a","b","slice","encounters","Component","connect","CharacterPage","others","DocumentTitle","title","NavigationBar","percentage"],"mappings":"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","file":"static/js/CharacterPage.2851137b.chunk.js","sourcesContent":["import React from 'react';\r\nimport PropTypes from 'prop-types';\r\nimport { Link } from 'react-router-dom';\r\n\r\nimport { getLabel as getDifficultyLabel } from 'game/DIFFICULTIES';\r\nimport { formatNumber, formatPercentage } from 'common/format';\r\nimport SpellIcon from 'common/SpellIcon';\r\nimport ItemLink from 'common/ItemLink';\r\nimport Icon from 'common/Icon';\r\nimport GEAR_SLOTS from 'game/GEAR_SLOTS';\r\nimport rankingColor from 'common/getRankingColor';\r\nimport { makePlainUrl } from 'interface/common/makeAnalyzerUrl';\r\n\r\nconst TRINKET_SLOTS = [GEAR_SLOTS.TRINKET1, GEAR_SLOTS.TRINKET2];\r\n\r\nconst styles = {\r\n  icon: {\r\n    width: '1.8em',\r\n    height: '1.8em',\r\n    marginRight: 2,\r\n  },\r\n};\r\n\r\nclass CharacterParsesList extends React.PureComponent {\r\n  static propTypes = {\r\n    parses: PropTypes.array.isRequired,\r\n    class: PropTypes.string.isRequired,\r\n    metric: PropTypes.string.isRequired,\r\n    trinkets: PropTypes.object.isRequired,\r\n  };\r\n\r\n  constructor(props) {\r\n    super(props);\r\n    this.renderItem = this.renderItem.bind(this);\r\n  }\r\n\r\n  iconPath(specName) {\r\n    return `/specs/${this.props.class.replace(' ', '')}-${specName.replace(' ', '')}.jpg`;\r\n  }\r\n\r\n  itemFilter(item, index) {\r\n    return TRINKET_SLOTS.includes(index) || item.quality === 'legendary';\r\n  }\r\n  renderItem(item) {\r\n    return (\r\n      <ItemLink\r\n        key={item.id}\r\n        id={item.id}\r\n        className={item.quality}\r\n        icon={false}\r\n      >\r\n        <Icon\r\n          icon={this.props.trinkets[item.id] ? this.props.trinkets[item.id].icon : this.props.trinkets[0].icon}\r\n          style={{ ...styles.icon, border: '1px solid' }}\r\n        />\r\n      </ItemLink>\r\n    );\r\n  }\r\n  formatPerformance(elem) {\r\n    const { metric } = this.props;\r\n    return `${formatNumber(elem.persecondamount)} ${metric.toLocaleUpperCase()} (${formatPercentage(elem.historical_percent / 100, 0)}%)`;\r\n  }\r\n\r\n  render() {\r\n    const { parses } = this.props;\r\n    return (\r\n      <ul className=\"list parses-list\">\r\n        {parses.map(elem => {\r\n          const url = makePlainUrl(elem.report_code, elem.report_fight, elem.difficulty + ' ' + elem.name, elem.advanced ? elem.character_name : '');\r\n          return (\r\n            <li key={url}>\r\n              <Link to={url}>\r\n                <div className=\"row\">\r\n                  <div className=\"col-md-4\" style={{ color: 'white' }}>\r\n                    <div>\r\n                      <img\r\n                        className=\"spec-icon\"\r\n                        src={this.iconPath(elem.spec)}\r\n                        alt={elem.spec}\r\n                      />\r\n                      <span className=\"difficulty\">{getDifficultyLabel(elem.difficulty)}</span>\r\n                      <span className=\"boss\">{elem.name}</span>\r\n                    </div>\r\n                  </div>\r\n                  <div className=\"col-md-2 text-right\">\r\n                    <div className={rankingColor(elem.historical_percent / 100)}>\r\n                      {this.formatPerformance(elem)}\r\n                    </div>\r\n                  </div>\r\n                  <div className=\"col-md-1 text-right\">\r\n                    {elem.advanced && (\r\n                      elem.gear\r\n                        .filter(this.itemFilter)\r\n                        .map(this.renderItem)\r\n                    )}\r\n                  </div>\r\n                  <div className=\"col-md-3\">\r\n                    {elem.advanced && elem.talents.map(talent => (\r\n                      <SpellIcon\r\n                        key={talent.id}\r\n                        id={talent.id}\r\n                        style={styles.icon}\r\n                      />\r\n                    ))}\r\n                  </div>\r\n                  <div className=\"col-md-2\" style={{ color: 'white', textAlign: 'right' }}>\r\n                    {new Date(elem.start_time).toLocaleDateString()}\r\n                    {elem.advanced && (\r\n                      <span className=\"glyphicon glyphicon-chevron-right\" aria-hidden=\"true\" style={{ marginLeft: 10 }} />\r\n                    )}\r\n                  </div>\r\n                </div>\r\n              </Link>\r\n            </li>\r\n          );\r\n        })}\r\n      </ul>\r\n    );\r\n  }\r\n}\r\n\r\nexport default CharacterParsesList;\r\n","import React from 'react';\r\nimport PropTypes from 'prop-types';\r\nimport { Link } from 'react-router-dom';\r\nimport { connect } from 'react-redux';\r\nimport { Trans, t } from '@lingui/macro';\r\n\r\nimport ZONES from 'game/ZONES';\r\nimport SPECS from 'game/SPECS';\r\nimport DIFFICULTIES, {\r\n  getLabel as getDifficultyLabel,\r\n} from 'game/DIFFICULTIES';\r\nimport fetchWcl, {\r\n  CharacterNotFoundError,\r\n  UnknownApiError,\r\n  WclApiError,\r\n} from 'common/fetchWclApi';\r\nimport { makeCharacterApiUrl, makeItemApiUrl } from 'common/makeApiUrl';\r\nimport ITEMS from 'common/ITEMS';\r\nimport { captureException } from 'common/errorLogger';\r\nimport retryingPromise from 'common/retryingPromise';\r\nimport { appendReportHistory } from 'interface/actions/reportHistory';\r\nimport ActivityIndicator from 'interface/common/ActivityIndicator';\r\nimport ArmoryIcon from 'interface/icons/Armory';\r\nimport WarcraftLogsIcon from 'interface/icons/WarcraftLogs';\r\nimport WipefestIcon from 'interface/icons/Wipefest';\r\nimport REPORT_HISTORY_TYPES from 'interface/home/ReportHistory/REPORT_HISTORY_TYPES';\r\nimport { i18n } from 'interface/RootLocalizationProvider';\r\n\r\nimport './CharacterParses.scss';\r\nimport ParsesList from '../CharacterParsesList';\r\n\r\nconst loadRealms = () =>\r\n  retryingPromise(() =>\r\n    import('common/REALMS').then(exports => exports.default),\r\n  );\r\n\r\n//rendering 400+ parses takes quite some time\r\nconst RENDER_LIMIT = 100;\r\n\r\nconst ORDER_BY = {\r\n  DATE: 0,\r\n  DPS: 1,\r\n  PERCENTILE: 2,\r\n};\r\nconst ZONE_DEFAULT_NATHRIA = 26;\r\nconst BOSS_DEFAULT_ALL_BOSSES = 0;\r\nconst TRINKET_SLOTS = [12, 13];\r\nconst FALLBACK_PICTURE = '/img/fallback-character.jpg';\r\nconst ERRORS = {\r\n  CHARACTER_NOT_FOUND: t('interface.characterParses.characterParses.errors.characterNotFound')`We couldn't find your character on Warcraft Logs`,\r\n  NO_PARSES_FOR_TIER: t('interface.characterParses.characterParses.errors.noParsesForTier')`We couldn't find any logs`,\r\n  CHARACTER_HIDDEN: t('interface.characterParses.characterParses.errors.characterHidden')`We could find your character but he's very shy`,\r\n  WCL_API_ERROR: t('interface.characterParses.characterParses.errors.wclAPIError')`Something went wrong talking to Warcraft Logs`,\r\n  UNKNOWN_API_ERROR: t('interface.characterParses.characterParses.errors.unknownAPIError')`Something went wrong talking to the server`,\r\n  UNEXPECTED: t('interface.characterParses.characterParses.errors.unexpected')`Something went wrong`,\r\n  NOT_RESPONDING: t('interface.characterParses.characterParses.errors.notResponding')`Request timed out`,\r\n};\r\n\r\nclass CharacterParses extends React.Component {\r\n  static propTypes = {\r\n    region: PropTypes.string.isRequired,\r\n    realm: PropTypes.string.isRequired,\r\n    name: PropTypes.string.isRequired,\r\n    appendReportHistory: PropTypes.func.isRequired,\r\n  };\r\n\r\n  constructor(props) {\r\n    super(props);\r\n    this.state = {\r\n      specs: [],\r\n      class: '',\r\n      activeSpec: [],\r\n      activeDifficultyIds: Object.values(DIFFICULTIES),\r\n      activeZoneID: ZONE_DEFAULT_NATHRIA,\r\n      activeEncounter: BOSS_DEFAULT_ALL_BOSSES,\r\n      sortBy: ORDER_BY.DATE,\r\n      metric: 'dps',\r\n      image: null,\r\n      avatarImage: null,\r\n      parses: [],\r\n      isLoading: true,\r\n      error: null,\r\n      errorMessage: null,\r\n      trinkets: ITEMS,\r\n      realmSlug: this.props.realm,\r\n    };\r\n\r\n    this.updateDifficulty = this.updateDifficulty.bind(this);\r\n    this.updateSpec = this.updateSpec.bind(this);\r\n\r\n    this.load = this.load.bind(this);\r\n    this.changeParseStructure = this.changeParseStructure.bind(this);\r\n    this.iconPath = this.iconPath.bind(this);\r\n    this.updateZoneMetricBoss = this.updateZoneMetricBoss.bind(this);\r\n    this.appendHistory = this.appendHistory.bind(this);\r\n  }\r\n\r\n  async componentDidMount() {\r\n    this.fetchBattleNetInfo();\r\n  }\r\n\r\n  iconPath(specName) {\r\n    return `/specs/${this.state.class.replace(' ', '')}-${specName.replace(\r\n      ' ',\r\n      '',\r\n    )}.jpg`;\r\n  }\r\n\r\n  appendHistory(player) {\r\n    this.props.appendReportHistory({\r\n      code: `${player.name}-${player.realm}-${player.region}`,\r\n      end: Date.now(),\r\n      type: REPORT_HISTORY_TYPES.CHARACTER,\r\n      playerName: player.name,\r\n      playerRealm: player.realm,\r\n      playerRegion: player.region,\r\n      playerClass: player.class,\r\n    });\r\n  }\r\n\r\n  updateZoneMetricBoss(zone, metric, boss) {\r\n    this.setState(\r\n      {\r\n        activeZoneID: zone,\r\n        metric: metric,\r\n        activeEncounter: boss,\r\n      },\r\n      () => {\r\n        this.load();\r\n      },\r\n    );\r\n  }\r\n\r\n  updateDifficulty(diff) {\r\n    let newDiff = this.state.activeDifficultyIds;\r\n    if (newDiff.includes(diff)) {\r\n      newDiff = newDiff.filter(elem => elem !== diff);\r\n    } else {\r\n      newDiff = [...newDiff, diff];\r\n    }\r\n\r\n    this.setState({\r\n      activeDifficultyIds: newDiff,\r\n    });\r\n  }\r\n\r\n  updateSpec(spec) {\r\n    let newSpec = this.state.activeSpec;\r\n    if (newSpec.includes(spec)) {\r\n      newSpec = newSpec.filter(elem => elem !== spec);\r\n    } else {\r\n      newSpec = [...newSpec, spec];\r\n    }\r\n\r\n    this.setState({\r\n      activeSpec: newSpec,\r\n    });\r\n  }\r\n\r\n  get filterParses() {\r\n    let filteredParses = this.state.parses;\r\n    filteredParses = filteredParses\r\n      .filter(elem => this.state.activeDifficultyIds.includes(elem.difficulty))\r\n      .filter(elem => this.state.activeSpec.includes(elem.spec))\r\n      .sort((a, b) => {\r\n        if (this.state.sortBy === ORDER_BY.DATE) {\r\n          return b.start_time - a.start_time;\r\n        } else if (this.state.sortBy === ORDER_BY.DPS) {\r\n          return b.persecondamount - a.persecondamount;\r\n        }\r\n        return b.historical_percent - a.historical_percent;\r\n      });\r\n\r\n    if (Number(this.state.activeEncounter) === BOSS_DEFAULT_ALL_BOSSES) {\r\n      return filteredParses.slice(0, RENDER_LIMIT);\r\n    }\r\n\r\n    filteredParses = filteredParses.filter(\r\n      elem => elem.name === this.state.activeEncounter,\r\n    );\r\n\r\n    return filteredParses.slice(0, RENDER_LIMIT);\r\n  }\r\n\r\n  changeParseStructure(rawParses) {\r\n    const updatedTrinkets = { ...this.state.trinkets };\r\n    const parses = rawParses.map(elem => {\r\n      // get missing trinket-icons later\r\n      TRINKET_SLOTS.forEach(slotID => {\r\n        if (!updatedTrinkets[elem.gear[slotID].id]) {\r\n          updatedTrinkets[elem.gear[slotID].id] = {\r\n            name: elem.gear[slotID].name,\r\n            id: elem.gear[slotID].id,\r\n            icon: ITEMS[0].icon,\r\n            quality: elem.gear[slotID].quality,\r\n          };\r\n        }\r\n      });\r\n\r\n      return {\r\n        name: elem.encounterName,\r\n        spec: elem.spec.replace(' ', ''),\r\n        difficulty: elem.difficulty,\r\n        // eslint-disable-next-line @typescript-eslint/camelcase\r\n        report_code: elem.reportID,\r\n        // eslint-disable-next-line @typescript-eslint/camelcase\r\n        report_fight: elem.fightID,\r\n        // eslint-disable-next-line @typescript-eslint/camelcase\r\n        historical_percent: 100 - (elem.rank / elem.outOf) * 100,\r\n        persecondamount: elem.total,\r\n        // eslint-disable-next-line @typescript-eslint/camelcase\r\n        start_time: elem.startTime,\r\n        // eslint-disable-next-line @typescript-eslint/camelcase\r\n        character_name: elem.characterName,\r\n        talents: elem.talents,\r\n        gear: elem.gear,\r\n        advanced:\r\n          Object.values(elem.talents).filter(talent => talent.id === null)\r\n            .length === 0,\r\n      };\r\n    });\r\n\r\n    Object.values(updatedTrinkets).map(trinket => {\r\n      if (trinket.icon === ITEMS[0].icon && trinket.id !== 0) {\r\n        return fetch(makeItemApiUrl(trinket.id))\r\n          .then(response => response.json())\r\n          .then(data => {\r\n            updatedTrinkets[trinket.id].icon = data.icon;\r\n            this.setState({\r\n              trinkets: updatedTrinkets,\r\n            });\r\n          })\r\n          .catch(() => {\r\n            // ignore errors;;\r\n          });\r\n      }\r\n      return null;\r\n    });\r\n\r\n    return parses;\r\n  }\r\n\r\n  get zoneBosses() {\r\n    return ZONES.find(zone => zone.id === this.state.activeZoneID).encounters;\r\n  }\r\n\r\n  async fetchBattleNetInfo() {\r\n    const { region, realm, name } = this.props;\r\n\r\n    // Skip CN-API due to blizzard restrictions (aka there is no API for CN)\r\n    if (region === 'CN') {\r\n      this.setState(\r\n        {\r\n          image: FALLBACK_PICTURE,\r\n        },\r\n        () => {\r\n          this.load();\r\n        },\r\n      );\r\n      return;\r\n    }\r\n    // fetch character image and active spec from battle-net\r\n    const response = await fetch(\r\n      makeCharacterApiUrl(null, region, realm, name),\r\n    );\r\n    if (response.status === 500) {\r\n      this.setState({\r\n        isLoading: false,\r\n        error: ERRORS.NOT_RESPONDING,\r\n      });\r\n      return;\r\n    } else if (response.status === 404) {\r\n      this.setState({\r\n        isLoading: false,\r\n        error: ERRORS.CHARACTER_NOT_FOUND,\r\n      });\r\n      return;\r\n    } else if (!response.ok) {\r\n      this.setState({\r\n        isLoading: false,\r\n        error: ERRORS.UNEXPECTED,\r\n      });\r\n      return;\r\n    }\r\n\r\n    const data = await response.json();\r\n\r\n    if (!data.thumbnail) {\r\n      this.setState({\r\n        isLoading: false,\r\n        error: ERRORS.UNEXPECTED,\r\n        errorMessage: 'Corrupt Battle.net API response received.',\r\n      });\r\n      return;\r\n    }\r\n    const image = data.thumbnail.replace('-avatar.jpg', '');\r\n    const imageUrl = `https://render-${this.props.region}.worldofwarcraft.com/character/${image}-main.jpg`;\r\n    const avatarImage = `https://render-${this.props.region}.worldofwarcraft.com/character/${image}-avatar.jpg`;\r\n    const role = data.role;\r\n    const metric = role === 'HEALING' ? 'hps' : 'dps';\r\n    this.setState(\r\n      {\r\n        image: imageUrl,\r\n        avatarImage: avatarImage,\r\n        metric: metric,\r\n      },\r\n      () => {\r\n        this.load();\r\n      },\r\n    );\r\n  }\r\n\r\n  async findRealm() {\r\n    const realms = await loadRealms();\r\n    // Use the slug from REALMS when available, otherwise try realm-prop and fail\r\n    // TODO: Can we make this return results more reliably?\r\n    const realmsInRegion = realms[this.props.region];\r\n    const lowerCaseRealm = this.props.realm.toLowerCase();\r\n    const realm = realmsInRegion\r\n      ? realmsInRegion.find(elem => elem.name.toLowerCase() === lowerCaseRealm)\r\n      : null;\r\n    if (!realm) {\r\n      console.warn(\r\n        'Realm could not be found: ' +\r\n          this.props.realm +\r\n          '. This generally indicates a bug.',\r\n      );\r\n    }\r\n\r\n    return realm;\r\n  }\r\n\r\n  async getRealmSlug() {\r\n    const realm = await this.findRealm();\r\n    return realm ? realm.slug : this.props.realm;\r\n  }\r\n\r\n  async load(refresh = false) {\r\n    this.setState({\r\n      isLoading: true,\r\n    });\r\n\r\n    const realm = await this.getRealmSlug();\r\n    this.setState({\r\n      realmSlug: realm,\r\n    });\r\n\r\n    const urlEncodedName = encodeURIComponent(this.props.name);\r\n    const urlEncodedRealm = encodeURIComponent(realm);\r\n\r\n    return fetchWcl(\r\n      `parses/character/${urlEncodedName}/${urlEncodedRealm}/${this.props.region}`,\r\n      {\r\n        includeCombatantInfo: true,\r\n        metric: this.state.metric,\r\n        zone: this.state.activeZoneID,\r\n        timeframe: 'historical',\r\n        _: refresh ? Number(new Date()) : undefined,\r\n        // Always refresh since requiring a manual refresh is unclear and unfriendly to users and they cache hits are low anyway\r\n        // _: +new Date(), // disabled due to Uldir raid release hitting cap all the time\r\n      },\r\n    )\r\n      .then(rawParses => {\r\n        if (rawParses.length === 0) {\r\n          this.setState({\r\n            parses: [],\r\n            isLoading: false,\r\n            error: ERRORS.NO_PARSES_FOR_TIER,\r\n          });\r\n          return;\r\n        }\r\n        if (rawParses.hidden) {\r\n          this.setState({\r\n            isLoading: false,\r\n            error: ERRORS.CHARACTER_HIDDEN,\r\n          });\r\n          return;\r\n        }\r\n\r\n        if (this.state.class !== '') {\r\n          //only update parses when class was already parsed (since its only a metric/raid change)\r\n          const parses = this.changeParseStructure(rawParses, this.state.class);\r\n          this.setState({\r\n            parses: parses,\r\n            error: null,\r\n            isLoading: false,\r\n          });\r\n          return;\r\n        }\r\n\r\n        const charClass = rawParses[0].class;\r\n        const specs = Object.values(SPECS)\r\n          .filter(e => e.className === charClass)\r\n          // eslint-disable-next-line no-restricted-syntax\r\n          .filter((item, index, self) => self.indexOf(item) === index)\r\n          .map(e => e.specName);\r\n\r\n        const parses = this.changeParseStructure(rawParses, charClass);\r\n\r\n        this.appendHistory({\r\n          name: this.props.name,\r\n          realm: this.props.realm,\r\n          region: this.props.region,\r\n          class: charClass,\r\n        });\r\n\r\n        this.setState({\r\n          specs: specs,\r\n          activeSpec: specs.map(elem => elem.replace(' ', '')),\r\n          class: charClass,\r\n          parses: parses,\r\n          isLoading: false,\r\n          error: null,\r\n        });\r\n      })\r\n      .catch(err => {\r\n        if (err instanceof CharacterNotFoundError) {\r\n          this.setState({\r\n            error: ERRORS.CHARACTER_NOT_FOUND,\r\n            isLoading: false,\r\n          });\r\n          return;\r\n        }\r\n        captureException(err);\r\n        if (err instanceof WclApiError) {\r\n          this.setState({\r\n            error: ERRORS.WCL_API_ERROR,\r\n            errorMessage: err.message,\r\n            isLoading: false,\r\n          });\r\n        } else if (err instanceof UnknownApiError) {\r\n          this.setState({\r\n            error: ERRORS.UNKNOWN_API_ERROR,\r\n            errorMessage: err.message,\r\n            isLoading: false,\r\n          });\r\n        } else {\r\n          this.setState({\r\n            error: ERRORS.UNEXPECTED,\r\n            errorMessage: err.message,\r\n            isLoading: false,\r\n          });\r\n        }\r\n      });\r\n  }\r\n\r\n  render() {\r\n    let errorMessage;\r\n    if (this.state.error === ERRORS.CHARACTER_NOT_FOUND) {\r\n      errorMessage = (\r\n        <Trans id=\"interface.characterParses.characterParses.errors.characterNotFoundDetails\">\r\n          Please check your input and make sure that you've selected the correct\r\n          region and realm.\r\n          <br />\r\n          If your input was correct, then make sure that someone in your raid\r\n          logged the fight for you or check{' '}\r\n          <a\r\n            href=\"https://www.warcraftlogs.com/help/start/\"\r\n            target=\"_blank\"\r\n            rel=\"noopener noreferrer\"\r\n          >\r\n            Warcraft Logs guide\r\n          </a>{' '}\r\n          to get started with logging on your own.\r\n          <br />\r\n          <br />\r\n          When you know for sure that you have logs on Warcraft Logs and you\r\n          still get this error, please message us on{' '}\r\n          <a\r\n            href=\"https://discord.gg/AxphPxU\"\r\n            target=\"_blank\"\r\n            rel=\"noopener noreferrer\"\r\n          >\r\n            Discord\r\n          </a>{' '}\r\n          or create an issue on{' '}\r\n          <a\r\n            href=\"https://github.com/WoWAnalyzer/WoWAnalyzer\"\r\n            target=\"_blank\"\r\n            rel=\"noopener noreferrer\"\r\n          >\r\n            Github\r\n          </a>\r\n          .\r\n        </Trans>\r\n      );\r\n    } else if (this.state.error === ERRORS.NOT_RESPONDING) {\r\n      errorMessage = (\r\n        <Trans id=\"interface.characterParses.characterParses.errors.notRespondingDetails\">\r\n          It looks like we couldn't get a response in time from the API, this\r\n          usually happens when the servers are under heavy load.\r\n          <br />\r\n          <br />\r\n          You could try and enter your report-code manually{' '}\r\n          <Link to=\"/\">here</Link>.<br />\r\n          That would bypass the load-intensive character lookup and we should be\r\n          able to analyze your report.\r\n          <br />\r\n        </Trans>\r\n      );\r\n    } else if (this.state.error === ERRORS.CHARACTER_HIDDEN) {\r\n      errorMessage = (\r\n        <Trans id=\"interface.characterParses.characterParses.errors.characterHiddenDetails\">\r\n          This character is hidden on warcraftlogs and we can't access the\r\n          parses.\r\n          <br />\r\n          <br />\r\n          You don't know how to make your character visible again? Check{' '}\r\n          <a\r\n            href=\"https://www.warcraftlogs.com/help/hidingcharacters/\"\r\n            target=\"_blank\"\r\n            rel=\"noopener noreferrer\"\r\n          >\r\n            Warcraft Logs{' '}\r\n          </a>{' '}\r\n          and hit the 'Refresh' button above once you're done.\r\n        </Trans>\r\n      );\r\n    } else if (\r\n      this.state.error === ERRORS.WCL_API_ERROR ||\r\n      this.state.error === ERRORS.UNKNOWN_API_ERROR ||\r\n      this.state.error === ERRORS.UNEXPECTED\r\n    ) {\r\n      errorMessage = (\r\n        <Trans id=\"interface.characterParses.characterParses.errors.details\">\r\n          {this.state.errorMessage} Please message us on{' '}\r\n          <a\r\n            href=\"https://discord.gg/AxphPxU\"\r\n            target=\"_blank\"\r\n            rel=\"noopener noreferrer\"\r\n          >\r\n            Discord\r\n          </a>{' '}\r\n          or create an issue on{' '}\r\n          <a\r\n            href=\"https://github.com/WoWAnalyzer/WoWAnalyzer\"\r\n            target=\"_blank\"\r\n            rel=\"noopener noreferrer\"\r\n          >\r\n            Github\r\n          </a>{' '}\r\n          if this issue persists and we will fix it, eventually.\r\n        </Trans>\r\n      );\r\n    } else if (\r\n      this.state.error === ERRORS.NO_PARSES_FOR_TIER ||\r\n      this.filterParses.length === 0\r\n    ) {\r\n      errorMessage = (\r\n        <Trans id=\"interface.characterParses.characterParses.errors.noParsesForTierDetails\">\r\n          Please check your filters and make sure that you logged those fights\r\n          on Warcraft Logs.\r\n          <br />\r\n          <br />\r\n          Don't know how to log your fights? Check{' '}\r\n          <a\r\n            href=\"https://www.warcraftlogs.com/help/start/\"\r\n            target=\"_blank\"\r\n            rel=\"noopener noreferrer\"\r\n          >\r\n            Warcraft Logs guide\r\n          </a>{' '}\r\n          to get started.\r\n        </Trans>\r\n      );\r\n    }\r\n\r\n    let battleNetUrl = `https://worldofwarcraft.com/en-${this.props.region}/character/${this.state.realmSlug}/${this.props.name}`;\r\n    if (this.props.region === 'CN') {\r\n      battleNetUrl = `https://www.wowchina.com/zh-cn/character/${this.state.realmSlug}/${this.props.name}`;\r\n    }\r\n\r\n    return (\r\n      <div className=\"results\">\r\n        <header>\r\n          <div className=\"background\">\r\n            <div\r\n              className=\"img\"\r\n              style={{\r\n                backgroundImage: `url(${this.state.image})`,\r\n                backgroundPosition: 'center center',\r\n              }}\r\n            />\r\n          </div>\r\n          <div className=\"info container\">\r\n            <div className=\"boss\">\r\n              <a\r\n                href={`https://www.warcraftlogs.com/character/${this.props.region}/${this.state.realmSlug}/${this.props.name}`}\r\n                target=\"_blank\"\r\n                rel=\"noopener noreferrer\"\r\n                className=\"btn\"\r\n                style={{ fontSize: 22 }}\r\n              >\r\n                <WarcraftLogsIcon /> Warcraft Logs\r\n              </a>\r\n              <br />\r\n              <a\r\n                href={battleNetUrl}\r\n                target=\"_blank\"\r\n                rel=\"noopener noreferrer\"\r\n                className=\"btn\"\r\n                style={{ fontSize: 22 }}\r\n              >\r\n                <ArmoryIcon /> Armory\r\n              </a>\r\n              <br />\r\n              {this.props.region !== 'CN' && (\r\n                <a\r\n                  href={`https://www.wipefest.net/character/${this.props.name}/${this.state.realmSlug}/${this.props.region}`}\r\n                  target=\"_blank\"\r\n                  rel=\"noopener noreferrer\"\r\n                  className=\"btn\"\r\n                  style={{ fontSize: 22 }}\r\n                >\r\n                  <WipefestIcon /> Wipefest\r\n                </a>\r\n              )}\r\n            </div>\r\n            <div className=\"player\">\r\n              <div className=\"avatar\">\r\n                <img src={this.state.avatarImage} alt=\"\" />\r\n              </div>\r\n              <div className=\"details\">\r\n                <h2>\r\n                  {this.props.region} - {this.props.realm}\r\n                </h2>\r\n                <h1 className=\"name\">{this.props.name}</h1>\r\n              </div>\r\n            </div>\r\n          </div>\r\n          <nav>\r\n            <div className=\"container\">\r\n              <ul>\r\n                <li>\r\n                  Raid\r\n                  <select\r\n                    className=\"form-control\"\r\n                    value={this.state.activeZoneID}\r\n                    onChange={e =>\r\n                      this.updateZoneMetricBoss(\r\n                        Number(e.target.value),\r\n                        this.state.metric,\r\n                        BOSS_DEFAULT_ALL_BOSSES,\r\n                      )\r\n                    }\r\n                  >\r\n                    {Object.values(ZONES)\r\n                      .reverse()\r\n                      .map(elem => (\r\n                        <option key={elem.id} value={elem.id}>\r\n                          {elem.name}\r\n                        </option>\r\n                      ))}\r\n                  </select>\r\n                </li>\r\n                <li>\r\n                  Boss\r\n                  <select\r\n                    className=\"form-control\"\r\n                    value={this.state.activeEncounter}\r\n                    onChange={e =>\r\n                      this.setState({ activeEncounter: e.target.value })\r\n                    }\r\n                  >\r\n                    <option value={BOSS_DEFAULT_ALL_BOSSES} defaultValue>\r\n                      All bosses\r\n                    </option>\r\n                    {this.zoneBosses.map(e => (\r\n                      <option key={e.id} value={e.name}>\r\n                        {e.name}\r\n                      </option>\r\n                    ))}\r\n                  </select>\r\n                </li>\r\n                <li>\r\n                  Metric\r\n                  <select\r\n                    className=\"form-control\"\r\n                    value={this.state.metric}\r\n                    onChange={e =>\r\n                      this.updateZoneMetricBoss(\r\n                        this.state.activeZoneID,\r\n                        e.target.value,\r\n                        this.state.activeEncounter,\r\n                      )\r\n                    }\r\n                  >\r\n                    <option defaultValue value=\"dps\">\r\n                      DPS\r\n                    </option>\r\n                    <option value=\"hps\">HPS</option>\r\n                  </select>\r\n                </li>\r\n                <li>\r\n                  Sort by\r\n                  <select\r\n                    className=\"form-control\"\r\n                    value={this.state.sortBy}\r\n                    onChange={e =>\r\n                      this.setState({ sortBy: Number(e.target.value) })\r\n                    }\r\n                  >\r\n                    <option defaultValue value={ORDER_BY.DATE}>\r\n                      Date\r\n                    </option>\r\n                    <option value={ORDER_BY.DPS}>DPS / HPS</option>\r\n                    <option value={ORDER_BY.PERCENTILE}>Percentile</option>\r\n                  </select>\r\n                </li>\r\n              </ul>\r\n            </div>\r\n          </nav>\r\n        </header>\r\n        <div className=\"container\">\r\n          <div className=\"row\">\r\n            <div className=\"col-md-12\">\r\n              <div className=\"panel character-filters\">\r\n                {this.state.specs.map((elem, index) => (\r\n                  <div\r\n                    key={index}\r\n                    onClick={() => this.updateSpec(elem.replace(' ', ''))}\r\n                    className={\r\n                      this.state.activeSpec.includes(elem.replace(' ', ''))\r\n                        ? 'selected spec-filter character-filter'\r\n                        : 'spec-filter character-filter'\r\n                    }\r\n                    style={{ backgroundImage: `url(${this.iconPath(elem)})` }}\r\n                  >\r\n                    {elem}\r\n                  </div>\r\n                ))}\r\n\r\n                {Object.values(DIFFICULTIES).map(difficultyId => (\r\n                  <div\r\n                    key={difficultyId}\r\n                    onClick={() => this.updateDifficulty(difficultyId)}\r\n                    className={\r\n                      this.state.activeDifficultyIds.includes(difficultyId)\r\n                        ? 'selected diff-filter character-filter'\r\n                        : 'diff-filter character-filter'\r\n                    }\r\n                  >\r\n                    {getDifficultyLabel(difficultyId)}\r\n                  </div>\r\n                ))}\r\n              </div>\r\n            </div>\r\n          </div>\r\n          <div className=\"row\">\r\n            <div className=\"col-md-12\">\r\n              {this.state.error && (\r\n                <span>\r\n                  <Link to=\"/\">\r\n                    <Trans id=\"interface.characterParses.characterParses.home\">Home</Trans>\r\n                  </Link>{' '}\r\n                  &gt;{' '}\r\n                  <span>\r\n                    {this.props.region} &gt; {this.props.realm} &gt;{' '}\r\n                    {this.props.name}\r\n                  </span>\r\n                  <br />\r\n                  <br />\r\n                </span>\r\n              )}\r\n              <div className=\"panel\" style={{ overflow: 'auto' }}>\r\n                {!this.state.isLoading && (\r\n                  <div className=\"panel-heading\">\r\n                    <div className=\"pull-right\">\r\n                      <Link\r\n                        to=\"\"\r\n                        onClick={e => {\r\n                          e.preventDefault();\r\n                          this.load(true);\r\n                        }}\r\n                      >\r\n                        <span\r\n                          className=\"glyphicon glyphicon-refresh\"\r\n                          aria-hidden=\"true\"\r\n                        />{' '}\r\n                        <Trans id=\"interface.characterParses.characterParses.refresh\">Refresh</Trans>\r\n                      </Link>\r\n                    </div>\r\n                    <h1 style={{ display: 'inline-block' }}>\r\n                      {this.state.error ? (\r\n                        i18n._(this.state.error)\r\n                      ) : (\r\n                        <Trans id=\"interface.characterParses.characterParses.parses\">Parses</Trans>\r\n                      )}\r\n                    </h1>\r\n                    <small>\r\n                      <Trans id=\"interface.characterParses.characterParses.parsesDetails\">\r\n                        This page will only show fights that have been ranked by\r\n                        Warcraft Logs. Wipes are not included and during busy\r\n                        periods there might be a delay before new reports\r\n                        appear. Manually find the report on Warcraft Logs and\r\n                        copy the direct report link to analyze a fight missing\r\n                        from this page.\r\n                      </Trans>\r\n                    </small>\r\n                  </div>\r\n                )}\r\n                <div className=\"panel-body\">\r\n                  <div\r\n                    className=\"flex-main\"\r\n                    style={{ padding: errorMessage ? 20 : 0 }}\r\n                  >\r\n                    {this.state.isLoading && !this.state.error && (\r\n                      <div\r\n                        style={{\r\n                          textAlign: 'center',\r\n                          fontSize: '2em',\r\n                          margin: '20px 0',\r\n                        }}\r\n                      >\r\n                        <ActivityIndicator\r\n                          text={<Trans id=\"interface.characterParses.characterParses.fetchingLogs\">Fetching logs...</Trans>}\r\n                        />\r\n                      </div>\r\n                    )}\r\n                    {!this.state.isLoading && errorMessage}\r\n                    {!this.state.isLoading && (\r\n                      <ParsesList\r\n                        parses={this.filterParses}\r\n                        class={this.state.class}\r\n                        metric={this.state.metric}\r\n                        trinkets={this.state.trinkets}\r\n                      />\r\n                    )}\r\n                  </div>\r\n                </div>\r\n              </div>\r\n            </div>\r\n          </div>\r\n        </div>\r\n      </div>\r\n    );\r\n  }\r\n}\r\n\r\nexport default connect(null, {\r\n  appendReportHistory,\r\n})(CharacterParses);\r\n","import React from 'react';\r\n\r\nimport DocumentTitle from 'interface/DocumentTitle';\r\nimport NavigationBar from 'interface/layout/NavigationBar';\r\n\r\nimport CharacterParses from '../CharacterParses';\r\n\r\ninterface CharacterPageProps {\r\n  region: string;\r\n  realm: string;\r\n  name: string;\r\n}\r\n\r\nconst CharacterPage = ({\r\n  region,\r\n  realm,\r\n  name,\r\n  ...others\r\n}: CharacterPageProps) => (\r\n  <>\r\n    <DocumentTitle title={`${name}-${realm} (${region})`} />\r\n\r\n    <NavigationBar />\r\n\r\n    <CharacterParses region={region} realm={realm} name={name} {...others} />\r\n  </>\r\n);\r\n\r\nexport default CharacterPage;\r\n","//expects a percentile between 0 - 100 and returns the class to color the text accordingly\r\nexport default function rankingColor(percentage: number): string {\r\n  if (percentage < 0.25) {\r\n    return 'parse-grey';\r\n  } else if (percentage < 0.50) {\r\n    return 'parse-green';\r\n  } else if (percentage < 0.75) {\r\n    return 'parse-blue';\r\n  } else if (percentage < 0.95) {\r\n    return 'parse-purple';\r\n  } else if (percentage < 1.00) {\r\n    return 'parse-orange';\r\n  } else if (percentage >= 1.00) {\r\n    return 'parse-artifact';\r\n  } else {\r\n    return 'parse-none';\r\n  }\r\n}\r\n","// a butchered version of https://www.warcraftlogs.com:443/v1/zones\r\n// only includes the raids from Shadowlands (showing older logs wouldn't make sense)\r\n\r\n// TODO: Refactor this (it's kind of strange and feels misplaced)\r\n\r\ninterface Encounter {\r\n  id: number;\r\n  name: string;\r\n  npcID: number;\r\n}\r\n\r\ninterface Bracket {\r\n  min: number;\r\n  max: number;\r\n  bucket: number;\r\n  type: string;\r\n}\r\n\r\ninterface Partition {\r\n  name: string;\r\n  compact: string;\r\n  default?: boolean;\r\n}\r\n\r\ninterface Zone {\r\n  id: number;\r\n  name: string;\r\n  frozen?: boolean;\r\n  encounters: Encounter[];\r\n  brackets: Bracket;\r\n  partitions?: Partition[];\r\n}\r\n\r\nconst ZONES: Zone[] = [\r\n  {\r\n    'id': 26,\r\n    'name': 'Castle Nathria',\r\n    'frozen': false,\r\n    'brackets': {\r\n      'min': 173,\r\n      'max': 230,\r\n      'bucket': 3,\r\n      'type': 'Item Level',\r\n    },\r\n    'encounters': [\r\n      {\r\n        'id': 2398,\r\n        'name': 'Shriekwing',\r\n        'npcID': 164406,\r\n      },\r\n      {\r\n        'id': 2418,\r\n        'name': 'Huntsman Altimor',\r\n        'npcID': 165066,\r\n      },\r\n      {\r\n        'id': 2383,\r\n        'name': 'Hungering Destroyer',\r\n        'npcID': 164261,\r\n      },\r\n      {\r\n        'id': 2402,\r\n        'name': 'Sun King\\'s Salvation',\r\n        'npcID': 168973, //High Torturer Darithos\r\n      },\r\n      {\r\n        'id': 2405,\r\n        'name': 'Artificer Xy\\'mox',\r\n        'npcID': 166644,\r\n      },\r\n      {\r\n        'id': 2406,\r\n        'name': 'Lady Inerva Darkvein',\r\n        'npcID': 165521,\r\n      },\r\n      {\r\n        'id': 2412,\r\n        'name': 'The Council of Blood',\r\n        'npcID': 166969,\r\n      },\r\n      {\r\n        'id': 2399,\r\n        'name': 'Sludgefist',\r\n        'npcID': 164407,\r\n      },\r\n      {\r\n        'id': 2417,\r\n        'name': 'Stone Legion Generals',\r\n        'npcID': 168113,\r\n      },\r\n      {\r\n        'id': 2407,\r\n        'name': 'Sire Denathrius',\r\n        'npcID': 167406,\r\n      },\r\n    ],\r\n  },\r\n];\r\n\r\nexport default ZONES;\r\n"],"sourceRoot":""}