{"version":3,"sources":["parser/hunter/marksmanship/modules/core/SpellUsable.tsx","parser/hunter/marksmanship/modules/Abilities.tsx","parser/hunter/marksmanship/modules/features/Channeling.tsx","parser/hunter/marksmanship/modules/features/CooldownThroughputTracker.tsx","parser/hunter/marksmanship/modules/features/AlwaysBeCasting.tsx","parser/hunter/shared/modules/features/CancelledCasts.tsx","parser/hunter/marksmanship/modules/Buffs.tsx","parser/hunter/marksmanship/modules/talents/SteadyFocus.tsx","parser/hunter/marksmanship/modules/talents/LethalShots.tsx","parser/hunter/marksmanship/modules/talents/SerpentSting.tsx","parser/hunter/marksmanship/modules/talents/CallingTheShots.tsx","parser/hunter/marksmanship/modules/talents/DeadEye.tsx","parser/hunter/marksmanship/modules/spells/PreciseShots.tsx","parser/hunter/marksmanship/modules/checklist/Component.tsx","parser/hunter/marksmanship/modules/checklist/Module.tsx","parser/hunter/marksmanship/modules/resources/MarksmanshipFocusCapTracker.tsx","parser/hunter/marksmanship/modules/resources/Focus.tsx","parser/hunter/marksmanship/modules/resources/MarksmanshipFocusUsage.tsx","parser/hunter/marksmanship/modules/spells/RapidFire.tsx","parser/hunter/marksmanship/modules/spells/SteadyShot.tsx","parser/hunter/marksmanship/modules/spells/Trueshot.tsx","parser/hunter/marksmanship/modules/spells/LoneWolf.tsx","parser/hunter/marksmanship/modules/spells/AimedShot.tsx","parser/hunter/marksmanship/modules/talents/Volley.tsx","parser/hunter/marksmanship/modules/talents/ExplosiveShot.tsx","parser/hunter/marksmanship/modules/talents/LockAndLoad.tsx","parser/hunter/marksmanship/modules/talents/MasterMarksman.tsx","parser/hunter/marksmanship/modules/talents/DoubleTap.tsx","parser/hunter/marksmanship/modules/talents/CarefulAim.tsx","common/abbreviateLongNames.ts","parser/hunter/marksmanship/modules/talents/ChimaeraShot.tsx","parser/hunter/marksmanship/modules/talents/Streamline.tsx","parser/hunter/marksmanship/modules/spells/conduits/BrutalProjectiles.tsx","parser/hunter/marksmanship/modules/spells/conduits/DeadlyChain.tsx","parser/hunter/marksmanship/modules/spells/conduits/PowerfulPrecision.tsx","parser/hunter/marksmanship/modules/spells/conduits/SharpshootersFocus.tsx","parser/hunter/marksmanship/modules/items/SerpentstalkersTrickery.tsx","parser/hunter/marksmanship/modules/items/SurgingShots.tsx","parser/hunter/marksmanship/modules/items/SecretsOfTheUnblinkingVigil.tsx","parser/hunter/marksmanship/modules/items/EagletalonsTrueFocus.tsx","parser/hunter/marksmanship/modules/items/NesingwarysTrappingApparatus.tsx","parser/hunter/marksmanship/CombatLogParser.tsx","parser/core/calculateEffectiveDamage.js","interface/icons/Uptime.js","interface/statistics/components/BoringValueText/index.tsx","interface/statistics/components/ConduitSpellText/index.tsx","parser/hunter/survival/constants.tsx","parser/hunter/beastmastery/constants.tsx","interface/statistics/components/DonutChart/index.js","interface/others/charts/OneVariableBinomialChart.js","parser/shared/modules/helpers/Probability.tsx","parser/shared/ExecuteHelper.ts","interface/others/AverageTargetsHit.js","parser/shared/modules/resources/resourcetracker/ResourceSuggest.tsx","parser/shared/modules/resources/resourcetracker/RegenResourceCapTracker.js","parser/hunter/shared/modules/resources/FocusTracker.tsx","parser/hunter/shared/modules/spells/covenants/venthyr/FlayedShot.tsx","parser/shared/modules/CancelledCasts.tsx","parser/hunter/shared/modules/resources/FocusDetails.tsx","parser/hunter/shared/modules/resources/FocusCapTracker.tsx","parser/hunter/shared/modules/core/DeathTracker.tsx","parser/hunter/shared/modules/talents/NaturalMending.tsx","parser/hunter/shared/modules/talents/Trailblazer.tsx","parser/hunter/shared/modules/talents/AMurderOfCrows.tsx","parser/hunter/shared/modules/talents/BornToBeWild.tsx","parser/hunter/shared/modules/talents/BindingShot.tsx","parser/hunter/shared/modules/spells/KillShot.tsx","parser/hunter/shared/modules/resources/SpellFocusCost.tsx","parser/hunter/shared/modules/spells/covenants/kyrian/ResonatingArrow.tsx","parser/hunter/shared/modules/spells/covenants/necrolord/DeathChakrams.tsx","parser/hunter/shared/modules/spells/covenants/nightfae/WildSpirits.tsx","parser/hunter/shared/modules/spells/conduits/kyrian/EnfeebledMark.tsx","parser/hunter/shared/modules/spells/conduits/venthyr/EmpoweredRelease.tsx","parser/hunter/shared/modules/spells/conduits/necrolord/NecroticBarrage.tsx","parser/hunter/shared/modules/spells/conduits/nightfae/SpiritAttunement.tsx","parser/hunter/shared/modules/items/SoulforgeEmbers.tsx","parser/shared/modules/resources/ResourceUsage.tsx","parser/hunter/shared/modules/resources/FocusUsage.tsx","parser/hunter/shared/modules/talents/Barrage.tsx"],"names":["SpellUsable","lastPotentialTriggerForRapidFireReset","rapidFireResets","event","spellId","ability","guid","this","selectedCombatant","hasLegendaryByBonusID","SPELLS","SURGING_SHOTS_EFFECT","bonusID","AIMED_SHOT","id","RAPID_FIRE","cooldownTriggerEvent","isOnCooldown","endCooldown","undefined","timestamp","CoreSpellUsable","dependencies","Abilities","combatant","spell","category","SPELL_CATEGORIES","ROTATIONAL","cooldown","haste","charges","gcd","base","castEfficiency","suggestion","recommendedEfficiency","ARCANE_SHOT","buffSpellId","PRECISE_SHOTS","enabled","hasTalent","CHIMAERA_SHOT_MM_TALENT","STEADY_SHOT","STEADY_FOCUS_BUFF","MULTISHOT_MM","ROTATIONAL_AOE","TRUESHOT","COOLDOWNS","static","EXHILARATION","DEFENSIVE","isDefensive","ASPECT_OF_THE_TURTLE","BORN_TO_BE_WILD_TALENT","SURVIVAL_OF_THE_FITTEST_LONE_WOLF","SURVIVAL_OF_THE_FITTEST","DISENGAGE","UTILITY","BURSTING_SHOT","CONCUSSIVE_SHOT","COUNTER_SHOT","MISDIRECTION","ASPECT_OF_THE_CHEETAH","FREEZING_TRAP","TAR_TRAP","FLARE","HUNTERS_MARK","EXPLOSIVE_SHOT_TALENT","SERPENT_STING_TALENT","DOUBLE_TAP_TALENT","BARRAGE_TALENT","VOLLEY_TALENT","CAMOUFLAGE_TALENT","PRIMAL_RAGE_1","PRIMAL_RAGE_2","MASTERS_CALL","INTIMIDATION","CALL_PET_1","CALL_PET_2","CALL_PET_3","CALL_PET_4","CALL_PET_5","DISMISS_PET","MEND_PET","CoreAbilities","Channeling","options","addEventListener","Events","removebuff","by","SELECTED_PLAYER","onRemoveBuff","beginChannel","isChannelingSpell","endChannel","CoreChanneling","CooldownThroughputTracker","CoreCooldownThroughputTracker","cooldownSpells","summary","BUILT_IN_SUMMARY_TYPES","DAMAGE","ignoredSpells","BINDING_SHOT_TETHER","BINDING_SHOT_ROOT","AlwaysBeCasting","when","suggestionThresholds","addSuggestion","suggest","actual","recommended","SpellLink","icon","i18n","_","formatPercentage","activeTimePercentage","isLessThan","minor","average","major","style","ThresholdStyle","PERCENTAGE","CoreAlwaysBeCasting","CancelledCasts","IGNORED_ABILITIES","CASTS_THAT_ARENT_CASTS","cancelledPercentage","tooltipText","Object","values","cancelledSpellList","map","cancelledSpell","key","spellName","amount","Statistic","position","STATISTIC_ORDER","CORE","size","tooltip","totalCasts","castsCancelled","BoringValueText","label","Cross","CoreCancelledCasts","Buffs","timelineHighlight","triggeredBySpellId","LOCK_AND_LOAD_BUFF","LOCK_AND_LOAD_TALENT","keys","BLOODLUST_BUFFS","item","Number","CoreBuffs","SteadyFocus","active","STEADY_FOCUS_TALENT","OPTIONAL","STATISTIC_CATEGORY","TALENTS","BoringSpellValueText","Haste","avgHaste","uptimeThresholds","getBuffUptime","owner","fightDuration","uptime","STEADY_FOCUS_HASTE_PERCENT","Analyzer","LethalShots","procChances","lastDamageEvent","badCasts","shotInFlight","spellUsable","LETHAL_SHOTS_TALENT","cast","castChecker","damage","CHIMAERA_SHOT_MM_NATURE_DAMAGE","CHIMAERA_SHOT_MM_FROST_DAMAGE","onPotentialProc","ARCANE_SHOT_MAX_TRAVEL_TIME","MS_BUFFER","Math","round","LETHAL_SHOTS_CHANCE","LETHAL_SHOTS_REDUCTION","toFixed","wastedPotentialCDR","isGreaterThan","DECIMAL","SerpentSting","serpentStingTargets","timesRefreshed","nonPandemicRefresh","casts","enemies","onCast","onDamage","applydebuff","onApplyDebuff","removedebuff","onRemoveDebuff","refreshdebuff","onRefreshDebuff","absorbed","targetInstance","serpentStingTarget","encodeTargetString","targetID","serpentStingDuration","SERPENT_STING_MM_BASE_DURATION","splice","timeRemaining","SERPENT_STING_MM_PANDEMIC","pandemicSerpentStingDuration","min","nonPandemicThreshold","uptimeThreshold","ItemDamageDone","uptimePercentage","NUMBER","Enemies","CallingTheShots","effectiveTrueshotReductionMs","wastedTrueshotReductionMs","reductionTimestamp","CALLING_THE_SHOTS_TALENT","onCTSPotentialProc","cooldownRemaining","CTS_CDR_MS","effectiveReductionMs","reduceCooldown","callingTheShotsEfficacyThresholds","formatNumber","callingTheShotsEfficacy","DeadEye","deadEyeEffectiveCDR","deadEyePotentialCDR","averageAimedShotCD","abilities","DEAD_EYE_TALENT","deadEyeEfficacy","PreciseShots","buffsActive","buffsSpent","minOverwrittenProcs","maxOverwrittenProcs","buffedShotInFlight","applybuff","onPreciseShotsApplication","onPreciseShotsRemoval","removebuffstack","onPreciseShotsStackRemoval","applybuffstack","onPreciseShotsStackApplication","onPreciseCast","checkForBuff","onPreciseDamage","PRECISE_SHOTS_ASSUMED_PROCS","hasBuff","calculateEffectiveDamage","PRECISE_SHOTS_MODIFIER","preciseShotsUtilizationPercentage","MarksmanshipChecklist","thresholds","AbilityRequirement","props","GenericCastEfficiencyRequirement","getCastEfficiencyForSpellId","Rule","name","description","href","target","rel","KILL_SHOT_MM_BM","A_MURDER_OF_CROWS_TALENT","Requirement","preciseShotsThresholds","serpentStingUptimeThresholds","serpentStingNonPandemicThresholds","callingTheShotsThresholds","deadEyeThresholds","lethalShotsThresholds","steadyFocusThresholds","downtimeSuggestionThresholds","cancelledCastsThresholds","focusGeneratorWasteThresholds","focusNaturalRegenWasteThresholds","PreparationRule","Checklist","combatants","preparationRuleAnalyzer","alwaysBeCasting","cancelledCasts","preciseShots","steadyFocus","lethalShots","serpentSting","callingTheShots","deadEye","focusGeneratorDetails","focusCapTracker","Component","selected","preciseShotsWastedThreshold","deadEyeEfficacyThresholds","BaseChecklist","Combatants","CastEfficiency","PreparationRuleAnalyzer","FocusDetails","FocusCapTracker","MarksmanshipFocusCapTracker","regenRate","HUNTER_BASE_FOCUS_REGEN","TRUESHOT_FOCUS_INCREASE","Focus","focusTracker","mmFocusExtraSuggestion","resourceSuggest","STEADY_SHOT_FOCUS","avg","extraSuggestion","RAPID_FIRE_FOCUS","FocusTracker","MarksmanshipFocusUsage","SharedHunterFocusUsage","listOfResourceSpenders","LIST_OF_FOCUS_SPENDERS_MM","RapidFire","lastReductionTimestamp","effectiveCDRFromTrueshot","wastedCDRFromTrueshot","currentFocusTicks","effectiveFocusGain","focusWasted","additionalFocusFromTrueshot","possibleAdditionalFocusFromTrueshot","additionalFocusFromNesingwary","possibleAdditionalFocusFromNesingwary","lastFocusTickTimestamp","any","onEvent","onAffectingBuffChange","refreshbuff","to","energize","onEnergize","modRate","TRUESHOT_RAPID_FIRE_RECHARGE_INCREASE","spellReductionSpeed","reduceRapidFireCooldown","maxReductionMs","type","EventType","RemoveBuff","resourceChange","waste","hasTrueshot","hasNesingwary","NESINGWARYS_TRAPPING_APPARATUS_ENERGIZE","RAPID_FIRE_FOCUS_PER_TICK","max","ceil","NESINGWARY_FOCUS_GAIN_MULTIPLIER","SteadyShot","STEADY_SHOT_FOCUS_REGEN","Trueshot","trueshotCasts","aimedShotsPrTS","focusGained","passiveFocusAttributedToTrueshot","possiblePassiveFocusAttributedToTrueshot","lastKnownFocusAmount","lastCheckedPassiveRegenTimestamp","focusAtLastCheck","rapidFire","steadyShot","marksmanshipFocusCapTracker","onAimedShotCast","onTrueshotCast","focusCheck","resource","classResources","find","RESOURCE_TYPES","FOCUS","timeSinceLastCheck","possibleTSGainSinceLastCheck","naturalRegenRate","naturalRegenSinceLastCheck","HUNTER_BASE_FOCUS_MAX","SpellIcon","noLink","averageAimedShots","ResourceIcon","effectiveFocus","possibleFocus","isNaN","isFinite","LoneWolf","lwApplicationTimestamp","loneWolfModifier","lwAppliedOrRemoved","LONE_WOLF_BUFF","onLoneWolfApplication","onLoneWolfRemoval","LONE_WOLF_AFFECTED_SPELLS","fightend","deactivateIfNoDamage","MAX_LONE_WOLF_MODIFIER","floor","LONE_WOLF_RAMP_INTERVAL_MS","LONE_WOLF_INCREASE_PER_RAMP","START_LONE_WOLF_MODIFIER","AimedShot","effectiveCDRFromTrueshotDeadEye","wastedCDRFromTrueshotDeadEye","totalCooldown","averageCooldown","DEAD_EYE_BUFF","TRUESHOT_AIMED_SHOT_RECHARGE_INCREASE","DEAD_EYE_AIMED_SHOT_RECHARGE_INCREASE","reduceAimedShotCooldown","attributeDeadEyeAimedShotCDR","expectedCooldownDuration","getExpectedCooldownDuration","meta","isEnhancedCast","isInefficientCast","hasPreciseShotsBuff","hasTrueshotBuff","inefficientCastReason","Volley","VOLLEY_DAMAGE","onVolleyDamage","ExplosiveShot","hits","EXPLOSIVE_SHOT_DAMAGE","AverageTargetsHit","unique","LockAndLoad","hasLnLBuff","noGainLNLProcs","totalProcs","autoShots","AUTO_SHOT","autoshotDamage","onAimedCast","onLNLApplication","onLNLRefresh","newChargeCDR","expectedProcs","binomialCDF","LNL_PROC_CHANCE","dropdown","padding","plotOneVariableBinomChart","expectedProcCount","MasterMarksman","MASTER_MARKSMAN_TALENT","MASTER_MARKSMAN_DEBUFF","onDebuffDamage","DoubleTap","activations","aimedUsage","RFUsage","onDoubleTapApplication","onRapidFireCast","totalUsage","height","marginTop","CarefulAim","caProcs","bossIDs","carefulAimPeriods","caDamage","aimedShotsInCA","timestampSub100","timestampSub70","statTracker","CAREFUL_AIM_TALENT","report","forEach","enemy","fights","fight","push","calculateCarefulAimPeriods","healthPercent","hitPoints","maxHitPoints","outsideCarefulAim","CAREFUL_AIM_THRESHOLD","includes","originalBossName","splitNames","trim","split","abbreviatedBossName","i","length","charAt","abbreviateBossNames","getEntity","damageFromCA","CA_MODIFIER","boss","start_time","end_time","className","entries","index","formatDuration","ExecuteHelper","StatTracker","executeSpells","executeSources","upperThreshold","modifiesDamage","damageModifier","ChimaeraShot","onChimaeraDamage","Streamline","aimedShotCastTimeSaved","STREAMLINE_TALENT","RAPID_FIRE_DAMAGE","onRapidFireDamage","STREAMLINE_RAPID_FIRE_DAMAGE_INCREASE","STREAMLINE_BUFF","hastepercent","current","trueshotIncrease","TRUESHOT_AIMED_SHOT_CAST_TIME_SPEED_UP","aimedShotCastTime","AIMED_SHOT_BASELINE_CAST_TIME","STREAMLINE_AIMED_SHOT_CAST_SPEED_UP","BrutalProjectiles","conduitRank","addedDamage","currentTick","procs","overwrittenProcs","usedProcs","conduitRankBySpellID","BRUTAL_PROJECTILES_CONDUIT","BRUTAL_PROJECTILES_NEXT_RF_BUFF","onApplyBrutalProjectiles","onRefreshBrutalProjectiles","BRUTAL_PROJECTILES_DURING_RF_BUFF","BRUTAL_PROJECTILES_RAMP_DAMAGE","COVENANTS","ConduitSpellText","rank","DeadlyChain","trickShotsCastTimestamp","firstHitConnected","DEADLY_CHAIN_CONDUIT","onTricksAffectedCast","onTricksAffectedDamage","TRICK_SHOTS_BUFF","ONE_SECOND_IN_MS","DEADLY_CHAIN_TRICKSHOTS_DAMAGE_INCREASE","TRICK_SHOTS_BASELINE_DAMAGE","PowerfulPrecision","POWERFUL_PRECISION_CONDUIT","onPotentialPreciseDamage","POWERFUL_PRECISION_DAMAGE_INCREASE","SharpshootersFocus","increasedTrueshotUptime","trueshotApplicationTimestamp","uptimeAddedBoolean","SHARPSHOOTERS_FOCUS_CONDUIT","onTrueshotApply","onTrueshotRemove","onFightEnd","onTrueshotRefresh","addTrueshotUptime","TRUESHOT_DURATION_BASELINE","maximumAddedTrueshotUptime","SHARPSHOOTERS_FOCUS_INCREASE_TRUESHOT_DURATION","SerpentstalkersTrickery","aimedShotTargets","SERPENTSTALKERS_TRICKERY_EFFECT","onSerpentStingDamage","onStingRemoval","indexOf","ITEMS","SurgingShots","aimedShotCasts","SURGING_SHOTS_DAMAGE_INCREASE","SURGING_SHOTS_RESET_CHANCE","SecretsOfTheUnblinkingVigil","aimedShotRefunds","totalPossibleAimedShotRefunds","focusSaved","unblinkingRefreshes","trickShotApplications","SECRETS_OF_THE_UNBLINKING_VIGIL_EFFECT","SECRETS_OF_THE_UNBLINKING_VIGIL_BUFF","applyOrRefreshSecretsBuff","applyTrickShots","castAimedShot","RefreshBuff","AIMED_SHOT_FOCUS_COST","SECRETS_UNBLINKING_PROC_CHANCE","EagletalonsTrueFocus","EAGLETALONS_TRUE_FOCUS_EFFECT","cost","EAGLETALONS_TRUE_FOCUS_COST_REDUCTION","NesingwarysTrappingApparatus","NESINGWARYS_TRAPPING_APPARATUS_EFFECT","CombatLogParser","CoreCombatLogParser","specModules","channeling","checklist","cooldownThroughputTracker","buffs","focusDetails","spellFocusCost","SpellFocusCost","focus","marksmanshipFocusUsage","deathTracker","DeathTracker","trueshot","loneWolf","aimedShot","killShot","KillShot","bindingShot","BindingShot","volley","explosiveShot","aMurderOfCrows","AMurderOfCrows","lockAndLoad","barrage","Barrage","masterMarksman","doubleTap","naturalMending","NaturalMending","trailblazer","Trailblazer","bornToBeWild","BornToBeWild","carefulAim","chimaeraShot","streamline","resonatingArrow","ResonatingArrow","deathChakrams","DeathChakrams","wildSpirits","WildSpirits","flayedShot","FlayedShot","empoweredRelease","EmpoweredRelease","enfeebledMark","EnfeebledMark","necroticBarrage","NecroticBarrage","spiritAttunement","SpiritAttunement","brutalProjectiles","deadlyChain","powerfulPrecision","sharpshootersFocus","nesingwarysTrappingApparatus","soulforgeEmbers","SoulforgeEmbers","surgingShots","serpentstalkersTrickery","secretsOfTheUnblinkingVigil","eagletalonsTrueFocus","arcaneTorrent","ArcaneTorrent","increase","raw","Icon","other","xmlns","viewBox","d","BoringValue","children","BUTCHERY_CARVE_MAX_TARGETS_HIT","COORDINATED_ASSAULT_DMG_MOD","COORDINATED_ASSAULT_BASELINE_DURATION","WILDFIRE_BOMB_LEEWAY_BUFFER","SV_KILL_COMMAND_FOCUS_GAIN","SV_SERPENT_STING_COST","SERPENT_STING_SV_PANDEMIC","SERPENT_STING_SV_BASE_DURATION","RAPTOR_MONGOOSE_VARIANTS","RAPTOR_STRIKE","RAPTOR_STRIKE_AOTE","MONGOOSE_BITE_TALENT","MONGOOSE_BITE_TALENT_AOTE","BASELINE_AOTE_CD","VIPERS_VENOM_COST_MULTIPLIER","VIPERS_VENOM_DAMAGE_MODIFIER","BOP_CA_EXTENSION_PER_CAST","SURVIVAL_CHAKRAM_TYPES","CHAKRAMS_TO_MAINTARGET","CHAKRAMS_BACK_FROM_MAINTARGET","CHAKRAMS_NOT_MAINTARGET","FLANKING_STRIKE_FOCUS_GAIN","MONGOOSE_BITE_MAX_TRAVEL_TIME","MONGOOSE_BITE_MAX_STACKS","GUERRILLA_TACTICS_INIT_HIT_MODIFIER","AFFECTED_BY_GUERRILLA_TACTICS","WILDFIRE_BOMB_IMPACT","VOLATILE_BOMB_WFI_IMPACT","PHEROMONE_BOMB_WFI_IMPACT","SHRAPNEL_BOMB_WFI_IMPACT","TIP_DAMAGE_INCREASE","TIP_MAX_STACKS","ALPHA_DAMAGE_KC_MODIFIER","BLOODSEEKER_ATTACK_SPEED_GAIN","HYDRAS_BITE_DOT_MODIFIER","LIST_OF_FOCUS_SPENDERS_SV","BUTCHERY_TALENT","CARVE","WING_CLIP","CHAKRAMS_TALENT","SERPENT_STING_SV","BASE_FOCUS_REGEN_SV","BASE_MAX_FOCUS_SV","DEADLY_TANDEM_CA_DURATION_INCREASE","FLAME_INFUSION_WFB_DAMAGE_INCREASE","STINGING_STRIKE_RS_MB_DMG_INCREASE","STRENGTH_OF_THE_PACK_DAMAGE_MODIFIER","MAX_FRENZY_STACKS","COBRA_SHOT_CDR_MS","COBRA_SHOT_FOCUS_THRESHOLD_TO_WAIT","KILL_COMMAND_BM_FOCUS_COST","BARBED_SHOT_BESTIAL_WRATH_CDR_MS","BESTIAL_WRATH_BASE_CD","AOTW_GCD_REDUCTION_AFFECTED_ABILITIES","KILL_COMMAND_CAST_BM","COBRA_SHOT","BESTIAL_WRATH","MULTISHOT_BM","BARBED_SHOT","ASPECT_OF_THE_WILD","BLOODSHED_TALENT","DIRE_BEAST_TALENT","SPITTING_COBRA_TALENT","STAMPEDE_TALENT","CHIMAERA_SHOT_BM_TALENT","WILD_SPIRITS","FLAYED_SHOT","RESONATING_ARROW","DEATH_CHAKRAM_INITIAL_AND_AOE","ASPECT_OF_THE_WILD_FOCUS","SCENT_OF_BLOOD_BARBED_SHOT_RECHARGE","AOTB_MULTIPLIER","AOTB_ABILITIES_NOT_AFFECTED","MELEE","KILL_COMMAND_DAMAGE_BM","STOMP_DAMAGE","KILLER_INSTINCT_THRESHOLD","KILLER_INSTINCT_MULTIPLIER","WILD_CALL_RESET_PERCENT","SPITTING_COBRA_DAMAGE_INCREASE","STAMPEDE_POTENTIAL_HITS","AMOUNT_OF_PETS_WITH_AC","MAX_THRILL_STACKS","CRIT_PER_THRILL_STACK","BASIC_ATTACK_SPELLS","BITE_BASIC_ATTACK","CLAW_BASIC_ATTACK","SMACK_BASIC_ATTACK","MAX_TIME_BETWEEN_BASIC_ATK","MACRO_TIME_BETWEEN_BASIC_ATK","NO_DELAY_TIME_BETWEEN_BASIC_ATK","BEAST_MASTERY_FOCUS_REGEN","BEAST_MASTERY_FOCUS_MAX","FOCUS_THRESHOLD_MINOR","FOCUS_THRESHOLD_AVG","FOCUS_THRESHOLD_MAJOR","BARBED_SHOT_FOCUS_REGEN_BUFFS","BARBED_SHOT_BUFF","BARBED_SHOT_BUFF_2","BARBED_SHOT_BUFF_3","BARBED_SHOT_BUFF_4","BARBED_SHOT_BUFF_5","BARBED_SHOT_BUFF_6","BARBED_SHOT_BUFF_7","BARBED_SHOT_BUFF_8","BARBED_SHOT_FOCUS_REGEN_BUFFS_IDS","BEAST_MASTERY_SPELLS_WITHOUT_WASTE","CHIMAERA_SHOT_FOCUS","BARBED_SHOT_REGEN","AOTW_REGEN","CHIM_REGEN","LIST_OF_FOCUS_SPENDERS_BM","FEROCIOUS_APPETITE_ASPECT_REDUCTION","ONE_WITH_THE_BEAST_DAMAGE_INCREASE","BLOODLETTING_BARBED_DOT_INCREASE","ECHOING_CALL_INCREASED_WILD_CALL_CHANCE","DIRE_COMMAND_PROC_CHANCE","FLAMEWAKERS_PROC_CHANCE","QAPLA_KILL_COMMAND_REDUCTION_MS","RYLAKSTALKERS_PIERCING_FANGS_CRIT_DMG_INCREASE","DonutChart","items","total","reduce","sum","value","color","valueTooltip","content","background","chartSize","innerRadiusFactor","data","spec","mark","innerRadius","encoding","theta","field","legend","scale","domain","range","view","stroke","width","renderLegend","renderChart","React","PureComponent","defaultProps","OneVariableBinomialChart","state","hover","probabilities","actualEvent","xAxis","yAxis","yDomain","x","title","axis","grid","format","tickFormat","y","layer","line","strokeWidth","filled","disableHeight","BaseChart","procChance","procAttempts","binomialPMF","k","n","p","numerator","denominator","binomialDistribution","pow","probability","findMax","pmf","maxP","resetProbabilityArray","actualProcs","Array","from","_x","poissonBinomialPMF","setMinMaxProbabilities","threshold","procProbabilities","rangeMin","findIndex","rangeMax","slice","Ekj","j","lookup","Error","fill","trackedName","actualEventY","inExecuteWindow","inHealthExecuteWindow","executeWindowStart","lastExecuteHitTimestamp","totalExecuteWindowDuration","castsWithExecute","onGeneralDamage","onExecuteCast","onExecuteDamage","executeOutsideRangeEnablers","applyExecuteEnablerBuff","removeExecuteEnablerBuff","lowerThreshold","isTargetInExecuteRange","isTargetInReverseExecuteRange","usable","allOnCD","targetIsFriendly","areExecuteSpellsOnCD","isExecuteUsableOutsideExecuteRange","isTargetInHealthExecuteWindow","constructor","approximate","averageHits","tracker","tracked","generated","wasted","isArray","newSuggestionSpell","buildersObj","maxGenerated","wastedShare","resourceNameLower","toLowerCase","regular","HIT_TYPES_THAT_REFUND","HIT_TYPES","MISS","DODGE","PARRY","RegenResourceCapTracker","args","atCap","missedRegen","naturalRegen","regenState","prevSpender","hasReportedBelowCap","debugErrorSum","debugGreatestError","debugAccuracyCheckCount","currentMaxResourceWithFallback","regen","onFightend","drain","onDrain","onApplyBuff","ChangeHaste","onChangeHaste","predictValue","currentTimestamp","baseRegenRate","getBaseRegenRate","isRegenHasted","before","gain","applyEnergize","r","resourceType","resourceCost","getResource","buffId","buffHistory","getBuffHistory","Boolean","buff","start","end","updateState","resourceChangeType","applyCumulatively","energizersToApplyCumulatively","time","eventResource","shouldAccumulate","isLastUpdateRecent","getCost","exemptFromRefund","castsToApplyCumulatively","tick","hitType","refund","resourceRefundOnMiss","getReducedDrain","cumulativeEventWindow","buffsChangeMax","buffChangesResourceMax","buffsChangeRegen","buffChangesRegen","oldState","newState","durationCapped","timeCappedBetweenStates","onBelowCap","reachCap","predictReachValue","Infinity","onAtCap","calculated","currentMaxResource","startTime","startValue","targetValue","elapsed","predicted","fabricateEndCap","fabricateBeginCap","eventEmitter","fabricateEvent","sourceID","playerId","EventEmitter","spellResourceCost","SpellResourceCost","drainsToApplyCumulatively","_applyBuilder","__fabricated","ResourceTracker","damageTicks","resets","offCDProcs","activeKillShotSpell","SPECS","SURVIVAL_HUNTER","KILL_SHOT_SV","hasCovenant","VENTHYR","add","FLAYERS_MARK","onProc","FLAYED_SHOT_RESET_CHANCE","castsFinished","beginCastSpell","wasCastStarted","begincast","onBeginCast","CASTABLE_WHILE_CASTING_SPELLS","addToCancelledList","beginCastAbility","wastedPercent","url","render","showSpenders","RESOURCES_HUNTER_MINOR_THRESHOLD","RESOURCES_HUNTER_AVERAGE_THRESHOLD","RESOURCES_HUNTER_MAJOR_THRESHOLD","bySecond","onEnergizeByPlayer","secondsIntoFight","wide","marginBottom","overflow","large","ultrawide","formatThousands","src","alt","disableWidth","duration","deathTimestamp","ressTimestamp","lastResurrectionTimestamp","deathPercentageOfEncounter","lastDeathTimestamp","TIME_SPENT_DEAD_THRESHOLD","isAlive","deaths","pop","CoreDeathTracker","cdrPerFocus","MM_SV_CDR_PER_FOCUS","effectiveExhilReductionMs","wastedExhilReductionMs","lastFocusCost","NATURAL_MENDING_TALENT","BEAST_MASTERY_HUNTER","BM_CDR_PER_FOCUS","cooldownReductionMS","TRAILBLAZER_TALENT","percentUptime","TRAILBLAZER_BUFF","applicationTimestamp","lastDamageTick","crowsEndingTimestamp","maxCasts","checkForReset","A_MURDER_OF_CROWS_DEBUFF","adjustMaxCasts","AMOC_TICK_RATE","beginCooldown","AMOC_BASE_DURATION","_spells","effectiveCDR","lastCast","baseCD","BASELINE_TURTLE_CHEETAH_CD","ASPECT_OF_THE_EAGLE","hasEagle","BORN_TO_BE_WILD_AFFECTED_SPELLS","effectiveTotalCDR","_roots","_applications","_casts","BINDING_SHOT_TALENT","MARKSMANSHIP_HUNTER","GENERAL","onRoot","onTether","totalExecuteDuration","KILL_SHOT_EXECUTE_RANGE","vipersVenom","VIPERS_VENOM_TALENT","LNL_COST_MULTIPLIER","VIPERS_VENOM_BUFF","debuffs","KYRIAN","RESONATING_ARROW_DEBUFF","onDebuff","RESONATING_ARROW_DAMAGE","RESONATING_ARROW_CRIT_INCREASE","NECROLORD","DEATH_CHAKRAM_SINGLE_TARGET","DEATH_CHAKRAM_ENERGIZE","ampDamage","NIGHT_FAE","WILD_SPIRITS_DAMAGE","WILD_SPIRITS_DAMAGE_AOE","onWildSpiritsDamage","WILD_MARK","WILD_MARK_DAMAGE_AMP","hasConduitBySpellID","ENFEEBLED_MARK_CONDUIT","SELECTED_PLAYER_PET","onGenericDamage","ENFEEBLED_MARK_DAMAGE_INCREASE","flayersMarkProcs","aggregatedContribution","EMPOWERED_RELEASE_CONDUIT","flayedShotProc","onKillShotDamage","EMPOWERED_RELEASE_INCREASED_FLAYED_PROC_CHANCE","EMPOWERED_RELEASE_BUFF","EMPOWERED_RELEASE_INCREASE_KS_DAMAGE","averageContributionAbsolute","averageContributionPercentage","gainedFocus","wastedFocus","NECROTIC_BARRAGE_CONDUIT","onDeathChakramDamage","NECROTIC_BARRAGE_DAMAGE_INCREASE","wildSpiritsCast","damageAfterOriginalDuration","SPIRIT_ATTUNEMENT_CONDUIT","onWildSpiritsCast","SPIRIT_ATTUNEMENT_DAMAGE_INCREASE","WILD_SPIRITS_BASELINE_DURATION","flareCasts","lastFlareCastTimestamp","tarTrapCasts","lastTarTrapCastTimestamp","lostEmberApplications","SOULFORGE_EMBERS_EFFECT","onFlare","onTarTrap","SOULFORGE_EMBERS_DAMAGE","onEmbersDamage","ResourceUsage","listOfSpellsUsed","ctor","resourceSpenders","spellID","spellsThatShouldShowAsOtherSpells","resourceTypeID","resourceUsed","resourceTypeName","a","b","comparison","resourceUsageStatisticOrder","ResourceLink","resourceUsageChart","listOfDefaultColours","statisticOrder","colourIndex","makeResourceUsageTooltip","sort","sortResourceUsage","FocusUsage","LIST_OF_FOCUS_SPENDERS_SHARED","uniqueTargets","uniqueTargetsHit","inefficientCasts","BARRAGE_DAMAGE","calculateAverageHits","damageTarget","currentCast","BARRAGE_HITS_PER_CAST","barrageInefficientCastsThreshold"],"mappings":"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","file":"static/js/MarksmanshipHunter.b385573b.chunk.js","sourcesContent":["import SPELLS from 'common/SPELLS';\r\nimport CoreSpellUsable from 'parser/shared/modules/SpellUsable';\r\nimport { CastEvent, DamageEvent } from 'parser/core/Events';\r\n\r\nclass SpellUsable extends CoreSpellUsable {\r\n  static dependencies = {\r\n    ...CoreSpellUsable.dependencies,\r\n  };\r\n\r\n  lastPotentialTriggerForRapidFireReset: CastEvent | null = null;\r\n  rapidFireResets = 0;\r\n\r\n  onCast(event: CastEvent) {\r\n    const spellId = event.ability.guid;\r\n    if (this.selectedCombatant.hasLegendaryByBonusID(SPELLS.SURGING_SHOTS_EFFECT.bonusID)) {\r\n      if (spellId === SPELLS.AIMED_SHOT.id) {\r\n        this.lastPotentialTriggerForRapidFireReset = event;\r\n      } else if (spellId === SPELLS.RAPID_FIRE.id) {\r\n        this.lastPotentialTriggerForRapidFireReset = null;\r\n      }\r\n    }\r\n    super.onCast(event);\r\n  }\r\n\r\n  beginCooldown(spellId: number, cooldownTriggerEvent: CastEvent | DamageEvent) {\r\n    if (spellId === SPELLS.RAPID_FIRE.id && this.selectedCombatant.hasLegendaryByBonusID(SPELLS.SURGING_SHOTS_EFFECT.bonusID)) {\r\n      if (this.isOnCooldown(spellId)) {\r\n        this.rapidFireResets += 1;\r\n        this.endCooldown(\r\n          spellId,\r\n          undefined,\r\n          this.lastPotentialTriggerForRapidFireReset\r\n            ? this.lastPotentialTriggerForRapidFireReset.timestamp\r\n            : undefined,\r\n        );\r\n      }\r\n    }\r\n    super.beginCooldown(spellId, cooldownTriggerEvent);\r\n  }\r\n}\r\n\r\nexport default SpellUsable;\r\n","import SPELLS from 'common/SPELLS';\r\nimport CoreAbilities from 'parser/core/modules/Abilities';\r\nimport { SpellbookAbility } from 'parser/core/modules/Ability';\r\n\r\nclass Abilities extends CoreAbilities {\r\n  spellbook(): SpellbookAbility[] {\r\n    const combatant = this.selectedCombatant;\r\n    return [\r\n      /**\r\n       * Shared spells handled in their own files:\r\n       * Binding Shot\r\n       * Kill Shot\r\n       * A Murder of Crows\r\n       *\r\n       */\r\n      //region Baseline Rotational\r\n      {\r\n        spell: SPELLS.AIMED_SHOT,\r\n        category: Abilities.SPELL_CATEGORIES.ROTATIONAL,\r\n        cooldown: (haste: number) => 12 / (1 + haste),\r\n        charges: 2,\r\n        gcd: {\r\n          base: 1500,\r\n        },\r\n        castEfficiency: {\r\n          suggestion: true,\r\n          recommendedEfficiency: 0.95,\r\n        },\r\n      },\r\n      {\r\n        spell: SPELLS.RAPID_FIRE,\r\n        category: Abilities.SPELL_CATEGORIES.ROTATIONAL,\r\n        cooldown: 20,\r\n        gcd: {\r\n          base: 1500,\r\n        },\r\n        castEfficiency: {\r\n          suggestion: true,\r\n          recommendedEfficiency: 0.95,\r\n        },\r\n      },\r\n      {\r\n        spell: SPELLS.ARCANE_SHOT,\r\n        buffSpellId: SPELLS.PRECISE_SHOTS.id,\r\n        category: Abilities.SPELL_CATEGORIES.ROTATIONAL,\r\n        enabled: !combatant.hasTalent(SPELLS.CHIMAERA_SHOT_MM_TALENT.id),\r\n        gcd: {\r\n          base: 1500,\r\n        },\r\n      },\r\n      {\r\n        spell: SPELLS.STEADY_SHOT,\r\n        buffSpellId: SPELLS.STEADY_FOCUS_BUFF.id,\r\n        category: Abilities.SPELL_CATEGORIES.ROTATIONAL,\r\n        gcd: {\r\n          base: 1500,\r\n        },\r\n      },\r\n      {\r\n        spell: SPELLS.MULTISHOT_MM,\r\n        buffSpellId: SPELLS.PRECISE_SHOTS.id,\r\n        category: Abilities.SPELL_CATEGORIES.ROTATIONAL_AOE,\r\n        gcd: {\r\n          base: 1500,\r\n        },\r\n      },\r\n      {\r\n        spell: SPELLS.TRUESHOT,\r\n        buffSpellId: SPELLS.TRUESHOT.id,\r\n        category: Abilities.SPELL_CATEGORIES.COOLDOWNS,\r\n        cooldown: 120,\r\n        gcd: {\r\n          static: 0,\r\n        },\r\n        castEfficiency: {\r\n          suggestion: true,\r\n          recommendedEfficiency: 0.95,\r\n        },\r\n      },\r\n      //endregion\r\n\r\n      //region Baseline Defensives\r\n      {\r\n        spell: SPELLS.EXHILARATION,\r\n        category: Abilities.SPELL_CATEGORIES.DEFENSIVE,\r\n        isDefensive: true,\r\n        cooldown: 120,\r\n        gcd: {\r\n          base: 1500,\r\n        },\r\n      },\r\n      {\r\n        spell: SPELLS.ASPECT_OF_THE_TURTLE,\r\n        buffSpellId: SPELLS.ASPECT_OF_THE_TURTLE.id,\r\n        category: Abilities.SPELL_CATEGORIES.DEFENSIVE,\r\n        isDefensive: true,\r\n        cooldown: 180 * (1 - (combatant.hasTalent(SPELLS.BORN_TO_BE_WILD_TALENT.id) ? 0.2 : 0)),\r\n        gcd: {\r\n          static: 0,\r\n        },\r\n      },\r\n      {\r\n        spell: [SPELLS.SURVIVAL_OF_THE_FITTEST_LONE_WOLF, SPELLS.SURVIVAL_OF_THE_FITTEST],\r\n        category: Abilities.SPELL_CATEGORIES.DEFENSIVE,\r\n        isDefensive: true,\r\n        cooldown: 180,\r\n        gcd: {\r\n          static: 0,\r\n        },\r\n      },\r\n      //endregion\r\n\r\n      //region Baseline Utility\r\n      {\r\n        spell: SPELLS.DISENGAGE,\r\n        category: Abilities.SPELL_CATEGORIES.UTILITY,\r\n        cooldown: 20,\r\n        gcd: {\r\n          static: 0,\r\n        },\r\n      },\r\n      {\r\n        spell: SPELLS.BURSTING_SHOT,\r\n        category: Abilities.SPELL_CATEGORIES.UTILITY,\r\n        cooldown: 24,\r\n        gcd: {\r\n          base: 1500,\r\n        },\r\n      },\r\n      {\r\n        spell: SPELLS.CONCUSSIVE_SHOT,\r\n        category: Abilities.SPELL_CATEGORIES.UTILITY,\r\n        cooldown: 5,\r\n        gcd: {\r\n          base: 1500,\r\n        },\r\n      },\r\n      {\r\n        spell: SPELLS.COUNTER_SHOT,\r\n        category: Abilities.SPELL_CATEGORIES.UTILITY,\r\n        cooldown: 24,\r\n        gcd: {\r\n          static: 0,\r\n        },\r\n      },\r\n      {\r\n        spell: SPELLS.MISDIRECTION,\r\n        category: Abilities.SPELL_CATEGORIES.UTILITY,\r\n        cooldown: 30,\r\n        gcd: {\r\n          static: 0,\r\n        },\r\n      },\r\n      {\r\n        spell: SPELLS.ASPECT_OF_THE_CHEETAH,\r\n        category: Abilities.SPELL_CATEGORIES.UTILITY,\r\n        cooldown: 180 * (1 - (combatant.hasTalent(SPELLS.BORN_TO_BE_WILD_TALENT.id) ? 0.2 : 0)),\r\n        gcd: {\r\n          static: 0,\r\n        },\r\n      },\r\n      {\r\n        spell: SPELLS.FREEZING_TRAP,\r\n        category: Abilities.SPELL_CATEGORIES.UTILITY,\r\n        cooldown: 30, //TODO: Set to 25 at Shadowlands launch\r\n        gcd: {\r\n          base: 1500,\r\n        },\r\n      },\r\n      {\r\n        spell: SPELLS.TAR_TRAP,\r\n        category: Abilities.SPELL_CATEGORIES.UTILITY,\r\n        cooldown: 30, //TODO: Set to 25 at Shadowlands launch\r\n        gcd: {\r\n          base: 1500,\r\n        },\r\n      },\r\n      {\r\n        spell: SPELLS.FLARE,\r\n        category: Abilities.SPELL_CATEGORIES.UTILITY,\r\n        cooldown: 20,\r\n        gcd: {\r\n          base: 1500,\r\n        },\r\n      },\r\n      {\r\n        spell: SPELLS.HUNTERS_MARK,\r\n        category: Abilities.SPELL_CATEGORIES.UTILITY,\r\n        gcd: {\r\n          base: 1000,\r\n        },\r\n      },\r\n      //endregion\r\n\r\n      //region Talents\r\n      {\r\n        spell: SPELLS.CHIMAERA_SHOT_MM_TALENT,\r\n        category: Abilities.SPELL_CATEGORIES.ROTATIONAL,\r\n        enabled: combatant.hasTalent(SPELLS.CHIMAERA_SHOT_MM_TALENT.id),\r\n        gcd: {\r\n          base: 1500,\r\n        },\r\n      },\r\n      {\r\n        spell: SPELLS.EXPLOSIVE_SHOT_TALENT,\r\n        category: Abilities.SPELL_CATEGORIES.ROTATIONAL,\r\n        cooldown: 30,\r\n        gcd: {\r\n          base: 1500,\r\n        },\r\n        buffSpellId: SPELLS.EXPLOSIVE_SHOT_TALENT.id,\r\n        enabled: combatant.hasTalent(SPELLS.EXPLOSIVE_SHOT_TALENT.id),\r\n        castEfficiency: {\r\n          suggestion: true,\r\n          recommendedEfficiency: 0.95,\r\n        },\r\n      },\r\n      {\r\n        spell: SPELLS.SERPENT_STING_TALENT,\r\n        buffSpellId: SPELLS.SERPENT_STING_TALENT.id,\r\n        category: Abilities.SPELL_CATEGORIES.ROTATIONAL,\r\n        enabled: combatant.hasTalent(SPELLS.SERPENT_STING_TALENT.id),\r\n        gcd: {\r\n          base: 1500,\r\n        },\r\n      },\r\n      {\r\n        spell: SPELLS.DOUBLE_TAP_TALENT,\r\n        category: Abilities.SPELL_CATEGORIES.ROTATIONAL,\r\n        cooldown: 60,\r\n        enabled: combatant.hasTalent(SPELLS.DOUBLE_TAP_TALENT.id),\r\n        gcd: {\r\n          base: 1500,\r\n        },\r\n        castEfficiency: {\r\n          suggestion: true,\r\n          recommendedEfficiency: 0.8,\r\n        },\r\n      },\r\n      {\r\n        spell: SPELLS.BARRAGE_TALENT,\r\n        category: Abilities.SPELL_CATEGORIES.ROTATIONAL,\r\n        cooldown: 20,\r\n        enabled: combatant.hasTalent(SPELLS.BARRAGE_TALENT.id),\r\n        gcd: {\r\n          base: 1500,\r\n        },\r\n        castEfficiency: {\r\n          suggestion: true,\r\n          recommendedEfficiency: 0.9,\r\n        },\r\n      },\r\n      {\r\n        spell: SPELLS.VOLLEY_TALENT,\r\n        category: Abilities.SPELL_CATEGORIES.ROTATIONAL,\r\n        cooldown: 45,\r\n        enabled: combatant.hasTalent(SPELLS.VOLLEY_TALENT.id),\r\n        gcd: {\r\n          base: 1500,\r\n        },\r\n        castEfficiency: {\r\n          suggestion: true,\r\n          recommendedEfficiency: 0.9,\r\n        },\r\n      },\r\n      {\r\n        spell: SPELLS.CAMOUFLAGE_TALENT,\r\n        category: Abilities.SPELL_CATEGORIES.UTILITY,\r\n        cooldown: 60,\r\n        enabled: combatant.hasTalent(SPELLS.CAMOUFLAGE_TALENT.id),\r\n        gcd: {\r\n          base: 1500,\r\n        },\r\n      },\r\n      //endregion\r\n\r\n      //region Pets\r\n      {\r\n        spell: [SPELLS.PRIMAL_RAGE_1, SPELLS.PRIMAL_RAGE_2],\r\n        buffSpellId: [SPELLS.PRIMAL_RAGE_1.id, SPELLS.PRIMAL_RAGE_2.id],\r\n        category: Abilities.SPELL_CATEGORIES.UTILITY,\r\n        cooldown: 360,\r\n        gcd: {\r\n          static: 0,\r\n        },\r\n      },\r\n      {\r\n        spell: SPELLS.MASTERS_CALL,\r\n        category: Abilities.SPELL_CATEGORIES.UTILITY,\r\n        cooldown: 45,\r\n        gcd: {\r\n          static: 0,\r\n        },\r\n      },\r\n\r\n      {\r\n        spell: SPELLS.INTIMIDATION,\r\n        category: Abilities.SPELL_CATEGORIES.UTILITY,\r\n        cooldown: 60,\r\n        gcd: {\r\n          base: 1500,\r\n        },\r\n      },\r\n      {\r\n        spell: [\r\n          SPELLS.CALL_PET_1,\r\n          SPELLS.CALL_PET_2,\r\n          SPELLS.CALL_PET_3,\r\n          SPELLS.CALL_PET_4,\r\n          SPELLS.CALL_PET_5,\r\n        ],\r\n        category: Abilities.SPELL_CATEGORIES.UTILITY,\r\n        gcd: {\r\n          base: 1500,\r\n        },\r\n      },\r\n      {\r\n        spell: SPELLS.DISMISS_PET,\r\n        category: Abilities.SPELL_CATEGORIES.UTILITY,\r\n        gcd: {\r\n          base: 1500,\r\n        },\r\n      },\r\n      {\r\n        spell: SPELLS.MEND_PET,\r\n        category: Abilities.SPELL_CATEGORIES.UTILITY,\r\n        cooldown: 10,\r\n        gcd: {\r\n          base: 1500,\r\n        },\r\n      },\r\n      //endregion\r\n    ];\r\n  }\r\n}\r\n\r\nexport default Abilities;\r\n","import SPELLS from 'common/SPELLS';\r\nimport CoreChanneling from 'parser/shared/modules/Channeling';\r\nimport Events, { CastEvent, RemoveBuffEvent } from 'parser/core/Events';\r\nimport { Options, SELECTED_PLAYER } from 'parser/core/Analyzer';\r\n\r\nconst debug = false;\r\n\r\nclass Channeling extends CoreChanneling {\r\n\r\n  constructor(options: Options) {\r\n    super(options);\r\n    this.addEventListener(Events.removebuff.by(SELECTED_PLAYER).spell(SPELLS.BARRAGE_TALENT), this.onRemoveBuff);\r\n  }\r\n\r\n  onCast(event: CastEvent) {\r\n    const spellId = event.ability.guid;\r\n    if (spellId === SPELLS.BARRAGE_TALENT.id) {\r\n      this.beginChannel(event);\r\n      return;\r\n    }\r\n    super.onCast(event);\r\n  }\r\n\r\n  cancelChannel(event: any, ability: any) {\r\n    if (this.isChannelingSpell(SPELLS.BARRAGE_TALENT.id) || this.isChannelingSpell(SPELLS.RAPID_FIRE.id)) {\r\n      // If a channeling spell is \"canceled\" it was actually just ended, so if it looks canceled then instead just mark it as ended\r\n      debug && this.log('Marking', this._currentChannel.ability.name, 'as ended since we started casting something else');\r\n      this.endChannel(event);\r\n    } else {\r\n      super.cancelChannel(event, ability);\r\n    }\r\n  }\r\n\r\n  onRemoveBuff(event: RemoveBuffEvent) {\r\n    if (!this.isChannelingSpell(SPELLS.BARRAGE_TALENT.id)) {\r\n      // This may be true if we did the event-order fix in begincast/cast and it was already ended there.\r\n      return;\r\n    }\r\n    this.endChannel(event);\r\n  }\r\n}\r\n\r\nexport default Channeling;\r\n","import SPELLS from 'common/SPELLS';\r\nimport CoreCooldownThroughputTracker, { BUILT_IN_SUMMARY_TYPES } from 'parser/shared/modules/CooldownThroughputTracker';\r\n\r\nclass CooldownThroughputTracker extends CoreCooldownThroughputTracker {\r\n  static cooldownSpells = [\r\n    ...CoreCooldownThroughputTracker.cooldownSpells,\r\n    {\r\n      spell: SPELLS.TRUESHOT,\r\n      summary: [\r\n        BUILT_IN_SUMMARY_TYPES.DAMAGE,\r\n      ],\r\n    },\r\n  ];\r\n\r\n  static ignoredSpells = [\r\n    ...CoreCooldownThroughputTracker.ignoredSpells,\r\n    SPELLS.BINDING_SHOT_TETHER.id,\r\n    SPELLS.BINDING_SHOT_ROOT.id,\r\n  ];\r\n}\r\n\r\nexport default CooldownThroughputTracker;\r\n","import React from 'react';\r\n\r\nimport CoreAlwaysBeCasting from 'parser/shared/modules/AlwaysBeCasting';\r\nimport { ThresholdStyle, When } from 'parser/core/ParseResults';\r\nimport SPELLS from 'common/SPELLS';\r\nimport { formatPercentage } from 'common/format';\r\nimport SpellLink from 'common/SpellLink';\r\nimport { i18n } from '@lingui/core';\r\nimport { t } from '@lingui/macro';\r\n\r\nclass AlwaysBeCasting extends CoreAlwaysBeCasting {\r\n  get suggestionThresholds() {\r\n    return {\r\n      actual: this.activeTimePercentage,\r\n      isLessThan: {\r\n        minor: 0.95,\r\n        average: 0.9,\r\n        major: 0.875,\r\n      },\r\n      style: ThresholdStyle.PERCENTAGE,\r\n    };\r\n  }\r\n\r\n  suggestions(when: When) {\r\n    when(this.suggestionThresholds).addSuggestion((suggest, actual, recommended) => suggest(<>Your downtime can be improved. Try to Always Be Casting (ABC), this means you should try to reduce the delay between casting spells. If you have to move, try casting something like <SpellLink id={SPELLS.STEADY_SHOT.id} />, since it's castable while moving and doesn't cost any focus. Spells like <SpellLink id={SPELLS.RAPID_FIRE.id} /> and <SpellLink id={SPELLS.ARCANE_SHOT.id} /> are also castable whilst moving and good for single target - for multiple targets <SpellLink id={SPELLS.MULTISHOT_MM.id} /> might take their place. </>)\r\n      .icon('spell_mage_altertime')\r\n      .actual(i18n._(t('hunter.marksmanship.suggestions.alwaysBeCasting.downtime')`${formatPercentage(1 - actual)}% downtime`))\r\n      .recommended(`<${formatPercentage(1 - recommended)}% is recommended`));\r\n  }\r\n}\r\n\r\nexport default AlwaysBeCasting;\r\n","import React from 'react';\r\n\r\nimport CoreCancelledCasts from 'parser/shared/modules/CancelledCasts';\r\n\r\nimport { ThresholdStyle, When } from 'parser/core/ParseResults';\r\nimport { formatPercentage } from 'common/format';\r\nimport { STATISTIC_ORDER } from 'interface/others/StatisticBox';\r\nimport Statistic from 'interface/statistics/Statistic';\r\nimport BoringValueText from 'interface/statistics/components/BoringValueText';\r\nimport CrossIcon from 'interface/icons/Cross';\r\nimport CASTS_THAT_ARENT_CASTS from 'parser/core/CASTS_THAT_ARENT_CASTS';\r\nimport { Options } from 'parser/core/Analyzer';\r\nimport { i18n } from '@lingui/core';\r\nimport { t } from '@lingui/macro';\r\n\r\n/**\r\n * Tracks the amount of cancelled casts in %.\r\n *\r\n * Example log:\r\n * https://www.warcraftlogs.com/reports/Pp17Crv6gThLYmdf#fight=8&type=damage-done&source=76\r\n */\r\nclass CancelledCasts extends CoreCancelledCasts {\r\n  constructor(options: Options) {\r\n    super(options);\r\n    this.IGNORED_ABILITIES = [\r\n      //Include the spells that you do not want to be tracked and spells that are castable while casting\r\n      ...CASTS_THAT_ARENT_CASTS,\r\n    ];\r\n  }\r\n\r\n  get suggestionThresholds() {\r\n    return {\r\n      actual: 1 - this.cancelledPercentage,\r\n      isLessThan: {\r\n        minor: 0.975,\r\n        average: 0.95,\r\n        major: 0.9,\r\n      },\r\n      style: ThresholdStyle.PERCENTAGE,\r\n    };\r\n  }\r\n\r\n  suggestions(when: When) {\r\n    when(this.suggestionThresholds).addSuggestion((suggest, actual, recommended) => suggest(<>You cancelled {formatPercentage(this.cancelledPercentage)}% of your spells. While it is expected that you will have to cancel a few casts to react to a boss mechanic or to move, you should try to ensure that you are cancelling as few casts as possible. This is generally done by planning ahead in terms of positioning, and moving while you're casting instant cast spells.</>)\r\n      .icon('inv_misc_map_01')\r\n      .actual(i18n._(t('hunter.marksmanship.suggestions.castsCanceled.efficiency')`${formatPercentage(1 - actual)}% casts cancelled`))\r\n      .recommended(`<${formatPercentage(1 - recommended)}% is recommended`));\r\n  }\r\n\r\n  statistic() {\r\n    const tooltipText = Object.values(this.cancelledSpellList).map(cancelledSpell => (\r\n      <li key={cancelledSpell.spellName}>\r\n        {cancelledSpell.spellName}: {cancelledSpell.amount}\r\n      </li>\r\n    ));\r\n\r\n    return (\r\n      <Statistic\r\n        position={STATISTIC_ORDER.CORE(14)}\r\n        size=\"flexible\"\r\n        tooltip={(\r\n          <>\r\n            You started casting a total of {this.totalCasts} spells with a cast timer. You cancelled {this.castsCancelled} of those casts.\r\n            <ul>\r\n              {tooltipText}\r\n            </ul>\r\n          </>\r\n        )}\r\n      >\r\n        <BoringValueText label=\"Cancelled Casts\">\r\n          <CrossIcon /> {formatPercentage(this.cancelledPercentage)}% <small>casts cancelled</small>\r\n        </BoringValueText>\r\n      </Statistic>\r\n    );\r\n  }\r\n}\r\n\r\nexport default CancelledCasts;\r\n","import SPELLS from 'common/SPELLS';\r\nimport BLOODLUST_BUFFS from 'game/BLOODLUST_BUFFS';\r\nimport CoreBuffs from 'parser/core/modules/Buffs';\r\n\r\nclass Buffs extends CoreBuffs {\r\n  buffs() {\r\n    return [\r\n      {\r\n        spellId: SPELLS.TRUESHOT.id,\r\n        timelineHighlight: true,\r\n        triggeredBySpellId: SPELLS.TRUESHOT.id,\r\n      },\r\n      {\r\n        spellId: SPELLS.PRECISE_SHOTS.id,\r\n        timelineHighlight: true,\r\n        triggeredBySpellId: SPELLS.AIMED_SHOT.id,\r\n      },\r\n      {\r\n        spellId: SPELLS.LOCK_AND_LOAD_BUFF.id,\r\n        timelineHighlight: true,\r\n        triggeredBySpellId: SPELLS.LOCK_AND_LOAD_TALENT.id,\r\n      },\r\n      {\r\n        spellId: SPELLS.ASPECT_OF_THE_TURTLE.id,\r\n        timelineHighlight: true, // showing because it's relevant to know when we couldn't attack (this could explain some downtime)\r\n        triggeredBySpellId: SPELLS.ASPECT_OF_THE_TURTLE.id,\r\n      },\r\n      {\r\n        spellId: Object.keys(BLOODLUST_BUFFS).map(item => Number(item)),\r\n        timelineHighlight: true,\r\n      },\r\n    ];\r\n  }\r\n}\r\n\r\nexport default Buffs;\r\n","import Analyzer, { Options } from 'parser/core/Analyzer';\r\nimport { ThresholdStyle, When } from 'parser/core/ParseResults';\r\nimport SPELLS from 'common/SPELLS';\r\nimport Statistic from 'interface/statistics/Statistic';\r\nimport STATISTIC_ORDER from 'interface/others/STATISTIC_ORDER';\r\nimport STATISTIC_CATEGORY from 'interface/others/STATISTIC_CATEGORY';\r\nimport React from 'react';\r\nimport BoringSpellValueText from 'interface/statistics/components/BoringSpellValueText';\r\nimport HasteIcon from 'interface/icons/Haste';\r\nimport { formatPercentage } from 'common/format';\r\nimport { STEADY_FOCUS_HASTE_PERCENT } from 'parser/hunter/marksmanship/constants';\r\nimport SpellLink from 'common/SpellLink';\r\nimport { i18n } from '@lingui/core';\r\nimport { t } from '@lingui/macro';\r\n\r\n/**\r\n * Using Steady Shot twice in a row increases your Haste by 7% for 15 sec.\r\n *\r\n * Example log:\r\n *\r\n */\r\n\r\nclass SteadyFocus extends Analyzer {\r\n\r\n  constructor(options: Options) {\r\n    super(options);\r\n    this.active = this.selectedCombatant.hasTalent(SPELLS.STEADY_FOCUS_TALENT.id);\r\n  }\r\n\r\n  get uptime() {\r\n    return this.selectedCombatant.getBuffUptime(SPELLS.STEADY_FOCUS_BUFF.id) / this.owner.fightDuration;\r\n  }\r\n\r\n  get avgHaste() {\r\n    return this.uptime * STEADY_FOCUS_HASTE_PERCENT;\r\n  }\r\n\r\n  get uptimeThresholds() {\r\n    return {\r\n      actual: this.uptime,\r\n      isLessThan: {\r\n        minor: 0.95,\r\n        average: 0.9,\r\n        major: 0.85,\r\n      },\r\n      style: ThresholdStyle.PERCENTAGE,\r\n    };\r\n  }\r\n\r\n  statistic() {\r\n    return (\r\n      <Statistic\r\n        position={STATISTIC_ORDER.OPTIONAL()}\r\n        size=\"flexible\"\r\n        category={STATISTIC_CATEGORY.TALENTS}\r\n      >\r\n        <BoringSpellValueText spell={SPELLS.STEADY_FOCUS_TALENT}>\r\n          <>\r\n            <HasteIcon /> {formatPercentage(this.avgHaste)}% <small>average Haste gained</small>\r\n          </>\r\n        </BoringSpellValueText>\r\n      </Statistic>\r\n    );\r\n  }\r\n\r\n  suggestions(when: When) {\r\n    when(this.uptimeThresholds).addSuggestion((suggest, actual, recommended) => suggest(\r\n      <>\r\n        Your uptime on the buff from <SpellLink id={SPELLS.STEADY_FOCUS_TALENT.id} /> could be better. When using this talent you should always try and couple your <SpellLink id={SPELLS.STEADY_SHOT.id} /> together to maintain this buff.\r\n      </>,\r\n    )\r\n      .icon(SPELLS.STEADY_FOCUS_TALENT.icon)\r\n      .actual(i18n._(t('hunter.marksmanship.suggestions.steadyFocus.uptime')`${formatPercentage(actual)}% uptime`))\r\n      .recommended(`>${formatPercentage(recommended)}% is recommended`));\r\n  }\r\n}\r\n\r\nexport default SteadyFocus;\r\n","import React from 'react';\r\n\r\nimport Analyzer, { Options, SELECTED_PLAYER } from 'parser/core/Analyzer';\r\nimport { ThresholdStyle, When } from 'parser/core/ParseResults';\r\nimport Statistic from 'interface/statistics/Statistic';\r\nimport STATISTIC_ORDER from 'interface/others/STATISTIC_ORDER';\r\nimport STATISTIC_CATEGORY from 'interface/others/STATISTIC_CATEGORY';\r\nimport BoringSpellValueText from 'interface/statistics/components/BoringSpellValueText';\r\nimport SPELLS from 'common/SPELLS';\r\nimport Events, { CastEvent, DamageEvent } from 'parser/core/Events';\r\nimport { MS_BUFFER } from 'parser/hunter/shared/constants';\r\nimport { ARCANE_SHOT_MAX_TRAVEL_TIME, LETHAL_SHOTS_CHANCE, LETHAL_SHOTS_REDUCTION } from 'parser/hunter/marksmanship/constants';\r\nimport SpellUsable from 'parser/shared/modules/SpellUsable';\r\nimport SpellLink from 'common/SpellLink';\r\nimport { i18n } from '@lingui/core';\r\nimport { t } from '@lingui/macro';\r\n\r\n/**\r\n * Arcane Shot, Chimaera Shot and Multi-Shot have a 30% chance to reduce the cooldown of Rapid Fire by 5.0 sec.\r\n *\r\n * Example log:\r\n *\r\n * TODO: Verify this module with Serpentstalkers Trickery since it adds Arcane Shot / Chimaera Shot damage events that won't trigger Lethal Shots\r\n */\r\nclass LethalShots extends Analyzer {\r\n\r\n  static dependencies = {\r\n    spellUsable: SpellUsable,\r\n  };\r\n\r\n  procChances: number = 0;\r\n  lastDamageEvent: number = 0;\r\n  badCasts: number = 0;\r\n  shotInFlight: number | null = null;\r\n\r\n  protected spellUsable!: SpellUsable;\r\n\r\n  constructor(options: Options) {\r\n    super(options);\r\n    this.active = this.selectedCombatant.hasTalent(SPELLS.LETHAL_SHOTS_TALENT.id);\r\n    this.addEventListener(Events.cast.by(SELECTED_PLAYER).spell([SPELLS.ARCANE_SHOT, SPELLS.MULTISHOT_MM, SPELLS.CHIMAERA_SHOT_MM_TALENT]), this.castChecker);\r\n    this.addEventListener(Events.damage.by(SELECTED_PLAYER).spell([SPELLS.ARCANE_SHOT, SPELLS.MULTISHOT_MM, SPELLS.CHIMAERA_SHOT_MM_NATURE_DAMAGE, SPELLS.CHIMAERA_SHOT_MM_FROST_DAMAGE]), this.onPotentialProc);\r\n  }\r\n\r\n  get wastedPotentialCDR() {\r\n    return {\r\n      actual: this.badCasts,\r\n      isGreaterThan: {\r\n        minor: 0,\r\n        average: 3,\r\n        major: 6,\r\n      },\r\n      style: ThresholdStyle.DECIMAL,\r\n    };\r\n  }\r\n\r\n  castChecker(event: CastEvent) {\r\n    this.shotInFlight = event.timestamp;\r\n  }\r\n\r\n  onPotentialProc(event: DamageEvent) {\r\n    if (!this.shotInFlight) {\r\n      return;\r\n    }\r\n    if (this.shotInFlight > event.timestamp + ARCANE_SHOT_MAX_TRAVEL_TIME) {\r\n      this.shotInFlight = null;\r\n    }\r\n    if (event.timestamp < this.lastDamageEvent + MS_BUFFER) {\r\n      return;\r\n    }\r\n    this.procChances += 1;\r\n    if (!this.spellUsable.isOnCooldown(SPELLS.RAPID_FIRE.id)) {\r\n      this.badCasts += 1;\r\n    }\r\n  }\r\n\r\n  statistic() {\r\n    return (\r\n      <Statistic\r\n        position={STATISTIC_ORDER.OPTIONAL()}\r\n        size=\"flexible\"\r\n        category={STATISTIC_CATEGORY.TALENTS}\r\n      >\r\n        <BoringSpellValueText spell={SPELLS.LETHAL_SHOTS_TALENT}>\r\n          <>\r\n            ≈{(Math.round(this.procChances * LETHAL_SHOTS_CHANCE) * (LETHAL_SHOTS_REDUCTION / 1000)).toFixed(1)}s <small> potential Rapid Fire CDR</small>\r\n          </>\r\n        </BoringSpellValueText>\r\n      </Statistic>\r\n    );\r\n  }\r\n\r\n  suggestions(when: When) {\r\n    when(this.wastedPotentialCDR).addSuggestion((suggest, actual, recommended) => suggest(\r\n      <>\r\n        You cast {this.selectedCombatant.hasTalent(SPELLS.CHIMAERA_SHOT_MM_TALENT) ? <SpellLink id={SPELLS.CHIMAERA_SHOT_MM_TALENT.id} /> : <SpellLink id={SPELLS.ARCANE_SHOT.id} />} or <SpellLink id={SPELLS.MULTISHOT_MM.id} /> whilst <SpellLink id={SPELLS.RAPID_FIRE.id} /> wasn't on cooldown. You want to try and avoid this when using <SpellLink id={SPELLS.LETHAL_SHOTS_TALENT.id} />, as it is wasting potential cooldown reduction.\r\n      </>,\r\n    )\r\n      .icon(SPELLS.LETHAL_SHOTS_TALENT.icon)\r\n      .actual(i18n._(t('hunter.marksmanship.suggestions.lethalShots.efficiency')`${actual} Lethal Shot trigger casts while Rapid Fire wasn't on cooldown`))\r\n      .recommended(`${recommended} bad casts are recommended`));\r\n  }\r\n}\r\n\r\nexport default LethalShots;\r\n","import { formatPercentage } from 'common/format';\r\nimport SpellLink from 'common/SpellLink';\r\n\r\nimport SPELLS from 'common/SPELLS';\r\nimport ItemDamageDone from 'interface/ItemDamageDone';\r\nimport STATISTIC_CATEGORY from 'interface/others/STATISTIC_CATEGORY';\r\nimport STATISTIC_ORDER from 'interface/others/STATISTIC_ORDER';\r\nimport BoringSpellValueText from 'interface/statistics/components/BoringSpellValueText';\r\nimport Statistic from 'interface/statistics/Statistic';\r\nimport Analyzer, { Options, SELECTED_PLAYER } from 'parser/core/Analyzer';\r\nimport { ThresholdStyle, When } from 'parser/core/ParseResults';\r\nimport Events, { ApplyDebuffEvent, DamageEvent, RefreshDebuffEvent, RemoveDebuffEvent } from 'parser/core/Events';\r\nimport { SERPENT_STING_MM_BASE_DURATION, SERPENT_STING_MM_PANDEMIC } from 'parser/hunter/marksmanship/constants';\r\nimport Enemies from 'parser/shared/modules/Enemies';\r\nimport { encodeTargetString } from 'parser/shared/modules/EnemyInstances';\r\nimport React from 'react';\r\nimport { i18n } from '@lingui/core';\r\nimport { t } from '@lingui/macro';\r\n\r\n/**\r\n * Fire a shot that poisons your target, causing them to take (16.5% of Attack power) Nature damage instantly and an additional (99% of Attack power) Nature damage over 18 sec.\r\n *\r\n * Example log:\r\n * https://www.warcraftlogs.com/reports/GWwtNLVQD8adn6q9#fight=5&type=damage-done&source=18&ability=271788\r\n *\r\n */\r\n\r\nclass SerpentSting extends Analyzer {\r\n  static dependencies = {\r\n    enemies: Enemies,\r\n  };\r\n\r\n  serpentStingTargets: Array<{ timestamp: number, serpentStingDuration: number }> = [];\r\n  damage: number = 0;\r\n  timesRefreshed: number = 0;\r\n  nonPandemicRefresh: number = 0;\r\n  casts: number = 0;\r\n\r\n  protected enemies!: Enemies;\r\n\r\n  constructor(options: Options) {\r\n    super(options);\r\n    this.active = this.selectedCombatant.hasTalent(SPELLS.SERPENT_STING_TALENT.id);\r\n    this.addEventListener(Events.cast.by(SELECTED_PLAYER).spell(SPELLS.SERPENT_STING_TALENT), this.onCast);\r\n    this.addEventListener(Events.damage.by(SELECTED_PLAYER).spell(SPELLS.SERPENT_STING_TALENT), this.onDamage);\r\n    this.addEventListener(Events.applydebuff.by(SELECTED_PLAYER).spell(SPELLS.SERPENT_STING_TALENT), this.onApplyDebuff);\r\n    this.addEventListener(Events.removedebuff.by(SELECTED_PLAYER).spell(SPELLS.SERPENT_STING_TALENT), this.onRemoveDebuff);\r\n    this.addEventListener(Events.refreshdebuff.by(SELECTED_PLAYER).spell(SPELLS.SERPENT_STING_TALENT), this.onRefreshDebuff);\r\n  }\r\n\r\n  get uptimePercentage() {\r\n    return this.enemies.getBuffUptime(SPELLS.SERPENT_STING_TALENT.id) / this.owner.fightDuration;\r\n  }\r\n\r\n  get nonPandemicThreshold() {\r\n    return {\r\n      actual: this.nonPandemicRefresh,\r\n      isGreaterThan: {\r\n        minor: 1,\r\n        average: 3,\r\n        major: 5,\r\n      },\r\n      style: ThresholdStyle.NUMBER,\r\n    };\r\n  }\r\n\r\n  get uptimeThreshold() {\r\n    return {\r\n      actual: this.uptimePercentage,\r\n      isLessThan: {\r\n        minor: 0.95,\r\n        average: 0.9,\r\n        major: 0.85,\r\n      },\r\n      style: ThresholdStyle.PERCENTAGE,\r\n    };\r\n  }\r\n\r\n  onCast() {\r\n    this.casts += 1;\r\n  }\r\n\r\n  onDamage(event: DamageEvent) {\r\n    this.damage += event.amount + (event.absorbed || 0);\r\n  }\r\n\r\n  onApplyDebuff(event: ApplyDebuffEvent) {\r\n    let targetInstance = event.targetInstance;\r\n    if (targetInstance === undefined) {\r\n      targetInstance = 1;\r\n    }\r\n    const serpentStingTarget: any = encodeTargetString(event.targetID, targetInstance);\r\n    this.serpentStingTargets[serpentStingTarget] = { timestamp: event.timestamp, serpentStingDuration: SERPENT_STING_MM_BASE_DURATION };\r\n\r\n  }\r\n\r\n  onRemoveDebuff(event: RemoveDebuffEvent) {\r\n    let targetInstance = event.targetInstance;\r\n    if (targetInstance === undefined) {\r\n      targetInstance = 1;\r\n    }\r\n    const serpentStingTarget: any = encodeTargetString(event.targetID, targetInstance);\r\n    this.serpentStingTargets.splice(serpentStingTarget, 1);\r\n  }\r\n\r\n  onRefreshDebuff(event: RefreshDebuffEvent) {\r\n    let targetInstance = event.targetInstance;\r\n    if (targetInstance === undefined) {\r\n      targetInstance = 1;\r\n    }\r\n    const serpentStingTarget: any = encodeTargetString(event.targetID, targetInstance);\r\n    this.timesRefreshed += 1;\r\n\r\n    const timeRemaining = this.serpentStingTargets[serpentStingTarget].serpentStingDuration - (event.timestamp - this.serpentStingTargets[serpentStingTarget].timestamp);\r\n    if (timeRemaining > (SERPENT_STING_MM_BASE_DURATION * SERPENT_STING_MM_PANDEMIC)) {\r\n      this.nonPandemicRefresh += 1;\r\n    } else {\r\n      const pandemicSerpentStingDuration = Math.min(SERPENT_STING_MM_BASE_DURATION * SERPENT_STING_MM_PANDEMIC, timeRemaining) + SERPENT_STING_MM_BASE_DURATION;\r\n      this.serpentStingTargets[serpentStingTarget].timestamp = event.timestamp;\r\n      this.serpentStingTargets[serpentStingTarget].serpentStingDuration = pandemicSerpentStingDuration;\r\n    }\r\n  }\r\n\r\n  suggestions(when: When) {\r\n    when(this.nonPandemicThreshold).addSuggestion((suggest, actual, recommended) => suggest(\r\n      <>It is not recommended to refresh <SpellLink id={SPELLS.SERPENT_STING_TALENT.id} /> earlier than when there is less than {formatPercentage(SERPENT_STING_MM_PANDEMIC, 0)}% of the duration remaining.\r\n      </>)\r\n      .icon(SPELLS.SERPENT_STING_TALENT.icon)\r\n      .actual(i18n._(t('hunter.marksmanship.suggestions.serpentSting.refreshOutsidePandemic')`You refreshed Serpent Sting ${actual} times when it wasn't in the pandemic window`))\r\n      .recommended(`${recommended} non-pandemic refreshes is recommended`));\r\n\r\n    when(this.uptimeThreshold).addSuggestion((suggest, actual, recommended) => suggest(\r\n      <>\r\n        You should make sure to keep up <SpellLink id={SPELLS.SERPENT_STING_TALENT.id} /> by using it within the pandemic windows to maximize it's damage potential.\r\n      </>)\r\n      .icon(SPELLS.SERPENT_STING_TALENT.icon)\r\n      .actual(i18n._(t('hunter.marksmanship.suggestions.serpentSting.uptime')`You had an uptime of ${formatPercentage(actual, 0)}%`))\r\n      .recommended(`An uptime of >${formatPercentage(recommended, 0)}% is recommended`));\r\n  }\r\n\r\n  statistic() {\r\n    return (\r\n      <Statistic\r\n        position={STATISTIC_ORDER.OPTIONAL(13)}\r\n        size=\"flexible\"\r\n        category={STATISTIC_CATEGORY.TALENTS}\r\n        tooltip={(\r\n          <>\r\n            <ul>\r\n              <li>You cast Serpent Sting a total of {this.casts} times.</li>\r\n              <li>You refreshed the debuff {this.timesRefreshed} times.</li>\r\n              <li>You had {this.nonPandemicRefresh} refreshes outside of the pandemic window. This means refreshes with more than {formatPercentage(SERPENT_STING_MM_PANDEMIC, 0)}% of the current debuff remaining.</li>\r\n            </ul>\r\n          </>\r\n        )}\r\n      >\r\n        <BoringSpellValueText spell={SPELLS.SERPENT_STING_TALENT}>\r\n          <>\r\n            <ItemDamageDone amount={this.damage} /><br />\r\n            {formatPercentage(this.uptimePercentage)}% <small>uptime</small>\r\n          </>\r\n        </BoringSpellValueText>\r\n      </Statistic>\r\n    );\r\n  }\r\n}\r\n\r\nexport default SerpentSting;\r\n","import React from 'react';\r\n\r\nimport SPELLS from 'common/SPELLS';\r\nimport Analyzer, { Options, SELECTED_PLAYER } from 'parser/core/Analyzer';\r\nimport { ThresholdStyle, When } from 'parser/core/ParseResults';\r\nimport SpellUsable from 'parser/shared/modules/SpellUsable';\r\nimport { formatNumber, formatPercentage } from 'common/format';\r\nimport Statistic from 'interface/statistics/Statistic';\r\nimport STATISTIC_CATEGORY from 'interface/others/STATISTIC_CATEGORY';\r\nimport STATISTIC_ORDER from 'interface/others/STATISTIC_ORDER';\r\nimport BoringSpellValueText from 'interface/statistics/components/BoringSpellValueText';\r\nimport Events, { DamageEvent } from 'parser/core/Events';\r\nimport { CTS_CDR_MS } from 'parser/hunter/marksmanship/constants';\r\nimport { MS_BUFFER } from 'parser/hunter/shared/constants';\r\nimport SpellLink from 'common/SpellLink';\r\nimport { i18n } from '@lingui/core';\r\nimport { t } from '@lingui/macro';\r\n\r\n/**\r\n * Casting Arcane Shot, Chimaera Shot or Multi-Shot reduces the cooldown of Trueshot by 2.5 sec.\r\n *\r\n * Example log:\r\n *\r\n */\r\n\r\nclass CallingTheShots extends Analyzer {\r\n  static dependencies = {\r\n    spellUsable: SpellUsable,\r\n  };\r\n\r\n  effectiveTrueshotReductionMs = 0;\r\n  wastedTrueshotReductionMs = 0;\r\n  reductionTimestamp = 0;\r\n\r\n  protected spellUsable!: SpellUsable;\r\n\r\n  constructor(options: Options) {\r\n    super(options);\r\n    this.active = this.selectedCombatant.hasTalent(SPELLS.CALLING_THE_SHOTS_TALENT.id);\r\n    this.addEventListener(Events.damage.by(SELECTED_PLAYER).spell([SPELLS.ARCANE_SHOT, SPELLS.MULTISHOT_MM, SPELLS.CHIMAERA_SHOT_MM_NATURE_DAMAGE, SPELLS.CHIMAERA_SHOT_MM_FROST_DAMAGE]), this.onCTSPotentialProc);\r\n  }\r\n\r\n  get callingTheShotsEfficacy() {\r\n    return this.effectiveTrueshotReductionMs / (this.effectiveTrueshotReductionMs + this.wastedTrueshotReductionMs);\r\n  }\r\n\r\n  get callingTheShotsEfficacyThresholds() {\r\n    return {\r\n      actual: this.callingTheShotsEfficacy,\r\n      isLessThan: {\r\n        minor: 0.975,\r\n        average: 0.95,\r\n        major: 0.9,\r\n      },\r\n      style: ThresholdStyle.PERCENTAGE,\r\n    };\r\n  }\r\n\r\n  onCTSPotentialProc(event: DamageEvent) {\r\n    if (event.timestamp > this.reductionTimestamp + MS_BUFFER) {\r\n      if (this.spellUsable.isOnCooldown(SPELLS.TRUESHOT.id)) {\r\n        if (this.spellUsable.cooldownRemaining(SPELLS.TRUESHOT.id) < CTS_CDR_MS) {\r\n          const effectiveReductionMs = this.spellUsable.reduceCooldown(SPELLS.TRUESHOT.id, CTS_CDR_MS);\r\n          this.effectiveTrueshotReductionMs += effectiveReductionMs;\r\n          this.wastedTrueshotReductionMs += (CTS_CDR_MS - effectiveReductionMs);\r\n        } else {\r\n          this.effectiveTrueshotReductionMs += this.spellUsable.reduceCooldown(SPELLS.TRUESHOT.id, CTS_CDR_MS);\r\n        }\r\n      } else {\r\n        this.wastedTrueshotReductionMs += CTS_CDR_MS;\r\n      }\r\n    }\r\n    this.reductionTimestamp = event.timestamp;\r\n  }\r\n\r\n  suggestions(when: When) {\r\n    when(this.callingTheShotsEfficacyThresholds).addSuggestion((suggest, actual, recommended) => suggest(\r\n      <>\r\n        When talented into <SpellLink id={SPELLS.CALLING_THE_SHOTS_TALENT.id} />, it is important to maximize its potential by not casting {this.selectedCombatant.hasTalent(SPELLS.CHIMAERA_SHOT_MM_TALENT.id) ? <SpellLink id={SPELLS.CHIMAERA_SHOT_MM_TALENT.id} /> : <SpellLink id={SPELLS.ARCANE_SHOT.id} />} or <SpellLink id={SPELLS.MULTISHOT_MM.id} /> while <SpellLink id={SPELLS.TRUESHOT.id} /> isn't on cooldown.\r\n      </>)\r\n      .icon(SPELLS.CALLING_THE_SHOTS_TALENT.icon)\r\n      .actual(i18n._(t('hunter.marksmanship.suggestions.callingTheShots.efficiency')`You had ${formatPercentage(actual)}% effective cooldown reduction from Calling the Shots`))\r\n      .recommended(`>${formatPercentage(recommended)}% is recommended`));\r\n  }\r\n\r\n  statistic() {\r\n    return (\r\n      <Statistic\r\n        position={STATISTIC_ORDER.OPTIONAL(13)}\r\n        size=\"flexible\"\r\n        category={STATISTIC_CATEGORY.TALENTS}\r\n      >\r\n        <BoringSpellValueText spell={SPELLS.CALLING_THE_SHOTS_TALENT}>\r\n          <>\r\n            {formatNumber(this.effectiveTrueshotReductionMs / 1000)}s / {formatNumber((this.effectiveTrueshotReductionMs + this.wastedTrueshotReductionMs) / 1000)}s <small>CDR</small>\r\n          </>\r\n        </BoringSpellValueText>\r\n      </Statistic>\r\n    );\r\n  }\r\n}\r\n\r\nexport default CallingTheShots;\r\n","import React from 'react';\r\nimport Analyzer, { Options } from 'parser/core/Analyzer';\r\nimport Statistic from 'interface/statistics/Statistic';\r\nimport STATISTIC_ORDER from 'interface/others/STATISTIC_ORDER';\r\nimport STATISTIC_CATEGORY from 'interface/others/STATISTIC_CATEGORY';\r\nimport SPELLS from 'common/SPELLS';\r\nimport BoringSpellValueText from 'interface/statistics/components/BoringSpellValueText';\r\nimport { formatNumber } from 'common/format';\r\nimport Abilities from 'parser/core/modules/Abilities';\r\nimport SpellUsable from 'parser/shared/modules/SpellUsable';\r\nimport { ThresholdStyle } from 'parser/core/ParseResults';\r\n\r\nclass DeadEye extends Analyzer {\r\n  static dependencies = {\r\n    spellUsable: SpellUsable,\r\n    abilities: Abilities,\r\n  };\r\n\r\n  //Incremented in Aimed Shot module\r\n  deadEyeEffectiveCDR: number = 0;\r\n  deadEyePotentialCDR: number = 0;\r\n  averageAimedShotCD: number = 0;\r\n\r\n  protected spellUsable!: SpellUsable;\r\n  protected abilities!: Abilities;\r\n\r\n  constructor(options: Options) {\r\n    super(options);\r\n    this.active = this.selectedCombatant.hasTalent(SPELLS.DEAD_EYE_TALENT.id);\r\n  }\r\n\r\n  get deadEyeEfficacy() {\r\n    return this.deadEyeEffectiveCDR / this.deadEyePotentialCDR;\r\n  }\r\n\r\n  get deadEyeEfficacyThresholds() {\r\n    return {\r\n      actual: this.deadEyeEfficacy,\r\n      isLessThan: {\r\n        minor: 0.8,\r\n        average: 0.7,\r\n        major: 0.6,\r\n      },\r\n      style: ThresholdStyle.PERCENTAGE,\r\n    };\r\n  }\r\n\r\n  statistic() {\r\n    return (\r\n      <Statistic\r\n        position={STATISTIC_ORDER.OPTIONAL(13)}\r\n        size=\"flexible\"\r\n        category={STATISTIC_CATEGORY.TALENTS}\r\n        tooltip={(\r\n          <>\r\n            {formatNumber(this.deadEyeEffectiveCDR / 1000)}s effective Aimed Shot CDR\r\n            <br />\r\n            {formatNumber(this.deadEyePotentialCDR / 1000)}s potential Aimed Shot CDR, this include time where Aimed Shot was not on cooldown and Dead Eye buff was active\r\n          </>\r\n        )}\r\n      >\r\n        <BoringSpellValueText spell={SPELLS.DEAD_EYE_TALENT}>\r\n          <>\r\n            {formatNumber(this.deadEyeEffectiveCDR / 1000)}/{formatNumber(this.deadEyePotentialCDR / 1000)}s <small> total Aimed Shot CDR</small>\r\n            <br />\r\n            <small>up to </small>{(this.deadEyeEffectiveCDR / this.averageAimedShotCD).toFixed(1)} <small>extra Aimed Shot casts</small>\r\n          </>\r\n        </BoringSpellValueText>\r\n      </Statistic>\r\n    );\r\n  }\r\n\r\n}\r\n\r\nexport default DeadEye;\r\n","import React from 'react';\r\n\r\nimport Analyzer, { Options, SELECTED_PLAYER } from 'parser/core/Analyzer';\r\nimport SPELLS from 'common/SPELLS';\r\nimport STATISTIC_ORDER from 'interface/others/STATISTIC_ORDER';\r\nimport calculateEffectiveDamage from 'parser/core/calculateEffectiveDamage';\r\nimport ItemDamageDone from 'interface/ItemDamageDone';\r\nimport Statistic from 'interface/statistics/Statistic';\r\nimport BoringSpellValueText from 'interface/statistics/components/BoringSpellValueText';\r\nimport Events, { CastEvent, DamageEvent } from 'parser/core/Events';\r\nimport { ARCANE_SHOT_MAX_TRAVEL_TIME, PRECISE_SHOTS_ASSUMED_PROCS, PRECISE_SHOTS_MODIFIER } from 'parser/hunter/marksmanship/constants';\r\nimport { ThresholdStyle } from 'parser/core/ParseResults';\r\n\r\n/**\r\n * Aimed Shot causes your next 1-2 Arcane Shots, Chimaera Shots or Multi-Shots to deal 100% more damage.\r\n *\r\n * Example log:\r\n * https://www.warcraftlogs.com/reports/9Ljy6fh1TtCDHXVB#fight=2&type=auras&source=25&ability=260242\r\n */\r\n\r\nclass PreciseShots extends Analyzer {\r\n\r\n  damage = 0;\r\n  buffsActive = 0;\r\n  buffsSpent = 0;\r\n  minOverwrittenProcs = 0;\r\n  maxOverwrittenProcs = 0;\r\n  buffedShotInFlight: number | null = null;\r\n\r\n  constructor(options: Options) {\r\n    super(options);\r\n    this.addEventListener(Events.applybuff.by(SELECTED_PLAYER).spell(SPELLS.PRECISE_SHOTS), this.onPreciseShotsApplication);\r\n    this.addEventListener(Events.removebuff.by(SELECTED_PLAYER).spell(SPELLS.PRECISE_SHOTS), this.onPreciseShotsRemoval);\r\n    this.addEventListener(Events.removebuffstack.by(SELECTED_PLAYER).spell(SPELLS.PRECISE_SHOTS), this.onPreciseShotsStackRemoval);\r\n    this.addEventListener(Events.applybuffstack.by(SELECTED_PLAYER).spell(SPELLS.PRECISE_SHOTS), this.onPreciseShotsStackApplication);\r\n    this.addEventListener(Events.cast.by(SELECTED_PLAYER).spell([SPELLS.ARCANE_SHOT, SPELLS.MULTISHOT_MM, SPELLS.CHIMAERA_SHOT_MM_TALENT]), this.onPreciseCast);\r\n    this.addEventListener(Events.damage.by(SELECTED_PLAYER), this.checkForBuff);\r\n    this.addEventListener(Events.damage.by(SELECTED_PLAYER).spell([SPELLS.ARCANE_SHOT, SPELLS.MULTISHOT_MM, SPELLS.CHIMAERA_SHOT_MM_FROST_DAMAGE, SPELLS.CHIMAERA_SHOT_MM_NATURE_DAMAGE]), this.onPreciseDamage);\r\n  }\r\n\r\n  get preciseShotsUtilizationPercentage() {\r\n    return this.buffsSpent / (this.buffsSpent + this.minOverwrittenProcs);\r\n  }\r\n\r\n  get preciseShotsWastedThreshold() {\r\n    return {\r\n      actual: this.preciseShotsUtilizationPercentage,\r\n      isLessThan: {\r\n        minor: 0.9,\r\n        average: 0.85,\r\n        major: 0.8,\r\n      },\r\n      style: ThresholdStyle.PERCENTAGE,\r\n    };\r\n  }\r\n\r\n  onPreciseShotsApplication() {\r\n    this.buffsActive = PRECISE_SHOTS_ASSUMED_PROCS;\r\n  }\r\n\r\n  onPreciseShotsRemoval() {\r\n    this.buffsSpent += 1;\r\n    this.buffsActive = 0;\r\n  }\r\n\r\n  onPreciseShotsStackRemoval() {\r\n    this.buffsSpent += 1;\r\n    this.buffsActive -= 1;\r\n  }\r\n\r\n  onPreciseShotsStackApplication() {\r\n    this.minOverwrittenProcs += 1;\r\n    this.maxOverwrittenProcs += 2;\r\n    this.buffsActive = PRECISE_SHOTS_ASSUMED_PROCS;\r\n  }\r\n\r\n  onPreciseCast(event: CastEvent) {\r\n    if (!this.selectedCombatant.hasBuff(SPELLS.PRECISE_SHOTS.id)) {\r\n      return;\r\n    }\r\n    this.buffedShotInFlight = event.timestamp;\r\n  }\r\n\r\n  onPreciseDamage(event: DamageEvent) {\r\n    this.checkForBuff(event);\r\n    if (!this.buffedShotInFlight) {\r\n      return;\r\n    }\r\n    if (this.buffedShotInFlight < event.timestamp + ARCANE_SHOT_MAX_TRAVEL_TIME) {\r\n      this.damage += calculateEffectiveDamage(event, PRECISE_SHOTS_MODIFIER);\r\n    }\r\n    if (event.ability.guid === SPELLS.ARCANE_SHOT.id) {\r\n      this.buffedShotInFlight = null;\r\n    }\r\n  }\r\n\r\n  checkForBuff(event: DamageEvent) {\r\n    if (!this.buffedShotInFlight) {\r\n      return;\r\n    }\r\n    if (this.buffedShotInFlight > event.timestamp + ARCANE_SHOT_MAX_TRAVEL_TIME) {\r\n      this.buffedShotInFlight = null;\r\n    }\r\n  }\r\n\r\n  statistic() {\r\n    return (\r\n      <Statistic\r\n        position={STATISTIC_ORDER.OPTIONAL(2)}\r\n        size=\"flexible\"\r\n        tooltip={(\r\n          <>\r\n            You wasted between {this.minOverwrittenProcs} and {this.maxOverwrittenProcs} Precise Shots procs by casting Aimed Shot when you already had Precise Shots active\r\n          </>\r\n        )}\r\n      >\r\n        <BoringSpellValueText spell={SPELLS.PRECISE_SHOTS}>\r\n          <>\r\n            <ItemDamageDone amount={this.damage} /><br />\r\n            {this.buffsSpent} <small>buffs used</small>\r\n          </>\r\n        </BoringSpellValueText>\r\n      </Statistic>\r\n    );\r\n  }\r\n}\r\n\r\nexport default PreciseShots;\r\n","import React from 'react';\r\nimport PropTypes from 'prop-types';\r\nimport SPELLS from 'common/SPELLS';\r\nimport SpellLink from 'common/SpellLink';\r\nimport Checklist from 'parser/shared/modules/features/Checklist';\r\nimport Rule from 'parser/shared/modules/features/Checklist/Rule';\r\nimport Requirement from 'parser/shared/modules/features/Checklist/Requirement';\r\nimport GenericCastEfficiencyRequirement from 'parser/shared/modules/features/Checklist/GenericCastEfficiencyRequirement';\r\nimport PreparationRule from 'parser/shared/modules/features/Checklist/PreparationRule';\r\n\r\nconst MarksmanshipChecklist = ({ combatant, castEfficiency, thresholds }: any) => {\r\n\r\n  const AbilityRequirement = (props: any) => (\r\n    <GenericCastEfficiencyRequirement\r\n      castEfficiency={castEfficiency.getCastEfficiencyForSpellId(props.spell)}\r\n      {...props}\r\n    />\r\n  );\r\n\r\n  AbilityRequirement.propTypes = {\r\n    spell: PropTypes.number.isRequired,\r\n  };\r\n\r\n  return (\r\n    <Checklist>\r\n      <Rule\r\n        name=\"Use core abilities as often as possible\"\r\n        description={(\r\n          <>\r\n            Using your core abilities as often as possible can help raise your dps significantly. Some help more than others, but as a general rule of thumb you should be looking to use most of your damaging abilities and damage cooldowns as often as possible, unless you need to save them for a prioirty burst phase that is coming up soon.\r\n            {'  '}\r\n            <a href=\"https://www.icy-veins.com/wow/marksmanship-hunter-pve-dps-rotation-cooldowns-abilities\" target=\"_blank\" rel=\"noopener noreferrer\">More info.</a>\r\n          </>\r\n        )}\r\n      >\r\n        <AbilityRequirement spell={SPELLS.AIMED_SHOT.id} />\r\n        <AbilityRequirement spell={SPELLS.RAPID_FIRE.id} />\r\n        <AbilityRequirement spell={SPELLS.TRUESHOT.id} />\r\n        <AbilityRequirement spell={SPELLS.KILL_SHOT_MM_BM.id} />\r\n\r\n        {combatant.hasTalent(SPELLS.DOUBLE_TAP_TALENT.id) &&\r\n        <AbilityRequirement spell={SPELLS.DOUBLE_TAP_TALENT.id} />}\r\n\r\n        {combatant.hasTalent(SPELLS.EXPLOSIVE_SHOT_TALENT.id) &&\r\n        <AbilityRequirement spell={SPELLS.EXPLOSIVE_SHOT_TALENT.id} />}\r\n\r\n        {combatant.hasTalent(SPELLS.BARRAGE_TALENT.id) &&\r\n        <AbilityRequirement spell={SPELLS.BARRAGE_TALENT.id} />}\r\n\r\n        {combatant.hasTalent(SPELLS.VOLLEY_TALENT.id) &&\r\n        <AbilityRequirement spell={SPELLS.VOLLEY_TALENT.id} />}\r\n\r\n        {combatant.hasTalent(SPELLS.A_MURDER_OF_CROWS_TALENT.id) &&\r\n        <AbilityRequirement spell={SPELLS.A_MURDER_OF_CROWS_TALENT.id} />}\r\n      </Rule>\r\n\r\n      <Rule\r\n        name=\"Talent, cooldown and spell efficiency\"\r\n        description=\"You want to be using your baseline spells as efficiently as possible, as well as choosing the right talents for the given scenario. If a talent isn't being used optimally for the encounter, you should consider swapping to a different talent.\"\r\n      >\r\n\r\n        <Requirement name={<><SpellLink id={SPELLS.PRECISE_SHOTS.id} /> utilization</>} thresholds={thresholds.preciseShotsThresholds} />\r\n\r\n        {combatant.hasTalent(SPELLS.SERPENT_STING_TALENT.id) && <Requirement name={<><SpellLink id={SPELLS.SERPENT_STING_TALENT.id} /> uptime</>} thresholds={thresholds.serpentStingUptimeThresholds} />}\r\n\r\n        {combatant.hasTalent(SPELLS.SERPENT_STING_TALENT.id) && <Requirement name={<>Refreshes of <SpellLink id={SPELLS.SERPENT_STING_TALENT.id} /> that didn't pandemic </>} thresholds={thresholds.serpentStingNonPandemicThresholds} />}\r\n\r\n        {combatant.hasTalent(SPELLS.CALLING_THE_SHOTS_TALENT.id) && <Requirement name={<><SpellLink id={SPELLS.CALLING_THE_SHOTS_TALENT.id} /> CDR efficiency </>} thresholds={thresholds.callingTheShotsThresholds} />}\r\n\r\n        {combatant.hasTalent(SPELLS.DEAD_EYE_TALENT.id) && <Requirement name={<><SpellLink id={SPELLS.AIMED_SHOT.id} /> recharge efficiency from <SpellLink id={SPELLS.DEAD_EYE_TALENT.id} /></>} thresholds={thresholds.deadEyeThresholds} />}\r\n\r\n        {combatant.hasTalent(SPELLS.LETHAL_SHOTS_TALENT.id) && <Requirement name={<>Potential <SpellLink id={SPELLS.LETHAL_SHOTS_TALENT.id} /> triggers when <SpellLink id={SPELLS.RAPID_FIRE.id} /> isn't on CD</>} thresholds={thresholds.lethalShotsThresholds} />}\r\n\r\n        {combatant.hasTalent(SPELLS.STEADY_FOCUS_TALENT.id) && <Requirement name={<><SpellLink id={SPELLS.STEADY_FOCUS_TALENT.id} /> buff uptime</>} thresholds={thresholds.steadyFocusThresholds} />}\r\n      </Rule>\r\n\r\n      <Rule\r\n        name=\"Downtime & Cancelled Casts\"\r\n        description={(\r\n          <>\r\n            As a DPS, you should try to reduce the delay between casting spells. This is especially true as a Marksmanship that should be casting something all the time, because you can always be casting <SpellLink id={SPELLS.STEADY_SHOT.id} /> if nothing else is available.\r\n          </>\r\n        )}\r\n      >\r\n        <Requirement name=\"Active time\" thresholds={thresholds.downtimeSuggestionThresholds} />\r\n\r\n        <Requirement name=\"Successful casts\" thresholds={thresholds.cancelledCastsThresholds} />\r\n      </Rule>\r\n\r\n      <Rule\r\n        name=\"Resource generators\"\r\n        description={(\r\n          <>\r\n            Capping on Focus is a loss of potential DPS, as you could've used that Focus for a damaging ability at a later point. If everything is on cooldown, try and use {combatant.hasTalent(SPELLS.CHIMAERA_SHOT_MM_TALENT.id) ? <SpellLink id={SPELLS.CHIMAERA_SHOT_MM_TALENT.id} /> : <SpellLink id={SPELLS.ARCANE_SHOT.id} />} to stay off the focus cap and do some damage.\r\n          </>\r\n        )}\r\n      >\r\n        <Requirement name=\"Effective Focus from generators\" thresholds={thresholds.focusGeneratorWasteThresholds} />\r\n\r\n        <Requirement name=\"Effective natural Focus regeneration\" thresholds={thresholds.focusNaturalRegenWasteThresholds} />\r\n      </Rule>\r\n\r\n      <PreparationRule thresholds={thresholds} />\r\n\r\n    </Checklist>\r\n  );\r\n};\r\n\r\nMarksmanshipChecklist.propTypes = {\r\n  castEfficiency: PropTypes.object.isRequired,\r\n  combatant: PropTypes.shape({\r\n    hasTalent: PropTypes.func.isRequired,\r\n  }).isRequired,\r\n  thresholds: PropTypes.object.isRequired,\r\n};\r\n\r\nexport default MarksmanshipChecklist;\r\n","import React from 'react';\r\n\r\nimport BaseChecklist from 'parser/shared/modules/features/Checklist/Module';\r\nimport CastEfficiency from 'parser/shared/modules/CastEfficiency';\r\nimport Combatants from 'parser/shared/modules/Combatants';\r\nimport PreparationRuleAnalyzer from 'parser/shared/modules/features/Checklist/PreparationRuleAnalyzer';\r\nimport FocusDetails from 'parser/hunter/shared/modules/resources/FocusDetails';\r\nimport FocusCapTracker from 'parser/hunter/shared/modules/resources/FocusCapTracker';\r\nimport SteadyFocus from 'parser/hunter/marksmanship/modules/talents/SteadyFocus';\r\nimport LethalShots from 'parser/hunter/marksmanship/modules/talents/LethalShots';\r\nimport SerpentSting from 'parser/hunter/marksmanship/modules/talents/SerpentSting';\r\nimport CallingTheShots from 'parser/hunter/marksmanship/modules/talents/CallingTheShots';\r\nimport DeadEye from 'parser/hunter/marksmanship/modules/talents/DeadEye';\r\nimport PreciseShots from 'parser/hunter/marksmanship/modules/spells/PreciseShots';\r\nimport CancelledCasts from 'parser/hunter/shared/modules/features/CancelledCasts';\r\n\r\nimport Component from './Component';\r\nimport AlwaysBeCasting from '../features/AlwaysBeCasting';\r\n\r\nclass Checklist extends BaseChecklist {\r\n  static dependencies = {\r\n    combatants: Combatants,\r\n\r\n    //region Core\r\n    castEfficiency: CastEfficiency,\r\n    preparationRuleAnalyzer: PreparationRuleAnalyzer,\r\n    alwaysBeCasting: AlwaysBeCasting,\r\n    cancelledCasts: CancelledCasts,\r\n    //endregion\r\n\r\n    //region Spells\r\n    preciseShots: PreciseShots,\r\n    //endregion\r\n\r\n    //region Talents\r\n    steadyFocus: SteadyFocus,\r\n    lethalShots: LethalShots,\r\n    serpentSting: SerpentSting,\r\n    callingTheShots: CallingTheShots,\r\n    deadEye: DeadEye,\r\n    //endregion\r\n\r\n    //region Resources\r\n    focusGeneratorDetails: FocusDetails,\r\n    focusCapTracker: FocusCapTracker,\r\n    //endregion\r\n  };\r\n\r\n  //region Core\r\n  protected combatants!: Combatants;\r\n  protected castEfficiency!: CastEfficiency;\r\n  protected preparationRuleAnalyzer!: PreparationRuleAnalyzer;\r\n  protected alwaysBeCasting!: AlwaysBeCasting;\r\n  protected cancelledCasts!: CancelledCasts;\r\n  //endregion\r\n\r\n  //region Spells\r\n  protected preciseShots!: PreciseShots;\r\n  //endregion\r\n\r\n  //region Talents\r\n  protected steadyFocus!: SteadyFocus;\r\n  protected lethalShots!: LethalShots;\r\n  protected serpentSting!: SerpentSting;\r\n  protected callingTheShots!: CallingTheShots;\r\n  protected deadEye!: DeadEye;\r\n  //endregion\r\n\r\n  //region Resources\r\n  protected focusGeneratorDetails!: FocusDetails;\r\n  protected focusCapTracker!: FocusCapTracker;\r\n\r\n  //endregion\r\n\r\n  render() {\r\n    return (\r\n      <Component\r\n        combatant={this.combatants.selected}\r\n        castEfficiency={this.castEfficiency}\r\n        thresholds={{\r\n          //region Core\r\n          ...this.preparationRuleAnalyzer.thresholds,\r\n          downtimeSuggestionThresholds: this.alwaysBeCasting.suggestionThresholds,\r\n          cancelledCastsThresholds: this.cancelledCasts.suggestionThresholds,\r\n          //endregion\r\n\r\n          //region Spells\r\n          preciseShotsThresholds: this.preciseShots.preciseShotsWastedThreshold,\r\n          //endregion\r\n\r\n          //region Talents\r\n          steadyFocusThresholds: this.steadyFocus.uptimeThresholds,\r\n          lethalShotsThresholds: this.lethalShots.wastedPotentialCDR,\r\n          serpentStingUptimeThresholds: this.serpentSting.uptimeThreshold,\r\n          serpentStingNonPandemicThresholds: this.serpentSting.nonPandemicThreshold,\r\n          deadEyeThresholds: this.deadEye.deadEyeEfficacyThresholds,\r\n          callingTheShotsThresholds: this.callingTheShots.callingTheShotsEfficacyThresholds,\r\n          //endregion\r\n\r\n          //region Resources\r\n          focusGeneratorWasteThresholds: this.focusGeneratorDetails.focusGeneratorWasteThresholds,\r\n          focusNaturalRegenWasteThresholds: this.focusCapTracker.focusNaturalRegenWasteThresholds,\r\n          //endregion\r\n        }}\r\n      />\r\n    );\r\n  }\r\n}\r\n\r\nexport default Checklist;\r\n","import FocusCapTracker from 'parser/hunter/shared/modules/resources/FocusCapTracker';\r\nimport { HUNTER_BASE_FOCUS_REGEN } from 'parser/hunter/shared/constants';\r\nimport { TRUESHOT_FOCUS_INCREASE } from 'parser/hunter/marksmanship/constants';\r\nimport SPELLS from 'common/SPELLS';\r\n\r\nclass MarksmanshipFocusCapTracker extends FocusCapTracker {\r\n\r\n  getBaseRegenRate() {\r\n    let regenRate = HUNTER_BASE_FOCUS_REGEN;\r\n    if (this.selectedCombatant.hasBuff(SPELLS.TRUESHOT.id)) {\r\n      regenRate *= (1 + TRUESHOT_FOCUS_INCREASE);\r\n    }\r\n    return regenRate;\r\n  }\r\n}\r\n\r\nexport default MarksmanshipFocusCapTracker;\r\n","import React from 'react';\r\n\r\nimport Analyzer from 'parser/core/Analyzer';\r\nimport { When } from 'parser/core/ParseResults';\r\nimport SPELLS from 'common/SPELLS';\r\nimport SpellLink from 'common/SpellLink';\r\nimport resourceSuggest from 'parser/shared/modules/resources/resourcetracker/ResourceSuggest';\r\nimport FocusTracker from 'parser/hunter/shared/modules/resources/FocusTracker';\r\n\r\nclass Focus extends Analyzer {\r\n  static dependencies = {\r\n    focusTracker: FocusTracker,\r\n  };\r\n\r\n  protected focusTracker!: FocusTracker;\r\n\r\n  suggestions(when: When) {\r\n    const mmFocusExtraSuggestion = <>Try to keep focus below max by using <SpellLink id={SPELLS.AIMED_SHOT.id} />, {this.selectedCombatant.hasTalent(SPELLS.CHIMAERA_SHOT_MM_TALENT.id) ? <SpellLink id={SPELLS.CHIMAERA_SHOT_MM_TALENT.id} /> : <SpellLink id={SPELLS.ARCANE_SHOT.id} />} and <SpellLink id={SPELLS.MULTISHOT_MM.id} />.</>;\r\n    resourceSuggest(when, this.focusTracker, {\r\n      spell: SPELLS.STEADY_SHOT_FOCUS,\r\n      minor: 0.025,\r\n      avg: 0.05,\r\n      major: 0.1,\r\n      extraSuggestion: mmFocusExtraSuggestion,\r\n    });\r\n    resourceSuggest(when, this.focusTracker, {\r\n      spell: SPELLS.RAPID_FIRE_FOCUS,\r\n      minor: 0.025,\r\n      avg: 0.05,\r\n      major: 0.1,\r\n      extraSuggestion: mmFocusExtraSuggestion,\r\n    });\r\n  }\r\n}\r\n\r\nexport default Focus;\r\n","import SharedHunterFocusUsage from 'parser/hunter/shared/modules/resources/FocusUsage';\r\nimport { LIST_OF_FOCUS_SPENDERS_MM } from 'parser/hunter/marksmanship/constants';\r\nimport Spell from 'common/SPELLS/Spell';\r\n\r\nclass MarksmanshipFocusUsage extends SharedHunterFocusUsage {\r\n\r\n  static listOfResourceSpenders: Spell[] = [\r\n    ...LIST_OF_FOCUS_SPENDERS_MM,\r\n  ];\r\n\r\n}\r\n\r\nexport default MarksmanshipFocusUsage;\r\n","import React from 'react';\r\nimport SPELLS from 'common/SPELLS';\r\nimport Analyzer, { Options, SELECTED_PLAYER } from 'parser/core/Analyzer';\r\nimport Events, { AnyEvent, ApplyBuffEvent, EnergizeEvent, EventType, RefreshBuffEvent, RemoveBuffEvent } from 'parser/core/Events';\r\nimport SpellUsable from 'parser/shared/modules/SpellUsable';\r\nimport Abilities from 'parser/core/modules/Abilities';\r\nimport { RAPID_FIRE_FOCUS_PER_TICK, TRUESHOT_RAPID_FIRE_RECHARGE_INCREASE } from 'parser/hunter/marksmanship/constants';\r\nimport Statistic from 'interface/statistics/Statistic';\r\nimport STATISTIC_ORDER from 'interface/others/STATISTIC_ORDER';\r\nimport BoringSpellValueText from 'interface/statistics/components/BoringSpellValueText';\r\nimport { MS_BUFFER, NESINGWARY_FOCUS_GAIN_MULTIPLIER } from 'parser/hunter/shared/constants';\r\n\r\n/**\r\n * Shoot a stream of 7 shots at your target over 2 sec, dealing a total of 242% attack power Physical damage.\r\n * Each shot generates 1 focus.\r\n *\r\n * Example log:\r\n *\r\n */\r\nconst debug = false;\r\n\r\nclass RapidFire extends Analyzer {\r\n\r\n  static dependencies = {\r\n    spellUsable: SpellUsable,\r\n    abilities: Abilities,\r\n  };\r\n\r\n  lastReductionTimestamp = 0;\r\n  casts = 0;\r\n  effectiveCDRFromTrueshot = 0;\r\n  wastedCDRFromTrueshot = 0;\r\n  currentFocusTicks = 0;\r\n  effectiveFocusGain = 0;\r\n  focusWasted = 0;\r\n  additionalFocusFromTrueshot = 0;\r\n  possibleAdditionalFocusFromTrueshot = 0;\r\n  additionalFocusFromNesingwary = 0;\r\n  possibleAdditionalFocusFromNesingwary = 0;\r\n  lastFocusTickTimestamp = 0;\r\n\r\n  protected spellUsable!: SpellUsable;\r\n  protected abilities!: Abilities;\r\n\r\n  constructor(options: Options) {\r\n    super(options);\r\n\r\n    this.addEventListener(Events.any, this.onEvent);\r\n    this.addEventListener(Events.cast.by(SELECTED_PLAYER).spell(SPELLS.RAPID_FIRE), this.onCast);\r\n    this.addEventListener(Events.applybuff.by(SELECTED_PLAYER).spell(SPELLS.TRUESHOT), this.onAffectingBuffChange);\r\n    this.addEventListener(Events.refreshbuff.by(SELECTED_PLAYER).spell(SPELLS.TRUESHOT), this.onAffectingBuffChange);\r\n    this.addEventListener(Events.removebuff.to(SELECTED_PLAYER).spell(SPELLS.TRUESHOT), this.onAffectingBuffChange);\r\n    this.addEventListener(Events.energize.by(SELECTED_PLAYER).spell(SPELLS.RAPID_FIRE_FOCUS), this.onEnergize);\r\n  }\r\n\r\n  onEvent(event: AnyEvent) {\r\n    if (!this.selectedCombatant.hasBuff(SPELLS.TRUESHOT.id)) {\r\n      return;\r\n    }\r\n    if (!this.spellUsable.isOnCooldown(SPELLS.RAPID_FIRE.id)) {\r\n      return;\r\n    }\r\n    if (this.lastReductionTimestamp === 0 || event.timestamp <= this.lastReductionTimestamp) {\r\n      return;\r\n    }\r\n    /**\r\n     * modRate is what the value is called in-game that defines how fast a cooldown recharges, so reusing that terminology here\r\n     */\r\n    let modRate = 1;\r\n    if (this.selectedCombatant.hasBuff(SPELLS.TRUESHOT.id)) {\r\n      modRate /= (1 + TRUESHOT_RAPID_FIRE_RECHARGE_INCREASE);\r\n    }\r\n    const spellReductionSpeed = 1 / modRate;\r\n    debug && console.log('modRate: ', modRate, ' & spellReductionSpeed: ', spellReductionSpeed);\r\n    this.reduceRapidFireCooldown(event, spellReductionSpeed);\r\n    this.lastReductionTimestamp = event.timestamp;\r\n  }\r\n\r\n  reduceRapidFireCooldown(event: any, spellReductionSpeed: number) {\r\n    const maxReductionMs: number = (event.timestamp - this.lastReductionTimestamp) * spellReductionSpeed;\r\n    debug && console.log('Reducing Rapid Fire cooldown by up to: ', maxReductionMs + ' seconds since last event');\r\n    const effectiveReductionMs: number = this.spellUsable.reduceCooldown(SPELLS.RAPID_FIRE.id, maxReductionMs, event.timestamp);\r\n    this.effectiveCDRFromTrueshot += effectiveReductionMs;\r\n    this.wastedCDRFromTrueshot += effectiveReductionMs - maxReductionMs;\r\n  }\r\n\r\n  onAffectingBuffChange(event: ApplyBuffEvent | RefreshBuffEvent | RemoveBuffEvent) {\r\n    if (event.type === EventType.RemoveBuff) {\r\n      this.onEvent(event);\r\n    }\r\n    this.lastReductionTimestamp = event.timestamp;\r\n  }\r\n\r\n  onCast() {\r\n    this.casts += 1;\r\n    this.currentFocusTicks = 0;\r\n  }\r\n\r\n  onEnergize(event: EnergizeEvent) {\r\n    this.effectiveFocusGain += event.resourceChange - event.waste;\r\n    this.focusWasted += event.waste;\r\n    const hasTrueshot = this.selectedCombatant.hasBuff(SPELLS.TRUESHOT.id);\r\n    const hasNesingwary = this.selectedCombatant.hasBuff(SPELLS.NESINGWARYS_TRAPPING_APPARATUS_ENERGIZE.id);\r\n\r\n    /** If Trueshot is active Rapid Fire has a 50% chance to fire an additional energize event\r\n     *  However because focus can't be fractional and WoW rounds down on halves, we simply attribute 1 focus gain per additional energize tick over the baseline amount\r\n     *  However if Nesingwary is also active - the focus amount goes up to 3 because 1.5 * 2 = 3, and that works despite 1.5 focus not working.. In this case we can attribute 2 focus to Nesingwary, since that isn't possible otherwise and only 1 to Trueshot (if it was in excess of the regular 7 energize events).\r\n     *\r\n     */\r\n    if (hasTrueshot && (this.lastFocusTickTimestamp + (MS_BUFFER / 2)) > event.timestamp) {\r\n      this.additionalFocusFromTrueshot += event.resourceChange - event.waste;\r\n      this.possibleAdditionalFocusFromTrueshot += RAPID_FIRE_FOCUS_PER_TICK;\r\n    }\r\n    if (hasNesingwary) {\r\n      this.additionalFocusFromNesingwary += Math.max(Math.ceil(event.resourceChange / NESINGWARY_FOCUS_GAIN_MULTIPLIER) - event.waste, 0);\r\n      this.possibleAdditionalFocusFromNesingwary += event.resourceChange - RAPID_FIRE_FOCUS_PER_TICK;\r\n    }\r\n  }\r\n\r\n  statistic() {\r\n    return (\r\n      <Statistic\r\n        position={STATISTIC_ORDER.OPTIONAL(2)}\r\n        size=\"flexible\"\r\n      >\r\n        <BoringSpellValueText spell={SPELLS.RAPID_FIRE}>\r\n          <>\r\n            {this.effectiveFocusGain}/{this.focusWasted + this.effectiveFocusGain} <small>possible focus gained</small>\r\n          </>\r\n        </BoringSpellValueText>\r\n      </Statistic>\r\n    );\r\n  }\r\n}\r\n\r\nexport default RapidFire;\r\n","import Analyzer, { Options, SELECTED_PLAYER } from 'parser/core/Analyzer';\r\nimport Events, { EnergizeEvent } from 'parser/core/Events';\r\nimport SPELLS from 'common/SPELLS';\r\nimport Statistic from 'interface/statistics/Statistic';\r\nimport STATISTIC_ORDER from 'interface/others/STATISTIC_ORDER';\r\nimport React from 'react';\r\nimport BoringSpellValueText from 'interface/statistics/components/BoringSpellValueText';\r\nimport { STEADY_SHOT_FOCUS_REGEN, TRUESHOT_FOCUS_INCREASE } from 'parser/hunter/marksmanship/constants';\r\nimport { NESINGWARY_FOCUS_GAIN_MULTIPLIER } from 'parser/hunter/shared/constants';\r\n\r\nclass SteadyShot extends Analyzer {\r\n\r\n  effectiveFocusGain = 0;\r\n  focusWasted = 0;\r\n  additionalFocusFromTrueshot = 0;\r\n  possibleAdditionalFocusFromTrueshot = 0;\r\n  additionalFocusFromNesingwary = 0;\r\n  possibleAdditionalFocusFromNesingwary = 0;\r\n\r\n  constructor(options: Options) {\r\n    super(options);\r\n    this.addEventListener(Events.energize.by(SELECTED_PLAYER).spell(SPELLS.STEADY_SHOT_FOCUS), this.onEnergize);\r\n  }\r\n\r\n  onEnergize(event: EnergizeEvent) {\r\n    this.effectiveFocusGain += event.resourceChange - event.waste;\r\n    this.focusWasted += event.waste;\r\n    const hasTrueshot = this.selectedCombatant.hasBuff(SPELLS.TRUESHOT.id);\r\n    const hasNesingwary = this.selectedCombatant.hasBuff(SPELLS.NESINGWARYS_TRAPPING_APPARATUS_ENERGIZE.id);\r\n    if (hasTrueshot) {\r\n      this.additionalFocusFromTrueshot += event.resourceChange * (1 - 1 / (1 + TRUESHOT_FOCUS_INCREASE)) - Math.max(event.waste - (STEADY_SHOT_FOCUS_REGEN * (hasNesingwary ? NESINGWARY_FOCUS_GAIN_MULTIPLIER : 1)), 0);\r\n      this.possibleAdditionalFocusFromTrueshot += STEADY_SHOT_FOCUS_REGEN * TRUESHOT_FOCUS_INCREASE * (hasNesingwary ? NESINGWARY_FOCUS_GAIN_MULTIPLIER : 1);\r\n    }\r\n    if (hasNesingwary) {\r\n      this.additionalFocusFromNesingwary += event.resourceChange * (1 - 1 / NESINGWARY_FOCUS_GAIN_MULTIPLIER) - Math.max(event.waste - (STEADY_SHOT_FOCUS_REGEN * (hasTrueshot ? (1 + TRUESHOT_FOCUS_INCREASE) : 1)), 0);\r\n      this.possibleAdditionalFocusFromNesingwary += STEADY_SHOT_FOCUS_REGEN * (hasTrueshot ? (1 + TRUESHOT_FOCUS_INCREASE) : 1);\r\n    }\r\n  }\r\n\r\n  statistic() {\r\n    return (\r\n      <Statistic\r\n        position={STATISTIC_ORDER.OPTIONAL(2)}\r\n        size=\"flexible\"\r\n      >\r\n        <BoringSpellValueText spell={SPELLS.STEADY_SHOT}>\r\n          <>\r\n            {this.effectiveFocusGain}/{this.focusWasted + this.effectiveFocusGain} <small>possible focus gained</small>\r\n          </>\r\n        </BoringSpellValueText>\r\n      </Statistic>\r\n    );\r\n  }\r\n\r\n}\r\n\r\nexport default SteadyShot;\r\n","import React from 'react';\r\nimport Analyzer, { Options, SELECTED_PLAYER } from 'parser/core/Analyzer';\r\nimport SPELLS from 'common/SPELLS';\r\nimport STATISTIC_ORDER from 'interface/others/STATISTIC_ORDER';\r\nimport Statistic from 'interface/statistics/Statistic';\r\nimport BoringSpellValueText from 'interface/statistics/components/BoringSpellValueText';\r\nimport Events, { CastEvent, EnergizeEvent } from 'parser/core/Events';\r\nimport RapidFire from 'parser/hunter/marksmanship/modules/spells/RapidFire';\r\nimport SteadyShot from 'parser/hunter/marksmanship/modules/spells/SteadyShot';\r\nimport MarksmanshipFocusCapTracker from 'parser/hunter/marksmanship/modules/resources/MarksmanshipFocusCapTracker';\r\nimport { HUNTER_BASE_FOCUS_MAX, MS_BUFFER } from 'parser/hunter/shared/constants';\r\nimport { TRUESHOT_FOCUS_INCREASE } from 'parser/hunter/marksmanship/constants';\r\nimport RESOURCE_TYPES from 'game/RESOURCE_TYPES';\r\nimport { formatNumber } from 'common/format';\r\nimport ResourceIcon from 'common/ResourceIcon';\r\nimport SpellIcon from 'common/SpellIcon';\r\n\r\n/**\r\n * Reduces the cooldown of your Aimed Shot and Rapid Fire by 60%, and causes Aimed Shot to cast 50% faster for 15 sec.\r\n * While Trueshot is active, you generate 50% additional Focus.\r\n * Lasts 15 sec.\r\n *\r\n * Example log:\r\n * https://www.warcraftlogs.com/reports/9Ljy6fh1TtCDHXVB#fight=2&type=auras&source=25&ability=288613\r\n */\r\nclass Trueshot extends Analyzer {\r\n\r\n  static dependencies = {\r\n    rapidFire: RapidFire,\r\n    steadyShot: SteadyShot,\r\n    marksmanshipFocusCapTracker: MarksmanshipFocusCapTracker,\r\n  };\r\n\r\n  trueshotCasts = 0;\r\n  aimedShotsPrTS = 0;\r\n  focusGained = 0;\r\n  passiveFocusAttributedToTrueshot = 0;\r\n  possiblePassiveFocusAttributedToTrueshot = 0;\r\n  lastKnownFocusAmount = 0;\r\n  lastCheckedPassiveRegenTimestamp = 0;\r\n  focusAtLastCheck = 0;\r\n\r\n  protected rapidFire!: RapidFire;\r\n  protected steadyShot!: SteadyShot;\r\n  protected marksmanshipFocusCapTracker!: MarksmanshipFocusCapTracker;\r\n\r\n  constructor(options: Options) {\r\n    super(options);\r\n    this.addEventListener(Events.cast.by(SELECTED_PLAYER).spell(SPELLS.AIMED_SHOT), this.onAimedShotCast);\r\n    this.addEventListener(Events.cast.by(SELECTED_PLAYER).spell(SPELLS.TRUESHOT), this.onTrueshotCast);\r\n    this.addEventListener(Events.cast.by(SELECTED_PLAYER), this.focusCheck);\r\n    this.addEventListener(Events.energize.by(SELECTED_PLAYER), this.focusCheck);\r\n  }\r\n\r\n  get averageAimedShots() {\r\n    const averageAimedShots = (this.aimedShotsPrTS / this.trueshotCasts);\r\n    return (isNaN(averageAimedShots) || !isFinite(averageAimedShots)) ? 0 : averageAimedShots;\r\n  }\r\n\r\n  get effectiveFocus() {\r\n    return formatNumber(this.steadyShot.additionalFocusFromTrueshot + this.rapidFire.additionalFocusFromTrueshot + this.passiveFocusAttributedToTrueshot);\r\n  }\r\n\r\n  get possibleFocus() {\r\n    return formatNumber(this.steadyShot.possibleAdditionalFocusFromTrueshot + this.rapidFire.possibleAdditionalFocusFromTrueshot + this.possiblePassiveFocusAttributedToTrueshot);\r\n  }\r\n\r\n  onTrueshotCast(event: CastEvent) {\r\n    this.trueshotCasts += 1;\r\n    this.lastCheckedPassiveRegenTimestamp = event.timestamp;\r\n    const resource = event.classResources?.find(resource => resource.type === RESOURCE_TYPES.FOCUS.id);\r\n    if (!resource) {\r\n      return;\r\n    }\r\n    this.focusAtLastCheck = resource.amount;\r\n  }\r\n\r\n  onAimedShotCast() {\r\n    if (this.selectedCombatant.hasBuff(SPELLS.TRUESHOT.id)) {\r\n      this.aimedShotsPrTS += 1;\r\n    }\r\n  }\r\n\r\n  focusCheck(event: EnergizeEvent | CastEvent) {\r\n    if (!this.selectedCombatant.hasBuff(SPELLS.TRUESHOT.id)) {\r\n      return;\r\n    }\r\n    const resource = event.classResources?.find(resource => resource.type === RESOURCE_TYPES.FOCUS.id);\r\n    if (!resource) {\r\n      return;\r\n    }\r\n    if (event.timestamp >= this.lastCheckedPassiveRegenTimestamp + MS_BUFFER) {\r\n      const timeSinceLastCheck = event.timestamp - this.lastCheckedPassiveRegenTimestamp;\r\n      const possibleTSGainSinceLastCheck = timeSinceLastCheck * this.marksmanshipFocusCapTracker.naturalRegenRate() * (1 - 1 / (1 + TRUESHOT_FOCUS_INCREASE));\r\n      const naturalRegenSinceLastCheck = timeSinceLastCheck * this.marksmanshipFocusCapTracker.naturalRegenRate() - possibleTSGainSinceLastCheck;\r\n      this.possiblePassiveFocusAttributedToTrueshot += possibleTSGainSinceLastCheck;\r\n      if (HUNTER_BASE_FOCUS_MAX - this.focusAtLastCheck > (naturalRegenSinceLastCheck + possibleTSGainSinceLastCheck)) {\r\n        this.passiveFocusAttributedToTrueshot += possibleTSGainSinceLastCheck;\r\n      } else if (HUNTER_BASE_FOCUS_MAX - this.focusAtLastCheck > naturalRegenSinceLastCheck) {\r\n        this.passiveFocusAttributedToTrueshot += HUNTER_BASE_FOCUS_MAX - this.focusAtLastCheck - naturalRegenSinceLastCheck;\r\n      }\r\n      this.lastCheckedPassiveRegenTimestamp = event.timestamp;\r\n      this.focusAtLastCheck = resource.amount;\r\n    }\r\n  }\r\n\r\n  statistic() {\r\n    return (\r\n      <Statistic\r\n        position={STATISTIC_ORDER.OPTIONAL(1)}\r\n        size=\"flexible\"\r\n      >\r\n        <BoringSpellValueText spell={SPELLS.TRUESHOT}>\r\n          <SpellIcon id={SPELLS.AIMED_SHOT.id} noLink /> {this.averageAimedShots.toFixed(1)} <small>per Trueshot</small>\r\n          <br />\r\n          <ResourceIcon id={RESOURCE_TYPES.FOCUS.id} noLink /> {this.effectiveFocus}/{this.possibleFocus} <small>Focus gained</small>\r\n        </BoringSpellValueText>\r\n      </Statistic>\r\n    );\r\n  }\r\n}\r\n\r\nexport default Trueshot;\r\n","import React from 'react';\r\n\r\nimport Analyzer, { Options, SELECTED_PLAYER } from 'parser/core/Analyzer';\r\n\r\nimport SPELLS from 'common/SPELLS';\r\nimport calculateEffectiveDamage from 'parser/core/calculateEffectiveDamage';\r\nimport ItemDamageDone from 'interface/ItemDamageDone';\r\nimport Statistic from 'interface/statistics/Statistic';\r\nimport STATISTIC_ORDER from 'interface/others/STATISTIC_ORDER';\r\nimport BoringSpellValueText from 'interface/statistics/components/BoringSpellValueText';\r\nimport Events, { ApplyBuffEvent, DamageEvent } from 'parser/core/Events';\r\nimport { LONE_WOLF_AFFECTED_SPELLS, LONE_WOLF_INCREASE_PER_RAMP, LONE_WOLF_RAMP_INTERVAL_MS, MAX_LONE_WOLF_MODIFIER, START_LONE_WOLF_MODIFIER } from 'parser/hunter/marksmanship/constants';\r\n\r\n/**\r\n * Increases your damage by 10% when you do not have an active pet.\r\n * After dismissing pet it takes 20 seconds to reach full efficiency.\r\n *\r\n * Example log:\r\n * https://www.warcraftlogs.com/reports/9Ljy6fh1TtCDHXVB#fight=2&type=auras&source=25&ability=155228\r\n */\r\n\r\nclass LoneWolf extends Analyzer {\r\n\r\n  damage = 0;\r\n  lwApplicationTimestamp = 0;\r\n  loneWolfModifier = 0;\r\n  lwAppliedOrRemoved = false;\r\n\r\n  constructor(options: Options) {\r\n    super(options);\r\n    this.addEventListener(Events.applybuff.by(SELECTED_PLAYER).spell(SPELLS.LONE_WOLF_BUFF), this.onLoneWolfApplication);\r\n    this.addEventListener(Events.removebuff.by(SELECTED_PLAYER).spell(SPELLS.LONE_WOLF_BUFF), this.onLoneWolfRemoval);\r\n    this.addEventListener(Events.damage.by(SELECTED_PLAYER).spell(LONE_WOLF_AFFECTED_SPELLS), this.onDamage);\r\n    this.addEventListener(Events.fightend, this.deactivateIfNoDamage);\r\n  }\r\n\r\n  onLoneWolfApplication(event: ApplyBuffEvent) {\r\n    this.lwApplicationTimestamp = event.timestamp;\r\n    this.lwAppliedOrRemoved = true;\r\n  }\r\n\r\n  onLoneWolfRemoval() {\r\n    this.loneWolfModifier = 0;\r\n    this.lwAppliedOrRemoved = true;\r\n  }\r\n\r\n  onDamage(event: DamageEvent) {\r\n    if (this.lwAppliedOrRemoved && !this.selectedCombatant.hasBuff(SPELLS.LONE_WOLF_BUFF.id)) {\r\n      return;\r\n    }\r\n    if (this.lwApplicationTimestamp > 0) {\r\n      this.loneWolfModifier = Math.min(MAX_LONE_WOLF_MODIFIER, Math.floor((((event.timestamp - this.lwApplicationTimestamp) / LONE_WOLF_RAMP_INTERVAL_MS * LONE_WOLF_INCREASE_PER_RAMP) + START_LONE_WOLF_MODIFIER) * 100) / 100);\r\n    } else {\r\n      this.loneWolfModifier = MAX_LONE_WOLF_MODIFIER;\r\n    }\r\n    this.damage += calculateEffectiveDamage(event, this.loneWolfModifier);\r\n  }\r\n\r\n  deactivateIfNoDamage() {\r\n    if (this.damage === 0) {\r\n      this.active = false;\r\n    }\r\n  }\r\n\r\n  statistic() {\r\n    return (\r\n      <Statistic\r\n        position={STATISTIC_ORDER.OPTIONAL(20)}\r\n        size=\"flexible\"\r\n      >\r\n        <BoringSpellValueText spell={SPELLS.LONE_WOLF_BUFF}>\r\n          <>\r\n            <ItemDamageDone amount={this.damage} />\r\n          </>\r\n        </BoringSpellValueText>\r\n      </Statistic>\r\n    );\r\n  }\r\n}\r\n\r\nexport default LoneWolf;\r\n","import SPELLS from 'common/SPELLS';\r\nimport Analyzer, { Options, SELECTED_PLAYER } from 'parser/core/Analyzer';\r\nimport Events, { AnyEvent, ApplyBuffEvent, CastEvent, EventType, RefreshBuffEvent, RemoveBuffEvent } from 'parser/core/Events';\r\nimport SpellUsable from 'parser/shared/modules/SpellUsable';\r\nimport Abilities from 'parser/core/modules/Abilities';\r\nimport DeadEye from 'parser/hunter/marksmanship/modules/talents/DeadEye';\r\nimport { DEAD_EYE_AIMED_SHOT_RECHARGE_INCREASE, TRUESHOT_AIMED_SHOT_RECHARGE_INCREASE } from 'parser/hunter/marksmanship/constants';\r\n\r\n/**\r\n * A powerful aimed shot that deals [(248.4% of Attack power) * ((max(0, min(Level - 10, 10)) * 8 + 130) / 210)] Physical damage.\r\n *\r\n * Example log with timeline warnings:\r\n * https://www.warcraftlogs.com/reports/9Ljy6fh1TtCDHXVB#fight=2&type=damage-done&source=25&ability=-19434\r\n */\r\nconst debug = false;\r\n\r\nclass AimedShot extends Analyzer {\r\n\r\n  static dependencies = {\r\n    spellUsable: SpellUsable,\r\n    abilities: Abilities,\r\n    deadEye: DeadEye,\r\n  };\r\n\r\n  lastReductionTimestamp: number = 0;\r\n  effectiveCDRFromTrueshotDeadEye: number = 0;\r\n  wastedCDRFromTrueshotDeadEye: number = 0;\r\n  casts: number = 0;\r\n  totalCooldown: number = 0;\r\n  averageCooldown: number = 0;\r\n\r\n  protected spellUsable!: SpellUsable;\r\n  protected abilities!: Abilities;\r\n  protected deadEye!: DeadEye;\r\n\r\n  constructor(options: Options) {\r\n    super(options);\r\n\r\n    this.addEventListener(Events.any, this.onEvent);\r\n    this.addEventListener(Events.cast.by(SELECTED_PLAYER).spell(SPELLS.AIMED_SHOT), this.onCast);\r\n    this.addEventListener(Events.applybuff.by(SELECTED_PLAYER).spell([SPELLS.TRUESHOT, SPELLS.DEAD_EYE_BUFF]), this.onAffectingBuffChange);\r\n    this.addEventListener(Events.refreshbuff.by(SELECTED_PLAYER).spell([SPELLS.TRUESHOT, SPELLS.DEAD_EYE_BUFF]), this.onAffectingBuffChange);\r\n    this.addEventListener(Events.removebuff.to(SELECTED_PLAYER).spell([SPELLS.TRUESHOT, SPELLS.DEAD_EYE_BUFF]), this.onAffectingBuffChange);\r\n  }\r\n\r\n  onEvent(event: AnyEvent) {\r\n    if (!this.selectedCombatant.hasBuff(SPELLS.DEAD_EYE_BUFF.id) && !this.selectedCombatant.hasBuff(SPELLS.TRUESHOT.id)) {\r\n      return;\r\n    }\r\n    if (!this.spellUsable.isOnCooldown(SPELLS.AIMED_SHOT.id)) {\r\n      return;\r\n    }\r\n    if (this.lastReductionTimestamp === 0 || event.timestamp <= this.lastReductionTimestamp) {\r\n      return;\r\n    }\r\n    /**\r\n     * modRate is what the value is called in-game that defines how fast a cooldown recharges, so reusing that terminology here\r\n     * Dead Eye and Trueshot scale multiplicatively off each other, which can lead to extremely fast cooldown reduction that this should properly handle.\r\n     */\r\n    let modRate = 1;\r\n    if (this.selectedCombatant.hasBuff(SPELLS.TRUESHOT.id)) {\r\n      modRate /= (1 + TRUESHOT_AIMED_SHOT_RECHARGE_INCREASE);\r\n    }\r\n    if (this.selectedCombatant.hasBuff(SPELLS.DEAD_EYE_BUFF.id)) {\r\n      modRate /= (1 + DEAD_EYE_AIMED_SHOT_RECHARGE_INCREASE);\r\n    }\r\n    const spellReductionSpeed = 1 / modRate;\r\n    debug && console.log('modRate: ', modRate, ' & spellReductionSpeed: ', spellReductionSpeed);\r\n    this.reduceAimedShotCooldown(event, spellReductionSpeed);\r\n    this.lastReductionTimestamp = event.timestamp;\r\n  }\r\n\r\n  reduceAimedShotCooldown(event: any, spellReductionSpeed: number) {\r\n    const maxReductionMs: number = (event.timestamp - this.lastReductionTimestamp) * spellReductionSpeed;\r\n    debug && console.log('Reducing Aimed Shot cooldown by up to: ', maxReductionMs + ' seconds since last event');\r\n    const effectiveReductionMs: number = this.spellUsable.reduceCooldown(SPELLS.AIMED_SHOT.id, maxReductionMs, event.timestamp);\r\n    this.effectiveCDRFromTrueshotDeadEye += effectiveReductionMs;\r\n    this.wastedCDRFromTrueshotDeadEye += effectiveReductionMs - maxReductionMs;\r\n    if (this.selectedCombatant.hasBuff(SPELLS.DEAD_EYE_BUFF.id)) {\r\n      this.attributeDeadEyeAimedShotCDR(effectiveReductionMs, maxReductionMs);\r\n    }\r\n  }\r\n\r\n  attributeDeadEyeAimedShotCDR(effectiveReductionMs: number, maxReductionMs: number) {\r\n    if (this.selectedCombatant.hasBuff(SPELLS.TRUESHOT.id)) {\r\n      effectiveReductionMs = effectiveReductionMs / (1 + TRUESHOT_AIMED_SHOT_RECHARGE_INCREASE);\r\n      maxReductionMs = maxReductionMs / (1 + TRUESHOT_AIMED_SHOT_RECHARGE_INCREASE);\r\n    }\r\n    this.deadEye.deadEyeEffectiveCDR += effectiveReductionMs;\r\n    this.deadEye.deadEyePotentialCDR += maxReductionMs;\r\n  }\r\n\r\n  onAffectingBuffChange(event: ApplyBuffEvent | RefreshBuffEvent | RemoveBuffEvent) {\r\n    if (event.type === EventType.RemoveBuff) {\r\n      this.onEvent(event);\r\n    }\r\n    this.lastReductionTimestamp = event.timestamp;\r\n  }\r\n\r\n  onCast(event: CastEvent) {\r\n    const expectedCooldownDuration = this.abilities.getExpectedCooldownDuration(SPELLS.AIMED_SHOT.id, event);\r\n    if (expectedCooldownDuration) {\r\n      this.totalCooldown += expectedCooldownDuration;\r\n      this.casts += 1;\r\n      this.deadEye.averageAimedShotCD = this.totalCooldown / this.casts;\r\n    }\r\n\r\n    if (event.meta === undefined) {\r\n      event.meta = {\r\n        isEnhancedCast: false,\r\n        isInefficientCast: false,\r\n      };\r\n    }\r\n    const hasPreciseShotsBuff = this.selectedCombatant.hasBuff(SPELLS.PRECISE_SHOTS.id);\r\n    const hasTrueshotBuff = this.selectedCombatant.hasBuff(SPELLS.TRUESHOT.id);\r\n\r\n    if (hasPreciseShotsBuff && !hasTrueshotBuff) {\r\n      event.meta.isInefficientCast = true;\r\n      event.meta.inefficientCastReason = 'Aimed Shot while having Precise Shots stacks left.';\r\n    }\r\n  }\r\n}\r\n\r\nexport default AimedShot;\r\n","import React from 'react';\r\n\r\nimport Analyzer, { Options, SELECTED_PLAYER } from 'parser/core/Analyzer';\r\n\r\nimport SPELLS from 'common/SPELLS';\r\nimport ItemDamageDone from 'interface/ItemDamageDone';\r\nimport Statistic from 'interface/statistics/Statistic';\r\nimport STATISTIC_CATEGORY from 'interface/others/STATISTIC_CATEGORY';\r\nimport STATISTIC_ORDER from 'interface/others/STATISTIC_ORDER';\r\nimport BoringSpellValueText from 'interface/statistics/components/BoringSpellValueText';\r\nimport Events, { DamageEvent } from 'parser/core/Events';\r\n\r\n/**\r\n * Rain a volley of arrows down over 6 sec, dealing up to [(35% of Attack power) * 12] Physical damage to any enemy in the area, and gain the effects of Trick Shots for as long as Volley is active.\r\n *\r\n * Example log:\r\n * https://www.warcraftlogs.com/reports/qxZ674PKakR1rjTA#fight=21&type=damage-done&source=119&ability=260247\r\n */\r\n\r\nclass Volley extends Analyzer {\r\n\r\n  damage = 0;\r\n\r\n  constructor(options: Options) {\r\n    super(options);\r\n    this.active = this.selectedCombatant.hasTalent(SPELLS.VOLLEY_TALENT.id);\r\n    this.addEventListener(Events.damage.by(SELECTED_PLAYER).spell(SPELLS.VOLLEY_DAMAGE), this.onVolleyDamage);\r\n  }\r\n\r\n  onVolleyDamage(event: DamageEvent) {\r\n    this.damage += event.amount + (event.absorbed || 0);\r\n  }\r\n\r\n  statistic() {\r\n    return (\r\n      <Statistic\r\n        position={STATISTIC_ORDER.OPTIONAL(13)}\r\n        size=\"flexible\"\r\n        category={STATISTIC_CATEGORY.TALENTS}\r\n      >\r\n        <BoringSpellValueText spell={SPELLS.VOLLEY_TALENT}>\r\n          <>\r\n            <ItemDamageDone amount={this.damage} />\r\n          </>\r\n        </BoringSpellValueText>\r\n      </Statistic>\r\n    );\r\n  }\r\n}\r\n\r\nexport default Volley;\r\n","import React from 'react';\r\n\r\nimport Analyzer, { Options, SELECTED_PLAYER } from 'parser/core/Analyzer';\r\n\r\nimport SPELLS from 'common/SPELLS';\r\nimport ItemDamageDone from 'interface/ItemDamageDone';\r\nimport AverageTargetsHit from 'interface/others/AverageTargetsHit';\r\nimport Statistic from 'interface/statistics/Statistic';\r\nimport STATISTIC_CATEGORY from 'interface/others/STATISTIC_CATEGORY';\r\nimport STATISTIC_ORDER from 'interface/others/STATISTIC_ORDER';\r\nimport BoringSpellValueText from 'interface/statistics/components/BoringSpellValueText';\r\nimport Events, { DamageEvent } from 'parser/core/Events';\r\n\r\n/**\r\n * Fires a slow-moving munition directly forward.\r\n * Activating this ability a second time detonates the Shot, dealing up to (1000% of Attack power) Fire damage to all enemies within 8 yds, damage based on proximity.\r\n *\r\n * Example log:\r\n * https://www.warcraftlogs.com/reports/Rn9XxCYLm1q7KFNW#fight=3&type=damage-done&source=15&ability=212680\r\n */\r\n\r\nclass ExplosiveShot extends Analyzer {\r\n\r\n  hits = 0;\r\n  damage = 0;\r\n  casts = 0;\r\n\r\n  constructor(options: Options) {\r\n    super(options);\r\n    this.active = this.selectedCombatant.hasTalent(SPELLS.EXPLOSIVE_SHOT_TALENT.id);\r\n    this.addEventListener(Events.cast.by(SELECTED_PLAYER).spell(SPELLS.EXPLOSIVE_SHOT_TALENT), this.onCast);\r\n    this.addEventListener(Events.damage.by(SELECTED_PLAYER).spell(SPELLS.EXPLOSIVE_SHOT_DAMAGE), this.onDamage);\r\n  }\r\n\r\n  onCast() {\r\n    this.casts += 1;\r\n  }\r\n\r\n  onDamage(event: DamageEvent) {\r\n    this.hits += 1;\r\n    this.damage += event.amount + (event.absorbed || 0);\r\n  }\r\n\r\n  statistic() {\r\n    return (\r\n      <Statistic\r\n        position={STATISTIC_ORDER.OPTIONAL(13)}\r\n        size=\"flexible\"\r\n        category={STATISTIC_CATEGORY.TALENTS}\r\n      >\r\n        <BoringSpellValueText spell={SPELLS.EXPLOSIVE_SHOT_TALENT}>\r\n          <>\r\n            <ItemDamageDone amount={this.damage} /><br />\r\n            <AverageTargetsHit casts={this.casts} hits={this.hits} unique />\r\n          </>\r\n        </BoringSpellValueText>\r\n      </Statistic>\r\n    );\r\n  }\r\n}\r\n\r\nexport default ExplosiveShot;\r\n","import React from 'react';\r\n\r\nimport Analyzer, { Options, SELECTED_PLAYER } from 'parser/core/Analyzer';\r\n\r\nimport SPELLS from 'common/SPELLS';\r\nimport { formatNumber, formatPercentage } from 'common/format';\r\nimport Abilities from 'parser/core/modules/Abilities';\r\nimport SpellUsable from 'parser/shared/modules/SpellUsable';\r\nimport Statistic from 'interface/statistics/Statistic';\r\nimport STATISTIC_CATEGORY from 'interface/others/STATISTIC_CATEGORY';\r\nimport STATISTIC_ORDER from 'interface/others/STATISTIC_ORDER';\r\nimport BoringSpellValueText from 'interface/statistics/components/BoringSpellValueText';\r\nimport Events, { ApplyBuffEvent } from 'parser/core/Events';\r\nimport { binomialCDF, expectedProcCount, plotOneVariableBinomChart } from 'parser/shared/modules/helpers/Probability';\r\nimport SpellLink from 'common/SpellLink';\r\nimport { LNL_PROC_CHANCE } from 'parser/hunter/marksmanship/constants';\r\n\r\n/**\r\n * Your ranged auto attacks have a 8% chance to trigger Lock and Load, causing your next Aimed Shot to cost no Focus and be instant.\r\n *\r\n * Example log:\r\n * https://www.warcraftlogs.com/reports/wPdQLfFnhTVYRyJm#fight=12&type=auras&source=640&ability=194594\r\n */\r\n\r\nclass LockAndLoad extends Analyzer {\r\n  static dependencies = {\r\n    spellUsable: SpellUsable,\r\n    abilities: Abilities,\r\n  };\r\n  hasLnLBuff = false;\r\n  noGainLNLProcs = 0;\r\n  totalProcs = 0;\r\n  autoShots = 0;\r\n\r\n  protected spellUsable!: SpellUsable;\r\n  protected abilities!: Abilities;\r\n\r\n  constructor(options: Options) {\r\n    super(options);\r\n    this.active = this.selectedCombatant.hasTalent(SPELLS.LOCK_AND_LOAD_TALENT.id);\r\n    this.addEventListener(Events.damage.by(SELECTED_PLAYER).spell(SPELLS.AUTO_SHOT), this.autoshotDamage);\r\n    this.addEventListener(Events.cast.by(SELECTED_PLAYER).spell(SPELLS.AIMED_SHOT), this.onAimedCast);\r\n    this.addEventListener(Events.applybuff.by(SELECTED_PLAYER).spell(SPELLS.LOCK_AND_LOAD_BUFF), this.onLNLApplication);\r\n    this.addEventListener(Events.refreshbuff.by(SELECTED_PLAYER).spell(SPELLS.LOCK_AND_LOAD_BUFF), this.onLNLRefresh);\r\n  }\r\n\r\n  get expectedProcs() {\r\n    return expectedProcCount(LNL_PROC_CHANCE, this.autoShots);\r\n  }\r\n\r\n  autoshotDamage() {\r\n    this.autoShots += 1;\r\n  }\r\n\r\n  onAimedCast() {\r\n    if (!this.selectedCombatant.hasBuff(SPELLS.LOCK_AND_LOAD_BUFF.id)) {\r\n      return;\r\n    }\r\n    this.hasLnLBuff = false;\r\n  }\r\n\r\n  onLNLApplication(event: ApplyBuffEvent) {\r\n    this.totalProcs += 1;\r\n    this.hasLnLBuff = true;\r\n    if (this.spellUsable.isOnCooldown(SPELLS.AIMED_SHOT.id)) {\r\n      const expectedCooldownDuration = this.abilities.getExpectedCooldownDuration(SPELLS.AIMED_SHOT.id, this.spellUsable.cooldownTriggerEvent(SPELLS.AIMED_SHOT.id));\r\n      if (expectedCooldownDuration) {\r\n        const newChargeCDR = expectedCooldownDuration - this.spellUsable.cooldownRemaining(SPELLS.AIMED_SHOT.id);\r\n        this.spellUsable.endCooldown(SPELLS.AIMED_SHOT.id, false, event.timestamp, newChargeCDR);\r\n      }\r\n    }\r\n  }\r\n\r\n  onLNLRefresh() {\r\n    if (this.hasLnLBuff) {\r\n      this.noGainLNLProcs += 1;\r\n    }\r\n    this.totalProcs += 1;\r\n  }\r\n\r\n  statistic() {\r\n    return (\r\n      <Statistic\r\n        position={STATISTIC_ORDER.OPTIONAL(10)}\r\n        size=\"flexible\"\r\n        category={STATISTIC_CATEGORY.TALENTS}\r\n        tooltip={(\r\n          <>\r\n            You had {this.noGainLNLProcs} {this.noGainLNLProcs === 1 ? `proc` : `procs`} with LnL already active. <br />\r\n            You had {formatPercentage(this.totalProcs / this.expectedProcs, 1)}% procs of what you could expect to get over the encounter. <br />\r\n            You had a total of {this.totalProcs} procs, and your expected amount of procs was {formatNumber(this.expectedProcs)}. <br />\r\n            <ul>\r\n              <li>You have a ≈{formatPercentage(binomialCDF(this.totalProcs, this.autoShots, LNL_PROC_CHANCE))}% chance of getting this amount of procs or fewer in the future with this amount of auto attacks.</li>\r\n            </ul>\r\n          </>\r\n        )}\r\n        dropdown={(\r\n          <>\r\n            <div style={{ padding: '8px' }}>\r\n              {plotOneVariableBinomChart(this.totalProcs, this.autoShots, LNL_PROC_CHANCE)}\r\n              <p>Likelihood of getting <em>exactly</em> as many procs as estimated on a fight given your number of <SpellLink id={SPELLS.AUTO_SHOT.id} /> hits.</p>\r\n            </div>\r\n          </>\r\n        )}\r\n      >\r\n        <BoringSpellValueText spell={SPELLS.LOCK_AND_LOAD_TALENT}>\r\n          <>\r\n            {this.totalProcs} <small>procs</small>\r\n            <br />\r\n            {this.noGainLNLProcs} <small>wasted procs</small>\r\n          </>\r\n        </BoringSpellValueText>\r\n      </Statistic>\r\n    );\r\n  }\r\n}\r\n\r\nexport default LockAndLoad;\r\n","import React from 'react';\r\n\r\nimport Analyzer, { Options, SELECTED_PLAYER } from 'parser/core/Analyzer';\r\n\r\nimport SPELLS from 'common/SPELLS';\r\nimport Statistic from 'interface/statistics/Statistic';\r\nimport STATISTIC_CATEGORY from 'interface/others/STATISTIC_CATEGORY';\r\nimport STATISTIC_ORDER from 'interface/others/STATISTIC_ORDER';\r\nimport BoringSpellValueText from 'interface/statistics/components/BoringSpellValueText';\r\nimport Events, { DamageEvent } from 'parser/core/Events';\r\nimport ItemDamageDone from 'interface/ItemDamageDone';\r\n\r\n/**\r\n * Your ranged special attack critical strikes cause the target to bleed for an additional 15% of the damage dealt over 6 sec.\r\n *\r\n * Example log:\r\n *\r\n */\r\n\r\nclass MasterMarksman extends Analyzer {\r\n\r\n  damage: number = 0;\r\n\r\n  constructor(options: Options) {\r\n    super(options);\r\n    this.active = this.selectedCombatant.hasTalent(SPELLS.MASTER_MARKSMAN_TALENT.id);\r\n    this.addEventListener(Events.damage.by(SELECTED_PLAYER).spell(SPELLS.MASTER_MARKSMAN_DEBUFF), this.onDebuffDamage);\r\n  }\r\n\r\n  onDebuffDamage(event: DamageEvent) {\r\n    this.damage += event.amount + (event.absorbed || 0);\r\n  }\r\n\r\n  statistic() {\r\n    return (\r\n      <Statistic\r\n        position={STATISTIC_ORDER.OPTIONAL(10)}\r\n        size=\"flexible\"\r\n        category={STATISTIC_CATEGORY.TALENTS}\r\n      >\r\n        <BoringSpellValueText spell={SPELLS.MASTER_MARKSMAN_TALENT}>\r\n          <>\r\n            <ItemDamageDone amount={this.damage} />\r\n          </>\r\n        </BoringSpellValueText>\r\n      </Statistic>\r\n    );\r\n  }\r\n}\r\n\r\nexport default MasterMarksman;\r\n","import React from 'react';\r\n\r\nimport Analyzer, { Options, SELECTED_PLAYER } from 'parser/core/Analyzer';\r\n\r\nimport SPELLS from 'common/SPELLS';\r\nimport SpellIcon from 'common/SpellIcon';\r\nimport Statistic from 'interface/statistics/Statistic';\r\nimport STATISTIC_CATEGORY from 'interface/others/STATISTIC_CATEGORY';\r\nimport STATISTIC_ORDER from 'interface/others/STATISTIC_ORDER';\r\nimport BoringSpellValueText from 'interface/statistics/components/BoringSpellValueText';\r\nimport Events from 'parser/core/Events';\r\n\r\n/**\r\n * Your next Aimed Shot will fire a second time instantly at 100% power without consuming Focus, or your next Rapid Fire will shoot 100% additional shots during its channel.\r\n *\r\n * Example log:\r\n * https://www.warcraftlogs.com/reports/ZMGCRkA29PcrmJhx#fight=5&type=auras&ability=260402&source=4\r\n */\r\n\r\nclass DoubleTap extends Analyzer {\r\n\r\n  activations = 0;\r\n  aimedUsage = 0;\r\n  RFUsage = 0;\r\n\r\n  constructor(options: Options) {\r\n    super(options);\r\n    this.active = this.selectedCombatant.hasTalent(SPELLS.DOUBLE_TAP_TALENT.id);\r\n    this.addEventListener(Events.applybuff.by(SELECTED_PLAYER).spell(SPELLS.DOUBLE_TAP_TALENT), this.onDoubleTapApplication);\r\n    this.addEventListener(Events.cast.by(SELECTED_PLAYER).spell(SPELLS.AIMED_SHOT), this.onAimedCast);\r\n    this.addEventListener(Events.cast.by(SELECTED_PLAYER).spell(SPELLS.RAPID_FIRE), this.onRapidFireCast);\r\n  }\r\n\r\n  get totalUsage() {\r\n    return this.RFUsage + this.aimedUsage;\r\n  }\r\n\r\n  onDoubleTapApplication() {\r\n    this.activations += 1;\r\n  }\r\n\r\n  onAimedCast() {\r\n    if (!this.selectedCombatant.hasBuff(SPELLS.DOUBLE_TAP_TALENT.id)) {\r\n      return;\r\n    }\r\n    this.aimedUsage += 1;\r\n  }\r\n\r\n  onRapidFireCast() {\r\n    if (!this.selectedCombatant.hasBuff(SPELLS.DOUBLE_TAP_TALENT.id)) {\r\n      return;\r\n    }\r\n    this.RFUsage += 1;\r\n  }\r\n\r\n  statistic() {\r\n    return (\r\n      <Statistic\r\n        position={STATISTIC_ORDER.OPTIONAL(13)}\r\n        size=\"flexible\"\r\n        category={STATISTIC_CATEGORY.TALENTS}\r\n        tooltip={(\r\n          <>\r\n            You used Double Tap a total of {this.activations} times, and utilised {this.totalUsage} of them.\r\n            <ul>\r\n              {this.aimedUsage > 0 && <li>Out of the total activations, you used {this.aimedUsage} of them on Aimed Shots.</li>}\r\n              {this.RFUsage > 0 && <li>Out of the total activations, you used {this.RFUsage} of them on Rapid Fires.</li>}\r\n            </ul>\r\n          </>\r\n        )}\r\n      >\r\n        <BoringSpellValueText spell={SPELLS.DOUBLE_TAP_TALENT}>\r\n          <>\r\n            {this.aimedUsage}{'  '}\r\n            <SpellIcon\r\n              id={SPELLS.AIMED_SHOT.id}\r\n              style={{\r\n                height: '1.3em',\r\n                marginTop: '-.1em',\r\n              }}\r\n            />\r\n            {'  '}{this.RFUsage}{'  '}\r\n            <SpellIcon\r\n              id={SPELLS.RAPID_FIRE.id}\r\n              style={{\r\n                height: '1.3em',\r\n                marginTop: '-.1em',\r\n              }}\r\n            />\r\n          </>\r\n        </BoringSpellValueText>\r\n      </Statistic>\r\n    );\r\n  }\r\n}\r\n\r\nexport default DoubleTap;\r\n","import React from 'react';\r\nimport { Options, SELECTED_PLAYER } from 'parser/core/Analyzer';\r\nimport SPELLS from 'common/SPELLS';\r\nimport calculateEffectiveDamage from 'parser/core/calculateEffectiveDamage';\r\nimport { formatDuration, formatNumber } from 'common/format';\r\nimport StatTracker from 'parser/shared/modules/StatTracker';\r\nimport Enemies from 'parser/shared/modules/Enemies';\r\nimport Statistic from 'interface/statistics/Statistic';\r\nimport STATISTIC_CATEGORY from 'interface/others/STATISTIC_CATEGORY';\r\nimport STATISTIC_ORDER from 'interface/others/STATISTIC_ORDER';\r\nimport BoringSpellValueText from 'interface/statistics/components/BoringSpellValueText';\r\nimport Events, { DamageEvent } from 'parser/core/Events';\r\nimport { CA_MODIFIER, CAREFUL_AIM_THRESHOLD } from 'parser/hunter/marksmanship/constants';\r\nimport ExecuteHelper from 'parser/shared/ExecuteHelper';\r\nimport ItemDamageDone from 'interface/ItemDamageDone';\r\nimport { abbreviateBossNames } from 'common/abbreviateLongNames';\r\n\r\n/**\r\n * Aimed Shot deals 50% bonus damage to targets who are above 70% health.\r\n *\r\n * Example log:\r\n * https://www.warcraftlogs.com/reports/9Ljy6fh1TtCDHXVB#fight=2&type=damage-done&source=25&ability=-19434\r\n *\r\n * TODO: Optimize this for Execute Helper\r\n */\r\nclass CarefulAim extends ExecuteHelper {\r\n  static dependencies = {\r\n    ...ExecuteHelper.dependencies,\r\n    statTracker: StatTracker,\r\n    enemies: Enemies,\r\n  };\r\n\r\n  static executeSpells = [SPELLS.AIMED_SHOT];\r\n  static executeSources = SELECTED_PLAYER;\r\n  static upperThreshold = CAREFUL_AIM_THRESHOLD;\r\n  static modifiesDamage = true;\r\n  static damageModifier = CA_MODIFIER;\r\n\r\n  caProcs = 0;\r\n  bossIDs: number[] = [];\r\n  carefulAimPeriods: { [key: string]: { aimedShotsInCA: number; timestampSub100: number; caDamage: number; timestampSub70: number; } } = {\r\n    /*\r\n    [bossName]: {\r\n          caDamage: 0,\r\n          aimedShotsInCA: count,\r\n          timestampSub100: timestamp,\r\n          timestampSub70: timestamp,\r\n          },\r\n        };\r\n     */\r\n    'Adds': {\r\n      caDamage: 0,\r\n      aimedShotsInCA: 0,\r\n      timestampSub100: 0,\r\n      timestampSub70: 0,\r\n    },\r\n  };\r\n  protected statTracker!: StatTracker;\r\n  protected enemies!: Enemies;\r\n\r\n  constructor(options: Options) {\r\n    super(options);\r\n    this.active = this.selectedCombatant.hasTalent(SPELLS.CAREFUL_AIM_TALENT.id);\r\n    this.owner.report.enemies.forEach((enemy: { fights: any[]; type: string; id: number; }) => {\r\n      enemy.fights.forEach(fight => {\r\n        if (fight.id === this.owner.fight.id && enemy.type === 'Boss') {\r\n          this.bossIDs.push(enemy.id);\r\n        }\r\n      });\r\n    });\r\n    this.addEventListener(Events.fightend, this.calculateCarefulAimPeriods);\r\n    this.addEventListener(Events.damage.by(SELECTED_PLAYER), this.onDamage);\r\n  }\r\n\r\n  onDamage(event: DamageEvent) {\r\n    const spellId = event.ability.guid;\r\n    const healthPercent = event.hitPoints && event.maxHitPoints && event.hitPoints / event.maxHitPoints;\r\n    const targetID = event.targetID;\r\n    let target: string;\r\n    const outsideCarefulAim = healthPercent && healthPercent < CAREFUL_AIM_THRESHOLD;\r\n    if (event.maxHitPoints && this.bossIDs.includes(targetID)) {\r\n      // I believe we can assume this is not null because otherwise it wouldn't be in this.bossIDs?\r\n      const enemy = this.enemies.getEntity(event)!;\r\n      target = abbreviateBossNames(enemy.name);\r\n      if (!this.carefulAimPeriods[target]) {\r\n        this.carefulAimPeriods[target] = {\r\n          caDamage: 0,\r\n          aimedShotsInCA: 0,\r\n          timestampSub100: 0,\r\n          timestampSub70: 0,\r\n        };\r\n      }\r\n      if (healthPercent && healthPercent > CAREFUL_AIM_THRESHOLD) {\r\n        this.carefulAimPeriods[target].timestampSub100 = this.carefulAimPeriods[target].timestampSub100 || event.timestamp;\r\n      }\r\n      if (healthPercent && outsideCarefulAim) {\r\n        this.carefulAimPeriods[target].timestampSub70 = this.carefulAimPeriods[target].timestampSub70 || event.timestamp;\r\n      }\r\n    } else {\r\n      target = 'Adds';\r\n    }\r\n    if (spellId !== SPELLS.AIMED_SHOT.id || outsideCarefulAim) {\r\n      return;\r\n    }\r\n    const damageFromCA = calculateEffectiveDamage(event, CA_MODIFIER);\r\n    this.carefulAimPeriods[target].caDamage += damageFromCA;\r\n    this.carefulAimPeriods[target].aimedShotsInCA += 1;\r\n    this.caProcs += 1;\r\n  }\r\n\r\n  calculateCarefulAimPeriods() {\r\n    Object.values(this.carefulAimPeriods).forEach(boss => {\r\n      boss.timestampSub100 = boss.timestampSub100 || this.owner.fight.start_time;\r\n      boss.timestampSub70 = boss.timestampSub70 || this.owner.fight.end_time;\r\n    });\r\n  }\r\n\r\n  statistic() {\r\n    return (\r\n      <Statistic\r\n        position={STATISTIC_ORDER.OPTIONAL(13)}\r\n        size=\"flexible\"\r\n        category={STATISTIC_CATEGORY.TALENTS}\r\n        dropdown={(\r\n          <>\r\n            <table className=\"table table-condensed\">\r\n              <thead>\r\n                <tr>\r\n                  <th>Boss</th>\r\n                  <th>Damage</th>\r\n                  <th>Hits</th>\r\n                  <th>Duration</th>\r\n                </tr>\r\n              </thead>\r\n              <tbody>\r\n                {Object.entries(this.carefulAimPeriods).map((boss, index) => (\r\n                  <tr key={index}>\r\n                    <td>{boss[0]}</td>\r\n                    <td>{formatNumber(boss[1].caDamage)}</td>\r\n                    <td>{boss[1].aimedShotsInCA}</td>\r\n                    <td>{boss[0] === 'Adds' ?\r\n                      'N/A' :\r\n                      formatDuration((boss[1].timestampSub70 - boss[1].timestampSub100) / 1000)}</td>\r\n                  </tr>\r\n                ))}\r\n              </tbody>\r\n            </table>\r\n          </>\r\n        )}\r\n      >\r\n        <BoringSpellValueText spell={SPELLS.CAREFUL_AIM_TALENT}>\r\n          <>\r\n            <ItemDamageDone amount={this.damage} />\r\n            <br />\r\n            {this.caProcs} <small>hits for</small> ≈ {formatNumber(this.damage / this.caProcs)} <small>each</small>\r\n          </>\r\n        </BoringSpellValueText>\r\n      </Statistic>\r\n    );\r\n  }\r\n}\r\n\r\nexport default CarefulAim;\r\n","export function abbreviateBossNames(originalBossName: string) {\r\n  if (!originalBossName) {\r\n    return 'No name provided';\r\n  }\r\n  const splitNames = originalBossName.trim().split(' ');\r\n  let abbreviatedBossName = '';\r\n  for (let i = 0; i < splitNames.length; i += 1) {\r\n    if (i < splitNames.length - 1) {\r\n      abbreviatedBossName += splitNames[i].charAt(0) + '. ';\r\n    } else {\r\n      abbreviatedBossName += splitNames[i];\r\n    }\r\n  }\r\n  return abbreviatedBossName;\r\n}\r\n","import React from 'react';\r\nimport Analyzer, { Options, SELECTED_PLAYER } from 'parser/core/Analyzer';\r\nimport SPELLS from 'common/SPELLS';\r\nimport ItemDamageDone from 'interface/ItemDamageDone';\r\nimport AverageTargetsHit from 'interface/others/AverageTargetsHit';\r\nimport Statistic from 'interface/statistics/Statistic';\r\nimport STATISTIC_CATEGORY from 'interface/others/STATISTIC_CATEGORY';\r\nimport STATISTIC_ORDER from 'interface/others/STATISTIC_ORDER';\r\nimport BoringSpellValueText from 'interface/statistics/components/BoringSpellValueText';\r\nimport Events, { DamageEvent } from 'parser/core/Events';\r\n\r\n/**\r\n * A two-headed shot that hits your primary target for (65% of Attack power)% Nature damage and another nearby target for  [(65% of Attack power)% * 0.5] Frost damage.\r\n * Replaces Arcane Shot.\r\n *\r\n * Example log:\r\n *\r\n */\r\n\r\nclass ChimaeraShot extends Analyzer {\r\n\r\n  damage = 0;\r\n  casts = 0;\r\n  hits = 0;\r\n\r\n  constructor(options: Options) {\r\n    super(options);\r\n    this.active = this.selectedCombatant.hasTalent(SPELLS.CHIMAERA_SHOT_MM_TALENT.id);\r\n    this.addEventListener(Events.cast.by(SELECTED_PLAYER).spell(SPELLS.CHIMAERA_SHOT_MM_TALENT), () => {\r\n      this.casts += 1;\r\n    });\r\n    this.addEventListener(Events.damage.by(SELECTED_PLAYER).spell([SPELLS.CHIMAERA_SHOT_MM_FROST_DAMAGE, SPELLS.CHIMAERA_SHOT_MM_NATURE_DAMAGE]), this.onChimaeraDamage);\r\n  }\r\n\r\n  onChimaeraDamage(event: DamageEvent) {\r\n    this.hits += 1;\r\n    this.damage += event.amount + (event.absorbed || 0);\r\n  }\r\n\r\n  statistic() {\r\n    return (\r\n      <Statistic\r\n        position={STATISTIC_ORDER.OPTIONAL(13)}\r\n        size=\"flexible\"\r\n        category={STATISTIC_CATEGORY.TALENTS}\r\n      >\r\n        <BoringSpellValueText spell={SPELLS.CHIMAERA_SHOT_MM_TALENT}>\r\n          <>\r\n            <ItemDamageDone amount={this.damage} /> <br />\r\n            <AverageTargetsHit casts={this.casts} hits={this.hits} />\r\n          </>\r\n        </BoringSpellValueText>\r\n      </Statistic>\r\n    );\r\n  }\r\n}\r\n\r\nexport default ChimaeraShot;\r\n","import React from 'react';\r\n\r\nimport Analyzer, { Options, SELECTED_PLAYER } from 'parser/core/Analyzer';\r\nimport SPELLS from 'common/SPELLS';\r\nimport Statistic from 'interface/statistics/Statistic';\r\nimport STATISTIC_ORDER from 'interface/others/STATISTIC_ORDER';\r\nimport STATISTIC_CATEGORY from 'interface/others/STATISTIC_CATEGORY';\r\nimport BoringSpellValueText from 'interface/statistics/components/BoringSpellValueText';\r\nimport Events, { DamageEvent } from 'parser/core/Events';\r\nimport calculateEffectiveDamage from 'parser/core/calculateEffectiveDamage';\r\nimport { AIMED_SHOT_BASELINE_CAST_TIME, STREAMLINE_AIMED_SHOT_CAST_SPEED_UP, STREAMLINE_RAPID_FIRE_DAMAGE_INCREASE, TRUESHOT_AIMED_SHOT_CAST_TIME_SPEED_UP } from 'parser/hunter/marksmanship/constants';\r\nimport ItemDamageDone from 'interface/ItemDamageDone';\r\nimport Haste from 'parser/shared/modules/Haste';\r\nimport { formatNumber } from 'common/format';\r\n\r\n/**\r\n * Rapid Fire's damage is increased by 15%.\r\n * Rapid Fire also causes your next Aimed Shot to cast 30% faster.\r\n *\r\n * Example log:\r\n *\r\n */\r\nclass Streamline extends Analyzer {\r\n  static dependencies = {\r\n    haste: Haste,\r\n  };\r\n\r\n  damage: number = 0;\r\n  aimedShotCastTimeSaved: number = 0;\r\n\r\n  protected haste!: Haste;\r\n\r\n  constructor(options: Options) {\r\n    super(options);\r\n    this.active = this.selectedCombatant.hasTalent(SPELLS.STREAMLINE_TALENT.id);\r\n    this.addEventListener(Events.damage.by(SELECTED_PLAYER).spell(SPELLS.RAPID_FIRE_DAMAGE), this.onRapidFireDamage);\r\n    this.addEventListener(Events.cast.by(SELECTED_PLAYER).spell(SPELLS.AIMED_SHOT), this.onAimedShotCast);\r\n  }\r\n\r\n  onRapidFireDamage(event: DamageEvent) {\r\n    this.damage += calculateEffectiveDamage(event, STREAMLINE_RAPID_FIRE_DAMAGE_INCREASE);\r\n  }\r\n\r\n  onAimedShotCast() {\r\n    if (!this.selectedCombatant.hasBuff(SPELLS.STREAMLINE_BUFF.id)) {\r\n      return;\r\n    }\r\n    /** Lock and Load suppresses streamline consumption so it's not possible to waste the decreased casting time from Streamline */\r\n    if (this.selectedCombatant.hasBuff(SPELLS.LOCK_AND_LOAD_BUFF.id)) {\r\n      return;\r\n    }\r\n    const hastepercent = this.haste.current;\r\n    const trueshotIncrease = this.selectedCombatant.hasBuff(SPELLS.TRUESHOT.id) ? (1 + TRUESHOT_AIMED_SHOT_CAST_TIME_SPEED_UP) : 1;\r\n    const aimedShotCastTime = AIMED_SHOT_BASELINE_CAST_TIME / (1 + hastepercent) / trueshotIncrease;\r\n    this.aimedShotCastTimeSaved += aimedShotCastTime - (aimedShotCastTime / (1 + STREAMLINE_AIMED_SHOT_CAST_SPEED_UP));\r\n  }\r\n\r\n  statistic() {\r\n    return (\r\n      <Statistic\r\n        position={STATISTIC_ORDER.OPTIONAL()}\r\n        size=\"flexible\"\r\n        category={STATISTIC_CATEGORY.TALENTS}\r\n        tooltip={(\r\n          <>\r\n            You saved {formatNumber(this.aimedShotCastTimeSaved / 1000)} seconds of Aimed Shot cast time through Streamline\r\n          </>\r\n        )}\r\n      >\r\n        <BoringSpellValueText spell={SPELLS.STREAMLINE_TALENT}>\r\n          <>\r\n            <ItemDamageDone amount={this.damage} />\r\n          </>\r\n        </BoringSpellValueText>\r\n      </Statistic>\r\n    );\r\n  }\r\n\r\n}\r\n\r\nexport default Streamline;\r\n","import Analyzer, { Options, SELECTED_PLAYER } from 'parser/core/Analyzer';\r\nimport Events, { ApplyBuffEvent, CastEvent, DamageEvent, RefreshBuffEvent } from 'parser/core/Events';\r\nimport Statistic from 'interface/statistics/Statistic';\r\nimport STATISTIC_ORDER from 'interface/others/STATISTIC_ORDER';\r\nimport STATISTIC_CATEGORY from 'interface/others/STATISTIC_CATEGORY';\r\nimport React from 'react';\r\nimport SPELLS from 'common/SPELLS';\r\nimport ItemDamageDone from 'interface/ItemDamageDone';\r\nimport calculateEffectiveDamage from 'parser/core/calculateEffectiveDamage';\r\nimport { BRUTAL_PROJECTILES_RAMP_DAMAGE } from 'parser/hunter/marksmanship/constants';\r\nimport ConduitSpellText from 'interface/statistics/components/ConduitSpellText';\r\n\r\n/**\r\n * Your auto attacks have a 10% chance to cause your next Rapid Fire to deal 1.0% increased damage for each shot.\r\n *\r\n * Example log\r\n *\r\n * TODO: If the buff goes live with 15 seconds despite Rapid Fire being 20 seconds cooldown, make some check for unlucky procs(?)\r\n * TODO: Verify these two buffs work like indicated in the spell data\r\n * TODO: Maybe even add a Binom chart to this, even it ends up being impactful?\r\n *\r\n */\r\nclass BrutalProjectiles extends Analyzer {\r\n\r\n  conduitRank = 0;\r\n  addedDamage = 0;\r\n  currentTick = 0;\r\n  procs = 0;\r\n  overwrittenProcs = 0;\r\n  usedProcs = 0;\r\n\r\n  constructor(options: Options) {\r\n    super(options);\r\n    this.conduitRank = this.selectedCombatant.conduitRankBySpellID(SPELLS.BRUTAL_PROJECTILES_CONDUIT.id);\r\n    if (!this.conduitRank) {\r\n      this.active = false;\r\n      return;\r\n    }\r\n\r\n    this.addEventListener(Events.damage.by(SELECTED_PLAYER).spell(SPELLS.RAPID_FIRE_DAMAGE), this.onRapidFireDamage);\r\n    this.addEventListener(Events.cast.by(SELECTED_PLAYER).spell(SPELLS.RAPID_FIRE), this.onRapidFireCast);\r\n    this.addEventListener(Events.applybuff.by(SELECTED_PLAYER).spell(SPELLS.BRUTAL_PROJECTILES_NEXT_RF_BUFF), this.onApplyBrutalProjectiles);\r\n    this.addEventListener(Events.refreshbuff.by(SELECTED_PLAYER).spell(SPELLS.BRUTAL_PROJECTILES_NEXT_RF_BUFF), this.onRefreshBrutalProjectiles);\r\n  }\r\n\r\n  onApplyBrutalProjectiles(event: ApplyBuffEvent) {\r\n    this.procs += 1;\r\n\r\n  }\r\n\r\n  onRefreshBrutalProjectiles(event: RefreshBuffEvent) {\r\n    this.procs += 1;\r\n    this.overwrittenProcs += 1;\r\n  }\r\n\r\n  onRapidFireCast(event: CastEvent) {\r\n    this.currentTick = 0;\r\n    if (this.selectedCombatant.hasBuff(SPELLS.BRUTAL_PROJECTILES_NEXT_RF_BUFF.id)) {\r\n      this.usedProcs += 1;\r\n    }\r\n  }\r\n\r\n  onRapidFireDamage(event: DamageEvent) {\r\n    if (!this.selectedCombatant.hasBuff(SPELLS.BRUTAL_PROJECTILES_DURING_RF_BUFF.id)) {\r\n      return;\r\n    }\r\n    this.addedDamage += calculateEffectiveDamage(event, (BRUTAL_PROJECTILES_RAMP_DAMAGE[this.conduitRank] * this.currentTick));\r\n    this.currentTick += 1;\r\n  }\r\n\r\n  statistic() {\r\n    return (\r\n      <Statistic\r\n        position={STATISTIC_ORDER.OPTIONAL(13)}\r\n        size=\"flexible\"\r\n        category={STATISTIC_CATEGORY.COVENANTS}\r\n        tooltip={(\r\n          <>\r\n            You used {this.usedProcs} out of {this.procs} gained.\r\n            You overwrote the Brutal Projectiles buff {this.overwrittenProcs} times.\r\n          </>\r\n        )}\r\n      >\r\n        <ConduitSpellText spell={SPELLS.BRUTAL_PROJECTILES_CONDUIT} rank={this.conduitRank}>\r\n          <>\r\n            <ItemDamageDone amount={this.addedDamage} />\r\n          </>\r\n        </ConduitSpellText>\r\n      </Statistic>\r\n    );\r\n  }\r\n}\r\n\r\nexport default BrutalProjectiles;\r\n","import Analyzer, { Options, SELECTED_PLAYER } from 'parser/core/Analyzer';\r\nimport Statistic from 'interface/statistics/Statistic';\r\nimport STATISTIC_ORDER from 'interface/others/STATISTIC_ORDER';\r\nimport STATISTIC_CATEGORY from 'interface/others/STATISTIC_CATEGORY';\r\nimport ItemDamageDone from 'interface/ItemDamageDone';\r\nimport React from 'react';\r\nimport SPELLS from 'common/SPELLS';\r\nimport Events, { CastEvent, DamageEvent } from 'parser/core/Events';\r\nimport { ONE_SECOND_IN_MS } from 'parser/hunter/shared/constants';\r\nimport calculateEffectiveDamage from 'parser/core/calculateEffectiveDamage';\r\nimport { DEADLY_CHAIN_TRICKSHOTS_DAMAGE_INCREASE, TRICK_SHOTS_BASELINE_DAMAGE } from 'parser/hunter/marksmanship/constants';\r\nimport ConduitSpellText from 'interface/statistics/components/ConduitSpellText';\r\n\r\n/**\r\n * Trick Shots secondary damage is increased by 10.0%.\r\n *\r\n * Example log\r\n *\r\n */\r\nclass DeadlyChain extends Analyzer {\r\n\r\n  conduitRank: number = 0;\r\n  addedDamage: number = 0;\r\n  trickShotsCastTimestamp: number = 0;\r\n  firstHitConnected: boolean = false;\r\n\r\n  constructor(options: Options) {\r\n    super(options);\r\n    this.conduitRank = this.selectedCombatant.conduitRankBySpellID(SPELLS.DEADLY_CHAIN_CONDUIT.id);\r\n    if (!this.conduitRank) {\r\n      this.active = false;\r\n      return;\r\n    }\r\n\r\n    this.addEventListener(Events.cast.by(SELECTED_PLAYER).spell([SPELLS.AIMED_SHOT, SPELLS.RAPID_FIRE]), this.onTricksAffectedCast);\r\n    this.addEventListener(Events.damage.by(SELECTED_PLAYER).spell([SPELLS.AIMED_SHOT, SPELLS.RAPID_FIRE_DAMAGE]), this.onTricksAffectedDamage);\r\n  }\r\n\r\n  onTricksAffectedCast(event: CastEvent) {\r\n    if (!this.selectedCombatant.hasBuff(SPELLS.TRICK_SHOTS_BUFF.id)) {\r\n      return;\r\n    }\r\n    this.trickShotsCastTimestamp = event.timestamp;\r\n  }\r\n\r\n  onTricksAffectedDamage(event: DamageEvent) {\r\n    if (event.timestamp > this.trickShotsCastTimestamp + ONE_SECOND_IN_MS) {\r\n      return;\r\n    }\r\n    if (!this.firstHitConnected) {\r\n      this.firstHitConnected = true;\r\n      return;\r\n    }\r\n    this.addedDamage += calculateEffectiveDamage(event, (DEADLY_CHAIN_TRICKSHOTS_DAMAGE_INCREASE[this.conduitRank] / TRICK_SHOTS_BASELINE_DAMAGE));\r\n  }\r\n\r\n  statistic() {\r\n    return (\r\n      <Statistic\r\n        position={STATISTIC_ORDER.OPTIONAL(13)}\r\n        size=\"flexible\"\r\n        category={STATISTIC_CATEGORY.COVENANTS}\r\n      >\r\n        <ConduitSpellText spell={SPELLS.DEADLY_CHAIN_CONDUIT} rank={this.conduitRank}>\r\n          <>\r\n            <ItemDamageDone amount={this.addedDamage} />\r\n          </>\r\n        </ConduitSpellText>\r\n      </Statistic>\r\n    );\r\n  }\r\n}\r\n\r\nexport default DeadlyChain;\r\n","import Analyzer, { Options, SELECTED_PLAYER } from 'parser/core/Analyzer';\r\nimport Statistic from 'interface/statistics/Statistic';\r\nimport STATISTIC_ORDER from 'interface/others/STATISTIC_ORDER';\r\nimport STATISTIC_CATEGORY from 'interface/others/STATISTIC_CATEGORY';\r\nimport ItemDamageDone from 'interface/ItemDamageDone';\r\nimport React from 'react';\r\nimport SPELLS from 'common/SPELLS';\r\nimport Events, { DamageEvent } from 'parser/core/Events';\r\nimport PreciseShots from 'parser/hunter/marksmanship/modules/spells/PreciseShots';\r\nimport calculateEffectiveDamage from 'parser/core/calculateEffectiveDamage';\r\nimport { POWERFUL_PRECISION_DAMAGE_INCREASE, PRECISE_SHOTS_MODIFIER } from 'parser/hunter/marksmanship/constants';\r\nimport ConduitSpellText from 'interface/statistics/components/ConduitSpellText';\r\n\r\n/**\r\n * Precise Shots increases the damage of your next Arcane Shot, Chimaera Shot or Multi-Shot by an additional x%.\r\n *\r\n * Example log\r\n *\r\n */\r\nclass PowerfulPrecision extends Analyzer {\r\n  static dependencies = {\r\n    preciseShots: PreciseShots,\r\n  };\r\n\r\n  conduitRank: number = 0;\r\n  addedDamage: number = 0;\r\n\r\n  protected preciseShots!: PreciseShots;\r\n\r\n  constructor(options: Options) {\r\n    super(options);\r\n    this.conduitRank = this.selectedCombatant.conduitRankBySpellID(SPELLS.POWERFUL_PRECISION_CONDUIT.id);\r\n    if (!this.conduitRank) {\r\n      this.active = false;\r\n      return;\r\n    }\r\n\r\n    this.addEventListener(Events.damage.by(SELECTED_PLAYER).spell([SPELLS.ARCANE_SHOT, SPELLS.MULTISHOT_MM, SPELLS.CHIMAERA_SHOT_MM_FROST_DAMAGE, SPELLS.CHIMAERA_SHOT_MM_NATURE_DAMAGE]), this.onPotentialPreciseDamage);\r\n  }\r\n\r\n  onPotentialPreciseDamage(event: DamageEvent) {\r\n    if (!this.preciseShots.buffedShotInFlight) {\r\n      return;\r\n    }\r\n    this.addedDamage += calculateEffectiveDamage(event, (POWERFUL_PRECISION_DAMAGE_INCREASE[this.conduitRank] / PRECISE_SHOTS_MODIFIER));\r\n  }\r\n\r\n  statistic() {\r\n    return (\r\n      <Statistic\r\n        position={STATISTIC_ORDER.OPTIONAL(13)}\r\n        size=\"flexible\"\r\n        category={STATISTIC_CATEGORY.COVENANTS}\r\n      >\r\n        <ConduitSpellText spell={SPELLS.POWERFUL_PRECISION_CONDUIT} rank={this.conduitRank}>\r\n          <>\r\n            <ItemDamageDone amount={this.addedDamage} />\r\n          </>\r\n        </ConduitSpellText>\r\n      </Statistic>\r\n    );\r\n  }\r\n\r\n}\r\n\r\nexport default PowerfulPrecision;\r\n","import Analyzer, { Options, SELECTED_PLAYER } from 'parser/core/Analyzer';\r\nimport Statistic from 'interface/statistics/Statistic';\r\nimport STATISTIC_ORDER from 'interface/others/STATISTIC_ORDER';\r\nimport STATISTIC_CATEGORY from 'interface/others/STATISTIC_CATEGORY';\r\nimport React from 'react';\r\nimport Events, { ApplyBuffEvent, FightEndEvent, RefreshBuffEvent, RemoveBuffEvent } from 'parser/core/Events';\r\nimport SPELLS from 'common/SPELLS';\r\nimport { SHARPSHOOTERS_FOCUS_INCREASE_TRUESHOT_DURATION, TRUESHOT_DURATION_BASELINE } from 'parser/hunter/marksmanship/constants';\r\nimport ConduitSpellText from 'interface/statistics/components/ConduitSpellText';\r\n\r\n/**\r\n * Trueshot lasts 20.0% longer.\r\n *\r\n * Example log\r\n *\r\n */\r\nclass SharpshootersFocus extends Analyzer {\r\n\r\n  conduitRank: number = 0;\r\n  increasedTrueshotUptime: number = 0;\r\n  trueshotApplicationTimestamp: number = this.owner.fight.start_time;\r\n  uptimeAddedBoolean: boolean = false;\r\n  casts: number = 0;\r\n\r\n  constructor(options: Options) {\r\n    super(options);\r\n    this.conduitRank = this.selectedCombatant.conduitRankBySpellID(SPELLS.SHARPSHOOTERS_FOCUS_CONDUIT.id);\r\n    if (!this.conduitRank) {\r\n      this.active = false;\r\n      return;\r\n    }\r\n\r\n    this.addEventListener(Events.applybuff.by(SELECTED_PLAYER).spell(SPELLS.TRUESHOT), this.onTrueshotApply);\r\n    this.addEventListener(Events.removebuff.by(SELECTED_PLAYER).spell(SPELLS.TRUESHOT), this.onTrueshotRemove);\r\n    this.addEventListener(Events.fightend.by(SELECTED_PLAYER).spell(SPELLS.TRUESHOT), this.onFightEnd);\r\n    this.addEventListener(Events.refreshbuff.by(SELECTED_PLAYER).spell(SPELLS.TRUESHOT), this.onTrueshotRefresh);\r\n  }\r\n\r\n  get maximumAddedTrueshotUptime() {\r\n    return this.casts * (TRUESHOT_DURATION_BASELINE * SHARPSHOOTERS_FOCUS_INCREASE_TRUESHOT_DURATION[this.conduitRank]);\r\n  }\r\n\r\n  onTrueshotApply(event: ApplyBuffEvent) {\r\n    this.trueshotApplicationTimestamp = event.timestamp;\r\n    this.uptimeAddedBoolean = false;\r\n    this.casts += 1;\r\n  }\r\n\r\n  onTrueshotRemove(event: RemoveBuffEvent) {\r\n    this.addTrueshotUptime(event);\r\n    this.uptimeAddedBoolean = true;\r\n    if (this.casts === 0) {\r\n      this.casts += 1;\r\n    }\r\n  }\r\n\r\n  onTrueshotRefresh(event: RefreshBuffEvent) {\r\n    this.addTrueshotUptime(event);\r\n    this.trueshotApplicationTimestamp = event.timestamp;\r\n    this.uptimeAddedBoolean = false;\r\n    this.casts += 1;\r\n  }\r\n\r\n  onFightEnd(event: FightEndEvent) {\r\n    if (this.uptimeAddedBoolean) {\r\n      return;\r\n    }\r\n    this.addTrueshotUptime(event);\r\n  }\r\n\r\n  addTrueshotUptime(event: RemoveBuffEvent | RefreshBuffEvent | FightEndEvent) {\r\n    this.increasedTrueshotUptime += Math.max(event.timestamp - this.trueshotApplicationTimestamp - TRUESHOT_DURATION_BASELINE, 0);\r\n  }\r\n\r\n  statistic() {\r\n    return (\r\n      <Statistic\r\n        position={STATISTIC_ORDER.OPTIONAL(13)}\r\n        size=\"flexible\"\r\n        category={STATISTIC_CATEGORY.COVENANTS}\r\n        tooltip={(\r\n          <>\r\n            You lost out on {((this.maximumAddedTrueshotUptime - this.increasedTrueshotUptime) / 1000).toFixed(1)}s of increased uptime due to combat ending or refreshing Trueshot.\r\n          </>\r\n        )}\r\n      >\r\n        <ConduitSpellText spell={SPELLS.SHARPSHOOTERS_FOCUS_CONDUIT} rank={this.conduitRank}>\r\n          <>\r\n            {(this.increasedTrueshotUptime / 1000).toFixed(1)}s <small>increased Trueshot uptime</small>\r\n          </>\r\n        </ConduitSpellText>\r\n      </Statistic>\r\n    );\r\n  }\r\n\r\n}\r\n\r\nexport default SharpshootersFocus;\r\n","import Analyzer, { Options, SELECTED_PLAYER } from 'parser/core/Analyzer';\r\nimport SPELLS from 'common/SPELLS';\r\nimport Statistic from 'interface/statistics/Statistic';\r\nimport STATISTIC_ORDER from 'interface/others/STATISTIC_ORDER';\r\nimport STATISTIC_CATEGORY from 'interface/others/STATISTIC_CATEGORY';\r\nimport BoringSpellValueText from 'interface/statistics/components/BoringSpellValueText';\r\nimport ItemDamageDone from 'interface/ItemDamageDone';\r\nimport React from 'react';\r\nimport Events, { CastEvent, DamageEvent, RemoveDebuffEvent } from 'parser/core/Events';\r\nimport { encodeTargetString } from 'parser/shared/modules/EnemyInstances';\r\n\r\n/**\r\n * Aimed Shot also fires a Serpent Sting at the primary target.\r\n */\r\n\r\nclass SerpentstalkersTrickery extends Analyzer {\r\n\r\n  damage = 0;\r\n  aimedShotTargets: string[] = [];\r\n\r\n  constructor(options: Options) {\r\n    super(options);\r\n    this.active = this.selectedCombatant.hasLegendaryByBonusID(SPELLS.SERPENTSTALKERS_TRICKERY_EFFECT.bonusID);\r\n    if (!this.active) {\r\n      return;\r\n    }\r\n    this.addEventListener(Events.damage.by(SELECTED_PLAYER).spell(SPELLS.SERPENT_STING_TALENT), this.onSerpentStingDamage);\r\n    this.addEventListener(Events.cast.by(SELECTED_PLAYER).spell(SPELLS.AIMED_SHOT), this.onAimedShotCast);\r\n    this.addEventListener(Events.removedebuff.by(SELECTED_PLAYER).spell(SPELLS.AIMED_SHOT), this.onStingRemoval);\r\n  }\r\n\r\n  onSerpentStingDamage(event: DamageEvent) {\r\n    const target = encodeTargetString(event.targetID, event.targetInstance);\r\n    if (this.aimedShotTargets.includes(target)) {\r\n      this.damage += event.amount + (event.absorbed || 0);\r\n    }\r\n  }\r\n\r\n  onAimedShotCast(event: CastEvent) {\r\n    const target = encodeTargetString(event.targetID, event.targetInstance);\r\n    this.aimedShotTargets.push(target);\r\n  }\r\n\r\n  onStingRemoval(event: RemoveDebuffEvent) {\r\n    const target = encodeTargetString(event.targetID, event.targetInstance);\r\n    const index = this.aimedShotTargets.indexOf(target);\r\n    if (index !== -1) {\r\n      this.aimedShotTargets.splice(index, 1);\r\n    }\r\n  }\r\n\r\n  statistic() {\r\n    return (\r\n      <Statistic\r\n        position={STATISTIC_ORDER.CORE()}\r\n        size=\"flexible\"\r\n        category={STATISTIC_CATEGORY.ITEMS}\r\n      >\r\n        <BoringSpellValueText spell={SPELLS.SERPENTSTALKERS_TRICKERY_EFFECT}>\r\n          <ItemDamageDone amount={this.damage} />\r\n        </BoringSpellValueText>\r\n      </Statistic>\r\n    );\r\n  }\r\n}\r\n\r\nexport default SerpentstalkersTrickery;\r\n","import Analyzer, { Options, SELECTED_PLAYER } from 'parser/core/Analyzer';\r\nimport Statistic from 'interface/statistics/Statistic';\r\nimport STATISTIC_ORDER from 'interface/others/STATISTIC_ORDER';\r\nimport STATISTIC_CATEGORY from 'interface/others/STATISTIC_CATEGORY';\r\nimport React from 'react';\r\nimport BoringSpellValueText from 'interface/statistics/components/BoringSpellValueText';\r\nimport SPELLS from 'common/SPELLS';\r\nimport Events, { DamageEvent } from 'parser/core/Events';\r\nimport SpellUsable from 'parser/hunter/marksmanship/modules/core/SpellUsable';\r\nimport calculateEffectiveDamage from 'parser/core/calculateEffectiveDamage';\r\nimport { plotOneVariableBinomChart } from 'parser/shared/modules/helpers/Probability';\r\nimport SpellLink from 'common/SpellLink';\r\nimport ItemDamageDone from 'interface/ItemDamageDone';\r\nimport { SURGING_SHOTS_DAMAGE_INCREASE, SURGING_SHOTS_RESET_CHANCE } from 'parser/hunter/marksmanship/constants';\r\n\r\n/**\r\n * Rapid Fire deals 25% additional damage, and Aimed Shot has a 15% chance to reset the cooldown of Rapid Fire.\r\n *\r\n * Example log:\r\n *\r\n */\r\nclass SurgingShots extends Analyzer {\r\n\r\n  static dependencies = {\r\n    spellUsable: SpellUsable,\r\n  };\r\n\r\n  damage = 0;\r\n  aimedShotCasts = 0;\r\n\r\n  protected spellUsable!: SpellUsable;\r\n\r\n  constructor(options: Options) {\r\n    super(options);\r\n    this.active = this.selectedCombatant.hasLegendaryByBonusID(SPELLS.SURGING_SHOTS_EFFECT.bonusID);\r\n    if (!this.active) {\r\n      return;\r\n    }\r\n    this.addEventListener(Events.damage.by(SELECTED_PLAYER).spell(SPELLS.RAPID_FIRE_DAMAGE), this.onRapidFireDamage);\r\n    this.addEventListener(Events.cast.by(SELECTED_PLAYER).spell(SPELLS.AIMED_SHOT), this.onAimedShotCast);\r\n  }\r\n\r\n  onRapidFireDamage(event: DamageEvent) {\r\n    this.damage += calculateEffectiveDamage(event, SURGING_SHOTS_DAMAGE_INCREASE);\r\n  }\r\n\r\n  onAimedShotCast() {\r\n    this.aimedShotCasts += 1;\r\n  }\r\n\r\n  statistic() {\r\n    return (\r\n      <Statistic\r\n        position={STATISTIC_ORDER.CORE()}\r\n        size=\"flexible\"\r\n        category={STATISTIC_CATEGORY.ITEMS}\r\n        dropdown={(\r\n          <>\r\n            <div style={{ padding: '8px' }}>\r\n              {plotOneVariableBinomChart(this.spellUsable.rapidFireResets, this.aimedShotCasts, SURGING_SHOTS_RESET_CHANCE)}\r\n              <p>Likelihood of getting <em>exactly</em> as many procs as estimated on a fight given your number of <SpellLink id={SPELLS.AIMED_SHOT.id} /> casts.</p>\r\n            </div>\r\n          </>\r\n        )}\r\n      >\r\n        <BoringSpellValueText spell={SPELLS.SURGING_SHOTS_EFFECT}>\r\n          <ItemDamageDone amount={this.damage} />\r\n        </BoringSpellValueText>\r\n      </Statistic>\r\n    );\r\n  }\r\n}\r\n\r\nexport default SurgingShots;\r\n","import Analyzer, { Options, SELECTED_PLAYER } from 'parser/core/Analyzer';\r\nimport SPELLS from 'common/SPELLS';\r\nimport Statistic from 'interface/statistics/Statistic';\r\nimport STATISTIC_ORDER from 'interface/others/STATISTIC_ORDER';\r\nimport STATISTIC_CATEGORY from 'interface/others/STATISTIC_CATEGORY';\r\nimport BoringSpellValueText from 'interface/statistics/components/BoringSpellValueText';\r\nimport React from 'react';\r\nimport Events, { ApplyBuffEvent, CastEvent, EventType, RefreshBuffEvent } from 'parser/core/Events';\r\nimport SpellUsable from 'parser/shared/modules/SpellUsable';\r\nimport RESOURCE_TYPES from 'game/RESOURCE_TYPES';\r\nimport { AIMED_SHOT_FOCUS_COST, SECRETS_UNBLINKING_PROC_CHANCE } from 'parser/hunter/marksmanship/constants';\r\nimport { plotOneVariableBinomChart } from 'parser/shared/modules/helpers/Probability';\r\nimport SpellLink from 'common/SpellLink';\r\n\r\n/**\r\n * When you gain the Trick Shots effect, you have a 50% chance for it to not be consumed by your next Aimed Shot or Rapid Fire.\r\n */\r\n\r\nclass SecretsOfTheUnblinkingVigil extends Analyzer {\r\n\r\n  static dependencies = {\r\n    spellUsable: SpellUsable,\r\n  };\r\n\r\n  aimedShotRefunds = 0;\r\n  totalPossibleAimedShotRefunds = 0;\r\n  focusSaved = 0;\r\n  unblinkingRefreshes = 0;\r\n  trickShotApplications = 0;\r\n\r\n  protected spellUsable!: SpellUsable;\r\n\r\n  constructor(options: Options) {\r\n    super(options);\r\n    this.active = this.selectedCombatant.hasLegendaryByBonusID(SPELLS.SECRETS_OF_THE_UNBLINKING_VIGIL_EFFECT.bonusID);\r\n    if (!this.active) {\r\n      return;\r\n    }\r\n    this.addEventListener(Events.applybuff.by(SELECTED_PLAYER).spell(SPELLS.SECRETS_OF_THE_UNBLINKING_VIGIL_BUFF), this.applyOrRefreshSecretsBuff);\r\n    this.addEventListener(Events.refreshbuff.by(SELECTED_PLAYER).spell(SPELLS.SECRETS_OF_THE_UNBLINKING_VIGIL_BUFF), this.applyOrRefreshSecretsBuff);\r\n    this.addEventListener(Events.applybuff.by(SELECTED_PLAYER).spell(SPELLS.TRICK_SHOTS_BUFF), this.applyTrickShots);\r\n    this.addEventListener(Events.refreshbuff.by(SELECTED_PLAYER).spell(SPELLS.TRICK_SHOTS_BUFF), this.applyTrickShots);\r\n    this.addEventListener(Events.cast.by(SELECTED_PLAYER).spell(SPELLS.AIMED_SHOT), this.castAimedShot);\r\n  }\r\n\r\n  applyOrRefreshSecretsBuff(event: ApplyBuffEvent | RefreshBuffEvent) {\r\n    if (this.spellUsable.isOnCooldown(SPELLS.AIMED_SHOT.id)) {\r\n      this.spellUsable.endCooldown(SPELLS.AIMED_SHOT.id, false, event.timestamp);\r\n      this.aimedShotRefunds += 1;\r\n    }\r\n    this.totalPossibleAimedShotRefunds += 1;\r\n\r\n    if (event.type === EventType.RefreshBuff) {\r\n      this.unblinkingRefreshes += 1;\r\n    }\r\n  }\r\n\r\n  applyTrickShots(event: ApplyBuffEvent | RefreshBuffEvent) {\r\n    this.trickShotApplications += 1;\r\n  }\r\n\r\n  castAimedShot(event: CastEvent) {\r\n    if (!this.selectedCombatant.hasBuff(SPELLS.SECRETS_OF_THE_UNBLINKING_VIGIL_BUFF.id)) {\r\n      return;\r\n    }\r\n    const resource = event.classResources?.find(resource => resource.type === RESOURCE_TYPES.FOCUS.id);\r\n    if (!resource) {\r\n      return;\r\n    }\r\n    this.focusSaved += AIMED_SHOT_FOCUS_COST;\r\n  }\r\n\r\n  statistic() {\r\n    return (\r\n      <Statistic\r\n        position={STATISTIC_ORDER.CORE()}\r\n        size=\"flexible\"\r\n        category={STATISTIC_CATEGORY.ITEMS}\r\n        tooltip={(\r\n          <>\r\n            You refreshed the Unblinking Vigil buff {this.unblinkingRefreshes} {this.unblinkingRefreshes === 1 ? 'time' : 'times'}\r\n          </>\r\n        )}\r\n        dropdown={(\r\n          <>\r\n            <div style={{ padding: '8px' }}>\r\n              {plotOneVariableBinomChart(this.totalPossibleAimedShotRefunds, this.trickShotApplications, SECRETS_UNBLINKING_PROC_CHANCE)}\r\n              <p>Likelihood of getting <em>exactly</em> as many procs as estimated on a fight given your number of <SpellLink id={SPELLS.TRICK_SHOTS_BUFF.id} /> applications.</p>\r\n            </div>\r\n          </>\r\n        )}\r\n      >\r\n        <BoringSpellValueText spell={SPELLS.SECRETS_OF_THE_UNBLINKING_VIGIL_EFFECT}>\r\n          {this.aimedShotRefunds}/{this.totalPossibleAimedShotRefunds} <small>Aimed Shot refunds</small>\r\n          <br />\r\n          {this.focusSaved} <small>Focus saved</small>\r\n        </BoringSpellValueText>\r\n      </Statistic>\r\n    );\r\n  }\r\n}\r\n\r\nexport default SecretsOfTheUnblinkingVigil;\r\n","import Analyzer, { Options, SELECTED_PLAYER } from 'parser/core/Analyzer';\r\nimport SPELLS from 'common/SPELLS';\r\nimport Statistic from 'interface/statistics/Statistic';\r\nimport STATISTIC_ORDER from 'interface/others/STATISTIC_ORDER';\r\nimport STATISTIC_CATEGORY from 'interface/others/STATISTIC_CATEGORY';\r\nimport BoringSpellValueText from 'interface/statistics/components/BoringSpellValueText';\r\nimport React from 'react';\r\nimport Events, { CastEvent } from 'parser/core/Events';\r\nimport RESOURCE_TYPES from 'game/RESOURCE_TYPES';\r\nimport { EAGLETALONS_TRUE_FOCUS_COST_REDUCTION } from 'parser/hunter/marksmanship/constants';\r\n\r\n/**\r\n * Trueshot also reduces the Focus cost of all of your abilities by 50%.\r\n */\r\n\r\nclass EagletalonsTrueFocus extends Analyzer {\r\n\r\n  focusSaved = 0;\r\n\r\n  constructor(options: Options) {\r\n    super(options);\r\n    this.active = this.selectedCombatant.hasLegendaryByBonusID(SPELLS.EAGLETALONS_TRUE_FOCUS_EFFECT.bonusID);\r\n    if (!this.active) {\r\n      return;\r\n    }\r\n    this.addEventListener(Events.cast.by(SELECTED_PLAYER), this.onCast);\r\n  }\r\n\r\n  onCast(event: CastEvent) {\r\n    if (!this.selectedCombatant.hasBuff(SPELLS.TRUESHOT.id)) {\r\n      return;\r\n    }\r\n    const resource = event.classResources?.find(resource => resource.type === RESOURCE_TYPES.FOCUS.id);\r\n    if (!resource) {\r\n      return;\r\n    }\r\n    this.focusSaved += Math.floor(resource.cost * EAGLETALONS_TRUE_FOCUS_COST_REDUCTION) || 0;\r\n  }\r\n\r\n  statistic() {\r\n    return (\r\n      <Statistic\r\n        position={STATISTIC_ORDER.CORE()}\r\n        size=\"flexible\"\r\n        category={STATISTIC_CATEGORY.ITEMS}\r\n      >\r\n        <BoringSpellValueText spell={SPELLS.EAGLETALONS_TRUE_FOCUS_EFFECT}>\r\n          {this.focusSaved} <small>Focus saved</small>\r\n        </BoringSpellValueText>\r\n      </Statistic>\r\n    );\r\n  }\r\n}\r\n\r\nexport default EagletalonsTrueFocus;\r\n","import Analyzer, { Options, SELECTED_PLAYER } from 'parser/core/Analyzer';\r\nimport Statistic from 'interface/statistics/Statistic';\r\nimport STATISTIC_ORDER from 'interface/others/STATISTIC_ORDER';\r\nimport STATISTIC_CATEGORY from 'interface/others/STATISTIC_CATEGORY';\r\nimport React from 'react';\r\nimport BoringSpellValueText from 'interface/statistics/components/BoringSpellValueText';\r\nimport SPELLS from 'common/SPELLS';\r\nimport Events, { EnergizeEvent } from 'parser/core/Events';\r\nimport ResourceIcon from 'common/ResourceIcon';\r\nimport RESOURCE_TYPES from 'game/RESOURCE_TYPES';\r\nimport RapidFire from 'parser/hunter/marksmanship/modules/spells/RapidFire';\r\nimport SteadyShot from 'parser/hunter/marksmanship/modules/spells/SteadyShot';\r\nimport { formatNumber } from 'common/format';\r\n\r\n/**\r\n * Whenever a trap is triggered, gain 45 Focus and increase all Focus gained by 100% for 5 sec.\r\n *\r\n * Example log:\r\n *\r\n */\r\nclass NesingwarysTrappingApparatus extends Analyzer {\r\n\r\n  static dependencies = {\r\n    rapidFire: RapidFire,\r\n    steadyShot: SteadyShot,\r\n  };\r\n\r\n  focusGained: number = 0;\r\n  focusWasted: number = 0;\r\n\r\n  protected rapidFire!: RapidFire;\r\n  protected steadyShot!: SteadyShot;\r\n\r\n  constructor(options: Options) {\r\n    super(options);\r\n    this.active = this.selectedCombatant.hasLegendaryByBonusID(SPELLS.NESINGWARYS_TRAPPING_APPARATUS_EFFECT.bonusID);\r\n    if (!this.active) {\r\n      return;\r\n    }\r\n    this.addEventListener(Events.energize.by(SELECTED_PLAYER).spell(SPELLS.NESINGWARYS_TRAPPING_APPARATUS_ENERGIZE), this.onEnergize);\r\n  }\r\n\r\n  onEnergize(event: EnergizeEvent) {\r\n    this.focusGained += event.resourceChange;\r\n    this.focusWasted += event.waste;\r\n  }\r\n\r\n  get effectiveFocus() {\r\n    return formatNumber(this.steadyShot.additionalFocusFromNesingwary + this.rapidFire.additionalFocusFromNesingwary);\r\n  }\r\n\r\n  get possibleFocus() {\r\n    return formatNumber(this.steadyShot.possibleAdditionalFocusFromNesingwary + this.rapidFire.possibleAdditionalFocusFromNesingwary);\r\n  }\r\n\r\n  statistic() {\r\n    return (\r\n      <Statistic\r\n        position={STATISTIC_ORDER.CORE()}\r\n        size=\"flexible\"\r\n        category={STATISTIC_CATEGORY.ITEMS}\r\n      >\r\n        <BoringSpellValueText spell={SPELLS.NESINGWARYS_TRAPPING_APPARATUS_EFFECT}>\r\n          <ResourceIcon id={RESOURCE_TYPES.FOCUS.id} noLink /> {this.focusGained}/{this.focusWasted + this.focusGained} <small>gained Focus immediately</small>\r\n          <br />\r\n          <ResourceIcon id={RESOURCE_TYPES.FOCUS.id} noLink /> {this.effectiveFocus}/{this.possibleFocus} <small>gained Focus from generators</small>\r\n        </BoringSpellValueText>\r\n      </Statistic>\r\n    );\r\n  }\r\n}\r\n\r\nexport default NesingwarysTrappingApparatus;\r\n","import CoreCombatLogParser from 'parser/core/CombatLogParser';\r\n\r\n//Overridden Racial\r\nimport ArcaneTorrent from 'parser/shared/modules/racials/bloodelf/ArcaneTorrent';\r\n\r\n//Overridden Core modules\r\nimport SpellUsable from './modules/core/SpellUsable';\r\n\r\n//Features\r\nimport Abilities from './modules/Abilities';\r\nimport Channeling from './modules/features/Channeling';\r\nimport CooldownThroughputTracker from './modules/features/CooldownThroughputTracker';\r\nimport AlwaysBeCasting from './modules/features/AlwaysBeCasting';\r\nimport CancelledCasts from '../shared/modules/features/CancelledCasts';\r\nimport Buffs from './modules/Buffs';\r\n\r\n//Checklist\r\nimport Checklist from './modules/checklist/Module';\r\n\r\n//Death Tracker\r\nimport DeathTracker from '../shared/modules/core/DeathTracker';\r\n\r\n//Focus\r\nimport FocusTracker from '../shared/modules/resources/FocusTracker';\r\nimport FocusDetails from '../shared/modules/resources/FocusDetails';\r\nimport SpellFocusCost from '../shared/modules/resources/SpellFocusCost';\r\nimport MarksmanshipFocusCapTracker from './modules/resources/MarksmanshipFocusCapTracker';\r\nimport Focus from './modules/resources/Focus';\r\nimport MarksmanshipFocusUsage from './modules/resources/MarksmanshipFocusUsage';\r\n\r\n//Spells\r\nimport Trueshot from './modules/spells/Trueshot';\r\nimport LoneWolf from './modules/spells/LoneWolf';\r\nimport PreciseShots from './modules/spells/PreciseShots';\r\nimport AimedShot from './modules/spells/AimedShot';\r\nimport RapidFire from './modules/spells/RapidFire';\r\nimport SteadyShot from './modules/spells/SteadyShot';\r\nimport KillShot from '../shared/modules/spells/KillShot';\r\nimport BindingShot from '../shared/modules/talents/BindingShot';\r\n\r\n//Talents\r\nimport AMurderOfCrows from '../shared/modules/talents/AMurderOfCrows';\r\nimport Barrage from '../shared/modules/talents/Barrage';\r\nimport Volley from './modules/talents/Volley';\r\nimport ExplosiveShot from './modules/talents/ExplosiveShot';\r\nimport LockAndLoad from './modules/talents/LockAndLoad';\r\nimport MasterMarksman from './modules/talents/MasterMarksman';\r\nimport DoubleTap from './modules/talents/DoubleTap';\r\nimport CallingTheShots from './modules/talents/CallingTheShots';\r\nimport SerpentSting from './modules/talents/SerpentSting';\r\nimport NaturalMending from '../shared/modules/talents/NaturalMending';\r\nimport Trailblazer from '../shared/modules/talents/Trailblazer';\r\nimport SteadyFocus from './modules/talents/SteadyFocus';\r\nimport BornToBeWild from '../shared/modules/talents/BornToBeWild';\r\nimport CarefulAim from './modules/talents/CarefulAim';\r\nimport DeadEye from './modules/talents/DeadEye';\r\nimport ChimaeraShot from './modules/talents/ChimaeraShot';\r\nimport LethalShots from './modules/talents/LethalShots';\r\nimport Streamline from './modules/talents/Streamline';\r\n\r\n//Covenants\r\nimport ResonatingArrow from '../shared/modules/spells/covenants/kyrian/ResonatingArrow';\r\nimport DeathChakrams from '../shared/modules/spells/covenants/necrolord/DeathChakrams';\r\nimport WildSpirits from '../shared/modules/spells/covenants/nightfae/WildSpirits';\r\nimport FlayedShot from '../shared/modules/spells/covenants/venthyr/FlayedShot';\r\n\r\n//Conduits\r\nimport EnfeebledMark from '../shared/modules/spells/conduits/kyrian/EnfeebledMark';\r\nimport EmpoweredRelease from '../shared/modules/spells/conduits/venthyr/EmpoweredRelease';\r\nimport NecroticBarrage from '../shared/modules/spells/conduits/necrolord/NecroticBarrage';\r\nimport SpiritAttunement from '../shared/modules/spells/conduits/nightfae/SpiritAttunement';\r\nimport BrutalProjectiles from './modules/spells/conduits/BrutalProjectiles';\r\nimport DeadlyChain from './modules/spells/conduits/DeadlyChain';\r\nimport PowerfulPrecision from './modules/spells/conduits/PowerfulPrecision';\r\nimport SharpshootersFocus from './modules/spells/conduits/SharpshootersFocus';\r\n\r\n//Legendaries\r\nimport SerpentstalkersTrickery from './modules/items/SerpentstalkersTrickery';\r\nimport SurgingShots from './modules/items/SurgingShots';\r\nimport SecretsOfTheUnblinkingVigil from './modules/items/SecretsOfTheUnblinkingVigil';\r\nimport EagletalonsTrueFocus from './modules/items/EagletalonsTrueFocus';\r\nimport NesingwarysTrappingApparatus from './modules/items/NesingwarysTrappingApparatus';\r\nimport SoulforgeEmbers from '../shared/modules/items/SoulforgeEmbers';\r\n\r\nclass CombatLogParser extends CoreCombatLogParser {\r\n  static specModules = {\r\n    // Core statistics\r\n    abilities: Abilities,\r\n    channeling: Channeling,\r\n    spellUsable: SpellUsable,\r\n    checklist: Checklist,\r\n\r\n    // Features\r\n    alwaysBeCasting: AlwaysBeCasting,\r\n    cooldownThroughputTracker: CooldownThroughputTracker,\r\n    cancelledCasts: CancelledCasts,\r\n    buffs: Buffs,\r\n\r\n    //Resources\r\n    focusTracker: FocusTracker,\r\n    focusDetails: FocusDetails,\r\n    spellFocusCost: SpellFocusCost,\r\n    marksmanshipFocusCapTracker: MarksmanshipFocusCapTracker,\r\n    focus: Focus,\r\n    marksmanshipFocusUsage: MarksmanshipFocusUsage,\r\n\r\n    //DeathTracker\r\n    deathTracker: DeathTracker,\r\n\r\n    //Spells\r\n    trueshot: Trueshot,\r\n    loneWolf: LoneWolf,\r\n    preciseShots: PreciseShots,\r\n    aimedShot: AimedShot,\r\n    rapidFire: RapidFire,\r\n    steadyShot: SteadyShot,\r\n    killShot: KillShot,\r\n    bindingShot: BindingShot,\r\n\r\n    //Talents\r\n    volley: Volley,\r\n    explosiveShot: ExplosiveShot,\r\n    aMurderOfCrows: AMurderOfCrows,\r\n    lockAndLoad: LockAndLoad,\r\n    barrage: Barrage,\r\n    masterMarksman: MasterMarksman,\r\n    doubleTap: DoubleTap,\r\n    callingTheShots: CallingTheShots,\r\n    serpentSting: SerpentSting,\r\n    steadyFocus: SteadyFocus,\r\n    naturalMending: NaturalMending,\r\n    trailblazer: Trailblazer,\r\n    bornToBeWild: BornToBeWild,\r\n    carefulAim: CarefulAim,\r\n    chimaeraShot: ChimaeraShot,\r\n    deadEye: DeadEye,\r\n    lethalShots: LethalShots,\r\n    streamline: Streamline,\r\n\r\n    //Covenants\r\n    resonatingArrow: ResonatingArrow,\r\n    deathChakrams: DeathChakrams,\r\n    wildSpirits: WildSpirits,\r\n    flayedShot: FlayedShot,\r\n\r\n    //Conduits\r\n    empoweredRelease: EmpoweredRelease,\r\n    enfeebledMark: EnfeebledMark,\r\n    necroticBarrage: NecroticBarrage,\r\n    spiritAttunement: SpiritAttunement,\r\n    brutalProjectiles: BrutalProjectiles,\r\n    deadlyChain: DeadlyChain,\r\n    powerfulPrecision: PowerfulPrecision,\r\n    sharpshootersFocus: SharpshootersFocus,\r\n\r\n    //Generic Legendaries\r\n    nesingwarysTrappingApparatus: NesingwarysTrappingApparatus,\r\n    soulforgeEmbers: SoulforgeEmbers,\r\n\r\n    //Marksmanship Legendaries\r\n    surgingShots: SurgingShots,\r\n    serpentstalkersTrickery: SerpentstalkersTrickery,\r\n    secretsOfTheUnblinkingVigil: SecretsOfTheUnblinkingVigil,\r\n    eagletalonsTrueFocus: EagletalonsTrueFocus,\r\n\r\n    // There's no throughput benefit from casting Arcane Torrent on cooldown\r\n    arcaneTorrent: [ArcaneTorrent, { castEfficiency: null }] as const,\r\n  };\r\n}\r\n\r\nexport default CombatLogParser;\r\n","export default function calculateEffectiveDamage(event, increase) {\r\n  const raw = (event.amount || 0) + (event.absorbed || 0);\r\n  return raw - (raw / (1 + increase));\r\n}\r\n","import React from 'react';\r\n\r\n// https://thenounproject.com/term/duration/370713/\r\n// duration by Bohdan Burmich from the Noun Project\r\nconst Icon = ({ ...other }) => (\r\n  <svg xmlns=\"http://www.w3.org/2000/svg\" viewBox=\"10 10 80 80\" className=\"icon\" {...other}>\r\n    <path d=\"M50,86.4865c17.4361,0,31.6216-14.1855,31.6216-31.6216c0-16.6168-12.8865-30.2714-29.1892-31.5189v-4.9677h7.2973v-4.8649  H40.2703v4.8649h7.2973v4.9677c-16.3027,1.2475-29.1892,14.902-29.1892,31.5189C18.3784,72.3009,32.5639,86.4865,50,86.4865z M52.4324,28.2236c3.1101,0.2817,6.0664,1.0982,8.7798,2.356l-8.7798,15.2073V28.2236z M47.5676,28.2236v26.6412 c0,1.1008,0.7393,2.0647,1.8029,2.3497c0.209,0.0561,0.4205,0.0827,0.6295,0.0827c0.8533,0,1.6642-0.4504,2.1065-1.2162 l13.3146-23.0616c6.8507,4.8503,11.3357,12.8315,11.3357,21.8454c0,14.7537-12.0031,26.7567-26.7568,26.7567 s-26.7568-12.003-26.7568-26.7567C23.2432,40.9315,33.9501,29.4573,47.5676,28.2236z\" />\r\n  </svg>\r\n);\r\n\r\nexport default Icon;\r\n","/**\r\n * A simple component that shows a value in the most plain way possible.\r\n * Use this only as the very last resort.\r\n */\r\nimport React from 'react';\r\n\r\ntype Props = {\r\n  label: React.ReactNode;\r\n  children: React.ReactNode;\r\n  className?: string;\r\n}\r\n\r\nconst BoringValue = ({ label, children, className }: Props) => (\r\n  <div className={`pad boring-text ${className || ''}`}>\r\n    <label>\r\n      {label}\r\n    </label>\r\n    <div className=\"value\">\r\n      {children}\r\n    </div>\r\n  </div>\r\n);\r\n\r\nexport default BoringValue;\r\n","import React from 'react';\r\n\r\nimport SpellIcon from 'common/SpellIcon';\r\nimport SpellLink from 'common/SpellLink';\r\nimport Spell from 'common/SPELLS/Spell';\r\n\r\ntype Props = {\r\n  spell: Spell;\r\n  rank: number;\r\n  children: React.ReactNode;\r\n  className?: string;\r\n}\r\n\r\nconst ConduitSpellText = ({ spell, rank, children, className }: Props) => (\r\n  <div className={`pad boring-text ${className || ''}`}>\r\n    <label>\r\n      <SpellIcon id={spell.id} /> <SpellLink id={spell.id} icon={false} /> - Rank {rank}\r\n    </label>\r\n    <div className=\"value\">\r\n      {children}\r\n    </div>\r\n  </div>\r\n);\r\n\r\nexport default ConduitSpellText;\r\n","import SPELLS from 'common/SPELLS';\r\n\r\n//region Spells\r\n/** Butchery / Carve */\r\n//Butchery and Carve can hit up to 5 people\r\nexport const BUTCHERY_CARVE_MAX_TARGETS_HIT = 5;\r\n/** Coordinated Assault */\r\n//Coordinated Assault increases all damage done by 20%\r\nexport const COORDINATED_ASSAULT_DMG_MOD = 0.2;\r\n//Coordinated Assault lasts 20 seconds by default\r\nexport const COORDINATED_ASSAULT_BASELINE_DURATION = 20000;\r\n/** Wildfire Bomb */\r\n//People aren't robots, give them a bit of leeway in terms of when they cast WFB to avoid capping on charges\r\nexport const WILDFIRE_BOMB_LEEWAY_BUFFER = 500;\r\n/** Kill Command */\r\n//Kill Command for Survival regenerates 15 focus\r\nexport const SV_KILL_COMMAND_FOCUS_GAIN = 15;\r\n/** Serpent Sting */\r\n//Serpent Sting costs 20 focus\r\nexport const SV_SERPENT_STING_COST = 20;\r\n//Serpent Sting for SV pandemics at 30%\r\nexport const SERPENT_STING_SV_PANDEMIC = 0.3;\r\n//The baseduration of Serpent Sting before any haste reduction\r\nexport const SERPENT_STING_SV_BASE_DURATION = 12000;\r\n/** Raptor Strike / Mongoose Bite */\r\n//Raptor Strike turns into Mongoose Bite when talented into it, and during Aspect of the Eagle they change spellIDs.\r\nexport const RAPTOR_MONGOOSE_VARIANTS = [\r\n  SPELLS.RAPTOR_STRIKE,\r\n  SPELLS.RAPTOR_STRIKE_AOTE,\r\n  SPELLS.MONGOOSE_BITE_TALENT,\r\n  SPELLS.MONGOOSE_BITE_TALENT_AOTE,\r\n];\r\n/** Aspect of the Eagle */\r\n//This is the baseline cooldown of Aspect of the Eagle\r\nexport const BASELINE_AOTE_CD = 90000;\r\n//endregion\r\n\r\n//region Talents\r\n/** Vipers Venom */\r\n//Serpent Sting costs 0 when Vipers Venom is active\r\nexport const VIPERS_VENOM_COST_MULTIPLIER = 0;\r\n//The increased damage of the initial hit of Serpent Sting from Viper's Venom\r\nexport const VIPERS_VENOM_DAMAGE_MODIFIER = 2.5;\r\n/** Bird of Prey */\r\n//Bird of Prey extends Coordinated Assault by 1.5 seconds per trigger\r\nexport const BOP_CA_EXTENSION_PER_CAST = 1500;\r\n/** Chakrams */\r\n//Chakrams has a bunch of different spellIDs for damage\r\nexport const SURVIVAL_CHAKRAM_TYPES = [\r\n  SPELLS.CHAKRAMS_TO_MAINTARGET.id,\r\n  SPELLS.CHAKRAMS_BACK_FROM_MAINTARGET.id,\r\n  SPELLS.CHAKRAMS_NOT_MAINTARGET.id,\r\n];\r\n/** Flanking Strike */\r\n//Flanking Strikes regenerates 30 focus\r\nexport const FLANKING_STRIKE_FOCUS_GAIN = 30;\r\n/** Mongoose Bite */\r\n//Mongoose Bite has traveltime, so if used during Aspect of the Eagle it can have up to 700ms travel time\r\nexport const MONGOOSE_BITE_MAX_TRAVEL_TIME = 700;\r\n//Mongoose Bite can have a maximum of 5 stacks\r\nexport const MONGOOSE_BITE_MAX_STACKS = 5;\r\n/** Guerilla Tactics */\r\n//The initial hit modifier for Guerrilla Tactics talent\r\nexport const GUERRILLA_TACTICS_INIT_HIT_MODIFIER = 1;\r\n//Spells affected by Guerrilla Tactics talent\r\nexport const AFFECTED_BY_GUERRILLA_TACTICS = [\r\n  SPELLS.WILDFIRE_BOMB_IMPACT,\r\n  SPELLS.VOLATILE_BOMB_WFI_IMPACT,\r\n  SPELLS.PHEROMONE_BOMB_WFI_IMPACT,\r\n  SPELLS.SHRAPNEL_BOMB_WFI_IMPACT,\r\n];\r\n/** Tip of the Spear */\r\n//Tip of the Spear damage increase\r\nexport const TIP_DAMAGE_INCREASE = 0.25;\r\n//Tip maximum stacks\r\nexport const TIP_MAX_STACKS = 3;\r\n/** Alpha Predator */\r\n//The damage increase from Alpha Predator\r\nexport const ALPHA_DAMAGE_KC_MODIFIER = 0.3;\r\n/** Bloodseeker */\r\n//Attack speed gain per bleeding enemy from Bloodseeker\r\nexport const BLOODSEEKER_ATTACK_SPEED_GAIN = 0.1;\r\n/** Hydra's Bite */\r\n//Hydra's Bite DOT damage increase\r\nexport const HYDRAS_BITE_DOT_MODIFIER = 0.2;\r\n//endregion\r\n\r\n//region Resources\r\nexport const LIST_OF_FOCUS_SPENDERS_SV = [\r\n  SPELLS.BUTCHERY_TALENT,\r\n  SPELLS.CARVE,\r\n  SPELLS.WING_CLIP,\r\n  SPELLS.CHAKRAMS_TALENT,\r\n  SPELLS.SERPENT_STING_SV,\r\n  ...RAPTOR_MONGOOSE_VARIANTS,\r\n];\r\nexport const BASE_FOCUS_REGEN_SV = 5;\r\nexport const BASE_MAX_FOCUS_SV = 100;\r\n//endregion\r\n\r\n//region Conduits\r\n/** Deadly Tandem */\r\n//Deadly Tandem increases the duration of Coordinated Assault by a flat amount\r\nexport const DEADLY_TANDEM_CA_DURATION_INCREASE = [0, 1000, 1500, 2000, 2500, 3000, 3500, 4000, 4500, 5000, 5500, 6000, 6500, 7000, 7500, 8000];\r\n/** Flame Infusion */\r\n//Flame infusion increases the damage of the next Wildfire Bomb (or WFI equivalent) by x%\r\nexport const FLAME_INFUSION_WFB_DAMAGE_INCREASE = [0, 0.1, 0.11, 0.12, 0.13, 0.14, 0.15, 0.16, 0.17, 0.18, 0.19, 0.2, 0.21, 0.22, 0.23, 0.24, 0.25];\r\n//Flame Infusion can stack twice\r\nexport const FLAME_INFUSION_MAX_STACKS = 2;\r\n/** Stinging Strike */\r\n//Stinging Strike increases the damage of Mongoose Bite / Raptor Strike by a flat amount\r\nexport const STINGING_STRIKE_RS_MB_DMG_INCREASE = [0, 0.14, 0.16, 0.17, 0.19, 0.20, 0.22, 0.23, 0.25, 0.26, 0.28, 0.29, 0.31, 0.32, 0.34, 0.35];\r\n/** Strength of the Pack */\r\n//Strength of the Pack increases all damage done by a % for its duration\r\nexport const STRENGTH_OF_THE_PACK_DAMAGE_MODIFIER = [0, 0.03, 0.04, 0.04, 0.05, 0.05, 0.06, 0.06, 0.07, 0.07, 0.08, 0.08, 0.09, 0.09, 0.1, 0.1];\r\n//endregion\r\n","import SPELLS from 'common/SPELLS';\r\n\r\n//region Spells\r\n/** Barbed Shot */\r\n//max stacks your pet can have of the Frenzy buff\r\nexport const MAX_FRENZY_STACKS = 3;\r\n//Frenzy lasts 8 seconds normally, but can be adjusted by some effects\r\nexport const ORIGINAL_FRENZY_DURATION = 8000;\r\n/** Cobra Shot */\r\n//Cobra Shot reduces the cooldown of Kill Command by 1 second by default\r\nexport const COBRA_SHOT_CDR_MS = 1000;\r\n//A threshold where you can never realistically overcap on focus by waiting for AT MOST 1 GCD + 1 second.\r\nexport const COBRA_SHOT_FOCUS_THRESHOLD_TO_WAIT = 50;\r\n/** Kill Command */\r\n//Kill Command costs 30 focus for Beast Mastery hunters\r\nexport const KILL_COMMAND_BM_FOCUS_COST = 30;\r\n/** Bestial Wrath */\r\n//Bestial Wrath\r\nexport const BARBED_SHOT_BESTIAL_WRATH_CDR_MS = 12000;\r\nexport const BESTIAL_WRATH_BASE_CD = 90000;\r\n/** Aspect of the Wild */\r\n//Aspect of the Wild reduces the GCD of certain abilities\r\nexport const AOTW_GCD_REDUCTION_AFFECTED_ABILITIES = [\r\n  SPELLS.KILL_COMMAND_CAST_BM.id,\r\n  SPELLS.COBRA_SHOT.id,\r\n  SPELLS.BESTIAL_WRATH.id,\r\n  SPELLS.MULTISHOT_BM.id,\r\n  SPELLS.BARBED_SHOT.id,\r\n  SPELLS.ASPECT_OF_THE_WILD.id,\r\n  SPELLS.CALL_PET_1.id,\r\n  SPELLS.CALL_PET_2.id,\r\n  SPELLS.CALL_PET_3.id,\r\n  SPELLS.CALL_PET_4.id,\r\n  SPELLS.CALL_PET_5.id,\r\n  SPELLS.INTIMIDATION.id,\r\n  SPELLS.FREEZING_TRAP.id,\r\n  SPELLS.TAR_TRAP.id,\r\n  SPELLS.HUNTERS_MARK.id,\r\n  SPELLS.ARCANE_SHOT.id,\r\n  SPELLS.EXHILARATION.id,\r\n  SPELLS.FLARE.id,\r\n  SPELLS.BLOODSHED_TALENT.id,\r\n  SPELLS.DIRE_BEAST_TALENT.id,\r\n  SPELLS.SPITTING_COBRA_TALENT.id,\r\n  SPELLS.BARRAGE_TALENT.id,\r\n  SPELLS.STAMPEDE_TALENT.id,\r\n  SPELLS.CHIMAERA_SHOT_BM_TALENT.id,\r\n  SPELLS.A_MURDER_OF_CROWS_TALENT.id,\r\n  SPELLS.WILD_SPIRITS.id,\r\n  SPELLS.FLAYED_SHOT.id,\r\n  SPELLS.RESONATING_ARROW.id,\r\n  SPELLS.DEATH_CHAKRAM_INITIAL_AND_AOE.id,\r\n];\r\n//Aspect of the Wild gives 5 focus per second\r\nexport const ASPECT_OF_THE_WILD_FOCUS = 5;\r\n//endregion\r\n\r\n//region Talents\r\n/** Bloodshed */\r\n//Bloodshed increases the damage done by pets by 15%\r\nexport const BLOODSHED_DAMAGE_AMP = 0.15;\r\n/** Scent of Blood */\r\n//Scent of Blood recharges 2 barbed shot charges when you activate Bestial Wrath\r\nexport const SCENT_OF_BLOOD_BARBED_SHOT_RECHARGE = 2;\r\n/** Aspect of the Beast */\r\n//Aspect of the Beast increase pet damage and healing done by 30%\r\nexport const AOTB_MULTIPLIER = 0.3;\r\n//Aspect of the Beast does not affect all pet abilities\r\nexport const AOTB_ABILITIES_NOT_AFFECTED: number[] = [\r\n  SPELLS.MELEE.id,\r\n  SPELLS.KILL_COMMAND_DAMAGE_BM.id,\r\n  SPELLS.STOMP_DAMAGE.id,\r\n];\r\n/** Killer Instinct */\r\n//Killer Instinct is a execution like talent that activates at target hp sub 35%\r\nexport const KILLER_INSTINCT_THRESHOLD = 0.35;\r\n//When Killer Instinct is active Kill Command does 50% more damage\r\nexport const KILLER_INSTINCT_MULTIPLIER = 0.5;\r\n/** Wild Call */\r\n//Wild Call has a 20% chance to reset Barbed Shot cooldown on critical auto attacks\r\nexport const WILD_CALL_RESET_PERCENT = 0.2;\r\n/** Spitting Cobra */\r\n//Spitting Cobra has its damage increased by 10% for every Cobra Shot during Bestial Wrath\r\nexport const SPITTING_COBRA_DAMAGE_INCREASE = 0.1;\r\n/** Stampede */\r\n// The potential amount of hits per target per stampede cast.\r\n// By checking through various Zek'voz logs, it seems to consistently hit the boss 18 times, except if the boss was moved.\r\n// By using this number, we can calculate the average amount of targets hit per cast.\r\nexport const STAMPEDE_POTENTIAL_HITS = 18;\r\n/** Stomp */\r\n//If you have Animal Companion, Stomp will hit twice per cast - so we need to be aware of that\r\nexport const AMOUNT_OF_PETS_WITH_AC = 2;\r\n/** Thrill of the Hunt */\r\n//Thrill of the Hunt can stack up to 3 times\r\nexport const MAX_THRILL_STACKS = 3;\r\n//Each stack of Thrill of the Hunt gives 3% crit\r\nexport const CRIT_PER_THRILL_STACK = 0.03;\r\n//endregion\r\n\r\n//region Pets\r\n/** Pet Basic Attacks */\r\n//There are three different Basic Attacks for Pets\r\nexport const BASIC_ATTACK_SPELLS = [SPELLS.BITE_BASIC_ATTACK, SPELLS.CLAW_BASIC_ATTACK, SPELLS.SMACK_BASIC_ATTACK];\r\n//The actual current delay without macros is ~300ms on top of the 3 second cooldown, but adding 100 ms to act as a buffer.\r\nexport const MAX_TIME_BETWEEN_BASIC_ATK = 3400;\r\n//The delay is reduced to ~100-200ms depending on latency when you macro the abilities\r\nexport const MACRO_TIME_BETWEEN_BASIC_ATK = 3150;\r\n//This is what the optimal scenario would look like, if pet cast it instantly after it came off cooldown\r\nexport const NO_DELAY_TIME_BETWEEN_BASIC_ATK = 3000;\r\n//endregion\r\n\r\n//region Resources\r\n/** Focus */\r\n//Beast Mastery has 10 focus/second as baseline regen\r\nexport const BEAST_MASTERY_FOCUS_REGEN = 10;\r\n//Beast Mastery has 120 focus at start\r\nexport const BEAST_MASTERY_FOCUS_MAX = 120;\r\n//Minor threshold for focus wastage on focus generators\r\nexport const FOCUS_THRESHOLD_MINOR = 0.025;\r\n//Average threshold for focus wastage on focus generators\r\nexport const FOCUS_THRESHOLD_AVG = 0.05;\r\n//Major threshold for focus wastage on focus generators\r\nexport const FOCUS_THRESHOLD_MAJOR = 0.1;\r\n//The 8 focus regen buffs connected to Barbed Shot\r\nexport const BARBED_SHOT_FOCUS_REGEN_BUFFS = [\r\n  SPELLS.BARBED_SHOT_BUFF,\r\n  SPELLS.BARBED_SHOT_BUFF_2,\r\n  SPELLS.BARBED_SHOT_BUFF_3,\r\n  SPELLS.BARBED_SHOT_BUFF_4,\r\n  SPELLS.BARBED_SHOT_BUFF_5,\r\n  SPELLS.BARBED_SHOT_BUFF_6,\r\n  SPELLS.BARBED_SHOT_BUFF_7,\r\n  SPELLS.BARBED_SHOT_BUFF_8,\r\n];\r\n\r\nexport const BARBED_SHOT_FOCUS_REGEN_BUFFS_IDS = [\r\n  SPELLS.BARBED_SHOT_BUFF.id,\r\n  SPELLS.BARBED_SHOT_BUFF_2.id,\r\n  SPELLS.BARBED_SHOT_BUFF_3.id,\r\n  SPELLS.BARBED_SHOT_BUFF_4.id,\r\n  SPELLS.BARBED_SHOT_BUFF_5.id,\r\n  SPELLS.BARBED_SHOT_BUFF_6.id,\r\n  SPELLS.BARBED_SHOT_BUFF_7.id,\r\n  SPELLS.BARBED_SHOT_BUFF_8.id,\r\n];\r\n//Some energize spells don't have waste attached to their events\r\nexport const BEAST_MASTERY_SPELLS_WITHOUT_WASTE = [\r\n  SPELLS.ASPECT_OF_THE_WILD.id,\r\n  SPELLS.CHIMAERA_SHOT_FOCUS.id,\r\n  ...BARBED_SHOT_FOCUS_REGEN_BUFFS_IDS,\r\n];\r\n//Barbed Shot regenerates 5 focus per tick\r\nexport const BARBED_SHOT_REGEN = 5;\r\n//Aspect of the Wild regenerates 5 focus per tick\r\nexport const AOTW_REGEN = 5;\r\n//Chimaera Shot regenerates 10 focus per hit for BM hunters\r\nexport const CHIM_REGEN = 10;\r\n/** Focus Spenders specific to BM */\r\nexport const LIST_OF_FOCUS_SPENDERS_BM = [\r\n  SPELLS.COBRA_SHOT,\r\n  SPELLS.MULTISHOT_BM,\r\n  SPELLS.KILL_COMMAND_CAST_BM,\r\n  SPELLS.DIRE_BEAST_TALENT,\r\n];\r\n//endregion\r\n\r\n//region Conduits\r\n/** Ferocious Appetite */\r\n//Ferocious Appetite causes Kill Command crits to reduce the cooldown of Aspect of the Wild with X seconds.\r\nexport const FEROCIOUS_APPETITE_ASPECT_REDUCTION = [0, 1000, 1100, 1200, 1300, 1400, 1500, 1600, 1700, 1800, 1900, 2000, 2100, 2200, 2300, 2400];\r\n/** One With the Beast */\r\n//One With the Beast increases all damage done during Bestial Wrath\r\nexport const ONE_WITH_THE_BEAST_DAMAGE_INCREASE = [0, 0.01, 0.02, 0.03, 0.04, 0.05, 0.06, 0.07, 0.08, 0.09, 0.10, 0.11, 0.12, 0.13, 0.14, 0.15];\r\n/** Bloodletting */\r\n//Bloodletting reduces the recharge time of Barbed Shot by 1 second\r\nexport const BLOODLETTING_BARBED_SHOT_RECHARGE_REDUCTION = 1000;\r\n//Bloodletting increases the damage done by x%\r\nexport const BLOODLETTING_BARBED_DOT_INCREASE = [0, 0.1, 0.11, 0.12, 0.13, 0.14, 0.15, 0.16, 0.18, 0.19, 0.2, 0.21, 0.22, 0.23, 0.24, 0.25];\r\n/** Echoing Call */\r\n//Wild Call has a % increase chance to reset the cooldown of Barbed Shot\r\nexport const ECHOING_CALL_INCREASED_WILD_CALL_CHANCE = [0, 0.05, 0.06, 0.06, 0.07, 0.07, 0.08, 0.08, 0.09, 0.09, 0.1, 0.1, 0.11, 0.11, 0.12, 0.12];\r\n//endregion\r\n\r\n//region Legendaries\r\n/** Dire Command */\r\n//Dire Command has a 20% chance to summon a dire beast\r\nexport const DIRE_COMMAND_PROC_CHANCE = 0.2;\r\n/** Flamewaker's Cobra Sting */\r\n//Flamewaker's Cobra Sting has a 25% chance to reduce focus cost of next Kill Command by 100%\r\nexport const FLAMEWAKERS_PROC_CHANCE = 0.25;\r\n/** Qa'pla, Eredun War Order */\r\n//Qa'pla reduces the cooldown of Kill Command by 5 seconds everytime you cast Barbed Shot\r\nexport const QAPLA_KILL_COMMAND_REDUCTION_MS = 5000;\r\n/** Rylakstalker's Piercing Fangs */\r\n//Rylakstalker's Piercing Fang increases pet crit damage by 20% during Bestial Wrath\r\nexport const RYLAKSTALKERS_PIERCING_FANGS_CRIT_DMG_INCREASE = 0.20;\r\n//endregion\r\n","import React from 'react';\r\nimport PropTypes from 'prop-types';\r\nimport BaseChart from 'interface/others/BaseChart';\r\n\r\nimport { formatPercentage } from 'common/format';\r\nimport SpellLink from 'common/SpellLink';\r\nimport { TooltipElement } from 'common/Tooltip';\r\n\r\nimport './style.scss';\r\n\r\nclass DonutChart extends React.PureComponent {\r\n  static propTypes = {\r\n    items: PropTypes.arrayOf(PropTypes.shape({\r\n      value: PropTypes.number.isRequired,\r\n      label: PropTypes.node.isRequired,\r\n      color: PropTypes.string.isRequired,\r\n      tooltip: PropTypes.node,\r\n      spellId: PropTypes.number,\r\n      valueTooltip: PropTypes.node,\r\n    })).isRequired,\r\n    // While you could change the chart size, I strongly recommend you do not for consistency and to avoid breaking whenever this component is modified. Do you really need to adjust the size?\r\n    chartSize: PropTypes.number,\r\n    innerRadiusFactor: PropTypes.number,\r\n  };\r\n  static defaultProps = {\r\n    chartSize: 90,\r\n    innerRadiusFactor: 0.28,\r\n  };\r\n\r\n  renderLegend(items) {\r\n    const total = items.reduce((sum, item) => sum + item.value, 0);\r\n\r\n    return (\r\n      <div className=\"legend\">\r\n        {items.map(({ color, label, tooltip, value, spellId, valueTooltip }, index) => {\r\n          label = tooltip ? (\r\n            <TooltipElement content={tooltip}>{label}</TooltipElement>\r\n          ) : label;\r\n          label = spellId ? (\r\n            <SpellLink id={spellId}>{label}</SpellLink>\r\n          ) : label;\r\n          return (\r\n            <div key={index} className=\"flex\">\r\n              <div className=\"flex-sub\">\r\n                <div className=\"circle\" style={{ background: color }} />\r\n              </div>\r\n              <div className=\"flex-main\">\r\n                {label}\r\n              </div>\r\n              <div className=\"flex-sub\">\r\n                <TooltipElement content={valueTooltip ? valueTooltip : value}>\r\n                  {formatPercentage(value / total, 0)}%\r\n                </TooltipElement>\r\n              </div>\r\n            </div>\r\n          );\r\n        })}\r\n      </div>\r\n    );\r\n  }\r\n  renderChart(items, chartSize, innerRadiusFactor) {\r\n    const innerRadius = chartSize * innerRadiusFactor;\r\n\r\n    const data = {\r\n      items,\r\n    };\r\n    const spec = {\r\n      data: {\r\n        name: 'items',\r\n      },\r\n      mark: {\r\n        type: 'arc',\r\n        innerRadius,\r\n      },\r\n      encoding: {\r\n        theta: {\r\n          field: 'value',\r\n          type: 'quantitative',\r\n        },\r\n        color: {\r\n          field: 'label',\r\n          type: 'nominal',\r\n          legend: null,\r\n          scale: {\r\n            domain: items.map(({label}) => label),\r\n            range: items.map(({color}) => color),\r\n          },\r\n        },\r\n      },\r\n      view: {\r\n        stroke: null,\r\n      },\r\n    };\r\n    return (\r\n      <div className=\"chart\">\r\n        <BaseChart\r\n          width={chartSize}\r\n          height={chartSize}\r\n          spec={spec}\r\n          data={data}\r\n        />\r\n      </div>\r\n    );\r\n  }\r\n  render() {\r\n    const { items, chartSize, innerRadiusFactor } = this.props;\r\n\r\n    return (\r\n      <div className=\"donut-chart\">\r\n        {this.renderLegend(items)}\r\n        {this.renderChart(items, chartSize, innerRadiusFactor)}\r\n      </div>\r\n    );\r\n  }\r\n}\r\n\r\nexport default DonutChart;\r\n","import React from 'react';\r\nimport PropTypes from 'prop-types';\r\nimport { AutoSizer } from 'react-virtualized';\r\nimport BaseChart from 'interface/others/BaseChart';\r\n\r\nclass OneVariableBinomialChart extends React.Component {\r\n  static propTypes = {\r\n    probabilities: PropTypes.arrayOf(\r\n      PropTypes.shape({\r\n        x: PropTypes.number.isRequired,\r\n        y: PropTypes.number.isRequired,\r\n      }),\r\n    ).isRequired,\r\n    actualEvent: PropTypes.shape({\r\n      x: PropTypes.number.isRequired,\r\n      y: PropTypes.number.isRequired,\r\n    }).isRequired,\r\n    xAxis: PropTypes.shape({\r\n      title: PropTypes.string.isRequired,\r\n      tickFormat: PropTypes.string.isRequired,\r\n    }).isRequired,\r\n    yAxis: PropTypes.shape({\r\n      title: PropTypes.string.isRequired,\r\n    }),\r\n    yDomain: PropTypes.arrayOf(PropTypes.number),\r\n    tooltip: PropTypes.string.isRequired,\r\n  };\r\n\r\n  state = {\r\n    hover: null,\r\n  };\r\n\r\n  render() {\r\n    const {\r\n      probabilities,\r\n      actualEvent,\r\n      xAxis,\r\n      yAxis,\r\n      yDomain,\r\n      tooltip,\r\n    } = this.props;\r\n\r\n    const data = {\r\n      probabilities,\r\n      actual: actualEvent,\r\n    };\r\n\r\n    const spec = {\r\n      encoding: {\r\n        x: {\r\n          field: 'x',\r\n          type: 'quantitative',\r\n          title: xAxis.title,\r\n          axis: {\r\n            grid: false,\r\n            format: xAxis.tickFormat,\r\n          },\r\n        },\r\n        y: {\r\n          field: 'y',\r\n          type: 'quantitative',\r\n          title: yAxis.title,\r\n          axis: {\r\n            grid: false,\r\n            format: '.0%',\r\n          },\r\n          scale: {\r\n            domain: yDomain,\r\n          },\r\n        },\r\n      },\r\n      layer: [\r\n        {\r\n          data: {\r\n            name: 'probabilities',\r\n          },\r\n          mark: {\r\n            type: 'area',\r\n            color: 'rgba(250, 183, 0, 0.15)',\r\n            line: {\r\n              color: '#fab700',\r\n              strokeWidth: 1,\r\n            },\r\n          },\r\n        },\r\n        {\r\n          data: {\r\n            name: 'actual',\r\n          },\r\n          mark: {\r\n            type: 'point',\r\n            filled: true,\r\n            color: '#00ff96',\r\n            size: 60,\r\n          },\r\n          encoding: {\r\n            tooltip: [\r\n              { field: 'x', title: tooltip },\r\n            ],\r\n          },\r\n        },\r\n      ],\r\n    };\r\n\r\n\r\n    return (\r\n      <AutoSizer disableHeight>\r\n        {({width}) => (\r\n          <BaseChart\r\n            height={150}\r\n            width={width}\r\n            spec={spec}\r\n            data={data}\r\n          />\r\n        )}\r\n      </AutoSizer>\r\n    );\r\n  }\r\n}\r\n\r\nexport default OneVariableBinomialChart;\r\n","import OneVariableBinomialChart from 'interface/others/charts/OneVariableBinomialChart';\r\nimport React from 'react';\r\n\r\n/**\r\n * pn is the mean value of procs\r\n * @param procChance\r\n * @param procAttempts\r\n */\r\nexport function expectedProcCount(procChance: number, procAttempts: number) {\r\n  return procChance * procAttempts;\r\n}\r\n\r\n/**\r\n * Calculates the probability that out of n tries with probability p, we get exactly k positive outcomes\r\n * @param k {Number} Number of desired positive outcomes\r\n * @param n {Number} Number of tries\r\n * @param p {Number} Probability of positive outcome\r\n */\r\nexport function binomialPMF(k: number, n: number, p: number) {\r\n  return binomialDistribution(n, k) * Math.pow(p, k) * Math.pow(1 - p, n - k);\r\n}\r\n\r\n/**\r\n * Calculates the probability that out of n tries with probability p, we get k or less positive outcomes\r\n * @param k {Number} Number of desired positive outcomes\r\n * @param n {Number} Number of tries\r\n * @param p {Number} Probability of positive outcome\r\n */\r\nexport function binomialCDF(k: number, n: number, p: number) {\r\n  let probability = 0;\r\n  for (let i = 0; i <= k; i += 1) {\r\n    probability += binomialPMF(i, n, p);\r\n  }\r\n  return probability;\r\n}\r\n\r\n/**\r\n * Finds the maximum of PMF of given distribution.\r\n * @param n {Number} Maximum number of tries for given event\r\n * @param {Function} pmf Callback that returns probability of exactly K events happening in N tries. Parameters - K, N\r\n * @returns {{ max: Number, p: Number }} Maximum of given PMF function - argument and probability itself\r\n */\r\nexport function findMax(n: number, pmf: (i: number, n: any) => any) {\r\n  let max = -1;\r\n  let maxP = 0;\r\n  for (let i = 0; i <= n; i += 1) {\r\n    const probability = pmf(i, n);\r\n    if (probability > maxP) {\r\n      max = i;\r\n      maxP = probability;\r\n    }\r\n  }\r\n  return {\r\n    max,\r\n    p: maxP,\r\n  };\r\n}\r\n\r\nfunction binomialDistribution(n: number, k: number) {\r\n  // n! / (k! * (n - k)!)\r\n  // factorials are awful, let's simplify a bit\r\n  // we know k < n:\r\n  // numerator: n! = 1 * 2 * ... * (n - k) * (n - k + 1) * (n - k + 2 ) * ... * n\r\n  // denominator: k! * (n - k)! = k! * 1 * 2 * ... * (n - k)\r\n  // cancelling out 1 * 2 * ... * (n - k) from both we get:\r\n  // (n - k + 1) * (n - k + 2) * ... n / k!\r\n  let numerator = 1;\r\n  let denominator = 1;\r\n  for (let i = n - k + 1; i <= n; i += 1) {\r\n    numerator *= i;\r\n  }\r\n  for (let i = 1; i <= k; i += 1) {\r\n    denominator *= i;\r\n  }\r\n  return numerator / denominator;\r\n}\r\n\r\nfunction resetProbabilityArray(actualProcs: number, procAttempts: number, procChance: number | number[]) {\r\n  const procProbabilities: Array<{ x: number; y: number; }> = Array.from({ length: procAttempts }, (_x, i: number) => {\r\n    if (typeof procChance === 'number') {\r\n      return { x: i, y: binomialPMF(i, procAttempts, procChance) };\r\n    } else {\r\n      return { x: i, y: poissonBinomialPMF(i, procAttempts, procChance) };\r\n    }\r\n  });\r\n\r\n  return procProbabilities;\r\n}\r\n\r\nfunction setMinMaxProbabilities(actualProcs: number, procAttempts: number, procChance: number | number[], threshold: number = 0.001) {\r\n  const procProbabilities = resetProbabilityArray(actualProcs, procAttempts, procChance);\r\n  const rangeMin = procProbabilities.findIndex(({ y }) => y >= threshold);\r\n  const rangeMax = rangeMin + procProbabilities.slice(rangeMin).findIndex(({ y }) => y < threshold);\r\n\r\n  return {\r\n    procProbabilities,\r\n    rangeMin,\r\n    rangeMax,\r\n  };\r\n}\r\n\r\n/**\r\n * Recursive formula for calculating the PMF (probability mass function) of Poisson's Binomial Distribution\r\n * @param k {Number} Number of desired positive outcomes\r\n * @param j {Number} Number of total tries\r\n * @param p {[Number]} Probability vector\r\n * @param lookup {Array} Lookup table\r\n * @returns {Number} Probability\r\n */\r\nfunction Ekj(k: number, j: number, p: number[], lookup: any[][]) {\r\n  if (k === -1) {\r\n    return 0;\r\n  }\r\n  if (k === j + 1) {\r\n    return 0;\r\n  }\r\n  if (k === 0 && j === 0) {\r\n    return 1;\r\n  }\r\n  if (lookup[k][j] !== null) {\r\n    return lookup[k][j];\r\n  }\r\n  // literature uses 1-based indices for probabilities, as we're using an array, we have to use 0 based\r\n  const value: number = (1 - p[j - 1]) * Ekj(k, j - 1, p, lookup) + p[j - 1] * Ekj(k - 1, j - 1, p, lookup);\r\n  lookup[k][j] = value;\r\n  return value;\r\n}\r\n\r\n// Poisson's Binomial Distribution\r\n// Methods based on Wikipedia page and this research paper:\r\n// https://www.researchgate.net/publication/257017356_On_computing_the_distribution_function_for_the_Poisson_binomial_distribution\r\n\r\n/**\r\n * Calculates the probability that out of n tries with p probabilities, we get exactly k positive outcomes\r\n * @param k {Number} Number of desired positive outcomes\r\n * @param n {Number} Number of total tries\r\n * @param p {[Number]} Probability vector\r\n */\r\nexport function poissonBinomialPMF(k: number, n: number, p: any[]) {\r\n  // denoted in the paper as ξk, I'll call it Ek for simplicity\r\n  // using the recursive formula in chapter 2.5\r\n  if (p.length !== n) {\r\n    throw new Error('You must supply a probability vector with the same length as the number of total tries into Poisson Binomial PMF');\r\n  }\r\n  // Using a lookup table to simplify recursion a little bit\r\n  // construct an (n+1) x (n+1) lookup table (because Ek,j uses indexes from 0 to n INCLUSIVE, with this we don't have to subtract indexes all the time)\r\n  // intentionally set tu nulls so we know which values are computed or not\r\n  const lookup = [...Array(n + 1)].map(_ => Array(n + 1).fill(null));\r\n  return Ekj(k, n, p, lookup);\r\n}\r\n\r\n/**\r\n * Calculates the probability that out of n tries with p probabilities, we get less than or equal k positive outcomes\r\n * @param k {Number} Number of desired positive outcomes\r\n * @param n {Number} Number of total tries\r\n * @param p {[Number]} Probability vector\r\n */\r\nexport function poissonBinomialCDF(k: number, n: number, p: number[]) {\r\n  // While technically equal to summing Ei from i = 0 to k, since we use recursion, a better solution is a lookup table\r\n  if (p.length !== n) {\r\n    throw new Error('You must supply a probability vector with the same length as the number of total tries into Poisson Binomial CDF');\r\n  }\r\n  // see comments in poissonBinomialPMF\r\n  const lookup = [...Array(n + 1)].map(_ => Array(n + 1).fill(null));\r\n  let probability = 0;\r\n  // since Ekj uses the values from \"previous row\" (Ekj(k - 1, j - 1, ...)), it's better to iterate from 0\r\n  // this way, it produces the least necessary amount of calculations with the lookup table (only the Ekj(k, j - 1) parts)\r\n  for (let i = 0; i <= k; i += 1) {\r\n    probability += Ekj(i, n, p, lookup);\r\n  }\r\n  return probability;\r\n}\r\n\r\nexport function plotOneVariableBinomChart(\r\n  actualProcs: number,\r\n  procAttempts: number,\r\n  procChance: number | number[],\r\n  trackedName: string = 'Procs',\r\n  tooltipText: string = trackedName,\r\n  yDomain: number[] = [0, 0.4],\r\n  xAxis: any = {\r\n    title: trackedName,\r\n    tickFormat: '~k',\r\n  },\r\n  yAxis: any = {\r\n    title: 'Likelihood',\r\n  },\r\n) {\r\n\r\n  const { procProbabilities, rangeMin, rangeMax } = setMinMaxProbabilities(actualProcs, procAttempts, procChance);\r\n  const actualEventY = typeof procChance === 'number' ? binomialPMF(actualProcs, procAttempts, procChance) : poissonBinomialPMF(actualProcs, procAttempts, procChance);\r\n  return (\r\n    <OneVariableBinomialChart\r\n      probabilities={procProbabilities.slice(rangeMin, rangeMax + 1)}\r\n      actualEvent={{ x: actualProcs, y: actualEventY }}\r\n      yDomain={yDomain}\r\n      xAxis={xAxis}\r\n      yAxis={yAxis}\r\n      tooltip={tooltipText}\r\n    />\r\n  );\r\n}\r\n","import Events, { ApplyBuffEvent, DamageEvent, FightEndEvent, RemoveBuffEvent } from 'parser/core/Events';\r\nimport Analyzer, { Options } from 'parser/core/Analyzer';\r\nimport { formatDuration } from 'common/format';\r\nimport calculateEffectiveDamage from 'parser/core/calculateEffectiveDamage';\r\nimport Spell from 'common/SPELLS/Spell';\r\nimport SpellUsable from 'parser/shared/modules/SpellUsable';\r\n\r\nconst debug = false;\r\n\r\nconst MS_BUFFER = 500;\r\n\r\nclass ExecuteHelper extends Analyzer {\r\n  static dependencies = {\r\n    spellUsable: SpellUsable,\r\n  };\r\n\r\n  protected spellUsable!: SpellUsable;\r\n\r\n  //region IMPLEMENTME statics\r\n  /**\r\n   * Array of objects from common/SPELLS\r\n   * This should contain any execute spells such as Kill Shot, Execute etc.\r\n   */\r\n  static executeSpells: Spell[] = [];\r\n\r\n  /**\r\n   * SELECTED_PLAYER or SELECTED_PLAYER_PET for usage in the eventfilter\r\n   */\r\n  static executeSources: number;\r\n\r\n  /**\r\n   * Array of objects from common/SPELLS\r\n   * This should contain any SPELLS object that allows execute to be used outside normal execute range\r\n   */\r\n  static executeOutsideRangeEnablers: Spell[] = [];\r\n\r\n  /**\r\n   * The lower threshold where execute is enabled, shown in decimals.\r\n   */\r\n  static lowerThreshold: number;\r\n\r\n  /**\r\n   * The upper threshold where an execute can be enabled immediately at a pull, shown in decimals.\r\n   */\r\n  static upperThreshold: number;\r\n\r\n  /**\r\n   * A boolean representing if the given execute modifies the damage of an existing spell.\r\n   * An execute spell should be labelled as false, whereas a talent that modifies an existing spell should be labelled as true.\r\n   */\r\n  static modifiesDamage: boolean;\r\n\r\n  /**\r\n   * represents the modifier of of a talent (or some other effect) that modifies the damage done by an existing spell\r\n   */\r\n  static damageModifier: number;\r\n  //endregion\r\n\r\n  //region Generic Variables\r\n  /**\r\n   * Is true if we're in an execute window either because of a buff giving access to execute spells or because of health windows\r\n   */\r\n  inExecuteWindow: boolean = false;\r\n\r\n  /**\r\n   * Is true if we're in an execute window due to health on a target, so a buff granting access to execute is pointless at this point\r\n   */\r\n  inHealthExecuteWindow: boolean = false;\r\n\r\n  /**\r\n   * A variable marking the timestamp of the start of the current execute window\r\n   */\r\n  executeWindowStart: number = 0;\r\n\r\n  /**\r\n   * A variable marking the timestamp of the last damage event within the execute window\r\n   */\r\n  lastExecuteHitTimestamp: number = 0;\r\n\r\n  /**\r\n   * The amount of time spent inside executewindows, either caused by health or by buffs giving access to execute\r\n   */\r\n  totalExecuteWindowDuration: number = 0;\r\n\r\n  /**\r\n   * Amount of damage done by the spells defined in executeSpells\r\n   */\r\n  damage: number = 0;\r\n\r\n  /**\r\n   * returns the total amount of casts of the executes listed in executeSpells\r\n   */\r\n  casts: number = 0;\r\n\r\n  /**\r\n   * returns the amount of casts of the executes listed in executeSpells that were cast whilst being in an execute window\r\n   */\r\n  castsWithExecute: number = 0;\r\n  //endregion\r\n\r\n  //region Execute helpers\r\n  /**\r\n   * Returns true if the event has less HP than the threshold.\r\n   * This is useful for any generic execute.\r\n   * @param event\r\n   */\r\n  isTargetInExecuteRange(event: DamageEvent) {\r\n    if (!event.hitPoints || !event.maxHitPoints) {\r\n      return false;\r\n    }\r\n    return (event.hitPoints / event.maxHitPoints) < this.lowerThreshold;\r\n  }\r\n\r\n  /**\r\n   * Returns true if the event has more HP than the threshold.\r\n   * This is useful for things like Firestarter and Flashpoint.\r\n   * @param event\r\n   */\r\n  isTargetInReverseExecuteRange(event: DamageEvent) {\r\n    if (!event.hitPoints || !event.maxHitPoints) {\r\n      return false;\r\n    }\r\n    return (event.hitPoints / event.maxHitPoints) > this.upperThreshold;\r\n  }\r\n\r\n  /**\r\n   * Returns true if either isTargetInExecuteRange() or isTargetInReverseExecuteRange() is true.\r\n   * @param event\r\n   */\r\n  isTargetInHealthExecuteWindow(event: DamageEvent) {\r\n    if (!event.hitPoints || !event.maxHitPoints) {\r\n      return false;\r\n    }\r\n    return (this.isTargetInExecuteRange(event) || this.isTargetInReverseExecuteRange(event));\r\n  }\r\n\r\n  /**\r\n   * Returns true if the combatant has one of the buffs that enable execute to be used outside of the regular execute windows\r\n   */\r\n  get isExecuteUsableOutsideExecuteRange() {\r\n    let usable: boolean = false;\r\n    this.executeOutsideRangeEnablers.forEach(spell => {\r\n      if (this.selectedCombatant.hasBuff(spell.id)) {\r\n        usable = true;\r\n      }\r\n    });\r\n    return usable;\r\n  }\r\n\r\n  /**\r\n   * If all execute spells are on cooldown, then we should count the entire period of cooldown as \"inside execute\" to properly calculate maxCasts\r\n   */\r\n  get areExecuteSpellsOnCD() {\r\n    let allOnCD: boolean = true;\r\n    this.executeSpells.forEach(spell => {\r\n      if (!this.spellUsable.isOnCooldown(spell.id)) {\r\n        allOnCD = false;\r\n      }\r\n    });\r\n    return allOnCD;\r\n  }\r\n\r\n  //endregion\r\n\r\n  constructor(options: Options) {\r\n    super(options);\r\n    this.addEventListener(Events.damage.by(this.executeSources), this.onGeneralDamage);\r\n    this.addEventListener(Events.cast.by(this.executeSources).spell(this.executeSpells), this.onExecuteCast);\r\n    this.addEventListener(Events.damage.by(this.executeSources).spell(this.executeSpells), this.onExecuteDamage);\r\n    this.addEventListener(Events.applybuff.to(this.executeSources).spell(this.executeOutsideRangeEnablers), this.applyExecuteEnablerBuff);\r\n    this.addEventListener(Events.removebuff.to(this.executeSources).spell(this.executeOutsideRangeEnablers), this.removeExecuteEnablerBuff);\r\n    this.addEventListener(Events.fightend, this.onFightEnd);\r\n  }\r\n\r\n  //region Static Getters\r\n  get executeSources() {\r\n    const ctor = this.constructor as typeof ExecuteHelper;\r\n    return ctor.executeSources;\r\n  }\r\n\r\n  get executeSpells() {\r\n    const ctor = this.constructor as typeof ExecuteHelper;\r\n    return ctor.executeSpells;\r\n  }\r\n\r\n  get executeOutsideRangeEnablers() {\r\n    const ctor = this.constructor as typeof ExecuteHelper;\r\n    return ctor.executeOutsideRangeEnablers;\r\n  }\r\n\r\n  get lowerThreshold() {\r\n    const ctor = this.constructor as typeof ExecuteHelper;\r\n    return ctor.lowerThreshold;\r\n  }\r\n\r\n  get upperThreshold() {\r\n    const ctor = this.constructor as typeof ExecuteHelper;\r\n    return ctor.upperThreshold;\r\n  }\r\n\r\n  get modifiesDamage() {\r\n    const ctor = this.constructor as typeof ExecuteHelper;\r\n    return ctor.modifiesDamage;\r\n  }\r\n\r\n  get damageModifier() {\r\n    const ctor = this.constructor as typeof ExecuteHelper;\r\n    return ctor.damageModifier;\r\n  }\r\n\r\n  //endregion\r\n\r\n  //region Generic Getters\r\n  get executeDamage() {\r\n    return this.damage;\r\n  }\r\n\r\n  get totalExecuteDuration() {\r\n    return this.totalExecuteWindowDuration;\r\n  }\r\n\r\n  get totalCasts() {\r\n    return this.casts;\r\n  }\r\n\r\n  get totalExecuteCasts() {\r\n    return this.castsWithExecute;\r\n  }\r\n\r\n  //endregion\r\n\r\n  //region Event Listener functions\r\n  onGeneralDamage(event: DamageEvent) {\r\n    if (event.targetIsFriendly) {\r\n      return;\r\n    }\r\n    if (this.areExecuteSpellsOnCD || this.isExecuteUsableOutsideExecuteRange || this.isTargetInHealthExecuteWindow(event)) {\r\n      this.lastExecuteHitTimestamp = event.timestamp;\r\n      if (!this.inExecuteWindow) {\r\n        this.inExecuteWindow = true;\r\n        this.inHealthExecuteWindow = true;\r\n        this.executeWindowStart = event.timestamp;\r\n        debug && console.log('Execute window started');\r\n      }\r\n    } else {\r\n      if (this.inExecuteWindow && event.timestamp > this.lastExecuteHitTimestamp + MS_BUFFER) {\r\n        this.inExecuteWindow = false;\r\n        this.inHealthExecuteWindow = false;\r\n        this.totalExecuteWindowDuration += event.timestamp - this.executeWindowStart;\r\n        debug && console.log('Execute window ended, current total: ', this.totalExecuteDuration);\r\n      }\r\n    }\r\n  }\r\n\r\n  onExecuteCast() {\r\n    this.casts += 1;\r\n    if (this.inExecuteWindow || this.inHealthExecuteWindow) {\r\n      this.castsWithExecute += 1;\r\n    }\r\n  }\r\n\r\n  onExecuteDamage(event: DamageEvent) {\r\n    if (this.inExecuteWindow || this.inHealthExecuteWindow) {\r\n      if (this.modifiesDamage) {\r\n        this.damage += calculateEffectiveDamage(event, this.damageModifier);\r\n      } else {\r\n        this.damage += event.amount + (event.absorbed || 0);\r\n      }\r\n    }\r\n  }\r\n\r\n  applyExecuteEnablerBuff(event: ApplyBuffEvent) {\r\n    if (!this.inExecuteWindow && !this.inHealthExecuteWindow) {\r\n      this.executeWindowStart = event.timestamp;\r\n    }\r\n    this.inExecuteWindow = true;\r\n    this.lastExecuteHitTimestamp = event.timestamp;\r\n    debug && console.log(event.ability.name, ' was applied starting the execute window');\r\n  }\r\n\r\n  removeExecuteEnablerBuff(event: RemoveBuffEvent) {\r\n    if (!this.inHealthExecuteWindow) {\r\n      this.inExecuteWindow = false;\r\n      this.totalExecuteWindowDuration += event.timestamp - this.executeWindowStart;\r\n      debug && console.log(event.ability.name, ' was removed ending the execute window, current total: ', this.totalExecuteDuration);\r\n    } else {\r\n      debug && console.log('Execute enabler buff ended, but inside execute health window so window still ongoing.');\r\n    }\r\n  }\r\n\r\n  onFightEnd(event: FightEndEvent) {\r\n    if (this.inExecuteWindow) {\r\n      this.totalExecuteWindowDuration += event.timestamp - this.executeWindowStart;\r\n      this.inExecuteWindow = false;\r\n    }\r\n    debug && console.log('Fight ended, total duration of execute: ' + this.totalExecuteDuration + ' | ' + formatDuration(this.totalExecuteDuration));\r\n  }\r\n\r\n  //endregion\r\n}\r\n\r\nexport default ExecuteHelper;\r\n","import React from 'react';\r\nimport PropTypes from 'prop-types';\r\n\r\nconst AverageTargetsHit = props => {\r\n  const { casts, hits, unique, approximate } = props;\r\n  const averageHits = (hits / casts) || 0;\r\n  return (\r\n    <>\r\n      {approximate && '≈'}{averageHits.toFixed(1)} <small> {unique ? 'unique targets hit' : 'average'} {unique ? '' : averageHits === 1 ? 'hit' : 'hits'} per cast</small>\r\n    </>\r\n  );\r\n};\r\n\r\nAverageTargetsHit.propTypes = {\r\n  casts: PropTypes.number.isRequired,\r\n  hits: PropTypes.number.isRequired,\r\n  unique: PropTypes.bool,\r\n  approximate: PropTypes.bool,\r\n};\r\n\r\nexport default AverageTargetsHit;\r\n\r\nAverageTargetsHit.defaultProps = {\r\n  approximate: false,\r\n  unique: false,\r\n};\r\n\r\n","import React from 'react';\r\nimport { formatPercentage } from 'common/format';\r\nimport SpellLink from 'common/SpellLink';\r\nimport { i18n } from '@lingui/core';\r\nimport { t } from '@lingui/macro';\r\n\r\nimport Spell from 'common/SPELLS/Spell';\r\n\r\nimport { When } from 'parser/core/ParseResults';\r\n\r\nimport ResourceTracker from './ResourceTracker';\r\n\r\ninterface Suggestion {\r\n  spell: Spell | any;\r\n  minor: number;\r\n  avg: number;\r\n  major: number;\r\n  extraSuggestion?: string | JSX.Element;\r\n}\r\n\r\nfunction suggest(when: When, tracker: ResourceTracker, suggestion: Suggestion) {\r\n  let tracked = { generated: 0, wasted: 0, casts: 0 };\r\n  //If an array of spells is passed, we manipulate the data to aggregate all the generated and wasted resources as well as the individual focus instances into 1 spell so that it can be displayed.\r\n  if (Array.isArray(suggestion.spell)) {\r\n    let newSuggestionSpell: Spell = { id: -1, name: \"\", icon: \"\" };\r\n    for (const spell of suggestion.spell) {\r\n      if (!tracker.buildersObj[spell.id]) {\r\n        continue;\r\n      }\r\n      if (newSuggestionSpell.id === -1) {\r\n        newSuggestionSpell = spell;\r\n      }\r\n      tracked.generated += tracker.buildersObj[spell.id].generated;\r\n      tracked.wasted += tracker.buildersObj[spell.id].wasted;\r\n      tracked.casts += tracker.buildersObj[spell.id].casts;\r\n    }\r\n    suggestion.spell = newSuggestionSpell;\r\n  } else {\r\n    tracked = tracker.buildersObj[suggestion.spell.id];\r\n  }\r\n  if (!tracked) {\r\n    return;\r\n  }\r\n\r\n  const maxGenerated = tracked.generated + tracked.wasted;\r\n  const wastedShare = (tracked.wasted / maxGenerated) || 0;\r\n  const resourceNameLower = tracker.resource.name.toLowerCase();\r\n\r\n  when(wastedShare).isGreaterThan(suggestion.minor)\r\n    .addSuggestion((suggest) => suggest(\r\n        <>\r\n          You are wasting {resourceNameLower} generated by <SpellLink id={suggestion.spell.id} />. {suggestion.extraSuggestion}\r\n        </>,\r\n      )\r\n        .icon(suggestion.spell.icon)\r\n        .actual(i18n._(t('shared.suggestions.resources.wasted')`${formatPercentage(wastedShare)}% wasted. Generated ${tracked.generated} out of ${maxGenerated} possible ${resourceNameLower}`))\r\n        .recommended(`<${formatPercentage(suggestion.minor)}%  ${resourceNameLower} wasted is recommend`)\r\n        .regular(suggestion.avg).major(suggestion.major));\r\n}\r\n\r\nexport default suggest;\r\n","import Analyzer, { SELECTED_PLAYER } from 'parser/core/Analyzer';\r\nimport Haste from 'parser/shared/modules/Haste';\r\nimport EventEmitter from 'parser/core/modules/EventEmitter';\r\nimport SpellResourceCost from 'parser/shared/modules/SpellResourceCost';\r\nimport HIT_TYPES from 'game/HIT_TYPES';\r\nimport Events from 'parser/core/Events';\r\n\r\n// turn on debug to find if there's inaccuracies, then verboseDebug to help track the cause.\r\nconst debug = false;\r\nconst verboseDebug = false;\r\n\r\n/**\r\n * Tracks when a regenerating resource reaches its cap. Most useful for specs such as rogues\r\n * and feral druids where their energy resource quickly recharges through natural regeneration\r\n * and may frequently reach its cap during a fight.\r\n *\r\n * It is an 'abstract' class, so should be extended and provided with settings for the resource\r\n * being tracked by your spec. Search for \"IMPLEMENTME\" for what should be set up.\r\n *\r\n * Reductions in spell costs should be handled by implementing parser/core/Modules/SpellResourceCost\r\n * for the relevant resource.\r\n *\r\n * If your derived class shares event handlers remember to call the original, e.g.\r\n * onCast(event) {\r\n *  super.onCast(event);\r\n *  // stuff related to your spec's implementation\r\n * }\r\n *\r\n * Example derived class: parser/Druid/Feral/Modules/Features/EnergyCapTracker\r\n *\r\n * For a more complete picture of how a combatant is using their resources you may want to\r\n * also use parser/core/Modules/ResourceTracker\r\n * ResourceTracker handles how it's energized and spent, RegenResourceCapTracker will tell\r\n * you about natural regeneration and how long it's at cap.\r\n *\r\n * The accuracy of this module's predictions depends heavily on finding the \"quirks\" of how\r\n * abilities and their resource behaviours appear in the combat log. It can never be perfectly\r\n * accurate due to resources being rounded to integer values and latency issues, but an error\r\n * of less than ±2 should be possible.\r\n *\r\n * Fabricates events 'beginresourcecap' and 'endresourcecap'. See the functions fabricateBeginCap\r\n * and fabricateEndCap for details on these events and their limitations.\r\n */\r\n\r\n/**\r\n * How far (in ms) damage event can be separated from a cast and still use its information\r\n * to decide there should be a resource refund due to not hiting. 208ms is highest I've seen.\r\n */\r\nconst REFUND_SPENDER_WINDOW = 500;\r\nconst HIT_TYPES_THAT_REFUND = [\r\n  HIT_TYPES.MISS,\r\n  HIT_TYPES.DODGE,\r\n  HIT_TYPES.PARRY,\r\n];\r\n\r\n/**\r\n * @property {EventEmitter} eventEmitter\r\n * @property {Haste} haste\r\n * @property {SpellResourceCost} spellResourceCost\r\n */\r\nclass RegenResourceCapTracker extends Analyzer {\r\n  static dependencies = {\r\n    eventEmitter: EventEmitter,\r\n    haste: Haste,\r\n    // Needed for the `resourceCost` prop of events\r\n    spellResourceCost: SpellResourceCost,\r\n  };\r\n\r\n  // -- Start of IMPLEMENTME statics\r\n\r\n  // One of game/RESOURCE_TYPES\r\n  static resourceType;\r\n\r\n  // Resource's base regeneration rate in points per second (e.g. 10 for Energy)\r\n  static baseRegenRate = 0;\r\n\r\n  /**\r\n   * Is natural regeneration rate increased by haste.\r\n   * If a resource is affected by haste in an unusual way, set false and handle it manually in naturalRegenRate\r\n   */\r\n  static isRegenHasted = false;\r\n\r\n  /**\r\n   * Any buff or debuff IDs that change the max value for this resource. e.g. Berserk for Feral.\r\n   * Remember to check for their presence and apply the effect in currentMaxResource\r\n   */\r\n  static buffsChangeMax = [];\r\n\r\n  /**\r\n   * Any buff or debuff IDs that directly affect natural regeneration rate for this resource. e.g. Adrenaline Rush for Outlaw.\r\n   * Remember to check for their presence and apply the effect in naturalRegenRate\r\n   */\r\n  static buffsChangeRegen = [];\r\n\r\n  // Events for some abilities give inaccurate \"amount\" values, so their change is best applied cumulatively.\r\n  static energizersToApplyCumulatively = [];\r\n  static castsToApplyCumulatively = [];\r\n  static drainsToApplyCumulatively = [];\r\n\r\n  /**\r\n   * How close (in ms) a resource changing event must be to the last one to have the change handled cumulatively.\r\n   *\r\n   * When resource changing events occur in a very short time the values in the combat log can become inaccurate.\r\n   *  What happens in the fight:\r\n   * t: 1  player has 50 energy\r\n   * t: 2  cast spending 20 energy\r\n   * t: 2  energize gaining 30 energy\r\n   * t: 3  player has 60 energy\r\n   *\r\n   *  What the log shows:\r\n   * cast {timestamp: 2, classResources[i]: {amount: 50, cost: 20}}\r\n   * energize {timestamp: 2, resourceChange: 30, classResources[i]: {amount: 80}}\r\n   * ('amount' for cast events is what it was before the event, for energize events it's after.)\r\n   *\r\n   * If we trusted the resource information given by the last parsed event we'd expect energy to\r\n   * be 80 at t = 3.\r\n   */\r\n  static cumulativeEventWindow = 100;\r\n\r\n  /**\r\n   * For some specs (e.g. energy for rogues and feral) a ability that doesn't hit refunds some of the resource.\r\n   * A value of 0 means no refund, 0.8 seems to be the standard refund amount.\r\n   */\r\n  static resourceRefundOnMiss = 0;\r\n\r\n  // Some abilities never get their resources refunded, usually AoEs. List their spellIds here.\r\n  static exemptFromRefund = [];\r\n\r\n  // -- end of IMPLEMENTME statics\r\n\r\n  // Total time spent with resource at maximum (in ms)\r\n  atCap = 0;\r\n\r\n  // Total resources lost from natural regeneration (ONLY natural regeneration) due to being capped\r\n  missedRegen = 0;\r\n\r\n  // Total resources generated from natural regeneration, includes wasted resources.\r\n  naturalRegen = 0;\r\n\r\n  regenState = null;\r\n  prevSpender = null;\r\n  hasReportedBelowCap = false;\r\n\r\n  /**\r\n   * Amount of resource that should be available at current timestamp, accounting for natural regeneration.\r\n   * @returns {number}\r\n   */\r\n  get current() {\r\n    return this.predictValue(this.owner.currentTimestamp);\r\n  }\r\n\r\n  /**\r\n   * Whether the resource is at its cap at the current timestamp.\r\n   * @returns {boolean}\r\n   */\r\n  get isCapped() {\r\n    return this.current >= this.regenState.max;\r\n  }\r\n\r\n  /**\r\n   * What fraction of the fight was spent with this resource at its cap.\r\n   * @returns {number}\r\n   */\r\n  get cappedProportion() {\r\n    return this.atCap / this.owner.fightDuration;\r\n  }\r\n\r\n  /**\r\n   * Resource lost from natural regeneration (only from natural regeneration, not energizers) due\r\n   * to the resource reaching cap, averaged to a per-minute value.\r\n   */\r\n  get missedRegenPerMinute() {\r\n    return (this.missedRegen / this.owner.fightDuration) * 1000 * 60;\r\n  }\r\n\r\n  constructor(...args) {\r\n    super(...args);\r\n    // can't know resource state for certain until the first combat events, but assume a regenerating resource starts full.\r\n    const max = this.currentMaxResourceWithFallback();\r\n    this.regenState = {\r\n      amount: max ? max : 0,\r\n      max,\r\n      regen: this.naturalRegenRate(),\r\n      timestamp: this.owner.fight.start_time,\r\n    };\r\n    this.addEventListener(Events.fightend, this.onFightend);\r\n    this.addEventListener(Events.energize.to(SELECTED_PLAYER), this.onEnergize);\r\n    this.addEventListener(Events.cast.by(SELECTED_PLAYER), this.onCast);\r\n    this.addEventListener(Events.damage.by(SELECTED_PLAYER), this.onDamage);\r\n    this.addEventListener(Events.drain.by(SELECTED_PLAYER), this.onDrain);\r\n    this.addEventListener(Events.applybuff.to(SELECTED_PLAYER), this.onApplyBuff);\r\n    this.addEventListener(Events.removebuff.to(SELECTED_PLAYER), this.onRemoveBuff);\r\n    this.addEventListener(Events.ChangeHaste.to(SELECTED_PLAYER), this.onChangeHaste);\r\n  }\r\n\r\n  /**\r\n   * IMPLEMENTME\r\n   * Some specs have drain reductions that aren't already shown in events, which should be implemented\r\n   * here. Drain events are separate from an ability cast cost.\r\n   * @param   {object}  event A drain event being applied to the player.\r\n   * @returns {number}  Drain amount after any reductions are applied.\r\n   */\r\n  getReducedDrain(event) {\r\n    return event.resourceChange;\r\n  }\r\n\r\n  /**\r\n   * IMPLEMENTME\r\n   * Some specs have modifiers to the base regen rate that apply before haste, which should\r\n   * be implemented here.\r\n   * @returns {number} Base regen rate of the resource.\r\n   */\r\n  getBaseRegenRate(){\r\n    return this.constructor.baseRegenRate;\r\n  }\r\n\r\n  /**\r\n   * IMPLEMENTME\r\n   * Calculate current natural regeneration rate of the resource.\r\n   * When checking combant's buffs/debuffs you may want to use this.combatantHasBuffActive() rather than\r\n   * the .hasBuff of the combatant directly, doing so will exclude buffs which wore off at this timestamp.\r\n   * @returns {number}  Resource expected to be generated per ms.\r\n   */\r\n  naturalRegenRate() {\r\n    let regen = this.getBaseRegenRate() / 1000;\r\n    if (this.constructor.isRegenHasted) {\r\n      regen *= (1 + this.haste.current);\r\n    }\r\n    return regen;\r\n  }\r\n\r\n  /**\r\n   * IMPLEMENTME\r\n   * Calculate current maximum value for the resource. Accounting for items, talents, and active buffs.\r\n   * When checking combant's buffs/debuffs you may want to use this.combatantHasBuffActive() rather than\r\n   * the .hasBuff of the combatant directly, doing so will exclude buffs which wore off at this timestamp.\r\n   * @returns {number}  Maximum resource value, or null to try to use value from resource events.\r\n   */\r\n  currentMaxResource() {\r\n   /**\r\n    * If left unimplemented and no events provide max resource information the Analyzer will never know\r\n    * the resource's max value. It handles that situation without crashing, but without a cap value it\r\n    * is largely useless.\r\n    */\r\n    return null;\r\n  }\r\n\r\n  /**\r\n   * Applies an energize of the tracked resource type at the current timestamp.\r\n   * Use when a spec has a source of resource which doesn't appear as an energize event in the log.\r\n   * If you have an invisible energize that happens over a duration you should generate an event for\r\n   * each tick, as applying it all at once can lead to inaccuracies. If it doesn't have ticks consider\r\n   * handling it as a buff to the natural regeneration rate instead.\r\n   * @param {number} amount Raw amount of resources to gain. Limiting to max is done within this function\r\n   * so there's no need to check before passing it in.\r\n   */\r\n  processInvisibleEnergize(amount) {\r\n    if (amount == null || isNaN(amount)) {\r\n      throw new Error(`processInvisibleEnergize called without required parameter. amount: ${amount}`);\r\n    }\r\n    if (amount === 0) {\r\n      return;\r\n    }\r\n    const before = this.current;\r\n    const after = Math.min(before + amount, this.currentMaxResourceWithFallback());\r\n    const gain = after - before;\r\n    this.applyEnergize(gain);\r\n  }\r\n\r\n  /**\r\n   * Fetches the appropriate classResources object from an event, or null if there is none available.\r\n   * @param {object} event An event object which may have an appropriate .classResources property.\r\n   */\r\n  getResource(event) {\r\n    if (!event || !event.classResources) {\r\n      return null;\r\n    }\r\n    return event.classResources.find(r => r.type === this.constructor.resourceType.id);\r\n  }\r\n\r\n  /**\r\n   * Fetches the cost of a cast event. Using its resourceCost property (added by SpellResourceCost)\r\n   * if it's available or the resource cost given by the combat log if not.\r\n   * @param {object} event A cast event object with a resource cost associated with it.\r\n   */\r\n  getCost(event) {\r\n    if (event.resourceCost[this.constructor.resourceType.id] !== undefined) {\r\n      return event.resourceCost[this.constructor.resourceType.id];\r\n    }\r\n    return this.getResource(event).cost;\r\n  }\r\n\r\n  /**\r\n   * A variation of this.selectedCombatant.hasBuff that excludes any buffs which were removed on the timestamp.\r\n   * @param {number} buffId ID of buff or debuff to check for on the current combatant.\r\n   * @param {number} timestamp Time to check, or null to use current timestamp. Cannot be a future timestamp.\r\n   */\r\n  combatantHasBuffActive(buffId, timestamp = null) {\r\n    if (!buffId || isNaN(buffId)) {\r\n      throw new Error(`combatantHasBuffActive called without required parameter. buffId: ${buffId}`);\r\n    }\r\n    if (!timestamp) {\r\n      timestamp = this.owner.currentTimestamp;\r\n    }\r\n    const buffHistory = this.selectedCombatant.getBuffHistory(buffId);\r\n    return Boolean(buffHistory.find(buff => (buff.start <= timestamp && (!buff.end || buff.end > timestamp))));\r\n  }\r\n\r\n  onFightend() {\r\n    // updateState one last time to catch any resource capping after the final resource event\r\n    this.updateState(this.predictValue(this.owner.fight.end_time));\r\n    debug && console.log(`mean prediction error magnitude: ${this.debugMeanPredictionError.toFixed(2)}`);\r\n    debug && console.log(`greatest magnitude prediction error: ${this.debugGreatestError.toFixed(2)}`);\r\n  }\r\n\r\n  onEnergize(event) {\r\n    if(event.resourceChangeType !== this.constructor.resourceType.id || !event.resourceChange) {\r\n      return;\r\n    }\r\n    const waste = event.waste ? event.waste : 0;\r\n    const gain = event.resourceChange - waste;\r\n    const applyCumulatively = this.constructor.energizersToApplyCumulatively.includes(event.ability.guid);\r\n    this.applyEnergize(gain, event, applyCumulatively);\r\n  }\r\n\r\n  applyEnergize(gain, event = null, applyCumulatively = false) {\r\n    if (gain == null || isNaN(gain)) {\r\n      // using == null to catch undefined, but still allow 0\r\n      throw new Error(`applyEnergize called without required parameter. gain: ${gain}`);\r\n    }\r\n    const time = event ? event.timestamp : this.owner.currentTimestamp;\r\n    const eventResource = event ? this.getResource(event) : null;\r\n\r\n    const shouldAccumulate = applyCumulatively ||\r\n      this.isLastUpdateRecent(time) ||\r\n      !eventResource || eventResource.amount == null;\r\n\r\n    // eventResource.amount for an energize is the value after the change\r\n    const current = shouldAccumulate ? (this.predictValue(time) + gain) : eventResource.amount;\r\n    if (debug && !shouldAccumulate) {\r\n      this.debugActualVsPredicted(eventResource.amount - gain, time);\r\n    }\r\n    const max = this.currentMaxResourceWithFallback(event);\r\n    this.updateState(current, max);\r\n  }\r\n\r\n  onCast(event) {\r\n    const eventResource = this.getResource(event);\r\n    if (!eventResource) {\r\n      return;\r\n    }\r\n    const cost = this.getCost(event);\r\n    if (!cost) {\r\n      // only interested in cast events that spend resource\r\n      return;\r\n    }\r\n    if (cost < 0) {\r\n      debug && console.warn(`${this.owner.formatTimestamp(event.timestamp, 3)} Unexpected negative cost ${cost} for spell ${event.ability.guid}`);\r\n    }\r\n    if (!this.constructor.exemptFromRefund.includes(event.ability.guid)) {\r\n      this.prevSpender = {\r\n        id: event.ability.guid,\r\n        cost,\r\n        timestamp: event.timestamp,\r\n      };\r\n    }\r\n\r\n    const shouldAccumulate = eventResource.amount == null ||\r\n      this.constructor.castsToApplyCumulatively.includes(event.ability.guid) ||\r\n      this.isLastUpdateRecent(event.timestamp);\r\n    const current = (shouldAccumulate ? this.predictValue(event.timestamp) : eventResource.amount) - cost;\r\n    if (debug && !shouldAccumulate) {\r\n      this.debugActualVsPredicted(eventResource.amount, event.timestamp);\r\n    }\r\n    const max = this.currentMaxResourceWithFallback(event);\r\n    this.updateState(current, max);\r\n  }\r\n\r\n  onDamage(event) {\r\n    // only interested in damage events if they show a spending ability failing to connect (and so triggering a refund)\r\n    if (!this.prevSpender || event.ability.guid !== this.prevSpender.id ||\r\n        (event.timestamp - this.prevSpender.timestamp) > REFUND_SPENDER_WINDOW ||\r\n        event.tick || !HIT_TYPES_THAT_REFUND.includes(event.hitType)) {\r\n      return;\r\n    }\r\n    verboseDebug && console.log(`${this.owner.formatTimestamp(this.owner.currentTimestamp, 3)} attack didn't connect so restoring ${Math.round(this.constructor.resourceRefundOnMiss * 100)}% resource`);\r\n    const refund = Math.floor(this.prevSpender.cost * this.constructor.resourceRefundOnMiss);\r\n    const current = this.predictValue(event.timestamp) + refund;\r\n    this.updateState(current);\r\n  }\r\n\r\n  onDrain(event) {\r\n    if(event.resourceChangeType !== this.constructor.resourceType.id || !event.resourceChange) {\r\n      return;\r\n    }\r\n    const eventResource = this.getResource(event);\r\n    const drain = this.getReducedDrain(event);\r\n\r\n    const shouldAccumulate = !eventResource || eventResource.amount == null ||\r\n      this.constructor.energizersToApplyCumulatively.includes(event.ability.guid) ||\r\n      this.isLastUpdateRecent(event.timestamp);\r\n\r\n    // eventResource.amount for a drain is the value before the change\r\n    const current = (shouldAccumulate ? this.predictValue(event.timestamp) : eventResource.amount) - drain;\r\n    if (debug && !shouldAccumulate) {\r\n      this.debugActualVsPredicted(eventResource.amount, event.timestamp);\r\n    }\r\n    const max = this.currentMaxResourceWithFallback(event);\r\n    this.updateState(current, max);\r\n  }\r\n\r\n  isLastUpdateRecent(timestamp) {\r\n    return this.regenState.timestamp + this.constructor.cumulativeEventWindow >= timestamp;\r\n  }\r\n\r\n  onApplyBuff(event) {\r\n    if (this.constructor.buffsChangeMax.includes(event.ability.guid)) {\r\n      this.buffChangesResourceMax(event);\r\n    }\r\n    if (this.constructor.buffsChangeRegen.includes(event.ability.guid)) {\r\n      this.buffChangesRegen();\r\n    }\r\n  }\r\n\r\n  onRemoveBuff(event) {\r\n    if (this.constructor.buffsChangeMax.includes(event.ability.guid)) {\r\n      this.buffChangesResourceMax(event);\r\n    }\r\n    if (this.constructor.buffsChangeRegen.includes(event.ability.guid)) {\r\n      this.buffChangesRegen();\r\n    }\r\n  }\r\n\r\n  onChangeHaste() {\r\n    const regen = this.naturalRegenRate();\r\n    this.updateState(null, null, regen);\r\n  }\r\n\r\n  buffChangesResourceMax(event) {\r\n    const max = this.currentMaxResourceWithFallback(event);\r\n    this.updateState(null, max);\r\n  }\r\n\r\n  buffChangesRegen() {\r\n    const regen = this.naturalRegenRate();\r\n    this.updateState(null, null, regen);\r\n  }\r\n\r\n  /**\r\n   * Called when current, max, or regen rate for the resource has changed.\r\n   * Builds a new regenState reflecting the current state.\r\n   * Detects if resource capping occurred since the last regenState.\r\n   * @param {number} amount Current amount of resource, or null to use prediction.\r\n   * @param {number} max Current resource maximum, or null to use calculation.\r\n   * @param {number} regen Current resource regeneration rate, or null to use calculation.\r\n   */\r\n  updateState(amount = null, max = null, regen = null) {\r\n    const timestamp = this.owner.currentTimestamp;\r\n    verboseDebug && console.log(`${this.owner.formatTimestamp(timestamp, 3)} amount: ${amount ? amount.toFixed(1) : 'n/a'}, max: ${max ? max.toFixed(1) : 'n/a'} , regen: ${regen ? (regen * 1000).toFixed(3) : 'n/a'}`);\r\n    if (amount == null || isNaN(amount)) {\r\n      amount = this.predictValue(timestamp);\r\n    }\r\n    if (max == null || isNaN(max)) {\r\n      max = this.currentMaxResourceWithFallback();\r\n    }\r\n    if (regen == null || isNaN(regen)) {\r\n      regen = this.naturalRegenRate();\r\n    }\r\n    amount = max ? Math.min(max, amount) : amount;\r\n    const oldState = this.regenState;\r\n    const newState = {\r\n      amount,\r\n      max,\r\n      regen,\r\n      timestamp,\r\n    };\r\n    this.regenState = newState;\r\n    if (oldState) {\r\n      const durationCapped = this.timeCappedBetweenStates(oldState, newState);\r\n      this.atCap += durationCapped;\r\n      this.missedRegen += durationCapped * oldState.regen;\r\n      this.naturalRegen += (newState.timestamp - oldState.timestamp) * oldState.regen;\r\n    }\r\n    if (newState.amount < newState.max) {\r\n      this.onBelowCap(newState.timestamp);\r\n    }\r\n  }\r\n\r\n  timeCappedBetweenStates(oldState, newState) {\r\n    if (!oldState || !newState){\r\n      throw new Error(`timeCappedBetweenStates called without required parameters. oldState: ${oldState}, newState: ${newState}`);\r\n    }\r\n    const reachCap = oldState.max ? this.predictReachValue(oldState.timestamp, oldState.amount, oldState.regen, oldState.max) : Infinity;\r\n    if (reachCap >= newState.timestamp) {\r\n      return 0;\r\n    }\r\n    this.onAtCap(reachCap);\r\n\r\n    return newState.timestamp - reachCap;\r\n  }\r\n\r\n  currentMaxResourceWithFallback(event = null) {\r\n    const calculated = this.currentMaxResource();\r\n    if (calculated) {\r\n      return calculated;\r\n    }\r\n    const eventResource = this.getResource(event);\r\n    if (eventResource && eventResource.max != null && !isNaN(eventResource.max)) {\r\n      return eventResource.max;\r\n    }\r\n    // when neither source provides a value just use the existing\r\n    return this.regenState.max;\r\n  }\r\n\r\n  /**\r\n   * Given a start value and regen rate, calculate when resource will reach a given value.\r\n   * @param {number} startTime Timestamp for known resource value\r\n   * @param {number} startValue Known resource value\r\n   * @param {number} regen Regeneration rate in units per ms\r\n   * @param {number} targetValue Resource value being aimed for\r\n   * @returns {number} Timestamp when targetValue would be reached through natural regen.\r\n   */\r\n  predictReachValue(startTime, startValue, regen, targetValue) {\r\n    if (startValue == null || isNaN(startValue) ||\r\n        regen == null || isNaN(regen) ||\r\n        targetValue == null || isNaN(targetValue) ||\r\n        startTime == null || isNaN(startTime)) {\r\n      throw new Error(`predictReachValue called without required parameters. startValue: ${startValue}, regen: ${regen}, cap: ${targetValue}, startTime: ${startTime}`);\r\n    }\r\n    if (startValue >= targetValue) {\r\n      return startTime;\r\n    }\r\n    if (regen === 0) {\r\n      return Infinity;\r\n    }\r\n    return startTime + ((targetValue - startValue) / regen);\r\n  }\r\n\r\n  /**\r\n   * Calculates available resource accounting for natural regen.\r\n   * @param {number} time Timestamp for which to create a prediction, or null for current timestamp.\r\n   * @returns {number} Predicted resource value at given time.\r\n   */\r\n  predictValue(time = null) {\r\n    if (!time) {\r\n      time = this.owner.currentTimestamp;\r\n    }\r\n    if (time < this.regenState.timestamp) {\r\n      debug && console.warn(`Attempting to predict the past. State's time: ${this.owner.formatTimestamp(this.regenState.timestamp, 3)}, target time: ${this.owner.formatTimestamp(time, 3)}`);\r\n      return this.regenState.amount;\r\n    }\r\n    const elapsed = time - this.regenState.timestamp;\r\n    const predicted = this.regenState.amount + this.regenState.regen * elapsed;\r\n    return this.regenState.max ? Math.min(this.regenState.max, predicted) : predicted;\r\n  }\r\n\r\n  onBelowCap(time) {\r\n    if (this.hasReportedBelowCap) {\r\n      return;\r\n    }\r\n    this.fabricateEndCap(time);\r\n    this.hasReportedBelowCap = true;\r\n  }\r\n\r\n  onAtCap(time) {\r\n    if (!this.hasReportedBelowCap) {\r\n      return;\r\n    }\r\n    this.fabricateBeginCap(time);\r\n    this.hasReportedBelowCap = false;\r\n  }\r\n\r\n  /**\r\n   * Fabricates an event indicating the tracked resource has reached its cap value.\r\n   * May be triggered by an energize or natural regeneration bringing the value to the cap, or\r\n   * by the cap being lowered.\r\n   *\r\n   * Although the timestamp of this event should be accurate, because cap events are sometimes\r\n   * only detected after they happen it may be misplaced within the event stream.\r\n   * So do NOT assume that an event parsed between beginresourcecap and endresourcecap events\r\n   * being parsed happened while the resource was capped. Either look at the timestamps of\r\n   * the events or if you're interested in the current cap state use this analyzer's isCapped\r\n   *\r\n   * Also note that endresourcecap and beginresourcecap events may occur extremely close to\r\n   * one-another, sometimes on the same timestamp if there's a spend and energize event.\r\n   *\r\n   * @param {number} time Timestamp for when the resource reached cap.\r\n   */\r\n  fabricateBeginCap(time) {\r\n    if (time == null || isNaN(time)) {\r\n      throw new Error(`fabricateBeginCap called without required parameter. time: ${time}`);\r\n    }\r\n    verboseDebug && console.log(`${this.owner.formatTimestamp(time, 3)} begin cap`);\r\n    this.eventEmitter.fabricateEvent({\r\n      type: 'beginresourcecap',\r\n      timestamp: time,\r\n      sourceID: this.owner.playerId,\r\n      targetID: this.owner.playerId,\r\n      resourceType: this.constructor.resourceType.id,\r\n    });\r\n  }\r\n\r\n  /**\r\n   * Fabricates an event indicating that the tracked resource is no longer at its cap.\r\n   * May be triggered by cast or drain using resource or the cap value being increased.\r\n   * @param {number} time Timestamp for when the resource ceased to be at the cap.\r\n   */\r\n  fabricateEndCap(time) {\r\n    if (time == null || isNaN(time)) {\r\n      throw new Error(`fabricateEndCap called without required parameter. time: ${time}`);\r\n    }\r\n    verboseDebug && console.log(`${this.owner.formatTimestamp(time, 3)} end cap`);\r\n    this.eventEmitter.fabricateEvent({\r\n      type: 'endresourcecap',\r\n      timestamp: time,\r\n      sourceID: this.owner.playerId,\r\n      targetID: this.owner.playerId,\r\n      resourceType: this.constructor.resourceType.id,\r\n    });\r\n  }\r\n\r\n  // -- debug code to check accuracy of predictions against values reported by log\r\n  debugErrorSum = 0;\r\n  debugGreatestError = 0;\r\n  debugAccuracyCheckCount = 0;\r\n  debugActualVsPredicted(actual, timestamp) {\r\n    if (!debug) {\r\n      return;\r\n    }\r\n    const predicted = this.predictValue(timestamp);\r\n    const difference = predicted - actual;\r\n    const errorMagnitude = Math.abs(difference);\r\n    this.debugGreatestError = Math.max(this.debugGreatestError, errorMagnitude);\r\n    this.debugAccuracyCheckCount += 1;\r\n    this.debugErrorSum += errorMagnitude;\r\n    if (errorMagnitude > 3) {\r\n      console.log(`${this.owner.formatTimestamp(timestamp, 3)} actual: ${actual} prediction: ${predicted.toFixed(1)} (error: ${difference > 0 ? '+' : ''}${difference.toFixed(1)})`);\r\n    }\r\n  }\r\n  get debugMeanPredictionError() {\r\n    return this.debugErrorSum / this.debugAccuracyCheckCount;\r\n  }\r\n}\r\n\r\nexport default RegenResourceCapTracker;\r\n","import RESOURCE_TYPES from 'game/RESOURCE_TYPES';\r\nimport ResourceTracker from 'parser/shared/modules/resources/resourcetracker/ResourceTracker';\r\nimport SPELLS from 'common/SPELLS';\r\nimport { CastEvent, EnergizeEvent } from 'parser/core/Events';\r\nimport { AOTW_REGEN, BARBED_SHOT_FOCUS_REGEN_BUFFS_IDS, BARBED_SHOT_REGEN, BEAST_MASTERY_SPELLS_WITHOUT_WASTE, CHIM_REGEN } from 'parser/hunter/beastmastery/constants';\r\nimport { Options } from 'parser/core/Analyzer';\r\n\r\nclass FocusTracker extends ResourceTracker {\r\n  constructor(options: Options) {\r\n    super(options);\r\n    this.resource = RESOURCE_TYPES.FOCUS;\r\n  }\r\n\r\n  //Because energize events associated with certain spells don't provide a waste number, but instead a lower resourceChange number we can calculate the waste ourselves.\r\n  onEnergize(event: EnergizeEvent) {\r\n    if (event.resourceChangeType !== this.resource.id) {\r\n      return;\r\n    }\r\n    const spellId = event.ability.guid;\r\n    let waste = 0;\r\n    let gain;\r\n    if (BEAST_MASTERY_SPELLS_WITHOUT_WASTE.includes(spellId)) {\r\n      gain = event.resourceChange;\r\n      if (BARBED_SHOT_FOCUS_REGEN_BUFFS_IDS.includes(spellId)) {\r\n        waste = BARBED_SHOT_REGEN * (this.selectedCombatant.hasBuff(SPELLS.NESINGWARYS_TRAPPING_APPARATUS_ENERGIZE.id) ? 2 : 1) - gain;\r\n        gain = gain - waste;\r\n      } else if (spellId === SPELLS.ASPECT_OF_THE_WILD.id) {\r\n        waste = AOTW_REGEN * (this.selectedCombatant.hasBuff(SPELLS.NESINGWARYS_TRAPPING_APPARATUS_ENERGIZE.id) ? 2 : 1) - gain;\r\n        gain = gain - waste;\r\n      } else if (spellId === SPELLS.CHIMAERA_SHOT_FOCUS.id) {\r\n        waste = CHIM_REGEN * (this.selectedCombatant.hasBuff(SPELLS.NESINGWARYS_TRAPPING_APPARATUS_ENERGIZE.id) ? 2 : 1) - gain;\r\n        gain = gain - waste;\r\n      }\r\n    } else {\r\n      waste = event.waste;\r\n      gain = event.resourceChange - waste;\r\n    }\r\n\r\n    this._applyBuilder(spellId, gain, waste, this.getResource(event), event.timestamp);\r\n  }\r\n\r\n  //We're not interested in the fabricated events that are created prepull, as these tend to add focus costs things such as potion usage, Bestial Wrath, Trueshot or the likes whereas these don't cost focus.\r\n  shouldProcessCastEvent(event: CastEvent) {\r\n    return !event.__fabricated && Boolean(this.getResource(event));\r\n  }\r\n}\r\n\r\nexport default FocusTracker;\r\n","import Analyzer, { Options, SELECTED_PLAYER } from 'parser/core/Analyzer';\r\nimport Abilities from 'parser/core/modules/Abilities';\r\nimport SPELLS from 'common/SPELLS';\r\nimport Events, { ApplyBuffEvent, DamageEvent, RefreshBuffEvent } from 'parser/core/Events';\r\nimport Statistic from 'interface/statistics/Statistic';\r\nimport STATISTIC_ORDER from 'interface/others/STATISTIC_ORDER';\r\nimport STATISTIC_CATEGORY from 'interface/others/STATISTIC_CATEGORY';\r\nimport ItemDamageDone from 'interface/ItemDamageDone';\r\nimport React from 'react';\r\nimport BoringSpellValueText from 'interface/statistics/components/BoringSpellValueText';\r\nimport SpellUsable from 'parser/shared/modules/SpellUsable';\r\nimport { binomialCDF, expectedProcCount, plotOneVariableBinomChart } from 'parser/shared/modules/helpers/Probability';\r\nimport SpellLink from 'common/SpellLink';\r\nimport { FLAYED_SHOT_RESET_CHANCE } from 'parser/hunter/shared/constants';\r\nimport { formatNumber, formatPercentage } from 'common/format';\r\nimport SPECS from 'game/SPECS';\r\nimport COVENANTS from 'game/shadowlands/COVENANTS';\r\n\r\nclass FlayedShot extends Analyzer {\r\n  static dependencies = {\r\n    spellUsable: SpellUsable,\r\n    abilities: Abilities,\r\n  };\r\n\r\n  damage: number = 0;\r\n  damageTicks: number = 0;\r\n  totalProcs: number = 0;\r\n  resets: number = 0;\r\n  offCDProcs: number = 0;\r\n  activeKillShotSpell = this.selectedCombatant.spec === SPECS.SURVIVAL_HUNTER ? SPELLS.KILL_SHOT_SV : SPELLS.KILL_SHOT_MM_BM;\r\n\r\n  protected spellUsable!: SpellUsable;\r\n  protected abilities!: Abilities;\r\n\r\n  constructor(options: Options) {\r\n    super(options);\r\n\r\n    this.active = this.selectedCombatant.hasCovenant(COVENANTS.VENTHYR.id);\r\n\r\n    if (!this.active) {\r\n      return;\r\n    }\r\n\r\n    (options.abilities as Abilities).add({\r\n      spell: SPELLS.FLAYED_SHOT,\r\n      category: Abilities.SPELL_CATEGORIES.ROTATIONAL,\r\n      cooldown: 30,\r\n      gcd: {\r\n        base: 1500,\r\n      },\r\n      castEfficiency: {\r\n        suggestion: true,\r\n        recommendedEfficiency: 0.9,\r\n      },\r\n    });\r\n\r\n    this.addEventListener(Events.damage.by(SELECTED_PLAYER).spell(SPELLS.FLAYED_SHOT), this.onDamage);\r\n    this.addEventListener(Events.applybuff.by(SELECTED_PLAYER).spell(SPELLS.FLAYERS_MARK), this.onProc);\r\n    this.addEventListener(Events.refreshbuff.by(SELECTED_PLAYER).spell(SPELLS.FLAYERS_MARK), this.onProc);\r\n  }\r\n\r\n  get expectedProcs() {\r\n    return expectedProcCount(FLAYED_SHOT_RESET_CHANCE, this.damageTicks);\r\n  }\r\n\r\n  onDamage(event: DamageEvent) {\r\n    this.damage += event.amount + (event.absorbed || 0);\r\n    this.damageTicks += 1;\r\n  }\r\n\r\n  onProc(event: ApplyBuffEvent | RefreshBuffEvent) {\r\n    this.totalProcs += 1;\r\n    if (this.spellUsable.isOnCooldown(this.activeKillShotSpell.id)) {\r\n      this.spellUsable.endCooldown(this.activeKillShotSpell.id, false, event.timestamp);\r\n      this.resets += 1;\r\n    } else {\r\n      this.offCDProcs += 1;\r\n    }\r\n  }\r\n\r\n  statistic() {\r\n    return (\r\n      <Statistic\r\n        position={STATISTIC_ORDER.CORE()}\r\n        size=\"flexible\"\r\n        category={STATISTIC_CATEGORY.COVENANTS}\r\n        tooltip={(\r\n          <>\r\n            You had {this.offCDProcs} {this.offCDProcs === 1 ? `proc` : `procs`} with Kill Shot already off cooldown. <br />\r\n            You had {formatPercentage(this.totalProcs / this.expectedProcs, 1)}% procs of what you could expect to get over the encounter. <br />\r\n            You had a total of {this.totalProcs} procs, and your expected amount of procs was {formatNumber(this.expectedProcs)}. <br />\r\n            <ul>\r\n              <li>You have a ≈{formatPercentage(binomialCDF(this.totalProcs, this.damageTicks, FLAYED_SHOT_RESET_CHANCE))}% chance of getting this amount of procs or fewer in the future with this amount of auto attacks.</li>\r\n            </ul>\r\n          </>\r\n        )}\r\n        dropdown={(\r\n          <>\r\n            <div style={{ padding: '8px' }}>\r\n              {plotOneVariableBinomChart(this.totalProcs, this.damageTicks, FLAYED_SHOT_RESET_CHANCE)}\r\n              <p>Likelihood of getting <em>exactly</em> as many procs as estimated on a fight given your number of <SpellLink id={SPELLS.FLAYED_SHOT.id} /> ticks.</p>\r\n            </div>\r\n          </>\r\n        )}\r\n      >\r\n        <BoringSpellValueText spell={SPELLS.FLAYED_SHOT}>\r\n          <>\r\n            {this.resets} / {this.totalProcs} ({formatPercentage(this.resets / (this.totalProcs))}%) <small>Kill Shot resets</small>\r\n            <br />\r\n            <ItemDamageDone amount={this.damage} />\r\n          </>\r\n        </BoringSpellValueText>\r\n      </Statistic>\r\n    );\r\n  }\r\n}\r\n\r\nexport default FlayedShot;\r\n","import React from 'react';\r\n\r\nimport {\r\n  formatMilliseconds,\r\n  formatNumber,\r\n  formatPercentage,\r\n} from 'common/format';\r\nimport Analyzer, { Options, SELECTED_PLAYER } from 'parser/core/Analyzer';\r\nimport { ThresholdStyle } from 'parser/core/ParseResults';\r\nimport CrossIcon from 'interface/icons/Cross';\r\nimport Statistic from 'interface/statistics/Statistic';\r\nimport BoringValueText from 'interface/statistics/components/BoringValueText';\r\nimport STATISTIC_ORDER from 'interface/others/STATISTIC_ORDER';\r\nimport CASTS_THAT_ARENT_CASTS from 'parser/core/CASTS_THAT_ARENT_CASTS';\r\nimport CASTABLE_WHILE_CASTING_SPELLS from 'parser/core/CASTABLE_WHILE_CASTING_SPELLS';\r\n\r\nimport Events, { CastEvent, BeginCastEvent } from '../../core/Events';\r\n\r\nconst debug = false;\r\nconst MS_BUFFER = 100;\r\n\r\nclass CancelledCasts extends Analyzer {\r\n  castsCancelled = 0;\r\n  castsFinished = 0;\r\n  beginCastSpell: BeginCastEvent | undefined = undefined;\r\n  wasCastStarted: boolean = false;\r\n  cancelledSpellList: {\r\n    [key: number]: {\r\n      spellName: string,\r\n      amount: number\r\n    }\r\n  } = {};\r\n  IGNORED_ABILITIES: number[] = [];\r\n\r\n  constructor(options: Options){\r\n    super(options);\r\n    this.addEventListener(Events.begincast.by(SELECTED_PLAYER), this.onBeginCast);\r\n    this.addEventListener(Events.cast.by(SELECTED_PLAYER), this.onCast);\r\n    this.addEventListener(Events.fightend, this.onFightend);\r\n  }\r\n\r\n  onBeginCast(event: BeginCastEvent) {\r\n    const spellId = event.ability.guid;\r\n    if (this.IGNORED_ABILITIES.includes(spellId) || CASTS_THAT_ARENT_CASTS.includes(spellId) || CASTABLE_WHILE_CASTING_SPELLS.includes(spellId)) {\r\n      return;\r\n    }\r\n    if (this.wasCastStarted && this.beginCastSpell !== undefined &&\r\n      event.timestamp -\r\n      this.beginCastSpell.timestamp >\r\n      MS_BUFFER) {\r\n      this.castsCancelled += 1;\r\n      this.addToCancelledList();\r\n    }\r\n    this.beginCastSpell = event;\r\n    this.wasCastStarted = true;\r\n  }\r\n\r\n  onCast(event: CastEvent) {\r\n    const spellId = event.ability.guid;\r\n    const beginCastAbility = this.beginCastSpell && this.beginCastSpell.ability;\r\n    if (this.IGNORED_ABILITIES.includes(spellId) || CASTS_THAT_ARENT_CASTS.includes(spellId) || CASTABLE_WHILE_CASTING_SPELLS.includes(spellId) || !beginCastAbility) {\r\n      return;\r\n    }\r\n    if (beginCastAbility.guid !== spellId && this.wasCastStarted) {\r\n      this.castsCancelled += 1;\r\n      this.addToCancelledList();\r\n    }\r\n    if (beginCastAbility.guid === spellId && this.wasCastStarted) {\r\n      this.castsFinished += 1;\r\n    }\r\n    this.wasCastStarted = false;\r\n  }\r\n\r\n  addToCancelledList() {\r\n    if (!this.beginCastSpell) {\r\n      return;\r\n    }\r\n    const beginCastAbility = this.beginCastSpell.ability;\r\n    if (!this.cancelledSpellList[beginCastAbility.guid]) {\r\n      this.cancelledSpellList[beginCastAbility.guid] = {\r\n        'spellName': beginCastAbility.name,\r\n        'amount': 1,\r\n      };\r\n    } else {\r\n      this.cancelledSpellList[beginCastAbility.guid].amount += 1;\r\n    }\r\n    debug && this.log(beginCastAbility.name + ' cast cancelled');\r\n  }\r\n  get totalCasts() {\r\n    return this.castsCancelled + this.castsFinished;\r\n  }\r\n\r\n  get cancelledPercentage() {\r\n    return this.castsCancelled / this.totalCasts;\r\n  }\r\n\r\n  get cancelledCastSuggestionThresholds() {\r\n    return {\r\n      actual: this.cancelledPercentage,\r\n      isGreaterThan: {\r\n        minor: 0.02,\r\n        average: 0.05,\r\n        major: 0.15,\r\n      },\r\n      style: ThresholdStyle.PERCENTAGE,\r\n    };\r\n  }\r\n\r\n  onFightend() {\r\n    debug &&\r\n    console.log(\r\n      formatMilliseconds(this.owner.fightDuration),\r\n      'Casts Finished:',\r\n      `${formatNumber(this.castsFinished)}`,\r\n    );\r\n    debug &&\r\n    console.log(\r\n      formatMilliseconds(this.owner.fightDuration),\r\n      'Casts Cancelled:',\r\n      `${formatNumber(this.castsCancelled)}`,\r\n    );\r\n  }\r\n\r\n  statistic() {\r\n    return (\r\n      <Statistic\r\n        position={STATISTIC_ORDER.CORE(10)}\r\n        size=\"small\"\r\n        className=\"value\"\r\n        tooltip={(\r\n          <>\r\n            You cast {this.totalCasts} spells.\r\n            <ul>\r\n              <li>{this.castsFinished} casts were completed</li>\r\n              <li>{this.castsCancelled} casts were cancelled</li>\r\n            </ul>\r\n          </>\r\n        )}\r\n      >\r\n        <BoringValueText label=\"Cancelled Casts\">\r\n          <CrossIcon /> {formatPercentage(this.cancelledPercentage)}% <small>Casts Cancelled</small>\r\n        </BoringValueText>\r\n      </Statistic>\r\n    );\r\n  }\r\n}\r\n\r\nexport default CancelledCasts;\r\n","import React from 'react';\r\n\r\nimport Analyzer from 'parser/core/Analyzer';\r\nimport { ThresholdStyle } from 'parser/core/ParseResults';\r\nimport Panel from 'interface/others/Panel';\r\nimport { STATISTIC_ORDER } from 'interface/others/StatisticBox';\r\nimport Statistic from 'interface/statistics/Statistic';\r\nimport { formatPercentage } from 'common/format';\r\nimport ResourceBreakdown from 'parser/shared/modules/resources/resourcetracker/ResourceBreakdown';\r\nimport BoringResourceValue from 'interface/statistics/components/BoringResourceValue';\r\nimport RESOURCE_TYPES from 'game/RESOURCE_TYPES';\r\nimport { RESOURCES_HUNTER_AVERAGE_THRESHOLD, RESOURCES_HUNTER_MAJOR_THRESHOLD, RESOURCES_HUNTER_MINOR_THRESHOLD } from 'parser/hunter/shared/constants';\r\n\r\nimport FocusTracker from './FocusTracker';\r\n\r\nclass FocusDetails extends Analyzer {\r\n  static dependencies = {\r\n    focusTracker: FocusTracker,\r\n  };\r\n\r\n  protected focusTracker!: FocusTracker;\r\n\r\n  get wasted() {\r\n    return this.focusTracker.wasted || 0;\r\n  }\r\n\r\n  get total() {\r\n    return this.focusTracker.wasted + this.focusTracker.generated || 0;\r\n  }\r\n\r\n  get wastedPercent() {\r\n    return this.wasted / this.total || 0;\r\n  }\r\n\r\n  get focusGeneratorWasteThresholds() {\r\n    return {\r\n      actual: 1 - this.wastedPercent,\r\n      isLessThan: {\r\n        minor: 1 - RESOURCES_HUNTER_MINOR_THRESHOLD,\r\n        average: 1 - RESOURCES_HUNTER_AVERAGE_THRESHOLD,\r\n        major: 1 - RESOURCES_HUNTER_MAJOR_THRESHOLD,\r\n      },\r\n      style: ThresholdStyle.PERCENTAGE,\r\n    };\r\n  }\r\n\r\n  statistic() {\r\n    return (\r\n      <Statistic\r\n        position={STATISTIC_ORDER.CORE(11)}\r\n        size=\"flexible\"\r\n        tooltip={`You wasted ${this.wasted} out of ${this.total} Focus from generators.`}\r\n      >\r\n        <BoringResourceValue\r\n          resource={RESOURCE_TYPES.FOCUS}\r\n          value={`${formatPercentage(this.wastedPercent)} %`}\r\n          label=\"Wasted generator Focus\"\r\n        />\r\n      </Statistic>\r\n    );\r\n  }\r\n\r\n  tab() {\r\n    return {\r\n      title: 'Focus',\r\n      url: 'focus',\r\n      render: () => (\r\n        <Panel>\r\n          <ResourceBreakdown\r\n            tracker={this.focusTracker}\r\n            showSpenders\r\n          />\r\n        </Panel>\r\n      ),\r\n    };\r\n  }\r\n}\r\n\r\nexport default FocusDetails;\r\n","import React from 'react';\r\n\r\nimport RESOURCE_TYPES from 'game/RESOURCE_TYPES';\r\nimport { formatPercentage, formatThousands } from 'common/format';\r\nimport { STATISTIC_ORDER } from 'interface/others/StatisticBox';\r\nimport Tooltip from 'common/Tooltip';\r\nimport RegenResourceCapTracker from 'parser/shared/modules/resources/resourcetracker/RegenResourceCapTracker';\r\nimport StatisticBar from 'interface/statistics/StatisticBar';\r\n\r\nimport { AutoSizer } from 'react-virtualized';\r\nimport FlushLineChart from 'interface/others/FlushLineChart';\r\nimport Events, { CastEvent, DamageEvent, EnergizeEvent } from 'parser/core/Events';\r\nimport { ThresholdStyle, When } from 'parser/core/ParseResults';\r\nimport { HUNTER_BASE_FOCUS_MAX, HUNTER_BASE_FOCUS_REGEN } from 'parser/hunter/shared/constants';\r\nimport { Options, SELECTED_PLAYER } from 'parser/core/Analyzer';\r\nimport { i18n } from '@lingui/core';\r\nimport { t } from '@lingui/macro';\r\n\r\n/**\r\n * Sets up RegenResourceCapTracker to accurately track the regenerating focus of hunters.\r\n * Taking into account the effect of buffs, talents, and items on the focus cost of abilities, the maximum focus amount, and the regeneration rate.\r\n */\r\nclass FocusCapTracker extends RegenResourceCapTracker {\r\n  static dependencies = {\r\n    ...RegenResourceCapTracker.dependencies,\r\n  };\r\n\r\n  static resourceType = RESOURCE_TYPES.FOCUS;\r\n  static baseRegenRate = HUNTER_BASE_FOCUS_REGEN;\r\n  static isRegenHasted = true;\r\n  bySecond: { [key: number]: number } = {};\r\n\r\n  constructor(options: Options) {\r\n    super(options);\r\n    this.addEventListener(Events.energize.by(SELECTED_PLAYER), this.onEnergizeByPlayer);\r\n  }\r\n\r\n  get wastedPercent() {\r\n    return (this.missedRegen / this.naturalRegen) || 0;\r\n  }\r\n\r\n  get focusNaturalRegenWasteThresholds() {\r\n    return {\r\n      actual: 1 - this.wastedPercent,\r\n      isLessThan: {\r\n        minor: 0.9,\r\n        average: 0.85,\r\n        major: 0.8,\r\n      },\r\n      style: ThresholdStyle.PERCENTAGE,\r\n    };\r\n  }\r\n\r\n  currentMaxResource() {\r\n    return HUNTER_BASE_FOCUS_MAX;\r\n  }\r\n\r\n  onEnergizeByPlayer(event: EnergizeEvent) {\r\n    const secondsIntoFight = Math.floor((event.timestamp - this.owner.fight.start_time) / 1000);\r\n    this.bySecond[secondsIntoFight] = (this.bySecond[secondsIntoFight] || this.current);\r\n  }\r\n\r\n  onCast(event: CastEvent) {\r\n    super.onCast(event);\r\n    const secondsIntoFight = Math.floor((event.timestamp - this.owner.fight.start_time) / 1000);\r\n    this.bySecond[secondsIntoFight] = (this.bySecond[secondsIntoFight] || this.current);\r\n  }\r\n\r\n  onDamage(event: DamageEvent) {\r\n    super.onDamage(event);\r\n    const secondsIntoFight = Math.floor((event.timestamp - this.owner.fight.start_time) / 1000);\r\n    this.bySecond[secondsIntoFight] = (this.bySecond[secondsIntoFight] || this.current);\r\n  }\r\n\r\n  suggestions(when: When) {\r\n    when(this.focusNaturalRegenWasteThresholds).addSuggestion((suggest, actual, recommended) => suggest(<>You're allowing your focus to reach its cap. While at its maximum value you miss out on the focus that would have regenerated. Although it can be beneficial to let focus pool ready to be used at the right time, try to spend some before it reaches the cap.</>)\r\n      .icon('ability_hunter_focusfire')\r\n      .actual(i18n._(t('hunter.marksmanship.suggestions.focusCapTracker.focusLost')`${formatPercentage(1 - actual)}% regenerated focus lost due to being capped.`))\r\n      .recommended(`<${formatPercentage(recommended, 0)}% is recommended.`));\r\n  }\r\n\r\n  statistic() {\r\n    const data = Object.entries(this.bySecond).map(([sec, val]) => ({ 'time': sec, 'val': val }));\r\n    return (\r\n      <StatisticBar\r\n        position={STATISTIC_ORDER.CORE(1)}\r\n        wide\r\n        style={{ marginBottom: 20, overflow: 'hidden' }} // since this is in a group, reducing margin should be fine\r\n        large={false}\r\n        ultrawide={false}\r\n      >\r\n        <Tooltip content={<>Natural Focus regen lost: <strong>{formatThousands(this.missedRegen)}</strong> <br /> That is <strong>{formatPercentage(this.wastedPercent)}%</strong> of natural regenerated focus over the course of the encounter.</>}>\r\n          <div className=\"flex\">\r\n            <div className=\"flex-sub icon\">\r\n              <img\r\n                src=\"/img/bullseye.png\"\r\n                alt=\"Focus\"\r\n              />\r\n            </div>\r\n            <div\r\n              className=\"flex-sub value\"\r\n              style={{ width: 100 }}\r\n            >\r\n              Focus\r\n            </div>\r\n            <div className=\"flex-main chart\">\r\n              {this.missedRegen > 0 && (\r\n                <AutoSizer disableWidth>\r\n                  {({ height }) => (\r\n                    <FlushLineChart data={data} duration={this.owner.fightDuration / 1000} height={height} />\r\n                  )}\r\n                </AutoSizer>\r\n              )}\r\n            </div>\r\n          </div>\r\n        </Tooltip>\r\n      </StatisticBar>\r\n    );\r\n  }\r\n}\r\n\r\nexport default FocusCapTracker;\r\n","import CoreDeathTracker from 'parser/shared/modules/DeathTracker';\r\nimport { TIME_SPENT_DEAD_THRESHOLD } from 'parser/hunter/shared/constants';\r\n\r\n/**\r\n * Due to combatlog restrictions it is not possible to know whether the hunter cast Feign Death or the hunter actually died.\r\n * For this module we assume any single death lasting less than 0.2% of an encounter (1.2 seconds on a 10 minute fight) was due to Feign Death, and thus we remove it as it is improbable anyone is that fast to ress anyone.\r\n */\r\nclass DeathTracker extends CoreDeathTracker {\r\n  static dependencies = {\r\n    ...CoreDeathTracker.dependencies,\r\n  };\r\n\r\n  deathPercentageOfEncounter(deathTimestamp: number, ressTimestamp: number) {\r\n    return (ressTimestamp - deathTimestamp) / this.owner.fightDuration;\r\n  }\r\n\r\n  resurrect(event: any) {\r\n    this.lastResurrectionTimestamp = this.owner.currentTimestamp;\r\n    const percentSpentDead = this.deathPercentageOfEncounter(this.lastDeathTimestamp, this.lastResurrectionTimestamp);\r\n    if (percentSpentDead > TIME_SPENT_DEAD_THRESHOLD) {\r\n      super.resurrect(event);\r\n    } else {\r\n      this.isAlive = true;\r\n      this.deaths.pop();\r\n    }\r\n  }\r\n}\r\n\r\nexport default DeathTracker;\r\n","import React from 'react';\r\n\r\nimport SPELLS from 'common/SPELLS';\r\nimport Analyzer, { Options, SELECTED_PLAYER } from 'parser/core/Analyzer';\r\nimport SpellUsable from 'parser/shared/modules/SpellUsable';\r\nimport { formatNumber } from 'common/format';\r\nimport SPECS from 'game/SPECS';\r\nimport Statistic from 'interface/statistics/Statistic';\r\nimport STATISTIC_CATEGORY from 'interface/others/STATISTIC_CATEGORY';\r\nimport STATISTIC_ORDER from 'interface/others/STATISTIC_ORDER';\r\nimport BoringSpellValueText from 'interface/statistics/components/BoringSpellValueText';\r\nimport Events, { CastEvent } from 'parser/core/Events';\r\nimport RESOURCE_TYPES from 'game/RESOURCE_TYPES';\r\nimport { BM_CDR_PER_FOCUS, MM_SV_CDR_PER_FOCUS } from 'parser/hunter/shared/constants';\r\n\r\n/**\r\n * Every 20 (MM/SV) or 30 (BM) focus you spend reduces the remaining cooldown of Exhilaration by 1 sec.\r\n *\r\n * Example log:\r\n * https://www.warcraftlogs.com/reports/GWwtNLVQD8adn6q9#fight=5&type=summary&source=18\r\n */\r\n\r\nclass NaturalMending extends Analyzer {\r\n  static dependencies = {\r\n    spellUsable: SpellUsable,\r\n  };\r\n  cdrPerFocus = MM_SV_CDR_PER_FOCUS;\r\n  effectiveExhilReductionMs = 0;\r\n  wastedExhilReductionMs = 0;\r\n  lastFocusCost = 0;\r\n  protected spellUsable!: SpellUsable;\r\n\r\n  constructor(options: Options) {\r\n    super(options);\r\n    this.active = this.selectedCombatant.hasTalent(SPELLS.NATURAL_MENDING_TALENT.id);\r\n    if (this.active && this.selectedCombatant.spec === SPECS.BEAST_MASTERY_HUNTER) {\r\n      this.cdrPerFocus = BM_CDR_PER_FOCUS;\r\n    }\r\n    this.addEventListener(Events.cast.by(SELECTED_PLAYER), this.onCast);\r\n  }\r\n\r\n  onCast(event: CastEvent) {\r\n    const resource = event.classResources?.find(resource => resource.type === RESOURCE_TYPES.FOCUS.id);\r\n    if (!resource) {\r\n      return;\r\n    }\r\n\r\n    this.lastFocusCost = resource.cost || 0;\r\n    const cooldownReductionMS = this.cdrPerFocus * this.lastFocusCost;\r\n    if (!this.spellUsable.isOnCooldown(SPELLS.EXHILARATION.id)) {\r\n      this.wastedExhilReductionMs += cooldownReductionMS;\r\n      return;\r\n    }\r\n    if (this.spellUsable.cooldownRemaining(SPELLS.EXHILARATION.id) < cooldownReductionMS) {\r\n      const effectiveReductionMs = this.spellUsable.reduceCooldown(SPELLS.EXHILARATION.id, cooldownReductionMS);\r\n      this.effectiveExhilReductionMs += effectiveReductionMs;\r\n      this.wastedExhilReductionMs += (cooldownReductionMS - effectiveReductionMs);\r\n      return;\r\n    }\r\n    this.effectiveExhilReductionMs += this.spellUsable.reduceCooldown(SPELLS.EXHILARATION.id, cooldownReductionMS);\r\n  }\r\n\r\n  statistic() {\r\n    return (\r\n      <Statistic\r\n        position={STATISTIC_ORDER.OPTIONAL(14)}\r\n        size=\"flexible\"\r\n        category={STATISTIC_CATEGORY.TALENTS}\r\n      >\r\n        <BoringSpellValueText spell={SPELLS.NATURAL_MENDING_TALENT}>\r\n          <>\r\n            {formatNumber(this.effectiveExhilReductionMs / 1000)}s/{formatNumber((this.wastedExhilReductionMs + this.effectiveExhilReductionMs) / 1000)}s <small> cooldown reduction</small>\r\n          </>\r\n        </BoringSpellValueText>\r\n      </Statistic>\r\n    );\r\n  }\r\n}\r\n\r\nexport default NaturalMending;\r\n","import React from 'react';\r\nimport Analyzer, { Options } from 'parser/core/Analyzer';\r\nimport SPELLS from 'common/SPELLS';\r\nimport { formatPercentage } from 'common/format';\r\nimport Statistic from 'interface/statistics/Statistic';\r\nimport STATISTIC_CATEGORY from 'interface/others/STATISTIC_CATEGORY';\r\nimport STATISTIC_ORDER from 'interface/others/STATISTIC_ORDER';\r\nimport BoringSpellValueText from 'interface/statistics/components/BoringSpellValueText';\r\nimport UptimeIcon from 'interface/icons/Uptime';\r\n\r\n/**\r\n * Trailblazer increases your movement speed by 30% whenever you have not\r\n * attacked for 3 seconds.\r\n *\r\n * Example log:\r\n * https://www.warcraftlogs.com/reports/1YZkWvbFGNgTA7L4#fight=3&type=summary&source=97\r\n */\r\nclass Trailblazer extends Analyzer {\r\n\r\n  constructor(options: Options) {\r\n    super(options);\r\n    this.active = this.selectedCombatant.hasTalent(SPELLS.TRAILBLAZER_TALENT.id);\r\n  }\r\n\r\n  get percentUptime() {\r\n    return this.selectedCombatant.getBuffUptime(SPELLS.TRAILBLAZER_BUFF.id) / this.owner.fightDuration;\r\n  }\r\n\r\n  statistic() {\r\n    return (\r\n      <Statistic\r\n        position={STATISTIC_ORDER.OPTIONAL(14)}\r\n        size=\"flexible\"\r\n        category={STATISTIC_CATEGORY.TALENTS}\r\n      >\r\n        <BoringSpellValueText spell={SPELLS.TRAILBLAZER_TALENT}>\r\n          <>\r\n            <UptimeIcon /> {formatPercentage(this.percentUptime)}% <small>uptime</small>\r\n          </>\r\n        </BoringSpellValueText>\r\n      </Statistic>\r\n    );\r\n  }\r\n}\r\n\r\nexport default Trailblazer;\r\n","import React from 'react';\r\n\r\nimport SPELLS from 'common/SPELLS';\r\nimport Analyzer, { Options, SELECTED_PLAYER } from 'parser/core/Analyzer';\r\n\r\nimport SpellUsable from 'parser/shared/modules/SpellUsable';\r\nimport ItemDamageDone from 'interface/ItemDamageDone';\r\nimport Abilities from 'parser/core/modules/Abilities';\r\nimport Statistic from 'interface/statistics/Statistic';\r\nimport STATISTIC_CATEGORY from 'interface/others/STATISTIC_CATEGORY';\r\nimport STATISTIC_ORDER from 'interface/others/STATISTIC_ORDER';\r\nimport BoringSpellValueText from 'interface/statistics/components/BoringSpellValueText';\r\nimport Events, { AnyEvent, DamageEvent } from 'parser/core/Events';\r\nimport { AMOC_BASE_DURATION, AMOC_TICK_RATE, MS_BUFFER } from 'parser/hunter/shared/constants';\r\n\r\n/**\r\n * Summons a flock of crows to attack your target over the next 15 sec. If the target dies while under attack, A Murder of Crows' cooldown is reset.\r\n *\r\n * Example log:\r\n * https://www.warcraftlogs.com/reports/GFM9qZQy63zbxh7L#fight=49&type=damage-done&source=299&ability=131900\r\n */\r\n\r\nconst debug = false;\r\n\r\nclass AMurderOfCrows extends Analyzer {\r\n\r\n  static dependencies = {\r\n    spellUsable: SpellUsable,\r\n    abilities: Abilities,\r\n  };\r\n  damage = 0;\r\n  casts = 0;\r\n  applicationTimestamp: number = 0;\r\n  lastDamageTick: number = 0;\r\n  crowsEndingTimestamp: number = 0;\r\n  maxCasts = 0;\r\n  resets = 0;\r\n  protected spellUsable!: SpellUsable;\r\n  protected abilities!: Abilities;\r\n\r\n  constructor(options: Options) {\r\n    super(options);\r\n    this.active = this.selectedCombatant.hasTalent(SPELLS.A_MURDER_OF_CROWS_TALENT.id);\r\n    if (this.active) {\r\n      (options.abilities as Abilities).add({\r\n        spell: SPELLS.A_MURDER_OF_CROWS_TALENT,\r\n        category: Abilities.SPELL_CATEGORIES.ROTATIONAL,\r\n        cooldown: 60,\r\n        gcd: {\r\n          base: 1500,\r\n        },\r\n        castEfficiency: {\r\n          suggestion: true,\r\n          recommendedEfficiency: 0.85,\r\n          maxCasts: () => this.maxCasts,\r\n        },\r\n      });\r\n    }\r\n    this.addEventListener(Events.any, this.checkForReset);\r\n    this.addEventListener(Events.cast.by(SELECTED_PLAYER).spell(SPELLS.A_MURDER_OF_CROWS_TALENT), this.onCast);\r\n    this.addEventListener(Events.damage.by(SELECTED_PLAYER).spell(SPELLS.A_MURDER_OF_CROWS_DEBUFF), this.onDamage);\r\n    this.addEventListener(Events.fightend, this.adjustMaxCasts);\r\n  }\r\n\r\n  checkForReset(event: AnyEvent) {\r\n    // Checks if we've had atleast 1 damage tick of the currently applied crows, and checks that crows is in fact on cooldown.\r\n    if (this.lastDamageTick && this.spellUsable.isOnCooldown(SPELLS.A_MURDER_OF_CROWS_TALENT.id)\r\n      // Checks whether the current damage event happened while the time passed since crows application is less than the crows duration\r\n      && this.applicationTimestamp && event.timestamp < this.crowsEndingTimestamp\r\n      // Checks to see if more than 1 second has passed since last tick\r\n      && event.timestamp > this.lastDamageTick + AMOC_TICK_RATE + MS_BUFFER) {\r\n      // If more than 1 second has passed and less than the duration has elapsed, we can assume that crows has been reset, and thus we reset the CD.\r\n      this.spellUsable.endCooldown(SPELLS.A_MURDER_OF_CROWS_TALENT.id, false, event.timestamp);\r\n      this.maxCasts += 1;\r\n      this.resets += 1;\r\n      debug && this.log('Crows was reset');\r\n    }\r\n  }\r\n\r\n  onCast() {\r\n    this.casts += 1;\r\n    this.applicationTimestamp = 0;\r\n    this.lastDamageTick = 0;\r\n  }\r\n\r\n  onDamage(event: DamageEvent) {\r\n    if (this.casts === 0) {\r\n      this.casts += 1;\r\n      this.spellUsable.beginCooldown(SPELLS.A_MURDER_OF_CROWS_TALENT.id, event);\r\n      this.applicationTimestamp = this.owner.fight.start_time;\r\n    }\r\n    //This accounts for the travel time of crows, since the first damage marks the time where the crows debuff is applied\r\n    if (this.lastDamageTick === 0 && this.applicationTimestamp === 0) {\r\n      this.applicationTimestamp = event.timestamp;\r\n      this.crowsEndingTimestamp = this.applicationTimestamp + AMOC_BASE_DURATION;\r\n    }\r\n    this.lastDamageTick = event.timestamp;\r\n    this.damage += event.amount + (event.absorbed || 0);\r\n  }\r\n\r\n  adjustMaxCasts() {\r\n    this.maxCasts += Math.ceil(this.owner.fightDuration / 60000);\r\n  }\r\n\r\n  statistic() {\r\n    return (\r\n      <Statistic\r\n        position={STATISTIC_ORDER.OPTIONAL(13)}\r\n        size=\"flexible\"\r\n        category={STATISTIC_CATEGORY.TALENTS}\r\n      >\r\n        <BoringSpellValueText spell={SPELLS.A_MURDER_OF_CROWS_TALENT}>\r\n          <>\r\n            <ItemDamageDone amount={this.damage} /><br />\r\n            {this.resets} <small>resets</small>\r\n          </>\r\n        </BoringSpellValueText>\r\n      </Statistic>\r\n    );\r\n  }\r\n}\r\n\r\nexport default AMurderOfCrows;\r\n","import Analyzer, { Options, SELECTED_PLAYER } from 'parser/core/Analyzer';\r\nimport SPELLS from 'common/SPELLS';\r\nimport React from 'react';\r\nimport SPECS from 'game/SPECS';\r\nimport { formatNumber } from 'common/format';\r\nimport Statistic from 'interface/statistics/Statistic';\r\nimport STATISTIC_CATEGORY from 'interface/others/STATISTIC_CATEGORY';\r\nimport STATISTIC_ORDER from 'interface/others/STATISTIC_ORDER';\r\nimport BoringSpellValueText from 'interface/statistics/components/BoringSpellValueText';\r\nimport Events, { CastEvent } from 'parser/core/Events';\r\nimport { BASELINE_TURTLE_CHEETAH_CD, BORN_TO_BE_WILD_AFFECTED_SPELLS } from 'parser/hunter/shared/constants';\r\nimport { BASELINE_AOTE_CD } from 'parser/hunter/survival/constants';\r\n\r\n/**\r\n * Reduces the cooldowns of Aspect of the Cheetah and Aspect of the Turtle by 20%.\r\n * For Survival it also reduces the cooldown of Aspect of the Eagle.\r\n *\r\n * Example log:\r\n * https://www.warcraftlogs.com/reports/1YZkWvbFGNgTA7L4#fight=3&type=summary&source=97\r\n */\r\n\r\nconst debug = false;\r\n\r\nclass BornToBeWild extends Analyzer {\r\n\r\n  _spells = {\r\n    [SPELLS.ASPECT_OF_THE_CHEETAH.id]: {\r\n      effectiveCDR: 0,\r\n      lastCast: 0,\r\n      baseCD: BASELINE_TURTLE_CHEETAH_CD,\r\n    },\r\n    [SPELLS.ASPECT_OF_THE_TURTLE.id]: {\r\n      effectiveCDR: 0,\r\n      lastCast: 0,\r\n      baseCD: BASELINE_TURTLE_CHEETAH_CD,\r\n    },\r\n    [SPELLS.ASPECT_OF_THE_EAGLE.id]: {\r\n      effectiveCDR: 0,\r\n      lastCast: 0,\r\n      baseCD: BASELINE_AOTE_CD,\r\n    },\r\n  };\r\n\r\n  hasEagle = false;\r\n\r\n  constructor(options: Options) {\r\n    super(options);\r\n    this.active = this.selectedCombatant.hasTalent(SPELLS.BORN_TO_BE_WILD_TALENT.id);\r\n    this.hasEagle = this.selectedCombatant.spec === SPECS.SURVIVAL_HUNTER;\r\n    this.addEventListener(Events.cast.by(SELECTED_PLAYER).spell(BORN_TO_BE_WILD_AFFECTED_SPELLS), this.onCast);\r\n  }\r\n\r\n  get effectiveTotalCDR() {\r\n    return Object.values(this._spells)\r\n      .map(spell => spell.effectiveCDR)\r\n      .reduce((total, current) => total + current, 0);\r\n  }\r\n\r\n  onCast(event: CastEvent) {\r\n    const spellId = event.ability.guid;\r\n    const spell = this._spells[spellId];\r\n    debug && console.log(event.timestamp, `${SPELLS[spellId].name} cast - time since last cast: `, spell.lastCast !== 0 ? (event.timestamp - spell.lastCast) / 1000 : 'no previous cast');\r\n    if (spell.lastCast && event.timestamp < spell.lastCast + spell.baseCD) {\r\n      spell.effectiveCDR += spell.baseCD - (event.timestamp - spell.lastCast);\r\n    }\r\n    spell.lastCast = event.timestamp;\r\n  }\r\n\r\n  statistic() {\r\n    return (\r\n      <Statistic\r\n        position={STATISTIC_ORDER.OPTIONAL(14)}\r\n        size=\"flexible\"\r\n        category={STATISTIC_CATEGORY.TALENTS}\r\n        tooltip={(\r\n          <>\r\n            Effective CDR constitutes the time that was left of the original CD (before reduction from Born To Be Wild) when you cast it again as that is the effective cooldown reduction it provided for you.\r\n            <ul>\r\n              {this.hasEagle &&\r\n              <li>Aspect of the Eagle: {formatNumber(this._spells[SPELLS.ASPECT_OF_THE_EAGLE.id].effectiveCDR / 1000)}s</li>}\r\n              <li>Aspect of the Cheetah: {formatNumber(this._spells[SPELLS.ASPECT_OF_THE_CHEETAH.id].effectiveCDR / 1000)}s</li>\r\n              <li>Aspect of the Turtle: {formatNumber(this._spells[SPELLS.ASPECT_OF_THE_TURTLE.id].effectiveCDR / 1000)}s</li>\r\n            </ul>\r\n          </>\r\n        )}\r\n      >\r\n        <BoringSpellValueText spell={SPELLS.BORN_TO_BE_WILD_TALENT}>\r\n          <>\r\n            {formatNumber(this.effectiveTotalCDR / 1000)}s <small>total effective CDR</small>\r\n          </>\r\n        </BoringSpellValueText>\r\n      </Statistic>\r\n    );\r\n  }\r\n}\r\n\r\nexport default BornToBeWild;\r\n","import Analyzer, { Options, SELECTED_PLAYER } from 'parser/core/Analyzer';\r\nimport SPELLS from 'common/SPELLS';\r\nimport React from 'react';\r\nimport Statistic from 'interface/statistics/Statistic';\r\nimport STATISTIC_CATEGORY from 'interface/others/STATISTIC_CATEGORY';\r\nimport STATISTIC_ORDER from 'interface/others/STATISTIC_ORDER';\r\nimport BoringSpellValueText from 'interface/statistics/components/BoringSpellValueText';\r\nimport Events from 'parser/core/Events';\r\nimport SPECS from 'game/SPECS';\r\nimport Abilities from 'parser/core/modules/Abilities';\r\n\r\n/**\r\n * Fires a magical projectile, tethering the enemy and any other enemies within\r\n * 5 yards for 10 sec, rooting them in place for 5 sec if they move more than 5\r\n * yards from the arrow. Example log:\r\n * https://www.warcraftlogs.com/reports/qZRdFv9Apg74wmMV#fight=3&type=damage-done\r\n */\r\n\r\nclass BindingShot extends Analyzer {\r\n\r\n  static dependencies = {\r\n    abilities: Abilities,\r\n  };\r\n  _roots = 0;\r\n  _applications = 0;\r\n  _casts = 0;\r\n  category: STATISTIC_CATEGORY;\r\n  protected abilities!: Abilities;\r\n\r\n  constructor(options: Options) {\r\n    super(options);\r\n    this.active = this.selectedCombatant.hasTalent(SPELLS.BINDING_SHOT_TALENT.id) || this.selectedCombatant.spec === SPECS.MARKSMANSHIP_HUNTER;\r\n    this.category = this.selectedCombatant.spec === SPECS.MARKSMANSHIP_HUNTER ? STATISTIC_CATEGORY.GENERAL : STATISTIC_CATEGORY.TALENTS;\r\n    this.addEventListener(Events.applydebuff.by(SELECTED_PLAYER).spell(SPELLS.BINDING_SHOT_ROOT), this.onRoot);\r\n    this.addEventListener(Events.applydebuff.by(SELECTED_PLAYER).spell(SPELLS.BINDING_SHOT_TETHER), this.onTether);\r\n    this.addEventListener(Events.cast.by(SELECTED_PLAYER).spell(SPELLS.BINDING_SHOT_TALENT), this.onCast);\r\n    if (this.active) {\r\n      (options.abilities as Abilities).add({\r\n        spell: SPELLS.BINDING_SHOT_TALENT,\r\n        category: Abilities.SPELL_CATEGORIES.UTILITY,\r\n        cooldown: 45,\r\n        gcd: {\r\n          base: 1500,\r\n        },\r\n      });\r\n    }\r\n  }\r\n\r\n  onTether() {\r\n    this._applications += 1;\r\n  }\r\n\r\n  onRoot() {\r\n    this._roots += 1;\r\n  }\r\n\r\n  onCast() {\r\n    this._casts += 1;\r\n  }\r\n\r\n  statistic() {\r\n    if (this._casts > 0) {\r\n      return (\r\n        <Statistic\r\n          position={STATISTIC_ORDER.OPTIONAL(14)}\r\n          size=\"flexible\"\r\n          category={this.category}\r\n        >\r\n          <BoringSpellValueText spell={SPELLS.BINDING_SHOT_TALENT}>\r\n            <>\r\n              {this._roots} <small>roots</small> / {this._applications} <small>possible</small> <br />\r\n              {this._casts} <small>casts</small>\r\n            </>\r\n          </BoringSpellValueText>\r\n        </Statistic>\r\n      );\r\n    } else {\r\n      return null;\r\n    }\r\n  }\r\n}\r\n\r\nexport default BindingShot;\r\n","import React from 'react';\r\n\r\nimport { Options, SELECTED_PLAYER } from 'parser/core/Analyzer';\r\nimport Abilities from 'parser/core/modules/Abilities';\r\nimport SPELLS from 'common/SPELLS';\r\nimport STATISTIC_ORDER from 'interface/others/STATISTIC_ORDER';\r\nimport Events from 'parser/core/Events';\r\nimport { KILL_SHOT_EXECUTE_RANGE } from 'parser/hunter/shared/constants';\r\nimport Statistic from 'interface/statistics/Statistic';\r\nimport STATISTIC_CATEGORY from 'interface/others/STATISTIC_CATEGORY';\r\nimport BoringSpellValueText from 'interface/statistics/components/BoringSpellValueText';\r\nimport ItemDamageDone from 'interface/ItemDamageDone';\r\nimport SPECS from 'game/SPECS';\r\nimport ExecuteHelper from 'parser/shared/ExecuteHelper';\r\nimport FlayedShot from 'parser/hunter/shared/modules/spells/covenants/venthyr/FlayedShot';\r\n\r\nclass KillShot extends ExecuteHelper {\r\n  static executeSources = SELECTED_PLAYER;\r\n  static lowerThreshold = KILL_SHOT_EXECUTE_RANGE;\r\n  static executeOutsideRangeEnablers = [SPELLS.FLAYERS_MARK];\r\n  static modifiesDamage = false;\r\n\r\n  static dependencies = {\r\n    ...ExecuteHelper.dependencies,\r\n    abilities: Abilities,\r\n    flayedShot: FlayedShot,\r\n  };\r\n\r\n  maxCasts: number = 0;\r\n  activeKillShotSpell = this.selectedCombatant.spec === SPECS.SURVIVAL_HUNTER ? SPELLS.KILL_SHOT_SV : SPELLS.KILL_SHOT_MM_BM;\r\n\r\n  protected abilities!: Abilities;\r\n  protected flayedShot!: FlayedShot;\r\n\r\n  constructor(options: Options) {\r\n    super(options);\r\n\r\n    this.addEventListener(Events.fightend, this.adjustMaxCasts);\r\n    const ctor = this.constructor as typeof ExecuteHelper;\r\n    ctor.executeSpells.push(this.activeKillShotSpell);\r\n\r\n    (options.abilities as Abilities).add({\r\n      spell: this.activeKillShotSpell,\r\n      category: Abilities.SPELL_CATEGORIES.ROTATIONAL,\r\n      charges: this.selectedCombatant.hasTalent(SPELLS.DEAD_EYE_TALENT.id) ? 2 : 1,\r\n      cooldown: 10,\r\n      gcd: {\r\n        base: 1500,\r\n      },\r\n      castEfficiency: {\r\n        suggestion: true,\r\n        recommendedEfficiency: 0.85,\r\n        maxCasts: () => this.maxCasts,\r\n      },\r\n    });\r\n  }\r\n\r\n  adjustMaxCasts() {\r\n    this.maxCasts += Math.ceil(this.totalExecuteDuration / 10000);\r\n    if (this.selectedCombatant.hasTalent(SPELLS.DEAD_EYE_TALENT.id)) {\r\n      this.maxCasts += 1;\r\n    }\r\n    this.maxCasts += this.flayedShot.totalProcs;\r\n  }\r\n\r\n  statistic() {\r\n    return (\r\n      <Statistic\r\n        position={STATISTIC_ORDER.OPTIONAL(13)}\r\n        size=\"flexible\"\r\n        category={STATISTIC_CATEGORY.GENERAL}\r\n      >\r\n        <BoringSpellValueText spell={this.activeKillShotSpell}>\r\n          <>\r\n            <ItemDamageDone amount={this.damage} />\r\n          </>\r\n        </BoringSpellValueText>\r\n      </Statistic>\r\n    );\r\n  }\r\n}\r\n\r\nexport default KillShot;\r\n","import RESOURCE_TYPES from 'game/RESOURCE_TYPES';\r\n\r\nimport SpellResourceCost from 'parser/shared/modules/SpellResourceCost';\r\nimport SPELLS from 'common/SPELLS';\r\nimport { CastEvent } from 'parser/core/Events';\r\nimport { LNL_COST_MULTIPLIER } from 'parser/hunter/marksmanship/constants';\r\nimport { VIPERS_VENOM_COST_MULTIPLIER } from 'parser/hunter/survival/constants';\r\nimport { Options } from 'parser/core/Analyzer';\r\n\r\nclass SpellFocusCost extends SpellResourceCost {\r\n  static resourceType = RESOURCE_TYPES.FOCUS;\r\n\r\n  lockAndLoad: boolean;\r\n  vipersVenom: boolean;\r\n\r\n  constructor(options: Options) {\r\n    super(options);\r\n    this.lockAndLoad = this.selectedCombatant.hasTalent(SPELLS.LOCK_AND_LOAD_TALENT.id);\r\n    this.vipersVenom = this.selectedCombatant.hasTalent(SPELLS.VIPERS_VENOM_TALENT.id);\r\n  }\r\n\r\n  getResourceCost(event: CastEvent) {\r\n    const cost = super.getResourceCost(event);\r\n    const spellId = event.ability.guid;\r\n    if (this.lockAndLoad && this.selectedCombatant.hasBuff(SPELLS.LOCK_AND_LOAD_BUFF.id) && spellId === SPELLS.AIMED_SHOT.id) {\r\n      return cost * LNL_COST_MULTIPLIER;\r\n    }\r\n    if (this.vipersVenom && this.selectedCombatant.hasBuff(SPELLS.VIPERS_VENOM_BUFF.id) && spellId === SPELLS.SERPENT_STING_SV.id) {\r\n      return cost * VIPERS_VENOM_COST_MULTIPLIER;\r\n    }\r\n    return cost;\r\n  }\r\n}\r\n\r\nexport default SpellFocusCost;\r\n","import React from 'react';\r\n\r\nimport Analyzer, { Options, SELECTED_PLAYER } from 'parser/core/Analyzer';\r\nimport Abilities from 'parser/core/modules/Abilities';\r\nimport SPELLS from 'common/SPELLS';\r\nimport Events, { DamageEvent } from 'parser/core/Events';\r\nimport Statistic from 'interface/statistics/Statistic';\r\nimport STATISTIC_ORDER from 'interface/others/STATISTIC_ORDER';\r\nimport STATISTIC_CATEGORY from 'interface/others/STATISTIC_CATEGORY';\r\nimport BoringSpellValueText from 'interface/statistics/components/BoringSpellValueText';\r\nimport Enemies from 'parser/shared/modules/Enemies';\r\nimport UptimeIcon from 'interface/icons/Uptime';\r\nimport { formatNumber, formatPercentage } from 'common/format';\r\nimport CritIcon from 'interface/icons/CriticalStrike';\r\nimport { RESONATING_ARROW_CRIT_INCREASE } from 'parser/hunter/shared/constants';\r\nimport COVENANTS from 'game/shadowlands/COVENANTS';\r\n\r\nclass ResonatingArrow extends Analyzer {\r\n  static dependencies = {\r\n    abilities: Abilities,\r\n    enemies: Enemies,\r\n  };\r\n\r\n  casts: number = 0;\r\n  debuffs: number = 0;\r\n  damage = 0;\r\n\r\n  protected abilities!: Abilities;\r\n  protected enemies!: Enemies;\r\n\r\n  constructor(options: Options) {\r\n    super(options);\r\n\r\n    this.active = this.selectedCombatant.hasCovenant(COVENANTS.KYRIAN.id);\r\n\r\n    if (!this.active) {\r\n      return;\r\n    }\r\n\r\n    (options.abilities as Abilities).add({\r\n      spell: SPELLS.RESONATING_ARROW,\r\n      category: Abilities.SPELL_CATEGORIES.ROTATIONAL,\r\n      cooldown: 60,\r\n      gcd: {\r\n        base: 1500,\r\n      },\r\n      castEfficiency: {\r\n        suggestion: true,\r\n        recommendedEfficiency: 0.9,\r\n      },\r\n    });\r\n\r\n    this.addEventListener(Events.cast.by(SELECTED_PLAYER).spell(SPELLS.RESONATING_ARROW), this.onCast);\r\n    this.addEventListener(Events.applydebuff.by(SELECTED_PLAYER).spell(SPELLS.RESONATING_ARROW_DEBUFF), this.onDebuff);\r\n    this.addEventListener(Events.damage.by(SELECTED_PLAYER).spell(SPELLS.RESONATING_ARROW_DAMAGE), this.onDamage);\r\n  }\r\n\r\n  get uptime() {\r\n    return this.enemies.getBuffUptime(SPELLS.RESONATING_ARROW_DEBUFF.id) / this.owner.fightDuration;\r\n  }\r\n\r\n  onCast() {\r\n    this.casts += 1;\r\n  }\r\n\r\n  onDebuff() {\r\n    this.debuffs += 1;\r\n  }\r\n\r\n  onDamage(event: DamageEvent) {\r\n    this.damage += event.amount + (event.absorbed || 0);\r\n  }\r\n\r\n  statistic() {\r\n    return (\r\n      <Statistic\r\n        position={STATISTIC_ORDER.CORE()}\r\n        size=\"flexible\"\r\n        category={STATISTIC_CATEGORY.COVENANTS}\r\n        tooltip={(\r\n          <>\r\n            You had {this.casts} {this.casts === 1 ? 'cast' : 'casts'} of Resonating Arrow and applied the debuff {this.debuffs} {this.debuffs === 1 ? 'time' : 'times'}.\r\n            <br />\r\n            The direct damage of Resonating Arrow did {this.damage} damage or {formatNumber((this.damage / this.owner.fightDuration) * 1000)} DPS\r\n          </>\r\n        )}\r\n      >\r\n        <BoringSpellValueText spell={SPELLS.RESONATING_ARROW}>\r\n          <>\r\n            <UptimeIcon /> {formatPercentage(this.uptime)}% <small> debuff uptime</small>\r\n            <br />\r\n            <CritIcon /> {formatPercentage(this.uptime * RESONATING_ARROW_CRIT_INCREASE)}% <small>average Critical Strike</small>\r\n          </>\r\n        </BoringSpellValueText>\r\n      </Statistic>\r\n    );\r\n  }\r\n\r\n}\r\n\r\nexport default ResonatingArrow;\r\n","import React from 'react';\r\n\r\nimport Analyzer, { Options, SELECTED_PLAYER } from 'parser/core/Analyzer';\r\nimport Abilities from 'parser/core/modules/Abilities';\r\nimport SPELLS from 'common/SPELLS';\r\nimport Events, { DamageEvent, EnergizeEvent } from 'parser/core/Events';\r\nimport Statistic from 'interface/statistics/Statistic';\r\nimport STATISTIC_ORDER from 'interface/others/STATISTIC_ORDER';\r\nimport STATISTIC_CATEGORY from 'interface/others/STATISTIC_CATEGORY';\r\nimport BoringSpellValueText from 'interface/statistics/components/BoringSpellValueText';\r\nimport ItemDamageDone from 'interface/ItemDamageDone';\r\nimport RESOURCE_TYPES from 'game/RESOURCE_TYPES';\r\nimport ResourceIcon from 'common/ResourceIcon';\r\nimport COVENANTS from 'game/shadowlands/COVENANTS';\r\n\r\nclass DeathChakrams extends Analyzer {\r\n  static dependencies = {\r\n    abilities: Abilities,\r\n  };\r\n\r\n  damage: number = 0;\r\n  focusGained: number = 0;\r\n  focusWasted: number = 0;\r\n\r\n  protected abilities!: Abilities;\r\n\r\n  constructor(options: Options) {\r\n    super(options);\r\n\r\n    this.active = this.selectedCombatant.hasCovenant(COVENANTS.NECROLORD.id);\r\n\r\n    if (!this.active) {\r\n      return;\r\n    }\r\n\r\n    (options.abilities as Abilities).add({\r\n      spell: SPELLS.DEATH_CHAKRAM_INITIAL_AND_AOE,\r\n      category: Abilities.SPELL_CATEGORIES.ROTATIONAL,\r\n      cooldown: 45,\r\n      gcd: {\r\n        base: 1500,\r\n      },\r\n      castEfficiency: {\r\n        suggestion: true,\r\n        recommendedEfficiency: 0.9,\r\n      },\r\n    });\r\n\r\n    this.addEventListener(Events.damage.by(SELECTED_PLAYER).spell([SPELLS.DEATH_CHAKRAM_SINGLE_TARGET, SPELLS.DEATH_CHAKRAM_INITIAL_AND_AOE]), this.onDamage);\r\n    this.addEventListener(Events.energize.by(SELECTED_PLAYER).spell(SPELLS.DEATH_CHAKRAM_ENERGIZE), this.onEnergize);\r\n  }\r\n\r\n  onDamage(event: DamageEvent) {\r\n    this.damage += event.amount + (event.absorbed || 0);\r\n  }\r\n\r\n  onEnergize(event: EnergizeEvent) {\r\n    this.focusGained += event.resourceChange;\r\n    this.focusWasted += event.waste;\r\n  }\r\n\r\n  statistic() {\r\n    return (\r\n      <Statistic\r\n        position={STATISTIC_ORDER.CORE()}\r\n        size=\"flexible\"\r\n        category={STATISTIC_CATEGORY.COVENANTS}\r\n      >\r\n        <BoringSpellValueText spell={SPELLS.DEATH_CHAKRAM_INITIAL_AND_AOE}>\r\n          <>\r\n            <ItemDamageDone amount={this.damage} />\r\n            <br />\r\n            <ResourceIcon id={RESOURCE_TYPES.FOCUS.id} noLink /> {this.focusGained}/{this.focusWasted + this.focusGained}<small> gained Focus</small>\r\n          </>\r\n        </BoringSpellValueText>\r\n      </Statistic>\r\n    );\r\n  }\r\n}\r\n\r\nexport default DeathChakrams;\r\n","import Analyzer, { Options, SELECTED_PLAYER } from 'parser/core/Analyzer';\r\nimport Abilities from 'parser/core/modules/Abilities';\r\nimport SPELLS from 'common/SPELLS';\r\nimport Events, { DamageEvent } from 'parser/core/Events';\r\nimport Statistic from 'interface/statistics/Statistic';\r\nimport STATISTIC_ORDER from 'interface/others/STATISTIC_ORDER';\r\nimport STATISTIC_CATEGORY from 'interface/others/STATISTIC_CATEGORY';\r\nimport React from 'react';\r\nimport BoringSpellValueText from 'interface/statistics/components/BoringSpellValueText';\r\nimport Enemies from 'parser/shared/modules/Enemies';\r\nimport calculateEffectiveDamage from 'parser/core/calculateEffectiveDamage';\r\nimport { WILD_MARK_DAMAGE_AMP } from 'parser/hunter/shared/constants';\r\nimport { formatNumber } from 'common/format';\r\nimport COVENANTS from 'game/shadowlands/COVENANTS';\r\n\r\n/**\r\n * TODO Revisit this when Blizzard is done messing with this changing it constantly.\r\n */\r\nclass WildSpirits extends Analyzer {\r\n  static dependencies = {\r\n    abilities: Abilities,\r\n    enemies: Enemies,\r\n  };\r\n\r\n  damage: number = 0;\r\n  ampDamage: number = 0;\r\n\r\n  protected abilities!: Abilities;\r\n  protected enemies!: Enemies;\r\n\r\n  constructor(options: Options) {\r\n    super(options);\r\n\r\n    this.active = this.selectedCombatant.hasCovenant(COVENANTS.NIGHT_FAE.id);\r\n\r\n    if (!this.active) {\r\n      return;\r\n    }\r\n\r\n    (options.abilities as Abilities).add({\r\n      spell: SPELLS.WILD_SPIRITS,\r\n      category: Abilities.SPELL_CATEGORIES.ROTATIONAL,\r\n      cooldown: 120,\r\n      gcd: {\r\n        base: 1500,\r\n      },\r\n      castEfficiency: {\r\n        suggestion: true,\r\n        recommendedEfficiency: 0.9,\r\n      },\r\n    });\r\n\r\n    this.addEventListener(Events.damage.by(SELECTED_PLAYER).spell([SPELLS.WILD_SPIRITS_DAMAGE, SPELLS.WILD_SPIRITS_DAMAGE_AOE]), this.onWildSpiritsDamage);\r\n    this.addEventListener(Events.damage.by(SELECTED_PLAYER), this.onDamage);\r\n  }\r\n\r\n  onWildSpiritsDamage(event: DamageEvent) {\r\n    this.damage += event.amount + (event.absorbed || 0);\r\n  }\r\n\r\n  onDamage(event: DamageEvent) {\r\n    const enemy = this.enemies.getEntity(event);\r\n    if (!enemy || !enemy.hasBuff(SPELLS.WILD_MARK.id)) {\r\n      return;\r\n    }\r\n    this.ampDamage += calculateEffectiveDamage(event, WILD_MARK_DAMAGE_AMP);\r\n  }\r\n\r\n  statistic() {\r\n    return (\r\n      <Statistic\r\n        position={STATISTIC_ORDER.CORE()}\r\n        size=\"flexible\"\r\n        category={STATISTIC_CATEGORY.COVENANTS}\r\n      >\r\n        <BoringSpellValueText spell={SPELLS.WILD_SPIRITS}>\r\n          <>\r\n            <img src=\"/img/sword.png\" alt=\"Damage\" className=\"icon\" />{' '}\r\n            {formatNumber(this.damage)} <small> direct damage</small>\r\n            <br />\r\n            <img src=\"/img/sword.png\" alt=\"Damage\" className=\"icon\" />{' '}\r\n            {formatNumber(this.damage)} <small> Wild Mark damage</small>\r\n          </>\r\n        </BoringSpellValueText>\r\n      </Statistic>\r\n    );\r\n  }\r\n\r\n}\r\n\r\nexport default WildSpirits;\r\n","import React from 'react';\r\n\r\nimport Analyzer, { Options, SELECTED_PLAYER, SELECTED_PLAYER_PET } from 'parser/core/Analyzer';\r\nimport Statistic from 'interface/statistics/Statistic';\r\nimport STATISTIC_ORDER from 'interface/others/STATISTIC_ORDER';\r\nimport STATISTIC_CATEGORY from 'interface/others/STATISTIC_CATEGORY';\r\nimport { ENFEEBLED_MARK_DAMAGE_INCREASE } from 'parser/hunter/shared/constants';\r\nimport Events, { DamageEvent } from 'parser/core/Events';\r\nimport SPELLS from 'common/SPELLS';\r\nimport ItemDamageDone from 'interface/ItemDamageDone';\r\nimport calculateEffectiveDamage from 'parser/core/calculateEffectiveDamage';\r\nimport Enemies from 'parser/shared/modules/Enemies';\r\nimport COVENANTS from 'game/shadowlands/COVENANTS';\r\nimport ConduitSpellText from 'interface/statistics/components/ConduitSpellText';\r\n\r\n/**\r\n * Your attacks and abilities deal 5.0% increased damage to enemies inside Resonating Arrow.\r\n *\r\n * Example log:\r\n *\r\n */\r\nclass EnfeebledMark extends Analyzer {\r\n  static dependencies = {\r\n    enemies: Enemies,\r\n  };\r\n\r\n  conduitRank: number = 0;\r\n  addedDamage: number = 0;\r\n\r\n  protected enemies!: Enemies;\r\n\r\n  constructor(options: Options) {\r\n    super(options);\r\n    this.active = this.selectedCombatant.hasCovenant(COVENANTS.KYRIAN.id) && this.selectedCombatant.hasConduitBySpellID(SPELLS.ENFEEBLED_MARK_CONDUIT.id);\r\n    if (!this.active) {\r\n      return;\r\n    }\r\n\r\n    this.conduitRank = this.selectedCombatant.conduitRankBySpellID(SPELLS.ENFEEBLED_MARK_CONDUIT.id);\r\n\r\n    this.addEventListener(Events.damage.by(SELECTED_PLAYER | SELECTED_PLAYER_PET), this.onGenericDamage);\r\n  }\r\n\r\n  onGenericDamage(event: DamageEvent) {\r\n    const enemy = this.enemies.getEntity(event);\r\n    if (!enemy || !enemy.hasBuff(SPELLS.RESONATING_ARROW_DEBUFF.id)) {\r\n      return;\r\n    }\r\n    this.addedDamage += calculateEffectiveDamage(event, ENFEEBLED_MARK_DAMAGE_INCREASE[this.conduitRank]);\r\n  }\r\n\r\n  statistic() {\r\n    return (\r\n      <Statistic\r\n        position={STATISTIC_ORDER.OPTIONAL(13)}\r\n        size=\"flexible\"\r\n        category={STATISTIC_CATEGORY.COVENANTS}\r\n      >\r\n        <ConduitSpellText spell={SPELLS.ENFEEBLED_MARK_CONDUIT} rank={this.conduitRank}>\r\n          <>\r\n            <ItemDamageDone amount={this.addedDamage} />\r\n          </>\r\n        </ConduitSpellText>\r\n      </Statistic>\r\n    );\r\n  }\r\n}\r\n\r\nexport default EnfeebledMark;\r\n","import React from 'react';\r\n\r\nimport Analyzer, { Options, SELECTED_PLAYER } from 'parser/core/Analyzer';\r\nimport Statistic from 'interface/statistics/Statistic';\r\nimport STATISTIC_ORDER from 'interface/others/STATISTIC_ORDER';\r\nimport STATISTIC_CATEGORY from 'interface/others/STATISTIC_CATEGORY';\r\nimport { EMPOWERED_RELEASE_INCREASE_KS_DAMAGE, EMPOWERED_RELEASE_INCREASED_FLAYED_PROC_CHANCE, FLAYED_SHOT_RESET_CHANCE } from 'parser/hunter/shared/constants';\r\nimport Events, { DamageEvent } from 'parser/core/Events';\r\nimport SPELLS from 'common/SPELLS';\r\nimport ItemDamageDone from 'interface/ItemDamageDone';\r\nimport calculateEffectiveDamage from 'parser/core/calculateEffectiveDamage';\r\nimport COVENANTS from 'game/shadowlands/COVENANTS';\r\nimport ConduitSpellText from 'interface/statistics/components/ConduitSpellText';\r\n\r\n/**\r\n * Flayed Shot has an additional 5% chance to pro Flayer's Mark\r\n * Flayer's Mark increases the damage of your next Kill Shot by 5.0%.\r\n *\r\n * Example log:\r\n *\r\n */\r\nclass EmpoweredRelease extends Analyzer {\r\n\r\n  flayersMarkProcs: number = 0;\r\n  aggregatedContribution: number = 0;\r\n  conduitRank: number = 0;\r\n  addedDamage: number = 0;\r\n\r\n  constructor(options: Options) {\r\n    super(options);\r\n    this.active = this.selectedCombatant.hasCovenant(COVENANTS.VENTHYR.id) && this.selectedCombatant.hasConduitBySpellID(SPELLS.EMPOWERED_RELEASE_CONDUIT.id);\r\n    if (!this.active) {\r\n      return;\r\n    }\r\n\r\n    this.conduitRank = this.selectedCombatant.conduitRankBySpellID(SPELLS.EMPOWERED_RELEASE_CONDUIT.id);\r\n\r\n    this.addEventListener(Events.applybuff.by(SELECTED_PLAYER).spell(SPELLS.FLAYERS_MARK), this.flayedShotProc);\r\n    this.addEventListener(Events.refreshbuff.by(SELECTED_PLAYER).spell(SPELLS.FLAYERS_MARK), this.flayedShotProc);\r\n    this.addEventListener(Events.damage.by(SELECTED_PLAYER).spell([SPELLS.KILL_SHOT_SV, SPELLS.KILL_SHOT_MM_BM]), this.onKillShotDamage);\r\n  }\r\n\r\n  get averageContributionPercentage() {\r\n    return this.aggregatedContribution / this.flayersMarkProcs;\r\n  }\r\n\r\n  get averageContributionAbsolute() {\r\n    return Math.round(this.averageContributionPercentage * this.flayersMarkProcs);\r\n  }\r\n\r\n  flayedShotProc() {\r\n    this.aggregatedContribution += EMPOWERED_RELEASE_INCREASED_FLAYED_PROC_CHANCE / (FLAYED_SHOT_RESET_CHANCE + EMPOWERED_RELEASE_INCREASED_FLAYED_PROC_CHANCE);\r\n    this.flayersMarkProcs += 1;\r\n  }\r\n\r\n  onKillShotDamage(event: DamageEvent) {\r\n    if (!this.selectedCombatant.hasBuff(SPELLS.EMPOWERED_RELEASE_BUFF.id)) {\r\n      return;\r\n    }\r\n    this.addedDamage += calculateEffectiveDamage(event, EMPOWERED_RELEASE_INCREASE_KS_DAMAGE[this.conduitRank]);\r\n  }\r\n\r\n  statistic() {\r\n    return (\r\n      <Statistic\r\n        position={STATISTIC_ORDER.OPTIONAL(13)}\r\n        size=\"flexible\"\r\n        category={STATISTIC_CATEGORY.COVENANTS}\r\n      >\r\n        <ConduitSpellText spell={SPELLS.EMPOWERED_RELEASE_CONDUIT} rank={this.conduitRank}>\r\n          <>\r\n            ≈ {this.averageContributionAbsolute} <small> additional procs </small>\r\n            <ItemDamageDone amount={this.addedDamage} />\r\n          </>\r\n        </ConduitSpellText>\r\n      </Statistic>\r\n    );\r\n  }\r\n}\r\n\r\nexport default EmpoweredRelease;\r\n","import Analyzer, { Options, SELECTED_PLAYER } from 'parser/core/Analyzer';\r\nimport Events, { DamageEvent, EnergizeEvent } from 'parser/core/Events';\r\nimport SPELLS from 'common/SPELLS';\r\nimport Statistic from 'interface/statistics/Statistic';\r\nimport STATISTIC_ORDER from 'interface/others/STATISTIC_ORDER';\r\nimport STATISTIC_CATEGORY from 'interface/others/STATISTIC_CATEGORY';\r\nimport ItemDamageDone from 'interface/ItemDamageDone';\r\nimport React from 'react';\r\nimport calculateEffectiveDamage from 'parser/core/calculateEffectiveDamage';\r\nimport { NECROTIC_BARRAGE_DAMAGE_INCREASE } from 'parser/hunter/shared/constants';\r\nimport COVENANTS from 'game/shadowlands/COVENANTS';\r\nimport ConduitSpellText from 'interface/statistics/components/ConduitSpellText';\r\n\r\n/**\r\n * Death Chakram generates an additional 2 Focus and the damage is increased by 5.0%.\r\n *\r\n * Example log\r\n *\r\n */\r\nclass NecroticBarrage extends Analyzer {\r\n\r\n  conduitRank: number = 0;\r\n  gainedFocus: number = 0;\r\n  wastedFocus: number = 0;\r\n  addedDamage: number = 0;\r\n\r\n  constructor(options: Options) {\r\n    super(options);\r\n    this.active = this.selectedCombatant.hasCovenant(COVENANTS.NECROLORD.id) && this.selectedCombatant.hasConduitBySpellID(SPELLS.NECROTIC_BARRAGE_CONDUIT.id);\r\n    if (!this.active) {\r\n      return;\r\n    }\r\n\r\n    this.conduitRank = this.selectedCombatant.conduitRankBySpellID(SPELLS.NECROTIC_BARRAGE_CONDUIT.id);\r\n\r\n    this.addEventListener(Events.damage.by(SELECTED_PLAYER).spell([SPELLS.DEATH_CHAKRAM_SINGLE_TARGET, SPELLS.DEATH_CHAKRAM_INITIAL_AND_AOE]), this.onDeathChakramDamage);\r\n    this.addEventListener(Events.energize.by(SELECTED_PLAYER).spell(SPELLS.DEATH_CHAKRAM_ENERGIZE), this.onEnergize);\r\n  }\r\n\r\n  onDeathChakramDamage(event: DamageEvent) {\r\n    this.addedDamage += calculateEffectiveDamage(event, NECROTIC_BARRAGE_DAMAGE_INCREASE[this.conduitRank]);\r\n  }\r\n\r\n  onEnergize(event: EnergizeEvent) {\r\n    this.gainedFocus += event.resourceChange;\r\n    this.wastedFocus += event.waste;\r\n  }\r\n\r\n  statistic() {\r\n    return (\r\n      <Statistic\r\n        position={STATISTIC_ORDER.OPTIONAL(13)}\r\n        size=\"flexible\"\r\n        category={STATISTIC_CATEGORY.COVENANTS}\r\n      >\r\n        <ConduitSpellText spell={SPELLS.NECROTIC_BARRAGE_CONDUIT} rank={this.conduitRank}>\r\n          <>\r\n            <ItemDamageDone amount={this.addedDamage} />\r\n            {this.gainedFocus}/{this.gainedFocus + this.wastedFocus} <small>gained focus</small>\r\n          </>\r\n        </ConduitSpellText>\r\n      </Statistic>\r\n    );\r\n  }\r\n\r\n}\r\n\r\nexport default NecroticBarrage;\r\n","import Events, { CastEvent, DamageEvent } from 'parser/core/Events';\r\nimport { SELECTED_PLAYER } from 'parser/core/EventFilter';\r\nimport Analyzer, { Options } from 'parser/core/Analyzer';\r\nimport calculateEffectiveDamage from 'parser/core/calculateEffectiveDamage';\r\nimport { SPIRIT_ATTUNEMENT_DAMAGE_INCREASE, WILD_MARK_DAMAGE_AMP, WILD_SPIRITS_BASELINE_DURATION } from 'parser/hunter/shared/constants';\r\nimport SPELLS from 'common/SPELLS';\r\nimport Statistic from 'interface/statistics/Statistic';\r\nimport STATISTIC_ORDER from 'interface/others/STATISTIC_ORDER';\r\nimport STATISTIC_CATEGORY from 'interface/others/STATISTIC_CATEGORY';\r\nimport ItemDamageDone from 'interface/ItemDamageDone';\r\nimport React from 'react';\r\nimport { formatThousands } from 'common/format';\r\nimport COVENANTS from 'game/shadowlands/COVENANTS';\r\nimport ConduitSpellText from 'interface/statistics/components/ConduitSpellText';\r\n\r\n/**\r\n * Wild Spirits duration is increased by 3 sec and the damage dealt is increased by 10.0%.\r\n *\r\n * Example log\r\n *\r\n */\r\nclass SpiritAttunement extends Analyzer {\r\n\r\n  conduitRank: number = 0;\r\n  addedDamage: number = 0;\r\n  wildSpiritsCast: number = 0;\r\n  damageAfterOriginalDuration: number = 0;\r\n\r\n  constructor(options: Options) {\r\n    super(options);\r\n    this.active = this.selectedCombatant.hasCovenant(COVENANTS.NIGHT_FAE.id) && this.selectedCombatant.hasConduitBySpellID(SPELLS.SPIRIT_ATTUNEMENT_CONDUIT.id);\r\n    if (!this.active) {\r\n      return;\r\n    }\r\n\r\n    this.conduitRank = this.selectedCombatant.conduitRankBySpellID(SPELLS.SPIRIT_ATTUNEMENT_CONDUIT.id);\r\n\r\n    this.addEventListener(Events.damage.by(SELECTED_PLAYER).spell([SPELLS.WILD_SPIRITS_DAMAGE, SPELLS.WILD_SPIRITS_DAMAGE_AOE]), this.onWildSpiritsDamage);\r\n    this.addEventListener(Events.damage.by(SELECTED_PLAYER), this.onGenericDamage);\r\n    this.addEventListener(Events.cast.by(SELECTED_PLAYER).spell(SPELLS.WILD_SPIRITS), this.onWildSpiritsCast);\r\n  }\r\n\r\n  onWildSpiritsCast(event: CastEvent) {\r\n    this.wildSpiritsCast = event.timestamp;\r\n  }\r\n\r\n  onWildSpiritsDamage(event: DamageEvent) {\r\n    this.addedDamage += calculateEffectiveDamage(event, SPIRIT_ATTUNEMENT_DAMAGE_INCREASE[this.conduitRank]);\r\n\r\n    if (event.timestamp > this.wildSpiritsCast + WILD_SPIRITS_BASELINE_DURATION) {\r\n      this.damageAfterOriginalDuration += event.amount + (event.absorbed || 0);\r\n    }\r\n  }\r\n\r\n  onGenericDamage(event: DamageEvent) {\r\n    if (event.timestamp > this.wildSpiritsCast + WILD_SPIRITS_BASELINE_DURATION) {\r\n      this.damageAfterOriginalDuration += calculateEffectiveDamage(event, WILD_MARK_DAMAGE_AMP);\r\n    }\r\n  }\r\n\r\n  statistic() {\r\n    return (\r\n      <Statistic\r\n        position={STATISTIC_ORDER.OPTIONAL(13)}\r\n        size=\"flexible\"\r\n        category={STATISTIC_CATEGORY.COVENANTS}\r\n        tooltip={(\r\n          <>\r\n            After the original duration of Wild Spirits, Spirit Attunment contributed with {formatThousands(this.damageAfterOriginalDuration)}\r\n          </>\r\n        )}\r\n      >\r\n        <ConduitSpellText spell={SPELLS.SPIRIT_ATTUNEMENT_CONDUIT} rank={this.conduitRank}>\r\n          <>\r\n            <ItemDamageDone amount={this.addedDamage} />\r\n            {formatThousands(this.damageAfterOriginalDuration)} <small>damage after normal duration</small>\r\n          </>\r\n        </ConduitSpellText>\r\n      </Statistic>\r\n    );\r\n  }\r\n\r\n}\r\n\r\nexport default SpiritAttunement;\r\n","import Analyzer, { Options, SELECTED_PLAYER } from 'parser/core/Analyzer';\r\nimport Statistic from 'interface/statistics/Statistic';\r\nimport STATISTIC_ORDER from 'interface/others/STATISTIC_ORDER';\r\nimport STATISTIC_CATEGORY from 'interface/others/STATISTIC_CATEGORY';\r\nimport React from 'react';\r\nimport BoringSpellValueText from 'interface/statistics/components/BoringSpellValueText';\r\nimport SPELLS from 'common/SPELLS';\r\nimport Events, { CastEvent, DamageEvent } from 'parser/core/Events';\r\nimport ItemDamageDone from 'interface/ItemDamageDone';\r\nimport SpellIcon from 'common/SpellIcon';\r\n\r\n/**\r\n * Launching a Flare into your Tar Trap causes all enemies inside of the Tar Trap to burn for (150% of Attack power) Fire damage over 12 sec.\r\n *\r\n * Example log:\r\n *\r\n */\r\nclass SoulforgeEmbers extends Analyzer {\r\n\r\n  damage: number = 0;\r\n  flareCasts: number = 0;\r\n  lastFlareCastTimestamp: number = 0;\r\n  tarTrapCasts: number = 0;\r\n  lastTarTrapCastTimestamp: number = 0;\r\n  lostEmberApplications: number = 0;\r\n\r\n  constructor(options: Options) {\r\n    super(options);\r\n    this.active = this.selectedCombatant.hasLegendaryByBonusID(SPELLS.SOULFORGE_EMBERS_EFFECT.bonusID);\r\n    if (!this.active) {\r\n      return;\r\n    }\r\n    this.addEventListener(Events.cast.by(SELECTED_PLAYER).spell(SPELLS.FLARE), this.onFlare);\r\n    this.addEventListener(Events.cast.by(SELECTED_PLAYER).spell(SPELLS.TAR_TRAP), this.onTarTrap);\r\n    this.addEventListener(Events.damage.by(SELECTED_PLAYER).spell(SPELLS.SOULFORGE_EMBERS_DAMAGE), this.onEmbersDamage);\r\n  }\r\n\r\n  onFlare(event: CastEvent) {\r\n    this.flareCasts += 1;\r\n    this.lastFlareCastTimestamp = event.timestamp;\r\n  }\r\n\r\n  onTarTrap(event: CastEvent) {\r\n    this.tarTrapCasts += 1;\r\n    this.lastTarTrapCastTimestamp = event.timestamp;\r\n  }\r\n\r\n  onEmbersDamage(event: DamageEvent) {\r\n    this.damage += event.amount + (event.absorbed || 0);\r\n  }\r\n\r\n  statistic() {\r\n    return (\r\n      <Statistic\r\n        position={STATISTIC_ORDER.CORE()}\r\n        size=\"flexible\"\r\n        category={STATISTIC_CATEGORY.ITEMS}\r\n      >\r\n        <BoringSpellValueText spell={SPELLS.SOULFORGE_EMBERS_EFFECT}>\r\n          <ItemDamageDone amount={this.damage} />\r\n          <br />\r\n          {this.flareCasts} <SpellIcon id={SPELLS.FLARE.id} noLink /> / {this.tarTrapCasts} <SpellIcon id={SPELLS.TAR_TRAP.id} noLink />\r\n        </BoringSpellValueText>\r\n      </Statistic>\r\n    );\r\n  }\r\n\r\n}\r\n\r\nexport default SoulforgeEmbers;\r\n","import Analyzer, { Options, SELECTED_PLAYER } from 'parser/core/Analyzer';\r\nimport DonutChart from 'interface/statistics/components/DonutChart';\r\nimport Statistic from 'interface/statistics/Statistic';\r\nimport STATISTIC_ORDER from 'interface/others/STATISTIC_ORDER';\r\nimport Events, { CastEvent } from 'parser/core/Events';\r\nimport ResourceLink from 'common/ResourceLink';\r\nimport { formatNumber } from 'common/format';\r\n\r\nimport Spell from 'common/SPELLS/Spell';\r\n\r\nimport React from 'react';\r\n\r\nclass ResourceUsage extends Analyzer {\r\n\r\n  //region IMPLEMENTME statics\r\n  /**\r\n   * One of the types from game/RESOURCE_TYPES\r\n   */\r\n  static resourceType: { id: number, name: string, icon: string, url: string };\r\n\r\n  /**\r\n   * Array of objects from common/SPELLS\r\n   */\r\n  static listOfResourceSpenders: Spell[] = [];\r\n\r\n  /**\r\n   * We might want some spells to show as other spells, if some buff can alter their spellID, but the spell is otherwise essentially the same.\r\n   * An example of this can be Mongoose Bite and Raptor Strike for Survival that gain a different spellID when\r\n   * Example format\r\n   * [SPELLS.RAPTOR_STRIKE_AOTE.id]: SPELLS.RAPTOR_STRIKE,\r\n   */\r\n  static spellsThatShouldShowAsOtherSpells: { [spellID: number]: { guid: number, name: string, abilityIcon: string, type: number } } = {};\r\n  //endregion\r\n\r\n  //region Optional IMPLEMENTME statics\r\n  /**\r\n   * String representations of hex colour codes\r\n   * Only replace if you want different colours, or need more colours (even utilising all 7 will lead to a very ugly chart and potential spell names overflowing out of the statistic box)\r\n   */\r\n  static listOfDefaultColours: string[] = [\r\n    '#ecd1b6',\r\n    '#abff3d',\r\n    '#ecda4c',\r\n    '#ff7d0a',\r\n    '#4ce4ec',\r\n    '#8b8dec',\r\n    '#00ec62',\r\n  ];\r\n\r\n  /**\r\n   * If you want to change where this module is shown, change this static.\r\n   */\r\n  static statisticOrder = STATISTIC_ORDER.CORE(12);\r\n  //endregion\r\n\r\n  listOfSpellsUsed: { [key: string]: { casts: number, resourceUsed: number } } = {};\r\n  ctor = this.constructor as typeof ResourceUsage;\r\n\r\n  constructor(options: Options) {\r\n    super(options);\r\n    this.addEventListener(Events.cast.by(SELECTED_PLAYER).spell(this.resourceSpenders), this.onCast);\r\n  }\r\n\r\n  get resourceSpenders() {\r\n    return this.ctor.listOfResourceSpenders;\r\n  }\r\n\r\n  get resourceTypeID() {\r\n    return this.ctor.resourceType.id;\r\n  }\r\n\r\n  get resourceTypeName() {\r\n    return this.ctor.resourceType.name;\r\n  }\r\n\r\n  get listOfDefaultColours() {\r\n    return this.ctor.listOfDefaultColours;\r\n  }\r\n\r\n  get spellsThatShouldShowAsOtherSpells() {\r\n    return this.ctor.spellsThatShouldShowAsOtherSpells;\r\n  }\r\n\r\n  get resourceUsageStatisticOrder() {\r\n    return this.ctor.statisticOrder;\r\n  }\r\n\r\n  onCast(event: CastEvent) {\r\n    //shouldn't really happen unless something messed up in the log where the cast event doesn't have any class resource information so we skip those.\r\n    if (!event.classResources) {\r\n      return;\r\n    }\r\n    let spellID = event.ability.guid;\r\n    if (this.spellsThatShouldShowAsOtherSpells[spellID]) {\r\n      event.ability = this.spellsThatShouldShowAsOtherSpells[spellID];\r\n      spellID = event.ability.guid;\r\n    }\r\n\r\n    const resource = event.classResources?.find(resource => resource.type === this.resourceTypeID);\r\n    if (!resource) {\r\n      return;\r\n    }\r\n\r\n    if (!this.listOfSpellsUsed[spellID]) {\r\n      this.listOfSpellsUsed[spellID] = {\r\n        casts: 0,\r\n        resourceUsed: 0,\r\n      };\r\n    }\r\n\r\n    this.listOfSpellsUsed[spellID].casts += 1;\r\n    this.listOfSpellsUsed[spellID].resourceUsed += resource.cost || 0;\r\n  }\r\n\r\n  makeResourceUsageTooltip(spell: { casts: number; resourceUsed: number }) {\r\n    return (\r\n      <>\r\n        {spell.casts} casts\r\n        <br />\r\n        {formatNumber(spell.resourceUsed)} {this.resourceTypeName} spent\r\n      </>\r\n    );\r\n  }\r\n\r\n  sortResourceUsage(a: { value: number; }, b: { value: number; }) {\r\n    let comparison = 0;\r\n    if (a.value > b.value) {\r\n      comparison = -1;\r\n    } else if (a.value < b.value) {\r\n      comparison = 1;\r\n    }\r\n    return comparison;\r\n  }\r\n\r\n  get resourceUsageChart() {\r\n    const items: Array<{ color: string, label: string, spellId: number, value: number, valueTooltip: JSX.Element }> = [];\r\n    let colourIndex = 0;\r\n    this.resourceSpenders.forEach(spell => {\r\n      if (this.listOfSpellsUsed[spell.id] && this.listOfSpellsUsed[spell.id].resourceUsed > 0) {\r\n        items.push({\r\n          color: this.listOfDefaultColours[colourIndex],\r\n          label: spell.name,\r\n          spellId: spell.id,\r\n          value: Math.round(this.listOfSpellsUsed[spell.id].resourceUsed),\r\n          valueTooltip: this.makeResourceUsageTooltip(this.listOfSpellsUsed[spell.id]),\r\n        });\r\n        colourIndex += 1;\r\n      }\r\n    });\r\n\r\n    items.sort(this.sortResourceUsage);\r\n\r\n    return (\r\n      <DonutChart\r\n        items={items}\r\n      />\r\n    );\r\n  }\r\n\r\n  statistic() {\r\n    return (\r\n      <Statistic position={this.resourceUsageStatisticOrder}>\r\n        <div className=\"pad\">\r\n          <label><ResourceLink id={this.resourceTypeID} /> usage</label>\r\n          {this.resourceUsageChart}\r\n        </div>\r\n\r\n      </Statistic>\r\n    );\r\n  }\r\n\r\n}\r\n\r\nexport default ResourceUsage;\r\n","import ResourceUsage from 'parser/shared/modules/resources/ResourceUsage';\r\nimport { LIST_OF_FOCUS_SPENDERS_SHARED } from 'parser/hunter/shared/constants';\r\nimport RESOURCE_TYPES from 'game/RESOURCE_TYPES';\r\nimport Spell from 'common/SPELLS/Spell';\r\n\r\nclass FocusUsage extends ResourceUsage {\r\n\r\n  static resourceType = RESOURCE_TYPES.FOCUS;\r\n\r\n  static listOfResourceSpenders: Spell[] = [\r\n    ...LIST_OF_FOCUS_SPENDERS_SHARED,\r\n  ];\r\n\r\n}\r\n\r\nexport default FocusUsage;\r\n","import React from 'react';\r\n\r\nimport Analyzer, { Options, SELECTED_PLAYER } from 'parser/core/Analyzer';\r\nimport { ThresholdStyle, When } from 'parser/core/ParseResults';\r\nimport SPELLS from 'common/SPELLS';\r\nimport ItemDamageDone from 'interface/ItemDamageDone';\r\nimport AverageTargetsHit from 'interface/others/AverageTargetsHit';\r\nimport { encodeTargetString } from 'parser/shared/modules/EnemyInstances';\r\nimport SpellLink from 'common/SpellLink';\r\nimport Statistic from 'interface/statistics/Statistic';\r\nimport STATISTIC_CATEGORY from 'interface/others/STATISTIC_CATEGORY';\r\nimport STATISTIC_ORDER from 'interface/others/STATISTIC_ORDER';\r\nimport BoringSpellValueText from 'interface/statistics/components/BoringSpellValueText';\r\nimport Events, { DamageEvent } from 'parser/core/Events';\r\nimport { BARRAGE_HITS_PER_CAST } from 'parser/hunter/shared/constants';\r\nimport { i18n } from '@lingui/core';\r\nimport { t } from '@lingui/macro';\r\n\r\n/**\r\n * Rapidly fires a spray of shots for 3 sec, dealing an average of (80% * 10)\r\n * Physical damage to all enemies in front of you. Usable while moving.\r\n *\r\n * Example log:\r\n * https://www.warcraftlogs.com/reports/wPdQLfFnhTVYRyJm#fight=12&type=damage-done&source=640&ability=120361\r\n */\r\nclass Barrage extends Analyzer {\r\n  damage = 0;\r\n  casts: Array<{ averageHits: number, hits: number }> = [];\r\n  hits = 0;\r\n  uniqueTargets: string[] = [];\r\n  uniqueTargetsHit = 0;\r\n  inefficientCasts = 0;\r\n\r\n  constructor(options: Options) {\r\n    super(options);\r\n    this.active = this.selectedCombatant.hasTalent(SPELLS.BARRAGE_TALENT.id);\r\n    this.addEventListener(Events.cast.by(SELECTED_PLAYER).spell(SPELLS.BARRAGE_TALENT), this.onCast);\r\n    this.addEventListener(Events.damage.by(SELECTED_PLAYER).spell(SPELLS.BARRAGE_DAMAGE), this.onDamage);\r\n    this.addEventListener(Events.fightend, this.calculateAverageHits);\r\n  }\r\n\r\n  get currentCast() {\r\n    if (this.casts.length === 0) {\r\n      return null;\r\n    }\r\n\r\n    return this.casts[this.casts.length - 1];\r\n  }\r\n\r\n  get barrageInefficientCastsThreshold() {\r\n    return {\r\n      actual: this.inefficientCasts,\r\n      isGreaterThan: {\r\n        minor: 0,\r\n        average: 0,\r\n        major: 1,\r\n      },\r\n      style: ThresholdStyle.NUMBER,\r\n    };\r\n  }\r\n\r\n  onCast() {\r\n    this.casts.push({ hits: 0, averageHits: 0 });\r\n    this.uniqueTargets = [];\r\n  }\r\n\r\n  onDamage(event: DamageEvent) {\r\n    const damageTarget = encodeTargetString(event.targetID, event.targetInstance);\r\n    if (!this.uniqueTargets.includes(damageTarget)) {\r\n      this.uniqueTargetsHit += 1;\r\n      this.uniqueTargets.push(damageTarget);\r\n    }\r\n    const damage = event.amount + (event.absorbed || 0);\r\n    if (this.currentCast !== null) {\r\n      this.currentCast.hits += 1;\r\n    }\r\n    this.hits += 1;\r\n    this.damage += damage;\r\n  }\r\n\r\n  calculateAverageHits() {\r\n    this.casts.forEach((cast: { averageHits: number, hits: number }) => {\r\n      cast.averageHits = cast.hits / BARRAGE_HITS_PER_CAST;\r\n      if (cast.averageHits < 1) {\r\n        this.inefficientCasts += 1;\r\n      }\r\n    });\r\n  }\r\n\r\n  suggestions(when: When) {\r\n    when(this.barrageInefficientCastsThreshold).addSuggestion((suggest, actual, recommended) => suggest(<>You cast <SpellLink id={SPELLS.BARRAGE_TALENT.id} /> inefficiently {actual} {actual > 1 ? 'times' : 'time'} throughout the fight. This means you didn't hit all {BARRAGE_HITS_PER_CAST} shots of your barrage channel. Remember to always be facing your target when channelling <SpellLink id={SPELLS.BARRAGE_TALENT.id} />. </>)\r\n      .icon(SPELLS.BARRAGE_TALENT.icon)\r\n      .actual(i18n._(t('hunter.shared.suggestions.barrage.efficiency')`${actual} inefficient ${actual > 1 ? 'casts' : 'cast'}`))\r\n      .recommended(`${recommended} is recommended`));\r\n  }\r\n\r\n  statistic() {\r\n    return (\r\n      <Statistic\r\n        position={STATISTIC_ORDER.OPTIONAL(20)}\r\n        size=\"flexible\"\r\n        category={STATISTIC_CATEGORY.TALENTS}\r\n      >\r\n        <BoringSpellValueText spell={SPELLS.BARRAGE_TALENT}>\r\n          <>\r\n            <ItemDamageDone amount={this.damage} /> <br />\r\n            <AverageTargetsHit casts={this.casts.length} hits={this.hits} /><br />\r\n            <AverageTargetsHit casts={this.casts.length} hits={this.uniqueTargetsHit} unique />\r\n          </>\r\n        </BoringSpellValueText>\r\n      </Statistic>\r\n    );\r\n  }\r\n}\r\n\r\nexport default Barrage;\r\n"],"sourceRoot":""}