{"version":3,"sources":["parser/warlock/demonology/modules/features/Abilities.js","parser/warlock/demonology/modules/features/AlwaysBeCasting.js","parser/warlock/demonology/modules/features/CooldownThroughputTracker.js","parser/warlock/demonology/modules/features/Felstorm.js","parser/warlock/demonology/modules/soulshards/SoulShardTracker.js","parser/warlock/demonology/modules/soulshards/SoulShardDetails.js","parser/warlock/demonology/modules/talents/Doom.js","parser/warlock/demonology/modules/features/Checklist/Component.js","parser/warlock/demonology/modules/features/Checklist/Module.js","parser/warlock/demonology/modules/pets/PETS.js","parser/warlock/demonology/modules/pets/TimelinePet.js","parser/warlock/demonology/modules/pets/helpers.js","parser/warlock/demonology/modules/pets/Timeline.js","parser/warlock/demonology/modules/pets/PetDamage.js","parser/warlock/demonology/modules/pets/DemoPets/index.js","parser/warlock/demonology/modules/features/SummonDemonicTyrant.js","parser/warlock/demonology/modules/features/LegionStrike.js","parser/warlock/demonology/modules/pets/DemoPets/PetDamageHandler.js","parser/warlock/demonology/modules/pets/CONSTANTS.js","parser/warlock/demonology/modules/pets/DemoPets/PetSummonHandler.js","parser/warlock/demonology/modules/pets/DemoPets/WildImpEnergyHandler.js","parser/warlock/demonology/modules/pets/DemoPets/PowerSiphonHandler.js","parser/warlock/demonology/modules/pets/DemoPets/DemonicTyrantHandler.js","parser/warlock/demonology/modules/pets/DemoPets/ImplosionHandler.js","parser/warlock/demonology/modules/pets/PetTimelineTab/TabComponent/DeathEvents.js","parser/warlock/demonology/modules/pets/PetTimelineTab/TabComponent/PetRow.js","parser/warlock/demonology/modules/pets/PetTimelineTab/TabComponent/KeyCastsRow.js","parser/warlock/demonology/modules/pets/PetTimelineTab/TabComponent/PetTimeline.js","parser/warlock/demonology/modules/pets/PetTimelineTab/TabComponent/index.js","parser/warlock/demonology/modules/pets/PetTimelineTab/index.js","parser/warlock/demonology/modules/pets/normalizers/PrepullPetNormalizer.js","parser/warlock/demonology/modules/pets/normalizers/SummonOrderNormalizer.js","parser/warlock/demonology/modules/talents/normalizers/PowerSiphonNormalizer.js","parser/warlock/demonology/modules/talents/Dreadlash.js","parser/warlock/demonology/modules/talents/DemonicStrength.js","parser/warlock/demonology/modules/talents/BilescourgeBombers.js","parser/warlock/demonology/modules/talents/DemonicCalling.js","parser/warlock/demonology/modules/talents/PowerSiphon.js","parser/warlock/demonology/modules/talents/FromTheShadows.js","parser/warlock/demonology/modules/talents/SoulStrike.js","parser/warlock/demonology/modules/talents/SummonVilefiend.js","parser/warlock/demonology/modules/talents/SoulConduit.js","parser/warlock/demonology/modules/talents/InnerDemons.js","parser/warlock/demonology/modules/talents/GrimoireFelguard.js","parser/warlock/demonology/modules/talents/SacrificedSouls.js","parser/warlock/demonology/modules/talents/DemonicConsumption.js","parser/warlock/demonology/modules/talents/NetherPortal.js","parser/warlock/demonology/modules/talents/index.js","parser/warlock/demonology/CombatLogParser.ts","interface/statistics/components/BoringSpellValueText/index.tsx","parser/core/calculateEffectiveDamage.js","interface/icons/Uptime.js","parser/shared/modules/resources/resourcetracker/ResourceTracker.ts","parser/shared/modules/resources/resourcetracker/ResourceBreakdown.tsx","interface/others/StatisticsListBox.js","interface/others/charts/OneVariableBinomialChart.js","parser/shared/modules/helpers/Probability.tsx","parser/core/calculateMaxCasts.ts","parser/shared/modules/pets/helpers.tsx"],"names":["FEL_CELERITY_REDUCTION_SEC","1","2","3","4","5","6","7","8","9","10","11","12","13","14","15","Abilities","combatant","this","selectedCombatant","spell","SPELLS","CALL_DREADSTALKERS","category","SPELL_CATEGORIES","ROTATIONAL","cooldown","gcd","base","castEfficiency","suggestion","recommendedEfficiency","HAND_OF_GULDAN_CAST","DEMONBOLT","CORRUPTION_CAST","buffSpellId","CORRUPTION_DEBUFF","id","SOUL_STRIKE_TALENT","enabled","hasTalent","SUMMON_VILEFIEND_TALENT","DOOM_TALENT","SHADOW_BOLT_DEMO","BILESCOURGE_BOMBERS_TALENT","ROTATIONAL_AOE","IMPLOSION_CAST","SUMMON_DEMONIC_TYRANT","COOLDOWNS","NETHER_PORTAL_TALENT","NETHER_PORTAL_BUFF","POWER_SIPHON_TALENT","GRIMOIRE_FELGUARD_TALENT","averageIssueEfficiency","majorIssueEfficiency","DEMONIC_STRENGTH_TALENT","UNENDING_RESOLVE","DEFENSIVE","importance","ISSUE_IMPORTANCE","MINOR","DARK_PACT_TALENT","BURNING_RUSH_TALENT","UTILITY","DRAIN_LIFE","MORTAL_COIL_TALENT","DEMONIC_CIRCLE_SUMMON","DEMONIC_CIRCLE_TELEPORT","SOULSTONE","DEMONIC_GATEWAY_CAST","BANISH","CREATE_HEALTHSTONE","CREATE_SOULWELL","SUBJUGATE_DEMON","EYE_OF_KILROGG","FEAR_CAST","CURSE_OF_TONGUES","CURSE_OF_WEAKNESS","CURSE_OF_EXHAUSTION","HEALTH_FUNNEL_CAST","SUMMON_IMP","SUMMON_VOIDWALKER","SUMMON_SUCCUBUS","SUMMON_FELHUNTER","SUMMON_FELGUARD","SHADOWFURY","DARKFURY_TALENT","FEL_DOMINATION","hasConduitBySpellID","FEL_CELERITY","conduitRankBySpellID","UNENDING_BREATH","HOWL_OF_TERROR_TALENT","CoreAbilities","AlwaysBeCasting","statisticOrder","STATISTIC_ORDER","CORE","when","suggestionThresholds","addSuggestion","suggest","actual","recommended","SpellLink","DEMONIC_CIRCLE","icon","i18n","_","formatPercentage","downtimePercentage","isGreaterThan","minor","average","major","style","CoreAlwaysBeCasting","CooldownThroughputTracker","CoreCooldownThroughputTracker","castCooldowns","duration","summary","BUILT_IN_SUMMARY_TYPES","DAMAGE","Felstorm","args","_lastDemonicStrengthCast","mainPetFelstormCount","addEventListener","Events","cast","by","SELECTED_PLAYER","demonicStrengthCast","applybuff","to","SELECTED_PLAYER_PET","FELSTORM_BUFF","applyFelstormBuff","Math","ceil","calculateMaxCasts","owner","fightDuration","maxCasts","isLessThan","event","timestamp","sourceInstance","Analyzer","SoulShardTracker","resource","RESOURCE_TYPES","SOUL_SHARDS","shouldProcessCastEvent","index","_getClassResourceIndex","classResources","amount","cost","max","ability","guid","hasBuff","DEMONIC_CALLING_BUFF","Object","keys","find","key","type","ResourceTracker","SoulShardDetails","shardsWasted","soulShardTracker","wasted","toFixed","Statistic","position","size","tooltip","BoringSpellValueText","title","url","render","Panel","ResourceBreakdown","tracker","showSpenders","dependencies","Doom","damage","active","handleDoomDamage","enemies","getBuffUptime","uptime","absorbed","STATISTIC_CATEGORY","TALENTS","formatThousands","ItemDamageDone","Uptime","Enemies","DemonologyWarlockChecklist","thresholds","shardTracker","DotUptime","props","Requirement","name","AbilityRequirement","GenericCastEfficiencyRequirement","getCastEfficiencyForSpellId","Rule","description","felstorm","doom","soulShards","valueTooltip","downtime","PreparationRule","Checklist","Component","combatants","selected","preparationRuleAnalyzer","soulShardDetails","alwaysBeCasting","BaseChecklist","Combatants","CastEfficiency","PreparationRuleAnalyzer","obj","META_CLASSES","META_TOOLTIPS","DESPAWN_REASONS","TimelinePet","petInfo","instance","summonedBy","summonAbility","spawn","expectedDespawn","realDespawn","despawnedBy","history","meta","iconClass","x","y","shouldImplode","playerPosition","currentEnergy","reason","contents","push","setMeta","PETS","WILD_IMP_HOG","WILD_IMP_HOG_SUMMON","DREADSTALKER","DREADSTALKER_SUMMON_1","VILEFIEND","GRIMOIRE_FELGUARD","DEMONIC_TYRANT","WILD_IMP_INNER_DEMONS","WILD_IMP_ID_SUMMON","BILESCOURGE","BILESCOURGE_SUMMON","isRandom","VICIOUS_HELLHOUND","VICIOUS_HELLHOUND_SUMMON","SHIVARRA","SHIVARRA_SUMMON","DARKHOUND","DARKHOUND_SUMMON","ILLIDARI_SATYR","ILLIDARI_SATYR_SUMMON","VOID_TERROR","VOID_TERROR_SUMMON","URZUL","URZUL_SUMMON","WRATHGUARD","WRATHGUARD_SUMMON","EYE_OF_GULDAN","EYE_OF_GULDAN_SUMMON","PRINCE_MALCHEZAAR","PRINCE_MALCHEZAAR_SUMMON","indexByGuid","forEach","pet","isWildImp","isWarlockPet","isPermanentPet","Boolean","Timeline","timeline","filter","predicate","permanentPets","length","despawn","reduce","spellName","pets","PetDamage","_ensureFieldExists","instances","total","undefined","map","getDamageForGuid","current","DemoPets","isGuid","_toGuid","hasEntry","currentTimestamp","petId","getPetsAtTimestamp","playerPets","_getPetInfo","_getPets","permanentPetDamage","groupPetsBySummonAbility","SummonDemonicTyrant","demonicTyrantPower","_hasDemonicConsumption","_petsPerCast","summonDemonicTyrantCast","DEMONIC_CONSUMPTION_TALENT","demoPets","currentPets","countsPerCast","tyrantPower","avgPets","values","totalPerSource","source","mergedPets","demonSource","petTableRows","align","Number","avgTyrantPower","acc","val","tyrantFooter","petTable","dropdown","footer","LegionStrike","casts","FELGUARD_LEGION_STRIKE","legionStrikeCast","legionStrikeDamage","_isPermanentPet","sourceID","_getPetGuid","PetDamageHandler","onPetDamage","addDamage","PERMANENT_PET_SUMMON_ABILITY_IDS","FEL_IMP_SUMMON","VOIDLORD_SUMMON","OBSERVER_SUMMON","SHADOW_SUCCUBUS_SUMMON","SHIVARRA_PERMANENT_SUMMON","WRATHGUARD_PERMANENT_SUMMON","TEMPORARY_PET_SUMMON_ABILITY_IDS","DREADSTALKER_SUMMON_2","PET_SUMMON_ABILITY_IDS","SUMMON_TO_SPELL_MAP","INNER_DEMONS_TALENT","PERMANENT_PET_ABILITIES_TO_SUMMON_MAP","IMP_FIREBOLT","VOIDWALKER_CONSUMING_SHADOWS","FELHUNTER_SHADOW_BITE","SUCCUBUS_LASH_OF_PAIN","FELGUARD_PURSUIT","FELSTORM_DAMAGE","PetSummonHandler","options","_lastDemonicTyrantCast","_lastIDtick","_lastSpendResource","_lastPlayerPosition","summon","onSummon","onCast","SpendResource","onSpendResource","onDamageTaken","energize","onEnergize","heal","onHealTaken","onAbsorb","targetID","tryDespawnLastPermanentPet","targetInstance","_getPetDuration","_getSummonSpell","setWildImpProperties","power","addPet","pushHistory","_updatePlayerPosition","Infinity","DEMONIC_POWER","remainingBuffTime","WildImpEnergyHandler","_wildImpIds","initializeWildImps","onPetCast","includes","_getPetFromTimeline","energyResource","ENERGY","updatePosition","oldEnergy","newEnergy","_toId","PowerSiphonHandler","onPowerSiphonCast","activeImpsAfterCast","currentImps","sort","imp1","imp2","filtered","imp","encodeTargetString","slice","DemonicTyrantHandler","_lastCast","onDemonicTyrantCast","removebuff","onDemonicPowerRemove","affectedPets","extend","actualBuffTime","old","ImplosionHandler","_targetsHit","onImplosionCast","IMPLOSION_DAMAGE","onImplosionDamage","imps","some","target","_getDistance","x1","y1","x2","y2","sqrt","DeathEvents","start","secondWidth","deaths","resurrections","eventStart","left","Tooltip","content","formatDuration","className","PetRow","totalWidth","width","iconLeft","barLeft","maxWidth","min","isSummonAbilityKnown","hasTooltip","top","zIndex","SpellIcon","Icon","background","data-effect","KeyCastsRow","events","EventType","Cast","tooltipInfo","extraInfo","nearbyCasts","join","important","abilityId","endTimestamp","PetTimeline","gemini","handleMouseWheel","bind","state","zoom","petTimeline","importantEvents","decorateCloseCasts","decorateImplosionCasts","historyBySpellId","manualCastIds","tyrantCasts","filterHistoryCasts","implosionCasts","powerSiphonCasts","netherPortalCasts","netherPortalWindows","castsDuringNetherPortal","historyArray","window","abilityName","event1","event2","e","scrollbar","preventDefault","stopPropagation","detail","_viewElement","scrollLeft","deltaY","i","minI","maxI","leftLimit","rightLimit","j","impCount","end","others","seconds","skipInterval","totalHeight","onClick","setState","spellId","height","onWheel","ref","comp","Array","second","keyEvents","invalidated","React","PureComponent","TimelineTab","padding","marginTop","marginLeft","marginRight","PetTimelineTab","order","TabComponent","fight","start_time","end_time","deathTracker","spellHistory","SpellHistory","DeathTracker","CHECKED_EVENT_TYPES","BeginCast","Damage","PrepullPetNormalizer","maxTimestamp","summonedPets","fabricatedEvents","Summon","byPlayerPet","petInstance","petString","_verifyPermanentPet","fabricatedEvent","playerId","sourceIsFriendly","targetIsFriendly","abilityIcon","__fabricated","unshift","EventsNormalizer","SummonOrderNormalizer","_events","idx","isDogSummon","isTyrantSummon","castTimestamp","previousEventIndex","previousEvent","isSharpenedDreadfangs","isDemonicConsumption","isDemonFire","swapEvents","SHARPENED_DREADFANGS","splice","__modified","DEMONIC_TYRANT_DAMAGE","DEMONIC_CONSUMPTION_CAST","PowerSiphonNormalizer","lastPowerSiphonCast","_isFromWildImp","targetString","info","Dreadlash","_primaryTarget","cleavedDamage","bonusDamage","DREADLASH_TALENT","DREADBITE","handleDreadbite","handleDreadstalkerCast","calculateEffectiveDamage","formatItemDamageDone","DemonicStrength","_removedAt","handleFelstormDamage","handleRemoveDemonicStrength","getSourceEntity","Pets","BilescourgeBombers","BILESCOURGE_BOMBERS_DAMAGE","handleBilescourgeDamage","DemonicCalling","wastedProcs","_expectedBuffEnd","DEMONIC_CALLING_TALENT","applyDemonicCallingBuff","refreshbuff","refreshDemonicCallingBuff","removeDemonicCallingBuff","spellUsable","isAvailable","SpellUsable","PowerSiphon","_cast","_count","handlePowerSiphonCast","DEMONIC_CORE_BUFF","handleDemonicCore","applybuffstack","fightend","onFinished","totalCores","averageCores","FromTheShadows","FROM_THE_SHADOWS_TALENT","HAND_OF_GULDAN_DAMAGE","handleDamage","enemy","getEntity","FROM_THE_SHADOWS_DEBUFF","SoulStrike","SOUL_STRIKE_DAMAGE","handleSoulStrikeDamage","shardsGained","getGeneratedBySpell","SOUL_STRIKE_SHARD_GEN","SummonVilefiend","getPetDamage","SoulConduit","SOUL_CONDUIT_TALENT","generated","SOUL_CONDUIT_SHARD_GEN","extraHogs","floor","totalSpent","spent","findMax","k","n","binomialPMF","InnerDemons","GrimoireFelguard","abilityTracker","AbilityTracker","SacrificedSouls","_shadowBoltDamage","_demonboltDamage","_queue","SACRIFICED_SOULS_TALENT","handleCast","bonus","getPetCount","castIndex","findIndex","hasPS","totalBonusDamage","DemonicConsumption","_currentBonus","handleDemonicTyrantDamage","NetherPortal","TalentStatisticBox","constructor","subStatistic","StatisticsListBox","module","dreadlash","demonicStrength","bilescourgeBombers","demonicCalling","powerSiphon","fromTheShadows","soulStrike","summonVilefiend","soulConduit","innerDemons","grimoireFelguard","sacrificedSouls","demonicConsumption","netherPortal","CombatLogParser","CoreCombatLogParser","specModules","abilities","cooldownThroughputTracker","checklist","summonDemonicTyrant","legionStrike","petDamageHandler","petSummonHandler","wildImpEnergyHandler","powerSiphonHandler","demonicTyrantHandler","implosionHandler","petTimelineTab","summonOrderNormalizer","prepullPetNormalizer","powerSiphonNormalizer","talents","arcaneTorrent","ArcaneTorrent","children","increase","raw","other","xmlns","viewBox","d","eventEmitter","resourceUpdates","buildersObj","spendersObj","maxResource","spentByCast","resourceChangeType","waste","gain","resourceChange","_applyBuilder","getResource","maxGain","initBuilderAbility","used","eventResource","getReducedCost","initSpenderAbility","triggerSpendEvent","resourceCost","r","fabricateEvent","EventEmitter","a","b","resourceName","prepareGenerated","prepareSpent","totalGenerated","totalWasted","totalCasts","spendersCasts","colSpan","paddingRight","textAlign","bodyStyle","defaultProps","GENERAL","OneVariableBinomialChart","hover","probabilities","actualEvent","xAxis","yAxis","yDomain","data","spec","encoding","field","axis","grid","format","tickFormat","scale","domain","layer","mark","color","line","strokeWidth","filled","disableHeight","BaseChart","expectedProcCount","procChance","procAttempts","p","numerator","denominator","binomialDistribution","pow","binomialCDF","probability","pmf","maxP","resetProbabilityArray","actualProcs","from","_x","poissonBinomialPMF","setMinMaxProbabilities","threshold","procProbabilities","rangeMin","rangeMax","Ekj","lookup","value","Error","fill","plotOneVariableBinomChart","trackedName","tooltipText","actualEventY","charges","toString"],"mappings":"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","file":"static/js/DemonologyWarlock.d743fecc.chunk.js","sourcesContent":["import CoreAbilities from 'parser/core/modules/Abilities';\r\n\r\nimport SPELLS from 'common/SPELLS';\r\nimport ISSUE_IMPORTANCE from 'parser/core/ISSUE_IMPORTANCE';\r\n\r\nconst FEL_CELERITY_REDUCTION_SEC = {\r\n  1: 48,\r\n  2: 51,\r\n  3: 54,\r\n  4: 57,\r\n  5: 60,\r\n  6: 63,\r\n  7: 66,\r\n  8: 69,\r\n  9: 72,\r\n  10: 75,\r\n  11: 78,\r\n  12: 81,\r\n  13: 84,\r\n  14: 87,\r\n  15: 90,\r\n};\r\n\r\nclass Abilities extends CoreAbilities {\r\n  spellbook() {\r\n    const combatant = this.selectedCombatant;\r\n    return [\r\n      // Rotational spells\r\n      {\r\n        spell: SPELLS.CALL_DREADSTALKERS,\r\n        category: Abilities.SPELL_CATEGORIES.ROTATIONAL,\r\n        cooldown: 20,\r\n        gcd: {\r\n          base: 1500,\r\n        },\r\n        castEfficiency: {\r\n          suggestion: true,\r\n          recommendedEfficiency: 0.9,\r\n        },\r\n      },\r\n      {\r\n        spell: SPELLS.HAND_OF_GULDAN_CAST,\r\n        category: Abilities.SPELL_CATEGORIES.ROTATIONAL,\r\n        gcd: {\r\n          base: 1500,\r\n        },\r\n      },\r\n      {\r\n        spell: SPELLS.DEMONBOLT,\r\n        category: Abilities.SPELL_CATEGORIES.ROTATIONAL,\r\n        gcd: {\r\n          base: 1500,\r\n        },\r\n      },\r\n      {\r\n        spell: SPELLS.CORRUPTION_CAST,\r\n        category: Abilities.SPELL_CATEGORIES.ROTATIONAL,\r\n        gcd: {\r\n          base: 1500,\r\n        },\r\n        buffSpellId: SPELLS.CORRUPTION_DEBUFF.id,\r\n      },\r\n      {\r\n        spell: SPELLS.SOUL_STRIKE_TALENT,\r\n        category: Abilities.SPELL_CATEGORIES.ROTATIONAL,\r\n        cooldown: 10,\r\n        enabled: combatant.hasTalent(SPELLS.SOUL_STRIKE_TALENT.id),\r\n        gcd: {\r\n          base: 1500,\r\n        },\r\n        castEfficiency: {\r\n          suggestion: true,\r\n          recommendedEfficiency: 0.90,\r\n        },\r\n      },\r\n      {\r\n        spell: SPELLS.SUMMON_VILEFIEND_TALENT,\r\n        category: Abilities.SPELL_CATEGORIES.ROTATIONAL,\r\n        cooldown: 45,\r\n        enabled: combatant.hasTalent(SPELLS.SUMMON_VILEFIEND_TALENT.id),\r\n        gcd: {\r\n          base: 1500,\r\n        },\r\n        castEfficiency: {\r\n          suggestion: true,\r\n          recommendedEfficiency: 0.90,\r\n        },\r\n      },\r\n      {\r\n        spell: SPELLS.DOOM_TALENT,\r\n        category: Abilities.SPELL_CATEGORIES.ROTATIONAL,\r\n        gcd: {\r\n          base: 1500,\r\n        },\r\n        enabled: combatant.hasTalent(SPELLS.DOOM_TALENT.id),\r\n        buffSpellId: SPELLS.DOOM_TALENT.id,\r\n      },\r\n      {\r\n        spell: SPELLS.SHADOW_BOLT_DEMO,\r\n        category: Abilities.SPELL_CATEGORIES.ROTATIONAL,\r\n        gcd: {\r\n          base: 1500,\r\n        },\r\n      },\r\n      // TODO: figure which spell triggers this now\r\n      // {\r\n      //   spell: SPELLS.FELSTORM,\r\n      //   category: Abilities.SPELL_CATEGORIES.ROTATIONAL,\r\n      //   cooldown: 45,\r\n      //   gcd: null,\r\n      // },\r\n      {\r\n        spell: SPELLS.BILESCOURGE_BOMBERS_TALENT,\r\n        category: Abilities.SPELL_CATEGORIES.ROTATIONAL_AOE,\r\n        cooldown: 30,\r\n        enabled: combatant.hasTalent(SPELLS.BILESCOURGE_BOMBERS_TALENT.id),\r\n        gcd: {\r\n          base: 1500,\r\n        },\r\n        castEfficiency: {\r\n          suggestion: true,\r\n          recommendedEfficiency: 0.9,\r\n        },\r\n      },\r\n      {\r\n        spell: SPELLS.IMPLOSION_CAST,\r\n        category: Abilities.SPELL_CATEGORIES.ROTATIONAL_AOE,\r\n        gcd: {\r\n          base: 1500,\r\n        },\r\n      },\r\n\r\n      // Cooldowns\r\n      {\r\n        spell: SPELLS.SUMMON_DEMONIC_TYRANT,\r\n        category: Abilities.SPELL_CATEGORIES.COOLDOWNS,\r\n        cooldown: 90,\r\n        gcd: {\r\n          base: 1500,\r\n        },\r\n        castEfficiency: {\r\n          suggestion: true,\r\n          recommendedEfficiency: 0.90,\r\n        },\r\n      },\r\n      {\r\n        spell: SPELLS.NETHER_PORTAL_TALENT,\r\n        category: Abilities.SPELL_CATEGORIES.COOLDOWNS,\r\n        cooldown: 180,\r\n        enabled: combatant.hasTalent(SPELLS.NETHER_PORTAL_TALENT.id),\r\n        gcd: {\r\n          base: 1500,\r\n        },\r\n        castEfficiency: {\r\n          suggestion: true,\r\n          recommendedEfficiency: 0.90,\r\n        },\r\n        buffSpellId: SPELLS.NETHER_PORTAL_BUFF.id,\r\n      },\r\n      {\r\n        spell: SPELLS.POWER_SIPHON_TALENT,\r\n        category: Abilities.SPELL_CATEGORIES.COOLDOWNS,\r\n        cooldown: 30,\r\n        enabled: combatant.hasTalent(SPELLS.POWER_SIPHON_TALENT.id),\r\n        gcd: {\r\n          base: 1500,\r\n        },\r\n        castEfficiency: {\r\n          suggestion: true,\r\n          recommendedEfficiency: 0.90,\r\n        },\r\n      },\r\n      {\r\n        spell: SPELLS.GRIMOIRE_FELGUARD_TALENT,\r\n        category: Abilities.SPELL_CATEGORIES.COOLDOWNS,\r\n        cooldown: 120,\r\n        enabled: combatant.hasTalent(SPELLS.GRIMOIRE_FELGUARD_TALENT.id),\r\n        gcd: {\r\n          base: 1500,\r\n        },\r\n        castEfficiency: {\r\n          suggestion: true,\r\n          recommendedEfficiency: 0.90,\r\n          averageIssueEfficiency: 0.80,\r\n          majorIssueEfficiency: 0.70,\r\n        },\r\n      },\r\n      {\r\n        spell: SPELLS.DEMONIC_STRENGTH_TALENT,\r\n        category: Abilities.SPELL_CATEGORIES.COOLDOWNS,\r\n        cooldown: 60,\r\n        enabled: combatant.hasTalent(SPELLS.DEMONIC_STRENGTH_TALENT.id),\r\n        gcd: {\r\n          base: 1500,\r\n        },\r\n        castEfficiency: {\r\n          suggestion: true,\r\n          recommendedEfficiency: 0.90,\r\n        },\r\n      },\r\n\r\n      // Defensive\r\n      {\r\n        spell: SPELLS.UNENDING_RESOLVE,\r\n        buffSpellId: SPELLS.UNENDING_RESOLVE.id,\r\n        category: Abilities.SPELL_CATEGORIES.DEFENSIVE,\r\n        cooldown: 180,\r\n        gcd: null,\r\n        castEfficiency: {\r\n          suggestion: true,\r\n          importance: ISSUE_IMPORTANCE.MINOR,\r\n          recommendedEfficiency: 0.33,\r\n          averageIssueEfficiency: 0.20,\r\n          majorIssueEfficiency: 0.10,\r\n        },\r\n      },\r\n      {\r\n        spell: SPELLS.DARK_PACT_TALENT,\r\n        category: Abilities.SPELL_CATEGORIES.DEFENSIVE,\r\n        cooldown: 60,\r\n        enabled: combatant.hasTalent(SPELLS.DARK_PACT_TALENT.id),\r\n        gcd: null,\r\n        castEfficiency: {\r\n          suggestion: true,\r\n          importance: ISSUE_IMPORTANCE.MINOR,\r\n          recommendedEfficiency: 0.33,\r\n          averageIssueEfficiency: 0.20,\r\n          majorIssueEfficiency: 0.10,\r\n        },\r\n        buffSpellId: SPELLS.DARK_PACT_TALENT.id,\r\n      },\r\n\r\n      // Utility\r\n      {\r\n        spell: SPELLS.BURNING_RUSH_TALENT,\r\n        category: Abilities.SPELL_CATEGORIES.UTILITY,\r\n        enabled: combatant.hasTalent(SPELLS.BURNING_RUSH_TALENT.id),\r\n        gcd: {\r\n          base: 1500,\r\n        },\r\n        buffSpellId: SPELLS.BURNING_RUSH_TALENT.id,\r\n      },\r\n      {\r\n        spell: SPELLS.DRAIN_LIFE,\r\n        category: Abilities.SPELL_CATEGORIES.UTILITY,\r\n        gcd: {\r\n          base: 1500,\r\n        },\r\n      },\r\n      {\r\n        spell: SPELLS.MORTAL_COIL_TALENT,\r\n        category: Abilities.SPELL_CATEGORIES.UTILITY,\r\n        cooldown: 45,\r\n        enabled: combatant.hasTalent(SPELLS.MORTAL_COIL_TALENT.id),\r\n        gcd: {\r\n          base: 1500,\r\n        },\r\n      },\r\n      {\r\n        spell: SPELLS.DEMONIC_CIRCLE_SUMMON,\r\n        category: Abilities.SPELL_CATEGORIES.UTILITY,\r\n        gcd: {\r\n          base: 1500,\r\n        },\r\n        cooldown: 10,\r\n        castEfficiency: {\r\n          suggestion: false,\r\n        },\r\n      },\r\n      {\r\n        spell: SPELLS.DEMONIC_CIRCLE_TELEPORT,\r\n        category: Abilities.SPELL_CATEGORIES.UTILITY,\r\n        cooldown: 30,\r\n        gcd: {\r\n          base: 1500,\r\n        },\r\n        castEfficiency: {\r\n          suggestion: false,\r\n        },\r\n      },\r\n      {\r\n        spell: SPELLS.SOULSTONE,\r\n        category: Abilities.SPELL_CATEGORIES.UTILITY,\r\n        gcd: {\r\n          base: 1500,\r\n        },\r\n      },\r\n      {\r\n        spell: SPELLS.DEMONIC_GATEWAY_CAST,\r\n        category: Abilities.SPELL_CATEGORIES.UTILITY,\r\n        cooldown: 10,\r\n        gcd: {\r\n          base: 1500,\r\n        },\r\n      },\r\n      {\r\n        spell: SPELLS.BANISH,\r\n        category: Abilities.SPELL_CATEGORIES.UTILITY,\r\n        gcd: {\r\n          base: 1500,\r\n        },\r\n      },\r\n      {\r\n        spell: SPELLS.CREATE_HEALTHSTONE,\r\n        category: Abilities.SPELL_CATEGORIES.UTILITY,\r\n        gcd: {\r\n          base: 1500,\r\n        },\r\n      },\r\n      {\r\n        spell: SPELLS.CREATE_SOULWELL,\r\n        category: Abilities.SPELL_CATEGORIES.UTILITY,\r\n        cooldown: 120,\r\n        gcd: {\r\n          base: 1500,\r\n        },\r\n      },\r\n      {\r\n        spell: SPELLS.SUBJUGATE_DEMON,\r\n        category: Abilities.SPELL_CATEGORIES.UTILITY,\r\n        gcd: {\r\n          base: 1500,\r\n        },\r\n      },\r\n      {\r\n        spell: SPELLS.EYE_OF_KILROGG,\r\n        category: Abilities.SPELL_CATEGORIES.UTILITY,\r\n        gcd: {\r\n          base: 1500,\r\n        },\r\n      },\r\n      {\r\n        spell: SPELLS.FEAR_CAST,\r\n        category: Abilities.SPELL_CATEGORIES.UTILITY,\r\n        gcd: {\r\n          base: 1500,\r\n        },\r\n      },\r\n      {\r\n        spell: SPELLS.CURSE_OF_TONGUES,\r\n        category: Abilities.SPELL_CATEGORIES.UTILITY,\r\n        gcd: {\r\n          base: 1500,\r\n        },\r\n      },\r\n      {\r\n        spell: SPELLS.CURSE_OF_WEAKNESS,\r\n        category: Abilities.SPELL_CATEGORIES.UTILITY,\r\n        gcd: {\r\n          base: 1500,\r\n        },\r\n      },\r\n      {\r\n        spell: SPELLS.CURSE_OF_EXHAUSTION,\r\n        category: Abilities.SPELL_CATEGORIES.UTILITY,\r\n        gcd: {\r\n          base: 1500,\r\n        },\r\n      },\r\n      {\r\n        spell: SPELLS.HEALTH_FUNNEL_CAST,\r\n        category: Abilities.SPELL_CATEGORIES.UTILITY,\r\n        gcd: {\r\n          base: 1500,\r\n        },\r\n      },\r\n      {\r\n        spell: [\r\n          SPELLS.SUMMON_IMP,\r\n          SPELLS.SUMMON_VOIDWALKER,\r\n          SPELLS.SUMMON_SUCCUBUS,\r\n          SPELLS.SUMMON_FELHUNTER,\r\n          SPELLS.SUMMON_FELGUARD,\r\n        ],\r\n        category: Abilities.SPELL_CATEGORIES.UTILITY,\r\n        gcd: {\r\n          base: 1500,\r\n        },\r\n      },\r\n      {\r\n        spell: SPELLS.SHADOWFURY,\r\n        category: Abilities.SPELL_CATEGORIES.UTILITY,\r\n        gcd: {\r\n          base: 1500,\r\n        },\r\n        cooldown: combatant.hasTalent(SPELLS.DARKFURY_TALENT.id) ? 45 : 60,\r\n      },\r\n      {\r\n        spell: SPELLS.FEL_DOMINATION,\r\n        category: Abilities.SPELL_CATEGORIES.UTILITY,\r\n        cooldown: combatant.hasConduitBySpellID(SPELLS.FEL_CELERITY.id) ? 180 - FEL_CELERITY_REDUCTION_SEC[combatant.conduitRankBySpellID(SPELLS.FEL_CELERITY.id)] : 180,\r\n        gcd: {\r\n          base: 1500,\r\n        },\r\n      },\r\n      {\r\n        spell: SPELLS.UNENDING_BREATH,\r\n        category: Abilities.SPELL_CATEGORIES.UTILITY,\r\n        gcd: {\r\n          base: 1500,\r\n        },\r\n      },\r\n      {\r\n        spell: SPELLS.HOWL_OF_TERROR_TALENT,\r\n        category: Abilities.SPELL_CATEGORIES.UTILITY,\r\n        enabled: combatant.hasTalent(SPELLS.HOWL_OF_TERROR_TALENT.id),\r\n        cooldown: 40,\r\n        gcd: {\r\n          base: 1500,\r\n        },\r\n      },\r\n    ];\r\n  }\r\n}\r\n\r\nexport default Abilities;\r\n","import React from 'react';\r\n\r\nimport CoreAlwaysBeCasting from 'parser/shared/modules/AlwaysBeCasting';\r\n\r\nimport SPELLS from 'common/SPELLS';\r\nimport { formatPercentage } from 'common/format';\r\nimport SpellLink from 'common/SpellLink';\r\n\r\nimport { STATISTIC_ORDER } from 'interface/others/StatisticBox';\r\n\r\nimport { i18n } from '@lingui/core';\r\nimport { t } from '@lingui/macro';\r\n\r\nclass AlwaysBeCasting extends CoreAlwaysBeCasting {\r\n  get suggestionThresholds() {\r\n    return {\r\n      actual: this.downtimePercentage,\r\n      isGreaterThan: {\r\n        minor: 0.1,\r\n        average: 0.2,\r\n        major: 0.3,\r\n      },\r\n      style: 'percentage',\r\n    };\r\n  }\r\n\r\n  statisticOrder = STATISTIC_ORDER.CORE(1);\r\n\r\n  suggestions(when) {\r\n    when(this.suggestionThresholds)\r\n      .addSuggestion((suggest, actual, recommended) => suggest(<>Your downtime can be improved. Try to Always Be Casting (ABC), try to reduce the delay between casting spells. Even if you have to move, try casting something instant. Make good use of your <SpellLink id={SPELLS.DEMONIC_CIRCLE.id} /> or <SpellLink id={SPELLS.BURNING_RUSH_TALENT.id} /> when you can.</>)\r\n        .icon('spell_mage_altertime')\r\n        .actual(i18n._(t('warlock.demonology.suggestions.alwaysBeCasting.downtime')`${formatPercentage(actual)}% downtime`))\r\n        .recommended(`<${formatPercentage(recommended)}% is recommended`));\r\n  }\r\n}\r\n\r\nexport default AlwaysBeCasting;\r\n","import CoreCooldownThroughputTracker, { BUILT_IN_SUMMARY_TYPES } from 'parser/shared/modules/CooldownThroughputTracker';\r\n\r\nimport SPELLS from 'common/SPELLS';\r\n\r\nclass CooldownThroughputTracker extends CoreCooldownThroughputTracker {\r\n  static castCooldowns = [\r\n    ...CoreCooldownThroughputTracker.castCooldowns,\r\n    {\r\n      spell: SPELLS.NETHER_PORTAL_TALENT,\r\n      duration: 20,\r\n      summary: [\r\n        BUILT_IN_SUMMARY_TYPES.DAMAGE,\r\n      ],\r\n    },\r\n    {\r\n      spell: SPELLS.GRIMOIRE_FELGUARD_TALENT,\r\n      duration: 15,\r\n      summary: [\r\n        BUILT_IN_SUMMARY_TYPES.DAMAGE,\r\n      ],\r\n    },\r\n    {\r\n      spell: SPELLS.SUMMON_DEMONIC_TYRANT,\r\n      duration: 15,\r\n      summary: [\r\n        BUILT_IN_SUMMARY_TYPES.DAMAGE,\r\n      ],\r\n    },\r\n  ];\r\n}\r\n\r\nexport default CooldownThroughputTracker;\r\n","import React from 'react';\r\n\r\nimport Analyzer, { SELECTED_PLAYER, SELECTED_PLAYER_PET } from 'parser/core/Analyzer';\r\nimport calculateMaxCasts from 'parser/core/calculateMaxCasts';\r\n\r\nimport SPELLS from 'common/SPELLS';\r\nimport SpellLink from 'common/SpellLink';\r\nimport { formatPercentage } from 'common/format';\r\nimport Events from 'parser/core/Events';\r\n\r\nimport { i18n } from '@lingui/core';\r\nimport { t } from '@lingui/macro';\r\n\r\nconst FELSTORM_COOLDOWN = 30;\r\n// when Demonic Strength is cast, then AFTER the cast, Felguard charges at the target, and after he arrives, does the Felstorm\r\n// this delay is so that every Felstorm caused by Demonic Strength accounts for the charge \"travel\" time\r\nconst DEMONIC_STRENGTH_BUFFER = 1500;\r\n\r\nclass Felstorm extends Analyzer {\r\n  get maxCasts() {\r\n    return Math.ceil(calculateMaxCasts(FELSTORM_COOLDOWN, this.owner.fightDuration));\r\n  }\r\n\r\n  get suggestionThresholds() {\r\n    const percentage = (this.mainPetFelstormCount / this.maxCasts) || 0;\r\n    return {\r\n      actual: percentage,\r\n      isLessThan: {\r\n        minor: 0.9,\r\n        average: 0.8,\r\n        major: 0.7,\r\n      },\r\n      style: 'percentage',\r\n    };\r\n  }\r\n\r\n  _lastDemonicStrengthCast = null;\r\n  mainPetFelstormCount = 0;\r\n\r\n  constructor(...args) {\r\n    super(...args);\r\n    this.addEventListener(Events.cast.by(SELECTED_PLAYER).spell(SPELLS.DEMONIC_STRENGTH_TALENT), this.demonicStrengthCast);\r\n    this.addEventListener(Events.applybuff.to(SELECTED_PLAYER_PET).spell(SPELLS.FELSTORM_BUFF), this.applyFelstormBuff);\r\n  }\r\n\r\n  demonicStrengthCast(event) {\r\n    this._lastDemonicStrengthCast = event.timestamp;\r\n  }\r\n\r\n  // works with either direct /cast Felstorm or by using the Command Demon ability (if direct /cast Felstorm, then the player didn't cast it, but this buff gets applied either way)\r\n  applyFelstormBuff(event) {\r\n    if (this._lastDemonicStrengthCast && event.timestamp <= this._lastDemonicStrengthCast + DEMONIC_STRENGTH_BUFFER) {\r\n      // casting Demonic Strength triggers Felstorm as well, but we care about the pet ability itself, which is on separate cooldown\r\n      return;\r\n    }\r\n    if (!event.sourceInstance) {\r\n      // permanent Felguard doesn't have sourceInstance, while Grimoire: Felguard does (both use Felstorm in the exact same way)\r\n      this.mainPetFelstormCount += 1;\r\n    }\r\n  }\r\n\r\n  suggestions(when) {\r\n    when(this.suggestionThresholds)\r\n      .addSuggestion((suggest, actual, recommended) => suggest(<>You should use your Felguard's <SpellLink id={SPELLS.FELSTORM_BUFF.id} /> more often, preferably on cooldown.</>)\r\n        .icon(SPELLS.FELSTORM_BUFF.icon)\r\n        .actual(i18n._(t('warlock.demonology.suggestions.felstorm.casts')`${this.mainPetFelstormCount} out of ${this.maxCasts} (${formatPercentage(actual)} %) Felstorm casts.`))\r\n        .recommended(`> ${formatPercentage(recommended)} % is recommended`));\r\n  }\r\n}\r\n\r\nexport default Felstorm;\r\n","import ResourceTracker from 'parser/shared/modules/resources/resourcetracker/ResourceTracker';\r\nimport RESOURCE_TYPES from 'game/RESOURCE_TYPES';\r\nimport SPELLS from 'common/SPELLS';\r\n\r\nclass SoulShardTracker extends ResourceTracker {\r\n  constructor(...args) {\r\n    super(...args);\r\n    this.resource = RESOURCE_TYPES.SOUL_SHARDS;\r\n  }\r\n\r\n  onCast(event) {\r\n    if (!this.shouldProcessCastEvent(event)) {\r\n      return;\r\n    }\r\n    // only processes events where there is a Soul Shard class resource info in the event\r\n    // intentionally lower the resources because we get energize events ranging in numbers 0 - 5, not 0 - 50\r\n    const index = this._getClassResourceIndex(event);\r\n    event.classResources[index].amount /= 10;\r\n    event.classResources[index].cost /= 10;\r\n    event.classResources[index].max /= 10;\r\n    super.onCast(event);\r\n  }\r\n\r\n  getReducedCost(event) {\r\n    let cost = super.getReducedCost(event);\r\n    // Demonic Calling (T30 talent) proc reduces the cost of next Call Dreadstalkers by 1 shard\r\n    if (event.ability.guid === SPELLS.CALL_DREADSTALKERS.id && this.selectedCombatant.hasBuff(SPELLS.DEMONIC_CALLING_BUFF.id)) {\r\n      cost -= 1;\r\n    }\r\n    return cost;\r\n  }\r\n\r\n  _getClassResourceIndex(event) {\r\n    return Object.keys(event.classResources).find(key => event.classResources[key].type === RESOURCE_TYPES.SOUL_SHARDS) || 0;\r\n    // \"technically incorrect\", if find() returns 0 as a valid index, it also gets evaluated as \"false\", but || 0 makes it 0 anyway so it's fine\r\n  }\r\n}\r\n\r\nexport default SoulShardTracker;\r\n","import React from 'react';\r\nimport SPELLS from 'common/SPELLS';\r\nimport Analyzer from 'parser/core/Analyzer';\r\nimport ResourceBreakdown from 'parser/shared/modules/resources/resourcetracker/ResourceBreakdown';\r\n\r\nimport Panel from 'interface/others/Panel';\r\nimport STATISTIC_ORDER from 'interface/others/STATISTIC_ORDER';\r\nimport Statistic from 'interface/statistics/Statistic';\r\nimport BoringSpellValueText from 'interface/statistics/components/BoringSpellValueText';\r\n\r\nimport { i18n } from '@lingui/core';\r\nimport { t } from '@lingui/macro';\r\n\r\nimport SoulShardTracker from './SoulShardTracker';\r\n\r\nconst SOUL_SHARD_ICON = 'inv_misc_gem_amethyst_02';\r\n\r\nclass SoulShardDetails extends Analyzer {\r\n  get suggestionThresholds() {\r\n    const shardsWasted = this.soulShardTracker.wasted;\r\n    const shardsWastedPerMinute = (shardsWasted / this.owner.fightDuration) * 1000 * 60;\r\n    return {\r\n      actual: shardsWastedPerMinute,\r\n      isGreaterThan: {\r\n        minor: 5 / 10, // 5 shards in 10 minute fight\r\n        average: 5 / 3, // 5 shards in 3 minute fight\r\n        major: 10 / 3, // 10 shards in 3 minute fight\r\n      },\r\n      style: 'number', // TODO: not sure about this yet\r\n    };\r\n  }\r\n\r\n  static dependencies = {\r\n    soulShardTracker: SoulShardTracker,\r\n  };\r\n  statisticOrder = STATISTIC_ORDER.CORE(2);\r\n\r\n  suggestions(when) {\r\n    const shardsWasted = this.soulShardTracker.wasted;\r\n    when(this.suggestionThresholds)\r\n      .addSuggestion((suggest, actual, recommended) => suggest('You are wasting Soul Shards. Try to use them and not let them cap and go to waste unless you\\'re preparing for bursting adds etc.')\r\n        .icon(SOUL_SHARD_ICON)\r\n        .actual(i18n._(t('warlock.demonology.suggestions.soulShards.wastedPerMinutes')`${shardsWasted} Soul Shards wasted (${actual.toFixed(2)} per minute)`))\r\n        .recommended(`< ${recommended.toFixed(2)} Soul Shards per minute wasted are recommended`));\r\n  }\r\n\r\n  statistic() {\r\n    const shardsWasted = this.soulShardTracker.wasted;\r\n    return (\r\n      <Statistic\r\n        position={STATISTIC_ORDER.CORE(3)}\r\n        size=\"flexible\"\r\n        tooltip={(<>In order for Focus Magic to compete with the other talents on that row, you need to ensure you are getting as much uptime out of the buff as possible. Therefore, if you forget to put the buff on another player or if they player you gave it to is not getting crits very often, then you might need to consider giving the buff to someone else. Ideally, you should aim to trade buffs with another mage who has also taken Focus Magic so you both get the full benefit.</>)}\r\n      >\r\n        <BoringSpellValueText spell={SPELLS.SOUL_SHARDS}>\r\n          {shardsWasted} <small>Wasted Soul Shards</small>\r\n        </BoringSpellValueText>\r\n      </Statistic>\r\n    );\r\n  }\r\n\r\n  tab() {\r\n    return {\r\n      title: 'Soul Shard usage',\r\n      url: 'soul-shards',\r\n      render: () => (\r\n        <Panel>\r\n          <ResourceBreakdown\r\n            tracker={this.soulShardTracker}\r\n            showSpenders\r\n          />\r\n        </Panel>\r\n      ),\r\n    };\r\n  }\r\n}\r\n\r\nexport default SoulShardDetails;\r\n","import React from 'react';\r\n\r\nimport Analyzer, { SELECTED_PLAYER } from 'parser/core/Analyzer';\r\nimport Enemies from 'parser/shared/modules/Enemies';\r\nimport Events from 'parser/core/Events';\r\n\r\nimport SPELLS from 'common/SPELLS';\r\nimport SpellLink from 'common/SpellLink';\r\nimport { formatPercentage, formatThousands } from 'common/format';\r\n\r\nimport STATISTIC_CATEGORY from 'interface/others/STATISTIC_CATEGORY';\r\nimport Statistic from 'interface/statistics/Statistic';\r\nimport BoringSpellValueText from 'interface/statistics/components/BoringSpellValueText';\r\nimport ItemDamageDone from 'interface/ItemDamageDone';\r\nimport UptimeIcon from 'interface/icons/Uptime';\r\nimport { i18n } from '@lingui/core';\r\nimport { t } from '@lingui/macro';\r\n\r\nclass Doom extends Analyzer {\r\n  get uptime() {\r\n    return this.enemies.getBuffUptime(SPELLS.DOOM_TALENT.id) / this.owner.fightDuration;\r\n  }\r\n\r\n  get suggestionThresholds() {\r\n    return {\r\n      actual: this.uptime,\r\n      isLessThan: {\r\n        minor: 0.95,\r\n        average: 0.9,\r\n        major: 0.8,\r\n      },\r\n      style: 'percentage',\r\n    };\r\n  }\r\n\r\n  static dependencies = {\r\n    enemies: Enemies,\r\n  };\r\n  damage = 0;\r\n\r\n  constructor(...args) {\r\n    super(...args);\r\n    this.active = this.selectedCombatant.hasTalent(SPELLS.DOOM_TALENT.id);\r\n    this.addEventListener(Events.damage.by(SELECTED_PLAYER).spell(SPELLS.DOOM_TALENT), this.handleDoomDamage);\r\n  }\r\n\r\n  handleDoomDamage(event) {\r\n    this.damage += event.amount + (event.absorbed || 0);\r\n  }\r\n\r\n  suggestions(when) {\r\n    when(this.suggestionThresholds)\r\n      .addSuggestion((suggest, actual, recommended) => suggest(<>Your <SpellLink id={SPELLS.DOOM_TALENT.id} /> uptime can be improved. Try to pay more attention to your Doom on the boss, as it is one of your Soul Shard generators.</>)\r\n        .icon(SPELLS.DOOM_TALENT.icon)\r\n        .actual(i18n._(t('warlock.demonology.suggestions.doom.uptime')`${formatPercentage(actual)}% Doom uptime`))\r\n        .recommended(`>${formatPercentage(recommended)}% is recommended`));\r\n  }\r\n\r\n  statistic() {\r\n    return (\r\n      <Statistic\r\n        category={STATISTIC_CATEGORY.TALENTS}\r\n        size=\"flexible\"\r\n        tooltip={`${formatThousands(this.damage)} damage`}\r\n      >\r\n        <BoringSpellValueText spell={SPELLS.DOOM_TALENT}>\r\n          <ItemDamageDone amount={this.damage} /><br />\r\n          <UptimeIcon /> {formatPercentage(this.uptime)}% <small>Uptime</small>\r\n        </BoringSpellValueText>\r\n      </Statistic>\r\n    );\r\n  }\r\n}\r\n\r\nexport default Doom;\r\n","import React from 'react';\r\nimport PropTypes from 'prop-types';\r\n\r\nimport SpellLink from 'common/SpellLink';\r\nimport SPELLS from 'common/SPELLS';\r\n\r\nimport Checklist from 'parser/shared/modules/features/Checklist';\r\nimport Rule from 'parser/shared/modules/features/Checklist/Rule';\r\nimport Requirement from 'parser/shared/modules/features/Checklist/Requirement';\r\nimport PreparationRule from 'parser/shared/modules/features/Checklist/PreparationRule';\r\nimport GenericCastEfficiencyRequirement from 'parser/shared/modules/features/Checklist/GenericCastEfficiencyRequirement';\r\n\r\nconst DemonologyWarlockChecklist = ({ combatant, castEfficiency, thresholds, shardTracker }) => {\r\n  const DotUptime = props => (\r\n    <Requirement\r\n      name={(\r\n        <>\r\n          <SpellLink id={props.id} icon /> uptime\r\n        </>\r\n      )}\r\n      thresholds={props.thresholds}\r\n    />\r\n  );\r\n  DotUptime.propTypes = {\r\n    id: PropTypes.number.isRequired,\r\n  };\r\n\r\n  const AbilityRequirement = props => (\r\n    <GenericCastEfficiencyRequirement\r\n      castEfficiency={castEfficiency.getCastEfficiencyForSpellId(props.spell)}\r\n      {...props}\r\n    />\r\n  );\r\n  AbilityRequirement.propTypes = {\r\n    spell: PropTypes.number.isRequired,\r\n  };\r\n\r\n  return (\r\n    <Checklist>\r\n      <Rule\r\n        name=\"Use your core spells\"\r\n        description={<>Demonology has a lot of short cooldowns that make up majority of your rotation, such as <SpellLink id={SPELLS.CALL_DREADSTALKERS.id} /> or Felguard's <SpellLink id={SPELLS.FELSTORM_BUFF.id} />. Try to use them as much as possible.</>}\r\n      >\r\n        <AbilityRequirement spell={SPELLS.CALL_DREADSTALKERS.id} />\r\n        <Requirement\r\n          name={(<SpellLink id={SPELLS.FELSTORM_BUFF.id} />)}\r\n          thresholds={thresholds.felstorm}\r\n        />\r\n        {combatant.hasTalent(SPELLS.BILESCOURGE_BOMBERS_TALENT.id) && <AbilityRequirement spell={SPELLS.BILESCOURGE_BOMBERS_TALENT.id} />}\r\n        {combatant.hasTalent(SPELLS.POWER_SIPHON_TALENT.id) && <AbilityRequirement spell={SPELLS.POWER_SIPHON_TALENT.id} />}\r\n        {combatant.hasTalent(SPELLS.DOOM_TALENT.id) && <DotUptime id={SPELLS.DOOM_TALENT.id} thresholds={thresholds.doom} />}\r\n        {combatant.hasTalent(SPELLS.SOUL_STRIKE_TALENT.id) && <AbilityRequirement spell={SPELLS.SOUL_STRIKE_TALENT.id} />}\r\n      </Rule>\r\n      <Rule\r\n        name=\"Don't cap your Soul Shards\"\r\n        description=\"Avoid overcapping Soul Shards.\"\r\n      >\r\n        <Requirement\r\n          name=\"Wasted shards per minute\"\r\n          thresholds={thresholds.soulShards}\r\n          valueTooltip={`You wasted ${shardTracker.wasted} shards.`}\r\n        />\r\n      </Rule>\r\n      <Rule\r\n        name=\"Use your cooldowns\"\r\n        description=\"Be mindful of your cooldowns if you are specced into them and use them when it's appropriate. It's okay to hold a cooldown for a little bit when the encounter requires it (burn phases), but generally speaking you should use them as much as you can.\"\r\n      >\r\n        <AbilityRequirement spell={SPELLS.SUMMON_DEMONIC_TYRANT.id} />\r\n        {combatant.hasTalent(SPELLS.DEMONIC_STRENGTH_TALENT.id) && <AbilityRequirement spell={SPELLS.DEMONIC_STRENGTH_TALENT.id} />}\r\n        {combatant.hasTalent(SPELLS.SUMMON_VILEFIEND_TALENT.id) && <AbilityRequirement spell={SPELLS.SUMMON_VILEFIEND_TALENT.id} />}\r\n        {combatant.hasTalent(SPELLS.GRIMOIRE_FELGUARD_TALENT.id) && <AbilityRequirement spell={SPELLS.GRIMOIRE_FELGUARD_TALENT.id} />}\r\n        {combatant.hasTalent(SPELLS.NETHER_PORTAL_TALENT.id) && <AbilityRequirement spell={SPELLS.NETHER_PORTAL_TALENT.id} />}\r\n      </Rule>\r\n      <Rule\r\n        name=\"Use your utility and defensive spells\"\r\n        description={(\r\n          <>\r\n            Use other spells in your toolkit to your advantage. For example, you can try to minimize necessary movement by using <SpellLink id={SPELLS.DEMONIC_GATEWAY_CAST.id} icon />, <SpellLink id={SPELLS.DEMONIC_CIRCLE.id} icon />, <SpellLink id={SPELLS.BURNING_RUSH_TALENT.id} icon /> or mitigate incoming damage with <SpellLink id={SPELLS.UNENDING_RESOLVE.id} icon />/<SpellLink id={SPELLS.DARK_PACT_TALENT.id} icon />.<br />\r\n            While you shouldn't cast these defensives on cooldown, be aware of them and use them whenever effective. Not using them at all indicates you might not be aware of them or not using them optimally.\r\n          </>\r\n        )}\r\n      >\r\n        <AbilityRequirement spell={SPELLS.DEMONIC_CIRCLE_TELEPORT.id} />\r\n        {combatant.hasTalent(SPELLS.DARK_PACT_TALENT.id) && <AbilityRequirement spell={SPELLS.DARK_PACT_TALENT.id} />}\r\n        <AbilityRequirement spell={SPELLS.UNENDING_RESOLVE.id} />\r\n      </Rule>\r\n      <Rule\r\n        name=\"Always be casting\"\r\n        description={(\r\n          <>\r\n            You should try to avoid doing nothing during the fight. When you're waiting for cooldowns, keep building Soul Shards to summon additional Wild Imps. When you have to move, use your instant abilities like <SpellLink id={SPELLS.DEMONBOLT.id} /> (with Demonic Core) or <SpellLink id={SPELLS.SOUL_STRIKE_TALENT.id} /> or try to utilize <SpellLink id={SPELLS.DEMONIC_CIRCLE.id} icon>Teleport</SpellLink> or <SpellLink id={SPELLS.DEMONIC_GATEWAY_CAST.id} icon>Gateway</SpellLink> to reduce the movement even further.\r\n          </>\r\n        )}\r\n      >\r\n        <Requirement name=\"Downtime\" thresholds={thresholds.downtime} />\r\n      </Rule>\r\n      <PreparationRule thresholds={thresholds} />\r\n    </Checklist>\r\n  );\r\n};\r\n\r\nDemonologyWarlockChecklist.propTypes = {\r\n  castEfficiency: PropTypes.object.isRequired,\r\n  combatant: PropTypes.shape({\r\n    hasTalent: PropTypes.func.isRequired,\r\n  }).isRequired,\r\n  thresholds: PropTypes.object.isRequired,\r\n  shardTracker: PropTypes.object.isRequired,\r\n};\r\n\r\nexport default DemonologyWarlockChecklist;\r\n","import React from 'react';\r\n\r\nimport BaseChecklist from 'parser/shared/modules/features/Checklist/Module';\r\nimport CastEfficiency from 'parser/shared/modules/CastEfficiency';\r\nimport Combatants from 'parser/shared/modules/Combatants';\r\nimport PreparationRuleAnalyzer from 'parser/shared/modules/features/Checklist/PreparationRuleAnalyzer';\r\n\r\nimport AlwaysBeCasting from '../AlwaysBeCasting';\r\nimport Felstorm from '../Felstorm';\r\nimport SoulShardDetails from '../../soulshards/SoulShardDetails';\r\nimport SoulShardTracker from '../../soulshards/SoulShardTracker';\r\nimport Doom from '../../talents/Doom';\r\n\r\nimport Component from './Component';\r\n\r\nclass Checklist extends BaseChecklist {\r\n  static dependencies = {\r\n    combatants: Combatants,\r\n    castEfficiency: CastEfficiency,\r\n    alwaysBeCasting: AlwaysBeCasting,\r\n    preparationRuleAnalyzer: PreparationRuleAnalyzer,\r\n\r\n    felstorm: Felstorm,\r\n    soulShardDetails: SoulShardDetails,\r\n    soulShardTracker: SoulShardTracker,\r\n    doom: Doom,\r\n  };\r\n\r\n  render() {\r\n    return (\r\n      <Component\r\n        castEfficiency={this.castEfficiency}\r\n        combatant={this.combatants.selected}\r\n        thresholds={{\r\n          ...this.preparationRuleAnalyzer.thresholds,\r\n\r\n          doom: this.doom.suggestionThresholds,\r\n          felstorm: this.felstorm.suggestionThresholds,\r\n          soulShards: this.soulShardDetails.suggestionThresholds,\r\n          downtime: this.alwaysBeCasting.suggestionThresholds,\r\n        }}\r\n        shardTracker={this.soulShardTracker}\r\n      />\r\n    );\r\n  }\r\n}\r\n\r\nexport default Checklist;\r\n","import SPELLS from 'common/SPELLS';\r\n\r\nconst INNER_DEMON_NETHER_PORTAL_DURATION = 15000;\r\n\r\nconst indexByGuid = obj => {\r\n  Object.keys(obj).forEach(key => {\r\n    const pet = obj[key];\r\n    obj[pet.guid] = pet;\r\n  });\r\n  return obj;\r\n};\r\n\r\nconst PETS = {\r\n  WILD_IMP_HOG: {\r\n    guid: 55659,\r\n    duration: 15000, // maximum duration, realistically is handled differently\r\n    summonAbility: SPELLS.WILD_IMP_HOG_SUMMON.id,\r\n  },\r\n  DREADSTALKER: {\r\n    guid: 98035,\r\n    duration: 12000,\r\n    summonAbility: SPELLS.DREADSTALKER_SUMMON_1.id,\r\n  },\r\n  VILEFIEND: {\r\n    guid: 135816,\r\n    duration: 15000,\r\n    summonAbility: SPELLS.SUMMON_VILEFIEND_TALENT.id,\r\n  },\r\n  GRIMOIRE_FELGUARD: {\r\n    guid: 17252,\r\n    duration: 15000,\r\n    summonAbility: SPELLS.GRIMOIRE_FELGUARD_TALENT.id,\r\n  },\r\n  DEMONIC_TYRANT: {\r\n    guid: 135002,\r\n    duration: 15000,\r\n    summonAbility: SPELLS.SUMMON_DEMONIC_TYRANT.id,\r\n  },\r\n  // Inner Demons and Nether Portal demons\r\n  WILD_IMP_INNER_DEMONS: {\r\n    guid: 143622,\r\n    duration: INNER_DEMON_NETHER_PORTAL_DURATION,\r\n    summonAbility: SPELLS.WILD_IMP_ID_SUMMON.id,\r\n  },\r\n  BILESCOURGE: {\r\n    guid: 136404,\r\n    duration: INNER_DEMON_NETHER_PORTAL_DURATION,\r\n    summonAbility: SPELLS.BILESCOURGE_SUMMON.id,\r\n    isRandom: true,\r\n  },\r\n  VICIOUS_HELLHOUND: {\r\n    guid: 136399,\r\n    duration: INNER_DEMON_NETHER_PORTAL_DURATION,\r\n    summonAbility: SPELLS.VICIOUS_HELLHOUND_SUMMON.id,\r\n    isRandom: true,\r\n  },\r\n  SHIVARRA: {\r\n    guid: 136406,\r\n    duration: INNER_DEMON_NETHER_PORTAL_DURATION,\r\n    summonAbility: SPELLS.SHIVARRA_SUMMON.id,\r\n    isRandom: true,\r\n  },\r\n  DARKHOUND: {\r\n    guid: 136408,\r\n    duration: INNER_DEMON_NETHER_PORTAL_DURATION,\r\n    summonAbility: SPELLS.DARKHOUND_SUMMON.id,\r\n    isRandom: true,\r\n  },\r\n  ILLIDARI_SATYR: {\r\n    guid: 136398,\r\n    duration: INNER_DEMON_NETHER_PORTAL_DURATION,\r\n    summonAbility: SPELLS.ILLIDARI_SATYR_SUMMON.id,\r\n    isRandom: true,\r\n  },\r\n  VOID_TERROR: {\r\n    guid: 136403,\r\n    duration: INNER_DEMON_NETHER_PORTAL_DURATION,\r\n    summonAbility: SPELLS.VOID_TERROR_SUMMON.id,\r\n    isRandom: true,\r\n  },\r\n  URZUL: {\r\n    guid: 136402,\r\n    duration: INNER_DEMON_NETHER_PORTAL_DURATION,\r\n    summonAbility: SPELLS.URZUL_SUMMON.id,\r\n    isRandom: true,\r\n  },\r\n  WRATHGUARD: {\r\n    guid: 136407,\r\n    duration: INNER_DEMON_NETHER_PORTAL_DURATION,\r\n    summonAbility: SPELLS.WRATHGUARD_SUMMON.id,\r\n    isRandom: true,\r\n  },\r\n  EYE_OF_GULDAN: {\r\n    guid: 136401,\r\n    duration: INNER_DEMON_NETHER_PORTAL_DURATION,\r\n    summonAbility: SPELLS.EYE_OF_GULDAN_SUMMON.id,\r\n    isRandom: true,\r\n  },\r\n  PRINCE_MALCHEZAAR: {\r\n    guid: 136397,\r\n    duration: INNER_DEMON_NETHER_PORTAL_DURATION,\r\n    summonAbility: SPELLS.PRINCE_MALCHEZAAR_SUMMON.id,\r\n    isRandom: true,\r\n  },\r\n};\r\n\r\nexport default indexByGuid(PETS);\r\n","const DEMONIC_TYRANT_EXTENSION = 15000;\r\n\r\nexport const META_CLASSES = {\r\n  EMPOWERED: 'empowered',\r\n  DESTROYED: 'inefficient',\r\n};\r\n\r\nexport const META_TOOLTIPS = {\r\n  EMPOWERED: 'This pet was empowered by Demonic Tyrant',\r\n  IMPLODED: 'This Wild Imp was later Imploded',\r\n  DEMONIC_CONSUMPTION: 'This Wild Imp was later killed with Demonic Consumption',\r\n  POWER_SIPHON: 'This Wild Imp was later killed by Power Siphon',\r\n};\r\n\r\nexport const DESPAWN_REASONS = {\r\n  ZERO_ENERGY: 'Killed by having 0 energy',\r\n  IMPLOSION: 'Killed with Implosion',\r\n  DEMONIC_CONSUMPTION: 'Killed with Demonic Consumption',\r\n  POWER_SIPHON: 'Killed with Power Siphon',\r\n  NEW_PERMANENT_PET: 'Killed by summoning new permanent pet',\r\n};\r\n\r\nexport class TimelinePet {\r\n  name = 'unknown';\r\n  guid = null;\r\n  id = null;\r\n  instance = null;\r\n  spawn = null;\r\n  expectedDespawn = null;\r\n  realDespawn = null;\r\n  despawnedBy = null;\r\n  summonAbility = null;\r\n  summonedBy = null;\r\n  // difference between summonAbility and summonedBy:\r\n  // summonAbility is the summon ability itself (Summon Wild Imp, Summon Shivarra, Summon Vicious Hellhound, Summon Prince Malchezaar, ...)\r\n  // summonedBy is the \"source\" from player's perspective - whether it's Hand of Gul'dan, Nether Portal, Inner Demons, ...\r\n  history = [];\r\n  // is used for highlighting in timeline\r\n  meta = {\r\n    iconClass: '',\r\n    tooltip: '',\r\n  };\r\n\r\n  // Wild Imp properties\r\n  x = null; // position due to Implosion\r\n  y = null;\r\n  shouldImplode = false;\r\n  currentEnergy; // energy because they can despawn \"prematurely\" due to their mechanics\r\n\r\n  constructor(petInfo, id, instance, timestamp, duration, summonedBy, summonAbility) {\r\n    this.name = petInfo.name;\r\n    this.guid = petInfo.guid;\r\n    this.id = id;\r\n    this.instance = instance;\r\n    this.spawn = timestamp;\r\n    this.expectedDespawn = timestamp + duration;\r\n    this.summonedBy = summonedBy;\r\n    this.summonAbility = summonAbility;\r\n  }\r\n\r\n  setWildImpProperties(playerPosition) {\r\n    this.x = playerPosition.x;\r\n    this.y = playerPosition.y;\r\n    this.shouldImplode = false;\r\n    this.currentEnergy = 100;\r\n  }\r\n\r\n  updatePosition(event) {\r\n    this.x = event.x;\r\n    this.y = event.y;\r\n  }\r\n\r\n  despawn(timestamp, reason) {\r\n    this.realDespawn = timestamp;\r\n    this.despawnedBy = reason;\r\n  }\r\n\r\n  pushHistory(...contents) {\r\n    this.history.push([...contents]);\r\n  }\r\n\r\n  extend() {\r\n    // ASSUME full duration, but it gets updated for Wild Imps, on Demonic Power buff remove (their extend mechanic works differently)\r\n    this.expectedDespawn += DEMONIC_TYRANT_EXTENSION;\r\n    this.setMeta(META_CLASSES.EMPOWERED, META_TOOLTIPS.EMPOWERED);\r\n  }\r\n\r\n  setMeta(iconClass, tooltip) {\r\n    this.meta.iconClass = iconClass;\r\n    this.meta.tooltip = tooltip;\r\n  }\r\n}\r\n","import { isPermanentPet } from 'parser/shared/modules/pets/helpers';\r\n\r\nimport PETS from './PETS';\r\n\r\nexport const isWildImp = guid => guid === PETS.WILD_IMP_HOG.guid || guid === PETS.WILD_IMP_INNER_DEMONS.guid;\r\nexport const isWarlockPet = guid => isPermanentPet(guid) || Boolean(PETS[guid]);\r\nexport const isRandomPet = guid => isWarlockPet(guid) && !isPermanentPet(guid) && PETS[guid].isRandom;\r\n","import SPELLS from 'common/SPELLS';\r\nimport { isPermanentPet } from 'parser/shared/modules/pets/helpers';\r\n\r\nimport { DESPAWN_REASONS } from './TimelinePet';\r\nimport { isWarlockPet } from './helpers';\r\n\r\nconst debug = false;\r\n\r\nclass Timeline {\r\n  timeline = [];\r\n\r\n  addPet(pet) {\r\n    this.timeline.push(pet);\r\n  }\r\n\r\n  find(filter) {\r\n    // just a forward to the inner timeline\r\n    return this.timeline.find(filter);\r\n  }\r\n\r\n  filter(predicate) {\r\n    // forward\r\n    return this.timeline.filter(predicate);\r\n  }\r\n\r\n  tryDespawnLastPermanentPet(timestamp) {\r\n    const permanentPets = this.timeline.filter(pet => isPermanentPet(pet.guid));\r\n    if (permanentPets.length > 0) {\r\n      debug && console.log('Despawning last permanent pet');\r\n      permanentPets[permanentPets.length - 1].despawn(timestamp, DESPAWN_REASONS.NEW_PERMANENT_PET); // not entirely accurate, pet could've died earlier, but there's probably no way of detecting it\r\n    }\r\n  }\r\n\r\n  getPetsAtTimestamp(timestamp) {\r\n    // Warlock pet check so this doesn't pick up things like Vanquished Tendrils of G'huun (trinket, spawns a pet that timeline picks up)\r\n    return this.timeline.filter(pet => isWarlockPet(pet.guid) &&\r\n      pet.spawn <= timestamp && timestamp <= (pet.realDespawn || pet.expectedDespawn));\r\n  }\r\n\r\n  groupPetsBySummonAbility() {\r\n    return this.timeline.reduce((obj, pet) => {\r\n      // if pet is summoned by unknown spell, it gets summonedBy = -1\r\n      const key = pet.summonedBy !== -1 ? pet.summonedBy : 'unknown';\r\n      const spellName = (SPELLS[pet.summonedBy] && SPELLS[pet.summonedBy].name) || 'unknown';\r\n      obj[key] = obj[key] || { spellName, pets: [] };\r\n      obj[key].pets.push(pet);\r\n      return obj;\r\n    }, {});\r\n  }\r\n}\r\n\r\nexport default Timeline;\r\n","import { isPermanentPet } from 'parser/shared/modules/pets/helpers';\r\n\r\nclass PetDamage {\r\n  get permanentPetDamage() {\r\n    return Object.keys(this.pets)\r\n      .filter(guid => isPermanentPet(guid))\r\n      .map(guid => this.getDamageForGuid(guid, null))\r\n      .reduce((total, current) => total + current, 0);\r\n  }\r\n\r\n  pets = {\r\n    /*\r\n     [pet guid]: {\r\n        name: string,\r\n        instances: {\r\n          [pet instance]: number\r\n        }\r\n        total: number,\r\n     }\r\n     */\r\n  };\r\n\r\n  addDamage(petInfo, instance, amount) {\r\n    this._ensureFieldExists(petInfo.guid, petInfo.name, instance);\r\n    this.pets[petInfo.guid].instances[instance] += amount;\r\n    this.pets[petInfo.guid].total += amount;\r\n  }\r\n\r\n  getDamageForGuid(guid, instance) {\r\n    if (instance === null) {\r\n      return this.pets[guid].total;\r\n    }\r\n    return this.pets[guid].instances[instance];\r\n  }\r\n\r\n  _ensureFieldExists(guid, name, instance) {\r\n    this.pets[guid] = this.pets[guid] || { name, instances: {}, total: 0 };\r\n    this.pets[guid].instances[instance] = this.pets[guid].instances[instance] || 0;\r\n  }\r\n\r\n  hasEntry(guid, instance) {\r\n    if (instance === null) {\r\n      return Boolean(this.pets[guid]);\r\n    }\r\n    return this.pets[guid] && this.pets[guid].instances[instance] !== undefined;\r\n  }\r\n}\r\n\r\nexport default PetDamage;\r\n","import Analyzer from 'parser/core/Analyzer';\r\n\r\nimport Timeline from '../Timeline';\r\nimport PetDamage from '../PetDamage';\r\n\r\nconst debug = false;\r\n\r\nclass DemoPets extends Analyzer {\r\n  get currentPets() {\r\n    return this._getPets();\r\n  }\r\n\r\n  get permanentPetDamage() {\r\n    return this.damage.permanentPetDamage;\r\n  }\r\n\r\n  // API\r\n\r\n  get petsBySummonAbility() {\r\n    return this.timeline.groupPetsBySummonAbility();\r\n  }\r\n\r\n  damage = new PetDamage();\r\n  timeline = new Timeline();\r\n\r\n  getPetDamage(id, instance = null, isGuid = true) {\r\n    // if instance = null, returns total damage from all instances, otherwise from a specific instance\r\n    // isGuid = true, because it's more convenient to call this with getPetDamage(PETS.SOME_PET.guid)\r\n    // because you know what you're looking for (pet IDs change, GUIDs don't)\r\n    const guid = isGuid ? id : this._toGuid(id);\r\n    if (!this.damage.hasEntry(guid, instance)) {\r\n      debug && this.error(`this.getPetDamage() called with nonexistant ${isGuid ? 'gu' : ''}id ${id}`);\r\n      return 0;\r\n    }\r\n    return this.damage.getDamageForGuid(guid, instance);\r\n  }\r\n\r\n  getPetCount(timestamp = this.owner.currentTimestamp, petId = null) {\r\n    return this.timeline.getPetsAtTimestamp(timestamp).filter(pet => petId ? pet.id === petId : true).length;\r\n  }\r\n\r\n  // HELPER METHODS\r\n\r\n  _getPets(timestamp = this.owner.currentTimestamp) {\r\n    return this.timeline.getPetsAtTimestamp(timestamp);\r\n  }\r\n\r\n  _getPetFromTimeline(id, instance) {\r\n    return this.timeline.find(pet => pet.id === id && pet.instance === instance);\r\n  }\r\n\r\n  _getPetInfo(id, isGuid = false) {\r\n    let pet;\r\n    if (isGuid) {\r\n      pet = this.owner.playerPets.find(pet => pet.guid === id);\r\n    } else {\r\n      pet = this.owner.playerPets.find(pet => pet.id === id);\r\n    }\r\n    if (!pet) {\r\n      debug && this.error(`NewPets._getPetInfo() called with nonexistant pet ${isGuid ? 'gu' : ''}id ${id}`);\r\n      return null;\r\n    }\r\n    return pet;\r\n  }\r\n\r\n  _toGuid(id) {\r\n    return this._getPetInfo(id).guid;\r\n  }\r\n}\r\n\r\nexport default DemoPets;\r\n","import React from 'react';\r\n\r\nimport Analyzer, { SELECTED_PLAYER } from 'parser/core/Analyzer';\r\nimport SPELLS from 'common/SPELLS';\r\nimport Events from 'parser/core/Events';\r\n\r\nimport STATISTIC_ORDER from 'interface/others/STATISTIC_ORDER';\r\nimport Statistic from 'interface/statistics/Statistic';\r\nimport BoringSpellValueText from 'interface/statistics/components/BoringSpellValueText';\r\nimport SpellLink from 'common/SpellLink';\r\n\r\nimport DemoPets from '../pets/DemoPets';\r\nimport { isWildImp } from '../pets/helpers';\r\n\r\nclass SummonDemonicTyrant extends Analyzer {\r\n  static dependencies = {\r\n    demoPets: DemoPets,\r\n  };\r\n\r\n  demonicTyrantPower = [];\r\n  _hasDemonicConsumption = false;\r\n\r\n  _petsPerCast = [];\r\n\r\n  constructor(...args) {\r\n    super(...args);\r\n    this.addEventListener(Events.cast.by(SELECTED_PLAYER).spell(SPELLS.SUMMON_DEMONIC_TYRANT), this.summonDemonicTyrantCast);\r\n    this._hasDemonicConsumption = this.selectedCombatant.hasTalent(SPELLS.DEMONIC_CONSUMPTION_TALENT.id);\r\n  }\r\n\r\n  summonDemonicTyrantCast() {\r\n    const pets = this.demoPets.currentPets;\r\n    const countsPerCast = {};\r\n    let tyrantPower = 0;\r\n    pets.forEach(pet => {\r\n      if (isWildImp(pet.guid)) {\r\n        tyrantPower += pet.currentEnergy / 2;\r\n      }\r\n      countsPerCast[pet.summonedBy] = (countsPerCast[pet.summonedBy] || 0) + 1;\r\n    });\r\n\r\n    this.demonicTyrantPower.push(tyrantPower);\r\n    this._petsPerCast.push(countsPerCast);\r\n  }\r\n\r\n  statistic() {\r\n    const avgPets = (this._petsPerCast.reduce((total, cast) =>\r\n      total + Object.values(cast).reduce((totalPerSource, source) =>\r\n      totalPerSource + source, 0)\r\n      , 0) / this._petsPerCast.length) || 0;\r\n    const mergedPets = {};\r\n    this._petsPerCast.forEach(cast => {\r\n      Object.keys(cast).forEach(demonSource => {\r\n        mergedPets[demonSource] = (mergedPets[demonSource] || 0) + cast[demonSource];\r\n      });\r\n    });\r\n\r\n    const petTableRows = [];\r\n    Object.keys(mergedPets).forEach(demonSource => {\r\n      petTableRows.push(\r\n        <tr key={demonSource}>\r\n          <td align=\"left\"><SpellLink id={Number(demonSource)} /></td>\r\n          <td align=\"middle\">{(mergedPets[demonSource] / this._petsPerCast.length).toFixed(2)}</td>\r\n        </tr>,\r\n      );\r\n    });\r\n\r\n    const avgTyrantPower = ((this.demonicTyrantPower.reduce((acc, val) => acc + val, 0)) / this.demonicTyrantPower.length) || 0;\r\n    const tyrantFooter = this._hasDemonicConsumption ? `Average demonic consumption power: ${avgTyrantPower.toFixed(2)}%` : null;\r\n\r\n    const petTable = (this._petsPerCast.length > 0) ? (\r\n      <>\r\n        <thead>\r\n          <tr>\r\n            <th>Pet Source</th>\r\n            <th>Avg Pets per Cast</th>\r\n          </tr>\r\n        </thead>\r\n        <tbody>\r\n          {petTableRows}\r\n        </tbody>\r\n      </>\r\n    ) : null;\r\n    return (\r\n      <Statistic\r\n        position={STATISTIC_ORDER.CORE(6)}\r\n        size=\"flexible\"\r\n        tooltip=\"Number of pets empowered by each Demonic Tyrant summon.\"\r\n        dropdown={petTable}\r\n        footer={tyrantFooter}\r\n      >\r\n        <BoringSpellValueText spell={SPELLS.SUMMON_DEMONIC_TYRANT}>\r\n          {`${avgPets.toFixed(2)}`} <small>Avg. demons empowered</small>\r\n        </BoringSpellValueText>\r\n      </Statistic>\r\n    );\r\n  }\r\n}\r\n\r\nexport default SummonDemonicTyrant;\r\n","import React from 'react';\r\n\r\nimport Analyzer, { SELECTED_PLAYER_PET } from 'parser/core/Analyzer';\r\nimport Events from 'parser/core/Events';\r\n\r\nimport SPELLS from 'common/SPELLS';\r\nimport SpellLink from 'common/SpellLink';\r\nimport { formatThousands } from 'common/format';\r\n\r\nimport STATISTIC_ORDER from 'interface/others/STATISTIC_ORDER';\r\nimport Statistic from 'interface/statistics/Statistic';\r\nimport BoringSpellValueText from 'interface/statistics/components/BoringSpellValueText';\r\nimport ItemDamageDone from 'interface/ItemDamageDone';\r\nimport { isPermanentPet } from 'parser/shared/modules/pets/helpers';\r\n\r\nimport { i18n } from '@lingui/core';\r\nimport { t } from '@lingui/macro';\r\n\r\nclass LegionStrike extends Analyzer {\r\n  get suggestionThresholds() {\r\n    return {\r\n      actual: this.casts,\r\n      isLessThan: {\r\n        minor: 1,\r\n        average: 0,\r\n        major: 0,\r\n      },\r\n      style: 'number',\r\n    };\r\n  }\r\n\r\n  casts = 0;\r\n  damage = 0;\r\n\r\n  constructor(...args) {\r\n    super(...args);\r\n    this.addEventListener(Events.cast.by(SELECTED_PLAYER_PET).spell(SPELLS.FELGUARD_LEGION_STRIKE), this.legionStrikeCast);\r\n    this.addEventListener(Events.damage.by(SELECTED_PLAYER_PET).spell(SPELLS.FELGUARD_LEGION_STRIKE), this.legionStrikeDamage);\r\n  }\r\n\r\n  legionStrikeCast(event) {\r\n    // Grimoire: Felguard casts Legion Strike with the same spell ID, only count LS casts from the permanent pet\r\n    if (this._isPermanentPet(event.sourceID)) {\r\n      this.casts += 1;\r\n    }\r\n  }\r\n\r\n  legionStrikeDamage(event) {\r\n    if (this._isPermanentPet(event.sourceID)) {\r\n      this.damage += event.amount + (event.absorbed || 0);\r\n    }\r\n  }\r\n\r\n  _getPetGuid(id) {\r\n    return this.owner.playerPets.find(pet => pet.id === id).guid;\r\n  }\r\n\r\n  _isPermanentPet(id) {\r\n    const guid = this._getPetGuid(id);\r\n    return isPermanentPet(guid);\r\n  }\r\n\r\n  suggestions(when) {\r\n    when(this.suggestionThresholds)\r\n      .addSuggestion((suggest, actual, recommended) => suggest(<>Your Felguard didn't cast <SpellLink id={SPELLS.FELGUARD_LEGION_STRIKE.id} /> at all. Remember to turn on the auto-cast for this ability as it's a great portion of your total damage.</>)\r\n        .icon(SPELLS.FELGUARD_LEGION_STRIKE.icon)\r\n        .actual(i18n._(t('warlock.demonology.suggestions.legionStrike.casts')`${actual} Legion Strike casts`))\r\n        .recommended(`> ${recommended} casts are recommended`));\r\n  }\r\n\r\n  statistic() {\r\n    return (\r\n      <Statistic\r\n        position={STATISTIC_ORDER.CORE(5)}\r\n        size=\"flexible\"\r\n        tooltip={`${formatThousands(this.damage)} damage`}\r\n      >\r\n        <BoringSpellValueText spell={SPELLS.FELGUARD_LEGION_STRIKE}>\r\n          <ItemDamageDone amount={this.damage} />\r\n        </BoringSpellValueText>\r\n      </Statistic>\r\n    );\r\n  }\r\n}\r\n\r\nexport default LegionStrike;\r\n","import Analyzer, { SELECTED_PLAYER_PET } from 'parser/core/Analyzer';\r\nimport Events from 'parser/core/Events';\r\n\r\nimport DemoPets from './index';\r\n\r\nconst debug = false;\r\n\r\nclass PetDamageHandler extends Analyzer {\r\n  static dependencies = {\r\n    demoPets: DemoPets,\r\n  };\r\n\r\n  constructor(...args) {\r\n    super(...args);\r\n    this.addEventListener(Events.damage.by(SELECTED_PLAYER_PET), this.onPetDamage);\r\n  }\r\n\r\n  onPetDamage(event) {\r\n    const petInfo = this.demoPets._getPetInfo(event.sourceID);\r\n    if (!petInfo) {\r\n      debug && this.error(`Pet damage event with nonexistant pet id ${event.sourceID}`);\r\n      return;\r\n    }\r\n    const damage = event.amount + (event.absorbed || 0);\r\n    this.demoPets.damage.addDamage(petInfo, event.sourceInstance, damage);\r\n  }\r\n}\r\n\r\nexport default PetDamageHandler;\r\n","import SPELLS from 'common/SPELLS';\r\n\r\n// ability guids from 'summon' events - sometimes different from 'cast' ids\r\nexport const PERMANENT_PET_SUMMON_ABILITY_IDS = [\r\n  SPELLS.SUMMON_IMP.id,\r\n  SPELLS.SUMMON_VOIDWALKER.id,\r\n  SPELLS.SUMMON_FELHUNTER.id,\r\n  SPELLS.SUMMON_SUCCUBUS.id,\r\n  SPELLS.SUMMON_FELGUARD.id,\r\n  // Glyphed versions\r\n  SPELLS.FEL_IMP_SUMMON.id,\r\n  SPELLS.VOIDLORD_SUMMON.id,\r\n  SPELLS.OBSERVER_SUMMON.id,\r\n  SPELLS.SHADOW_SUCCUBUS_SUMMON.id,\r\n  SPELLS.SHIVARRA_PERMANENT_SUMMON.id,\r\n  SPELLS.WRATHGUARD_PERMANENT_SUMMON.id,\r\n];\r\n\r\nexport const TEMPORARY_PET_SUMMON_ABILITY_IDS = [\r\n  SPELLS.WILD_IMP_HOG_SUMMON.id,\r\n  SPELLS.DREADSTALKER_SUMMON_1.id,\r\n  SPELLS.DREADSTALKER_SUMMON_2.id,\r\n  SPELLS.SUMMON_VILEFIEND_TALENT.id,\r\n  SPELLS.GRIMOIRE_FELGUARD_TALENT.id,\r\n  SPELLS.SUMMON_DEMONIC_TYRANT.id,\r\n  SPELLS.WILD_IMP_ID_SUMMON.id,\r\n  SPELLS.BILESCOURGE_SUMMON.id,\r\n  SPELLS.VICIOUS_HELLHOUND_SUMMON.id,\r\n  SPELLS.SHIVARRA_SUMMON.id,\r\n  SPELLS.DARKHOUND_SUMMON.id,\r\n  SPELLS.ILLIDARI_SATYR_SUMMON.id,\r\n  SPELLS.VOID_TERROR_SUMMON.id,\r\n  SPELLS.URZUL_SUMMON.id,\r\n  SPELLS.WRATHGUARD_SUMMON.id,\r\n  SPELLS.EYE_OF_GULDAN_SUMMON.id,\r\n  SPELLS.PRINCE_MALCHEZAAR_SUMMON.id,\r\n];\r\n\r\nexport const PET_SUMMON_ABILITY_IDS = [\r\n  ...PERMANENT_PET_SUMMON_ABILITY_IDS,\r\n  ...TEMPORARY_PET_SUMMON_ABILITY_IDS,\r\n];\r\n\r\n// used to map summon ability id to summon spell ID (either spell that player casts or a talent)\r\nexport const SUMMON_TO_SPELL_MAP = {\r\n  [SPELLS.SUMMON_IMP.id]: SPELLS.SUMMON_IMP.id,\r\n  [SPELLS.FEL_IMP_SUMMON.id]: SPELLS.SUMMON_IMP.id,\r\n  [SPELLS.SUMMON_VOIDWALKER.id]: SPELLS.SUMMON_VOIDWALKER.id,\r\n  [SPELLS.VOIDLORD_SUMMON.id]: SPELLS.SUMMON_VOIDWALKER.id,\r\n  [SPELLS.SUMMON_FELHUNTER.id]: SPELLS.SUMMON_FELHUNTER.id,\r\n  [SPELLS.OBSERVER_SUMMON.id]: SPELLS.SUMMON_FELHUNTER.id,\r\n  [SPELLS.SUMMON_SUCCUBUS.id]: SPELLS.SUMMON_SUCCUBUS.id,\r\n  [SPELLS.SHADOW_SUCCUBUS_SUMMON.id]: SPELLS.SUMMON_SUCCUBUS.id,\r\n  [SPELLS.SHIVARRA_PERMANENT_SUMMON.id]: SPELLS.SUMMON_SUCCUBUS.id,\r\n  [SPELLS.SUMMON_FELGUARD.id]: SPELLS.SUMMON_FELGUARD.id,\r\n  [SPELLS.WRATHGUARD_PERMANENT_SUMMON.id]: SPELLS.SUMMON_FELGUARD.id,\r\n  [SPELLS.WILD_IMP_HOG_SUMMON.id]: SPELLS.HAND_OF_GULDAN_CAST.id,\r\n  [SPELLS.DREADSTALKER_SUMMON_1.id]: SPELLS.CALL_DREADSTALKERS.id,\r\n  [SPELLS.DREADSTALKER_SUMMON_2.id]: SPELLS.CALL_DREADSTALKERS.id,\r\n  [SPELLS.SUMMON_VILEFIEND_TALENT.id]: SPELLS.SUMMON_VILEFIEND_TALENT.id,\r\n  [SPELLS.GRIMOIRE_FELGUARD_TALENT.id]: SPELLS.GRIMOIRE_FELGUARD_TALENT.id,\r\n  [SPELLS.SUMMON_DEMONIC_TYRANT.id]: SPELLS.SUMMON_DEMONIC_TYRANT.id,\r\n  [SPELLS.WILD_IMP_ID_SUMMON.id]: SPELLS.INNER_DEMONS_TALENT.id,\r\n  // the rest is from Inner Demons / Nether Portal and assigned in DemoPets._getSummonSpell()\r\n};\r\n\r\n// used for mapping pre-pull permanent pets to summon abilities\r\nexport const PERMANENT_PET_ABILITIES_TO_SUMMON_MAP = {\r\n  // melee is ignored (can be 4 different pets)\r\n  [SPELLS.IMP_FIREBOLT.id]: SPELLS.SUMMON_IMP.id,\r\n  [SPELLS.VOIDWALKER_CONSUMING_SHADOWS.id]: SPELLS.SUMMON_VOIDWALKER.id,\r\n  [SPELLS.FELHUNTER_SHADOW_BITE.id]: SPELLS.SUMMON_FELHUNTER.id,\r\n  [SPELLS.SUCCUBUS_LASH_OF_PAIN.id]: SPELLS.SUMMON_SUCCUBUS.id,\r\n  [SPELLS.FELGUARD_PURSUIT.id]: SPELLS.SUMMON_FELGUARD.id,\r\n  [SPELLS.FELSTORM_DAMAGE.id]: SPELLS.SUMMON_FELGUARD.id,\r\n  [SPELLS.FELGUARD_LEGION_STRIKE.id]: SPELLS.SUMMON_FELGUARD.id,\r\n  [SPELLS.FELSTORM_BUFF.id]: SPELLS.SUMMON_FELGUARD.id,\r\n};\r\n","import Analyzer, { SELECTED_PLAYER } from 'parser/core/Analyzer';\r\n\r\nimport SPELLS from 'common/SPELLS';\r\nimport { isPermanentPet } from 'parser/shared/modules/pets/helpers';\r\n\r\nimport Events from 'parser/core/Events';\r\n\r\nimport DemoPets from './index';\r\nimport { isWildImp } from '../helpers';\r\nimport { TimelinePet, META_CLASSES } from '../TimelinePet';\r\nimport PETS from '../PETS';\r\nimport { SUMMON_TO_SPELL_MAP } from '../CONSTANTS';\r\n\r\nconst debug = false;\r\nconst test = false;\r\nconst DEMONIC_POWER_DURATION = 15000;\r\nconst BUFFER = 150;\r\n\r\nclass PetSummonHandler extends Analyzer {\r\n  static dependencies = {\r\n    demoPets: DemoPets,\r\n  };\r\n\r\n  _lastDemonicTyrantCast = null;\r\n  _lastIDtick = null;\r\n  _lastSpendResource = null;\r\n  _lastPlayerPosition = {\r\n    x: 0,\r\n    y: 0,\r\n  };\r\n\r\n  constructor(options) {\r\n    super(options);\r\n    this.addEventListener(Events.summon.by(SELECTED_PLAYER), this.onSummon);\r\n    this.addEventListener(Events.cast.by(SELECTED_PLAYER), this.onCast);\r\n    this.addEventListener(Events.SpendResource.by(SELECTED_PLAYER), this.onSpendResource);\r\n    this.addEventListener(Events.damage.to(SELECTED_PLAYER), this.onDamageTaken);\r\n    this.addEventListener(Events.energize.to(SELECTED_PLAYER), this.onEnergize);\r\n    this.addEventListener(Events.heal.to(SELECTED_PLAYER), this.onHealTaken);\r\n    this.addEventListener(Events.absorbed.to(SELECTED_PLAYER), this.onAbsorb);\r\n  }\r\n\r\n  onSummon(event) {\r\n    const petInfo = this.demoPets._getPetInfo(event.targetID);\r\n    if (!petInfo) {\r\n      debug && this.error('Summoned unknown pet', event);\r\n      return;\r\n    }\r\n    if (isPermanentPet(petInfo.guid)) {\r\n      test && this.log('Permanent pet summon');\r\n      this.demoPets.timeline.tryDespawnLastPermanentPet(event.timestamp);\r\n    }\r\n    const pet = new TimelinePet(petInfo,\r\n      event.targetID,\r\n      event.targetInstance,\r\n      event.timestamp,\r\n      this._getPetDuration(event.targetID),\r\n      this._getSummonSpell(event),\r\n      event.ability.guid);\r\n    if (isWildImp(pet.guid)) {\r\n      // Wild Imps need few additional properties\r\n      pet.setWildImpProperties(this._lastPlayerPosition);\r\n    }\r\n    if (petInfo.name === 'Demonic Tyrant' && this.selectedCombatant.hasTalent(SPELLS.DEMONIC_CONSUMPTION_TALENT.id)) {\r\n      const power = this.demoPets.currentPets\r\n        .filter(pet => isWildImp(pet.guid))\r\n        .map(pet => pet.currentEnergy)\r\n        .reduce((acc, val) => (acc + val), 0);\r\n      pet.setMeta(META_CLASSES.EMPOWERED, `Empowered by ${(power / 2).toFixed(2)} % from consuming imps`);\r\n    }\r\n    test && this.log('Pet summoned', pet);\r\n    this.demoPets.timeline.addPet(pet);\r\n    pet.pushHistory(event.timestamp, 'Summoned', event);\r\n    if (pet.summonedBy === SPELLS.INNER_DEMONS_TALENT.id) {\r\n      this._lastIDtick = event.timestamp;\r\n    }\r\n  }\r\n\r\n  onCast(event) {\r\n    this._updatePlayerPosition(event);\r\n    if (event.ability.guid !== SPELLS.SUMMON_DEMONIC_TYRANT.id) {\r\n      return;\r\n    }\r\n    this._lastDemonicTyrantCast = event.timestamp;\r\n  }\r\n\r\n  onSpendResource(event) {\r\n    this._lastSpendResource = event.timestamp;\r\n  }\r\n\r\n  // to update player position more accurately (based on DistanceMoved)\r\n  // important, since Wild Imp summons uses player position as default (not entirely accurate, as they're spawned around player, not exactly on top of it, but that's as close as I'm gonna get)\r\n  // needed for Implosion - there's a possibility that Wild Imps don't cast anything between their 'summon' and Implosion, therefore I wouldn't get their position\r\n\r\n  onDamageTaken(event) {\r\n    this._updatePlayerPosition(event);\r\n  }\r\n\r\n  onEnergize(event) {\r\n    this._updatePlayerPosition(event);\r\n  }\r\n\r\n  onHealTaken(event) {\r\n    this._updatePlayerPosition(event);\r\n  }\r\n\r\n  onAbsorb(event) {\r\n    this._updatePlayerPosition(event);\r\n  }\r\n\r\n  _getPetDuration(id, isGuid = false) {\r\n    const pet = this.demoPets._getPetInfo(id, isGuid);\r\n    if (!pet) {\r\n      debug && this.error(`NewPets._getPetDuration() called with nonexistant pet ${isGuid ? 'gu' : ''}id ${id}`);\r\n      return -1;\r\n    }\r\n    if (isPermanentPet(pet.guid)) {\r\n      debug && this.log('Called _getPetDuration() for permanent pet guid', pet);\r\n      return Infinity;\r\n    }\r\n    if (!PETS[pet.guid]) {\r\n      debug && this.error('Encountered pet unknown to PET_INFO.js', pet);\r\n      return -1;\r\n    }\r\n    // for imps, take Demonic Tyrant in consideration\r\n    // if player doesn't have the buff, it's 15 seconds\r\n    if (isWildImp(pet.guid) && this.selectedCombatant.hasBuff(SPELLS.DEMONIC_POWER.id)) {\r\n      // if player has the buff, it takes the remaining buff time + 15 seconds\r\n      const remainingBuffTime = (this._lastDemonicTyrantCast + DEMONIC_POWER_DURATION) - this.owner.currentTimestamp;\r\n      return PETS[pet.guid].duration + remainingBuffTime;\r\n    }\r\n    return PETS[pet.guid].duration;\r\n  }\r\n\r\n  _getSummonSpell(event) {\r\n    if (!SUMMON_TO_SPELL_MAP[event.ability.guid]) {\r\n      if (event.timestamp <= this._lastIDtick + BUFFER) {\r\n        return SPELLS.INNER_DEMONS_TALENT.id;\r\n      }\r\n      if (this.selectedCombatant.hasBuff(SPELLS.NETHER_PORTAL_BUFF.id) && event.timestamp <= this._lastSpendResource + BUFFER) {\r\n        return SPELLS.NETHER_PORTAL_TALENT.id;\r\n      }\r\n      debug && this.error('Unknown source of summon event', event);\r\n      return -1;\r\n    }\r\n    return SUMMON_TO_SPELL_MAP[event.ability.guid];\r\n  }\r\n\r\n  _updatePlayerPosition(event) {\r\n    if (!event.x || !event.y) {\r\n      return;\r\n    }\r\n    this._lastPlayerPosition.x = event.x;\r\n    this._lastPlayerPosition.y = event.y;\r\n  }\r\n}\r\n\r\nexport default PetSummonHandler;\r\n","import Analyzer, { SELECTED_PLAYER_PET } from 'parser/core/Analyzer';\r\nimport Events from 'parser/core/Events';\r\n\r\nimport SPELLS from 'common/SPELLS';\r\nimport RESOURCE_TYPES from 'game/RESOURCE_TYPES';\r\n\r\nimport DemoPets from './index';\r\nimport { DESPAWN_REASONS, META_CLASSES, META_TOOLTIPS } from '../TimelinePet';\r\nimport PETS from '../PETS';\r\n\r\nconst debug = false;\r\nconst test = false;\r\n\r\nclass WildImpEnergyHandler extends Analyzer {\r\n  static dependencies = {\r\n    demoPets: DemoPets,\r\n  };\r\n\r\n  _wildImpIds = []; // important for different handling of duration, these IDs change from log to log\r\n\r\n  constructor(...args) {\r\n    super(...args);\r\n    this.initializeWildImps();\r\n    this.addEventListener(Events.cast.by(SELECTED_PLAYER_PET), this.onPetCast);\r\n  }\r\n\r\n  onPetCast(event) {\r\n    // handle Wild Imp energy - they should despawn when their energy reaches 0\r\n    if (!this._wildImpIds.includes(event.sourceID)) {\r\n      return;\r\n    }\r\n    const pet = this.demoPets._getPetFromTimeline(event.sourceID, event.sourceInstance);\r\n    if (!pet) {\r\n      debug && this.error('Wild Imp from cast event not in timeline!', event);\r\n      return;\r\n    }\r\n    if (pet.realDespawn && event.timestamp >= pet.realDespawn) {\r\n      debug && this.error('Wild Imp casted something after despawn', pet, event);\r\n      return;\r\n    }\r\n    const energyResource = event.classResources && event.classResources.find(resource => resource.type === RESOURCE_TYPES.ENERGY.id);\r\n    if (!energyResource) {\r\n      debug && this.error('Wild Imp doesn\\'t have energy class resource field', event);\r\n      return;\r\n    }\r\n    pet.updatePosition(event);\r\n    const oldEnergy = pet.currentEnergy;\r\n    const newEnergy = energyResource.amount - (energyResource.cost || 0); // if Wild Imp is extended by Demonic Tyrant, their casts are essentially free, and the 'cost' field is not present in the event\r\n    pet.currentEnergy = newEnergy;\r\n    if (oldEnergy === pet.currentEnergy) {\r\n      // Imp was empowered at least once, mark as empowered\r\n      pet.setMeta(META_CLASSES.EMPOWERED, META_TOOLTIPS.EMPOWERED);\r\n    }\r\n    pet.pushHistory(event.timestamp, 'Cast', event, 'old energy', oldEnergy, 'new energy', pet.currentEnergy);\r\n\r\n    if (pet.currentEnergy === 0) {\r\n      pet.despawn(event.timestamp, DESPAWN_REASONS.ZERO_ENERGY);\r\n      pet.pushHistory(event.timestamp, 'Killed by 0 energy', event);\r\n      test && this.log('Despawning Wild Imp', pet);\r\n    }\r\n  }\r\n\r\n  initializeWildImps() {\r\n    // there's very little possibility these statements wouldn't return an object, Hand of Guldan is a key part of rotation\r\n    this._wildImpIds.push(this._toId(PETS.WILD_IMP_HOG.guid));\r\n    if (this.selectedCombatant.hasTalent(SPELLS.INNER_DEMONS_TALENT.id)) {\r\n      // and Inner Demons passively summons these Wild Imps\r\n      this._wildImpIds.push(this._toId(PETS.WILD_IMP_INNER_DEMONS.guid));\r\n    }\r\n    // basically player would have to be dead from the beginning to end to not have these recorded\r\n    // (and even then it's probably fine, because it takes the info from parser.playerPets, which is cross-fight)\r\n  }\r\n\r\n  _toId(guid) {\r\n    return this.demoPets._getPetInfo(guid, true).id;\r\n  }\r\n}\r\n\r\nexport default WildImpEnergyHandler;\r\n","import Analyzer, { SELECTED_PLAYER } from 'parser/core/Analyzer';\r\nimport { encodeTargetString } from 'parser/shared/modules/EnemyInstances';\r\nimport Events from 'parser/core/Events';\r\n\r\nimport SPELLS from 'common/SPELLS';\r\n\r\nimport DemoPets from './index';\r\nimport { DESPAWN_REASONS, META_CLASSES, META_TOOLTIPS } from '../TimelinePet';\r\nimport { isWildImp } from '../helpers';\r\n\r\nconst debug = false;\r\nconst test = false;\r\n\r\nclass PowerSiphonHandler extends Analyzer {\r\n  static dependencies = {\r\n    demoPets: DemoPets,\r\n  };\r\n\r\n  constructor(...args) {\r\n    super(...args);\r\n    this.active = this.selectedCombatant.hasTalent(SPELLS.POWER_SIPHON_TALENT.id);\r\n    this.addEventListener(Events.cast.by(SELECTED_PLAYER).spell(SPELLS.POWER_SIPHON_TALENT), this.onPowerSiphonCast);\r\n  }\r\n\r\n  onPowerSiphonCast(event) {\r\n    if (!event.activeImpsAfterCast || event.activeImpsAfterCast.length === 0) {\r\n      debug && this.error('Power Siphon cast didn\\'t have any active imps after cast', event);\r\n    }\r\n    // gets current imps that aren't \"scheduled for implosion\"\r\n    // filters out only those that aren't active after the cast (they can't be killed because they're casting in the future)\r\n    const currentImps = this.demoPets.currentPets\r\n      .filter(pet => isWildImp(pet.guid) && !pet.shouldImplode)\r\n      .sort((imp1, imp2) => (imp1.currentEnergy - imp2.currentEnergy) || (imp1.spawn - imp2.spawn));\r\n    const filtered = currentImps\r\n      .filter(imp => !event.activeImpsAfterCast.includes(encodeTargetString(imp.id, imp.instance)));\r\n    test && this.log('POWER SIPHON cast', event.timestamp, ', current imps, sorted', JSON.parse(JSON.stringify(currentImps)));\r\n    test && this.log('Imps that AREN\\'T active after PS cast, sorted', JSON.parse(JSON.stringify(filtered)));\r\n    // doesn't really make sense - sometimes you have loads of imps to sacrifice, but it doesn't pick them (because they're active after the cast)\r\n    if (filtered.length === 0) {\r\n      // game won't let you cast Power Siphon without available Wild Imps, if cast went through and we don't have Imps, we've done something wrong\r\n      debug && this.error('Something wrong, no Imps found on Power Siphon cast');\r\n      return;\r\n    }\r\n    // kill up to 2 imps\r\n    filtered.slice(0, 2).forEach(imp => {\r\n      imp.despawn(event.timestamp, DESPAWN_REASONS.POWER_SIPHON);\r\n      imp.setMeta(META_CLASSES.DESTROYED, META_TOOLTIPS.POWER_SIPHON);\r\n      imp.pushHistory(event.timestamp, 'Killed by Power Siphon', event);\r\n      test && this.log(`Despawning imp`, imp);\r\n    });\r\n  }\r\n}\r\n\r\nexport default PowerSiphonHandler;\r\n","import Analyzer, { SELECTED_PLAYER } from 'parser/core/Analyzer';\r\nimport Events from 'parser/core/Events';\r\n\r\nimport SPELLS from 'common/SPELLS';\r\n\r\nimport DemoPets from './index';\r\nimport { DESPAWN_REASONS, META_CLASSES, META_TOOLTIPS } from '../TimelinePet';\r\nimport PETS from '../PETS';\r\nimport { isWildImp } from '../helpers';\r\n\r\nconst test = false;\r\n\r\nclass DemonicTyrantHandler extends Analyzer {\r\n  static dependencies = {\r\n    demoPets: DemoPets,\r\n  };\r\n\r\n  _lastCast = null;\r\n  _hasDemonicConsumption = false;\r\n\r\n  constructor(...args) {\r\n    super(...args);\r\n    this._hasDemonicConsumption = this.selectedCombatant.hasTalent(SPELLS.DEMONIC_CONSUMPTION_TALENT.id);\r\n    this.addEventListener(Events.cast.by(SELECTED_PLAYER).spell(SPELLS.SUMMON_DEMONIC_TYRANT), this.onDemonicTyrantCast);\r\n    this.addEventListener(Events.removebuff.to(SELECTED_PLAYER).spell(SPELLS.DEMONIC_POWER), this.onDemonicPowerRemove);\r\n  }\r\n\r\n  onDemonicTyrantCast(event) {\r\n    // extend current pets by 15 seconds\r\n    this._lastCast = event.timestamp;\r\n    const affectedPets = this.demoPets.currentPets;\r\n    test && this.log('Demonic Tyrant cast, affected pets: ', JSON.parse(JSON.stringify(affectedPets)));\r\n    affectedPets.forEach(pet => {\r\n      pet.extend();\r\n      pet.pushHistory(event.timestamp, 'Extended with Demonic Tyrant', event);\r\n      // if player has Demonic Consumption talent, kill all imps\r\n      if (this._hasDemonicConsumption && isWildImp(pet.guid)) {\r\n        test && this.log('Wild Imp killed because Demonic Consumption', pet);\r\n        pet.despawn(event.timestamp, DESPAWN_REASONS.DEMONIC_CONSUMPTION);\r\n        pet.setMeta(META_CLASSES.DESTROYED, META_TOOLTIPS.DEMONIC_CONSUMPTION);\r\n        pet.pushHistory(event.timestamp, 'Killed by Demonic Consumption', event);\r\n      }\r\n    });\r\n    test && this.log('Pets after Demonic Tyrant cast', JSON.parse(JSON.stringify(this.demoPets.currentPets)));\r\n  }\r\n\r\n  onDemonicPowerRemove(event) {\r\n    // Demonic Tyrant effect faded, update imps' expected despawn\r\n    const actualBuffTime = event.timestamp - this._lastCast;\r\n    this.demoPets.currentPets\r\n      .filter(pet => isWildImp(pet.guid))\r\n      .forEach(imp => {\r\n        // original duration = spawn + 15\r\n        // extended duration on DT cast = (spawn + 15) + 15\r\n        // real duration = (spawn + 15) + actualBuffTime\r\n        const old = imp.expectedDespawn;\r\n        imp.expectedDespawn = imp.spawn + PETS.WILD_IMP_HOG.duration + actualBuffTime;\r\n        imp.pushHistory(event.timestamp, 'Updated expected despawn from', old, 'to', imp.expectedDespawn);\r\n      });\r\n  }\r\n}\r\n\r\nexport default DemonicTyrantHandler;\r\n","import Analyzer, { SELECTED_PLAYER } from 'parser/core/Analyzer';\r\nimport { encodeTargetString } from 'parser/shared/modules/EnemyInstances';\r\nimport Events from 'parser/core/Events';\r\n\r\nimport SPELLS from 'common/SPELLS';\r\n\r\nimport DemoPets from './index';\r\nimport { DESPAWN_REASONS, META_CLASSES, META_TOOLTIPS } from '../TimelinePet';\r\nimport { isWildImp } from '../helpers';\r\n\r\nconst test = false;\r\nconst debug = false;\r\n\r\nclass ImplosionHandler extends Analyzer {\r\n  static dependencies = {\r\n    demoPets: DemoPets,\r\n  };\r\n\r\n  _lastCast = null;\r\n  _targetsHit = [];\r\n\r\n  constructor(...args) {\r\n    super(...args);\r\n    this.addEventListener(Events.cast.by(SELECTED_PLAYER).spell(SPELLS.IMPLOSION_CAST), this.onImplosionCast);\r\n    this.addEventListener(Events.damage.by(SELECTED_PLAYER).spell(SPELLS.IMPLOSION_DAMAGE), this.onImplosionDamage);\r\n  }\r\n\r\n  onImplosionCast(event) {\r\n    // Mark current Wild Imps as \"implodable\"\r\n    const imps = this.demoPets.currentPets.filter(pet => isWildImp(pet.guid));\r\n    test && this.log('Implosion cast, current imps', JSON.parse(JSON.stringify(imps)));\r\n    if (imps.some(imp => imp.x === null || imp.y === null)) {\r\n      debug && this.error('Implosion cast, some imps don\\'t have coordinates', imps);\r\n      return;\r\n    }\r\n    imps.forEach(imp => {\r\n      imp.shouldImplode = true;\r\n      imp.pushHistory(event.timestamp, 'Marked for implosion', event);\r\n    });\r\n    this._lastCast = event.timestamp;\r\n    this._targetsHit = [];\r\n  }\r\n\r\n  onImplosionDamage(event) {\r\n    if (!event.x || !event.y) {\r\n      debug && this.error('Implosion damage event doesn\\'t have a target position', event);\r\n      return;\r\n    }\r\n    // Pairing damage events with Imploded Wild Imps\r\n    // First target hit kills an imp and marks the target\r\n    // Consequent target hits just mark the target (part of the same AOE explosion)\r\n    // Next hit on already marked target means new imp explosion\r\n    const target = encodeTargetString(event.targetID, event.targetInstance);\r\n    if (this._targetsHit.length === 0) {\r\n      test && this.log(`First Implosion damage after cast on ${target}`);\r\n    } else if (this._targetsHit.includes(target)) {\r\n      test && this.log(`Implosion damage on ${target}, already marked => new imp exploded, reset array, marked`);\r\n    } else if (this._targetsHit.length > 0 && !this._targetsHit.includes(target)) {\r\n      this._targetsHit.push(target);\r\n      test && this.log(`Implosion damage on ${target}, not hit yet, marked, skipped`);\r\n      return;\r\n    }\r\n    this._targetsHit = [target];\r\n\r\n    // handle Implosion\r\n    // Implosion pulls all Wild Imps towards target, exploding them and dealing AoE damage\r\n    // there's no connection of each damage event to individual Wild Imp, so take Imps that were present at the Implosion cast, order them by the distance from the target and kill them in this order (they should be travelling with the same speed)\r\n    const imps = this.demoPets._getPets(this._lastCast) // there's a delay between cast and damage events, might be possible to generate another imps, those shouldn't count, that's why I use Implosion cast timestamp instead of current pets\r\n      .filter(pet => isWildImp(pet.guid) && pet.shouldImplode && !pet.realDespawn)\r\n      .sort((imp1, imp2) => {\r\n        const distance1 = this._getDistance(imp1.x, imp1.y, event.x, event.y);\r\n        const distance2 = this._getDistance(imp2.x, imp2.y, event.x, event.y);\r\n        return distance1 - distance2;\r\n      });\r\n    test && this.log('Implosion damage, Imps to be imploded: ', JSON.parse(JSON.stringify(imps)));\r\n    if (imps.length === 0) {\r\n      debug && this.error('Error during calculating Implosion distance for imps');\r\n      if (!this.demoPets._getPets(this._lastCast).some(pet => isWildImp(pet.guid))) {\r\n        debug && this.error('No imps');\r\n        return;\r\n      }\r\n      if (!this.demoPets._getPets(this._lastCast).some(pet => isWildImp(pet.guid) && pet.shouldImplode)) {\r\n        debug && this.error('No implodable imps');\r\n      }\r\n      return;\r\n    }\r\n    imps[0].despawn(event.timestamp, DESPAWN_REASONS.IMPLOSION);\r\n    imps[0].setMeta(META_CLASSES.DESTROYED, META_TOOLTIPS.IMPLODED);\r\n    imps[0].pushHistory(event.timestamp, 'Killed by Implosion', event);\r\n  }\r\n\r\n  _getDistance(x1, y1, x2, y2) {\r\n    return Math.sqrt((x1 - x2) * (x1 - x2) + (y1 - y2) * (y1 - y2));\r\n  }\r\n}\r\n\r\nexport default ImplosionHandler;\r\n","import React from 'react';\r\nimport PropTypes from 'prop-types';\r\n\r\nimport Tooltip from 'common/Tooltip';\r\nimport { formatDuration } from 'common/format';\r\n\r\nconst DeathEvents = (props) => {\r\n  const { start, secondWidth, deaths, resurrections } = props;\r\n\r\n  return (\r\n    <>\r\n      {deaths.map((event) => {\r\n        const eventStart = event.start || event.timestamp;\r\n        const fightDuration = (eventStart - start) / 1000;\r\n        const left = ((eventStart - start) / 1000) * secondWidth;\r\n        return (\r\n          <Tooltip\r\n            key={`death-${event.timestamp}`}\r\n            content={`${formatDuration(fightDuration, 3)}: You died`}\r\n          >\r\n            <div\r\n              className=\"death\"\r\n              style={{\r\n                left,\r\n              }}\r\n            />\r\n          </Tooltip>\r\n        );\r\n      })}\r\n      {resurrections.map((event) => {\r\n        const eventStart = event.start || event.timestamp;\r\n        const fightDuration = (eventStart - start) / 1000;\r\n        const left = ((eventStart - start) / 1000) * secondWidth;\r\n        return (\r\n          <Tooltip\r\n            key={`resurrection-${event.timestamp}`}\r\n            content={`${formatDuration(fightDuration, 3)}: You were resurrected`}\r\n          >\r\n            <div\r\n              className=\"resurrection\"\r\n              style={{\r\n                left,\r\n              }}\r\n            />\r\n          </Tooltip>\r\n        );\r\n      })}\r\n    </>\r\n  );\r\n};\r\n\r\nDeathEvents.propTypes = {\r\n  start: PropTypes.number.isRequired,\r\n  secondWidth: PropTypes.number.isRequired,\r\n  deaths: PropTypes.arrayOf(\r\n    PropTypes.shape({\r\n      timestamp: PropTypes.number.isRequired,\r\n    }),\r\n  ).isRequired,\r\n  resurrections: PropTypes.arrayOf(\r\n    PropTypes.shape({\r\n      timestamp: PropTypes.number.isRequired,\r\n    }),\r\n  ).isRequired,\r\n};\r\n\r\nexport default DeathEvents;\r\n","import React from 'react';\r\nimport PropTypes from 'prop-types';\r\n\r\nimport SPELLS from 'common/SPELLS';\r\nimport SpellIcon from 'common/SpellIcon';\r\nimport Icon from 'common/Icon';\r\nimport Tooltip from 'common/Tooltip';\r\n\r\nconst PetRow = props => {\r\n  const { className, pets, start, totalWidth, secondWidth } = props;\r\n  return (\r\n    <div className={`events ${className || ''}`} style={{ width: totalWidth }}>\r\n      {pets.map((pet, index) => {\r\n        const iconLeft = (pet.spawn - start) / 1000 * secondWidth;\r\n        const barLeft = (pet.spawn - start) / 1000 * secondWidth;\r\n        const maxWidth = totalWidth - barLeft; // don't expand beyond the container width\r\n        const width = Math.min(maxWidth, ((pet.realDespawn || pet.expectedDespawn) - pet.spawn) / 1000 * secondWidth);\r\n        const isSummonAbilityKnown = Boolean(SPELLS[pet.summonAbility]);\r\n        const hasTooltip = pet.meta.tooltip !== '';\r\n        return (\r\n          <>\r\n            <div\r\n              key={`${index}-icon`}\r\n              style={{\r\n                left: iconLeft,\r\n                top: -1,\r\n                zIndex: 10,\r\n              }}\r\n            >\r\n              {isSummonAbilityKnown && (\r\n                hasTooltip ? (\r\n                  <Tooltip content={pet.meta.tooltip}>\r\n                    <div>\r\n                      <SpellIcon\r\n                        id={pet.summonAbility}\r\n                        className={pet.meta.iconClass}\r\n                      />\r\n                    </div>\r\n                  </Tooltip>\r\n                ) : (\r\n                  <SpellIcon\r\n                    id={pet.summonAbility}\r\n                    className={pet.meta.iconClass}\r\n                  />\r\n                ))}\r\n              {!isSummonAbilityKnown && (\r\n                <Tooltip content={pet.name}>\r\n                  <div>\r\n                    <Icon icon=\"inv_misc_questionmark\" />\r\n                  </div>\r\n                </Tooltip>\r\n              )}\r\n            </div>\r\n            <div\r\n              key={`${index}-duration`}\r\n              style={{\r\n                left: barLeft,\r\n                width,\r\n                background: 'rgba(150, 150, 150, 0.4)',\r\n              }}\r\n              data-effect=\"float\"\r\n            />\r\n          </>\r\n        );\r\n      })}\r\n    </div>\r\n  );\r\n};\r\n\r\nPetRow.propTypes = {\r\n  className: PropTypes.string,\r\n  pets: PropTypes.array,\r\n  start: PropTypes.number.isRequired,\r\n  totalWidth: PropTypes.number.isRequired,\r\n  secondWidth: PropTypes.number.isRequired,\r\n};\r\n\r\nexport default PetRow;\r\n","import React from 'react';\r\nimport PropTypes from 'prop-types';\r\n\r\nimport SpellIcon from 'common/SpellIcon';\r\nimport Tooltip from 'common/Tooltip';\r\nimport { EventType } from 'parser/core/Events';\r\n\r\nconst KeyCastsRow = props => {\r\n  const { className, events, start, totalWidth, secondWidth } = props;\r\n  return (\r\n    <div className={`events ${className || ''}`} style={{ width: totalWidth }}>\r\n      {events.map((event, index) => {\r\n        if (event.type === EventType.Cast) {\r\n          const left = (event.timestamp - start) / 1000 * secondWidth;\r\n          const tooltipInfo = [];\r\n          if (event.extraInfo) {\r\n            tooltipInfo.push(event.extraInfo);\r\n          }\r\n          if (event.nearbyCasts) {\r\n            tooltipInfo.push(`This cast overlaps with following casts: ${event.nearbyCasts.join(', ')}.`);\r\n          }\r\n          const hasTooltip = tooltipInfo.length > 0;\r\n          return (\r\n            <div\r\n              key={index}\r\n              style={{\r\n                left,\r\n                top: -1,\r\n                zIndex: (event.important) ? 20 : 10,\r\n              }}\r\n            >\r\n              {hasTooltip ? (\r\n                <Tooltip content={tooltipInfo.join('\\n')}>\r\n                  <div>\r\n                    <SpellIcon\r\n                      id={event.abilityId}\r\n                      className={event.important && 'enhanced'}\r\n                    />\r\n                  </div>\r\n                </Tooltip>\r\n              ) : (\r\n                <SpellIcon\r\n                  id={event.abilityId}\r\n                  className={event.important && 'enhanced'}\r\n                />\r\n              )}\r\n            </div>\r\n          );\r\n        } else if (event.type === 'duration') {\r\n          const left = (event.timestamp - start) / 1000 * secondWidth;\r\n          const maxWidth = totalWidth - left; // don't expand beyond the container width\r\n          const width = Math.min(maxWidth, (event.endTimestamp - event.timestamp) / 1000 * secondWidth);\r\n          return (\r\n            <div\r\n              key={index}\r\n              style={{\r\n                left,\r\n                width,\r\n                background: 'rgba(133, 59, 255, 0.7)',\r\n              }}\r\n              data-effect=\"float\"\r\n            />\r\n          );\r\n        }\r\n        return null;\r\n      })}\r\n    </div>\r\n  );\r\n};\r\n\r\nKeyCastsRow.propTypes = {\r\n  className: PropTypes.string,\r\n  events: PropTypes.array,\r\n  start: PropTypes.number.isRequired,\r\n  totalWidth: PropTypes.number.isRequired,\r\n  secondWidth: PropTypes.number.isRequired,\r\n};\r\n\r\nexport default KeyCastsRow;\r\n","import React from 'react';\r\nimport PropTypes from 'prop-types';\r\nimport GeminiScrollbar from 'react-gemini-scrollbar';\r\nimport 'gemini-scrollbar/gemini-scrollbar.css';\r\n\r\nimport { formatDuration } from 'common/format';\r\nimport SPELLS from 'common/SPELLS';\r\nimport SpellLink from 'common/SpellLink';\r\nimport Icon from 'common/Icon';\r\nimport { EventType } from 'parser/core/Events';\r\n\r\nimport './SpellTimeline.css';\r\nimport DeathEvents from './DeathEvents';\r\n\r\nimport PetRow from './PetRow';\r\nimport KeyCastsRow from './KeyCastsRow';\r\nimport './PetTimeline.css';\r\nimport { isWildImp } from '../../helpers';\r\n\r\nconst NETHER_PORTAL_DURATION = 15000;\r\nconst NEARBY_CASTS_BUFFER = 250;\r\nconst NEARBY_CAST_COUNT = 3;\r\n\r\nclass PetTimeline extends React.PureComponent {\r\n  get pets() {\r\n    const { petTimeline } = this.props;\r\n    return petTimeline.groupPetsBySummonAbility();\r\n  }\r\n\r\n  get keyEvents() {\r\n    // shows important events in first row - Tyrant, Implosion, Power Siphon, Nether Portal cast and duration, casts during Nether Portal\r\n    let events = this.importantEvents;\r\n    events = this.decorateCloseCasts(events);\r\n    events = this.decorateImplosionCasts(events);\r\n    return events;\r\n  }\r\n\r\n  get importantEvents() {\r\n    const { historyBySpellId, selectedCombatant } = this.props;\r\n    // these casts are extracted manually with flag \"important\"\r\n    const importantEvents = [];\r\n    const manualCastIds = [SPELLS.SUMMON_DEMONIC_TYRANT.id, SPELLS.IMPLOSION_CAST.id, SPELLS.NETHER_PORTAL_TALENT.id, SPELLS.POWER_SIPHON_TALENT.id];\r\n    const tyrantCasts = this.filterHistoryCasts(SPELLS.SUMMON_DEMONIC_TYRANT.id);\r\n    const implosionCasts = this.filterHistoryCasts(SPELLS.IMPLOSION_CAST.id);\r\n    const powerSiphonCasts = this.filterHistoryCasts(SPELLS.POWER_SIPHON_TALENT.id);\r\n    importantEvents.push(...tyrantCasts, ...implosionCasts, ...powerSiphonCasts);\r\n    if (selectedCombatant.hasTalent(SPELLS.NETHER_PORTAL_TALENT.id)) {\r\n      const netherPortalCasts = this.filterHistoryCasts(SPELLS.NETHER_PORTAL_TALENT.id);\r\n      const netherPortalWindows = netherPortalCasts.map(cast => ({\r\n        type: 'duration',\r\n        timestamp: cast.timestamp,\r\n        endTimestamp: cast.timestamp + NETHER_PORTAL_DURATION,\r\n      }));\r\n      const castsDuringNetherPortal = [];\r\n      if (netherPortalCasts.length > 0) {\r\n        // iterate through all spells\r\n        Object.keys(historyBySpellId)\r\n          .filter(key => !manualCastIds.includes(Number(key))) // filter out casts we got manually\r\n          .map(key => historyBySpellId[key])\r\n          .forEach(historyArray => {\r\n            // filter casts and only those, that fall into any Nether Portal window\r\n            const casts = historyArray\r\n              .filter(event => event.type === EventType.Cast\r\n                && netherPortalWindows.some(window => window.timestamp <= event.timestamp\r\n                  && event.timestamp <= window.endTimestamp))\r\n              .map(event => ({\r\n                type: EventType.Cast,\r\n                timestamp: event.timestamp,\r\n                abilityId: event.ability.guid,\r\n                abilityName: event.ability.name,\r\n              }));\r\n            castsDuringNetherPortal.push(...casts);\r\n          });\r\n      }\r\n      importantEvents.push(...netherPortalCasts, ...netherPortalWindows, ...castsDuringNetherPortal);\r\n    }\r\n    return importantEvents.sort((event1, event2) => event1.timestamp - event2.timestamp);\r\n  }\r\n\r\n  static propTypes = {\r\n    selectedCombatant: PropTypes.object,\r\n    start: PropTypes.number.isRequired,\r\n    end: PropTypes.number.isRequired,\r\n    deaths: PropTypes.array.isRequired,\r\n    resurrections: PropTypes.array.isRequired,\r\n    petTimeline: PropTypes.object,\r\n    historyBySpellId: PropTypes.object,\r\n  };\r\n  gemini = null;\r\n\r\n  constructor() {\r\n    super();\r\n    this.handleMouseWheel = this.handleMouseWheel.bind(this);\r\n    this.state = {\r\n      zoom: 2,\r\n    };\r\n  }\r\n\r\n  handleMouseWheel(e) {\r\n    // This translate vertical scrolling into horizontal scrolling\r\n    if (!this.gemini || !this.gemini.scrollbar) {\r\n      return;\r\n    }\r\n\r\n    e.preventDefault();\r\n    e.stopPropagation();\r\n    if (e.detail > 0) {\r\n      // noinspection JSSuspiciousNameCombination\r\n      this.gemini.scrollbar._viewElement.scrollLeft -= e.deltaY;\r\n    } else {\r\n      // noinspection JSSuspiciousNameCombination\r\n      this.gemini.scrollbar._viewElement.scrollLeft += e.deltaY;\r\n    }\r\n  }\r\n\r\n  decorateCloseCasts(events) {\r\n    // iterate through each cast, look if there are another casts very nearby, if so, save their names\r\n    for (let i = 0; i < events.length; i += 1) {\r\n      const event = events[i];\r\n      if (event.type !== EventType.Cast) {\r\n        continue;\r\n      }\r\n      // check N surrounding casts on both sides, if they are within BUFFER, save their names\r\n      const minI = Math.max(i - NEARBY_CAST_COUNT, 0);\r\n      const maxI = Math.min(i + NEARBY_CAST_COUNT, events.length - 1);\r\n      const leftLimit = event.timestamp - NEARBY_CASTS_BUFFER;\r\n      const rightLimit = event.timestamp + NEARBY_CASTS_BUFFER;\r\n      for (let j = minI; j <= maxI; j += 1) {\r\n        if (j === i || events[j].type !== EventType.Cast) {\r\n          continue;\r\n        }\r\n        if (leftLimit <= events[j].timestamp && events[j].timestamp <= rightLimit) {\r\n          event.nearbyCasts = event.nearbyCasts || [];\r\n          event.nearbyCasts.push(events[j].abilityName);\r\n        }\r\n      }\r\n    }\r\n    return events;\r\n  }\r\n\r\n  decorateImplosionCasts(events) {\r\n    const { petTimeline } = this.props;\r\n    events.filter(event => event.type === EventType.Cast && event.abilityId === SPELLS.IMPLOSION_CAST.id)\r\n      .forEach(cast => {\r\n        const impCount = petTimeline.getPetsAtTimestamp(cast.timestamp).filter(pet => isWildImp(pet.guid)).length;\r\n        cast.extraInfo = `Imploded ${impCount} Wild Imp${impCount > 1 ? 's' : ''}`;\r\n      });\r\n    return events;\r\n  }\r\n\r\n  filterHistoryCasts(id) {\r\n    const { historyBySpellId } = this.props;\r\n    if (!historyBySpellId[id]) {\r\n      return [];\r\n    }\r\n    return historyBySpellId[id]\r\n      .filter(event => event.type === EventType.Cast)\r\n      .map(event => ({\r\n        type: EventType.Cast,\r\n        important: true,\r\n        timestamp: event.timestamp,\r\n        abilityId: event.ability.guid,\r\n        abilityName: event.ability.name,\r\n      }));\r\n  }\r\n\r\n  render() {\r\n    const { start, end, deaths, resurrections, ...others } = this.props;\r\n    delete others.selectedCombatant;\r\n    delete others.historyBySpellId;\r\n    delete others.petTimeline;\r\n    const pets = this.pets;\r\n    const duration = end - start;\r\n    const seconds = Math.ceil(duration / 1000);\r\n\r\n    const secondWidth = 80 / this.state.zoom;\r\n    const skipInterval = Math.ceil(40 / secondWidth);\r\n\r\n    // 9 for the scrollbar height\r\n    // 4 for margin\r\n    // 36 for the ruler\r\n    // 28 for each timeline row\r\n    const rows = Object.keys(pets).length + 1; // +1 for key events\r\n    const totalHeight = 9 + 4 + 36 + 28 * rows;\r\n    const totalWidth = seconds * secondWidth;\r\n\r\n    return (\r\n      <div className=\"spell-timeline flex\" {...others}>\r\n        <div className=\"flex-sub legend\">\r\n          <div className=\"lane ruler-lane\">\r\n            <div className=\"btn-group\">\r\n              {[1, 1.5, 2, 2.5, 3, 5].map(zoom => (\r\n                <button key={zoom} className={`btn btn-default btn-xs ${zoom === this.state.zoom ? 'active' : ''}`} onClick={() => this.setState({ zoom })}>{zoom}x</button>\r\n              ))}\r\n            </div>\r\n          </div>\r\n          <div className=\"lane\" key=\"casts\">\r\n            Key casts\r\n          </div>\r\n          {Object.keys(pets).map(spellId => (\r\n            <div className=\"lane\" key={spellId}>\r\n              {spellId !== 'unknown' && <SpellLink id={Number(spellId)} />}\r\n              {spellId === 'unknown' && (\r\n                <>\r\n                  <Icon icon=\"inv_misc_questionmark\" /> Unknown pet\r\n                </>\r\n              )}\r\n            </div>\r\n          ))}\r\n        </div>\r\n        <GeminiScrollbar\r\n          className=\"timeline flex-main\"\r\n          style={{ height: totalHeight }}\r\n          onWheel={this.handleMouseWheel}\r\n          ref={comp => {\r\n            this.gemini = comp;\r\n          }}\r\n        >\r\n          <div className={`ruler interval-${skipInterval}`} style={{ width: totalWidth }}>\r\n            {seconds > 0 && [...Array(seconds)].map((_, second) => {\r\n              if (second % skipInterval !== 0) {\r\n                // Skip every second second when the text width becomes larger than the container\r\n                return null;\r\n              }\r\n              return (\r\n                <div key={second} className=\"lane\" style={{ width: secondWidth * skipInterval }}>\r\n                  {formatDuration(second)}\r\n                </div>\r\n              );\r\n            })}\r\n          </div>\r\n          <KeyCastsRow\r\n            key=\"keyCastsRow\"\r\n            className=\"lane\"\r\n            events={this.keyEvents}\r\n            start={start}\r\n            totalWidth={totalWidth}\r\n            secondWidth={secondWidth}\r\n          />\r\n          {Object.keys(pets).map(spellId => (\r\n            <PetRow\r\n              key={spellId}\r\n              className=\"lane\"\r\n              pets={pets[spellId].pets}\r\n              start={start}\r\n              totalWidth={totalWidth}\r\n              secondWidth={secondWidth}\r\n            />\r\n          ))}\r\n          <DeathEvents\r\n            start={start}\r\n            secondWidth={secondWidth}\r\n            deaths={deaths}\r\n            resurrections={resurrections}\r\n            invalidated={deaths.length + resurrections.length}\r\n          />\r\n        </GeminiScrollbar>\r\n      </div>\r\n    );\r\n  }\r\n}\r\n\r\nexport default PetTimeline;\r\n","import React from 'react';\r\nimport PropTypes from 'prop-types';\r\n\r\nimport Panel from 'interface/others/Panel';\r\n\r\nimport SpellLink from 'common/SpellLink';\r\nimport SPELLS from 'common/SPELLS';\r\n\r\nimport PetTimeline from './PetTimeline';\r\n\r\nconst TimelineTab = props => {\r\n  const { selectedCombatant } = props;\r\n  return (\r\n    <Panel style={{ padding: '10px 22px 0' }}>\r\n      <div className=\"text-muted\">\r\n        This timeline shows the pets you have summoned over the fight, together with key spell casts like {selectedCombatant.hasTalent(SPELLS.POWER_SIPHON_TALENT.id) && <><SpellLink id={SPELLS.POWER_SIPHON_TALENT.id} />, </>}{selectedCombatant.hasTalent(SPELLS.NETHER_PORTAL_TALENT.id) && <><SpellLink id={SPELLS.NETHER_PORTAL_TALENT.id} />, </>}<SpellLink id={SPELLS.IMPLOSION_CAST.id} /> or <SpellLink id={SPELLS.SUMMON_DEMONIC_TYRANT.id} />.\r\n      </div>\r\n      <PetTimeline\r\n        {...props}\r\n        style={{\r\n          marginTop: 10,\r\n          marginLeft: -22,\r\n          marginRight: -22,\r\n        }}\r\n      />\r\n    </Panel>\r\n  );\r\n};\r\n\r\nTimelineTab.propTypes = {\r\n  selectedCombatant: PropTypes.object,\r\n};\r\n\r\nexport default TimelineTab;\r\n","import React from 'react';\r\n\r\nimport Analyzer from 'parser/core/Analyzer';\r\nimport DeathTracker from 'parser/shared/modules/DeathTracker';\r\nimport SpellHistory from 'parser/shared/modules/SpellHistory';\r\n\r\nimport DemoPets from '../DemoPets';\r\nimport TabComponent from './TabComponent';\r\n\r\nclass PetTimelineTab extends Analyzer {\r\n  static dependencies = {\r\n    spellHistory: SpellHistory,\r\n    deathTracker: DeathTracker,\r\n    demoPets: DemoPets,\r\n  };\r\n\r\n  tab() {\r\n    return {\r\n      title: 'Pet Timeline',\r\n      url: 'pet-timeline',\r\n      order: 3,\r\n      render: () => (\r\n        <TabComponent\r\n          selectedCombatant={this.selectedCombatant}\r\n          start={this.owner.fight.start_time}\r\n          end={this.owner.currentTimestamp >= 0 ? this.owner.currentTimestamp : this.owner.fight.end_time}\r\n          deaths={this.deathTracker.deaths}\r\n          petTimeline={this.demoPets.timeline}\r\n          resurrections={this.deathTracker.resurrections}\r\n          historyBySpellId={this.spellHistory.historyBySpellId}\r\n        />\r\n      ),\r\n    };\r\n  }\r\n}\r\n\r\nexport default PetTimelineTab;\r\n","import EventsNormalizer from 'parser/core/EventsNormalizer';\r\nimport { encodeTargetString } from 'parser/shared/modules/EnemyInstances';\r\nimport SPELLS from 'common/SPELLS';\r\nimport { EventType } from 'parser/core/Events';\r\nimport { isPermanentPet } from 'parser/shared/modules/pets/helpers';\r\n\r\nimport { PERMANENT_PET_ABILITIES_TO_SUMMON_MAP, PET_SUMMON_ABILITY_IDS } from '../CONSTANTS';\r\nimport PETS from '../PETS';\r\n\r\nconst MAX_TEMPORARY_PET_DURATION = 30000;\r\nconst CHECKED_EVENT_TYPES = [EventType.BeginCast, EventType.Cast, EventType.Damage];\r\nconst debug = false;\r\n\r\nclass PrepullPetNormalizer extends EventsNormalizer {\r\n  // Warlock DemoPets.js depends on `summon` events for their inner works\r\n  // Sometimes it happens, that some pets exist at the combat start, but without their `summon` event\r\n  // Which means that for the module they don't exists, which in turn messes up other mechanics (such as casting Power Siphon (which NEEDS Wild Imps) when we shouldn't have any)\r\n  // This can happen most likely because of 2 things - permanent pet summoned pre-pull, trash mobs right before boss (pets didn't disappear yet), or because of Inner Demons (which periodically summons pets even outside of combat)\r\n\r\n  // This normalizer looks at first 30 seconds (because that's hypothetically the longest any temporary pet can live, given a 15 second duration and 15 second extension via Demonic Tyrant, realistically lower because of GCD and cast time of DT)\r\n  // And if it finds begincast, cast or damage events from a pet that isn't summoned yet, fabricates a summon event for them\r\n\r\n  normalize(events) {\r\n    debug && console.log('playerPets', this.owner.playerPets.sort((pet1, pet2) => pet1.id - pet2.id));\r\n    const maxTimestamp = this.owner.fight.start_time + MAX_TEMPORARY_PET_DURATION;\r\n    const summonedPets = []; // contains encoded target strings of summoned pets - if pet doesn't exist, fabricate an event, and push encoded target string here to mark them as summoned\r\n    const fabricatedEvents = [];\r\n\r\n    for (let i = 0; i < events.length; i += 1) {\r\n      const event = events[i];\r\n      if (event.timestamp > maxTimestamp) {\r\n        break;\r\n      }\r\n      debug && console.log(`(${this.owner.formatTimestamp(event.timestamp, 3)}) Event`, event);\r\n      if (event.type === EventType.Summon && event.ability && PET_SUMMON_ABILITY_IDS.includes(event.ability.guid)) {\r\n        summonedPets.push(encodeTargetString(event.targetID, event.targetInstance));\r\n        debug && console.log(`(${this.owner.formatTimestamp(event.timestamp, 3)}) Pet summon, added to array. Current array: `, JSON.parse(JSON.stringify(summonedPets)));\r\n      } else if (CHECKED_EVENT_TYPES.includes(event.type) && this.owner.byPlayerPet(event)) {\r\n        debug && console.log(`(${this.owner.formatTimestamp(event.timestamp, 3)}) begincast, cast or damage event`);\r\n        const petId = event.sourceID;\r\n        const petInstance = event.sourceInstance;\r\n        const petString = encodeTargetString(petId, petInstance);\r\n        if (!summonedPets.includes(petString)) {\r\n          debug && console.log(`(${this.owner.formatTimestamp(event.timestamp, 3)}) Pet ${petString} not summoned yet`);\r\n          // fabricate event for it, push to summonedPets\r\n          let spell;\r\n          if (this._verifyPermanentPet(petId)) {\r\n            if (!PERMANENT_PET_ABILITIES_TO_SUMMON_MAP[event.ability.guid]) {\r\n              debug && console.error(`(${this.owner.formatTimestamp(event.timestamp, 3)}) ERROR - unknown ability`, event);\r\n              continue;\r\n            }\r\n            spell = SPELLS[PERMANENT_PET_ABILITIES_TO_SUMMON_MAP[event.ability.guid]];\r\n          } else {\r\n            const guid = this._getPetGuid(petId);\r\n            if (!PETS[guid]) {\r\n              debug && console.error(`(${this.owner.formatTimestamp(event.timestamp, 3)}) ERROR - unknown pet`, event);\r\n              continue;\r\n            }\r\n            spell = SPELLS[PETS[guid].summonAbility];\r\n          }\r\n          const fabricatedEvent = {\r\n            timestamp: this.owner.fight.start_time,\r\n            type: EventType.Summon,\r\n            sourceID: this.owner.playerId,\r\n            targetID: petId,\r\n            targetInstance: petInstance,\r\n            sourceIsFriendly: true,\r\n            targetIsFriendly: true,\r\n            ability: {\r\n              guid: spell.id,\r\n              name: spell.name,\r\n              abilityIcon: spell.icon,\r\n            },\r\n            __fabricated: true,\r\n          };\r\n\r\n          summonedPets.push(petString);\r\n          fabricatedEvents.push(fabricatedEvent);\r\n          debug && console.log(`(${this.owner.formatTimestamp(event.timestamp, 3)}) Fabricated summon event. Current array: `, JSON.parse(JSON.stringify(summonedPets)), ', fabricated events:', JSON.parse(JSON.stringify(fabricatedEvents)));\r\n        } else {\r\n          debug && console.log(`(${this.owner.formatTimestamp(event.timestamp, 3)}) Pet ${petString} already in summoned pets`);\r\n        }\r\n      }\r\n    }\r\n    events.unshift(...fabricatedEvents);\r\n    return events;\r\n  }\r\n\r\n  _getPetGuid(id) {\r\n    return this.owner.playerPets.find(pet => pet.id === id).guid;\r\n  }\r\n\r\n  _verifyPermanentPet(id) {\r\n    const guid = this._getPetGuid(id);\r\n    return isPermanentPet(guid);\r\n  }\r\n}\r\n\r\nexport default PrepullPetNormalizer;\r\n","import EventsNormalizer from 'parser/core/EventsNormalizer';\r\nimport SPELLS from 'common/SPELLS';\r\nimport { EventType } from 'parser/core/Events';\r\n\r\nconst MS_BUFFER = 100;\r\n\r\nclass SummonOrderNormalizer extends EventsNormalizer {\r\n\r\n  normalize(events) {\r\n    const _events = [];\r\n\r\n    events.forEach((event, idx) => {\r\n      _events.push(event);\r\n\r\n      if (this.isDogSummon(event) || this.isTyrantSummon(event)) {\r\n        const castTimestamp = event.timestamp;\r\n\r\n        for (let previousEventIndex = idx; previousEventIndex >= 0; previousEventIndex -= 1) {\r\n          const previousEvent = _events[previousEventIndex];\r\n          if ((castTimestamp - previousEvent.timestamp) > MS_BUFFER) {\r\n            break;\r\n          }\r\n          if (this.isSharpenedDreadfangs(previousEvent, event) ||\r\n            this.isDemonicConsumption(previousEvent, event) ||\r\n            this.isDemonFire(previousEvent, event)) {\r\n            this.swapEvents(_events, previousEventIndex, previousEvent);\r\n          }\r\n        }\r\n      }\r\n    });\r\n    return _events;\r\n  }\r\n\r\n  // helper\r\n  isSharpenedDreadfangs(previousEvent, event) {\r\n    return previousEvent.type === EventType.Cast && previousEvent.ability.guid === SPELLS.SHARPENED_DREADFANGS.id && previousEvent.sourceInstance === event.targetInstance;\r\n  }\r\n\r\n  isTyrantSummon(event) {\r\n    return event.type === EventType.Summon && event.ability.guid === SPELLS.SUMMON_DEMONIC_TYRANT.id;\r\n  }\r\n\r\n  isDogSummon(event) {\r\n    return event.type === EventType.Summon && (event.ability.guid === SPELLS.DREADSTALKER_SUMMON_1.id || event.ability.guid === SPELLS.DREADSTALKER_SUMMON_2.id);\r\n  }\r\n\r\n  swapEvents(_events, previousEventIndex, previousEvent) {\r\n    _events.splice(previousEventIndex, 1);\r\n    _events.push(previousEvent);\r\n    previousEvent.__modified = true;\r\n  }\r\n\r\n  isDemonFire(previousEvent, event) {\r\n    return previousEvent.type === EventType.BeginCast && previousEvent.ability.guid === SPELLS.DEMONIC_TYRANT_DAMAGE.id && previousEvent.sourceInstance === event.targetInstance;\r\n  }\r\n\r\n  isDemonicConsumption(previousEvent, event) {\r\n    return previousEvent.type === EventType.Cast && previousEvent.ability.guid === SPELLS.DEMONIC_CONSUMPTION_CAST.id && previousEvent.sourceInstance === event.targetInstance;\r\n  }\r\n}\r\n\r\nexport default SummonOrderNormalizer;\r\n","import { EventType } from 'parser/core/Events';\r\nimport EventsNormalizer from 'parser/core/EventsNormalizer';\r\nimport { encodeTargetString } from 'parser/shared/modules/EnemyInstances';\r\n\r\nimport SPELLS from 'common/SPELLS';\r\n\r\nimport { isWildImp } from '../../pets/helpers';\r\n\r\nconst debug = false;\r\nconst CHECKED_EVENT_TYPES = [EventType.BeginCast, EventType.Cast];\r\n\r\nclass PowerSiphonNormalizer extends EventsNormalizer {\r\n  // Power Siphon sacrifices up to 2 Wild Imps to gain Demonic Core stacks from them\r\n  // There's some problems with it I can't seem to solve - according to Warlock Discord, it should pick the imps with the lowest energy\r\n  // But when I get active Wild Imps, order them by energy and if same, by their spawn timestamp (so it should pick the lowest energy or oldest), and sacrifice first 2\r\n  // In lot of cases, I get errors afterwards, that Imps that should be dead, are happily casting things\r\n  // Not sure if it's my fault with tracking their lifespan or Power Siphon Imp picking strategy is different\r\n\r\n  // This normalizer looks at Power Siphon casts, and looks for Wild Imp activity AFTER the cast, storing which Wild Imps were active AFTER the cast\r\n  // If I can store the info inside the PS cast (with __modified flag) I should be able to correctly filter Imps that should actually die in the DemoPets.js Analyzer\r\n  normalize(events) {\r\n    if (!this.selectedCombatant.hasTalent(SPELLS.POWER_SIPHON_TALENT.id)) {\r\n      return events;\r\n    }\r\n\r\n    let lastPowerSiphonCast = null;\r\n    let activeImpsAfterCast = [];\r\n\r\n    for (let i = 0; i < events.length; i += 1) {\r\n      const event = events[i];\r\n      // skip everything till first PS cast\r\n      if (!lastPowerSiphonCast && (!event.ability || event.ability.guid !== SPELLS.POWER_SIPHON_TALENT.id)) {\r\n        continue;\r\n      }\r\n      if (event.ability && event.ability.guid === SPELLS.POWER_SIPHON_TALENT.id) {\r\n        if (lastPowerSiphonCast) {\r\n          // if it's not first PS cast, add the active imps to previous cast, start counting again\r\n          lastPowerSiphonCast.activeImpsAfterCast = [...activeImpsAfterCast];\r\n          lastPowerSiphonCast.__modified = true;\r\n          activeImpsAfterCast = [];\r\n        }\r\n        lastPowerSiphonCast = event;\r\n      } else {\r\n        // all events after PS cast\r\n        if (CHECKED_EVENT_TYPES.includes(event.type) && this.owner.byPlayerPet(event) && this._isFromWildImp(event)) {\r\n          const targetString = encodeTargetString(event.sourceID, event.sourceInstance);\r\n          if (!activeImpsAfterCast.includes(targetString)) {\r\n            activeImpsAfterCast.push(targetString);\r\n          }\r\n        }\r\n      }\r\n    }\r\n    // modify the last PS cast\r\n    lastPowerSiphonCast.activeImpsAfterCast = [...activeImpsAfterCast];\r\n    lastPowerSiphonCast.__modified = true;\r\n    debug && console.log('PS casts after normalizing', events.filter(event => event.type === EventType.Cast && event.ability.guid === SPELLS.POWER_SIPHON_TALENT.id));\r\n    return events;\r\n  }\r\n\r\n  _isFromWildImp(event) {\r\n    // if event is not from player pet (is not in this.owner.playerPets), this function shouldn't even get called, but just to be safe\r\n    const info = this.owner.playerPets.find(pet => pet.id === event.sourceID);\r\n    if (!info) {\r\n      return false;\r\n    }\r\n    return isWildImp(info.guid);\r\n  }\r\n}\r\n\r\nexport default PowerSiphonNormalizer;\r\n","import React from 'react';\r\n\r\nimport Analyzer, { SELECTED_PLAYER, SELECTED_PLAYER_PET } from 'parser/core/Analyzer';\r\n\r\nimport SPELLS from 'common/SPELLS';\r\nimport Events from 'parser/core/Events';\r\nimport { encodeTargetString } from 'parser/shared/modules/EnemyInstances';\r\nimport calculateEffectiveDamage from 'parser/core/calculateEffectiveDamage';\r\nimport STATISTIC_CATEGORY from 'interface/others/STATISTIC_CATEGORY';\r\nimport Statistic from 'interface/statistics/Statistic';\r\nimport BoringSpellValueText from 'interface/statistics/components/BoringSpellValueText';\r\nimport ItemDamageDone from 'interface/ItemDamageDone';\r\nimport { formatThousands } from 'common/format';\r\n\r\nconst DREADLASH_BONUS_DAMAGE = 0.25;\r\nconst debug = false;\r\n\r\nclass Dreadlash extends Analyzer {\r\n  _primaryTarget = null;\r\n  cleavedDamage = 0;\r\n  bonusDamage = 0; // only from primary target\r\n\r\n  constructor(...args) {\r\n    super(...args);\r\n    this.active = this.selectedCombatant.hasTalent(SPELLS.DREADLASH_TALENT.id);\r\n    this.addEventListener(Events.damage.by(SELECTED_PLAYER_PET).spell(SPELLS.DREADBITE), this.handleDreadbite);\r\n    this.addEventListener(Events.cast.by(SELECTED_PLAYER).spell(SPELLS.CALL_DREADSTALKERS), this.handleDreadstalkerCast);\r\n  }\r\n\r\n  handleDreadbite(event) {\r\n    const target = encodeTargetString(event.targetID, event.targetInstance);\r\n    if (this._primaryTarget === target) {\r\n      debug && this.log(`Dreadbite damage on ${target}, primary`);\r\n      this.bonusDamage += calculateEffectiveDamage(event, DREADLASH_BONUS_DAMAGE);\r\n    } else {\r\n      debug && this.log(`Dreadbite damage on ${target}, cleaved`);\r\n      this.cleavedDamage += event.amount + (event.absorbed || 0);\r\n    }\r\n  }\r\n\r\n  handleDreadstalkerCast(event) {\r\n    this._primaryTarget = encodeTargetString(event.targetID, event.targetInstance);\r\n    debug && this.log(`Dreadstalkers cast on ${this._primaryTarget}`);\r\n  }\r\n\r\n  statistic() {\r\n    const total = this.cleavedDamage + this.bonusDamage;\r\n    return (\r\n      <Statistic\r\n        category={STATISTIC_CATEGORY.TALENTS}\r\n        size=\"flexible\"\r\n        tooltip={(\r\n          <>\r\n            {formatThousands(total)} bonus damage<br />\r\n            Bonus damage on primary target hits: {formatThousands(this.bonusDamage)} ({this.owner.formatItemDamageDone(this.bonusDamage)})<br />\r\n            Bonus cleaved damage: {formatThousands(this.cleavedDamage)} ({this.owner.formatItemDamageDone(this.cleavedDamage)})\r\n          </>\r\n        )}\r\n      >\r\n        <BoringSpellValueText spell={SPELLS.DREADLASH_TALENT}>\r\n          <ItemDamageDone amount={total} />\r\n        </BoringSpellValueText>\r\n      </Statistic>\r\n    );\r\n  }\r\n}\r\n\r\nexport default Dreadlash;\r\n","import React from 'react';\r\n\r\nimport Analyzer, { SELECTED_PLAYER, SELECTED_PLAYER_PET } from 'parser/core/Analyzer';\r\nimport Events from 'parser/core/Events';\r\nimport Pets from 'parser/shared/modules/Pets';\r\n\r\nimport SPELLS from 'common/SPELLS';\r\nimport { formatThousands } from 'common/format';\r\n\r\nimport STATISTIC_CATEGORY from 'interface/others/STATISTIC_CATEGORY';\r\nimport Statistic from 'interface/statistics/Statistic';\r\nimport BoringSpellValueText from 'interface/statistics/components/BoringSpellValueText';\r\nimport ItemDamageDone from 'interface/ItemDamageDone';\r\n\r\nimport PETS from '../pets/PETS';\r\n\r\nconst BUFFER = 200;\r\n\r\nclass DemonicStrength extends Analyzer {\r\n  static dependencies = {\r\n    pets: Pets,\r\n  };\r\n\r\n  _removedAt = null;\r\n  damage = 0;\r\n\r\n  constructor(...args) {\r\n    super(...args);\r\n    this.active = this.selectedCombatant.hasTalent(SPELLS.DEMONIC_STRENGTH_TALENT.id);\r\n    this.addEventListener(Events.damage.by(SELECTED_PLAYER_PET).spell(SPELLS.FELSTORM_DAMAGE), this.handleFelstormDamage);\r\n    this.addEventListener(Events.removebuff.by(SELECTED_PLAYER).spell(SPELLS.DEMONIC_STRENGTH_TALENT), this.handleRemoveDemonicStrength);\r\n  }\r\n\r\n  handleFelstormDamage(event) {\r\n    // pet ability Felstorm and this \"empowered\" Felstorm can't be active at the same time, they're exclusive (the game doesn't let you cast it)\r\n    const petInfo = this.owner.playerPets.find(pet => pet.id === event.sourceID);\r\n    if (petInfo.guid === PETS.GRIMOIRE_FELGUARD.guid) {\r\n      // Grimoire: Felguard uses same spell IDs\r\n      return;\r\n    }\r\n    const pet = this.pets.getSourceEntity(event);\r\n    if (pet.hasBuff(SPELLS.DEMONIC_STRENGTH_TALENT.id) || event.timestamp <= this._removedAt + BUFFER) {\r\n      // the last empowered Felstorm usually happens in this order:\r\n      // Felstorm cast -> Demonic Strength removebuff -> Felstorm damages\r\n      // So in order to also count the last empowered damage events, we also count damage events within 200ms of the removebuff\r\n      this.damage += event.amount + (event.absorbed || 0);\r\n    }\r\n  }\r\n\r\n  handleRemoveDemonicStrength(event) {\r\n    this._removedAt = event.timestamp;\r\n  }\r\n\r\n  statistic() {\r\n    return (\r\n      <Statistic\r\n        category={STATISTIC_CATEGORY.TALENTS}\r\n        size=\"flexible\"\r\n        tooltip={`${formatThousands(this.damage)} damage`}\r\n      >\r\n        <BoringSpellValueText spell={SPELLS.DEMONIC_STRENGTH_TALENT}>\r\n          <ItemDamageDone amount={this.damage} />\r\n        </BoringSpellValueText>\r\n      </Statistic>\r\n    );\r\n  }\r\n}\r\n\r\nexport default DemonicStrength;\r\n","import React from 'react';\r\n\r\nimport Analyzer, { SELECTED_PLAYER } from 'parser/core/Analyzer';\r\nimport Events from 'parser/core/Events';\r\n\r\nimport SPELLS from 'common/SPELLS';\r\nimport { formatThousands } from 'common/format';\r\nimport STATISTIC_CATEGORY from 'interface/others/STATISTIC_CATEGORY';\r\nimport Statistic from 'interface/statistics/Statistic';\r\nimport BoringSpellValueText from 'interface/statistics/components/BoringSpellValueText';\r\nimport ItemDamageDone from 'interface/ItemDamageDone';\r\n\r\nclass BilescourgeBombers extends Analyzer {\r\n  damage = 0;\r\n\r\n  constructor(...args) {\r\n    super(...args);\r\n    this.active = this.selectedCombatant.hasTalent(SPELLS.BILESCOURGE_BOMBERS_TALENT.id);\r\n    this.addEventListener(Events.damage.by(SELECTED_PLAYER).spell(SPELLS.BILESCOURGE_BOMBERS_DAMAGE), this.handleBilescourgeDamage);\r\n  }\r\n\r\n  handleBilescourgeDamage(event) {\r\n    this.damage += event.amount + (event.absorbed || 0);\r\n  }\r\n\r\n  statistic() {\r\n    return (\r\n      <Statistic\r\n        category={STATISTIC_CATEGORY.TALENTS}\r\n        size=\"flexible\"\r\n        tooltip={`${formatThousands(this.damage)} damage`}\r\n      >\r\n        <BoringSpellValueText spell={SPELLS.BILESCOURGE_BOMBERS_TALENT}>\r\n          <ItemDamageDone amount={this.damage} />\r\n        </BoringSpellValueText>\r\n      </Statistic>\r\n    );\r\n  }\r\n}\r\n\r\nexport default BilescourgeBombers;\r\n","import React from 'react';\r\n\r\nimport Analyzer, { SELECTED_PLAYER } from 'parser/core/Analyzer';\r\nimport Events from 'parser/core/Events';\r\nimport SpellUsable from 'parser/shared/modules/SpellUsable';\r\n\r\nimport SPELLS from 'common/SPELLS';\r\nimport SpellLink from 'common/SpellLink';\r\n\r\nimport STATISTIC_CATEGORY from 'interface/others/STATISTIC_CATEGORY';\r\nimport Statistic from 'interface/statistics/Statistic';\r\nimport BoringSpellValueText from 'interface/statistics/components/BoringSpellValueText';\r\nimport { i18n } from '@lingui/core';\r\nimport { t } from '@lingui/macro';\r\n\r\nconst BUFF_DURATION = 20000;\r\nconst debug = false;\r\n\r\nclass DemonicCalling extends Analyzer {\r\n  get suggestionThresholds() {\r\n    const wastedPerMinute = this.wastedProcs / this.owner.fightDuration * 1000 * 60;\r\n    return {\r\n      actual: wastedPerMinute,\r\n      isGreaterThan: {\r\n        minor: 1,\r\n        average: 1.5,\r\n        major: 2,\r\n      },\r\n      style: 'number',\r\n    };\r\n  }\r\n\r\n  static dependencies = {\r\n    spellUsable: SpellUsable,\r\n  };\r\n  wastedProcs = 0;\r\n  _expectedBuffEnd = null;\r\n\r\n  constructor(...args) {\r\n    super(...args);\r\n    this.active = this.selectedCombatant.hasTalent(SPELLS.DEMONIC_CALLING_TALENT.id);\r\n    this.addEventListener(Events.applybuff.to(SELECTED_PLAYER).spell(SPELLS.DEMONIC_CALLING_BUFF), this.applyDemonicCallingBuff);\r\n    this.addEventListener(Events.refreshbuff.to(SELECTED_PLAYER).spell(SPELLS.DEMONIC_CALLING_BUFF), this.refreshDemonicCallingBuff);\r\n    this.addEventListener(Events.removebuff.to(SELECTED_PLAYER).spell(SPELLS.DEMONIC_CALLING_BUFF), this.removeDemonicCallingBuff);\r\n  }\r\n\r\n  applyDemonicCallingBuff(event) {\r\n    debug && this.log('DC applied');\r\n    this._expectedBuffEnd = event.timestamp + BUFF_DURATION;\r\n  }\r\n\r\n  refreshDemonicCallingBuff(event) {\r\n    debug && this.log('DC refreshed');\r\n    if (this.spellUsable.isAvailable(SPELLS.CALL_DREADSTALKERS.id)) {\r\n      this.wastedProcs += 1;\r\n      debug && this.log('Dreadstalkers were available, wasted proc');\r\n    }\r\n    this._expectedBuffEnd = event.timestamp + BUFF_DURATION;\r\n  }\r\n\r\n  removeDemonicCallingBuff(event) {\r\n    if (event.timestamp >= this._expectedBuffEnd) {\r\n      // the buff fell off, another wasted instant\r\n      this.wastedProcs += 1;\r\n      debug && this.log('DC fell off, wasted proc');\r\n    }\r\n  }\r\n\r\n  suggestions(when) {\r\n    when(this.suggestionThresholds)\r\n      .addSuggestion((suggest, actual, recommended) => suggest(<>You should try to use your cheaper <SpellLink id={SPELLS.CALL_DREADSTALKERS.id} /> as much as possible as Dreadstalkers make a great portion of your damage.<br /><br /><small>NOTE: Some wasted procs are probably unavoidable (e.g. <SpellLink id={SPELLS.CALL_DREADSTALKERS.id} /> on cooldown, proc waiting but gets overwritten by another)</small></>)\r\n        .icon(SPELLS.DEMONIC_CALLING_TALENT.icon)\r\n        .actual(i18n._(t('warlock.demonology.suggestions.demonicCalling.wastedProcsPerMinute')`${actual.toFixed(2)} wasted procs per minute`))\r\n        .recommended(`< ${recommended} is recommended`));\r\n  }\r\n\r\n  statistic() {\r\n    return (\r\n      <Statistic\r\n        category={STATISTIC_CATEGORY.TALENTS}\r\n        size=\"flexible\"\r\n      >\r\n        <BoringSpellValueText spell={SPELLS.DEMONIC_CALLING_TALENT}>\r\n          {this.wastedProcs} <small>Wasted procs</small>\r\n        </BoringSpellValueText>\r\n      </Statistic>\r\n    );\r\n  }\r\n}\r\n\r\nexport default DemonicCalling;\r\n","import React from 'react';\r\n\r\nimport Analyzer, { SELECTED_PLAYER } from 'parser/core/Analyzer';\r\nimport Events from 'parser/core/Events';\r\n\r\nimport SPELLS from 'common/SPELLS';\r\nimport STATISTIC_CATEGORY from 'interface/others/STATISTIC_CATEGORY';\r\nimport Statistic from 'interface/statistics/Statistic';\r\nimport BoringSpellValueText from 'interface/statistics/components/BoringSpellValueText';\r\n\r\nconst BUFFER = 350;\r\n\r\nclass PowerSiphon extends Analyzer {\r\n  get totalCores() {\r\n    return this.casts.reduce((total, current) => total + current, 0);\r\n  }\r\n\r\n  get averageCores() {\r\n    return (this.totalCores / this.casts.length) || 0;\r\n  }\r\n\r\n  _cast = null;\r\n  _count = 0;\r\n  casts = [];\r\n\r\n  constructor(...args) {\r\n    super(...args);\r\n    this.active = this.selectedCombatant.hasTalent(SPELLS.POWER_SIPHON_TALENT.id);\r\n    this.addEventListener(Events.cast.by(SELECTED_PLAYER).spell(SPELLS.POWER_SIPHON_TALENT), this.handlePowerSiphonCast);\r\n    this.addEventListener(Events.applybuff.to(SELECTED_PLAYER).spell(SPELLS.DEMONIC_CORE_BUFF), this.handleDemonicCore);\r\n    this.addEventListener(Events.applybuffstack.to(SELECTED_PLAYER).spell(SPELLS.DEMONIC_CORE_BUFF), this.handleDemonicCore);\r\n    this.addEventListener(Events.refreshbuff.to(SELECTED_PLAYER).spell(SPELLS.DEMONIC_CORE_BUFF), this.handleDemonicCore);\r\n    this.addEventListener(Events.fightend, this.onFinished);\r\n  }\r\n\r\n  handlePowerSiphonCast(event) {\r\n    if (this._cast !== null) {\r\n      this.casts.push(this._count);\r\n    }\r\n    this._cast = event.timestamp;\r\n    this._count = 0;\r\n  }\r\n\r\n  handleDemonicCore(event) {\r\n    if (this._cast && event.timestamp <= this._cast + BUFFER) {\r\n      this._count += 1;\r\n    }\r\n  }\r\n\r\n  onFinished() {\r\n    this.casts.push(this._count);\r\n  }\r\n\r\n  statistic() {\r\n    return (\r\n      <Statistic\r\n        category={STATISTIC_CATEGORY.TALENTS}\r\n        size=\"flexible\"\r\n        tooltip={`Average Demonic Core stacks per cast: ${this.averageCores.toFixed(2)}`}\r\n      >\r\n        <BoringSpellValueText spell={SPELLS.POWER_SIPHON_TALENT}>\r\n          {this.totalCores} <small>Bonus cores</small>\r\n        </BoringSpellValueText>\r\n      </Statistic>\r\n    );\r\n  }\r\n}\r\n\r\nexport default PowerSiphon;\r\n","import React from 'react';\r\n\r\nimport Analyzer, { SELECTED_PLAYER } from 'parser/core/Analyzer';\r\nimport Enemies from 'parser/shared/modules/Enemies';\r\nimport Events from 'parser/core/Events';\r\nimport calculateEffectiveDamage from 'parser/core/calculateEffectiveDamage';\r\n\r\nimport SPELLS from 'common/SPELLS';\r\nimport { formatThousands } from 'common/format';\r\nimport STATISTIC_CATEGORY from 'interface/others/STATISTIC_CATEGORY';\r\nimport Statistic from 'interface/statistics/Statistic';\r\nimport BoringSpellValueText from 'interface/statistics/components/BoringSpellValueText';\r\nimport ItemDamageDone from 'interface/ItemDamageDone';\r\n\r\nconst DAMAGE_BONUS = 0.2;\r\n\r\n/*\r\n  From the Shadows:\r\n    Casting Call Dreadstalkers causes the target to take 20% additional Shadowflame damage from you for the next 12 sec.\r\n */\r\nclass FromTheShadows extends Analyzer {\r\n  static dependencies = {\r\n    enemies: Enemies,\r\n  };\r\n\r\n  damage = 0;\r\n\r\n  constructor(...args) {\r\n    super(...args);\r\n    this.active = this.selectedCombatant.hasTalent(SPELLS.FROM_THE_SHADOWS_TALENT.id);\r\n    this.addEventListener(Events.damage.by(SELECTED_PLAYER).spell([SPELLS.DEMONBOLT, SPELLS.HAND_OF_GULDAN_DAMAGE, SPELLS.IMPLOSION_DAMAGE]), this.handleDamage);\r\n  }\r\n\r\n  handleDamage(event) {\r\n    const enemy = this.enemies.getEntity(event);\r\n    if (!enemy || !enemy.hasBuff(SPELLS.FROM_THE_SHADOWS_DEBUFF.id)) {\r\n      return;\r\n    }\r\n    this.damage += calculateEffectiveDamage(event, DAMAGE_BONUS);\r\n  }\r\n\r\n  statistic() {\r\n    return (\r\n      <Statistic\r\n        category={STATISTIC_CATEGORY.TALENTS}\r\n        size=\"flexible\"\r\n        tooltip={`${formatThousands(this.damage)} bonus damage`}\r\n      >\r\n        <BoringSpellValueText spell={SPELLS.FROM_THE_SHADOWS_TALENT}>\r\n          <ItemDamageDone amount={this.damage} />\r\n        </BoringSpellValueText>\r\n      </Statistic>\r\n    );\r\n  }\r\n}\r\n\r\nexport default FromTheShadows;\r\n","import React from 'react';\r\n\r\nimport Analyzer, { SELECTED_PLAYER_PET } from 'parser/core/Analyzer';\r\nimport Events from 'parser/core/Events';\r\n\r\nimport SPELLS from 'common/SPELLS';\r\nimport { formatThousands } from 'common/format';\r\nimport STATISTIC_CATEGORY from 'interface/others/STATISTIC_CATEGORY';\r\nimport Statistic from 'interface/statistics/Statistic';\r\nimport BoringSpellValueText from 'interface/statistics/components/BoringSpellValueText';\r\nimport ItemDamageDone from 'interface/ItemDamageDone';\r\n\r\nimport SoulShardTracker from '../soulshards/SoulShardTracker';\r\n\r\nclass SoulStrike extends Analyzer {\r\n  static dependencies = {\r\n    soulShardTracker: SoulShardTracker,\r\n  };\r\n\r\n  damage = 0;\r\n\r\n  constructor(...args) {\r\n    super(...args);\r\n    this.active = this.selectedCombatant.hasTalent(SPELLS.SOUL_STRIKE_TALENT.id);\r\n    this.addEventListener(Events.damage.by(SELECTED_PLAYER_PET).spell(SPELLS.SOUL_STRIKE_DAMAGE), this.handleSoulStrikeDamage);\r\n  }\r\n\r\n  handleSoulStrikeDamage(event) {\r\n    this.damage += event.amount + (event.absorbed || 0);\r\n  }\r\n\r\n  statistic() {\r\n    const shardsGained = this.soulShardTracker.getGeneratedBySpell(SPELLS.SOUL_STRIKE_SHARD_GEN.id);\r\n    return (\r\n      <Statistic\r\n        category={STATISTIC_CATEGORY.TALENTS}\r\n        size=\"flexible\"\r\n        tooltip={`${formatThousands(this.damage)} damage`}\r\n      >\r\n        <BoringSpellValueText spell={SPELLS.SOUL_STRIKE_TALENT}>\r\n          <ItemDamageDone amount={this.damage} /><br />\r\n          {shardsGained} <small>Shards generated</small>\r\n        </BoringSpellValueText>\r\n      </Statistic>\r\n    );\r\n  }\r\n}\r\n\r\nexport default SoulStrike;\r\n","import React from 'react';\r\n\r\nimport Analyzer from 'parser/core/Analyzer';\r\n\r\nimport SPELLS from 'common/SPELLS';\r\nimport { formatThousands } from 'common/format';\r\nimport STATISTIC_CATEGORY from 'interface/others/STATISTIC_CATEGORY';\r\nimport Statistic from 'interface/statistics/Statistic';\r\nimport BoringSpellValueText from 'interface/statistics/components/BoringSpellValueText';\r\nimport ItemDamageDone from 'interface/ItemDamageDone';\r\n\r\nimport PETS from '../pets/PETS';\r\nimport DemoPets from '../pets/DemoPets';\r\n\r\nclass SummonVilefiend extends Analyzer {\r\n  static dependencies = {\r\n    demoPets: DemoPets,\r\n  };\r\n\r\n  damage = 0;\r\n\r\n  constructor(...args) {\r\n    super(...args);\r\n    this.active = this.selectedCombatant.hasTalent(SPELLS.SUMMON_VILEFIEND_TALENT.id);\r\n  }\r\n\r\n  statistic() {\r\n    const damage = this.demoPets.getPetDamage(PETS.VILEFIEND.guid);\r\n    return (\r\n      <Statistic\r\n        category={STATISTIC_CATEGORY.TALENTS}\r\n        size=\"flexible\"\r\n        tooltip={`${formatThousands(damage)} damage`}\r\n      >\r\n        <BoringSpellValueText spell={SPELLS.SUMMON_VILEFIEND_TALENT}>\r\n          <ItemDamageDone amount={damage} />\r\n        </BoringSpellValueText>\r\n      </Statistic>\r\n    );\r\n  }\r\n}\r\n\r\nexport default SummonVilefiend;\r\n","import React from 'react';\r\n\r\nimport Analyzer from 'parser/core/Analyzer';\r\n\r\nimport SPELLS from 'common/SPELLS';\r\nimport { formatPercentage } from 'common/format';\r\nimport STATISTIC_CATEGORY from 'interface/others/STATISTIC_CATEGORY';\r\nimport Statistic from 'interface/statistics/Statistic';\r\nimport BoringSpellValueText from 'interface/statistics/components/BoringSpellValueText';\r\nimport { findMax, binomialPMF } from 'parser/shared/modules/helpers/Probability';\r\n\r\nimport SoulShardTracker from '../soulshards/SoulShardTracker';\r\n\r\nconst SHARDS_PER_HOG = 3;\r\nconst SC_PROC_CHANCE = 0.15;\r\n\r\nclass SoulConduit extends Analyzer {\r\n  static dependencies = {\r\n    soulShardTracker: SoulShardTracker,\r\n  };\r\n\r\n  constructor(...args) {\r\n    super(...args);\r\n    this.active = this.selectedCombatant.hasTalent(SPELLS.SOUL_CONDUIT_TALENT.id);\r\n  }\r\n\r\n  statistic() {\r\n    const generated = this.soulShardTracker.getGeneratedBySpell(SPELLS.SOUL_CONDUIT_SHARD_GEN.id);\r\n    const extraHogs = Math.floor(generated / SHARDS_PER_HOG);\r\n    const totalSpent = this.soulShardTracker.spent;\r\n    // find number of Shards we were MOST LIKELY to get in the fight\r\n    const { max } = findMax(totalSpent, (k, n) => binomialPMF(k, n, SC_PROC_CHANCE));\r\n    return (\r\n      <Statistic\r\n        category={STATISTIC_CATEGORY.TALENTS}\r\n        size=\"flexible\"\r\n        tooltip={(\r\n          <>\r\n            You gained {generated} Shards from this talent\r\n            {max > 0 ? <>, which is <strong>{formatPercentage(generated / max)}%</strong> of Shards you were most likely to get in this fight ({max} Shards).</> : ', while you were most likely to not get any Shards.'}\r\n            <br />\r\n            You would get {extraHogs} extra 3 shard Hands of Gul'dan with shards from this talent.\r\n          </>\r\n        )}\r\n      >\r\n        <BoringSpellValueText spell={SPELLS.SOUL_CONDUIT_TALENT}>\r\n          {generated} <small>Shards generated</small>\r\n        </BoringSpellValueText>\r\n      </Statistic>\r\n    );\r\n  }\r\n}\r\n\r\nexport default SoulConduit;\r\n","import React from 'react';\r\n\r\nimport Analyzer from 'parser/core/Analyzer';\r\n\r\nimport SPELLS from 'common/SPELLS';\r\nimport { formatThousands } from 'common/format';\r\n\r\nimport STATISTIC_CATEGORY from 'interface/others/STATISTIC_CATEGORY';\r\nimport Statistic from 'interface/statistics/Statistic';\r\nimport BoringSpellValueText from 'interface/statistics/components/BoringSpellValueText';\r\nimport ItemDamageDone from 'interface/ItemDamageDone';\r\n\r\nimport DemoPets from '../pets/DemoPets';\r\nimport PETS from '../pets/PETS';\r\nimport { isRandomPet } from '../pets/helpers';\r\n\r\nclass InnerDemons extends Analyzer {\r\n  get damage() {\r\n    const wildImps = this.demoPets.getPetDamage(PETS.WILD_IMP_INNER_DEMONS.guid);\r\n    const otherPetsSummonedByID = this.demoPets.timeline.filter(pet => isRandomPet(pet.guid) && pet.summonedBy === SPELLS.INNER_DEMONS_TALENT.id);\r\n    const other = otherPetsSummonedByID\r\n      .map(pet => this.demoPets.getPetDamage(pet.guid, pet.instance))\r\n      .reduce((total, current) => total + current, 0);\r\n    return wildImps + other;\r\n  }\r\n\r\n  static dependencies = {\r\n    demoPets: DemoPets,\r\n  };\r\n\r\n  constructor(...args) {\r\n    super(...args);\r\n    this.active = this.selectedCombatant.hasTalent(SPELLS.INNER_DEMONS_TALENT.id);\r\n  }\r\n\r\n  statistic() {\r\n    return (\r\n      <Statistic\r\n        category={STATISTIC_CATEGORY.TALENTS}\r\n        size=\"flexible\"\r\n        tooltip={(\r\n          <>\r\n            {formatThousands(this.damage)} damage<br />\r\n            Note that this only counts the direct damage from them, not Implosion damage (if used) from Wild Imps\r\n          </>\r\n        )}\r\n      >\r\n        <BoringSpellValueText spell={SPELLS.INNER_DEMONS_TALENT}>\r\n          <ItemDamageDone amount={this.damage} />\r\n        </BoringSpellValueText>\r\n      </Statistic>\r\n    );\r\n  }\r\n}\r\n\r\nexport default InnerDemons;\r\n","import React from 'react';\r\n\r\nimport Analyzer from 'parser/core/Analyzer';\r\nimport AbilityTracker from 'parser/shared/modules/AbilityTracker';\r\n\r\nimport SPELLS from 'common/SPELLS';\r\nimport { formatThousands } from 'common/format';\r\nimport STATISTIC_CATEGORY from 'interface/others/STATISTIC_CATEGORY';\r\nimport Statistic from 'interface/statistics/Statistic';\r\nimport BoringSpellValueText from 'interface/statistics/components/BoringSpellValueText';\r\nimport ItemDamageDone from 'interface/ItemDamageDone';\r\n\r\nimport DemoPets from '../pets/DemoPets';\r\nimport PETS from '../pets/PETS';\r\n\r\nclass GrimoireFelguard extends Analyzer {\r\n  static dependencies = {\r\n    abilityTracker: AbilityTracker,\r\n    demoPets: DemoPets,\r\n  };\r\n\r\n  constructor(...args) {\r\n    super(...args);\r\n    this.active = this.selectedCombatant.hasTalent(SPELLS.GRIMOIRE_FELGUARD_TALENT.id);\r\n  }\r\n\r\n  statistic() {\r\n    const damage = this.demoPets.getPetDamage(PETS.GRIMOIRE_FELGUARD.guid);\r\n    return (\r\n      <Statistic\r\n        category={STATISTIC_CATEGORY.TALENTS}\r\n        size=\"flexible\"\r\n        tooltip={`${formatThousands(damage)} damage`}\r\n      >\r\n        <BoringSpellValueText spell={SPELLS.GRIMOIRE_FELGUARD_TALENT}>\r\n          <ItemDamageDone amount={damage} />\r\n        </BoringSpellValueText>\r\n      </Statistic>\r\n    );\r\n  }\r\n}\r\n\r\nexport default GrimoireFelguard;\r\n","import React from 'react';\r\n\r\nimport Analyzer, { SELECTED_PLAYER } from 'parser/core/Analyzer';\r\nimport Events from 'parser/core/Events';\r\nimport calculateEffectiveDamage from 'parser/core/calculateEffectiveDamage';\r\n\r\nimport SPELLS from 'common/SPELLS';\r\nimport { formatThousands } from 'common/format';\r\nimport STATISTIC_CATEGORY from 'interface/others/STATISTIC_CATEGORY';\r\nimport Statistic from 'interface/statistics/Statistic';\r\nimport BoringSpellValueText from 'interface/statistics/components/BoringSpellValueText';\r\nimport ItemDamageDone from 'interface/ItemDamageDone';\r\n\r\nimport DemoPets from '../pets/DemoPets';\r\n\r\nconst BONUS_DAMAGE_PER_PET = 0.04;\r\nconst MAX_TRAVEL_TIME = 3000; // Shadow Bolt is the slowest, takes around 2 seconds to land from max distance, add a little more to account for target movement\r\nconst debug = false;\r\n\r\n/*\r\n  Sacrificed Souls:\r\n    Shadow Bolt and Demonbolt deal 5% additional damage per demon you have summoned.\r\n */\r\nclass SacrificedSouls extends Analyzer {\r\n  get totalBonusDamage() {\r\n    return this._shadowBoltDamage + this._demonboltDamage;\r\n  }\r\n\r\n  static dependencies = {\r\n    demoPets: DemoPets,\r\n  };\r\n  _shadowBoltDamage = 0;\r\n  _demonboltDamage = 0;\r\n  _queue = [];\r\n\r\n  constructor(...args) {\r\n    super(...args);\r\n    this.active = this.selectedCombatant.hasTalent(SPELLS.SACRIFICED_SOULS_TALENT.id);\r\n    this.addEventListener(Events.cast.by(SELECTED_PLAYER).spell([SPELLS.SHADOW_BOLT_DEMO, SPELLS.DEMONBOLT]), this.handleCast);\r\n    this.addEventListener(Events.damage.by(SELECTED_PLAYER).spell([SPELLS.SHADOW_BOLT_DEMO, SPELLS.DEMONBOLT]), this.handleDamage);\r\n  }\r\n\r\n  // essentially same snapshotting mechanic as in Destruction's Eradication\r\n  handleCast(event) {\r\n    const bonus = this.demoPets.getPetCount() * BONUS_DAMAGE_PER_PET;\r\n    this._queue.push({\r\n      timestamp: event.timestamp,\r\n      spellId: event.ability.guid,\r\n      targetID: event.targetID,\r\n      targetInstance: event.targetInstance,\r\n      bonus,\r\n    });\r\n    debug && this.log('Pushed a cast into queue', JSON.parse(JSON.stringify(this._queue)));\r\n  }\r\n\r\n  handleDamage(event) {\r\n    // filter out old casts if there are any\r\n    this._queue = this._queue.filter(cast => cast.timestamp > (event.timestamp - MAX_TRAVEL_TIME));\r\n    const castIndex = this._queue\r\n      .findIndex(cast => cast.targetID === event.targetID\r\n        && cast.targetInstance === event.targetInstance\r\n        && cast.spellId === event.ability.guid);\r\n    if (castIndex === -1) {\r\n      debug && this.error('Encountered damage event with no cast associated. Queue', JSON.parse(JSON.stringify(this._queue)), 'event', event);\r\n      return;\r\n    }\r\n    debug && this.log('Paired damage event', event, 'with queued cast', JSON.parse(JSON.stringify(this._queue[castIndex])));\r\n    const bonusDamage = calculateEffectiveDamage(event, this._queue[castIndex].bonus);\r\n    this._queue.splice(castIndex, 1);\r\n    if (event.ability.guid === SPELLS.SHADOW_BOLT_DEMO.id) {\r\n      this._shadowBoltDamage += bonusDamage;\r\n    } else {\r\n      this._demonboltDamage += bonusDamage;\r\n    }\r\n  }\r\n\r\n  statistic() {\r\n    const hasPS = this.selectedCombatant.hasTalent(SPELLS.POWER_SIPHON_TALENT.id);\r\n    return (\r\n      <Statistic\r\n        category={STATISTIC_CATEGORY.TALENTS}\r\n        size=\"flexible\"\r\n        tooltip={(\r\n          <>\r\n            {formatThousands(this.totalBonusDamage)} bonus damage<br />\r\n            Bonus Shadow Bolt damage: {formatThousands(this._shadowBoltDamage)} ({this.owner.formatItemDamageDone(this._shadowBoltDamage)})<br />\r\n            Bonus Demonbolt damage: {formatThousands(this._demonboltDamage)} ({this.owner.formatItemDamageDone(this._demonboltDamage)})\r\n            {hasPS && (\r\n              <>\r\n                <br /><br />* Since you have Power Siphon talent, it's highly likely that it messes up getting current pets at certain time because sometimes\r\n                the number of Imps we sacrifice in code doesn't agree with what happens in logs. Therefore, this value is most likely a little wrong.\r\n              </>\r\n            )}\r\n          </>\r\n        )}\r\n      >\r\n        <BoringSpellValueText spell={SPELLS.SACRIFICED_SOULS_TALENT}>\r\n          <ItemDamageDone amount={this.totalBonusDamage} />\r\n        </BoringSpellValueText>\r\n      </Statistic>\r\n    );\r\n  }\r\n}\r\n\r\nexport default SacrificedSouls;\r\n","import React from 'react';\r\n\r\nimport Analyzer, { SELECTED_PLAYER, SELECTED_PLAYER_PET } from 'parser/core/Analyzer';\r\nimport Events from 'parser/core/Events';\r\nimport calculateEffectiveDamage from 'parser/core/calculateEffectiveDamage';\r\n\r\nimport { formatThousands } from 'common/format';\r\nimport SPELLS from 'common/SPELLS';\r\n\r\nimport STATISTIC_CATEGORY from 'interface/others/STATISTIC_CATEGORY';\r\nimport Statistic from 'interface/statistics/Statistic';\r\nimport BoringSpellValueText from 'interface/statistics/components/BoringSpellValueText';\r\nimport ItemDamageDone from 'interface/ItemDamageDone';\r\n\r\nimport DemoPets from '../pets/DemoPets';\r\nimport { isWildImp } from '../pets/helpers';\r\n\r\nconst DAMAGE_BONUS_PER_ENERGY = 0.005; // 0.5% per point of energy\r\nconst debug = false;\r\n\r\nclass DemonicConsumption extends Analyzer {\r\n  static dependencies = {\r\n    demoPets: DemoPets,\r\n  };\r\n\r\n  _currentBonus = 0;\r\n  damage = 0;\r\n\r\n  constructor(...args) {\r\n    super(...args);\r\n    this.active = this.selectedCombatant.hasTalent(SPELLS.DEMONIC_CONSUMPTION_TALENT.id);\r\n    this.addEventListener(Events.cast.by(SELECTED_PLAYER).spell(SPELLS.SUMMON_DEMONIC_TYRANT), this.handleCast);\r\n    this.addEventListener(Events.damage.by(SELECTED_PLAYER_PET).spell(SPELLS.DEMONIC_TYRANT_DAMAGE), this.handleDemonicTyrantDamage);\r\n  }\r\n\r\n  handleCast() {\r\n    const imps = this.demoPets.currentPets.filter(pet => isWildImp(pet.guid) && !pet.shouldImplode);\r\n    debug && this.log('Imps on Tyrant cast', JSON.parse(JSON.stringify(imps)));\r\n    this._currentBonus = imps.map(imp => imp.currentEnergy).reduce((total, current) => total + current, 0) * DAMAGE_BONUS_PER_ENERGY;\r\n    debug && this.log('Current bonus: ', this._currentBonus);\r\n  }\r\n\r\n  handleDemonicTyrantDamage(event) {\r\n    this.damage += calculateEffectiveDamage(event, this._currentBonus);\r\n  }\r\n\r\n  statistic() {\r\n    return (\r\n      <Statistic\r\n        category={STATISTIC_CATEGORY.TALENTS}\r\n        size=\"flexible\"\r\n        tooltip={`${formatThousands(this.damage)} damage`}\r\n      >\r\n        <BoringSpellValueText spell={SPELLS.DEMONIC_CONSUMPTION_TALENT}>\r\n          <ItemDamageDone amount={this.damage} />\r\n        </BoringSpellValueText>\r\n      </Statistic>\r\n    );\r\n  }\r\n}\r\n\r\nexport default DemonicConsumption;\r\n","import React from 'react';\r\n\r\nimport Analyzer from 'parser/core/Analyzer';\r\n\r\nimport SPELLS from 'common/SPELLS';\r\nimport { formatThousands } from 'common/format';\r\n\r\nimport STATISTIC_CATEGORY from 'interface/others/STATISTIC_CATEGORY';\r\nimport Statistic from 'interface/statistics/Statistic';\r\nimport BoringSpellValueText from 'interface/statistics/components/BoringSpellValueText';\r\nimport ItemDamageDone from 'interface/ItemDamageDone';\r\n\r\nimport DemoPets from '../pets/DemoPets';\r\n\r\nclass NetherPortal extends Analyzer {\r\n  get damage() {\r\n    const petsSummonedByNP = this.demoPets.timeline.filter(pet => pet.summonedBy === SPELLS.NETHER_PORTAL_TALENT.id);\r\n    return petsSummonedByNP\r\n      .map(pet => this.demoPets.getPetDamage(pet.guid, pet.instance))\r\n      .reduce((total, current) => total + current, 0);\r\n  }\r\n\r\n  static dependencies = {\r\n    demoPets: DemoPets,\r\n  };\r\n\r\n  constructor(...args) {\r\n    super(...args);\r\n    this.active = this.selectedCombatant.hasTalent(SPELLS.NETHER_PORTAL_TALENT.id);\r\n  }\r\n\r\n  statistic() {\r\n    return (\r\n      <Statistic\r\n        category={STATISTIC_CATEGORY.TALENTS}\r\n        size=\"flexible\"\r\n        tooltip={`${formatThousands(this.damage)} damage`}\r\n      >\r\n        <BoringSpellValueText spell={SPELLS.NETHER_PORTAL_TALENT}>\r\n          <ItemDamageDone amount={this.damage} />\r\n        </BoringSpellValueText>\r\n      </Statistic>\r\n    );\r\n  }\r\n}\r\n\r\nexport default NetherPortal;\r\n","import React from 'react';\r\n\r\nimport Analyzer from 'parser/core/Analyzer';\r\n\r\nimport StatisticsListBox, { STATISTIC_ORDER } from 'interface/others/StatisticsListBox';\r\n\r\nimport Dreadlash from './Dreadlash';\r\nimport DemonicStrength from './DemonicStrength';\r\nimport BilescourgeBombers from './BilescourgeBombers';\r\nimport DemonicCalling from './DemonicCalling';\r\nimport PowerSiphon from './PowerSiphon';\r\nimport Doom from './Doom';\r\nimport FromTheShadows from './FromTheShadows';\r\nimport SoulStrike from './SoulStrike';\r\nimport SummonVilefiend from './SummonVilefiend';\r\nimport SoulConduit from './SoulConduit';\r\nimport InnerDemons from './InnerDemons';\r\nimport GrimoireFelguard from './GrimoireFelguard';\r\nimport SacrificedSouls from './SacrificedSouls';\r\nimport DemonicConsumption from './DemonicConsumption';\r\nimport NetherPortal from './NetherPortal';\r\n\r\nclass TalentStatisticBox extends Analyzer {\r\n  static dependencies = {\r\n    dreadlash: Dreadlash,\r\n    demonicStrength: DemonicStrength,\r\n    bilescourgeBombers: BilescourgeBombers,\r\n    demonicCalling: DemonicCalling,\r\n    powerSiphon: PowerSiphon,\r\n    doom: Doom,\r\n    fromTheShadows: FromTheShadows,\r\n    soulStrike: SoulStrike,\r\n    summonVilefiend: SummonVilefiend,\r\n    soulConduit: SoulConduit,\r\n    innerDemons: InnerDemons,\r\n    grimoireFelguard: GrimoireFelguard,\r\n    sacrificedSouls: SacrificedSouls,\r\n    demonicConsumption: DemonicConsumption,\r\n    netherPortal: NetherPortal,\r\n  };\r\n\r\n  constructor(...args) {\r\n    super(...args);\r\n    // active if at least one module is active and has subStatistic()\r\n    this.active = Object.keys(this.constructor.dependencies)\r\n      .filter(name => this[name].subStatistic)\r\n      .map(name => this[name].active)\r\n      .includes(true);\r\n  }\r\n\r\n  statistic() {\r\n    return (\r\n      <StatisticsListBox\r\n        position={STATISTIC_ORDER.CORE(4)}\r\n        title=\"Talents\"\r\n      >\r\n        {\r\n          Object.keys(this.constructor.dependencies)\r\n            .map(name => this[name])\r\n            .filter(module => module.active && module.subStatistic)\r\n            .map(module => module.subStatistic())\r\n        }\r\n      </StatisticsListBox>\r\n    );\r\n  }\r\n}\r\n\r\nexport default TalentStatisticBox;\r\n","import CoreCombatLogParser from 'parser/core/CombatLogParser';\r\nimport ArcaneTorrent from 'parser/shared/modules/racials/bloodelf/ArcaneTorrent';\r\n\r\nimport Abilities from './modules/features/Abilities';\r\nimport AlwaysBeCasting from './modules/features/AlwaysBeCasting';\r\nimport CooldownThroughputTracker from './modules/features/CooldownThroughputTracker';\r\nimport Felstorm from './modules/features/Felstorm';\r\nimport Checklist from './modules/features/Checklist/Module';\r\nimport SummonDemonicTyrant from './modules/features/SummonDemonicTyrant';\r\nimport LegionStrike from './modules/features/LegionStrike';\r\n\r\nimport SoulShardTracker from './modules/soulshards/SoulShardTracker';\r\nimport SoulShardDetails from './modules/soulshards/SoulShardDetails';\r\n\r\nimport DemoPets from './modules/pets/DemoPets';\r\nimport PetDamageHandler from './modules/pets/DemoPets/PetDamageHandler';\r\nimport PetSummonHandler from './modules/pets/DemoPets/PetSummonHandler';\r\nimport WildImpEnergyHandler from './modules/pets/DemoPets/WildImpEnergyHandler';\r\nimport PowerSiphonHandler from './modules/pets/DemoPets/PowerSiphonHandler';\r\nimport DemonicTyrantHandler from './modules/pets/DemoPets/DemonicTyrantHandler';\r\nimport ImplosionHandler from './modules/pets/DemoPets/ImplosionHandler';\r\nimport PetTimelineTab from './modules/pets/PetTimelineTab';\r\nimport PrepullPetNormalizer from './modules/pets/normalizers/PrepullPetNormalizer';\r\nimport SummonOrderNormalizer from './modules/pets/normalizers/SummonOrderNormalizer';\r\n\r\nimport PowerSiphonNormalizer from './modules/talents/normalizers/PowerSiphonNormalizer';\r\n\r\nimport TalentStatisticBox from './modules/talents';\r\nimport Dreadlash from './modules/talents/Dreadlash';\r\nimport DemonicStrength from './modules/talents/DemonicStrength';\r\nimport BilescourgeBombers from './modules/talents/BilescourgeBombers';\r\nimport DemonicCalling from './modules/talents/DemonicCalling';\r\nimport PowerSiphon from './modules/talents/PowerSiphon';\r\nimport Doom from './modules/talents/Doom';\r\nimport FromTheShadows from './modules/talents/FromTheShadows';\r\nimport SoulStrike from './modules/talents/SoulStrike';\r\nimport SummonVilefiend from './modules/talents/SummonVilefiend';\r\nimport SoulConduit from './modules/talents/SoulConduit';\r\nimport InnerDemons from './modules/talents/InnerDemons';\r\nimport GrimoireFelguard from './modules/talents/GrimoireFelguard';\r\nimport SacrificedSouls from './modules/talents/SacrificedSouls';\r\nimport DemonicConsumption from './modules/talents/DemonicConsumption';\r\nimport NetherPortal from './modules/talents/NetherPortal';\r\n\r\nclass CombatLogParser extends CoreCombatLogParser {\r\n  static specModules = {\r\n    // Features\r\n    abilities: Abilities,\r\n    alwaysBeCasting: AlwaysBeCasting,\r\n    cooldownThroughputTracker: CooldownThroughputTracker,\r\n    felstorm: Felstorm,\r\n    checklist: Checklist,\r\n    summonDemonicTyrant: SummonDemonicTyrant,\r\n    legionStrike: LegionStrike,\r\n\r\n    // Core\r\n    soulShardTracker: SoulShardTracker,\r\n    soulShardDetails: SoulShardDetails,\r\n\r\n    // Pets\r\n    demoPets: DemoPets,\r\n    petDamageHandler: PetDamageHandler,\r\n    petSummonHandler: PetSummonHandler,\r\n    wildImpEnergyHandler: WildImpEnergyHandler,\r\n    powerSiphonHandler: PowerSiphonHandler,\r\n    demonicTyrantHandler: DemonicTyrantHandler,\r\n    implosionHandler: ImplosionHandler,\r\n    petTimelineTab: PetTimelineTab,\r\n    summonOrderNormalizer: SummonOrderNormalizer,\r\n    prepullPetNormalizer: PrepullPetNormalizer,\r\n\r\n    // Normalizers\r\n    powerSiphonNormalizer: PowerSiphonNormalizer,\r\n\r\n    // Talents\r\n    talents: TalentStatisticBox,\r\n    dreadlash: Dreadlash,\r\n    demonicStrength: DemonicStrength,\r\n    bilescourgeBombers: BilescourgeBombers,\r\n    demonicCalling: DemonicCalling,\r\n    soulConduit: SoulConduit,\r\n    innerDemons: InnerDemons,\r\n    fromTheShadows: FromTheShadows,\r\n    soulStrike: SoulStrike,\r\n    summonVilefiend: SummonVilefiend,\r\n    powerSiphon: PowerSiphon,\r\n    doom: Doom,\r\n    grimoireFelguard: GrimoireFelguard,\r\n    sacrificedSouls: SacrificedSouls,\r\n    demonicConsumption: DemonicConsumption,\r\n    netherPortal: NetherPortal,\r\n\r\n    // There's no throughput benefit from casting Arcane Torrent on cooldown\r\n    arcaneTorrent: [ArcaneTorrent, { castEfficiency: null }] as const,\r\n  };\r\n}\r\n\r\nexport default CombatLogParser;\r\n","/**\r\n * A simple component that shows the spell value in the most plain way possible.\r\n * Use this only as the very last resort.\r\n */\r\nimport React from 'react';\r\n\r\nimport SpellIcon from 'common/SpellIcon';\r\nimport SpellLink from 'common/SpellLink';\r\nimport Spell from 'common/SPELLS/Spell';\r\n\r\ntype Props = {\r\n  spell: Spell;\r\n  children: React.ReactNode;\r\n  className?: string;\r\n}\r\n\r\nconst BoringSpellValueText = ({ spell, children, className }: Props) => (\r\n  <div className={`pad boring-text ${className || ''}`}>\r\n    <label>\r\n      <SpellIcon id={spell.id} /> <SpellLink id={spell.id} icon={false} />\r\n    </label>\r\n    <div className=\"value\">\r\n      {children}\r\n    </div>\r\n  </div>\r\n);\r\n\r\nexport default BoringSpellValueText;\r\n","export default function calculateEffectiveDamage(event, increase) {\r\n  const raw = (event.amount || 0) + (event.absorbed || 0);\r\n  return raw - (raw / (1 + increase));\r\n}\r\n","import React from 'react';\r\n\r\n// https://thenounproject.com/term/duration/370713/\r\n// duration by Bohdan Burmich from the Noun Project\r\nconst Icon = ({ ...other }) => (\r\n  <svg xmlns=\"http://www.w3.org/2000/svg\" viewBox=\"10 10 80 80\" className=\"icon\" {...other}>\r\n    <path d=\"M50,86.4865c17.4361,0,31.6216-14.1855,31.6216-31.6216c0-16.6168-12.8865-30.2714-29.1892-31.5189v-4.9677h7.2973v-4.8649  H40.2703v4.8649h7.2973v4.9677c-16.3027,1.2475-29.1892,14.902-29.1892,31.5189C18.3784,72.3009,32.5639,86.4865,50,86.4865z M52.4324,28.2236c3.1101,0.2817,6.0664,1.0982,8.7798,2.356l-8.7798,15.2073V28.2236z M47.5676,28.2236v26.6412 c0,1.1008,0.7393,2.0647,1.8029,2.3497c0.209,0.0561,0.4205,0.0827,0.6295,0.0827c0.8533,0,1.6642-0.4504,2.1065-1.2162 l13.3146-23.0616c6.8507,4.8503,11.3357,12.8315,11.3357,21.8454c0,14.7537-12.0031,26.7567-26.7568,26.7567 s-26.7568-12.003-26.7568-26.7567C23.2432,40.9315,33.9501,29.4573,47.5676,28.2236z\" />\r\n  </svg>\r\n);\r\n\r\nexport default Icon;\r\n","import Analyzer, { SELECTED_PLAYER, Options } from 'parser/core/Analyzer';\r\nimport EventEmitter from 'parser/core/modules/EventEmitter';\r\nimport Events, { EventType, ClassResources, EnergizeEvent, CastEvent, HealEvent, SpendResourceEvent } from 'parser/core/Events';\r\nimport { Resource } from 'game/RESOURCE_TYPES';\r\n\r\nexport type BuilderObj = {\r\n  generated: number,\r\n  wasted: number,\r\n  casts: number,\r\n}\r\n\r\nexport type SpenderObj = {\r\n  spent: number,\r\n  spentByCast: number[],\r\n  casts: number,\r\n}\r\n\r\ntype ResourceUpdate = {\r\n  timestamp: number | undefined,\r\n  current: number,\r\n  waste: number,\r\n  generated: number,\r\n  used: number,\r\n}\r\n\r\n/**\r\n * This is an 'abstract' implementation of a framework for tracking resource generating/spending.\r\n * Extend it by following the instructions in the TODO comments below\r\n */\r\nclass ResourceTracker extends Analyzer {\r\n  static dependencies = {\r\n    eventEmitter: EventEmitter,\r\n    // Optional dependency for the `resourceCost` prop of events\r\n    // spellResourceCost: SpellResourceCost,\r\n  };\r\n\r\n  protected eventEmitter!: EventEmitter;\r\n\r\n  current = 0;\r\n  resourceUpdates: ResourceUpdate[] = [];\r\n\r\n  // stores resource gained/spent/wasted by ability ID\r\n  buildersObj: {[index: number]: BuilderObj} = {};\r\n  spendersObj: {[index: number]: SpenderObj} = {};\r\n\r\n  // TODO set this to the resource you wish to track constructor.. see the appropriate objects in game/RESOURCE_TYPES\r\n  resource!: Resource;\r\n\r\n  // TODO a classes 'main' resource passes the max along with events, but for other resources this may need to be defined\r\n  maxResource!: number;\r\n\r\n  constructor(options: Options){\r\n    super(options);\r\n    this.addEventListener(Events.energize.to(SELECTED_PLAYER), this.onEnergize);\r\n    this.addEventListener(Events.cast.by(SELECTED_PLAYER), this.onCast);\r\n  }\r\n\r\n  // FIXME implement natural regen\r\n  // TODO if the tracked resource naturally regenerates (like Energy), set this to true and set the parameters of the regeneration in the below fields\r\n  // naturallyRegenerates = false;\r\n  // baseRegenRate; // TODO resource's base regeneration rate in points per second\r\n  // isRegenHasted; // TODO iff true, regeneration rate will be scaled with haste\r\n\r\n  // TODO if you wish an ability to show in results even if it wasn't used, add it using these functions constructor\r\n  initBuilderAbility(spellId: number) {\r\n    this.buildersObj[spellId] = { generated: 0, wasted: 0, casts: 0 };\r\n  }\r\n  initSpenderAbility(spellId: number) {\r\n    this.spendersObj[spellId] = { spent: 0, spentByCast: [], casts: 0 };\r\n  }\r\n\r\n  // BUILDERS - Handled on energize, using the 'resourceChange' field\r\n  onEnergize(event: EnergizeEvent) {\r\n    const spellId = event.ability.guid;\r\n\r\n    if(event.resourceChangeType !== this.resource.id) {\r\n        return;\r\n    }\r\n\r\n    const waste = event.waste;\r\n    const gain = event.resourceChange - waste;\r\n    this._applyBuilder(spellId, gain, waste, this.getResource(event), event.timestamp);\r\n  }\r\n\r\n  // FIXME Track resource drains too, so that the 'current' value can be more accurate\r\n\r\n  // TODO if a resource gain isn't showing as an energize in events, handle it manually by calling this\r\n  /**\r\n   * FIXME solve with a normalizer instead?\r\n   * Applies an energize of the tracked resource type.\r\n   * @param {number} spellId - The spellId to attribute the resource gain to\r\n   * @param {number} amount - The raw amount of resources to gain\r\n   */\r\n  processInvisibleEnergize(spellId: number, amount: number) {\r\n    const maxGain = this.maxResource !== undefined ? this.maxResource - this.current : amount;\r\n    const gain = Math.min(amount, maxGain);\r\n    const waste = Math.max(amount - maxGain, 0);\r\n    this._applyBuilder(spellId, gain, waste);\r\n  }\r\n\r\n  _applyBuilder(spellId: number, gain: number, waste: number,  resource?: ClassResources, timestamp?: number) {\r\n    if (!this.buildersObj[spellId]) {\r\n        this.initBuilderAbility(spellId);\r\n    }\r\n\r\n    this.buildersObj[spellId].wasted += waste;\r\n    this.buildersObj[spellId].generated += gain;\r\n    this.buildersObj[spellId].casts += 1;\r\n\r\n    // resource.amount for an energize is the amount AFTER the energize\r\n    if (resource !== null && resource !== undefined && resource.amount !== undefined) {\r\n      this.current = resource.amount;\r\n      if (resource.max !== undefined) {\r\n        this.maxResource = resource.max; // track changes in max resource, which can happen due to procs / casts\r\n      }\r\n    } else {\r\n      this.current += gain;\r\n    }\r\n\r\n    this.resourceUpdates.push({\r\n      timestamp: timestamp,\r\n      current: this.current,\r\n      waste: waste,\r\n      generated: gain,\r\n      used: 0,\r\n    });\r\n  }\r\n\r\n  // SPENDERS - Handled on cast, using the 'classResources' field\r\n  onCast(event: CastEvent) {\r\n    const spellId = event.ability.guid;\r\n\r\n    if(!this.shouldProcessCastEvent(event)) {\r\n        return;\r\n    }\r\n    const eventResource = this.getResource(event);\r\n\r\n    if(!eventResource){\r\n      return;\r\n    }\r\n\r\n    if (eventResource.max) {\r\n      this.maxResource = eventResource.max; // track changes in max resource, which can happen due to procs / casts\r\n    }\r\n    const cost = this.getReducedCost(event);\r\n\r\n    if (!this.spendersObj[spellId]) {\r\n      this.initSpenderAbility(spellId);\r\n    }\r\n\r\n    if (!cost || cost === 0) {\r\n      return;\r\n    }\r\n\r\n    this.spendersObj[spellId].casts += 1;\r\n    this.spendersObj[spellId].spentByCast.push(cost);\r\n    if(cost > 0) {\r\n      this.spendersObj[spellId].spent += cost;\r\n    }\r\n\r\n    //Re-sync current amount, to update not-tracked gains.\r\n    this.current = eventResource.amount - cost;\r\n\r\n    this.resourceUpdates.push({\r\n      timestamp: event.timestamp,\r\n      current: this.current,\r\n      waste: 0,\r\n      generated: 0,\r\n      used: eventResource.amount,\r\n    });\r\n\r\n    this.triggerSpendEvent(cost, event);\r\n  }\r\n\r\n  // TODO if your spec has an ability cost reduction that doesn't show in events, handle it manually by overriding here. Or extend SpellResourceCost and apply the discount there.\r\n  getReducedCost(event: CastEvent) {\r\n    if (event.resourceCost && event.resourceCost[this.resource.id] !== undefined) {\r\n      return event.resourceCost[this.resource.id];\r\n    }\r\n    return this.getResource(event)?.cost;\r\n  }\r\n\r\n  getResource(event: CastEvent | HealEvent | EnergizeEvent ) {\r\n    if(!event.classResources) {\r\n      return undefined;\r\n    } else {\r\n      return event.classResources.find(r => r.type === this.resource.id);\r\n    }\r\n  }  \r\n\r\n  triggerSpendEvent(spent: number, event: CastEvent) {\r\n\r\n    const fabricatedEvent: SpendResourceEvent = {\r\n      type: EventType.SpendResource,\r\n      timestamp: event.timestamp,\r\n      sourceID: event.sourceID,\r\n      targetID: event.targetID,\r\n      resourceChange: spent,\r\n      resourceChangeType: this.resource.id,\r\n      ability: event.ability,\r\n      __fabricated: true,\r\n    };\r\n\r\n    this.eventEmitter.fabricateEvent(fabricatedEvent, event);\r\n  }\r\n\r\n  shouldProcessCastEvent(event: CastEvent) {\r\n    return Boolean(this.getResource(event));\r\n  }\r\n\r\n  getGeneratedBySpell(spellId: number) {\r\n    return (this.buildersObj[spellId] && this.buildersObj[spellId].generated) || 0;\r\n  }\r\n\r\n  getWastedBySpell(spellId: number) {\r\n    return (this.buildersObj[spellId] && this.buildersObj[spellId].wasted) || 0;\r\n  }\r\n\r\n  getBuilderCastsBySpell(spellId: number) {\r\n    return (this.buildersObj[spellId] && this.buildersObj[spellId].casts) || 0;\r\n  }\r\n\r\n  get generated() {\r\n    return Object.values(this.buildersObj).reduce((acc, spell) => acc + spell.generated, 0);\r\n  }\r\n\r\n  get wasted() {\r\n    return Object.values(this.buildersObj).reduce((acc, spell) => acc + spell.wasted, 0);\r\n  }\r\n\r\n  get spent() {\r\n    return Object.values(this.spendersObj).reduce((acc, spell) => acc + spell.spent, 0);\r\n  }\r\n\r\n  get spendersCasts() {\r\n    return Object.values(this.spendersObj).reduce((acc, spell) => acc + spell.casts, 0);\r\n  }\r\n}\r\n\r\nexport default ResourceTracker;\r\n","import React from 'react';\r\n\r\nimport SpellLink from 'common/SpellLink';\r\nimport { formatPercentage } from 'common/format';\r\nimport { TooltipElement } from 'common/Tooltip';\r\n\r\nimport ResourceTracker, { BuilderObj, SpenderObj } from './ResourceTracker';\r\n\r\ninterface Props {\r\n  tracker: ResourceTracker,\r\n  showSpenders: boolean,\r\n}\r\n\r\nclass ResourceBreakdown extends React.Component<Props> {\r\n\r\n  prepareGenerated(buildersObj: {[index: number]: BuilderObj}) {\r\n    return Object.keys(buildersObj)\r\n      .map(abilityId => ({\r\n        abilityId: Number(abilityId),\r\n        generated: buildersObj[Number(abilityId)].generated,\r\n        wasted: buildersObj[Number(abilityId)].wasted,\r\n      }))\r\n      .sort((a, b) => b.generated - a.generated)\r\n      .filter(ability => ability.generated > 0 || ability.wasted);\r\n  }\r\n\r\n  prepareSpent(spendersObj: {[index: number]: SpenderObj}) {\r\n    return Object.keys(spendersObj)\r\n      .map(abilityId => ({\r\n        abilityId: Number(abilityId),\r\n        spent: spendersObj[Number(abilityId)].spent,\r\n        casts: spendersObj[Number(abilityId)].casts,\r\n      }))\r\n      .sort((a, b) => b.spent - a.spent)\r\n      .filter(ability => ability.spent > 0);\r\n  }\r\n\r\n  render() {\r\n    const { tracker, showSpenders } = this.props;\r\n    const resourceName = tracker.resource.name;\r\n\r\n    const generated = this.prepareGenerated(tracker.buildersObj);\r\n    const spent = this.prepareSpent(tracker.spendersObj);\r\n\r\n    let totalGenerated = tracker.generated;\r\n    let totalWasted = tracker.wasted;\r\n\r\n    let totalSpent = tracker.spent;\r\n    let totalCasts = tracker.spendersCasts;\r\n\r\n    // looks wrong but totals are only for the purpose of percentage, and if nothing was wasted, then 0/1 gives correct result 0% wasted, if it's not 0 it retains its original value\r\n    totalGenerated = (totalGenerated === 0) ? 1 : totalGenerated;\r\n    totalWasted = (totalWasted === 0) ? 1 : totalWasted;\r\n\r\n    totalSpent = (totalSpent === 0) ? 1 : totalSpent;\r\n    totalCasts = (totalCasts === 0) ? 1 : totalCasts;\r\n\r\n    return (\r\n      <>\r\n        <table className=\"data-table\">\r\n          <thead>\r\n            <tr>\r\n              <th>Ability</th>\r\n              <th colSpan={2}>{resourceName} generated</th>\r\n              <th colSpan={2}><TooltipElement content=\"This is the amount of resources that were generated while you were already at cap.\">{resourceName} wasted</TooltipElement></th>\r\n            </tr>\r\n          </thead>\r\n          <tbody>\r\n            {generated && generated\r\n              .map(ability => (\r\n                <tr key={ability.abilityId}>\r\n                  <td style={{ width: '30%' }}>\r\n                    <SpellLink id={ability.abilityId} />\r\n                  </td>\r\n                  <td style={{ width: 50, paddingRight: 5, textAlign: 'center' }}>\r\n                    <TooltipElement content={`${formatPercentage(ability.generated / totalGenerated)} %`}>{ability.generated.toFixed(0)}</TooltipElement>\r\n                  </td>\r\n                  <td style={{ width: '40%' }}>\r\n                    <div\r\n                      className=\"performance-bar\"\r\n                      style={{ width: `${(ability.generated / totalGenerated) * 100}%` }}\r\n                    />\r\n                  </td>\r\n                  <td style={{ width: 50, paddingRight: 5, textAlign: 'center' }}>\r\n                    <TooltipElement content={`${formatPercentage(ability.wasted / totalWasted)} %`}>{ability.wasted.toFixed(0)}</TooltipElement>\r\n                  </td>\r\n                  <td style={{ width: '30%' }}>\r\n                    <div\r\n                      className=\"performance-bar\"\r\n                      style={{ width: `${(ability.wasted / totalWasted) * 100}%` }}\r\n                    />\r\n                  </td>\r\n                </tr>\r\n              ))}\r\n          </tbody>\r\n        </table>\r\n        {showSpenders && (\r\n          <table className=\"data-table\">\r\n            <thead>\r\n              <tr>\r\n                <th>Ability</th>\r\n                <th colSpan={2}>{resourceName} spent</th>\r\n                <th colSpan={2}>Casts</th>\r\n              </tr>\r\n            </thead>\r\n            <tbody>\r\n              {spent && spent\r\n                .map(ability => (\r\n                  <tr key={ability.abilityId}>\r\n                    <td style={{ width: '30%' }}>\r\n                      <SpellLink id={ability.abilityId} />\r\n                    </td>\r\n                    <td style={{ width: 50, paddingRight: 5, textAlign: 'center' }}>\r\n                      <TooltipElement content={`${formatPercentage(ability.spent / totalSpent)} %`}>{ability.spent.toFixed(0)}</TooltipElement>\r\n                    </td>\r\n                    <td style={{ width: '40%' }}>\r\n                      <div\r\n                        className=\"performance-bar\"\r\n                        style={{ width: `${(ability.spent / totalSpent) * 100}%` }}\r\n                      />\r\n                    </td>\r\n                    <td style={{ width: 50, paddingRight: 5, textAlign: 'center' }}>\r\n                      <TooltipElement content={`${formatPercentage(ability.casts / totalCasts)} %`}>{ability.casts}</TooltipElement>\r\n                    </td>\r\n                    <td style={{ width: '30%' }}>\r\n                      <div\r\n                        className=\"performance-bar\"\r\n                        style={{ width: `${(ability.casts / totalCasts) * 100}%` }}\r\n                      />\r\n                    </td>\r\n                  </tr>\r\n                ))}\r\n            </tbody>\r\n          </table>\r\n        )}\r\n      </>\r\n    );\r\n  }\r\n}\r\n\r\nexport default ResourceBreakdown;\r\n","import React from 'react';\r\nimport PropTypes from 'prop-types';\r\n\r\nimport { TooltipElement } from 'common/Tooltip';\r\n\r\nimport './StatisticBox.css';\r\nimport STATISTIC_CATEGORY from './STATISTIC_CATEGORY';\r\n\r\nexport { default as STATISTIC_ORDER } from './STATISTIC_ORDER';\r\n\r\n/**\r\n * @deprecated Use `interface/statistic/Statistic` instead.\r\n */\r\nconst StatisticsListBox = ({ title, tooltip, children, bodyStyle, ...others }) => {\r\n  delete others.category;\r\n  delete others.position;\r\n  return (\r\n    <div className=\"col-lg-3 col-md-4 col-sm-6 col-xs-12\">\r\n      <div className=\"panel statistic statistic-box statistic-box-list\" {...others}>\r\n        {title && (\r\n          <div className=\"panel-heading\">\r\n            <h2>{tooltip ? <TooltipElement content={tooltip}>{title}</TooltipElement> : title}</h2>\r\n          </div>\r\n        )}\r\n        <div className=\"panel-body items\" style={bodyStyle}>\r\n          {children}\r\n        </div>\r\n      </div>\r\n    </div>\r\n  );\r\n};\r\nStatisticsListBox.propTypes = {\r\n  title: PropTypes.node,\r\n  children: PropTypes.node.isRequired,\r\n  tooltip: PropTypes.node,\r\n  bodyStyle: PropTypes.object,\r\n  category: PropTypes.string,\r\n  position: PropTypes.number,\r\n};\r\nStatisticsListBox.defaultProps = {\r\n  category: STATISTIC_CATEGORY.GENERAL,\r\n};\r\n\r\nexport default StatisticsListBox;\r\n","import React from 'react';\r\nimport PropTypes from 'prop-types';\r\nimport { AutoSizer } from 'react-virtualized';\r\nimport BaseChart from 'interface/others/BaseChart';\r\n\r\nclass OneVariableBinomialChart extends React.Component {\r\n  static propTypes = {\r\n    probabilities: PropTypes.arrayOf(\r\n      PropTypes.shape({\r\n        x: PropTypes.number.isRequired,\r\n        y: PropTypes.number.isRequired,\r\n      }),\r\n    ).isRequired,\r\n    actualEvent: PropTypes.shape({\r\n      x: PropTypes.number.isRequired,\r\n      y: PropTypes.number.isRequired,\r\n    }).isRequired,\r\n    xAxis: PropTypes.shape({\r\n      title: PropTypes.string.isRequired,\r\n      tickFormat: PropTypes.string.isRequired,\r\n    }).isRequired,\r\n    yAxis: PropTypes.shape({\r\n      title: PropTypes.string.isRequired,\r\n    }),\r\n    yDomain: PropTypes.arrayOf(PropTypes.number),\r\n    tooltip: PropTypes.string.isRequired,\r\n  };\r\n\r\n  state = {\r\n    hover: null,\r\n  };\r\n\r\n  render() {\r\n    const {\r\n      probabilities,\r\n      actualEvent,\r\n      xAxis,\r\n      yAxis,\r\n      yDomain,\r\n      tooltip,\r\n    } = this.props;\r\n\r\n    const data = {\r\n      probabilities,\r\n      actual: actualEvent,\r\n    };\r\n\r\n    const spec = {\r\n      encoding: {\r\n        x: {\r\n          field: 'x',\r\n          type: 'quantitative',\r\n          title: xAxis.title,\r\n          axis: {\r\n            grid: false,\r\n            format: xAxis.tickFormat,\r\n          },\r\n        },\r\n        y: {\r\n          field: 'y',\r\n          type: 'quantitative',\r\n          title: yAxis.title,\r\n          axis: {\r\n            grid: false,\r\n            format: '.0%',\r\n          },\r\n          scale: {\r\n            domain: yDomain,\r\n          },\r\n        },\r\n      },\r\n      layer: [\r\n        {\r\n          data: {\r\n            name: 'probabilities',\r\n          },\r\n          mark: {\r\n            type: 'area',\r\n            color: 'rgba(250, 183, 0, 0.15)',\r\n            line: {\r\n              color: '#fab700',\r\n              strokeWidth: 1,\r\n            },\r\n          },\r\n        },\r\n        {\r\n          data: {\r\n            name: 'actual',\r\n          },\r\n          mark: {\r\n            type: 'point',\r\n            filled: true,\r\n            color: '#00ff96',\r\n            size: 60,\r\n          },\r\n          encoding: {\r\n            tooltip: [\r\n              { field: 'x', title: tooltip },\r\n            ],\r\n          },\r\n        },\r\n      ],\r\n    };\r\n\r\n\r\n    return (\r\n      <AutoSizer disableHeight>\r\n        {({width}) => (\r\n          <BaseChart\r\n            height={150}\r\n            width={width}\r\n            spec={spec}\r\n            data={data}\r\n          />\r\n        )}\r\n      </AutoSizer>\r\n    );\r\n  }\r\n}\r\n\r\nexport default OneVariableBinomialChart;\r\n","import OneVariableBinomialChart from 'interface/others/charts/OneVariableBinomialChart';\r\nimport React from 'react';\r\n\r\n/**\r\n * pn is the mean value of procs\r\n * @param procChance\r\n * @param procAttempts\r\n */\r\nexport function expectedProcCount(procChance: number, procAttempts: number) {\r\n  return procChance * procAttempts;\r\n}\r\n\r\n/**\r\n * Calculates the probability that out of n tries with probability p, we get exactly k positive outcomes\r\n * @param k {Number} Number of desired positive outcomes\r\n * @param n {Number} Number of tries\r\n * @param p {Number} Probability of positive outcome\r\n */\r\nexport function binomialPMF(k: number, n: number, p: number) {\r\n  return binomialDistribution(n, k) * Math.pow(p, k) * Math.pow(1 - p, n - k);\r\n}\r\n\r\n/**\r\n * Calculates the probability that out of n tries with probability p, we get k or less positive outcomes\r\n * @param k {Number} Number of desired positive outcomes\r\n * @param n {Number} Number of tries\r\n * @param p {Number} Probability of positive outcome\r\n */\r\nexport function binomialCDF(k: number, n: number, p: number) {\r\n  let probability = 0;\r\n  for (let i = 0; i <= k; i += 1) {\r\n    probability += binomialPMF(i, n, p);\r\n  }\r\n  return probability;\r\n}\r\n\r\n/**\r\n * Finds the maximum of PMF of given distribution.\r\n * @param n {Number} Maximum number of tries for given event\r\n * @param {Function} pmf Callback that returns probability of exactly K events happening in N tries. Parameters - K, N\r\n * @returns {{ max: Number, p: Number }} Maximum of given PMF function - argument and probability itself\r\n */\r\nexport function findMax(n: number, pmf: (i: number, n: any) => any) {\r\n  let max = -1;\r\n  let maxP = 0;\r\n  for (let i = 0; i <= n; i += 1) {\r\n    const probability = pmf(i, n);\r\n    if (probability > maxP) {\r\n      max = i;\r\n      maxP = probability;\r\n    }\r\n  }\r\n  return {\r\n    max,\r\n    p: maxP,\r\n  };\r\n}\r\n\r\nfunction binomialDistribution(n: number, k: number) {\r\n  // n! / (k! * (n - k)!)\r\n  // factorials are awful, let's simplify a bit\r\n  // we know k < n:\r\n  // numerator: n! = 1 * 2 * ... * (n - k) * (n - k + 1) * (n - k + 2 ) * ... * n\r\n  // denominator: k! * (n - k)! = k! * 1 * 2 * ... * (n - k)\r\n  // cancelling out 1 * 2 * ... * (n - k) from both we get:\r\n  // (n - k + 1) * (n - k + 2) * ... n / k!\r\n  let numerator = 1;\r\n  let denominator = 1;\r\n  for (let i = n - k + 1; i <= n; i += 1) {\r\n    numerator *= i;\r\n  }\r\n  for (let i = 1; i <= k; i += 1) {\r\n    denominator *= i;\r\n  }\r\n  return numerator / denominator;\r\n}\r\n\r\nfunction resetProbabilityArray(actualProcs: number, procAttempts: number, procChance: number | number[]) {\r\n  const procProbabilities: Array<{ x: number; y: number; }> = Array.from({ length: procAttempts }, (_x, i: number) => {\r\n    if (typeof procChance === 'number') {\r\n      return { x: i, y: binomialPMF(i, procAttempts, procChance) };\r\n    } else {\r\n      return { x: i, y: poissonBinomialPMF(i, procAttempts, procChance) };\r\n    }\r\n  });\r\n\r\n  return procProbabilities;\r\n}\r\n\r\nfunction setMinMaxProbabilities(actualProcs: number, procAttempts: number, procChance: number | number[], threshold: number = 0.001) {\r\n  const procProbabilities = resetProbabilityArray(actualProcs, procAttempts, procChance);\r\n  const rangeMin = procProbabilities.findIndex(({ y }) => y >= threshold);\r\n  const rangeMax = rangeMin + procProbabilities.slice(rangeMin).findIndex(({ y }) => y < threshold);\r\n\r\n  return {\r\n    procProbabilities,\r\n    rangeMin,\r\n    rangeMax,\r\n  };\r\n}\r\n\r\n/**\r\n * Recursive formula for calculating the PMF (probability mass function) of Poisson's Binomial Distribution\r\n * @param k {Number} Number of desired positive outcomes\r\n * @param j {Number} Number of total tries\r\n * @param p {[Number]} Probability vector\r\n * @param lookup {Array} Lookup table\r\n * @returns {Number} Probability\r\n */\r\nfunction Ekj(k: number, j: number, p: number[], lookup: any[][]) {\r\n  if (k === -1) {\r\n    return 0;\r\n  }\r\n  if (k === j + 1) {\r\n    return 0;\r\n  }\r\n  if (k === 0 && j === 0) {\r\n    return 1;\r\n  }\r\n  if (lookup[k][j] !== null) {\r\n    return lookup[k][j];\r\n  }\r\n  // literature uses 1-based indices for probabilities, as we're using an array, we have to use 0 based\r\n  const value: number = (1 - p[j - 1]) * Ekj(k, j - 1, p, lookup) + p[j - 1] * Ekj(k - 1, j - 1, p, lookup);\r\n  lookup[k][j] = value;\r\n  return value;\r\n}\r\n\r\n// Poisson's Binomial Distribution\r\n// Methods based on Wikipedia page and this research paper:\r\n// https://www.researchgate.net/publication/257017356_On_computing_the_distribution_function_for_the_Poisson_binomial_distribution\r\n\r\n/**\r\n * Calculates the probability that out of n tries with p probabilities, we get exactly k positive outcomes\r\n * @param k {Number} Number of desired positive outcomes\r\n * @param n {Number} Number of total tries\r\n * @param p {[Number]} Probability vector\r\n */\r\nexport function poissonBinomialPMF(k: number, n: number, p: any[]) {\r\n  // denoted in the paper as ξk, I'll call it Ek for simplicity\r\n  // using the recursive formula in chapter 2.5\r\n  if (p.length !== n) {\r\n    throw new Error('You must supply a probability vector with the same length as the number of total tries into Poisson Binomial PMF');\r\n  }\r\n  // Using a lookup table to simplify recursion a little bit\r\n  // construct an (n+1) x (n+1) lookup table (because Ek,j uses indexes from 0 to n INCLUSIVE, with this we don't have to subtract indexes all the time)\r\n  // intentionally set tu nulls so we know which values are computed or not\r\n  const lookup = [...Array(n + 1)].map(_ => Array(n + 1).fill(null));\r\n  return Ekj(k, n, p, lookup);\r\n}\r\n\r\n/**\r\n * Calculates the probability that out of n tries with p probabilities, we get less than or equal k positive outcomes\r\n * @param k {Number} Number of desired positive outcomes\r\n * @param n {Number} Number of total tries\r\n * @param p {[Number]} Probability vector\r\n */\r\nexport function poissonBinomialCDF(k: number, n: number, p: number[]) {\r\n  // While technically equal to summing Ei from i = 0 to k, since we use recursion, a better solution is a lookup table\r\n  if (p.length !== n) {\r\n    throw new Error('You must supply a probability vector with the same length as the number of total tries into Poisson Binomial CDF');\r\n  }\r\n  // see comments in poissonBinomialPMF\r\n  const lookup = [...Array(n + 1)].map(_ => Array(n + 1).fill(null));\r\n  let probability = 0;\r\n  // since Ekj uses the values from \"previous row\" (Ekj(k - 1, j - 1, ...)), it's better to iterate from 0\r\n  // this way, it produces the least necessary amount of calculations with the lookup table (only the Ekj(k, j - 1) parts)\r\n  for (let i = 0; i <= k; i += 1) {\r\n    probability += Ekj(i, n, p, lookup);\r\n  }\r\n  return probability;\r\n}\r\n\r\nexport function plotOneVariableBinomChart(\r\n  actualProcs: number,\r\n  procAttempts: number,\r\n  procChance: number | number[],\r\n  trackedName: string = 'Procs',\r\n  tooltipText: string = trackedName,\r\n  yDomain: number[] = [0, 0.4],\r\n  xAxis: any = {\r\n    title: trackedName,\r\n    tickFormat: '~k',\r\n  },\r\n  yAxis: any = {\r\n    title: 'Likelihood',\r\n  },\r\n) {\r\n\r\n  const { procProbabilities, rangeMin, rangeMax } = setMinMaxProbabilities(actualProcs, procAttempts, procChance);\r\n  const actualEventY = typeof procChance === 'number' ? binomialPMF(actualProcs, procAttempts, procChance) : poissonBinomialPMF(actualProcs, procAttempts, procChance);\r\n  return (\r\n    <OneVariableBinomialChart\r\n      probabilities={procProbabilities.slice(rangeMin, rangeMax + 1)}\r\n      actualEvent={{ x: actualProcs, y: actualEventY }}\r\n      yDomain={yDomain}\r\n      xAxis={xAxis}\r\n      yAxis={yAxis}\r\n      tooltip={tooltipText}\r\n    />\r\n  );\r\n}\r\n","/**\r\n * Gets raw max casts of a spell over a period of time.\r\n * @param cooldown the cooldown time of the spell, in seconds\r\n * @param duration the duration of the time period to assess, in milliseconds\r\n * @param charges the number of charges the spell has\r\n */\r\nexport default function calculateMaxCasts(cooldown: number, duration: number, charges = 1) {\r\n  return (duration / 1000 / cooldown) + charges - 1;\r\n}\r\n","export const isPermanentPet = (guid: number) => guid.toString().length > 6;\r\n"],"sourceRoot":""}