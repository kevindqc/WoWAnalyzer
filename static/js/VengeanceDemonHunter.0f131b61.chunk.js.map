{"version":3,"sources":["parser/demonhunter/vengeance/modules/pain/PainTracker.js","parser/demonhunter/vengeance/modules/pain/PainDetails.js","parser/demonhunter/vengeance/modules/features/AlwaysBeCasting.js","parser/demonhunter/vengeance/modules/Abilities.js","parser/demonhunter/vengeance/modules/features/CooldownThroughputTracker.js","parser/demonhunter/vengeance/modules/features/MitigationCheck.js","parser/demonhunter/vengeance/modules/talents/SpiritBombFrailtyDebuff.js","parser/demonhunter/vengeance/modules/talents/VoidReaverDebuff.js","parser/demonhunter/vengeance/modules/talents/SpiritBombSoulsConsume.js","parser/demonhunter/vengeance/modules/talents/SoulBarrier.js","parser/demonhunter/vengeance/modules/features/SoulFragmentsTracker.js","parser/demonhunter/vengeance/modules/statistics/SoulFragmentsConsume.js","parser/demonhunter/vengeance/modules/spells/SoulCleaveSoulsConsumed.js","parser/demonhunter/vengeance/modules/spells/DemonSpikes.js","parser/demonhunter/vengeance/modules/statistics/SoulsOvercap.js","parser/demonhunter/vengeance/modules/features/Checklist/Component.js","parser/demonhunter/vengeance/modules/features/Checklist/Module.js","parser/demonhunter/vengeance/modules/talents/FeedTheDemon.js","parser/demonhunter/vengeance/modules/talents/Gluttony.js","parser/demonhunter/vengeance/modules/talents/BurningAlive.js","parser/demonhunter/vengeance/modules/talents/FeastOfSouls.js","parser/demonhunter/vengeance/modules/talents/AgonizingFlames.js","parser/demonhunter/vengeance/modules/talents/RazorSpikes.js","parser/demonhunter/vengeance/modules/spells/ImmolationAura.js","parser/demonhunter/vengeance/modules/spells/SigilOfFlame.js","parser/demonhunter/vengeance/CombatLogParser.js","parser/core/calculateEffectiveDamage.js","interface/icons/Uptime.js","interface/others/TalentStatisticBox.js","parser/shared/modules/MitigationCheck.js"],"names":["PainTracker","args","resource","RESOURCE_TYPES","PAIN","event","this","getResource","cost","ResourceTracker","PainDetails","when","suggestionThresholds","addSuggestion","suggest","actual","recommended","formatPercentage","wastedPercent","icon","i18n","_","Statistic","position","STATISTIC_ORDER","CORE","size","tooltip","painTracker","wasted","generated","BoringResourceValue","value","label","title","url","render","Panel","ResourceBreakdown","tracker","showSpenders","isLessThan","minor","average","major","style","isGreaterThan","Analyzer","dependencies","AlwaysBeCasting","totalTimeWasted","owner","fightDuration","regular","CoreAlwaysBeCasting","Abilities","combatant","selectedCombatant","spell","SPELLS","IMMOLATION_AURA","category","SPELL_CATEGORIES","ROTATIONAL","cooldown","haste","gcd","base","castEfficiency","suggestion","recommendedEfficiency","extraSuggestion","SpellLink","id","FALLOUT_TALENT","SOUL_FRAGMENT","hasTalent","FRACTURE_TALENT","SHEAR","charges","SOUL_CLEAVE","ROTATIONAL_AOE","isDefensive","METAMORPHOSIS_TANK","buffSpellId","DEFENSIVE","FIERY_BRAND","FIERY_BRAND_DEBUFF","DEMON_SPIKES","SIGIL_OF_CHAINS_TALENT","UTILITY","enabled","SPIRIT_BOMB_TALENT","FRAILTY_SPIRIT_BOMB_DEBUFF","SOUL_BARRIER_TALENT","FELBLADE_TALENT","FEL_DEVASTATION_TALENT","CHARRED_FLESH_TALENT","SIGIL_OF_SILENCE_CONCENTRATED","SIGIL_OF_SILENCE_QUICKENED","QUICKENED_SIGILS_TALENT","SIGIL_OF_MISERY_CONCENTRATED","SIGIL_OF_MISERY_QUICKENED","SIGIL_OF_FLAME_CONCENTRATED","SIGIL_OF_FLAME_QUICKENED","SIGIL_OF_FLAME_DEBUFF","FLAME_CRASH_TALENT","INFERNAL_STRIKE","ABYSSAL_STRIKE_TALENT","IMPRISON","TORMENT","CONSUME_MAGIC","DISRUPT","THROW_GLAIVE","GLIDE","HIDDEN","CoreAbilities","CooldownThroughputTracker","CoreCooldownThroughputTracker","cooldownSpells","summary","BUILT_IN_SUMMARY_TYPES","DAMAGE","ABSORBED","HEALING","MitigationCheck","buffCheckPhysical","DEMON_SPIKES_BUFF","buffCheckPhysAndMag","debuffCheckPhysAndMag","CoreMitigationCheck","SpiritBombFrailtyDebuff","active","enemies","getBuffUptime","uptime","uptimeSuggestionThresholds","spiritBombUptime","spiritBombDamage","abilityTracker","getAbility","SPIRIT_BOMB_DAMAGE","damageEffective","STATISTIC_CATEGORY","TALENTS","formatThousands","formatDuration","BoringSpellValueText","Uptime","AbilityTracker","Enemies","VoidReaverDebuff","VOID_REAVER_TALENT","VOID_REAVER_DEBUFF","TalentStatisticBox","talent","SpiritBombSoulsConsume","castTimestamp","castSoulsConsumed","cast","soulsConsumedByAmount","Array","from","length","x","FEED_THE_DEMON_TALENT","addEventListener","Events","by","SELECTED_PLAYER","onCast","changebuffstack","SOUL_FRAGMENT_STACK","onChangeBuffStack","fightend","onFightend","Object","values","reduce","total","casts","totalGoodCasts","totalCasts","percentGoodCasts","countHits","timestamp","oldStacks","newStacks","soulsConsumed","suggestionThresholdsEfficiency","dropdown","className","map","castAmount","stackAmount","key","SoulBarrier","totalAbsorbed","buffApplied","buffRemoved","buffLength","avgBuffLength","totalBuffLength","applybuff","to","onApplyBuff","absorbed","onAbsorb","removebuff","onRemoveBuff","amount","ability","guid","formatNumber","formatItemHealingDone","damageTracker","DamageTracker","SoulFragmentsTracker","options","soulsGenerated","overcap","soulsSpent","currentSouls","spent","gained","SoulFragmentsConsume","undefined","totalSoulsConsumedBySpells","soulsConsumedBySpell","spellId","name","souls","trackedSpell","MAX_SOUL_FRAGMENTS","consumed","soulsByTouch","soulFragmentsTracker","e","i","SoulCleaveSoulsConsumed","totalAvailable","soulsWasted","soulFragmentsConsume","soulCleaveSouls","DemonSpikes","hitsWithDS","hitsWithoutDS","hitsWithDSOffCD","damage","onDamageTaken","hitsWithDSOffCDPercent","type","SCHOOLS","ids","PHYSICAL","hasBuff","spellUsable","isAvailable","demonSpikesUptimePercentage","mitigatedUptime","SpellUsable","SoulsOvercap","wasterPerGenerated","VengeanceDemonHunterChecklist","thresholds","AbilityRequirement","props","GenericCastEfficiencyRequirement","getCastEfficiencyForSpellId","Rule","description","href","target","rel","Requirement","demonSpikes","spiritBombSoulsConsume","soulCleaveSoulsConsumed","spiritBombFrailtyDebuff","voidReaverDebuff","PreparationRule","Checklist","Component","combatants","selected","preparationRuleAnalyzer","downtimeSuggestionThresholds","alwaysBeCasting","soulBarrier","painDetails","soulsOvercap","BaseModule","Combatants","CastEfficiency","PreparationRuleAnalyzer","FeedTheDemon","totalCooldownReductionWasted","totalCooldownReduction","heal","CONSUME_SOUL_VDH","onHeal","FTDReduction","FTDReductionWasted","reduction","wastedReduction","isOnCooldown","effectiveReduction","reduceCooldown","averageReduction","Gluttony","buffCasts","metaCast","GLUTTONY_TALENT","gluttonyProcs","BurningAlive","BURNING_ALIVE_TALENT","FIERY_BRAND_DOT","onDamage","formatItemDamageDone","FeastOfSouls","overHeal","FEAST_OF_SOULS_TALENT","FEAST_OF_SOULS_HEAL","overheal","overHealPercent","AgonizingFlames","AGONIZING_FLAMES_TALENT","IMMOLATION_AURA_FIRST_STRIKE","calculateEffectiveDamage","RazorSpikes","RAZOR_SPIKES_TALENT","ImmolationAura","immolationAuraUptime","immolationAuraUptimePercentage","immolationAuraDamage","SigilOfFlame","successfulStack","lastApplicationTimestamp","currentApplicationTimestamp","applydebuff","onApplyDebuff","sigilOfFlameUptime","sigilOfFlameUptimePercentage","sigilOfFlameDamage","CombatLogParser","CoreCombatLogParser","specModules","mitigationCheck","abilities","cooldownThroughputTracker","checklist","feedTheDemon","gluttony","burningAlive","feastOfSouls","agonizingFlames","razorSpikes","immolationAura","sigilOfFlame","increase","raw","Icon","other","xmlns","viewBox","d","others","defaultProps","checksPassedMap","Map","checksFailedMap","checksPhysical","checksMagical","buffCheckMagical","debuffCheckPhysical","debuffCheckMagical","boss","findByBossId","fight","softMitigationChecks","physical","magical","forEach","set","checks","buffCheck","debuffCheck","MAGIC_SCHOOLS","includes","tick","some","hitType","HIT_TYPES","IMMUNE","get","enemy","getEntities","sourceID","failSum","val","passSum","spellIconId","SHIELD_BLOCK_BUFF","physicalTable","physicalChecks","scope","height","borderless","borderTop","magicalTable","magicalChecks","fontWeight","filter"],"mappings":"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","file":"static/js/VengeanceDemonHunter.0f131b61.chunk.js","sourcesContent":["import RESOURCE_TYPES from 'game/RESOURCE_TYPES';\r\nimport ResourceTracker from 'parser/shared/modules/resources/resourcetracker/ResourceTracker';\r\n\r\nclass PainTracker extends ResourceTracker {\r\n  constructor(...args) {\r\n    super(...args);\r\n    this.resource = RESOURCE_TYPES.PAIN;\r\n  }\r\n\r\n  getReducedCost(event) {\r\n    if (!this.getResource(event).cost) {\r\n      return 0;\r\n    }\r\n    return this.getResource(event).cost / 10;\r\n  }\r\n}\r\n\r\nexport default PainTracker;\r\n","import React from 'react';\r\n\r\nimport Analyzer from 'parser/core/Analyzer';\r\nimport Panel from 'interface/others/Panel';\r\nimport { formatPercentage } from 'common/format';\r\nimport ResourceBreakdown from 'parser/shared/modules/resources/resourcetracker/ResourceBreakdown';\r\nimport { i18n } from '@lingui/core';\r\nimport { t } from '@lingui/macro';\r\nimport Statistic from 'interface/statistics/Statistic';\r\nimport STATISTIC_ORDER from 'interface/others/STATISTIC_ORDER';\r\n\r\nimport BoringResourceValue from 'interface/statistics/components/BoringResourceValue';\r\nimport RESOURCE_TYPES from 'game/RESOURCE_TYPES';\r\n\r\nimport PainTracker from './PainTracker';\r\n\r\nclass PainDetails extends Analyzer {\r\n  get wastedPercent() {\r\n    return this.painTracker.wasted / (this.painTracker.wasted + this.painTracker.generated) || 0;\r\n  }\r\n\r\n  get efficiencySuggestionThresholds() {\r\n    return {\r\n      actual: 1 - this.wastedPercent,\r\n      isLessThan: {\r\n        minor: 0.95,\r\n        average: 0.90,\r\n        major: .85,\r\n      },\r\n      style: 'percentage',\r\n    };\r\n  }\r\n\r\n  get suggestionThresholds() {\r\n    return {\r\n      actual: this.wastedPercent,\r\n      isGreaterThan: {\r\n        minor: 0.05,\r\n        average: 0.10,\r\n        major: 0.15,\r\n      },\r\n      style: 'percentage',\r\n    };\r\n  }\r\n\r\n  static dependencies = {\r\n    painTracker: PainTracker,\r\n  };\r\n\r\n  suggestions(when) {\r\n    when(this.suggestionThresholds)\r\n      .addSuggestion((suggest, actual, recommended) => suggest(`You wasted ${formatPercentage(this.wastedPercent)}% of your Pain.`)\r\n        .icon('ability_demonhunter_demonspikes')\r\n        .actual(i18n._(t('demonhunter.vengeance.suggestions.pain.wasted')`${formatPercentage(actual)}% wasted`))\r\n        .recommended(`<${formatPercentage(recommended)}% is recommended`));\r\n  }\r\n\r\n  statistic() {\r\n    return (\r\n      <Statistic\r\n        position={STATISTIC_ORDER.CORE(1)}\r\n        size=\"small\"\r\n        tooltip={`${this.painTracker.wasted} out of ${this.painTracker.wasted + this.painTracker.generated} pain wasted.`}\r\n      >\r\n        <BoringResourceValue\r\n          resource={RESOURCE_TYPES.PAIN}\r\n          value={`${formatPercentage(this.wastedPercent)} %`}\r\n          label='Pain wasted'\r\n        />\r\n      </Statistic>\r\n    );\r\n  }\r\n\r\n  tab() {\r\n    return {\r\n      title: 'Pain usage',\r\n      url: 'pain-usage',\r\n      render: () => (\r\n        <Panel>\r\n          <ResourceBreakdown\r\n            tracker={this.painTracker}\r\n            showSpenders\r\n          />\r\n        </Panel>\r\n      ),\r\n    };\r\n  }\r\n\r\n}\r\n\r\nexport default PainDetails;\r\n","import { formatPercentage } from 'common/format';\r\n\r\nimport CoreAlwaysBeCasting from 'parser/shared/modules/AlwaysBeCasting';\r\nimport { i18n } from '@lingui/core';\r\nimport { t } from '@lingui/macro';\r\n\r\nclass AlwaysBeCasting extends CoreAlwaysBeCasting {\r\n  suggestions(when) {\r\n    const deadTimePercentage = this.totalTimeWasted / this.owner.fightDuration;\r\n\r\n    when(deadTimePercentage).isGreaterThan(0.20)\r\n      .addSuggestion((suggest, actual, recommended) => suggest('Your downtime can be improved. Try to Always Be Casting (ABC); try to reduce the delay between casting spells and when you\\'re not healing try to contribute some damage.')\r\n        .icon('spell_mage_altertime')\r\n        .actual(i18n._(t('demonhunter.vengeance.suggestions.alwaysBeCasting.downtime')`${formatPercentage(actual)}% downtime`))\r\n        .recommended(`<${formatPercentage(recommended)}% is recommended`)\r\n        .regular(recommended + 0.05).major(recommended + 0.15));\r\n  }\r\n}\r\n\r\nexport default AlwaysBeCasting;\r\n","import React from 'react';\r\nimport SPELLS from 'common/SPELLS/index';\r\nimport SpellLink from 'common/SpellLink';\r\nimport CoreAbilities from 'parser/core/modules/Abilities';\r\n\r\nclass Abilities extends CoreAbilities {\r\n  spellbook() {\r\n    const combatant = this.selectedCombatant;\r\n    return [\r\n      // Rotation\r\n      {\r\n        spell: SPELLS.IMMOLATION_AURA,\r\n        category: Abilities.SPELL_CATEGORIES.ROTATIONAL,\r\n        cooldown: haste => 15 / (1 + haste),\r\n        gcd: {\r\n          base: 1500,\r\n        },\r\n        castEfficiency: {\r\n          suggestion: true,\r\n          recommendedEfficiency: 0.9,\r\n          extraSuggestion: <>This is a great Pain filler spell. Try to always cast it on cooldown, specially when using the <SpellLink id={SPELLS.FALLOUT_TALENT.id} /> talent in order to maximize your <SpellLink id={SPELLS.SOUL_FRAGMENT.id} /> generation.</>,\r\n        },\r\n      },\r\n      {\r\n        spell: [combatant.hasTalent(SPELLS.FRACTURE_TALENT.id) ? SPELLS.FRACTURE_TALENT : SPELLS.SHEAR],\r\n        category: Abilities.SPELL_CATEGORIES.ROTATIONAL,\r\n        cooldown: combatant.hasTalent(SPELLS.FRACTURE_TALENT.id) ? haste => 4.5 / (1 + haste) : 0,\r\n        charges: combatant.hasTalent(SPELLS.FRACTURE_TALENT.id) ? 2 : 0,\r\n        castEfficiency: {\r\n          suggestion: combatant.hasTalent(SPELLS.FRACTURE_TALENT.id),\r\n          recommendedEfficiency: 0.90,\r\n        },\r\n        gcd: {\r\n          base: 1500,\r\n        },\r\n      },\r\n\r\n      // Defensive / Healing\r\n      {\r\n        spell: SPELLS.SOUL_CLEAVE,\r\n        category: Abilities.SPELL_CATEGORIES.ROTATIONAL_AOE,\r\n        gcd: {\r\n          base: 1500,\r\n        },\r\n        isDefensive: true,\r\n      },\r\n      {\r\n        spell: SPELLS.METAMORPHOSIS_TANK,\r\n        buffSpellId: SPELLS.METAMORPHOSIS_TANK.id,\r\n        category: Abilities.SPELL_CATEGORIES.DEFENSIVE,\r\n        cooldown: 180,\r\n        castEfficiency: {\r\n          suggestion: true,\r\n          recommendedEfficiency: 0.50,\r\n        },\r\n        isDefensive: true,\r\n      },\r\n      {\r\n        spell: SPELLS.FIERY_BRAND,\r\n        buffSpellId: SPELLS.FIERY_BRAND_DEBUFF.id,\r\n        category: Abilities.SPELL_CATEGORIES.DEFENSIVE,\r\n        cooldown: 60,\r\n        gcd: {\r\n          base: 1500,\r\n        },\r\n        castEfficiency: {\r\n          suggestion: true,\r\n          recommendedEfficiency: 0.50,\r\n          extraSuggestion: <>Powerful CD. Use it during high damage moments.</>,\r\n        },\r\n        isDefensive: true,\r\n      },\r\n      {\r\n        spell: SPELLS.DEMON_SPIKES,\r\n        category: Abilities.SPELL_CATEGORIES.DEFENSIVE,\r\n        cooldown: haste => 20 / (1 + haste),\r\n        charges: 2,\r\n        isDefensive: true,\r\n      },\r\n\r\n      // Talents\r\n      {\r\n        spell: SPELLS.SIGIL_OF_CHAINS_TALENT,\r\n        category: Abilities.SPELL_CATEGORIES.UTILITY,\r\n        enabled: combatant.hasTalent(SPELLS.SIGIL_OF_CHAINS_TALENT.id),\r\n        cooldown: 90,\r\n        gcd: {\r\n          base: 1500,\r\n        },\r\n      },\r\n      {\r\n        spell: SPELLS.SPIRIT_BOMB_TALENT,\r\n        buffSpellId: SPELLS.FRAILTY_SPIRIT_BOMB_DEBUFF.id,\r\n        category: Abilities.SPELL_CATEGORIES.ROTATIONAL,\r\n        gcd: {\r\n          base: 1500,\r\n        },\r\n      },\r\n      {\r\n        spell: SPELLS.SOUL_BARRIER_TALENT,\r\n        buffSpellId: SPELLS.SOUL_BARRIER_TALENT.id,\r\n        enabled: combatant.hasTalent(SPELLS.SOUL_BARRIER_TALENT.id),\r\n        category: Abilities.SPELL_CATEGORIES.DEFENSIVE,\r\n        cooldown: 30,\r\n        gcd: {\r\n          base: 1500,\r\n        },\r\n        castEfficiency: {\r\n          suggestion: true,\r\n          recommendedEfficiency: 0.80,\r\n        },\r\n        isDefensive: true,\r\n      },\r\n      {\r\n        spell: SPELLS.FELBLADE_TALENT,\r\n        enabled: combatant.hasTalent(SPELLS.FELBLADE_TALENT.id),\r\n        category: Abilities.SPELL_CATEGORIES.ROTATIONAL,\r\n        cooldown: haste => 15 / (1 + haste),\r\n        gcd: {\r\n          base: 1500,\r\n        },\r\n        castEfficiency: {\r\n          suggestion: true,\r\n          recommendedEfficiency: 0.90,\r\n          extraSuggestion: <>This is a great Pain generator spell. </>,\r\n        },\r\n      },\r\n      {\r\n        spell: SPELLS.FEL_DEVASTATION_TALENT,\r\n        enabled: combatant.hasTalent(SPELLS.FEL_DEVASTATION_TALENT.id),\r\n        category: Abilities.SPELL_CATEGORIES.ROTATIONAL_AOE,\r\n        cooldown: 60,\r\n        gcd: {\r\n          base: 1500,\r\n        },\r\n        castEfficiency: {\r\n          suggestion: true,\r\n          recommendedEfficiency: 0.80,\r\n          extraSuggestion: <>This is a great healing and AoE damage burst spell. The only moment you can delay it's cast is if your <SpellLink id={SPELLS.FIERY_BRAND.id} /> (with the <SpellLink id={SPELLS.CHARRED_FLESH_TALENT.id} /> talent) is almost available. </>,\r\n        },\r\n        isDefensive: true,\r\n      },\r\n\r\n      // Sigils\r\n      {\r\n        spell: [SPELLS.SIGIL_OF_SILENCE_CONCENTRATED, SPELLS.SIGIL_OF_SILENCE_QUICKENED],\r\n        category: Abilities.SPELL_CATEGORIES.UTILITY,\r\n        cooldown: 60 * (1 - (combatant.hasTalent(SPELLS.QUICKENED_SIGILS_TALENT.id) ? 0.2 : 0)),\r\n        gcd: {\r\n          base: 1500,\r\n        },\r\n      },\r\n      {\r\n        spell: [SPELLS.SIGIL_OF_MISERY_CONCENTRATED, SPELLS.SIGIL_OF_MISERY_QUICKENED],\r\n        category: Abilities.SPELL_CATEGORIES.UTILITY,\r\n        cooldown: 60 * (1 - (combatant.hasTalent(SPELLS.QUICKENED_SIGILS_TALENT.id) ? 0.2 : 0)),\r\n        gcd: {\r\n          base: 1500,\r\n        },\r\n      },\r\n      {\r\n        spell: [SPELLS.SIGIL_OF_FLAME_CONCENTRATED, SPELLS.SIGIL_OF_FLAME_QUICKENED],\r\n        buffSpellId: SPELLS.SIGIL_OF_FLAME_DEBUFF.id,\r\n        category: Abilities.SPELL_CATEGORIES.ROTATIONAL_AOE,\r\n        cooldown: 30 * (1 - (combatant.hasTalent(SPELLS.QUICKENED_SIGILS_TALENT.id) ? 0.2 : 0)),\r\n        gcd: {\r\n          base: 1500,\r\n        },\r\n        castEfficiency: {\r\n          suggestion: true,\r\n          recommendedEfficiency: 0.90,\r\n          extraSuggestion: combatant.hasTalent(SPELLS.FLAME_CRASH_TALENT.id) ? <>Line this up with <SpellLink id={SPELLS.INFERNAL_STRIKE.id} /> to double stack <SpellLink id={SPELLS.SIGIL_OF_FLAME_CONCENTRATED.id} /> because of the <SpellLink id={SPELLS.FLAME_CRASH_TALENT.id} /> talent.</> : `Cast on cooldown for a dps increase.`,\r\n        },\r\n      },\r\n\r\n      // Utility\r\n      {\r\n        spell: SPELLS.INFERNAL_STRIKE,\r\n        category: Abilities.SPELL_CATEGORIES.UTILITY,\r\n        cooldown: combatant.hasTalent(SPELLS.ABYSSAL_STRIKE_TALENT.id) ? 12 : 20,\r\n        charges: 2,\r\n      },\r\n\r\n      {\r\n        spell: SPELLS.IMPRISON,\r\n        category: Abilities.SPELL_CATEGORIES.UTILITY,\r\n        cooldown: 15,\r\n        gcd: {\r\n          base: 1500,\r\n        },\r\n      },\r\n      {\r\n        spell: SPELLS.TORMENT,\r\n        category: Abilities.SPELL_CATEGORIES.UTILITY,\r\n        cooldown: 8,\r\n      },\r\n      {\r\n        spell: SPELLS.CONSUME_MAGIC,\r\n        category: Abilities.SPELL_CATEGORIES.UTILITY,\r\n        cooldown: 10,\r\n        gcd: {\r\n          base: 1500,\r\n        },\r\n      },\r\n      {\r\n        spell: SPELLS.DISRUPT,\r\n        category: Abilities.SPELL_CATEGORIES.UTILITY,\r\n        cooldown: 15,\r\n      },\r\n      {\r\n        spell: SPELLS.THROW_GLAIVE,\r\n        category: Abilities.SPELL_CATEGORIES.UTILITY,\r\n        cooldown: haste => 3 / (1 + haste),\r\n        gcd: {\r\n          base: 1500,\r\n        },\r\n      },\r\n      {\r\n        spell: SPELLS.GLIDE,\r\n        category: Abilities.SPELL_CATEGORIES.UTILITY,\r\n        gcd: null,\r\n      },\r\n\r\n      // Misc\r\n      {\r\n        spell: SPELLS.SOUL_FRAGMENT,\r\n        category: Abilities.SPELL_CATEGORIES.HIDDEN,\r\n        gcd: null,\r\n      },\r\n    ];\r\n  }\r\n}\r\n\r\nexport default Abilities;\r\n","import SPELLS from 'common/SPELLS';\r\nimport CoreCooldownThroughputTracker, { BUILT_IN_SUMMARY_TYPES } from 'parser/shared/modules/CooldownThroughputTracker';\r\n\r\nclass CooldownThroughputTracker extends CoreCooldownThroughputTracker {\r\n  static cooldownSpells = [\r\n    ...CoreCooldownThroughputTracker.cooldownSpells,\r\n    {\r\n      spell: SPELLS.METAMORPHOSIS_TANK,\r\n      summary: [\r\n        BUILT_IN_SUMMARY_TYPES.DAMAGE,\r\n        BUILT_IN_SUMMARY_TYPES.ABSORBED,\r\n        BUILT_IN_SUMMARY_TYPES.HEALING,\r\n      ],\r\n    },\r\n  ];\r\n}\r\n\r\nexport default CooldownThroughputTracker;\r\n","import CoreMitigationCheck from 'parser/shared/modules/MitigationCheck';\r\nimport SPELLS from 'common/SPELLS';\r\n\r\nclass MitigationCheck extends CoreMitigationCheck {\r\n  constructor(...args) {\r\n    super(...args);\r\n\r\n    this.buffCheckPhysical = [\r\n      SPELLS.DEMON_SPIKES_BUFF.id,\r\n    ];\r\n    this.buffCheckPhysAndMag = [\r\n      SPELLS.METAMORPHOSIS_TANK.id,\r\n    ];\r\n\r\n    this.debuffCheckPhysAndMag = [\r\n      SPELLS.FIERY_BRAND_DEBUFF.id,\r\n    ];\r\n\r\n  }\r\n}\r\n\r\nexport default MitigationCheck;\r\n","import React from 'react';\r\n\r\nimport Analyzer from 'parser/core/Analyzer';\r\nimport AbilityTracker from 'parser/shared/modules/AbilityTracker';\r\nimport Enemies from 'parser/shared/modules/Enemies';\r\n\r\nimport SPELLS from 'common/SPELLS/index';\r\nimport SpellLink from 'common/SpellLink';\r\nimport { formatPercentage, formatThousands, formatDuration } from 'common/format';\r\nimport BoringSpellValueText from 'interface/statistics/components/BoringSpellValueText';\r\nimport Statistic from 'interface/statistics/Statistic';\r\nimport STATISTIC_ORDER from 'interface/others/STATISTIC_ORDER';\r\nimport UptimeIcon from 'interface/icons/Uptime';\r\nimport STATISTIC_CATEGORY from 'interface/others/STATISTIC_CATEGORY';\r\n\r\nimport { i18n } from '@lingui/core';\r\nimport { t } from '@lingui/macro';\r\n\r\nclass SpiritBombFrailtyDebuff extends Analyzer {\r\n  get uptime() {\r\n    return this.enemies.getBuffUptime(SPELLS.FRAILTY_SPIRIT_BOMB_DEBUFF.id) / this.owner.fightDuration;\r\n  }\r\n\r\n  get uptimeSuggestionThresholds() {\r\n    return {\r\n      actual: this.uptime,\r\n      isLessThan: {\r\n        minor: 0.90,\r\n        average: 0.85,\r\n        major: .80,\r\n      },\r\n      style: 'percentage',\r\n    };\r\n  }\r\n\r\n  static dependencies = {\r\n    abilityTracker: AbilityTracker,\r\n    enemies: Enemies,\r\n  };\r\n\r\n  constructor(...args) {\r\n    super(...args);\r\n    this.active = this.selectedCombatant.hasTalent(SPELLS.SPIRIT_BOMB_TALENT.id);\r\n  }\r\n\r\n  suggestions(when) {\r\n    when(this.uptimeSuggestionThresholds)\r\n      .addSuggestion((suggest, actual, recommended) => suggest(<>Your <SpellLink id={SPELLS.FRAILTY_SPIRIT_BOMB_DEBUFF.id} /> uptime can be improved. This is easy to maintain and an important source of healing.</>)\r\n        .icon(SPELLS.FRAILTY_SPIRIT_BOMB_DEBUFF.icon)\r\n        .actual(i18n._(t('demonhunter.vengeance.spiritBombFrailtyBuff.uptime')`${formatPercentage(actual)}% Frailty uptime`))\r\n        .recommended(`>${formatPercentage(recommended)}% is recommended`));\r\n  }\r\n\r\n  statistic() {\r\n    const spiritBombUptime = this.enemies.getBuffUptime(SPELLS.FRAILTY_SPIRIT_BOMB_DEBUFF.id);\r\n    const spiritBombDamage = this.abilityTracker.getAbility(SPELLS.SPIRIT_BOMB_DAMAGE.id).damageEffective;\r\n\r\n    return (\r\n      <Statistic\r\n        position={STATISTIC_ORDER.CORE(5)}\r\n        category={STATISTIC_CATEGORY.TALENTS}\r\n        size=\"flexible\"\r\n        tooltip={\r\n          <>\r\n            Total damage was {formatThousands(spiritBombDamage)}.<br />\r\n            Total uptime was {formatDuration(spiritBombUptime / 1000)}.\r\n          </>\r\n        }\r\n      >\r\n        <BoringSpellValueText spell={SPELLS.SPIRIT_BOMB_TALENT}>\r\n          <>\r\n            <UptimeIcon /> {formatPercentage(this.uptime)}% <small>uptime</small>\r\n          </>\r\n        </BoringSpellValueText>\r\n      </Statistic>\r\n    );\r\n  }\r\n}\r\n\r\nexport default SpiritBombFrailtyDebuff;\r\n","import React from 'react';\r\nimport TalentStatisticBox from 'interface/others/TalentStatisticBox';\r\nimport STATISTIC_ORDER from 'interface/others/STATISTIC_ORDER';\r\nimport Enemies from 'parser/shared/modules/Enemies';\r\n\r\nimport SPELLS from 'common/SPELLS';\r\nimport Analyzer from 'parser/core/Analyzer';\r\nimport { formatPercentage } from 'common/format';\r\nimport SpellLink from 'common/SpellLink';\r\nimport { i18n } from '@lingui/core';\r\nimport { t } from '@lingui/macro';\r\n\r\nclass VoidReaverDebuff extends Analyzer {\r\n  get uptime() {\r\n    return this.enemies.getBuffUptime(SPELLS.VOID_REAVER_DEBUFF.id) / this.owner.fightDuration;\r\n  }\r\n\r\n  get uptimeSuggestionThresholds() {\r\n    return {\r\n      actual: this.uptime,\r\n      isLessThan: {\r\n        minor: 0.90,\r\n        average: 0.80,\r\n        major: .70,\r\n      },\r\n      style: 'percentage',\r\n    };\r\n  }\r\n\r\n//WCL: https://www.warcraftlogs.com/reports/LaMfJFHk2dY98gTj/#fight=20&type=auras&spells=debuffs&hostility=1&ability=268178\r\n  static dependencies = {\r\n    enemies: Enemies,\r\n  };\r\n\r\n  constructor(...args) {\r\n    super(...args);\r\n    this.active = this.selectedCombatant.hasTalent(SPELLS.VOID_REAVER_TALENT.id);\r\n  }\r\n\r\n  suggestions(when) {\r\n    when(this.uptimeSuggestionThresholds)\r\n      .addSuggestion((suggest, actual, recommended) => suggest(<>Your <SpellLink id={SPELLS.VOID_REAVER_DEBUFF.id} /> uptime can be improved.</>)\r\n        .icon(SPELLS.VOID_REAVER_TALENT.icon)\r\n        .actual(i18n._(t('demonhunter.vengeance.suggestions.voidReaver.uptime')`${formatPercentage(actual)}% Void Reaver uptime`))\r\n        .recommended(`>${formatPercentage(recommended)}% is recommended`));\r\n  }\r\n\r\n  statistic() {\r\n    return (\r\n      <TalentStatisticBox\r\n        talent={SPELLS.VOID_REAVER_TALENT.id}\r\n        position={STATISTIC_ORDER.CORE(5)}\r\n        value={`${formatPercentage(this.uptime)} %`}\r\n        label=\"Void Reaver uptime\"\r\n      />\r\n    );\r\n  }\r\n}\r\n\r\nexport default VoidReaverDebuff;\r\n","import React from 'react';\r\nimport Analyzer, { SELECTED_PLAYER } from 'parser/core/Analyzer';\r\nimport BoringSpellValueText from 'interface/statistics/components/BoringSpellValueText';\r\nimport Statistic from 'interface/statistics/Statistic';\r\nimport STATISTIC_ORDER from 'interface/others/STATISTIC_ORDER';\r\n\r\nimport SPELLS from 'common/SPELLS/index';\r\nimport SpellLink from 'common/SpellLink';\r\n\r\nimport { formatPercentage } from 'common/format';\r\nimport { i18n } from '@lingui/core';\r\nimport { t } from '@lingui/macro';\r\nimport Events from 'parser/core/Events';\r\nimport STATISTIC_CATEGORY from 'interface/others/STATISTIC_CATEGORY';\r\n\r\nconst MS_BUFFER = 100;\r\n\r\nclass SpiritBombSoulsConsume extends Analyzer {\r\n\r\n  get totalGoodCasts() {\r\n    return this.soulsConsumedByAmount[4] + this.soulsConsumedByAmount[5];\r\n  }\r\n\r\n  get totalCasts() {\r\n    return Object.values(this.soulsConsumedByAmount).reduce((total, casts) => total + casts, 0);\r\n  }\r\n\r\n  get percentGoodCasts() {\r\n    return this.totalGoodCasts / this.totalCasts;\r\n  }\r\n\r\n  get suggestionThresholdsEfficiency() {\r\n    return {\r\n      actual: this.percentGoodCasts,\r\n      isLessThan: {\r\n        minor: 0.90,\r\n        average: 0.85,\r\n        major: .80,\r\n      },\r\n      style: 'percentage',\r\n    };\r\n  }\r\n\r\n  castTimestamp = 0;\r\n  castSoulsConsumed = 0;\r\n  cast = 0;\r\n  soulsConsumedByAmount = Array.from({ length: 6 }, x => 0);\r\n\r\n  /* Feed The Demon talent is taken in defensive builds. In those cases you want to generate and consume souls as quickly\r\n   as possible. So how you consume your souls down matter. If you dont take that talent your taking a more balanced\r\n   build meaning you want to consume souls in a way that boosts your dps. That means feeding the souls into spirit\r\n   bomb as efficiently as possible (cast at 4+ souls) for a dps boost and have soul cleave absorb souls as little as\r\n   possible since it provides no extra dps.\r\n*/\r\n  constructor(...args) {\r\n    super(...args);\r\n    this.active = this.selectedCombatant.hasTalent(SPELLS.SPIRIT_BOMB_TALENT.id) && !this.selectedCombatant.hasTalent(SPELLS.FEED_THE_DEMON_TALENT.id);\r\n    this.addEventListener(Events.cast.by(SELECTED_PLAYER).spell(SPELLS.SPIRIT_BOMB_TALENT), this.onCast);\r\n    this.addEventListener(Events.changebuffstack.by(SELECTED_PLAYER).spell(SPELLS.SOUL_FRAGMENT_STACK), this.onChangeBuffStack);\r\n    this.addEventListener(Events.fightend, this.onFightend);\r\n  }\r\n\r\n  onCast(event) {\r\n    if (this.cast > 0) {\r\n      this.countHits();\r\n    }\r\n    this.castTimestamp = event.timestamp;\r\n    this.cast += 1;\r\n  }\r\n\r\n  onChangeBuffStack(event) {\r\n    if (event.oldStacks < event.newStacks) {\r\n      return;\r\n    }\r\n    if (event.timestamp - this.castTimestamp < MS_BUFFER) {\r\n      const soulsConsumed = event.oldStacks - event.newStacks;\r\n      this.castSoulsConsumed += soulsConsumed;\r\n    }\r\n  }\r\n\r\n  countHits() {\r\n    if (!this.soulsConsumedByAmount[this.castSoulsConsumed]) {\r\n      this.soulsConsumedByAmount[this.castSoulsConsumed] = 1;\r\n      this.castSoulsConsumed = 0;\r\n      return;\r\n    }\r\n    this.soulsConsumedByAmount[this.castSoulsConsumed] += 1;\r\n    this.castSoulsConsumed = 0;\r\n  }\r\n\r\n  onFightend() {\r\n    this.countHits();\r\n  }\r\n\r\n  suggestions(when) {\r\n    when(this.suggestionThresholdsEfficiency)\r\n      .addSuggestion((suggest, actual, recommended) => suggest(<>Try to cast <SpellLink id={SPELLS.SPIRIT_BOMB_TALENT.id} /> at 4 or 5 souls.</>)\r\n        .icon(SPELLS.SPIRIT_BOMB_TALENT.icon)\r\n        .actual(i18n._(t('demonhunter.vengeance.suggestions.spiritBomb.soulsConsumed')`${formatPercentage(this.percentGoodCasts)}% of casts at 4+ souls.`))\r\n        .recommended(`>${formatPercentage(recommended)}% is recommended`));\r\n  }\r\n\r\n  statistic() {\r\n    return (\r\n      <Statistic\r\n        position={STATISTIC_ORDER.CORE(6)}\r\n        category={STATISTIC_CATEGORY.TALENTS}\r\n        size=\"flexible\"\r\n        dropdown={(\r\n          <>\r\n            <table className=\"table table-condensed\">\r\n              <thead>\r\n                <tr>\r\n                  <th>Stacks</th>\r\n                  <th>Casts</th>\r\n                </tr>\r\n              </thead>\r\n              <tbody>\r\n                {Object.values(this.soulsConsumedByAmount).map((castAmount, stackAmount) => (\r\n                  <tr key={stackAmount}>\r\n                    <th>{stackAmount}</th>\r\n                    <td>{castAmount}</td>\r\n                  </tr>\r\n                ))}\r\n              </tbody>\r\n            </table>\r\n          </>\r\n        )}\r\n      >\r\n        <BoringSpellValueText spell={SPELLS.SPIRIT_BOMB_TALENT}>\r\n          <>\r\n            {formatPercentage(this.percentGoodCasts)}% <small>good casts</small>\r\n          </>\r\n        </BoringSpellValueText>\r\n      </Statistic>\r\n    );\r\n  }\r\n\r\n}\r\n\r\nexport default SpiritBombSoulsConsume;\r\n","import React from 'react';\r\n\r\nimport Analyzer, { SELECTED_PLAYER } from 'parser/core/Analyzer';\r\nimport Enemies from 'parser/shared/modules/Enemies';\r\nimport DamageTracker from 'parser/shared/modules/AbilityTracker';\r\n\r\nimport SPELLS from 'common/SPELLS/index';\r\nimport SpellLink from 'common/SpellLink';\r\nimport { formatPercentage, formatNumber } from 'common/format';\r\nimport TalentStatisticBox from 'interface/others/TalentStatisticBox';\r\nimport STATISTIC_ORDER from 'interface/others/STATISTIC_ORDER';\r\nimport { i18n } from '@lingui/core';\r\nimport { t } from '@lingui/macro';\r\nimport Events from 'parser/core/Events';\r\n\r\nclass SoulBarrier extends Analyzer {\r\n  get uptime() {\r\n    return this.selectedCombatant.getBuffUptime(SPELLS.SOUL_BARRIER_TALENT.id) / this.owner.fightDuration;\r\n  }\r\n\r\n  get suggestionThresholdsEfficiency() {\r\n    return {\r\n      actual: this.uptime,\r\n      isLessThan: {\r\n        minor: 0.35,\r\n        average: 0.30,\r\n        major: .25,\r\n      },\r\n      style: 'percentage',\r\n    };\r\n  }\r\n\r\n  static dependencies = {\r\n    damageTracker: DamageTracker,\r\n    enemies: Enemies,\r\n  };\r\n  casts = 0;\r\n  totalAbsorbed = 0;\r\n  buffApplied = 0;\r\n  buffRemoved = 0;\r\n  buffLength = 0;\r\n  avgBuffLength = 0;\r\n  totalBuffLength = 0;\r\n\r\n  constructor(...args) {\r\n    super(...args);\r\n    this.active = this.selectedCombatant.hasTalent(SPELLS.SOUL_BARRIER_TALENT.id);\r\n    this.addEventListener(Events.applybuff.to(SELECTED_PLAYER).spell(SPELLS.SOUL_BARRIER_TALENT), this.onApplyBuff);\r\n    this.addEventListener(Events.absorbed.to(SELECTED_PLAYER).spell(SPELLS.SOUL_BARRIER_TALENT), this.onAbsorb);\r\n    this.addEventListener(Events.removebuff.to(SELECTED_PLAYER).spell(SPELLS.SOUL_BARRIER_TALENT), this.onRemoveBuff);\r\n  }\r\n\r\n  onApplyBuff(event) {\r\n    this.casts += 1;\r\n    this.buffApplied = event.timestamp;\r\n  }\r\n\r\n  onAbsorb(event) {\r\n    this.totalAbsorbed += event.amount;\r\n  }\r\n\r\n  onRemoveBuff(event) {\r\n    if (event.ability.guid !== SPELLS.SOUL_BARRIER_TALENT.id) {\r\n      return;\r\n    }\r\n    this.buffRemoved = event.timestamp;\r\n    this.buffLength = this.buffRemoved - this.buffApplied;\r\n    this.totalBuffLength += this.buffLength;\r\n  }\r\n\r\n  suggestions(when) {\r\n    when(this.suggestionThresholdsEfficiency)\r\n      .addSuggestion((suggest, actual, recommended) => suggest(<>Your uptime with <SpellLink id={SPELLS.SOUL_BARRIER_TALENT.id} /> can be improved.</>)\r\n        .icon(SPELLS.SOUL_BARRIER_TALENT.icon)\r\n        .actual(i18n._(t('demonhunter.vengeance.suggestions.soulBarrier.uptime')`${formatPercentage(actual)}% Soul Barrier`))\r\n        .recommended(`>${formatPercentage(recommended)}% is recommended`));\r\n  }\r\n\r\n  statistic() {\r\n    const avgBuffLength = (this.totalBuffLength / this.casts) / 1000;\r\n    return (\r\n      <TalentStatisticBox\r\n        talent={SPELLS.SOUL_BARRIER_TALENT.id}\r\n        position={STATISTIC_ORDER.CORE(7)}\r\n        value={`${formatPercentage(this.uptime)} %`}\r\n        label=\"Soul Barrier uptime\"\r\n        tooltip={(\r\n          <>\r\n            Average Buff Length: <strong>{formatNumber(avgBuffLength)} seconds</strong><br />\r\n            Total Damage Absorbed: <strong>{formatNumber(this.totalAbsorbed)}</strong><br />\r\n            Healing <strong>{this.owner.formatItemHealingDone(this.totalAbsorbed)}</strong><br />\r\n            Total Casts: <strong>{this.casts}</strong>\r\n          </>\r\n        )}\r\n      />\r\n    );\r\n  }\r\n}\r\n\r\nexport default SoulBarrier;\r\n","import Analyzer, { SELECTED_PLAYER } from 'parser/core/Analyzer';\r\nimport SPELLS from 'common/SPELLS/index';\r\nimport Events from 'parser/core/Events';\r\n\r\nconst MAX_SOUL_FRAGMENTS = 5;\r\n\r\nclass SoulFragmentsTracker extends Analyzer {\r\n\r\n  // includes wasted generation\r\n  soulsGenerated = 0;\r\n\r\n  // souls generated above the maximum 5 that can be held\r\n  overcap = 0;\r\n\r\n  soulsSpent = 0;\r\n  currentSouls = 0;\r\n\r\n  constructor(options) {\r\n    super(options);\r\n    this.addEventListener(Events.changebuffstack.by(SELECTED_PLAYER).spell(SPELLS.SOUL_FRAGMENT_STACK), this.onChangeBuffStack);\r\n  }\r\n\r\n  onChangeBuffStack(event) {\r\n    this.currentSouls = event.newStacks;\r\n\r\n    if (event.oldStacks > MAX_SOUL_FRAGMENTS) {\r\n      // transitioning from above the max means this isn't souls being spent, but an excess being corrected\r\n      return;\r\n    }\r\n\r\n    if (event.oldStacks > event.newStacks) {\r\n      // souls are being spent\r\n      const spent = event.oldStacks - event.newStacks;\r\n      this.soulsSpent += spent;\r\n      return;\r\n    }\r\n\r\n    // souls are being generated\r\n    const gained = event.newStacks - event.oldStacks;\r\n    this.soulsGenerated += gained;\r\n\r\n    if (event.newStacks > MAX_SOUL_FRAGMENTS) {\r\n      // generating souls above the max\r\n      this.overcap += (event.newStacks - MAX_SOUL_FRAGMENTS);\r\n    }\r\n  }\r\n}\r\n\r\nexport default SoulFragmentsTracker;\r\nexport { MAX_SOUL_FRAGMENTS };\r\n","import React from 'react';\r\nimport Analyzer, { SELECTED_PLAYER } from 'parser/core/Analyzer';\r\nimport BoringSpellValueText from 'interface/statistics/components/BoringSpellValueText';\r\nimport Statistic from 'interface/statistics/Statistic';\r\nimport STATISTIC_ORDER from 'interface/others/STATISTIC_ORDER';\r\n\r\nimport SPELLS from 'common/SPELLS/index';\r\n\r\nimport Events from 'parser/core/Events';\r\n\r\nimport SoulFragmentsTracker from '../features/SoulFragmentsTracker';\r\nimport MAX_SOUL_FRAGMENTS from '../features/SoulFragmentsTracker';\r\n\r\nconst REMOVE_STACK_BUFFER = 100;\r\n\r\nclass SoulFragmentsConsume extends Analyzer {\r\n  static dependencies = {\r\n    soulFragmentsTracker: SoulFragmentsTracker,\r\n  };\r\n\r\n  castTimestamp = undefined;\r\n  totalSoulsConsumedBySpells = 0;\r\n\r\n  soulsConsumedBySpell = {};\r\n\r\n  constructor(options) {\r\n    super(options);\r\n    this.addEventListener(Events.cast.by(SELECTED_PLAYER).spell([SPELLS.SPIRIT_BOMB_TALENT, SPELLS.SOUL_CLEAVE, SPELLS.SOUL_BARRIER_TALENT]), this.onCast);\r\n    this.addEventListener(Events.changebuffstack.by(SELECTED_PLAYER).spell(SPELLS.SOUL_FRAGMENT_STACK), this.onChangeBuffStack);\r\n  }\r\n\r\n  onCast(event) {\r\n    const spellId = event.ability.guid;\r\n    if (!this.soulsConsumedBySpell[spellId]) {\r\n      this.soulsConsumedBySpell[spellId] = {\r\n        name: event.ability.name,\r\n        souls: 0,\r\n      };\r\n    }\r\n    this.castTimestamp = event.timestamp;\r\n    this.trackedSpell = spellId;\r\n  }\r\n\r\n  onChangeBuffStack(event) {\r\n    if (event.oldStacks < event.newStacks || // not interested in soul gains\r\n      event.oldStacks > MAX_SOUL_FRAGMENTS) { // not interested in overcap corrections\r\n      return;\r\n    }\r\n    if (this.castTimestamp !== undefined && (event.timestamp - this.castTimestamp) < REMOVE_STACK_BUFFER) {\r\n      const consumed = event.oldStacks - event.newStacks;\r\n      this.soulsConsumedBySpell[this.trackedSpell].souls += consumed;\r\n      this.totalSoulsConsumedBySpells += consumed;\r\n    }\r\n  }\r\n\r\n  soulCleaveSouls() {\r\n    if (this.soulsConsumedBySpell[SPELLS.SOUL_CLEAVE.id] === undefined) {\r\n      return 0;\r\n    }\r\n    return this.soulsConsumedBySpell[SPELLS.SOUL_CLEAVE.id].souls;\r\n  }\r\n\r\n  statistic() {\r\n    const soulsByTouch = this.soulFragmentsTracker.soulsGenerated - this.totalSoulsConsumedBySpells;\r\n    return (\r\n      <Statistic\r\n        position={STATISTIC_ORDER.CORE(6)}\r\n        size=\"small\"\r\n        dropdown={(\r\n          <>\r\n            <table className=\"table table-condensed\">\r\n              <thead>\r\n                <tr>\r\n                  <th>Name</th>\r\n                  <th>Souls Consumed</th>\r\n                </tr>\r\n              </thead>\r\n              <tbody>\r\n                {Object.values(this.soulsConsumedBySpell).map((e, i) => (\r\n                  <tr key={i}>\r\n                    <th>{e.name}</th>\r\n                    <td>{e.souls}</td>\r\n                  </tr>\r\n                ))}\r\n                <tr>\r\n                  <th>Overcapped</th>\r\n                  <td>{this.soulFragmentsTracker.overcap}</td>\r\n                </tr>\r\n                <tr>\r\n                  <th>By Touch</th>\r\n                  <td>{soulsByTouch}</td>\r\n                </tr>\r\n              </tbody>\r\n            </table>\r\n          </>\r\n        )}\r\n      >\r\n        <BoringSpellValueText spell={SPELLS.SOUL_FRAGMENT_STACK}>\r\n          <>\r\n            {this.soulFragmentsTracker.soulsSpent} <small>Souls</small>\r\n          </>\r\n        </BoringSpellValueText>\r\n      </Statistic>\r\n\r\n    );\r\n  }\r\n\r\n}\r\n\r\nexport default SoulFragmentsConsume;\r\n","import React from 'react';\r\n\r\nimport Analyzer from 'parser/core/Analyzer';\r\nimport SPELLS from 'common/SPELLS/index';\r\nimport SpellLink from 'common/SpellLink';\r\nimport { formatPercentage } from 'common/format';\r\nimport { i18n } from '@lingui/core';\r\nimport { t } from '@lingui/macro';\r\n\r\nimport SoulFragmentsConsume from '../statistics/SoulFragmentsConsume';\r\nimport SoulFragmentsTracker from '../features/SoulFragmentsTracker';\r\n\r\nclass SoulCleaveSoulsConsumed extends Analyzer {\r\n  get suggestionThresholdsEfficiency() {\r\n    const totalAvailable = this.soulFragmentsTracker.soulsGenerated - this.soulFragmentsTracker.soulsWasted;\r\n    const fractionOnSoulCleave = (totalAvailable === 0) ? 0 : (this.soulFragmentsConsume.soulCleaveSouls() / totalAvailable);\r\n    return {\r\n      actual: fractionOnSoulCleave,\r\n      isGreaterThan: {\r\n        minor: 0.10,\r\n        average: 0.15,\r\n        major: .20,\r\n      },\r\n      style: 'percentage',\r\n    };\r\n  }\r\n\r\n  static dependencies = {\r\n    soulFragmentsConsume: SoulFragmentsConsume,\r\n    soulFragmentsTracker: SoulFragmentsTracker,\r\n  };\r\n\r\n  /* Feed The Demon talent is taken in defensive builds. In those cases you want to generate and consume souls as quickly\r\n   as possible. So how you consume your souls down matter. If you dont take that talent your taking a more balanced\r\n   build meaning you want to consume souls in a way that boosts your dps. That means feeding the souls into spirit\r\n   bomb as efficiently as possible (cast at 4+ souls) for a dps boost and have soul cleave absorb souls as little as\r\n   possible since it provides no extra dps.\r\n  */\r\n  constructor(...args) {\r\n    super(...args);\r\n    this.active = this.selectedCombatant.hasTalent(SPELLS.SPIRIT_BOMB_TALENT.id) && !this.selectedCombatant.hasTalent(SPELLS.FEED_THE_DEMON_TALENT.id);\r\n  }\r\n\r\n  suggestions(when) {\r\n    when(this.suggestionThresholdsEfficiency)\r\n      .addSuggestion((suggest, actual, recommended) => suggest(<>You should avoid consuming souls with <SpellLink id={SPELLS.SOUL_CLEAVE.id} /> and instead try to consume them only with <SpellLink id={SPELLS.SPIRIT_BOMB_TALENT.id} /> for the increased dps. Your talent choices suggests your going for a balanced approch versus a defensive one with <SpellLink id={SPELLS.FEED_THE_DEMON_TALENT.id} />.</>)\r\n        .icon(SPELLS.SOUL_CLEAVE.icon)\r\n        .actual(i18n._(t('demonhunter.vengeance.suggestions.soulCleave.soulsConsumed')`${formatPercentage(actual)}% of souls consumed.`))\r\n        .recommended(`<${formatPercentage(recommended)}% is recommended`));\r\n  }\r\n\r\n}\r\n\r\nexport default SoulCleaveSoulsConsumed;\r\n","import React from 'react';\r\n\r\nimport Analyzer, { SELECTED_PLAYER } from 'parser/core/Analyzer';\r\nimport SpellUsable from 'parser/shared/modules/SpellUsable';\r\n\r\nimport SPELLS from 'common/SPELLS/index';\r\nimport SpellLink from 'common/SpellLink';\r\nimport { formatPercentage } from 'common/format';\r\nimport SCHOOLS from 'game/MAGIC_SCHOOLS';\r\nimport BoringSpellValueText from 'interface/statistics/components/BoringSpellValueText';\r\nimport Statistic from 'interface/statistics/Statistic';\r\nimport STATISTIC_ORDER from 'interface/others/STATISTIC_ORDER';\r\n\r\nimport { i18n } from '@lingui/core';\r\nimport { t } from '@lingui/macro';\r\nimport Events from 'parser/core/Events';\r\n\r\nclass DemonSpikes extends Analyzer {\r\n  get mitigatedUptime() {\r\n    return formatPercentage(this.hitsWithDS / (this.hitsWithDS + this.hitsWithoutDS));\r\n  }\r\n\r\n  get hitsWithDSOffCDPercent() {\r\n    return this.hitsWithDSOffCD / (this.hitsWithDS + this.hitsWithoutDS);\r\n  }\r\n\r\n  get suggestionThresholdsEfficiency() {\r\n    return {\r\n      actual: this.hitsWithDSOffCDPercent,\r\n      isGreaterThan: {\r\n        minor: 0.20,\r\n        average: 0.30,\r\n        major: 0.40,\r\n      },\r\n      style: 'percentage',\r\n    };\r\n  }\r\n\r\n  static dependencies = {\r\n    spellUsable: SpellUsable,\r\n  };\r\n  hitsWithDS = 0;\r\n  hitsWithoutDS = 0;\r\n  hitsWithDSOffCD = 0;\r\n\r\n  constructor(options) {\r\n    super(options);\r\n    this.addEventListener(Events.damage.to(SELECTED_PLAYER), this.onDamageTaken);\r\n  }\r\n\r\n  onDamageTaken(event) {\r\n    // Physical\r\n    if (event.ability.type !== SCHOOLS.ids.PHYSICAL) {\r\n      return;\r\n    }\r\n    if (this.selectedCombatant.hasBuff(SPELLS.DEMON_SPIKES_BUFF.id, event.timestamp)) {\r\n      this.hitsWithDS += 1;\r\n    } else {\r\n      this.hitsWithoutDS += 1;\r\n\r\n      const isAvailable = this.spellUsable.isAvailable(SPELLS.DEMON_SPIKES.id);\r\n      if (isAvailable) {\r\n        this.hitsWithDSOffCD += 1;\r\n      }\r\n    }\r\n  }\r\n\r\n  suggestions(when) {\r\n    when(this.suggestionThresholdsEfficiency)\r\n      .addSuggestion((suggest, actual, recommended) => suggest(<> Cast <SpellLink id={SPELLS.DEMON_SPIKES.id} /> more regularly while actively tanking the boss or when they use a big phsyical attack. You missed having it up for {formatPercentage(this.hitsWithDSOffCDPercent)}% of physical hits.</>)\r\n        .icon(SPELLS.DEMON_SPIKES.icon)\r\n        .actual(i18n._(t('demonhunter.vengeance.suggestions.demonSpikes.unmitgatedHits')`${formatPercentage(actual)}% unmitigated physical hits`))\r\n        .recommended(`<${formatPercentage(recommended)}% is recommended`));\r\n  }\r\n\r\n  statistic() {\r\n    const demonSpikesUptime = this.selectedCombatant.getBuffUptime(SPELLS.DEMON_SPIKES_BUFF.id);\r\n\r\n    const demonSpikesUptimePercentage = demonSpikesUptime / this.owner.fightDuration;\r\n\r\n    return (\r\n      <Statistic\r\n        position={STATISTIC_ORDER.CORE(2)}\r\n        size=\"flexible\"\r\n        tooltip={(\r\n          <>\r\n            Demon Spikes usage breakdown:\r\n            <ul>\r\n              <li>You were hit <strong>{this.hitsWithDS}</strong> times with your Demon Spikes buff.</li>\r\n              <li>You were hit <strong>{this.hitsWithoutDS}</strong> times <strong><em>without</em></strong> your Demon Spikes buff.</li>\r\n              <li>You were hit <strong>{this.hitsWithDSOffCD}</strong> times <strong><em>with</em></strong> Demon Spikes avalible for use but not used.</li>\r\n            </ul>\r\n            <b>Your overall uptime was {formatPercentage(demonSpikesUptimePercentage)}%</b>.\r\n          </>\r\n        )}\r\n      >\r\n        <BoringSpellValueText spell={SPELLS.DEMON_SPIKES}>\r\n          <>\r\n            {this.mitigatedUptime}% <small>hits mitigated</small>\r\n          </>\r\n        </BoringSpellValueText>\r\n      </Statistic>\r\n    );\r\n  }\r\n}\r\n\r\nexport default DemonSpikes;\r\n","import React from 'react';\r\n\r\nimport Analyzer from 'parser/core/Analyzer';\r\nimport AbilityTracker from 'parser/shared/modules/AbilityTracker';\r\n\r\nimport SPELLS from 'common/SPELLS/index';\r\nimport SpellLink from 'common/SpellLink';\r\n\r\nimport { formatNumber, formatPercentage } from 'common/format';\r\nimport BoringSpellValueText from 'interface/statistics/components/BoringSpellValueText';\r\nimport Statistic from 'interface/statistics/Statistic';\r\nimport STATISTIC_ORDER from 'interface/others/STATISTIC_ORDER';\r\nimport { i18n } from '@lingui/core';\r\nimport { t } from '@lingui/macro';\r\n\r\nimport SoulFragmentsTracker from '../features/SoulFragmentsTracker';\r\n\r\nclass SoulsOvercap extends Analyzer {\r\n  get suggestionThresholdsEfficiency() {\r\n    return {\r\n      actual: this.wasterPerGenerated(),\r\n      isGreaterThan: {\r\n        minor: 0.05,\r\n        average: 0.10,\r\n        major: 0.15,\r\n      },\r\n      style: 'percentage',\r\n    };\r\n  }\r\n\r\n  static dependencies = {\r\n    abilityTracker: AbilityTracker,\r\n    soulFragmentsTracker: SoulFragmentsTracker,\r\n  };\r\n\r\n  /* Feed The Demon talent is taken in defensive builds. In those cases you want to generate and consume souls as quickly\r\n as possible. So how you consume your souls down matter. If you dont take that talent your taking a more balanced\r\n build meaning you want to consume souls in a way that boosts your dps. That means feeding the souls into spirit\r\n bomb as efficiently as possible (cast at 4+ souls) for a dps boost and have soul cleave absorb souls as little as\r\n possible since it provides no extra dps.\r\n*/\r\n  constructor(...args) {\r\n    super(...args);\r\n    this.active = this.selectedCombatant.hasTalent(SPELLS.SPIRIT_BOMB_TALENT.id) && !this.selectedCombatant.hasTalent(SPELLS.FEED_THE_DEMON_TALENT.id);\r\n  }\r\n\r\n  wasterPerGenerated() {\r\n    return this.soulFragmentsTracker.soulsWasted / this.soulFragmentsTracker.soulsGenerated;\r\n  }\r\n\r\n  suggestions(when) {\r\n    when(this.suggestionThresholdsEfficiency)\r\n      .addSuggestion((suggest, actual, recommended) => suggest(<>You are generating <SpellLink id={SPELLS.SOUL_FRAGMENT.id} />s when you are already at 5 souls. These are auto consumed. You are missing out on the extra damage consuming them with <SpellLink id={SPELLS.SPIRIT_BOMB_TALENT.id} /> provides.</>)\r\n        .icon(SPELLS.SOUL_FRAGMENT.icon)\r\n        .actual(i18n._(t('demonhunter.vengeance.suggestions.souls.wasted')`${formatPercentage(this.wasterPerGenerated())}% wasted Soul Fragments.`))\r\n        .recommended(`${formatPercentage(recommended)}% or less is recommended`));\r\n  }\r\n\r\n  statistic() {\r\n    return (\r\n      <Statistic\r\n        position={STATISTIC_ORDER.CORE(5)}\r\n        size=\"flexible\"\r\n        tooltip={(\r\n          <>\r\n            You generated {formatNumber(this.soulFragmentsTracker.soulsWasted)} souls at cap. These are absorbed automatically and aren't avalible to boost Spirit Bomb's damage.<br />\r\n            Total Soul Fragments generated: {formatNumber(this.soulFragmentsTracker.soulsGenerated)}<br />\r\n            Total Soul Fragments spent: {formatNumber(this.soulFragmentsTracker.soulsSpent)}<br />\r\n            At the end of the fight, you had {formatNumber(this.soulFragmentsTracker.currentSouls)} unused Soul Fragments.\r\n          </>\r\n        )}\r\n      >\r\n        <BoringSpellValueText spell={SPELLS.SOUL_FRAGMENT}>\r\n          <>\r\n            {formatPercentage(this.wasterPerGenerated())}% <small>souls</small>\r\n          </>\r\n        </BoringSpellValueText>\r\n      </Statistic>\r\n    );\r\n  }\r\n}\r\n\r\nexport default SoulsOvercap;\r\n","import React from 'react';\r\nimport PropTypes from 'prop-types';\r\n\r\nimport SPELLS from 'common/SPELLS';\r\nimport SpellLink from 'common/SpellLink';\r\n\r\nimport Checklist from 'parser/shared/modules/features/Checklist';\r\nimport Rule from 'parser/shared/modules/features/Checklist/Rule';\r\nimport GenericCastEfficiencyRequirement from 'parser/shared/modules/features/Checklist/GenericCastEfficiencyRequirement';\r\nimport PreparationRule from 'parser/shared/modules/features/Checklist/PreparationRule';\r\nimport Requirement from 'parser/shared/modules/features/Checklist/Requirement';\r\n\r\nconst VengeanceDemonHunterChecklist = ({ combatant, castEfficiency, thresholds }) => {\r\n  const AbilityRequirement = props => (\r\n    <GenericCastEfficiencyRequirement\r\n      castEfficiency={castEfficiency.getCastEfficiencyForSpellId(props.spell)}\r\n      {...props}\r\n    />\r\n  );\r\n  AbilityRequirement.propTypes = {\r\n    spell: PropTypes.number.isRequired,\r\n  };\r\n\r\n  return (\r\n    <Checklist>\r\n\r\n      <Rule\r\n        name=\"Use your short cooldowns\"\r\n        description={(\r\n          <>\r\n            These should generally always be on recharge to maximize DPS, HPS and efficiency.<br />\r\n            <a href=\"http://www.wowhead.com/vengeance-demon-hunter-rotation-guide#rotation-priority-list\" target=\"_blank\" rel=\"noopener noreferrer\">More info.</a>\r\n          </>\r\n        )}\r\n      >\r\n        <AbilityRequirement spell={SPELLS.IMMOLATION_AURA.id} />\r\n        <AbilityRequirement spell={SPELLS.SIGIL_OF_FLAME_CONCENTRATED.id} />\r\n        {combatant.hasTalent(SPELLS.FRACTURE_TALENT.id) && <AbilityRequirement spell={SPELLS.FRACTURE_TALENT.id} />}\r\n        {combatant.hasTalent(SPELLS.FELBLADE_TALENT.id) && <AbilityRequirement spell={SPELLS.FELBLADE_TALENT.id} />}\r\n        {combatant.hasTalent(SPELLS.FEL_DEVASTATION_TALENT.id) && <AbilityRequirement spell={SPELLS.FEL_DEVASTATION_TALENT.id} />}\r\n      </Rule>\r\n\r\n      <Rule\r\n        name=\"Use your rotational defensive/healing abilities\"\r\n        description={(\r\n          <>\r\n            Use these to block damage spikes and keep damage smooth to reduce external healing required.<br />\r\n            <a href=\"http://www.wowhead.com/vengeance-demon-hunter-rotation-guide#rotation-priority-list\" target=\"_blank\" rel=\"noopener noreferrer\">More info.</a>\r\n          </>\r\n        )}\r\n      >\r\n        <Requirement\r\n          name={(\r\n            <>\r\n              <SpellLink id={SPELLS.DEMON_SPIKES.id} />\r\n            </>\r\n          )}\r\n          thresholds={thresholds.demonSpikes}\r\n        />\r\n        {combatant.hasTalent(SPELLS.SPIRIT_BOMB_TALENT.id) && !combatant.hasTalent(SPELLS.FEED_THE_DEMON_TALENT.id) && (\r\n          <Requirement\r\n            name={(\r\n              <>\r\n                <SpellLink id={SPELLS.SPIRIT_BOMB_TALENT.id} /> 4+ souls casts\r\n              </>\r\n            )}\r\n            thresholds={thresholds.spiritBombSoulsConsume}\r\n          />\r\n        )}\r\n        {(!combatant.hasTalent(SPELLS.FEED_THE_DEMON_TALENT.id) && combatant.hasTalent(SPELLS.SPIRIT_BOMB_TALENT.id)) && (\r\n          <Requirement\r\n            name={(\r\n              <>\r\n                <SpellLink id={SPELLS.SOUL_CLEAVE.id} /> souls consumed\r\n              </>\r\n            )}\r\n            thresholds={thresholds.soulCleaveSoulsConsumed}\r\n          />\r\n        )}\r\n        {combatant.hasTalent(SPELLS.SOUL_BARRIER_TALENT.id) && <AbilityRequirement spell={SPELLS.SOUL_BARRIER_TALENT.id} />}\r\n      </Rule>\r\n\r\n      <Rule\r\n        name=\"Use your long defensive/healing cooldowns\"\r\n        description={(\r\n          <>\r\n            Use these to mitigate large damage spikes or in emergency situations.<br />\r\n            <a href=\"http://www.wowhead.com/vengeance-demon-hunter-rotation-guide#rotation-priority-list\" target=\"_blank\" rel=\"noopener noreferrer\">More info.</a>\r\n          </>\r\n        )}\r\n      >\r\n        <AbilityRequirement spell={SPELLS.METAMORPHOSIS_TANK.id} />\r\n        <AbilityRequirement spell={SPELLS.FIERY_BRAND.id} />\r\n      </Rule>\r\n\r\n      {(combatant.hasTalent(SPELLS.SPIRIT_BOMB_TALENT.id) || combatant.hasTalent(SPELLS.VOID_REAVER_TALENT.id)) && (\r\n        <Rule\r\n          name=\"Maintain your buffs and debuffs\"\r\n          description={(\r\n            <>\r\n              It is important to maintain these as they contribute a large amount to your DPS and HPS.<br />\r\n              <a href=\"http://www.wowhead.com/vengeance-demon-hunter-rotation-guide#rotation-priority-list\" target=\"_blank\" rel=\"noopener noreferrer\">More info.</a>\r\n            </>\r\n          )}\r\n        >\r\n          {combatant.hasTalent(SPELLS.SPIRIT_BOMB_TALENT.id) && (\r\n            <Requirement\r\n              name={(\r\n                <>\r\n                  <SpellLink id={SPELLS.FRAILTY_SPIRIT_BOMB_DEBUFF.id} /> debuff uptime\r\n                </>\r\n              )}\r\n              thresholds={thresholds.spiritBombFrailtyDebuff}\r\n            />\r\n          )}\r\n          {combatant.hasTalent(SPELLS.VOID_REAVER_TALENT.id) && (\r\n            <Requirement\r\n              name={(\r\n                <>\r\n                  <SpellLink id={SPELLS.VOID_REAVER_TALENT.id} /> debuff uptime\r\n                </>\r\n              )}\r\n              thresholds={thresholds.voidReaverDebuff}\r\n            />\r\n          )}\r\n        </Rule>\r\n      )}\r\n\r\n      <PreparationRule thresholds={thresholds} />\r\n\r\n    </Checklist>\r\n  );\r\n};\r\n\r\nVengeanceDemonHunterChecklist.propTypes = {\r\n  castEfficiency: PropTypes.object.isRequired,\r\n  combatant: PropTypes.shape({\r\n    hasTalent: PropTypes.func.isRequired,\r\n  }).isRequired,\r\n  thresholds: PropTypes.object.isRequired,\r\n};\r\n\r\nexport default VengeanceDemonHunterChecklist;\r\n","import React from 'react';\r\n\r\nimport BaseModule from 'parser/shared/modules/features/Checklist/Module';\r\nimport CastEfficiency from 'parser/shared/modules/CastEfficiency';\r\nimport Combatants from 'parser/shared/modules/Combatants';\r\nimport PreparationRuleAnalyzer from 'parser/shared/modules/features/Checklist/PreparationRuleAnalyzer';\r\n\r\n// Buffs-Debuffs\r\nimport SpiritBombFrailtyDebuff from '../../talents/SpiritBombFrailtyDebuff';\r\nimport VoidReaverDebuff from '../../talents/VoidReaverDebuff';\r\n\r\n// Talents\r\nimport SpiritBombSoulsConsume from '../../talents/SpiritBombSoulsConsume';\r\nimport SoulBarrier from '../../talents/SoulBarrier';\r\n\r\n//Spells\r\nimport SoulCleaveSoulsConsumed from '../../spells/SoulCleaveSoulsConsumed';\r\nimport DemonSpikes from '../../spells/DemonSpikes';\r\n\r\n// Resources\r\nimport PainDetails from '../../pain/PainDetails';\r\nimport SoulsOvercap from '../../statistics/SoulsOvercap';\r\n\r\nimport AlwaysBeCasting from '../AlwaysBeCasting';\r\n\r\nimport Component from './Component';\r\n\r\nclass Checklist extends BaseModule {\r\n  static dependencies = {\r\n    combatants: Combatants,\r\n    castEfficiency: CastEfficiency,\r\n    alwaysBeCasting: AlwaysBeCasting,\r\n    preparationRuleAnalyzer: PreparationRuleAnalyzer,\r\n\r\n    // Buffs-Debuffs\r\n    spiritBombFrailtyDebuff: SpiritBombFrailtyDebuff,\r\n    voidReaverDebuff: VoidReaverDebuff,\r\n\r\n    // Talents\r\n    spiritBombSoulsConsume: SpiritBombSoulsConsume,\r\n    soulBarrier: SoulBarrier,\r\n\r\n    // Spells\r\n    soulCleaveSoulsConsumed: SoulCleaveSoulsConsumed,\r\n    demonSpikes: DemonSpikes,\r\n\r\n    // Resources\r\n    painDetails: PainDetails,\r\n    soulsOvercap: SoulsOvercap,\r\n\r\n  };\r\n\r\n  render() {\r\n    return (\r\n      <Component\r\n        combatant={this.combatants.selected}\r\n        castEfficiency={this.castEfficiency}\r\n        thresholds={{\r\n          ...this.preparationRuleAnalyzer.thresholds,\r\n\r\n          downtimeSuggestionThresholds: this.alwaysBeCasting.downtimeSuggestionThresholds,\r\n          spiritBombFrailtyDebuff: this.spiritBombFrailtyDebuff.uptimeSuggestionThresholds,\r\n          voidReaverDebuff: this.voidReaverDebuff.uptimeSuggestionThresholds,\r\n          spiritBombSoulsConsume: this.spiritBombSoulsConsume.suggestionThresholdsEfficiency,\r\n          soulBarrier: this.soulBarrier.suggestionThresholdsEfficiency,\r\n          soulCleaveSoulsConsumed: this.soulCleaveSoulsConsumed.suggestionThresholdsEfficiency,\r\n          demonSpikes: this.demonSpikes.suggestionThresholdsEfficiency,\r\n          painDetails: this.painDetails.suggestionThresholds,\r\n          soulsOvercap: this.soulsOvercap.suggestionThresholdsEfficiency,\r\n        }}\r\n      />\r\n    );\r\n  }\r\n}\r\n\r\nexport default Checklist;\r\n","import React from 'react';\r\nimport Analyzer, { SELECTED_PLAYER } from 'parser/core/Analyzer';\r\nimport SPELLS from 'common/SPELLS';\r\nimport { formatPercentage, formatNumber } from 'common/format';\r\nimport TalentStatisticBox from 'interface/others/TalentStatisticBox';\r\nimport STATISTIC_ORDER from 'interface/others/STATISTIC_ORDER';\r\nimport SpellUsable from 'parser/shared/modules/SpellUsable';\r\nimport AbilityTracker from 'parser/shared/modules/AbilityTracker';\r\nimport Events from 'parser/core/Events';\r\n\r\nconst COOLDOWN_REDUCTION_MS = 500;\r\n\r\n//WCL https://www.warcraftlogs.com/reports/ZVJr2MPNx3RCvX6B/#fight=6&source=184\r\nclass FeedTheDemon extends Analyzer {\r\n  get FTDReduction() {\r\n    return this.totalCooldownReduction;\r\n  }\r\n\r\n  get FTDReductionWasted() {\r\n    return this.totalCooldownReductionWasted;\r\n  }\r\n\r\n  get reduction() {\r\n    return this.FTDReduction / 1000;\r\n  }\r\n\r\n  get wastedReduction() {\r\n    return this.FTDReductionWasted / 1000;\r\n  }\r\n\r\n  get averageReduction() {\r\n    const casts = this.abilityTracker.getAbility(SPELLS.DEMON_SPIKES.id).casts;\r\n    return (this.reduction / casts) || 0;\r\n  }\r\n\r\n  get wastedPercent() {\r\n    return this.wastedReduction / (this.wastedReduction + this.reduction);\r\n  }\r\n\r\n  static dependencies = {\r\n    abilityTracker: AbilityTracker,\r\n    spellUsable: SpellUsable,\r\n  };\r\n  casts = 0;\r\n  totalCooldownReductionWasted = 0;\r\n  totalCooldownReduction = 0;\r\n\r\n  constructor(...args) {\r\n    super(...args);\r\n    this.active = this.selectedCombatant.hasTalent(SPELLS.FEED_THE_DEMON_TALENT.id);\r\n    this.addEventListener(Events.heal.by(SELECTED_PLAYER).spell(SPELLS.CONSUME_SOUL_VDH), this.onHeal);\r\n  }\r\n\r\n  onHeal(event) {\r\n    if (!this.spellUsable.isOnCooldown(SPELLS.DEMON_SPIKES.id)) {\r\n      this.totalCooldownReductionWasted += COOLDOWN_REDUCTION_MS;\r\n    } else {\r\n      const effectiveReduction = this.spellUsable.reduceCooldown(SPELLS.DEMON_SPIKES.id, COOLDOWN_REDUCTION_MS);\r\n      this.totalCooldownReduction += effectiveReduction;\r\n      this.totalCooldownReductionWasted += COOLDOWN_REDUCTION_MS - effectiveReduction;\r\n    }\r\n  }\r\n\r\n  statistic() {\r\n    return (\r\n      <TalentStatisticBox\r\n        talent={SPELLS.FEED_THE_DEMON_TALENT.id}\r\n        position={STATISTIC_ORDER.CORE(6)}\r\n        value={`${formatNumber(this.averageReduction)} sec`}\r\n        label=\"Feed the Demon average reduction\"\r\n        tooltip={(\r\n          <>\r\n            {formatNumber(this.reduction)} sec total effective reduction.<br />\r\n            {formatNumber(this.wastedReduction)} sec ({formatPercentage(this.wastedPercent)}%) wasted reduction.\r\n          </>\r\n        )}\r\n      />\r\n    );\r\n  }\r\n}\r\n\r\nexport default FeedTheDemon;\r\n","import React from 'react';\r\nimport Analyzer, { SELECTED_PLAYER } from 'parser/core/Analyzer';\r\nimport SPELLS from 'common/SPELLS';\r\nimport TalentStatisticBox from 'interface/others/TalentStatisticBox';\r\nimport STATISTIC_ORDER from 'interface/others/STATISTIC_ORDER';\r\nimport Events from 'parser/core/Events';\r\n\r\n//WCL https://www.warcraftlogs.com/reports/rz6WxLbAmTgnFXQP/#fight=3&source=3\r\nclass Gluttony extends Analyzer {\r\n\r\n  get gluttonyProcs() {\r\n    return this.buffCasts - this.metaCast;\r\n  }\r\n\r\n  buffCasts = 0;\r\n  metaCast = 0;\r\n\r\n  constructor(...args) {\r\n    super(...args);\r\n    this.active = this.selectedCombatant.hasTalent(SPELLS.GLUTTONY_TALENT.id);\r\n    this.addEventListener(Events.applybuff.to(SELECTED_PLAYER).spell(SPELLS.METAMORPHOSIS_TANK), this.onApplyBuff);\r\n    this.addEventListener(Events.cast.by(SELECTED_PLAYER).spell(SPELLS.METAMORPHOSIS_TANK), this.onCast);\r\n  }\r\n\r\n  onApplyBuff(event) {\r\n    this.buffCasts += 1;\r\n  }\r\n\r\n  onCast(event) {\r\n    this.metaCast += 1;\r\n  }\r\n\r\n  statistic() {\r\n    return (\r\n      <TalentStatisticBox\r\n        talent={SPELLS.GLUTTONY_TALENT.id}\r\n        position={STATISTIC_ORDER.CORE(7)}\r\n        value={`${this.gluttonyProcs}`}\r\n        label=\"Gluttony procs\"\r\n      />\r\n    );\r\n  }\r\n}\r\n\r\nexport default Gluttony;\r\n","import React from 'react';\r\nimport Analyzer, { SELECTED_PLAYER } from 'parser/core/Analyzer';\r\nimport SPELLS from 'common/SPELLS/index';\r\nimport { formatNumber } from 'common/format';\r\nimport TalentStatisticBox from 'interface/others/TalentStatisticBox';\r\nimport STATISTIC_ORDER from 'interface/others/STATISTIC_ORDER';\r\nimport Events from 'parser/core/Events';\r\n\r\n//WCL: https://www.warcraftlogs.com/reports/JxyY7HCDcjqMA9tf/#fight=1&source=15\r\nclass BurningAlive extends Analyzer {\r\n\r\n  damage = 0;\r\n\r\n  constructor(...args) {\r\n    super(...args);\r\n    this.active = this.selectedCombatant.hasTalent(SPELLS.BURNING_ALIVE_TALENT.id);\r\n    this.addEventListener(Events.damage.by(SELECTED_PLAYER).spell(SPELLS.FIERY_BRAND_DOT), this.onDamage);\r\n  }\r\n\r\n  onDamage(event) {\r\n    this.damage += event.amount;\r\n  }\r\n\r\n  statistic() {\r\n    return (\r\n      <TalentStatisticBox\r\n        talent={SPELLS.BURNING_ALIVE_TALENT.id}\r\n        position={STATISTIC_ORDER.CORE(10)}\r\n        value={this.owner.formatItemDamageDone(this.damage)}\r\n        tooltip={<>This shows the extra dps that the talent provides.<br /><strong>Total extra damage:</strong> {formatNumber(this.damage)}</>}\r\n      />\r\n    );\r\n  }\r\n}\r\n\r\nexport default BurningAlive;\r\n","import React from 'react';\r\nimport Analyzer, { SELECTED_PLAYER } from 'parser/core/Analyzer';\r\nimport SPELLS from 'common/SPELLS/index';\r\nimport TalentStatisticBox from 'interface/others/TalentStatisticBox';\r\nimport STATISTIC_ORDER from 'interface/others/STATISTIC_ORDER';\r\nimport { formatNumber, formatPercentage } from 'common/format';\r\nimport Events from 'parser/core/Events';\r\n\r\n//WCL: https://www.warcraftlogs.com/reports/7DNACRhnaKzBfHLM/#fight=1&source=19\r\nclass FeastOfSouls extends Analyzer {\r\n\r\n  heal = 0;\r\n  overHeal = 0;\r\n\r\n  constructor(...args) {\r\n    super(...args);\r\n    this.active = this.selectedCombatant.hasTalent(SPELLS.FEAST_OF_SOULS_TALENT.id);\r\n    this.addEventListener(Events.heal.by(SELECTED_PLAYER).spell(SPELLS.FEAST_OF_SOULS_HEAL), this.onHeal);\r\n  }\r\n\r\n  onHeal(event) {\r\n    this.heal += event.amount;\r\n    this.overHeal += event.overheal || 0;\r\n  }\r\n\r\n  statistic() {\r\n    const overHealPercent = this.overHeal / (this.overHeal + this.heal);\r\n    return (\r\n      <TalentStatisticBox\r\n        talent={SPELLS.FEAST_OF_SOULS_TALENT.id}\r\n        position={STATISTIC_ORDER.CORE(8)}\r\n        value={this.owner.formatItemHealingDone(this.heal)}\r\n        tooltip={(\r\n          <>\r\n            This shows the extra hps that the talent provides.<br />\r\n            <strong>Effective healing:</strong> {formatNumber(this.heal)}<br />\r\n            <strong>Overhealing:</strong> {formatNumber(this.overHeal)} | {formatPercentage(overHealPercent)}%\r\n          </>\r\n        )}\r\n      />\r\n    );\r\n  }\r\n}\r\n\r\nexport default FeastOfSouls;\r\n","import React from 'react';\r\nimport Analyzer, { SELECTED_PLAYER } from 'parser/core/Analyzer';\r\nimport SPELLS from 'common/SPELLS/index';\r\nimport { formatNumber } from 'common/format';\r\nimport TalentStatisticBox from 'interface/others/TalentStatisticBox';\r\nimport STATISTIC_ORDER from 'interface/others/STATISTIC_ORDER';\r\nimport calculateEffectiveDamage from 'parser/core/calculateEffectiveDamage';\r\nimport Events from 'parser/core/Events';\r\n\r\nconst PERCENT_BUFF = 0.20;\r\n\r\n//WCL: https://www.warcraftlogs.com/reports/JxyY7HCDcjqMA9tf/#fight=1&source=15\r\nclass AgonizingFlames extends Analyzer {\r\n\r\n  damage = 0;\r\n\r\n  constructor(...args) {\r\n    super(...args);\r\n    this.active = this.selectedCombatant.hasTalent(SPELLS.AGONIZING_FLAMES_TALENT.id);\r\n    this.addEventListener(Events.damage.by(SELECTED_PLAYER).spell([SPELLS.IMMOLATION_AURA_FIRST_STRIKE, SPELLS.IMMOLATION_AURA]), this.onDamage);\r\n  }\r\n\r\n  onDamage(event) {\r\n    this.damage += calculateEffectiveDamage(event, PERCENT_BUFF);\r\n  }\r\n\r\n  statistic() {\r\n    return (\r\n      <TalentStatisticBox\r\n        talent={SPELLS.AGONIZING_FLAMES_TALENT.id}\r\n        position={STATISTIC_ORDER.CORE(9)}\r\n        value={this.owner.formatItemDamageDone(this.damage)}\r\n        tooltip={<>This shows the extra dps that the talent provides.<br /><strong>Total extra damage:</strong> {formatNumber(this.damage)}</>}\r\n      />\r\n    );\r\n  }\r\n}\r\n\r\nexport default AgonizingFlames;\r\n","import React from 'react';\r\nimport TalentStatisticBox from 'interface/others/TalentStatisticBox';\r\nimport STATISTIC_ORDER from 'interface/others/STATISTIC_ORDER';\r\n\r\nimport SPELLS from 'common/SPELLS/index';\r\nimport Analyzer, { SELECTED_PLAYER } from 'parser/core/Analyzer';\r\nimport { formatNumber } from 'common/format';\r\nimport SCHOOLS from 'game/MAGIC_SCHOOLS';\r\nimport calculateEffectiveDamage from 'parser/core/calculateEffectiveDamage';\r\nimport Events from 'parser/core/Events';\r\n\r\nconst PHYSICAL_DAMAGE_INCREASE = 0.15;\r\n\r\nclass RazorSpikes extends Analyzer {\r\n//WCL: https://www.warcraftlogs.com/reports/rz6WxLbAmTgnFXQP/#fight=3&source=3\r\n\r\n  damage = 0;\r\n\r\n  constructor(...args) {\r\n    super(...args);\r\n    this.active = this.selectedCombatant.hasTalent(SPELLS.RAZOR_SPIKES_TALENT.id);\r\n    this.addEventListener(Events.damage.by(SELECTED_PLAYER), this.onDamage);\r\n  }\r\n\r\n  onDamage(event) {\r\n    // Physical\r\n    if (event.ability.type !== SCHOOLS.ids.PHYSICAL) {\r\n      return;\r\n    }\r\n    if (this.selectedCombatant.hasBuff(SPELLS.DEMON_SPIKES_BUFF.id, event.timestamp)) {\r\n      this.damage += calculateEffectiveDamage(event, PHYSICAL_DAMAGE_INCREASE);\r\n    }\r\n  }\r\n\r\n  statistic() {\r\n    return (\r\n      <TalentStatisticBox\r\n        talent={SPELLS.RAZOR_SPIKES_TALENT.id}\r\n        position={STATISTIC_ORDER.CORE(5)}\r\n        value={this.owner.formatItemDamageDone(this.damage)}\r\n        tooltip={<>This shows the extra dps that the talent provides.<br /><strong>Total extra damage:</strong> {formatNumber(this.damage)}</>}\r\n      />\r\n    );\r\n  }\r\n}\r\n\r\nexport default RazorSpikes;\r\n","import React from 'react';\r\n\r\nimport Analyzer from 'parser/core/Analyzer';\r\nimport AbilityTracker from 'parser/shared/modules/AbilityTracker';\r\n\r\nimport SPELLS from 'common/SPELLS/index';\r\nimport { formatPercentage, formatThousands, formatDuration } from 'common/format';\r\n\r\nimport BoringSpellValueText from 'interface/statistics/components/BoringSpellValueText';\r\nimport Statistic from 'interface/statistics/Statistic';\r\nimport STATISTIC_ORDER from 'interface/others/STATISTIC_ORDER';\r\nimport UptimeIcon from 'interface/icons/Uptime';\r\n\r\nclass ImmolationAura extends Analyzer {\r\n  static dependencies = {\r\n    abilityTracker: AbilityTracker,\r\n  };\r\n\r\n  statistic() {\r\n    const immolationAuraUptime = this.selectedCombatant.getBuffUptime(SPELLS.IMMOLATION_AURA.id);\r\n\r\n    const immolationAuraUptimePercentage = immolationAuraUptime / this.owner.fightDuration;\r\n\r\n    this.immolationAuraDamage = this.abilityTracker.getAbility(SPELLS.IMMOLATION_AURA_FIRST_STRIKE.id).damageEffective + this.abilityTracker.getAbility(SPELLS.IMMOLATION_AURA.id).damageEffective;\r\n\r\n    return (\r\n      <Statistic\r\n        position={STATISTIC_ORDER.CORE(4)}\r\n        size=\"flexible\"\r\n        tooltip={\r\n          <>\r\n            The Immolation Aura total damage was {formatThousands(this.immolationAuraDamage)}.<br />\r\n            The Immolation Aura total uptime was {formatDuration(immolationAuraUptime / 1000)}\r\n          </>\r\n        }\r\n      >\r\n        <BoringSpellValueText spell={SPELLS.IMMOLATION_AURA}>\r\n          <>\r\n            <UptimeIcon /> {formatPercentage(immolationAuraUptimePercentage)}% <small>uptime</small>\r\n          </>\r\n        </BoringSpellValueText>\r\n      </Statistic>\r\n    );\r\n  }\r\n}\r\n\r\nexport default ImmolationAura;\r\n","import React from 'react';\r\n\r\nimport Analyzer, { SELECTED_PLAYER } from 'parser/core/Analyzer';\r\nimport AbilityTracker from 'parser/shared/modules/AbilityTracker';\r\nimport Enemies from 'parser/shared/modules/Enemies';\r\n\r\nimport SPELLS from 'common/SPELLS/index';\r\n\r\nimport { formatPercentage, formatThousands, formatDuration } from 'common/format';\r\nimport BoringSpellValueText from 'interface/statistics/components/BoringSpellValueText';\r\nimport Statistic from 'interface/statistics/Statistic';\r\nimport STATISTIC_ORDER from 'interface/others/STATISTIC_ORDER';\r\nimport Events from 'parser/core/Events';\r\n\r\n/*Purpose of this module is to track the sigil of flame debuff and see when 2 of them overlap for a damage increase.\r\n* This is important for damage and also squeezing extra fire damage during Fiery Brand because of the\r\n* Fiery Demise talent that increases your fire damage during that CD. Also due to trait charred blades that heals\r\n* us for 15% of the fire damage we do it also increases our self healing.*/\r\nclass SigilOfFlame extends Analyzer {\r\n  static dependencies = {\r\n    abilityTracker: AbilityTracker,\r\n    enemies: Enemies,\r\n  };\r\n\r\n  successfulStack = 0;\r\n  lastApplicationTimestamp = 0;\r\n  currentApplicationTimestamp = 0;\r\n\r\n  constructor(options) {\r\n    super(options);\r\n    this.addEventListener(Events.applydebuff.by(SELECTED_PLAYER).spell(SPELLS.SIGIL_OF_FLAME_DEBUFF), this.onApplyDebuff);\r\n  }\r\n\r\n  onApplyDebuff(event) {\r\n    let timeStampDifference = null;\r\n    if (this.lastApplicationTimestamp === 0) {\r\n      this.lastApplicationTimestamp = event.timestamp;\r\n      return;\r\n    }\r\n    this.currentApplicationTimestamp = event.timestamp;\r\n    timeStampDifference = this.currentApplicationTimestamp - this.lastApplicationTimestamp;\r\n\r\n    /*3 sec is the cut off because we want most of the 2 buffs to stack. So if the second\r\n    buff application isnt within 3 seconds of the first its effectiveness is reduced quiet a bit*/\r\n    if ((timeStampDifference / 1000) < 3) {\r\n      this.successfulStack += 1;\r\n    }\r\n    this.lastApplicationTimestamp = this.currentApplicationTimestamp;\r\n  }\r\n\r\n  statistic() {\r\n    const sigilOfFlameUptime = this.enemies.getBuffUptime(SPELLS.SIGIL_OF_FLAME_DEBUFF.id);\r\n    const sigilOfFlameUptimePercentage = sigilOfFlameUptime / this.owner.fightDuration;\r\n    const sigilOfFlameDamage = this.abilityTracker.getAbility(SPELLS.SIGIL_OF_FLAME_DEBUFF.id).damageEffective;\r\n\r\n    return (\r\n      <Statistic\r\n        position={STATISTIC_ORDER.CORE(5)}\r\n        size=\"flexible\"\r\n        tooltip={(\r\n          <>\r\n            Having two stacks of Sigil Of Flames on the boss is a damage increase.<br /><br />\r\n\r\n            Sigil of Flame uptime: {formatPercentage(sigilOfFlameUptimePercentage)}% / ({formatDuration(sigilOfFlameUptime / 1000)})<br />\r\n            Sigil of Flame total damage: {formatThousands(sigilOfFlameDamage)}.\r\n          </>\r\n        )}\r\n      >\r\n        <BoringSpellValueText spell={SPELLS.SIGIL_OF_FLAME_CONCENTRATED}>\r\n          <>\r\n            {this.successfulStack} <small>times</small>\r\n          </>\r\n        </BoringSpellValueText>\r\n      </Statistic>\r\n    );\r\n  }\r\n}\r\n\r\nexport default SigilOfFlame;\r\n","import CoreCombatLogParser from 'parser/core/CombatLogParser';\r\n\r\nimport PainTracker from './modules/pain/PainTracker';\r\nimport PainDetails from './modules/pain/PainDetails';\r\n\r\nimport AlwaysBeCasting from './modules/features/AlwaysBeCasting';\r\nimport Abilities from './modules/Abilities';\r\nimport CooldownThroughputTracker from './modules/features/CooldownThroughputTracker';\r\nimport MitigationCheck from './modules/features/MitigationCheck';\r\n\r\nimport Checklist from './modules/features/Checklist/Module';\r\n\r\nimport SoulFragmentsConsume from './modules/statistics/SoulFragmentsConsume';\r\nimport SoulFragmentsTracker from './modules/features/SoulFragmentsTracker';\r\nimport SoulsOvercap from './modules/statistics/SoulsOvercap';\r\n\r\nimport SpiritBombFrailtyDebuff from './modules/talents/SpiritBombFrailtyDebuff';\r\nimport SoulBarrier from './modules/talents/SoulBarrier';\r\nimport SpiritBombSoulsConsume from './modules/talents/SpiritBombSoulsConsume';\r\nimport VoidReaverDebuff from './modules/talents/VoidReaverDebuff';\r\nimport FeedTheDemon from './modules/talents/FeedTheDemon';\r\nimport Gluttony from './modules/talents/Gluttony';\r\nimport BurningAlive from './modules/talents/BurningAlive';\r\nimport FeastOfSouls from './modules/talents/FeastOfSouls';\r\nimport AgonizingFlames from './modules/talents/AgonizingFlames';\r\nimport RazorSpikes from './modules/talents/RazorSpikes';\r\n\r\nimport ImmolationAura from './modules/spells/ImmolationAura';\r\nimport DemonSpikes from './modules/spells/DemonSpikes';\r\nimport SigilOfFlame from './modules/spells/SigilOfFlame';\r\nimport SoulCleaveSoulsConsumed from './modules/spells/SoulCleaveSoulsConsumed';\r\n\r\nclass CombatLogParser extends CoreCombatLogParser {\r\n  static specModules = {\r\n    // Core Statistics\r\n    mitigationCheck: MitigationCheck,\r\n\r\n    // Features\r\n    alwaysBeCasting: AlwaysBeCasting,\r\n    abilities: Abilities,\r\n    cooldownThroughputTracker: CooldownThroughputTracker,\r\n    soulFragmentsTracker: SoulFragmentsTracker,\r\n    checklist: Checklist,\r\n\r\n    // Resource Tracker\r\n    painTracker: PainTracker,\r\n    painDetails: PainDetails,\r\n\r\n    // Talents\r\n    SpiritBombFrailtyDebuff: SpiritBombFrailtyDebuff,\r\n    soulBarrier: SoulBarrier,\r\n    spiritBombSoulsConsume: SpiritBombSoulsConsume,\r\n    feedTheDemon: FeedTheDemon,\r\n    gluttony: Gluttony,\r\n    burningAlive: BurningAlive,\r\n    feastOfSouls: FeastOfSouls,\r\n    agonizingFlames: AgonizingFlames,\r\n    razorSpikes: RazorSpikes,\r\n\r\n    // Spell\r\n    immolationAura: ImmolationAura,\r\n    demonSpikes: DemonSpikes,\r\n    sigilOfFlame: SigilOfFlame,\r\n    soulCleaveSoulsConsumed: SoulCleaveSoulsConsumed,\r\n    voidReaverDebuff: VoidReaverDebuff,\r\n\r\n    // Stats\r\n    soulsOvercap: SoulsOvercap,\r\n    soulFragmentsConsume: SoulFragmentsConsume,\r\n  };\r\n}\r\n\r\nexport default CombatLogParser;\r\n","export default function calculateEffectiveDamage(event, increase) {\r\n  const raw = (event.amount || 0) + (event.absorbed || 0);\r\n  return raw - (raw / (1 + increase));\r\n}\r\n","import React from 'react';\r\n\r\n// https://thenounproject.com/term/duration/370713/\r\n// duration by Bohdan Burmich from the Noun Project\r\nconst Icon = ({ ...other }) => (\r\n  <svg xmlns=\"http://www.w3.org/2000/svg\" viewBox=\"10 10 80 80\" className=\"icon\" {...other}>\r\n    <path d=\"M50,86.4865c17.4361,0,31.6216-14.1855,31.6216-31.6216c0-16.6168-12.8865-30.2714-29.1892-31.5189v-4.9677h7.2973v-4.8649  H40.2703v4.8649h7.2973v4.9677c-16.3027,1.2475-29.1892,14.902-29.1892,31.5189C18.3784,72.3009,32.5639,86.4865,50,86.4865z M52.4324,28.2236c3.1101,0.2817,6.0664,1.0982,8.7798,2.356l-8.7798,15.2073V28.2236z M47.5676,28.2236v26.6412 c0,1.1008,0.7393,2.0647,1.8029,2.3497c0.209,0.0561,0.4205,0.0827,0.6295,0.0827c0.8533,0,1.6642-0.4504,2.1065-1.2162 l13.3146-23.0616c6.8507,4.8503,11.3357,12.8315,11.3357,21.8454c0,14.7537-12.0031,26.7567-26.7568,26.7567 s-26.7568-12.003-26.7568-26.7567C23.2432,40.9315,33.9501,29.4573,47.5676,28.2236z\" />\r\n  </svg>\r\n);\r\n\r\nexport default Icon;\r\n","import React from 'react';\r\nimport PropTypes from 'prop-types';\r\n\r\nimport SpellLink from 'common/SpellLink';\r\nimport SpellIcon from 'common/SpellIcon';\r\n\r\nimport STATISTIC_CATEGORY from './STATISTIC_CATEGORY';\r\nimport StatisticBox from './StatisticBox';\r\n\r\nexport { default as STATISTIC_ORDER } from './STATISTIC_ORDER';\r\n\r\n/**\r\n * @deprecated Use `interface/statistic/Statistic` instead.\r\n */\r\nconst TalentStatisticBox = ({ talent, icon, label, ...others }) => (\r\n  <StatisticBox\r\n    {...others}\r\n    icon={icon || <SpellIcon id={talent} />}\r\n    label={label || <SpellLink id={talent} icon={false} />}\r\n  />\r\n);\r\nTalentStatisticBox.propTypes = {\r\n  talent: PropTypes.number.isRequired,\r\n  /**\r\n   * Override the trait's icon.\r\n   */\r\n  icon: PropTypes.node,\r\n  /**\r\n   * Override the trait's label.\r\n   */\r\n  label: PropTypes.node,\r\n};\r\nTalentStatisticBox.defaultProps = {\r\n  category: STATISTIC_CATEGORY.TALENTS,\r\n};\r\n\r\nexport default TalentStatisticBox;\r\n","import React from 'react';\r\n\r\nimport Analyzer, { SELECTED_PLAYER } from 'parser/core/Analyzer';\r\nimport SPELLS from 'common/SPELLS/index';\r\nimport SpellIcon from 'common/SpellIcon';\r\nimport { formatNumber, formatPercentage } from 'common/format';\r\n\r\nimport SpellLink from 'common/SpellLink';\r\nimport Enemies from 'parser/shared/modules/Enemies';\r\n\r\nimport { findByBossId } from 'raids';\r\nimport StatisticBox from 'interface/others/StatisticBox';\r\nimport HIT_TYPES from 'game/HIT_TYPES';\r\nimport MAGIC_SCHOOLS from 'game/MAGIC_SCHOOLS';\r\nimport Events from 'parser/core/Events';\r\n\r\nconst debug = false;\r\n\r\nclass MitigationCheck extends Analyzer {\r\n  static dependencies = {\r\n    enemies: Enemies,\r\n  };\r\n\r\n  checksPassedMap = new Map();\r\n  checksFailedMap = new Map();\r\n\r\n  checksPhysical = [];\r\n  checksMagical = [];\r\n\r\n  buffCheckPhysical = [];\r\n  buffCheckMagical = [];\r\n  buffCheckPhysAndMag = [];\r\n\r\n  debuffCheckPhysical = [];\r\n  debuffCheckMagical = [];\r\n  debuffCheckPhysAndMag = [];\r\n\r\n  constructor(...args) {\r\n    super(...args);\r\n    if (this.owner.boss == null) {\r\n      this.active = false;\r\n      return;\r\n    }\r\n    const boss = findByBossId(this.owner.boss.id);\r\n    if (\r\n      boss.fight.softMitigationChecks &&\r\n      boss.fight.softMitigationChecks.physical &&\r\n      boss.fight.softMitigationChecks.magical\r\n    ) {\r\n      this.checksPhysical = boss.fight.softMitigationChecks.physical;\r\n      this.checksMagical = boss.fight.softMitigationChecks.magical;\r\n      if (this.checksPhysical === undefined || this.checksMagical === undefined) {\r\n        this.checksPhysical = [];\r\n        this.checksMagical = [];\r\n      }\r\n    } else {\r\n      this.checksPhysical = [];\r\n      this.checksMagical = [];\r\n\r\n      this.buffCheckPhysical = [];\r\n      this.buffCheckMagical = [];\r\n      this.buffCheckPhysAndMag = [];\r\n\r\n      this.debuffCheckPhysical = [];\r\n      this.debuffCheckMagical = [];\r\n      this.debuffCheckPhysAndMag = [];\r\n    }\r\n    [...this.checksPhysical, ...this.checksMagical].forEach((e) => {\r\n      this.checksPassedMap.set(e, 0);\r\n      this.checksFailedMap.set(e, 0);\r\n    });\r\n    this.addEventListener(Events.damage.to(SELECTED_PLAYER), this.onDamageTaken);\r\n  }\r\n\r\n  onDamageTaken(event) {\r\n    const spell = event.ability.guid;\r\n    const hitType = event.ability.type;\r\n    let checks = [];\r\n    let buffCheck = [];\r\n    let debuffCheck = [];\r\n    if (hitType === MAGIC_SCHOOLS.ids.PHYSICAL) {\r\n      checks = this.checksPhysical;\r\n      buffCheck = [...this.buffCheckPhysical, ...this.buffCheckPhysAndMag];\r\n      debuffCheck = [...this.debuffCheckPhysical, ...this.debuffCheckPhysAndMag];\r\n    } else {\r\n      checks = this.checksMagical;\r\n      buffCheck = [...this.buffCheckMagical, ...this.buffCheckPhysAndMag];\r\n      debuffCheck = [...this.debuffCheckMagical, ...this.debuffCheckPhysAndMag];\r\n    }\r\n    if (checks.includes(spell) && !event.tick) {\r\n      debug && console.log(buffCheck);\r\n      debug && console.log(debuffCheck);\r\n      if (\r\n        buffCheck.some((e) => this.selectedCombatant.hasBuff(e)) ||\r\n        event.hitType === HIT_TYPES.IMMUNE\r\n      ) {\r\n        // pass checked if buff was up or the damage missed\r\n        this.checksPassedMap.set(spell, this.checksPassedMap.get(spell) + 1);\r\n      } else {\r\n        const enemy = this.enemies.getEntities()[event.sourceID];\r\n        //We want to get the source rather than the player's target, so no getEntity().\r\n        if (enemy && debuffCheck.some((e) => enemy.hasBuff(e, event.timestamp))) {\r\n          this.checksPassedMap.set(spell, this.checksPassedMap.get(spell) + 1);\r\n        } else {\r\n          this.checksFailedMap.set(spell, this.checksFailedMap.get(spell) + 1);\r\n        }\r\n      }\r\n    }\r\n  }\r\n\r\n  get tooltip() {\r\n    return [\r\n      ...this.buffCheckPhysical,\r\n      ...this.buffCheckMagical,\r\n      ...this.buffCheckPhysAndMag,\r\n      ...this.debuffCheckPhysical,\r\n      ...this.debuffCheckMagical,\r\n      ...this.debuffCheckPhysAndMag,\r\n    ].map((id) => <li key={id}>{SPELLS[id].name}</li>);\r\n  }\r\n\r\n  get physicalChecks() {\r\n    return this.checksPhysical.filter(\r\n      (spell) => this.checksPassedMap.get(spell) + this.checksFailedMap.get(spell) > 0,\r\n    );\r\n  }\r\n\r\n  get magicalChecks() {\r\n    return this.checksMagical.filter(\r\n      (spell) => this.checksPassedMap.get(spell) + this.checksFailedMap.get(spell) > 0,\r\n    );\r\n  }\r\n\r\n  statistic() {\r\n    const failSum = Array.from(this.checksFailedMap.values()).reduce(\r\n      (total, val) => total + val,\r\n      0,\r\n    );\r\n    const passSum = Array.from(this.checksPassedMap.values()).reduce(\r\n      (total, val) => total + val,\r\n      0,\r\n    );\r\n    if (failSum + passSum === 0) {\r\n      return null;\r\n    }\r\n    const buffCheck = [\r\n      ...this.buffCheckPhysical,\r\n      ...this.buffCheckMagical,\r\n      ...this.buffCheckPhysAndMag,\r\n    ];\r\n    let spellIconId;\r\n    if (buffCheck.length > 0) {\r\n      spellIconId = buffCheck[0];\r\n    } else {\r\n      spellIconId = SPELLS.SHIELD_BLOCK_BUFF.id;\r\n    }\r\n\r\n    const physicalTable =\r\n      this.physicalChecks.length > 0 ? (\r\n        <>\r\n          <thead>\r\n            <tr>\r\n              <th>Physical</th>\r\n              <th>Ability</th>\r\n              <th>Passed</th>\r\n              <th>Failed</th>\r\n            </tr>\r\n          </thead>\r\n          <tbody>\r\n            {this.physicalChecks.map((spell) => (\r\n              <tr key={spell}>\r\n                <td />\r\n                <th scope=\"row\">\r\n                  <SpellLink id={spell} style={{ height: '2.5em' }} />\r\n                </th>\r\n                <td>{formatNumber(this.checksPassedMap.get(spell))}</td>\r\n                <td>{formatNumber(this.checksFailedMap.get(spell))}</td>\r\n              </tr>\r\n            ))}\r\n          </tbody>\r\n        </>\r\n      ) : null;\r\n\r\n    const borderless = { borderTop: 'none' };\r\n    const magicalTable =\r\n      this.magicalChecks.length > 0 ? (\r\n        <>\r\n          <thead>\r\n            <tr>\r\n              <th style={borderless}>Magical</th>\r\n              <th style={borderless}>Ability</th>\r\n              <th style={borderless}>Passed</th>\r\n              <th style={borderless}>Failed</th>\r\n            </tr>\r\n          </thead>\r\n          <tbody>\r\n            {this.magicalChecks.map((spell) => (\r\n              <tr key={spell}>\r\n                <td />\r\n                <th scope=\"row\">\r\n                  <SpellLink id={spell} style={{ height: '2.5em' }} />\r\n                </th>\r\n                <td>{formatNumber(this.checksPassedMap.get(spell))}</td>\r\n                <td>{formatNumber(this.checksFailedMap.get(spell))}</td>\r\n              </tr>\r\n            ))}\r\n          </tbody>\r\n        </>\r\n      ) : null;\r\n\r\n    return (\r\n      <StatisticBox\r\n        icon={<SpellIcon id={spellIconId} />}\r\n        value={`${formatPercentage(passSum / (passSum + failSum))} %`}\r\n        label=\"Soft mitigation checks passed.\"\r\n        tooltip={\r\n          <>\r\n            Checks if one of the following buffs or debuffs were up during the mechanic:\r\n            <ul>{this.tooltip}</ul>\r\n          </>\r\n        }\r\n      >\r\n        <table className=\"table table-condensed\" style={{ fontWeight: 'bold' }}>\r\n          {physicalTable}\r\n          {magicalTable}\r\n        </table>\r\n      </StatisticBox>\r\n    );\r\n  }\r\n}\r\n\r\nexport default MitigationCheck;\r\n"],"sourceRoot":""}