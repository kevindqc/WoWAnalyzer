{"version":3,"sources":["parser/mage/arcane/normalizers/ArcaneCharges.ts","parser/mage/arcane/normalizers/ArcanePower.ts","parser/mage/arcane/modules/features/AlwaysBeCasting.tsx","parser/mage/arcane/modules/features/Abilities.tsx","parser/mage/arcane/modules/features/CooldownThroughputTracker.js","parser/mage/arcane/modules/features/Channeling.tsx","parser/mage/arcane/modules/talents/ArcaneFamiliar.tsx","parser/mage/arcane/modules/talents/ArcaneOrb.tsx","parser/mage/arcane/modules/features/ArcaneChargeTracker.tsx","parser/mage/arcane/modules/features/ArcanePower.tsx","parser/mage/arcane/modules/talents/RuleOfThrees.tsx","parser/mage/arcane/modules/talents/TimeAnomaly.tsx","parser/mage/arcane/modules/features/ArcaneMissiles.tsx","parser/mage/arcane/modules/ManaChart/ManaValues.tsx","parser/mage/arcane/modules/Checklist/Component.tsx","parser/mage/arcane/modules/Checklist/Module.tsx","parser/mage/arcane/modules/features/Buffs.tsx","interface/others/ManaStyles.js","parser/mage/arcane/modules/ManaChart/TabComponent/ManaLevelGraph.js","parser/mage/arcane/modules/ManaChart/TabComponent/index.tsx","parser/mage/arcane/modules/ManaChart/Mana.tsx","parser/mage/arcane/modules/talents/MasterOfTime.tsx","parser/mage/arcane/modules/items/ArcaneHarmony.tsx","parser/mage/arcane/modules/items/ArcaneBombardment.tsx","parser/mage/arcane/modules/items/ArcaneProdigy.tsx","parser/mage/arcane/modules/items/ArtificeOfTheArchmage.tsx","parser/mage/arcane/CombatLogParser.ts","interface/others/charts/ManaLevelGraph.js"],"names":["ARCANE_CHARGE_SPELLS","SPELLS","ARCANE_BLAST","ARCANE_EXPLOSION","TOUCH_OF_THE_MAGI","ARTIFICE_OF_THE_ARCHMAGE","ArcaneCharges","events","fixedEvents","forEach","event","eventIndex","push","type","EventType","Cast","includes","ability","castTimestamp","timestamp","previousEventIndex","previousEvent","Energize","sourceID","splice","__modified","EventsNormalizer","ArcanePowerNormalizer","guid","ARCANE_POWER","id","ApplyBuff","AlwaysBeCasting","statisticOrder","STATISTIC_ORDER","CORE","when","deadTimePercentage","this","totalTimeWasted","owner","fightDuration","boss","fight","disableDowntimeSuggestion","isGreaterThan","addSuggestion","suggest","actual","recommended","SpellLink","PRESENCE_OF_MIND","icon","i18n","_","formatPercentage","regular","major","CoreAlwaysBeCasting","Abilities","combatant","selectedCombatant","spell","category","SPELL_CATEGORIES","ROTATIONAL","gcd","base","damageSpellIds","FROSTBOLT","FROSTBOLT_DAMAGE","FIRE_BLAST","cooldown","haste","ARCANE_MISSILES","ARCANE_BARRAGE","SUPERNOVA_TALENT","enabled","hasTalent","castEfficiency","suggestion","recommendedEfficiency","NETHER_TEMPEST_TALENT","ARCANE_ORB_TALENT","ROTATIONAL_AOE","ARCANE_ORB_DAMAGE","TIME_WARP","buffSpellId","COOLDOWNS","ARCANE_FAMILIAR_TALENT","EVOCATION","RUNE_OF_POWER_TALENT","RUNE_OF_POWER_BUFF","RADIANT_SPARK","hasCovenant","COVENANTS","KYRIAN","DEATHBORNE","NECROLORD","MIRRORS_OF_TORMENT","VENTHYR","SHIFTING_POWER","NIGHT_FAE","PRISMATIC_BARRIER","DEFENSIVE","ICE_BLOCK","hasConduitBySpellID","WINTERS_PROTECTION","WINTERS_PROTECTION_REDUCTION_SEC","conduitRankBySpellID","MIRROR_IMAGE","ARCANE_INTELLECT","UTILITY","FROST_NOVA","charges","ICE_WARD_TALENT","SLOW","BLINK","SHIMMER_TALENT","FLOW_OF_TIME","FLOW_OF_TIME_REDUCTION_SEC","COUNTERSPELL","REMOVE_CURSE","SLOW_FALL","SPELL_STEAL","FOCUS_MAGIC_TALENT","ALTER_TIME","ALTER_TIME_BUFF","GREATER_INVISIBILITY","GREATER_INVISIBILITY_BUFF","POLYMORPH_SHEEP","POLYMORPH_PIG","POLYMORPH_BLACK_CAT","POLYMORPH_MONKEY","POLYMORPH_RABBIT","POLYMORPH_POLAR_BEAR_CUB","POLYMORPH_PORCUPINE","POLYMORPH_TURTLE","POLYMORPH_TURKEY","POLYMORPH_PENGUIN","POLYMORPH_BUMBLEBEE","POLYMORPH_PEACOCK","POLYMORPH_DIREHORN","POLYMORPH_MAWRAT","CoreAbilities","CooldownThroughputTracker","CoreCooldownThroughputTracker","cooldownSpells","startBufferMS","summary","BUILT_IN_SUMMARY_TYPES","DAMAGE","castCooldowns","duration","Channeling","options","addEventListener","Events","removebuff","by","SELECTED_PLAYER","onRemoveBuff","spellId","beginChannel","isChannelingSpell","endChannel","CoreChanneling","ArcaneFamiliar","active","arcaneFamiliarUptimeThresholds","uptime","Statistic","size","STATISTIC_CATEGORY","TALENTS","tooltip","BoringSpellValueText","getBuffUptime","ARCANE_FAMILIAR_BUFF","isLessThan","minor","average","style","ThresholdStyle","PERCENTAGE","Analyzer","ArcaneOrb","abilityTracker","totalHits","badCasts","orbCast","cast","onOrbCast","damage","onOrbDamage","fightend","onFightEnd","missedOrbsThresholds","formatNumber","averageHitsPerCast","getAbility","casts","NUMBER","dependencies","AbilityTracker","ArcaneChargeTracker","energize","to","onEnergize","onBarrage","death","onDeath","resourceChangeType","resourceChange","waste","ARCANE_POWER_SPELL_BLACKLIST","ArcanePower","arcaneChargeTracker","spellUsable","deathTracker","spellManaCost","hasOverpowered","badUses","totalCastsDuringAP","badCastsDuringAP","runeTimestamp","outOfMana","buffEndTimestamp","arcanePowerCasted","lowManaCast","lowChargesCast","OVERPOWERED_TALENT","onCast","applybuff","onApplyBuff","manaResource","classResources","find","classResource","RESOURCE_TYPES","MANA","currentManaPercent","amount","max","hasBuff","resource","manaRemaining","resourceCost","buffTimeRemaining","estimatedManaCost","RULE_OF_THREES_BUFF","arcanePowerCooldownThresholds","ARCANE_CHARGE","arcanePowerCastThresholds","arcanePowerManaUtilization","SpellIcon","height","marginBottom","cooldownUtilization","castUtilization","checks","failedChecks","requiredChecks","SpellUsable","DeathTracker","SpellManaCost","RuleOfThrees","barrageWithRuleOfThrees","RULE_OF_THREES_TALENT","onBarrageCast","ruleOfThreesUtilizationThresholds","utilization","TimeAnomaly","conservedTooHigh","TIME_ANOMALY_TALENT","timeAnomalyManaThresholds","manaUtilization","ArcaneMissiles","castWithoutClearcasting","CLEARCASTING_ARCANE","arcaneMissileUsageThresholds","missilesUtilization","ArcaneManaValues","deadOnKill","onFightend","isAlive","suggestionThresholds","endingMana","manaLeftPercentage","ManaValues","ArcaneMageChecklist","thresholds","AbilityRequirement","props","GenericCastEfficiencyRequirement","getCastEfficiencyForSpellId","Rule","name","description","Requirement","arcanePowerCasts","arcanePowerCooldown","arcaneOrbMissedOrbs","ruleOfThreesUsage","runeOfPowerBuffUptime","downtimeSuggestionThresholds","cancelledCasts","arcaneIntellectUptime","arcaneFamiliarUptime","manaOnKill","arcaneMissilesUtilization","timeAnomalyManaUtilization","PreparationRule","Checklist","combatants","arcaneFamiliar","arcaneOrb","arcanePower","ruleOfThrees","timeAnomaly","arcaneMissiles","manaValues","arcaneIntellect","mirrorImage","runeOfPower","alwaysBeCasting","preparationRuleAnalyzer","Component","selected","roundedSecondsSuggestionThresholds","BaseChecklist","Combatants","CastEfficiency","ArcaneIntellect","CancelledCasts","MirrorImage","RuneOfPower","PreparationRuleAnalyzer","Buffs","timelineHighlight","triggeredBySpellId","Object","keys","BLOODLUST_BUFFS","map","item","Number","CoreBuffs","BaseStyles","borderCapStyle","borderJoinStyle","pointBorderWidth","pointHoverRadius","pointHoverBorderWidth","pointRadius","pointHitRadius","borderWidth","spanGaps","ManaStyles","backgroundColor","borderColor","fill","Mana","Deaths","showLine","ManaUsed","HPS","gridLines","display","color","borderDash","legend","labels","fontSize","boxWidth","state","bossHealth","load","prevProps","reportCode","start","end","fetchWcl","sourceclass","hostility","abilityid","then","json","setState","manaUpdates","offsetTime","mana","current","x","Math","y","deaths","filter","targetID","actorId","killingAbility","bossData","series","i","data","health","title","className","ManaLevelGraph","startTime","endTime","React","PureComponent","parser","Panel","padding","report","code","playerId","start_time","end_time","offset_time","getModule","ManaTab","url","render","TabComponent","MasterOfTime","MASTER_OF_TIME_TALENT","resetBlink","isOnCooldown","endCooldown","ArcaneHarmony","bonusDamage","stacks","totalStacks","hasLegendaryByBonusID","ARCANE_HARMONY","bonusID","onBarrageDamage","buff","getBuff","ARCANE_HARMONY_BUFF","calculateEffectiveDamage","ITEMS","ItemDamageDone","averageStacks","toFixed","ArcaneBombardment","ARCANE_BOMBARDMENT","hitPoints","maxHitPoints","COOLDOWN_REDUCTION_MS","ArcaneProdigy","conduitRank","cooldownReduction","wastedReduction","ARCANE_PRODIGY","onMissilesCast","reduceCooldown","reductionSeconds","wastedReductionSeconds","Uptime","ArtificeOfTheArchmage","freeCharges","ARTIFICE_OF_THE_ARCHMAGE_ENERGIZE","CombatLogParser","CoreCombatLogParser","specModules","arcaneChargesNormalizer","ArcaneChargesNormalizer","arcanePowerNormalizer","shiftingPowerNormalizer","ShiftingPowerNormalizer","checklist","buffs","abilities","cooldownThroughputTracker","channeling","elementalBarrier","ElementalBarrier","masterOfTime","arcaneHarmony","arcaneBombardment","shiftingPower","ShiftingPower","arcaneProdigy","artificeOfTheArchmage","divertedEnergy","DivertedEnergy","groundingSurge","GroundingSurge","ireOfTheAscended","IreOfTheAscended","tempestBarrier","TempestBarrier","siphonedMalice","SiphonedMalice","colors","border","background","baseEncoding","field","axis","labelExpr","formatTime","grid","scale","zero","nice","tickCount","spec","layer","transform","flatten","calculate","as","mark","opacity","line","interpolate","strokeWidth","encoding","orient","scheme","bosses","disableHeight","width","defaultProps"],"mappings":"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","file":"static/js/ArcaneMage.b19366ab.chunk.js","sourcesContent":["\r\nimport SPELLS from 'common/SPELLS';\r\nimport EventsNormalizer from 'parser/core/EventsNormalizer';\r\nimport { AnyEvent, EventType } from 'parser/core/Events';\r\n\r\nconst ARCANE_CHARGE_SPELLS = [\r\n  SPELLS.ARCANE_BLAST,\r\n  SPELLS.ARCANE_EXPLOSION,\r\n  SPELLS.TOUCH_OF_THE_MAGI,\r\n  SPELLS.ARTIFICE_OF_THE_ARCHMAGE,\r\n];\r\n\r\nclass ArcaneCharges extends EventsNormalizer {\r\n\r\n  /** Ensures that the Energize events to give the player Arcane Charges is always after the Cast event if they happen at the same time.\r\n   * This is primarily because when the cast completes it calculates damage based on the charges the player had when the spell completed,\r\n   * not including the one that they just gained (even though they happen at the same timestamp). Therefore the energize needs to happen\r\n   * after the cast and not before it.\r\n   */\r\n  normalize(events: AnyEvent[]) {\r\n    const fixedEvents: AnyEvent[] = [];\r\n    events.forEach((event, eventIndex) => {\r\n      fixedEvents.push(event);\r\n\r\n      if (event.type === EventType.Cast && ARCANE_CHARGE_SPELLS.includes(event.ability)) {\r\n        const castTimestamp = event.timestamp;\r\n\r\n        for (let previousEventIndex = eventIndex; previousEventIndex >= 0; previousEventIndex -= 1) {\r\n          const previousEvent = fixedEvents[previousEventIndex];\r\n          if ((castTimestamp - previousEvent.timestamp) > 50) {\r\n            break;\r\n          }\r\n          if (previousEvent.type === EventType.Energize && previousEvent.sourceID === event.sourceID) {\r\n            fixedEvents.splice(previousEventIndex, 1);\r\n            fixedEvents.push(previousEvent);\r\n            previousEvent.__modified = true;\r\n            break;\r\n          }\r\n        }\r\n      }\r\n    });\r\n\r\n    return fixedEvents;\r\n  }\r\n}\r\n\r\nexport default ArcaneCharges;\r\n","import SPELLS from 'common/SPELLS';\r\n\r\nimport EventsNormalizer from 'parser/core/EventsNormalizer';\r\nimport { AnyEvent, EventType } from 'parser/core/Events';\r\n\r\nclass ArcanePowerNormalizer extends EventsNormalizer {\r\n\r\n  //Ensures that the apply buff event for Arcane Power is sorted after the Arcane Power cast.\r\n  normalize(events: AnyEvent[]) {\r\n    const fixedEvents: AnyEvent[] = [];\r\n    events.forEach((event, eventIndex) => {\r\n      fixedEvents.push(event);\r\n\r\n      if (event.type === EventType.Cast && event.ability.guid === SPELLS.ARCANE_POWER.id) {\r\n        const castTimestamp = event.timestamp;\r\n\r\n        for (let previousEventIndex = eventIndex; previousEventIndex >= 0; previousEventIndex -= 1) {\r\n          const previousEvent = fixedEvents[previousEventIndex];\r\n          if ((castTimestamp - previousEvent.timestamp) > 50) {\r\n            break;\r\n          }\r\n          if (previousEvent.type === EventType.ApplyBuff && previousEvent.ability.guid === SPELLS.ARCANE_POWER.id && previousEvent.sourceID === event.sourceID) {\r\n            fixedEvents.splice(previousEventIndex, 1);\r\n            fixedEvents.push(previousEvent);\r\n            previousEvent.__modified = true;\r\n            break;\r\n          }\r\n        }\r\n      }\r\n    });\r\n\r\n    return fixedEvents;\r\n  }\r\n}\r\n\r\nexport default ArcanePowerNormalizer;\r\n","import React from 'react';\r\n\r\nimport CoreAlwaysBeCasting from 'parser/shared/modules/AlwaysBeCasting';\r\nimport { When } from 'parser/core/ParseResults';\r\nimport SPELLS from 'common/SPELLS';\r\nimport { formatPercentage } from 'common/format';\r\nimport { STATISTIC_ORDER } from 'interface/others/StatisticBox';\r\nimport SpellLink from 'common/SpellLink';\r\nimport { i18n } from '@lingui/core';\r\nimport { t } from '@lingui/macro';\r\n\r\nclass AlwaysBeCasting extends CoreAlwaysBeCasting {\r\n  suggestions(when: When) {\r\n    const deadTimePercentage = this.totalTimeWasted / this.owner.fightDuration;\r\n    const boss = this.owner.boss;\r\n\r\n    if (!boss || !boss.fight.disableDowntimeSuggestion) {\r\n      when(deadTimePercentage).isGreaterThan(0.2)\r\n        .addSuggestion((suggest, actual, recommended) => suggest(<span>Your downtime can be improved. Try to Always Be Casting (ABC), try to reduce the delay between casting spells. If a fight requires movement, try saving <SpellLink id={SPELLS.PRESENCE_OF_MIND.id} /> to make your next 2 <SpellLink id={SPELLS.ARCANE_BLAST.id} /> casts instant.</span>)\r\n            .icon('spell_mage_altertime')\r\n            .actual(i18n._(t('mage.arcane.suggestions.alwaysBeCasting.downtime')`${formatPercentage(actual)}% downtime`))\r\n            .recommended(`<${formatPercentage(recommended)}% is recommended`)\r\n            .regular(recommended + 0.15).major(recommended + 0.2));\r\n    }\r\n  }\r\n\r\n  statisticOrder: any = STATISTIC_ORDER.CORE(1);\r\n}\r\n\r\nexport default AlwaysBeCasting;\r\n","import SPELLS from 'common/SPELLS';\r\nimport COVENANTS from 'game/shadowlands/COVENANTS';\r\n\r\nimport CoreAbilities from 'parser/core/modules/Abilities';\r\nimport { WINTERS_PROTECTION_REDUCTION_SEC, FLOW_OF_TIME_REDUCTION_SEC } from 'parser/mage/shared/constants'\r\n\r\nclass Abilities extends CoreAbilities {\r\n  spellbook() {\r\n    const combatant = this.selectedCombatant;\r\n    return [\r\n      // Rotational spells\r\n      {\r\n        spell: SPELLS.ARCANE_BLAST,\r\n        category: Abilities.SPELL_CATEGORIES.ROTATIONAL,\r\n        gcd: {\r\n          base: 1500,\r\n        },\r\n        damageSpellIds: [SPELLS.ARCANE_BLAST.id],\r\n      },\r\n      {\r\n        spell: SPELLS.FROSTBOLT,\r\n        category: Abilities.SPELL_CATEGORIES.ROTATIONAL,\r\n        gcd: {\r\n          base: 1500,\r\n        },\r\n        damageSpellIds: [SPELLS.FROSTBOLT_DAMAGE.id],\r\n      },\r\n      {\r\n        spell: SPELLS.FIRE_BLAST,\r\n        category: Abilities.SPELL_CATEGORIES.ROTATIONAL,\r\n        gcd: null,\r\n        cooldown: (haste: any) => 12 / (1 + haste),\r\n      },\r\n      {\r\n        spell: SPELLS.ARCANE_MISSILES,\r\n        category: Abilities.SPELL_CATEGORIES.ROTATIONAL,\r\n        gcd: {\r\n          base: 1500,\r\n        },\r\n      },\r\n      {\r\n        spell: SPELLS.ARCANE_BARRAGE,\r\n        category: Abilities.SPELL_CATEGORIES.ROTATIONAL,\r\n        gcd: {\r\n          base: 1500,\r\n        },\r\n      },\r\n      {\r\n        spell: SPELLS.ARCANE_EXPLOSION,\r\n        category: Abilities.SPELL_CATEGORIES.ROTATIONAL,\r\n        gcd: {\r\n          base: 1500,\r\n        },\r\n      },\r\n      {\r\n        spell: SPELLS.SUPERNOVA_TALENT,\r\n        category: Abilities.SPELL_CATEGORIES.ROTATIONAL,\r\n        gcd: {\r\n          base: 1500,\r\n        },\r\n        cooldown: 25,\r\n        enabled: combatant.hasTalent(SPELLS.SUPERNOVA_TALENT.id),\r\n        castEfficiency: {\r\n          suggestion: true,\r\n          recommendedEfficiency: 0.90,\r\n        },\r\n      },\r\n      {\r\n        spell: SPELLS.NETHER_TEMPEST_TALENT,\r\n        category: Abilities.SPELL_CATEGORIES.ROTATIONAL,\r\n        gcd: {\r\n          base: 1500,\r\n        },\r\n        enabled: combatant.hasTalent(SPELLS.NETHER_TEMPEST_TALENT.id),\r\n      },\r\n      {\r\n        spell: SPELLS.ARCANE_ORB_TALENT,\r\n        category: Abilities.SPELL_CATEGORIES.ROTATIONAL_AOE,\r\n        gcd: {\r\n          base: 1500,\r\n        },\r\n        cooldown: 20,\r\n        enabled: combatant.hasTalent(SPELLS.ARCANE_ORB_TALENT.id),\r\n        castEfficiency: {\r\n          suggestion: true,\r\n          recommendedEfficiency: 0.90,\r\n        },\r\n        damageSpellIds: [SPELLS.ARCANE_ORB_DAMAGE.id],\r\n      },\r\n\r\n      // Cooldowns\r\n      {\r\n        spell: SPELLS.TIME_WARP,\r\n        buffSpellId: SPELLS.TIME_WARP.id,\r\n        category: Abilities.SPELL_CATEGORIES.COOLDOWNS,\r\n        gcd: null,\r\n        cooldown: 300,\r\n      },\r\n      {\r\n        spell: SPELLS.ARCANE_FAMILIAR_TALENT,\r\n        category: Abilities.SPELL_CATEGORIES.COOLDOWNS,\r\n        gcd: {\r\n          base: 1500,\r\n        },\r\n        cooldown: 10,\r\n        enabled: combatant.hasTalent(SPELLS.ARCANE_FAMILIAR_TALENT.id),\r\n      },\r\n      {\r\n        spell: SPELLS.ARCANE_POWER,\r\n        buffSpellId: SPELLS.ARCANE_POWER.id,\r\n        category: Abilities.SPELL_CATEGORIES.COOLDOWNS,\r\n        gcd: null,\r\n        cooldown: 120,\r\n        castEfficiency: {\r\n          suggestion: true,\r\n          recommendedEfficiency: 0.90,\r\n        },\r\n      },\r\n      {\r\n        spell: SPELLS.EVOCATION,\r\n        buffSpellId: SPELLS.EVOCATION.id,\r\n        category: Abilities.SPELL_CATEGORIES.COOLDOWNS,\r\n        gcd: {\r\n          base: 1500,\r\n        },\r\n        cooldown: 90,\r\n        castEfficiency: {\r\n          suggestion: true,\r\n          recommendedEfficiency: 0.90,\r\n        },\r\n      },\r\n      {\r\n        spell: SPELLS.PRESENCE_OF_MIND,\r\n        buffSpellId: SPELLS.PRESENCE_OF_MIND.id,\r\n        category: Abilities.SPELL_CATEGORIES.COOLDOWNS,\r\n        gcd: null,\r\n        cooldown: 60,\r\n        castEfficiency: {\r\n          suggestion: false,\r\n          recommendedEfficiency: 0.60,\r\n        },\r\n      },\r\n      {\r\n        spell: SPELLS.RUNE_OF_POWER_TALENT,\r\n        buffSpellId: SPELLS.RUNE_OF_POWER_BUFF.id,\r\n        category: Abilities.SPELL_CATEGORIES.COOLDOWNS,\r\n        gcd: {\r\n          base: 1500,\r\n        },\r\n        cooldown: 45,\r\n        enabled: combatant.hasTalent(SPELLS.RUNE_OF_POWER_TALENT.id),\r\n        castEfficiency: {\r\n          suggestion: true,\r\n          recommendedEfficiency: 0.90,\r\n        },\r\n      },\r\n      {\r\n        spell: SPELLS.RADIANT_SPARK,\r\n        category: Abilities.SPELL_CATEGORIES.COOLDOWNS,\r\n        gcd: {\r\n          base: 1500,\r\n        },\r\n        cooldown: 30,\r\n        enabled: combatant.hasCovenant(COVENANTS.KYRIAN.id),\r\n        castEfficiency: {\r\n          suggestion: true,\r\n          recommendedEfficiency: 0.90,\r\n        },\r\n      },\r\n      {\r\n        spell: SPELLS.DEATHBORNE,\r\n        category: Abilities.SPELL_CATEGORIES.COOLDOWNS,\r\n        gcd: {\r\n          base: 1500,\r\n        },\r\n        cooldown: 180,\r\n        enabled: combatant.hasCovenant(COVENANTS.NECROLORD.id),\r\n        castEfficiency: {\r\n          suggestion: true,\r\n          recommendedEfficiency: 0.90,\r\n        },\r\n      },\r\n      {\r\n        spell: SPELLS.MIRRORS_OF_TORMENT,\r\n        category: Abilities.SPELL_CATEGORIES.COOLDOWNS,\r\n        gcd: {\r\n          base: 1500,\r\n        },\r\n        cooldown: 90,\r\n        enabled: combatant.hasCovenant(COVENANTS.VENTHYR.id),\r\n        castEfficiency: {\r\n          suggestion: true,\r\n          recommendedEfficiency: 0.90,\r\n        },\r\n      },\r\n      {\r\n        spell: SPELLS.SHIFTING_POWER,\r\n        category: Abilities.SPELL_CATEGORIES.COOLDOWNS,\r\n        gcd: {\r\n          base: 1500,\r\n        },\r\n        cooldown: 60,\r\n        enabled: combatant.hasCovenant(COVENANTS.NIGHT_FAE.id),\r\n        castEfficiency: {\r\n          suggestion: true,\r\n          recommendedEfficiency: 0.90,\r\n        },\r\n      },\r\n\r\n      //Defensives\r\n      {\r\n        spell: SPELLS.PRISMATIC_BARRIER,\r\n        buffSpellId: SPELLS.PRISMATIC_BARRIER.id,\r\n        category: Abilities.SPELL_CATEGORIES.DEFENSIVE,\r\n        gcd: {\r\n          base: 1500,\r\n        },\r\n        cooldown: 25,\r\n      },\r\n      {\r\n        spell: SPELLS.ICE_BLOCK,\r\n        buffSpellId: SPELLS.ICE_BLOCK.id,\r\n        cooldown: combatant.hasConduitBySpellID(SPELLS.WINTERS_PROTECTION.id) ? 240 - WINTERS_PROTECTION_REDUCTION_SEC[combatant.conduitRankBySpellID(SPELLS.WINTERS_PROTECTION.id)] : 240,\r\n        category: Abilities.SPELL_CATEGORIES.DEFENSIVE,\r\n        gcd: {\r\n          base: 1500,\r\n        },\r\n      },\r\n      {\r\n        spell: SPELLS.MIRROR_IMAGE,\r\n        category: Abilities.SPELL_CATEGORIES.DEFENSIVE,\r\n        gcd: {\r\n          base: 1500,\r\n        },\r\n        cooldown: 120,\r\n      },\r\n\r\n      //Utility\r\n      {\r\n        spell: SPELLS.ARCANE_INTELLECT,\r\n        category: Abilities.SPELL_CATEGORIES.UTILITY,\r\n        gcd: {\r\n          base: 1500,\r\n        },\r\n      },\r\n      {\r\n        spell: SPELLS.FROST_NOVA,\r\n        category: Abilities.SPELL_CATEGORIES.UTILITY,\r\n        gcd: {\r\n          base: 1500,\r\n        },\r\n        cooldown: 30,\r\n        charges: combatant.hasTalent(SPELLS.ICE_WARD_TALENT.id) ? 2 : 1,\r\n      },\r\n      {\r\n        spell: SPELLS.SLOW,\r\n        category: Abilities.SPELL_CATEGORIES.UTILITY,\r\n        gcd: {\r\n          base: 1500,\r\n        },\r\n      },\r\n      {\r\n        spell: SPELLS.BLINK,\r\n        category: Abilities.SPELL_CATEGORIES.UTILITY,\r\n        gcd: {\r\n          base: 1500,\r\n        },\r\n        enabled: !combatant.hasTalent(SPELLS.SHIMMER_TALENT.id),\r\n        cooldown: combatant.hasConduitBySpellID(SPELLS.FLOW_OF_TIME.id) ? 15 - FLOW_OF_TIME_REDUCTION_SEC[combatant.conduitRankBySpellID(SPELLS.FLOW_OF_TIME.id)] : 15,\r\n      },\r\n      {\r\n        spell: SPELLS.SHIMMER_TALENT,\r\n        category: Abilities.SPELL_CATEGORIES.UTILITY,\r\n        gcd: null,\r\n        cooldown: combatant.hasConduitBySpellID(SPELLS.FLOW_OF_TIME.id) ? 25 - FLOW_OF_TIME_REDUCTION_SEC[combatant.conduitRankBySpellID(SPELLS.FLOW_OF_TIME.id)] : 25,\r\n        charges: 2,\r\n        enabled: combatant.hasTalent(SPELLS.SHIMMER_TALENT.id),\r\n      },\r\n      {\r\n        spell: SPELLS.COUNTERSPELL,\r\n        category: Abilities.SPELL_CATEGORIES.UTILITY,\r\n        gcd: null,\r\n        cooldown: 24,\r\n      },\r\n      {\r\n        spell: SPELLS.REMOVE_CURSE,\r\n        category: Abilities.SPELL_CATEGORIES.UTILITY,\r\n        gcd: {\r\n          base: 1500,\r\n        },\r\n        cooldown: 8,\r\n      },\r\n      {\r\n        spell: SPELLS.SLOW_FALL,\r\n        buffSpellId: SPELLS.SLOW_FALL.id,\r\n        category: Abilities.SPELL_CATEGORIES.UTILITY,\r\n        gcd: {\r\n          base: 1500,\r\n        },\r\n      },\r\n      {\r\n        spell: SPELLS.SPELL_STEAL,\r\n        category: Abilities.SPELL_CATEGORIES.UTILITY,\r\n        gcd: {\r\n          base: 1500,\r\n        },\r\n      },\r\n      {\r\n        spell: SPELLS.FOCUS_MAGIC_TALENT,\r\n        category: Abilities.SPELL_CATEGORIES.UTILITY,\r\n        gcd: {\r\n          base: 1500,\r\n        },\r\n      },\r\n      {\r\n        spell: SPELLS.ALTER_TIME,\r\n        buffSpellId: SPELLS.ALTER_TIME_BUFF.id,\r\n        category: Abilities.SPELL_CATEGORIES.UTILITY,\r\n        gcd: {\r\n          base: 1500,\r\n        },\r\n      },\r\n      {\r\n        spell: SPELLS.GREATER_INVISIBILITY,\r\n        buffSpellId: SPELLS.GREATER_INVISIBILITY_BUFF.id,\r\n        category: Abilities.SPELL_CATEGORIES.UTILITY,\r\n        gcd: {\r\n          base: 1500,\r\n        },\r\n        cooldown: 120,\r\n      },\r\n      {\r\n        spell: [SPELLS.POLYMORPH_SHEEP, SPELLS.POLYMORPH_PIG,\r\n          SPELLS.POLYMORPH_BLACK_CAT, SPELLS.POLYMORPH_MONKEY,\r\n          SPELLS.POLYMORPH_RABBIT, SPELLS.POLYMORPH_POLAR_BEAR_CUB,\r\n          SPELLS.POLYMORPH_PORCUPINE, SPELLS.POLYMORPH_TURTLE,\r\n          SPELLS.POLYMORPH_TURKEY, SPELLS.POLYMORPH_PENGUIN,\r\n          SPELLS.POLYMORPH_BUMBLEBEE, SPELLS.POLYMORPH_PEACOCK,\r\n          SPELLS.POLYMORPH_DIREHORN, SPELLS.POLYMORPH_MAWRAT],\r\n        category: Abilities.SPELL_CATEGORIES.UTILITY,\r\n        gcd: {\r\n          base: 1500,\r\n        },\r\n      },\r\n    ];\r\n  }\r\n}\r\n\r\nexport default Abilities;\r\n","import SPELLS from 'common/SPELLS';\r\nimport CoreCooldownThroughputTracker, { BUILT_IN_SUMMARY_TYPES } from 'parser/shared/modules/CooldownThroughputTracker';\r\n\r\nclass CooldownThroughputTracker extends CoreCooldownThroughputTracker {\r\n  static cooldownSpells = [\r\n    ...CoreCooldownThroughputTracker.cooldownSpells,\r\n    {\r\n      spell: SPELLS.ARCANE_POWER,\r\n      startBufferMS: 4000,\r\n      summary: [\r\n        BUILT_IN_SUMMARY_TYPES.DAMAGE,\r\n      ],\r\n    },\r\n    {\r\n      spell: SPELLS.RUNE_OF_POWER_TALENT,\r\n      summary: [\r\n        BUILT_IN_SUMMARY_TYPES.DAMAGE,\r\n      ],\r\n    },\r\n  ];\r\n\r\n  static castCooldowns = [\r\n    ...CoreCooldownThroughputTracker.castCooldowns,\r\n    {\r\n      spell: SPELLS.MIRROR_IMAGE,\r\n      duration: 40,\r\n      summary: [\r\n        BUILT_IN_SUMMARY_TYPES.DAMAGE,\r\n      ],\r\n    },\r\n  ];\r\n}\r\n\r\nexport default CooldownThroughputTracker;\r\n","import SPELLS from 'common/SPELLS';\r\nimport CoreChanneling from 'parser/shared/modules/Channeling';\r\nimport Events, { CastEvent, RemoveBuffEvent } from 'parser/core/Events';\r\nimport { Options, SELECTED_PLAYER } from 'parser/core/Analyzer';\r\n\r\nclass Channeling extends CoreChanneling {\r\n\r\n  constructor(options: Options){\r\n    super(options);\r\n    this.addEventListener(Events.removebuff.by(SELECTED_PLAYER).spell(SPELLS.EVOCATION), this.onRemoveBuff);\r\n  }\r\n\r\n  onCast(event: CastEvent) {\r\n    const spellId = event.ability.guid;\r\n    if (spellId === SPELLS.ARCANE_MISSILES.id || spellId === SPELLS.EVOCATION.id) {\r\n      this.beginChannel(event);\r\n      return;\r\n    }\r\n    super.onCast(event);\r\n  }\r\n\r\n  onRemoveBuff(event: RemoveBuffEvent) {\r\n    // This will resolve potential issues with evocation showing longer channel times\r\n    if (this.isChannelingSpell(SPELLS.EVOCATION.id)) {\r\n      this.endChannel(event);\r\n    }\r\n  }\r\n\r\n  cancelChannel(event: any, ability: any) {\r\n    if (this.isChannelingSpell(SPELLS.ARCANE_MISSILES.id) || this.isChannelingSpell(SPELLS.EVOCATION.id)) {\r\n      this.endChannel(event);\r\n      return;\r\n    }\r\n    super.cancelChannel(event, ability);\r\n  }\r\n\r\n}\r\n\r\nexport default Channeling;\r\n","import React from 'react';\r\nimport SPELLS from 'common/SPELLS';\r\nimport SpellLink from 'common/SpellLink';\r\nimport Statistic from 'interface/statistics/Statistic';\r\nimport STATISTIC_CATEGORY from 'interface/others/STATISTIC_CATEGORY';\r\nimport BoringSpellValueText from 'interface/statistics/components/BoringSpellValueText';\r\nimport { formatPercentage } from 'common/format';\r\nimport Analyzer, { Options } from 'parser/core/Analyzer';\r\nimport { When, ThresholdStyle } from 'parser/core/ParseResults';\r\nimport { i18n } from '@lingui/core';\r\nimport { t } from '@lingui/macro';\r\n\r\nclass ArcaneFamiliar extends Analyzer {\r\n\r\n\tconstructor(options: Options) {\r\n    super(options);\r\n      this.active = this.selectedCombatant.hasTalent(SPELLS.ARCANE_FAMILIAR_TALENT.id);\r\n  }\r\n\r\n\tget uptime() {\r\n\t\treturn this.selectedCombatant.getBuffUptime(SPELLS.ARCANE_FAMILIAR_BUFF.id) / this.owner.fightDuration;\r\n\t}\r\n\r\n\tget arcaneFamiliarUptimeThresholds() {\r\n    return {\r\n      actual: this.uptime,\r\n      isLessThan: {\r\n        minor: 1,\r\n        average: 0.90,\r\n        major: 0.80,\r\n      },\r\n      style: ThresholdStyle.PERCENTAGE,\r\n    };\r\n  }\r\n\r\n\tsuggestions(when: When) {\r\n\t\twhen(this.arcaneFamiliarUptimeThresholds)\r\n\t\t\t.addSuggestion((suggest, actual, recommended) => suggest(<>Your <SpellLink id={SPELLS.ARCANE_FAMILIAR_TALENT.id} /> was up for {formatPercentage(this.uptime)}% of the fight. If your Arcane Familiar dies, make sure you recast it. If you are having trouble keeping the Arcane Familiar up for the entire fight, consider taking a different talent.</>)\r\n\t\t\t\t\t.icon(SPELLS.ARCANE_FAMILIAR_TALENT.icon)\r\n\t\t\t\t\t.actual(i18n._(t('mage.arcane.suggestions.arcaneFamiliar.uptime')`${formatPercentage(this.uptime)}% Uptime`))\r\n\t\t\t\t\t.recommended(`${formatPercentage(recommended)}% is recommended`));\r\n\t}\r\n\r\n  statistic() {\r\n    return (\r\n      <Statistic\r\n        size=\"flexible\"\r\n        category={STATISTIC_CATEGORY.TALENTS}\r\n        tooltip={`Your Arcane Familiar was up for ${formatPercentage(this.uptime)}% of the fight. If your Arcane Familiar dies, make sure you recast it. If you are having trouble keeping the Arcane Familiar up for the entire fight, consider taking a different talent.`}\r\n      >\r\n        <BoringSpellValueText spell={SPELLS.ARCANE_FAMILIAR_TALENT}>\r\n          <>\r\n            {formatPercentage(this.uptime, 0)}% <small>Buff uptime</small>\r\n          </>\r\n        </BoringSpellValueText>\r\n      </Statistic>\r\n    );\r\n  }\r\n}\r\n\r\nexport default ArcaneFamiliar;\r\n","import React from 'react';\r\nimport SPELLS from 'common/SPELLS';\r\nimport SpellLink from 'common/SpellLink';\r\nimport { formatNumber } from 'common/format';\r\nimport Statistic from 'interface/statistics/Statistic';\r\nimport STATISTIC_CATEGORY from 'interface/others/STATISTIC_CATEGORY';\r\nimport BoringSpellValueText from 'interface/statistics/components/BoringSpellValueText';\r\nimport AbilityTracker from 'parser/shared/modules/AbilityTracker';\r\nimport Analyzer, { SELECTED_PLAYER, Options } from 'parser/core/Analyzer';\r\nimport Events, { CastEvent, DamageEvent, FightEndEvent } from 'parser/core/Events';\r\nimport { When, ThresholdStyle } from 'parser/core/ParseResults';\r\nimport { i18n } from '@lingui/core';\r\nimport { t } from '@lingui/macro';\r\n\r\nclass ArcaneOrb extends Analyzer {\r\n\tstatic dependencies = {\r\n\t\tabilityTracker: AbilityTracker,\r\n\t};\r\n\tprotected abilityTracker!: AbilityTracker;\r\n\r\n\ttotalHits = 0;\r\n\tbadCasts = 0;\r\n\torbCast = false;\r\n\r\n\tconstructor(options: Options) {\r\n    super(options);\r\n\t   this.active = this.selectedCombatant.hasTalent(SPELLS.ARCANE_ORB_TALENT.id);\r\n\t\t this.addEventListener(Events.cast.by(SELECTED_PLAYER).spell(SPELLS.ARCANE_ORB_TALENT), this.onOrbCast);\r\n\t\t this.addEventListener(Events.damage.by(SELECTED_PLAYER).spell(SPELLS.ARCANE_ORB_DAMAGE), this.onOrbDamage);\r\n\t\t this.addEventListener(Events.fightend, this.onFightEnd);\r\n  }\r\n\r\n\tonOrbDamage(event: DamageEvent) {\r\n\t\tthis.totalHits += 1;\r\n\t\tthis.orbCast = false;\r\n\t}\r\n\r\n\tonOrbCast(event: CastEvent) {\r\n\t\tif (this.orbCast) {\r\n\t\t\tthis.badCasts += 1;\r\n\t\t}\r\n\t\tthis.orbCast = true;\r\n\t}\r\n\r\n\tonFightEnd(event: FightEndEvent) {\r\n\t\tif (this.orbCast) {\r\n\t\t\tthis.badCasts += 1;\r\n\t\t}\r\n\t}\r\n\r\n\tget averageHitsPerCast() {\r\n\t\treturn this.totalHits / this.abilityTracker.getAbility(SPELLS.ARCANE_ORB_TALENT.id).casts;\r\n\t}\r\n\r\n\tget missedOrbsThresholds() {\r\n    return {\r\n      actual: this.badCasts,\r\n      isGreaterThan: {\r\n\t\t\t\taverage: 0,\r\n        major: 0,\r\n      },\r\n      style: ThresholdStyle.NUMBER,\r\n    };\r\n\t}\r\n\r\n\tsuggestions(when: When) {\r\n\t\twhen(this.missedOrbsThresholds)\r\n\t\t\t.addSuggestion((suggest, actual, recommended) => \r\n\t\t\t\tsuggest(<>You cast <SpellLink id={SPELLS.ARCANE_ORB_TALENT.id} /> {this.badCasts} times without hitting anything. While it is acceptable to use this ability on Single Target encounters, you need to ensure you are aiming the ability so that it will at least hit one target.</>)\r\n\t\t\t\t\t.icon(SPELLS.ARCANE_ORB_TALENT.icon)\r\n\t\t\t\t\t.actual(i18n._(t('mage.arcane.suggestions.arcaneOrb.badCasts')`${formatNumber(this.badCasts)} Missed Orbs`))\r\n\t\t\t\t\t.recommended(`${formatNumber(recommended)} is recommended`));\r\n\t}\r\n\r\n\tstatistic() {\r\n    return (\r\n      <Statistic\r\n        size=\"flexible\"\r\n        category={STATISTIC_CATEGORY.TALENTS}\r\n        tooltip={`You averaged ${formatNumber(this.averageHitsPerCast)} hits per cast of Arcane Orb. ${this.badCasts > 0 ? `Additionally, you cast Arcane Orb ${this.badCasts} times without hitting anything.` : '' } Casting Arcane Orb when it will only hit one target is still beneficial and acceptable, but if you can aim it so that it hits multiple enemies then you should.`}\r\n      >\r\n        <BoringSpellValueText spell={SPELLS.ARCANE_ORB_TALENT}>\r\n          <>\r\n            {formatNumber(this.averageHitsPerCast)} <small>Average hits per cast</small>\r\n          </>\r\n        </BoringSpellValueText>\r\n      </Statistic>\r\n    );\r\n  }\r\n}\r\n\r\nexport default ArcaneOrb;\r\n","import SPELLS from 'common/SPELLS';\r\nimport Analyzer, { SELECTED_PLAYER, Options } from 'parser/core/Analyzer';\r\nimport Events, { CastEvent, EnergizeEvent, DeathEvent } from 'parser/core/Events';\r\n\r\nconst debug = false;\r\n\r\nclass ArcaneChargeTracker extends Analyzer {\r\n\r\n\tcharges = 0;\r\n\r\n\tconstructor(options: Options) {\r\n    super(options);\r\n\t\t\tthis.addEventListener(Events.energize.to(SELECTED_PLAYER), this.onEnergize);\r\n\t\t\tthis.addEventListener(Events.cast.by(SELECTED_PLAYER).spell(SPELLS.ARCANE_BARRAGE), this.onBarrage);\r\n\t\t\tthis.addEventListener(Events.death.to(SELECTED_PLAYER), this.onDeath);\r\n  }\r\n\r\n\tonEnergize(event: EnergizeEvent) {\r\n\t\tconst resourceType = event.resourceChangeType;\r\n\t\tif (resourceType !== 16) {\r\n\t\t\treturn;\r\n\t\t}\r\n\t\t\tif (this.charges < 4) {\r\n\t\t\t\tthis.charges += event.resourceChange;\r\n\t\t\t\tdebug && this.log(\"Gained \" + event.resourceChange + \" charges from \" + event.ability.name + \": \" + this.charges + \" total charges\");\r\n\t\t\t\tif (this.charges > 4) {\r\n\t\t\t\t\tdebug && this.log(\"ERROR: Event caused overcapped charges. Adjusted charge count from \" + this.charges + \" to 4\");\r\n\t\t\t\t\tthis.charges = 4;\r\n\t\t\t\t}\r\n\t\t\t} else if (this.charges < 4 && event.waste === 1) {\r\n\t\t\t\tthis.charges = 4;\r\n\t\t\t\tdebug && this.log(\"ERROR: Auto Corrected to 4 Charges\");\r\n\t\t\t}\r\n\t}\r\n\r\n\tonBarrage(event: CastEvent) {\r\n\t\tdebug && this.log(\"Arcane Barrage cast with \" + this.charges + \" charges. Reset Charges to 0\");\r\n\t\tthis.charges = 0;\r\n\t}\r\n\r\n\tonDeath(event: DeathEvent) {\r\n\t\tthis.charges = 0;\r\n\t\tdebug && this.log(\"Player Died. Reset Charges to 0.\");\r\n\t}\r\n}\r\n\r\nexport default ArcaneChargeTracker;\r\n","import React from 'react';\r\n\r\nimport SPELLS from 'common/SPELLS';\r\nimport SpellLink from 'common/SpellLink';\r\nimport SpellIcon from 'common/SpellIcon';\r\nimport { formatPercentage } from 'common/format';\r\nimport RESOURCE_TYPES from 'game/RESOURCE_TYPES';\r\nimport Statistic from 'interface/statistics/Statistic';\r\nimport STATISTIC_CATEGORY from 'interface/others/STATISTIC_CATEGORY';\r\nimport BoringSpellValueText from 'interface/statistics/components/BoringSpellValueText';\r\nimport AbilityTracker from 'parser/shared/modules/AbilityTracker';\r\nimport SpellUsable from 'parser/shared/modules/SpellUsable';\r\nimport DeathTracker from 'parser/shared/modules/DeathTracker';\r\nimport SpellManaCost from 'parser/shared/modules/SpellManaCost';\r\nimport Analyzer, { Options, SELECTED_PLAYER } from 'parser/core/Analyzer';\r\nimport { ThresholdStyle, When } from 'parser/core/ParseResults';\r\nimport Events, { ApplyBuffEvent, CastEvent, RemoveBuffEvent } from 'parser/core/Events';\r\nimport { i18n } from '@lingui/core';\r\nimport { t } from '@lingui/macro';\r\n\r\nimport ArcaneChargeTracker from './ArcaneChargeTracker';\r\n\r\nconst MANA_THRESHOLD = 0.40;\r\nconst ARCANE_POWER_SPELL_BLACKLIST = [\r\n  SPELLS.ARCANE_BARRAGE,\r\n  SPELLS.ARCANE_FAMILIAR_TALENT,\r\n  SPELLS.ARCANE_INTELLECT,\r\n  SPELLS.EVOCATION,\r\n  SPELLS.SUPERNOVA_TALENT,\r\n  SPELLS.NETHER_TEMPEST_TALENT,\r\n  SPELLS.ARCANE_ORB_TALENT,\r\n  SPELLS.RUNE_OF_POWER_TALENT,\r\n];\r\n\r\nconst debug = false;\r\n\r\nclass ArcanePower extends Analyzer {\r\n  static dependencies = {\r\n    abilityTracker: AbilityTracker,\r\n    arcaneChargeTracker: ArcaneChargeTracker,\r\n    spellUsable: SpellUsable,\r\n    deathTracker: DeathTracker,\r\n    // Needed for the `resourceCost` prop of events\r\n    spellManaCost: SpellManaCost,\r\n  };\r\n  protected abilityTracker!: AbilityTracker;\r\n  protected arcaneChargeTracker!: ArcaneChargeTracker;\r\n  protected spellUsable!: SpellUsable;\r\n  protected deathTracker!: DeathTracker;\r\n  protected spellManaCost!: SpellManaCost;\r\n\r\n  protected hasOverpowered: boolean;\r\n\r\n  badUses = 0;\r\n  totalCastsDuringAP = 0;\r\n  badCastsDuringAP = 0;\r\n  runeTimestamp = 0;\r\n  outOfMana = 0;\r\n  buffEndTimestamp = 0;\r\n  arcanePowerCasted = false;\r\n  lowManaCast = 0;\r\n  lowChargesCast = 0;\r\n\r\n  constructor(options: Options) {\r\n    super(options);\r\n    this.hasOverpowered = this.selectedCombatant.hasTalent(SPELLS.OVERPOWERED_TALENT.id);\r\n    this.addEventListener(Events.cast.by(SELECTED_PLAYER), this.onCast);\r\n    this.addEventListener(Events.applybuff.to(SELECTED_PLAYER).spell(SPELLS.ARCANE_POWER), this.onApplyBuff);\r\n    this.addEventListener(Events.removebuff.to(SELECTED_PLAYER).spell(SPELLS.ARCANE_POWER), this.onRemoveBuff);\r\n  }\r\n\r\n  onCast(event: CastEvent) {\r\n    const spellId = event.ability.guid;\r\n    if (spellId === SPELLS.ARCANE_POWER.id) {\r\n      const manaResource: any = event.classResources && event.classResources.find(classResource => classResource.type === RESOURCE_TYPES.MANA.id);\r\n      const currentManaPercent = manaResource.amount / manaResource.max;\r\n      this.arcanePowerCasted = true;\r\n\r\n      if (this.arcaneChargeTracker.charges < 4 || (!this.hasOverpowered && currentManaPercent < MANA_THRESHOLD)) {\r\n        this.badUses += 1;\r\n      }\r\n\r\n      if (this.selectedCombatant.hasBuff(SPELLS.ARCANE_POWER.id)) {\r\n        this.buffEndTimestamp = event.timestamp + 10000;\r\n        debug && this.log('Arcane Power Cast During Arcane Power Proc');\r\n        debug && this.log('Arcane Power End Time adjusted to');\r\n      }\r\n\r\n      if (this.arcaneChargeTracker.charges < 4) {\r\n        debug && this.log('Arcane Power Cast with Low Charges');\r\n        debug && this.log('Arcane Charges: ' + this.arcaneChargeTracker.charges);\r\n        this.lowChargesCast += 1;\r\n      }\r\n\r\n      if (!this.hasOverpowered && currentManaPercent < MANA_THRESHOLD) {\r\n        debug && this.log('Arcane Power Cast with low mana');\r\n        debug && !this.hasOverpowered && this.log('Mana Percent: ' + currentManaPercent);\r\n        this.lowManaCast += 1;\r\n      }\r\n      return;\r\n    }\r\n    if (!this.selectedCombatant.hasBuff(SPELLS.ARCANE_POWER.id)) {\r\n      return;\r\n    }\r\n    // Any spell except arcane power or rune of power that was cast during Arcane Power\r\n    this.totalCastsDuringAP += 1;\r\n    if (ARCANE_POWER_SPELL_BLACKLIST.includes(event.ability)) {\r\n      debug && this.log('Cast ' + event.ability.name + ' during Arcane Power');\r\n      this.badCastsDuringAP += 1;\r\n    } else if (spellId === SPELLS.ARCANE_BLAST.id || spellId === SPELLS.ARCANE_EXPLOSION.id) {\r\n      event.classResources && event.classResources.forEach(resource => {\r\n        if (resource.type !== RESOURCE_TYPES.MANA.id) {\r\n          return;\r\n        }\r\n        const currentMana = resource.amount;\r\n        const manaCost: any = event.resourceCost && (event.resourceCost[RESOURCE_TYPES.MANA.id] + (event.resourceCost[RESOURCE_TYPES.MANA.id] * this.arcaneChargeTracker.charges));\r\n        const manaRemaining = currentMana - manaCost;\r\n        const buffTimeRemaining = this.buffEndTimestamp - event.timestamp;\r\n        if (manaRemaining < this.estimatedManaCost(spellId) && buffTimeRemaining > 1000) {\r\n          debug && this.log('Ran Out of Mana during Arcane Power');\r\n          debug && this.log('Mana Remaining: ' + manaRemaining);\r\n          debug && this.log('Estimated Mana Cost: ' + this.estimatedManaCost(spellId));\r\n          debug && this.log('Time left on Arcane Power: ' + buffTimeRemaining);\r\n          this.outOfMana += 1;\r\n        }\r\n      });\r\n\r\n    }\r\n  }\r\n\r\n  onApplyBuff(event: ApplyBuffEvent) {\r\n    if (this.arcanePowerCasted) {\r\n      debug && this.log('Arcane Power Cast');\r\n      this.buffEndTimestamp = event.timestamp + 10000;\r\n      debug && this.log('Arcane Power Ends');\r\n    } else {\r\n      debug && this.log('Arcane Power Proc');\r\n      this.buffEndTimestamp = event.timestamp + 8000;\r\n      debug && this.log('Arcane Power Ends');\r\n    }\r\n  }\r\n\r\n  onRemoveBuff(event: RemoveBuffEvent) {\r\n    this.arcanePowerCasted = false;\r\n  }\r\n\r\n  estimatedManaCost(spellId: number) {\r\n    if (spellId === SPELLS.ARCANE_EXPLOSION.id) {\r\n      if (this.hasOverpowered) {\r\n        return 2000 * 0.4;\r\n      } else {\r\n        return 2000;\r\n      }\r\n    } else if (spellId === SPELLS.ARCANE_BLAST.id) {\r\n      if (this.hasOverpowered) {\r\n        return (550 + (550 * this.arcaneChargeTracker.charges)) * 0.4;\r\n      } else if (this.selectedCombatant.hasBuff(SPELLS.RULE_OF_THREES_BUFF.id)) {\r\n        return 0;\r\n      } else {\r\n        return 550 + (550 * this.arcaneChargeTracker.charges);\r\n      }\r\n    }\r\n    return 0;\r\n  }\r\n\r\n  get requiredChecks() {\r\n    let checks = 1;\r\n    if (!this.hasOverpowered) {\r\n      //Also checks mana level if you dont have Overpowered talented\r\n      checks += 1;\r\n    }\r\n    return checks;\r\n\r\n  }\r\n\r\n  get failedChecks() {\r\n    return this.lowChargesCast + this.lowManaCast;\r\n  }\r\n\r\n  get cooldownUtilization() {\r\n    return 1 - (this.failedChecks / (this.abilityTracker.getAbility(SPELLS.ARCANE_POWER.id).casts * this.requiredChecks));\r\n  }\r\n\r\n  get castUtilization() {\r\n    return 1 - (this.badCastsDuringAP / this.totalCastsDuringAP);\r\n  }\r\n\r\n  get arcanePowerCooldownThresholds() {\r\n    return {\r\n      actual: this.cooldownUtilization,\r\n      isLessThan: {\r\n        minor: 1,\r\n        average: 0.80,\r\n        major: 0.60,\r\n      },\r\n      style: ThresholdStyle.PERCENTAGE,\r\n    };\r\n  }\r\n\r\n  get arcanePowerCastThresholds() {\r\n    return {\r\n      actual: this.castUtilization,\r\n      isLessThan: {\r\n        minor: 1,\r\n        average: 0.95,\r\n        major: 0.90,\r\n      },\r\n      style: ThresholdStyle.PERCENTAGE,\r\n    };\r\n  }\r\n\r\n  get arcanePowerManaUtilization() {\r\n    return {\r\n      actual: 1 - (this.outOfMana / this.abilityTracker.getAbility(SPELLS.ARCANE_POWER.id).casts),\r\n      isLessThan: {\r\n        minor: 1,\r\n        average: 0.95,\r\n        major: 0.90,\r\n      },\r\n      style: ThresholdStyle.PERCENTAGE,\r\n    };\r\n  }\r\n\r\n  suggestions(when: When) {\r\n    when(this.arcanePowerCooldownThresholds)\r\n      .addSuggestion((suggest, actual, recommended) => suggest(<>You cast <SpellLink id={SPELLS.ARCANE_POWER.id} /> without proper setup {this.badUses} times. Arcane Power has a short duration so you should get the most out of it by meeting all requirements before casting it.\r\n        <ul>\r\n          <li>You have 4 <SpellLink id={SPELLS.ARCANE_CHARGE.id} /> - You had this {this.abilityTracker.getAbility(SPELLS.ARCANE_POWER.id).casts - this.lowChargesCast} out of {this.abilityTracker.getAbility(SPELLS.ARCANE_POWER.id).casts} casts.</li>\r\n          {!this.hasOverpowered ? <li>You have more than 40% mana - You had this {this.abilityTracker.getAbility(SPELLS.ARCANE_POWER.id).casts - this.lowManaCast} out of {this.abilityTracker.getAbility(SPELLS.ARCANE_POWER.id).casts} casts.</li> : ''}\r\n        </ul>\r\n      </>)\r\n        .icon(SPELLS.ARCANE_POWER.icon)\r\n        .actual(i18n._(t('mage.arcane.suggestions.arcanePower.badCasts')`${this.badUses} Bad Casts`))\r\n        .recommended(`0 is recommended`));\r\n    when(this.arcanePowerCastThresholds)\r\n      .addSuggestion((suggest, actual, recommended) => suggest(<>You cast spells other than <SpellLink id={SPELLS.ARCANE_BLAST.id} />,<SpellLink id={SPELLS.ARCANE_MISSILES.id} />, <SpellLink id={SPELLS.ARCANE_EXPLOSION.id} />, and <SpellLink id={SPELLS.PRESENCE_OF_MIND.id} /> during <SpellLink id={SPELLS.ARCANE_POWER.id} />. Arcane Power is a short duration, so you should ensure that you are getting the most use out of it. Buff spells like Rune of Power should be cast immediately before casting Arcane Power. Other spells such as Charged Up, Blink/Shimmer, etc are acceptable during Arcane Power, but should be avoided if possible.</>)\r\n        .icon(SPELLS.ARCANE_POWER.icon)\r\n        .actual(i18n._(t('mage.arcane.suggestions.arcanePower.utilization')`${formatPercentage(actual)}% Utilization`))\r\n        .recommended(`${formatPercentage(recommended)}% is recommended`));\r\n    when(this.arcanePowerManaUtilization)\r\n      .addSuggestion((suggest, actual, recommended) => suggest(<>You ran dangerously low or ran out of mana during <SpellLink id={SPELLS.ARCANE_POWER.id} /> {this.outOfMana} times. Running out of mana during Arcane Power is a massive DPS loss and should be avoided at all costs. {!this.hasOverpowered ? 'To avoid this, ensure you have at least 40% mana before casting Arcane Power to ensure you have enough mana to finish Arcane Power.' : ''}</>)\r\n        .icon(SPELLS.ARCANE_POWER.icon)\r\n        .actual(i18n._(t('mage.arcane.suggestions.arcanePower.lowMana')`${formatPercentage(actual)}% Utilization`))\r\n        .recommended(`${formatPercentage(recommended)}% is recommended`));\r\n  }\r\n\r\n  statistic() {\r\n    return (\r\n      <Statistic\r\n        size=\"flexible\"\r\n        category={STATISTIC_CATEGORY.TALENTS}\r\n        tooltip={(\r\n          <>\r\n            Before casting Arcane Power, you should ensure that you meet all of the following requirements. If Arcane Power frequently comes off cooldown and these requirements are not already met, then consider modifying your rotation to ensure that they are met before Arcane Power comes off cooldown\r\n            <ul>\r\n              <li>You have 4 Arcane Charges - Missed {this.lowChargesCast} times</li>\r\n              {!this.hasOverpowered && <li>You have more than 40% mana - Missed {this.lowManaCast} times</li>}\r\n            </ul>\r\n            Additionally, you should only be casting Arcane Blast and Arcane Missiles (If you have a Clearcasting Proc) during Arcane Power to maximize the short cooldown duration.\r\n          </>\r\n        )}\r\n      >\r\n        <BoringSpellValueText spell={SPELLS.ARCANE_FAMILIAR_TALENT}>\r\n          <>\r\n            <SpellIcon\r\n              id={SPELLS.ARCANE_POWER.id}\r\n              style={{\r\n                height: '1.2em',\r\n                marginBottom: '.15em',\r\n              }}\r\n            />\r\n            {' '}{formatPercentage(this.cooldownUtilization, 0)}% <small> Cooldown utilization</small><br />\r\n            <SpellIcon\r\n              id={SPELLS.ARCANE_BLAST.id}\r\n              style={{\r\n                height: '1.2em',\r\n                marginBottom: '.15em',\r\n              }}\r\n            />\r\n            {' '}{formatPercentage(this.castUtilization, 0)}% <small>Cast utilization</small>\r\n          </>\r\n        </BoringSpellValueText>\r\n      </Statistic>\r\n    );\r\n  }\r\n}\r\n\r\nexport default ArcanePower;\r\n","import React from 'react';\r\nimport SPELLS from 'common/SPELLS';\r\nimport SpellLink from 'common/SpellLink';\r\nimport { formatPercentage } from 'common/format';\r\nimport AbilityTracker from 'parser/shared/modules/AbilityTracker';\r\nimport Analyzer, { SELECTED_PLAYER, Options } from 'parser/core/Analyzer';\r\nimport { When, ThresholdStyle } from 'parser/core/ParseResults';\r\nimport Events, { CastEvent } from 'parser/core/Events';\r\nimport { i18n } from '@lingui/core';\r\nimport { t } from '@lingui/macro';\r\n\r\nconst debug = false;\r\n\r\nclass RuleOfThrees extends Analyzer {\r\n\tstatic dependencies = {\r\n\t\tabilityTracker: AbilityTracker,\r\n  };\r\n\tprotected abilityTracker!: AbilityTracker;\r\n\r\n\tbarrageWithRuleOfThrees = 0;\r\n\r\n\tconstructor(options: Options) {\r\n    super(options);\r\n\t   this.active = this.selectedCombatant.hasTalent(SPELLS.RULE_OF_THREES_TALENT.id);\r\n\t\t this.addEventListener(Events.cast.by(SELECTED_PLAYER).spell(SPELLS.ARCANE_BARRAGE), this.onBarrageCast);\r\n  \t}\r\n\r\n\tonBarrageCast(event: CastEvent) {\r\n\t\tif (this.selectedCombatant.hasBuff(SPELLS.RULE_OF_THREES_BUFF.id,event.timestamp + 1)) {\r\n\t\t\tdebug && this.log(\"Arcane Barrage with Rule of Threes Buff\");\r\n\t\t\tthis.barrageWithRuleOfThrees += 1;\r\n\t\t}\r\n\t}\r\n\r\n\tget utilization() {\r\n\t\treturn 1 - (this.barrageWithRuleOfThrees / this.abilityTracker.getAbility(SPELLS.ARCANE_BARRAGE.id).casts);\r\n\t}\r\n\r\n\tget ruleOfThreesUtilizationThresholds() {\r\n    return {\r\n      actual: this.utilization,\r\n      isLessThan: {\r\n        minor: 0.95,\r\n        average: 0.90,\r\n        major: 0.80,\r\n      },\r\n      style: ThresholdStyle.PERCENTAGE,\r\n    };\r\n  }\r\n\r\n\tsuggestions(when: When) {\r\n\t\twhen(this.ruleOfThreesUtilizationThresholds)\r\n\t\t\t.addSuggestion((suggest, actual, recommended) => suggest(<>You cast <SpellLink id={SPELLS.ARCANE_BARRAGE.id} /> {this.barrageWithRuleOfThrees} times while you had the <SpellLink id={SPELLS.RULE_OF_THREES_BUFF.id} /> buff. This buff makes your next <SpellLink id={SPELLS.ARCANE_BLAST.id} /> or <SpellLink id={SPELLS.ARCANE_MISSILES.id} /> free after you gain your third Arcane Charge, so you should ensure that you use the buff before clearing your charges.</>)\r\n\t\t\t\t\t.icon(SPELLS.RULE_OF_THREES_TALENT.icon)\r\n\t\t\t\t\t.actual(i18n._(t('mage.arcane.suggestions.ruleOfThrees.utilization')`${formatPercentage(this.utilization)}% Utilization`))\r\n\t\t\t\t\t.recommended(`${formatPercentage(recommended)}% is recommended`));\r\n\t}\r\n}\r\n\r\nexport default RuleOfThrees;\r\n","import React from 'react';\r\nimport SPELLS from 'common/SPELLS';\r\nimport SpellLink from 'common/SpellLink';\r\nimport AbilityTracker from 'parser/shared/modules/AbilityTracker';\r\nimport RESOURCE_TYPES from 'game/RESOURCE_TYPES';\r\nimport { formatPercentage } from 'common/format';\r\nimport Analyzer, { SELECTED_PLAYER, Options } from 'parser/core/Analyzer';\r\nimport { When, ThresholdStyle } from 'parser/core/ParseResults';\r\nimport Events, { CastEvent } from 'parser/core/Events';\r\nimport { i18n } from '@lingui/core';\r\nimport { t } from '@lingui/macro';\r\n\r\nconst MANA_THRESHOLD = 0.70;\r\n\r\nclass TimeAnomaly extends Analyzer {\r\n\tstatic dependencies = {\r\n\t\tabilityTracker: AbilityTracker,\r\n\t};\r\n\tprotected abilityTracker!: AbilityTracker;\r\n\r\n\tconstructor(options: Options) {\r\n    super(options);\r\n    this.active = this.selectedCombatant.hasTalent(SPELLS.TIME_ANOMALY_TALENT.id);\r\n\t\tthis.addEventListener(Events.cast.by(SELECTED_PLAYER).spell(SPELLS.ARCANE_BARRAGE), this.onBarrageCast);\r\n\t}\r\n\r\n\tconservedTooHigh = 0;\r\n\r\n\tonBarrageCast(event: CastEvent) {\r\n\t\tconst spellId = event.ability.guid;\r\n\t\tif (spellId !== SPELLS.ARCANE_BARRAGE.id) {\r\n\t\t\treturn;\r\n\t\t}\r\n\t\tconst manaResource: any = event.classResources && event.classResources.find(classResource => classResource.type === RESOURCE_TYPES.MANA.id);\r\n\t\tconst manaPercent = manaResource.amount / manaResource.max;\r\n\t\tif (manaPercent > MANA_THRESHOLD) {\r\n\t\t\tthis.conservedTooHigh += 1;\r\n\t\t}\r\n\t}\r\n\r\n\tget manaUtilization() {\r\n\t\treturn 1 - (this.conservedTooHigh / this.abilityTracker.getAbility(SPELLS.ARCANE_BARRAGE.id).casts);\r\n\t}\r\n\r\n\tget timeAnomalyManaThresholds() {\r\n    return {\r\n      actual: this.manaUtilization,\r\n      isLessThan: {\r\n        minor: 0.90,\r\n        average: 0.80,\r\n        major: 0.70,\r\n      },\r\n      style: ThresholdStyle.PERCENTAGE,\r\n    };\r\n  }\r\n\r\n\tsuggestions(when: When) {\r\n\t\twhen(this.timeAnomalyManaThresholds)\r\n\t\t\t.addSuggestion((suggest, actual, recommended) => suggest(<>You cast <SpellLink id={SPELLS.ARCANE_BARRAGE.id} /> with greater than 70% mana {this.conservedTooHigh} times. Because of the way <SpellLink id={SPELLS.TIME_ANOMALY_TALENT.id} /> works, you can randomly gain the <SpellLink id={SPELLS.EVOCATION.id} /> effect causing your mana to rapidly increase. If you are conserving your mana too high, this can cause your mana to cap out at 100% which is a waste. So if you are using the Time Anomaly talent, you should make sure you conserve below 70% mana to help prevent mana capping.</>)\r\n\t\t\t\t\t.icon(SPELLS.TIME_ANOMALY_TALENT.icon)\r\n\t\t\t\t\t.actual(i18n._(t('mage.arcane.suggestions.timeAnomaly.utilization')`${formatPercentage(this.manaUtilization)}% Utilization`))\r\n\t\t\t\t\t.recommended(`${formatPercentage(recommended)}% is recommended`));\r\n\t}\r\n}\r\n\r\nexport default TimeAnomaly;\r\n","import React from 'react';\r\nimport SPELLS from 'common/SPELLS';\r\nimport SpellLink from 'common/SpellLink';\r\nimport AbilityTracker from 'parser/shared/modules/AbilityTracker';\r\nimport { formatPercentage } from 'common/format';\r\nimport Analyzer, { Options, SELECTED_PLAYER } from 'parser/core/Analyzer';\r\nimport Events, { CastEvent } from 'parser/core/Events';\r\nimport { ThresholdStyle, When } from 'parser/core/ParseResults';\r\nimport { i18n } from '@lingui/core';\r\nimport { t } from '@lingui/macro';\r\n\r\nconst debug = false;\r\n\r\nclass ArcaneMissiles extends Analyzer {\r\n  static dependencies = {\r\n    abilityTracker: AbilityTracker,\r\n  };\r\n  protected abilityTracker!: AbilityTracker;\r\n\r\n  castWithoutClearcasting = 0;\r\n\r\n  constructor(options: Options) {\r\n    super(options);\r\n    this.addEventListener(Events.cast.by(SELECTED_PLAYER).spell(SPELLS.ARCANE_MISSILES), this.onCast);\r\n  }\r\n\r\n  onCast(event: CastEvent) {\r\n    const spellId = event.ability.guid;\r\n    if (spellId === SPELLS.ARCANE_MISSILES.id && !this.selectedCombatant.hasBuff(SPELLS.CLEARCASTING_ARCANE.id)) {\r\n      debug && this.log('Arcane Missiles cast without Clearcasting');\r\n      this.castWithoutClearcasting += 1;\r\n    }\r\n  }\r\n\r\n  get missilesUtilization() {\r\n    return 1 - (this.castWithoutClearcasting / (this.abilityTracker.getAbility(SPELLS.ARCANE_MISSILES.id).casts));\r\n  }\r\n\r\n  get arcaneMissileUsageThresholds() {\r\n    return {\r\n      actual: this.missilesUtilization,\r\n      isLessThan: {\r\n        minor: 1,\r\n        average: 0.95,\r\n        major: 0.90,\r\n      },\r\n      style: ThresholdStyle.PERCENTAGE,\r\n    };\r\n  }\r\n\r\n  suggestions(when: When) {\r\n    when(this.arcaneMissileUsageThresholds)\r\n      .addSuggestion((suggest, actual, recommended) => suggest(<>You cast <SpellLink id={SPELLS.ARCANE_MISSILES.id} /> without <SpellLink id={SPELLS.CLEARCASTING_ARCANE.id} /> {this.castWithoutClearcasting} times. Arcane Missiles is a very expensive spell (more expensive than a 4 Charge Arcane Blast) and therefore it should only be cast when you have the Clearcasting buff which makes the spell free.</>)\r\n        .icon(SPELLS.ARCANE_MISSILES.icon)\r\n        .actual(i18n._(t('mage.arcane.suggestions.arcaneMissiles.clearCasting.uptime')`${formatPercentage(this.missilesUtilization)}% Uptime`))\r\n        .recommended(`${formatPercentage(recommended)}% is recommended`));\r\n  }\r\n}\r\n\r\nexport default ArcaneMissiles;\r\n","import { When, ThresholdStyle } from 'parser/core/ParseResults';\r\nimport ManaValues from 'parser/shared/modules/ManaValues';\r\nimport DeathTracker from 'parser/shared/modules/DeathTracker';\r\nimport { formatPercentage, formatNumber } from 'common/format';\r\nimport { Options } from 'parser/core/Analyzer';\r\nimport { i18n } from '@lingui/core';\r\nimport { t } from '@lingui/macro';\r\nimport Events from 'parser/core/Events';\r\n\r\nclass ArcaneManaValues extends ManaValues {\r\n  static dependencies = {\r\n\t\tdeathTracker: DeathTracker,\r\n  };\r\n  protected deathTracker!: DeathTracker;\r\n\r\n  constructor(options: Options) {\r\n    super(options);\r\n      this.active = true;\r\n      this.addEventListener(Events.fightend, this.onFightend);\r\n  }\r\n\r\n  deadOnKill = false;\r\n\r\n  onFightend() {\r\n    if (!this.deathTracker.isAlive) {\r\n      this.deadOnKill = true;\r\n    }\r\n  }\r\n\r\n  get suggestionThresholds() {\r\n    return {\r\n      actual: this.manaLeftPercentage,\r\n      isGreaterThan: {\r\n        minor: 0.2,\r\n        average: 0.3,\r\n        major: 0.4,\r\n      },\r\n      style: ThresholdStyle.PERCENTAGE,\r\n    };\r\n  }\r\n\r\n  suggestions(when: When) {\r\n    if (!this.deadOnKill) {\r\n      when(this.suggestionThresholds)\r\n      .addSuggestion((suggest, actual, recommended) => suggest('You had mana left at the end of the fight. You should be aiming to complete the fight with as little mana as possible regardless of whether your cooldowns will be coming up or not. So dont be afraid to burn your mana before the boss dies.')\r\n          .icon('inv_elemental_mote_mana')\r\n          .actual(`${formatPercentage(actual)}% (${formatNumber(this.endingMana)}) ${i18n._(t('mage.arcane.suggestions.arcaneMana.manaLeft')`mana left`)}`)\r\n          .recommended(`<${formatPercentage(recommended)}% is recommended`)\r\n          .regular(this.suggestionThresholds.isGreaterThan.average)\r\n          .major(this.suggestionThresholds.isGreaterThan.major));\r\n    }\r\n  }\r\n}\r\n\r\nexport default ArcaneManaValues;\r\n","import React from 'react';\r\nimport PropTypes from 'prop-types';\r\nimport SPELLS from 'common/SPELLS';\r\nimport SpellLink from 'common/SpellLink';\r\nimport Checklist from 'parser/shared/modules/features/Checklist';\r\nimport Rule from 'parser/shared/modules/features/Checklist/Rule';\r\nimport Requirement from 'parser/shared/modules/features/Checklist/Requirement';\r\nimport PreparationRule from 'parser/shared/modules/features/Checklist/PreparationRule';\r\nimport GenericCastEfficiencyRequirement from 'parser/shared/modules/features/Checklist/GenericCastEfficiencyRequirement';\r\n\r\nconst ArcaneMageChecklist = ({ combatant, castEfficiency, thresholds }: any) => {\r\n  const AbilityRequirement = (props: any) => (\r\n    <GenericCastEfficiencyRequirement\r\n      castEfficiency={castEfficiency.getCastEfficiencyForSpellId(props.spell)}\r\n      {...props}\r\n    />\r\n  );\r\n  AbilityRequirement.propTypes = {\r\n    spell: PropTypes.number.isRequired,\r\n  };\r\n\r\n  return (\r\n    <Checklist>\r\n      <Rule\r\n        name=\"Use your cooldowns\"\r\n        description={(\r\n          <>\r\n            Using your cooldown abilities as often as possible can help raise your dps significantly. Some help more than others, but as a general rule of thumb you should be looking to use most of your damaging abilities and damage cooldowns as often as possible unless you need to save them for a priority burst phase that is coming up soon.\r\n          </>\r\n        )}\r\n      >\r\n        <AbilityRequirement spell={SPELLS.ARCANE_POWER.id} />\r\n        <AbilityRequirement spell={SPELLS.EVOCATION.id} />\r\n        {combatant.hasTalent(SPELLS.SUPERNOVA_TALENT.id) && <AbilityRequirement spell={SPELLS.SUPERNOVA_TALENT.id} />}\r\n        {combatant.hasTalent(SPELLS.ARCANE_ORB_TALENT.id) && <AbilityRequirement spell={SPELLS.ARCANE_ORB_TALENT.id} />}\r\n        {combatant.hasTalent(SPELLS.RUNE_OF_POWER_TALENT.id) && <AbilityRequirement spell={SPELLS.RUNE_OF_POWER_TALENT.id} />}\r\n      </Rule>\r\n      <Rule\r\n        name=\"Use Arcane Power effectively\"\r\n        description={(\r\n          <>\r\n            Using <SpellLink id={SPELLS.ARCANE_POWER.id} /> properly is one of the most important aspects of playing Arcane well. Therefore it is critical that you make the most of the time that you have while Arcane Power is active. This include things such as not wasting time or GCDs while Arcane Power is active and ensuring that you properly setup for your \"burn phase\" before hitting Arcane Power.\r\n          </>\r\n        )}\r\n      >\r\n        <Requirement\r\n          name=\"Spells Cast During Arcane Power\"\r\n          tooltip=\"Your cast utilization during Arcane Power. You should be ensuring that you are using the most of the short Arcane Power window and only casting damage abilities like Arcane Blast, Arcane Missiles, and Arcane Explosion.\"\r\n          thresholds={thresholds.arcanePowerCasts}\r\n        />\r\n        <Requirement\r\n          name=\"Arcane Power Pre-Cast Setup\"\r\n          tooltip=\"In order to effectively utilize Arcane Power, there are certain things you need to ensure are setup before you cast Arcane Power. Making sure you have 4 Arcane Charges, You have more than 40% Mana (Unless you have the Overpowered Talent), and ensuring you cast Rune of Power immediately before Arcane Power (if you have Rune of Power talented) will all help make the most out of your burn phase.\"\r\n          thresholds={thresholds.arcanePowerCooldown}\r\n        />\r\n\r\n      </Rule>\r\n      <Rule\r\n        name=\"Use your talents effectively\"\r\n        description=\"Regardless of which talents you select, you should ensure that you are utilizing them properly. If you are having trouble effectively using a particular talent, you should consider taking a different talent that you can utilize properly or focus on effectively using the talents that you have selected.\"\r\n      >\r\n        {combatant.hasTalent(SPELLS.ARCANE_ORB_TALENT.id) && (\r\n          <Requirement\r\n            name=\"Missed Arcane Orbs\"\r\n            tooltip=\"Arcane Orb is a skillshot which means that it is important for you to aim it properly in order to get the most out of it. Therefore, on single target you should always ensure that the enemy gets hit by it, and if there are multiple enemies then you should do what you can to ensure all or most of them will get hit by the Orb as well.\"\r\n            thresholds={thresholds.arcaneOrbMissedOrbs}\r\n          />\r\n        )}\r\n        {combatant.hasTalent(SPELLS.RULE_OF_THREES_TALENT.id) && (\r\n          <Requirement\r\n            name=\"Rule of Threes Buff Usage\"\r\n            tooltip=\"Rule of Threes gives you a free cast of Arcane Blast when you hit 3 Arcane Charges so you shoud always ensure you are using that free charge before you clear your Arcane Charges with Barrage since there is no negative mana impact to doing so.\"\r\n            thresholds={thresholds.ruleOfThreesUsage}\r\n          />\r\n        )}\r\n        {combatant.hasTalent(SPELLS.RUNE_OF_POWER_TALENT.id) && (\r\n          <Requirement\r\n            name=\"Rune of Power Uptime\"\r\n            tooltip=\"Using Rune of Power effectively means being able to stay within the range of it for it's entire duration. If you are unable to do so or if you frequently have to move out of the range of the buff, consider taking a different talent instead.\"\r\n            thresholds={thresholds.runeOfPowerBuffUptime}\r\n          />\r\n        )}\r\n      </Rule>\r\n      <Rule\r\n        name=\"Avoid downtime\"\r\n        description={(\r\n          <>\r\n            As a DPS, it is important to spend as much time casting as possible as if you arent casting you arent doing damage. Therefore it is important to minimize your movements, stay within range of the target, and try to avoid cancelling casts (unless you have to). While some fights will have an amount of time that is unavoidable downtime; the more you can minimize that downtime, the better.\r\n          </>\r\n        )}\r\n      >\r\n        <Requirement name=\"Downtime\" thresholds={thresholds.downtimeSuggestionThresholds} />\r\n        <Requirement name=\"Cancelled Casts\" thresholds={thresholds.cancelledCasts} />\r\n      </Rule>\r\n      <Rule\r\n        name=\"Maintain your buffs\"\r\n        description={(\r\n          <>\r\n            You should ensure that you maintain <SpellLink id={SPELLS.ARCANE_INTELLECT.id} /> for the entire fight and recast it whenever you are ressurected and likewise, if you have the appropriate classes/specs in your group you should also ensure that you maintain their buffs as possible. Additionally, you should also maintain other buffs such as <SpellLink id={SPELLS.ARCANE_FAMILIAR_TALENT.id} /> if you are talented into them.\r\n          </>\r\n        )}\r\n      >\r\n        <Requirement name=\"Arcane Intellect Uptime\" thresholds={thresholds.arcaneIntellectUptime} />\r\n        {combatant.hasTalent(SPELLS.ARCANE_FAMILIAR_TALENT.id) && <Requirement name=\"Arcane Familiar Uptime\" thresholds={thresholds.arcaneFamiliarUptime} />}\r\n      </Rule>\r\n      <Rule\r\n        name={<>Manage your mana</>}\r\n        description={(\r\n          <>\r\n            The biggest aspect of playing Arcane properly is managing your mana effectively. Essentially your mana dictates how much damage you can do and therefore needs to be managed properly. Things such as running out of mana during <SpellLink id={SPELLS.ARCANE_POWER.id} />, letting your mana cap out at 100% for too long, or ending the fight with mana remaining all have negative effects on your DPS.\r\n          </>\r\n        )}\r\n      >\r\n        <Requirement name=\"Mana left on boss kill\" thresholds={thresholds.manaOnKill} />\r\n        <Requirement name=\"Arcane Power Mana Mgmt.\" thresholds={thresholds.arcanePowerManaUtilization} />\r\n        <Requirement name=\"Arcane Missiles only with Clearcasting\" thresholds={thresholds.arcaneMissilesUtilization} />\r\n        {combatant.hasTalent(SPELLS.TIME_ANOMALY_TALENT.id) && <Requirement name=\"Time Anomaly Mana Mgmt.\" thresholds={thresholds.timeAnomalyManaUtilization} />}\r\n      </Rule>\r\n\r\n      <PreparationRule thresholds={thresholds} />\r\n    </Checklist>\r\n  );\r\n};\r\n\r\nArcaneMageChecklist.propTypes = {\r\n  castEfficiency: PropTypes.object.isRequired,\r\n  combatant: PropTypes.shape({\r\n    hasTalent: PropTypes.func.isRequired,\r\n  }).isRequired,\r\n  thresholds: PropTypes.object.isRequired,\r\n};\r\n\r\nexport default ArcaneMageChecklist;\r\n","import React from 'react';\r\n\r\nimport BaseChecklist from 'parser/shared/modules/features/Checklist/Module';\r\nimport CastEfficiency from 'parser/shared/modules/CastEfficiency';\r\nimport Combatants from 'parser/shared/modules/Combatants';\r\nimport PreparationRuleAnalyzer from 'parser/shared/modules/features/Checklist/PreparationRuleAnalyzer';\r\n\r\nimport ArcaneFamiliar from '../talents/ArcaneFamiliar';\r\nimport ArcaneOrb from '../talents/ArcaneOrb';\r\nimport ArcanePower from '../features/ArcanePower';\r\nimport RuleOfThrees from '../talents/RuleOfThrees';\r\nimport TimeAnomaly from '../talents/TimeAnomaly';\r\nimport ArcaneMissiles from '../features/ArcaneMissiles';\r\nimport AlwaysBeCasting from '../features/AlwaysBeCasting';\r\nimport ManaValues from '../ManaChart/ManaValues';\r\nimport ArcaneIntellect from '../../../shared/modules/features/ArcaneIntellect';\r\nimport CancelledCasts from '../../../shared/modules/features/CancelledCasts';\r\nimport MirrorImage from '../../../shared/modules/features/MirrorImage';\r\nimport RuneOfPower from '../../../shared/modules/features/RuneOfPower';\r\n\r\nimport Component from './Component';\r\n\r\nclass Checklist extends BaseChecklist {\r\n  static dependencies = {\r\n    combatants: Combatants,\r\n    castEfficiency: CastEfficiency,\r\n    arcaneFamiliar: ArcaneFamiliar,\r\n    arcaneOrb: ArcaneOrb,\r\n    arcanePower: ArcanePower,\r\n    ruleOfThrees: RuleOfThrees,\r\n    timeAnomaly: TimeAnomaly,\r\n    arcaneMissiles: ArcaneMissiles,\r\n    manaValues: ManaValues,\r\n    arcaneIntellect: ArcaneIntellect,\r\n    cancelledCasts: CancelledCasts,\r\n    mirrorImage: MirrorImage,\r\n    runeOfPower: RuneOfPower,\r\n    alwaysBeCasting: AlwaysBeCasting,\r\n    preparationRuleAnalyzer: PreparationRuleAnalyzer,\r\n  };\r\n  protected combatants!: Combatants;\r\n  protected castEfficiency!: CastEfficiency;\r\n  protected arcaneFamiliar!: ArcaneFamiliar;\r\n  protected arcaneOrb!: ArcaneOrb;\r\n  protected arcanePower!: ArcanePower;\r\n  protected ruleOfThrees!: RuleOfThrees;\r\n  protected timeAnomaly!: TimeAnomaly;\r\n  protected arcaneMissiles!: ArcaneMissiles;\r\n  protected manaValues!: ManaValues;\r\n  protected arcaneIntellect!: ArcaneIntellect;\r\n  protected cancelledCasts!: CancelledCasts;\r\n  protected mirrorImage!: MirrorImage;\r\n  protected runeOfPower!: RuneOfPower;\r\n  protected alwaysBeCasting!: AlwaysBeCasting;\r\n  protected preparationRuleAnalyzer!: PreparationRuleAnalyzer;\r\n\r\n  render() {\r\n    return (\r\n      <Component\r\n        combatant={this.combatants.selected}\r\n        castEfficiency={this.castEfficiency}\r\n        thresholds={{\r\n          ...this.preparationRuleAnalyzer.thresholds,\r\n\r\n          downtimeSuggestionThresholds: this.alwaysBeCasting.downtimeSuggestionThresholds,\r\n          arcaneFamiliarUptime: this.arcaneFamiliar.arcaneFamiliarUptimeThresholds,\r\n          arcaneOrbMissedOrbs: this.arcaneOrb.missedOrbsThresholds,\r\n          arcanePowerCooldown: this.arcanePower.arcanePowerCooldownThresholds,\r\n          arcanePowerManaUtilization: this.arcanePower.arcanePowerManaUtilization,\r\n          arcanePowerCasts: this.arcanePower.arcanePowerCastThresholds,\r\n          ruleOfThreesUsage: this.ruleOfThrees.ruleOfThreesUtilizationThresholds,\r\n          timeAnomalyManaUtilization: this.timeAnomaly.timeAnomalyManaThresholds,\r\n          arcaneMissilesUtilization: this.arcaneMissiles.arcaneMissileUsageThresholds,\r\n          manaOnKill: this.manaValues.suggestionThresholds,\r\n          arcaneIntellectUptime: this.arcaneIntellect.suggestionThresholds,\r\n          cancelledCasts: this.cancelledCasts.suggestionThresholds,\r\n          runeOfPowerBuffUptime: this.runeOfPower.roundedSecondsSuggestionThresholds,\r\n        }}\r\n      />\r\n    );\r\n  }\r\n}\r\n\r\nexport default Checklist;\r\n","import SPELLS from 'common/SPELLS';\r\nimport CoreBuffs from 'parser/core/modules/Buffs';\r\nimport BLOODLUST_BUFFS from 'game/BLOODLUST_BUFFS';\r\n\r\nclass Buffs extends CoreBuffs {\r\n  buffs() {\r\n    const combatant = this.selectedCombatant;\r\n\r\n    // This should include ALL buffs that can be applied by your spec.\r\n    // This data can be used by various kinds of modules to improve their results, and modules added in the future may rely on buffs that aren't used today.\r\n    return [\r\n      {\r\n        spellId: SPELLS.CLEARCASTING_ARCANE.id,\r\n        timelineHighlight: true,\r\n      },\r\n      {\r\n        spellId: SPELLS.EVOCATION.id,\r\n        timelineHighlight: true,\r\n      },\r\n      {\r\n        spellId: SPELLS.ARCANE_POWER.id,\r\n        triggeredBySpellId: SPELLS.ARCANE_POWER.id,\r\n        timelineHighlight: true,\r\n      },\r\n      {\r\n        spellId: SPELLS.PRESENCE_OF_MIND.id,\r\n        triggeredBySpellId: SPELLS.PRESENCE_OF_MIND.id,\r\n        timelineHighlight: true,\r\n      },\r\n      {\r\n        spellId: SPELLS.RUNE_OF_POWER_BUFF.id,\r\n        enabled: combatant.hasTalent(SPELLS.RUNE_OF_POWER_TALENT),\r\n        timelineHighlight: true,\r\n      },\r\n      {\r\n        spellId: SPELLS.PRISMATIC_BARRIER.id,\r\n        triggeredBySpellId: SPELLS.PRISMATIC_BARRIER.id,\r\n        timelineHighlight: true,\r\n      },\r\n      {\r\n        spellId: SPELLS.ICE_BLOCK.id,\r\n        triggeredBySpellId: SPELLS.ICE_BLOCK.id,\r\n        timelineHighlight: true,\r\n      },\r\n      {\r\n        spellId: SPELLS.MIRROR_IMAGE.id,\r\n        triggeredBySpellId: SPELLS.MIRROR_IMAGE.id,\r\n        timelineHighlight: true,\r\n      },\r\n      {\r\n        spellId: Object.keys(BLOODLUST_BUFFS).map(item => Number(item)),\r\n        timelineHighlight: true,\r\n      },\r\n    ];\r\n  }\r\n}\r\n\r\nexport default Buffs;\r\n","const BaseStyles = {\r\n  borderCapStyle: 'butt',\r\n  borderJoinStyle: 'miter',\r\n  pointBorderWidth: 0,\r\n  pointHoverRadius: 0,\r\n  pointHoverBorderWidth: 0,\r\n  pointRadius: 0,\r\n  pointHitRadius: 0,\r\n  borderWidth: 2,\r\n  spanGaps: true,\r\n};\r\n\r\nconst ManaStyles = {\r\n  'Boss-0': {\r\n    backgroundColor: 'rgba(215,2,6,0.08)',\r\n    borderColor: 'rgba(215,2,6,0.6)',\r\n    ...BaseStyles,\r\n    fill: true,\r\n  },\r\n  'Boss-1': {\r\n    backgroundColor: 'rgba(250,102,56,0.08)',\r\n    borderColor: 'rgba(250,102,56,0.6)',\r\n    ...BaseStyles,\r\n    fill: true,\r\n  },\r\n  'Boss-2': {\r\n    backgroundColor: 'rgba(255,211,191,0.08)',\r\n    borderColor: 'rgba(255,211,191,0.6)',\r\n    ...BaseStyles,\r\n    fill: true,\r\n  },\r\n  'Boss-3': {\r\n    backgroundColor: 'rgba(0,0,0,0.08)',\r\n    borderColor: 'rgba(153,196,57,0.6)',\r\n    ...BaseStyles,\r\n    fill: true,\r\n  },\r\n  'Boss-4': {\r\n    backgroundColor: 'rgba(0,0,0,0.08)',\r\n    borderColor: 'rgba(86,76,172,0.6)',\r\n    ...BaseStyles,\r\n    fill: true,\r\n  },\r\n  'Boss-5': {\r\n    backgroundColor: 'rgba(0,0,0,0.08)',\r\n    borderColor: 'rgba(243,234,143,0.6)',\r\n    ...BaseStyles,\r\n    fill: true,\r\n  },\r\n  Mana: {\r\n    backgroundColor: 'rgba(2,109,215,0.25)',\r\n    borderColor: 'rgba(2,109,215,0.6)',\r\n    ...BaseStyles,\r\n    fill: true,\r\n  },\r\n  Deaths: {\r\n    backgroundColor: 'rgba(255,0,0,0.2)',\r\n    borderColor: 'rgba(255,0,0,0.8)',\r\n    ...BaseStyles,\r\n    showLine: false,\r\n  },\r\n  ManaUsed: {\r\n    backgroundColor: 'rgba(215, 2, 6, 0.4)',\r\n    borderColor: 'rgba(215, 2, 6, 0.6)',\r\n    ...BaseStyles,\r\n    showLine: true,\r\n  },\r\n  HPS: {\r\n    backgroundColor: 'rgba(2, 217, 110, 0.2)',\r\n    borderColor: 'rgba(2, 217, 110, 0.6)',\r\n    ...BaseStyles,\r\n    showLine: true,\r\n  },\r\n  gridLines: {\r\n    display: true,\r\n    color: 'rgba(255, 255, 255, 0.6)',\r\n    borderDash: [2,2],\r\n  },\r\n  legend: {\r\n    display: true,\r\n    labels: {\r\n      fontSize: 16,\r\n      boxWidth: 20,\r\n    },\r\n  },\r\n};\r\n\r\nexport default ManaStyles;\r\n","import React from 'react';\r\nimport PropTypes from 'prop-types';\r\n\r\nimport fetchWcl from 'common/fetchWclApi';\r\n\r\nimport ManaStyles from 'interface/others/ManaStyles.js';\r\nimport ManaLevelGraph from 'interface/others/charts/ManaLevelGraph';\r\n\r\nclass Mana extends React.PureComponent {\r\n  static propTypes = {\r\n    reportCode: PropTypes.string.isRequired,\r\n    actorId: PropTypes.number.isRequired,\r\n    start: PropTypes.number.isRequired,\r\n    end: PropTypes.number.isRequired,\r\n    manaUpdates: PropTypes.array.isRequired,\r\n    offsetTime: PropTypes.number.isRequired,\r\n  };\r\n\r\n  constructor(props) {\r\n    super(props);\r\n    this.state = {\r\n      bossHealth: null,\r\n    };\r\n  }\r\n\r\n  componentDidMount() {\r\n    this.load();\r\n  }\r\n\r\n  componentDidUpdate(prevProps) {\r\n    if (prevProps.reportCode !== this.props.reportCode || prevProps.start !== this.props.start || prevProps.end !== this.props.end) {\r\n      this.load();\r\n    }\r\n  }\r\n\r\n  load() {\r\n    const { reportCode, start, end } = this.props;\r\n    fetchWcl(`report/tables/resources/${reportCode}`, {\r\n      start,\r\n      end,\r\n      sourceclass: 'Boss',\r\n      hostility: 1,\r\n      abilityid: 1000,\r\n    })\r\n      .then(json => {\r\n        this.setState({\r\n          bossHealth: json,\r\n        });\r\n      });\r\n  }\r\n\r\n  render() {\r\n    if (!this.state.bossHealth) {\r\n      return (\r\n        <div>\r\n          Loading...\r\n        </div>\r\n      );\r\n    }\r\n\r\n    const { start, end, manaUpdates, offsetTime } = this.props;\r\n\r\n    const mana = manaUpdates.map(({ timestamp, current, max }) => {\r\n      const x = Math.max(timestamp, start) - start;\r\n      return {\r\n        x,\r\n        y: (current / max) * 100,\r\n      };\r\n    });\r\n\r\n    let deaths = [];\r\n    if (this.state.bossHealth.deaths) {\r\n      deaths = this.state.bossHealth.deaths\r\n        .filter(death => death.targetID === this.props.actorId)\r\n        .map(({ timestamp, killingAbility }) => ({\r\n          x: timestamp - start,\r\n          ability: killingAbility? killingAbility.name : 'Unknown Ability',\r\n        }));\r\n    }\r\n\r\n    const bossData = this.state.bossHealth.series.map((series, i) => {\r\n      const data = series.data.map(([timestamp, health]) => ({ x: timestamp - start, y: health }));\r\n\r\n      return {\r\n        title: `${series.name} Health`,\r\n        borderColor: ManaStyles[`Boss-${i}`].borderColor,\r\n        backgroundColor: ManaStyles[`Boss-${i}`].backgroundColor,\r\n        data,\r\n      };\r\n    });\r\n\r\n    return (\r\n      <div>\r\n        Playing Arcane well typically involves managing your mana properly. Things such as not going OOM during Arcane Power, not letting your mana cap, and ensuring you end the fight with as little mana as possible will all help in improving your DPS.<br /><br />\r\n\r\n        <div className=\"graph-container\">\r\n          <ManaLevelGraph\r\n            mana={mana}\r\n            deaths={deaths}\r\n            bossData={bossData}\r\n            offsetTime={offsetTime}\r\n            startTime={start}\r\n            endTime={end}\r\n          />\r\n        </div>\r\n      </div>\r\n    );\r\n  }\r\n}\r\n\r\nexport default Mana;\r\n\r\n","import React from 'react';\r\nimport PropTypes from 'prop-types';\r\n\r\nimport ManaValues from 'parser/shared/modules/ManaValues';\r\nimport Panel from 'interface/others/Panel';\r\n\r\nimport ManaLevelGraph from './ManaLevelGraph';\r\n\r\nconst Mana = ({ parser }: any) => (\r\n  <Panel style={{ padding: '15px 22px' }}>\r\n    <h1>Mana pool</h1>\r\n    <ManaLevelGraph\r\n      reportCode={parser.report.code}\r\n      actorId={parser.playerId}\r\n      start={parser.fight.start_time}\r\n      end={parser.fight.end_time}\r\n      offsetTime={parser.fight.offset_time}\r\n      manaUpdates={parser.getModule(ManaValues).manaUpdates}\r\n    />\r\n  </Panel>\r\n);\r\nMana.propTypes = {\r\n  parser: PropTypes.object.isRequired,\r\n};\r\n\r\nexport default Mana;\r\n","import React from 'react';\r\n\r\nimport Analyzer from 'parser/core/Analyzer';\r\n\r\nimport TabComponent from './TabComponent';\r\n\r\nclass ManaTab extends Analyzer {\r\n  tab() {\r\n    return {\r\n      title: 'Mana',\r\n      url: 'mana',\r\n      render: () => (\r\n        <TabComponent\r\n          parser={this.owner}\r\n        />\r\n      ),\r\n    };\r\n  }\r\n}\r\n\r\nexport default ManaTab;\r\n","import SPELLS from 'common/SPELLS';\r\nimport Analyzer, { Options } from 'parser/core/Analyzer';\r\nimport SpellUsable from 'parser/shared/modules/SpellUsable';\r\nimport Events, { RemoveBuffEvent } from 'parser/core/Events';\r\nimport { SELECTED_PLAYER } from 'parser/core/EventFilter';\r\n\r\nclass MasterOfTime extends Analyzer {\r\n  static dependencies = {\r\n    spellUsable: SpellUsable,\r\n  };\r\n  protected spellUsable!: SpellUsable;\r\n\r\n  constructor(props: Options) {\r\n    super(props);\r\n    this.active = this.selectedCombatant.hasTalent(SPELLS.MASTER_OF_TIME_TALENT.id);\r\n    this.addEventListener(Events.removebuff.by(SELECTED_PLAYER).spell(SPELLS.ALTER_TIME_BUFF), this.resetBlink);\r\n  }\r\n\r\n  resetBlink(event: RemoveBuffEvent) {\r\n    if (this.spellUsable.isOnCooldown(SPELLS.BLINK.id)) {\r\n      this.spellUsable.endCooldown(SPELLS.BLINK.id);\r\n    }\r\n  }\r\n}\r\n\r\nexport default MasterOfTime;\r\n","import React from 'react';\r\nimport SPELLS from 'common/SPELLS';\r\nimport Analyzer, { Options } from 'parser/core/Analyzer';\r\nimport Events, { CastEvent, DamageEvent } from 'parser/core/Events';\r\nimport Statistic from 'interface/statistics/Statistic';\r\nimport BoringSpellValueText from 'interface/statistics/components/BoringSpellValueText';\r\nimport STATISTIC_CATEGORY from 'interface/others/STATISTIC_CATEGORY';\r\nimport ItemDamageDone from 'interface/ItemDamageDone';\r\nimport { SELECTED_PLAYER } from 'parser/core/EventFilter';\r\nimport AbilityTracker from 'parser/shared/modules/AbilityTracker';\r\nimport calculateEffectiveDamage from 'parser/core/calculateEffectiveDamage';\r\n\r\nconst DAMAGE_BONUS_PER_STACK = .06;\r\n\r\nclass ArcaneHarmony extends Analyzer {\r\n  static dependencies = {\r\n    abilityTracker: AbilityTracker,\r\n  }\r\n  protected abilityTracker!: AbilityTracker;\r\n\r\n  bonusDamage = 0;\r\n  stacks = 0\r\n  totalStacks = 0;\r\n\r\n  constructor(props: Options) {\r\n    super(props);\r\n    this.active = this.selectedCombatant.hasLegendaryByBonusID(SPELLS.ARCANE_HARMONY.bonusID);\r\n    this.addEventListener(Events.cast.by(SELECTED_PLAYER).spell(SPELLS.ARCANE_BARRAGE), this.onBarrageCast);\r\n    this.addEventListener(Events.damage.by(SELECTED_PLAYER).spell(SPELLS.ARCANE_BARRAGE), this.onBarrageDamage);\r\n  }\r\n\r\n  onBarrageCast(event: CastEvent) {\r\n    const buff = this.selectedCombatant.getBuff(SPELLS.ARCANE_HARMONY_BUFF.id);\r\n    if (buff && buff.stacks) {\r\n      this.stacks = buff.stacks;\r\n    }\r\n  }\r\n\r\n  onBarrageDamage(event: DamageEvent) {\r\n    if (this.stacks > 0) {\r\n      this.bonusDamage += calculateEffectiveDamage(event, DAMAGE_BONUS_PER_STACK * this.stacks);\r\n      this.totalStacks += this.stacks;\r\n      this.stacks = 0;\r\n    }\r\n  }\r\n\r\n  get averageStacks() {\r\n    return this.totalStacks / this.abilityTracker.getAbility(SPELLS.ARCANE_BARRAGE.id).casts;\r\n  }\r\n\r\n  statistic() {\r\n    return (\r\n      <Statistic\r\n        category={STATISTIC_CATEGORY.ITEMS}\r\n        size=\"flexible\"\r\n      >\r\n        <BoringSpellValueText spell={SPELLS.ARCANE_HARMONY}>\r\n          <ItemDamageDone amount={this.bonusDamage} /><br />\r\n          {this.averageStacks.toFixed(2)} <small>Avg. stacks per Barrage</small>\r\n        </BoringSpellValueText>\r\n      </Statistic>\r\n    );\r\n  }\r\n}\r\n\r\nexport default ArcaneHarmony;\r\n","import React from 'react';\r\nimport SPELLS from 'common/SPELLS';\r\nimport Analyzer, { Options } from 'parser/core/Analyzer';\r\nimport Events, { DamageEvent } from 'parser/core/Events';\r\nimport Statistic from 'interface/statistics/Statistic';\r\nimport BoringSpellValueText from 'interface/statistics/components/BoringSpellValueText';\r\nimport STATISTIC_CATEGORY from 'interface/others/STATISTIC_CATEGORY';\r\nimport ItemDamageDone from 'interface/ItemDamageDone';\r\nimport { SELECTED_PLAYER } from 'parser/core/EventFilter';\r\nimport AbilityTracker from 'parser/shared/modules/AbilityTracker';\r\nimport calculateEffectiveDamage from 'parser/core/calculateEffectiveDamage';\r\n\r\nconst HEALTH_THRESHOLD = .35;\r\nconst DAMAGE_BONUS = .8;\r\n\r\nclass ArcaneBombardment extends Analyzer {\r\n  static dependencies = {\r\n    abilityTracker: AbilityTracker,\r\n  }\r\n  protected abilityTracker!: AbilityTracker;\r\n\r\n  bonusDamage = 0;\r\n\r\n  constructor(props: Options) {\r\n    super(props);\r\n    this.active = this.selectedCombatant.hasLegendaryByBonusID(SPELLS.ARCANE_BOMBARDMENT.bonusID);\r\n    this.addEventListener(Events.damage.by(SELECTED_PLAYER).spell(SPELLS.ARCANE_BARRAGE), this.onBarrageDamage);\r\n  }\r\n\r\n  onBarrageDamage(event: DamageEvent) {\r\n    if (!event.hitPoints || !event.maxHitPoints) {\r\n      return;\r\n    }\r\n    const enemyHealth = event.hitPoints / event.maxHitPoints;\r\n    if (enemyHealth <= HEALTH_THRESHOLD) {\r\n      this.bonusDamage += calculateEffectiveDamage(event, DAMAGE_BONUS);\r\n    }\r\n  }\r\n\r\n  statistic() {\r\n    return (\r\n      <Statistic\r\n        category={STATISTIC_CATEGORY.ITEMS}\r\n        size=\"flexible\"\r\n      >\r\n        <BoringSpellValueText spell={SPELLS.ARCANE_BOMBARDMENT}>\r\n          <ItemDamageDone amount={this.bonusDamage} /><br />\r\n        </BoringSpellValueText>\r\n      </Statistic>\r\n    );\r\n  }\r\n}\r\n\r\nexport default ArcaneBombardment;\r\n","import React from 'react';\r\nimport SPELLS from 'common/SPELLS';\r\nimport Analyzer, { Options } from 'parser/core/Analyzer';\r\nimport Events, { CastEvent } from 'parser/core/Events';\r\nimport Statistic from 'interface/statistics/Statistic';\r\nimport BoringSpellValueText from 'interface/statistics/components/BoringSpellValueText';\r\nimport STATISTIC_CATEGORY from 'interface/others/STATISTIC_CATEGORY';\r\nimport UptimeIcon from 'interface/icons/Uptime';\r\nimport { SELECTED_PLAYER } from 'parser/core/EventFilter';\r\nimport SpellUsable from 'parser/shared/modules/SpellUsable';\r\n\r\nconst COOLDOWN_REDUCTION_MS = [0, 200, 200, 200, 200, 200, 200, 200, 300, 300, 300, 300, 300, 300, 300, 400];\r\n\r\nclass ArcaneProdigy extends Analyzer {\r\n  static dependencies = {\r\n    spellUsable: SpellUsable,\r\n  }\r\n  protected spellUsable!: SpellUsable;\r\n\r\n  conduitRank = 0;\r\n  cooldownReduction = 0;\r\n  wastedReduction = 0;\r\n\r\n  constructor(props: Options) {\r\n    super(props);\r\n    this.active = this.selectedCombatant.hasConduitBySpellID(SPELLS.ARCANE_PRODIGY.id);\r\n    if (!this.active) {\r\n      return;\r\n    }\r\n    this.conduitRank = this.selectedCombatant.conduitRankBySpellID(SPELLS.ARCANE_PRODIGY.id);\r\n    this.addEventListener(Events.cast.by(SELECTED_PLAYER).spell(SPELLS.ARCANE_MISSILES), this.onMissilesCast);\r\n  }\r\n\r\n  onMissilesCast(event: CastEvent) {\r\n    if (this.spellUsable.isOnCooldown(SPELLS.ARCANE_POWER.id)) {\r\n      this.cooldownReduction += this.spellUsable.reduceCooldown(SPELLS.ARCANE_POWER.id, COOLDOWN_REDUCTION_MS[this.conduitRank]);\r\n    } else {\r\n      this.wastedReduction += COOLDOWN_REDUCTION_MS[this.conduitRank];\r\n    }\r\n  }\r\n\r\n  get reductionSeconds() {\r\n    return this.cooldownReduction / 1000;\r\n  }\r\n\r\n  get wastedReductionSeconds() {\r\n    return this.wastedReduction / 1000;\r\n  }\r\n\r\n  statistic() {\r\n    return (\r\n      <Statistic\r\n        category={STATISTIC_CATEGORY.ITEMS}\r\n        size=\"flexible\"\r\n        tooltip={<>You reduced the cooldown on Arcane Power by a total of {this.reductionSeconds}s. Additionally, by casting Arcane Missiles while Arcane Power was not on cooldown, you wasted {this.wastedReductionSeconds}s that could have reduced the cooldown on Arcane Power further. </>}\r\n      >\r\n        <BoringSpellValueText spell={SPELLS.ARCANE_PRODIGY}>\r\n          <UptimeIcon /> {this.reductionSeconds}s <small>Arcane Power CDR</small><br />\r\n          {this.wastedReductionSeconds}s <small>Wasted CDR</small>\r\n        </BoringSpellValueText>\r\n      </Statistic>\r\n    );\r\n  }\r\n}\r\n\r\nexport default ArcaneProdigy;\r\n","import React from 'react';\r\nimport SPELLS from 'common/SPELLS';\r\nimport Analyzer, { Options } from 'parser/core/Analyzer';\r\nimport Events, { EnergizeEvent } from 'parser/core/Events';\r\nimport Statistic from 'interface/statistics/Statistic';\r\nimport BoringSpellValueText from 'interface/statistics/components/BoringSpellValueText';\r\nimport STATISTIC_CATEGORY from 'interface/others/STATISTIC_CATEGORY';\r\nimport { SELECTED_PLAYER } from 'parser/core/EventFilter';\r\nimport SpellUsable from 'parser/shared/modules/SpellUsable';\r\n\r\nclass ArtificeOfTheArchmage extends Analyzer {\r\n  static dependencies = {\r\n    spellUsable: SpellUsable,\r\n  }\r\n  protected spellUsable!: SpellUsable;\r\n\r\n  freeCharges = 0;\r\n\r\n  constructor(props: Options) {\r\n    super(props);\r\n    this.active = this.selectedCombatant.hasConduitBySpellID(SPELLS.ARTIFICE_OF_THE_ARCHMAGE.id);\r\n    this.addEventListener(Events.energize.by(SELECTED_PLAYER).spell(SPELLS.ARTIFICE_OF_THE_ARCHMAGE_ENERGIZE), this.onEnergize);\r\n  }\r\n\r\n  onEnergize(event: EnergizeEvent) {\r\n    this.freeCharges += 2;\r\n  }\r\n\r\n  get chargesPerMinute() {\r\n    return this.freeCharges / (this.owner.fightDuration / 60000) || 0;\r\n  }\r\n\r\n  statistic() {\r\n    return (\r\n      <Statistic\r\n        category={STATISTIC_CATEGORY.ITEMS}\r\n        size=\"flexible\"\r\n        tooltip={<>The number of Arcane Charges you received from the Artifice of the Archmage conduit. </>}\r\n      >\r\n        <BoringSpellValueText spell={SPELLS.ARTIFICE_OF_THE_ARCHMAGE}>\r\n          {this.freeCharges} <small>Free Arcane Charges</small>\r\n        </BoringSpellValueText>\r\n      </Statistic>\r\n    );\r\n  }\r\n}\r\n\r\nexport default ArtificeOfTheArchmage;\r\n","import CoreCombatLogParser from 'parser/core/CombatLogParser';\r\n\r\n//Normalizers\r\nimport ArcaneChargesNormalizer from './normalizers/ArcaneCharges';\r\nimport ArcanePowerNormalizer from './normalizers/ArcanePower';\r\nimport ShiftingPowerNormalizer from '../shared/normalizers/ShiftingPower';\r\n\r\n//Features\r\nimport AlwaysBeCasting from './modules/features/AlwaysBeCasting';\r\nimport Abilities from './modules/features/Abilities';\r\nimport CooldownThroughputTracker from './modules/features/CooldownThroughputTracker';\r\nimport Channeling from './modules/features/Channeling';\r\nimport Checklist from './modules/Checklist/Module';\r\nimport Buffs from './modules/features/Buffs';\r\nimport Mana from './modules/ManaChart/Mana';\r\nimport ManaValues from './modules/ManaChart/ManaValues';\r\nimport ArcaneChargeTracker from './modules/features/ArcaneChargeTracker';\r\nimport ArcanePower from './modules/features/ArcanePower';\r\nimport ArcaneMissiles from './modules/features/ArcaneMissiles';\r\nimport CancelledCasts from '../shared/modules/features/CancelledCasts';\r\nimport MirrorImage from '../shared/modules/features/MirrorImage';\r\nimport ArcaneIntellect from '../shared/modules/features/ArcaneIntellect';\r\nimport ElementalBarrier from '../shared/modules/features/ElementalBarrier';\r\n\r\n//Talents\r\nimport RuneOfPower from '../shared/modules/features/RuneOfPower';\r\nimport ArcaneOrb from './modules/talents/ArcaneOrb';\r\nimport RuleOfThrees from './modules/talents/RuleOfThrees';\r\nimport TimeAnomaly from './modules/talents/TimeAnomaly';\r\nimport ArcaneFamiliar from './modules/talents/ArcaneFamiliar';\r\nimport MasterOfTime from './modules/talents/MasterOfTime';\r\n\r\n//Legendaries\r\nimport ArcaneHarmony from './modules/items/ArcaneHarmony';\r\nimport ArcaneBombardment from './modules/items/ArcaneBombardment';\r\n\r\n//Covenants\r\nimport ShiftingPower from '../shared/modules/features/ShiftingPower';\r\n\r\n//Conduits\r\nimport ArcaneProdigy from './modules/items/ArcaneProdigy';\r\nimport ArtificeOfTheArchmage from './modules/items/ArtificeOfTheArchmage';\r\nimport DivertedEnergy from '../shared/modules/items/DivertedEnergy';\r\nimport GroundingSurge from '../shared/modules/items/GroundingSurge';\r\nimport IreOfTheAscended from '../shared/modules/items/IreOfTheAscended';\r\nimport TempestBarrier from '../shared/modules/items/TempestBarrier';\r\nimport SiphonedMalice from '../shared/modules/items/SiphonedMalice';\r\n\r\n\r\nclass CombatLogParser extends CoreCombatLogParser {\r\n  static specModules = {\r\n    //Normalizers\r\n    arcaneChargesNormalizer: ArcaneChargesNormalizer,\r\n    arcanePowerNormalizer: ArcanePowerNormalizer,\r\n    shiftingPowerNormalizer: ShiftingPowerNormalizer,\r\n\r\n    // Features\r\n    checklist: Checklist,\r\n    buffs: Buffs,\r\n    alwaysBeCasting: AlwaysBeCasting,\r\n    abilities: Abilities,\r\n    cooldownThroughputTracker: CooldownThroughputTracker,\r\n    channeling: Channeling,\r\n    mana: Mana,\r\n    manaValues: ManaValues,\r\n    cancelledCasts: CancelledCasts,\r\n    arcaneChargeTracker: ArcaneChargeTracker,\r\n    arcanePower: ArcanePower,\r\n    arcaneMissiles: ArcaneMissiles,\r\n    mirrorImage: MirrorImage,\r\n    elementalBarrier: ElementalBarrier,\r\n\r\n    // Talents\r\n    arcaneFamiliar: ArcaneFamiliar,\r\n    arcaneIntellect: ArcaneIntellect,\r\n    runeOfPower: RuneOfPower,\r\n    arcaneOrb: ArcaneOrb,\r\n    ruleOfThrees: RuleOfThrees,\r\n    timeAnomaly: TimeAnomaly,\r\n    masterOfTime: MasterOfTime,\r\n\r\n    //Legendaries\r\n    arcaneHarmony: ArcaneHarmony,\r\n    arcaneBombardment: ArcaneBombardment,\r\n\r\n    //Covenants\r\n    shiftingPower: ShiftingPower,\r\n\r\n    //Conduits\r\n    arcaneProdigy: ArcaneProdigy,\r\n    artificeOfTheArchmage: ArtificeOfTheArchmage,\r\n    divertedEnergy: DivertedEnergy,\r\n    groundingSurge: GroundingSurge,\r\n    ireOfTheAscended: IreOfTheAscended,\r\n    tempestBarrier: TempestBarrier,\r\n    siphonedMalice: SiphonedMalice,\r\n  };\r\n}\r\n\r\nexport default CombatLogParser;\r\n","import React from 'react';\r\nimport { AutoSizer } from 'react-virtualized';\r\nimport PropTypes from 'prop-types';\r\nimport BaseChart, { formatTime } from 'interface/others/BaseChart';\r\n\r\nclass ManaLevelGraph extends React.PureComponent {\r\n  static propTypes = {\r\n    mana: PropTypes.arrayOf(PropTypes.shape({\r\n      x: PropTypes.number.isRequired,\r\n      y: PropTypes.number.isRequired,\r\n    })).isRequired,\r\n    deaths: PropTypes.arrayOf(PropTypes.shape({\r\n      x: PropTypes.number.isRequired,\r\n    })),\r\n    bossData: PropTypes.arrayOf(PropTypes.shape({\r\n      title: PropTypes.string.isRequired,\r\n      borderColor: PropTypes.string,\r\n      backgroundColor: PropTypes.string,\r\n      data: PropTypes.arrayOf(PropTypes.shape({\r\n        x: PropTypes.number.isRequired,\r\n        y: PropTypes.number.isRequired,\r\n      })).isRequired,\r\n    })).isRequired,\r\n  };\r\n\r\n  static defaultProps = {\r\n    deaths: [],\r\n  };\r\n\r\n  colors = {\r\n    mana: {\r\n      border: 'rgba(2, 109, 215, 0.6)',\r\n      background: 'rgba(2, 109, 215, 0.25)',\r\n    },\r\n    death: 'rgba(255, 0, 0, 0.8)',\r\n  };\r\n\r\n  render() {\r\n    const { mana, deaths, bossData } = this.props;\r\n\r\n    const baseEncoding = {\r\n            x: {\r\n              field: 'x',\r\n              type: 'quantitative',\r\n              axis: {\r\n                labelExpr: formatTime('datum.value'),\r\n                grid: false,\r\n              },\r\n              title: null,\r\n              scale: { zero: true, nice: false },\r\n            },\r\n            y: {\r\n              field: 'y',\r\n              type: 'quantitative',\r\n              axis: {\r\n                tickCount: 4,\r\n              },\r\n              title: null,\r\n            },\r\n          };\r\n\r\n    const spec = {\r\n      layer: [\r\n        {\r\n          data: {\r\n            name: 'bosses',\r\n          },\r\n          transform: [\r\n            { flatten: ['data'] },\r\n            { calculate: 'datum.data.x', as: 'x' },\r\n            { calculate: 'datum.data.y', as: 'y' },\r\n          ],\r\n          mark: {\r\n            type: 'area',\r\n            opacity: 0.6,\r\n            line: {\r\n              interpolate: 'linear',\r\n              strokeWidth: 1,\r\n            },\r\n          },\r\n          encoding: {\r\n            ...baseEncoding,\r\n            color: {\r\n              field: 'title',\r\n              type: 'nominal',\r\n              title: 'Enemy',\r\n              legend: {\r\n                orient: 'top',\r\n              },\r\n              scale: {\r\n                scheme: \"accent\",\r\n              },\r\n            },\r\n          },\r\n        },\r\n        {\r\n          data: {\r\n            name: 'mana',\r\n          },\r\n          mark: {\r\n            type: 'area',\r\n            line: {\r\n              interpolate: 'linear',\r\n              color: this.colors.mana.border,\r\n              strokeWidth: 1,\r\n            },\r\n            color: this.colors.mana.background,\r\n          },\r\n          encoding: baseEncoding,\r\n        },\r\n        {\r\n          data: {\r\n            name: 'deaths',\r\n          },\r\n          mark: {\r\n            type: 'rule',\r\n            color: 'red',\r\n            strokeWidth: 2,\r\n          },\r\n          encoding: {\r\n            x: baseEncoding.x,\r\n            tooltip: [\r\n              { field: 'name', type: 'nominal', title: 'Target' },\r\n              { field: 'ability', type: 'nominal', title: 'Killing Ability' },\r\n            ],\r\n          },\r\n        },\r\n      ],\r\n    };\r\n\r\n    const data = {\r\n      mana, deaths,\r\n      bosses: bossData,\r\n    };\r\n\r\n    return (\r\n      <AutoSizer disableHeight>\r\n        {({ width }) => (\r\n          <BaseChart\r\n            height={400}\r\n            width={width}\r\n            spec={spec}\r\n            data={data}\r\n          />\r\n        )}\r\n      </AutoSizer>\r\n    );\r\n  }\r\n}\r\nexport default ManaLevelGraph;\r\n"],"sourceRoot":""}