{"version":3,"sources":["parser/warrior/protection/modules/core/Haste.ts","parser/warrior/protection/modules/Abilities.ts","parser/warrior/protection/modules/features/AlwaysBeCasting.tsx","parser/warrior/protection/modules/features/SpellUsable.ts","parser/warrior/protection/modules/features/MitigationCheck.ts","parser/warrior/protection/modules/features/Buffs.ts","parser/warrior/protection/modules/features/CooldownThroughputTracker.ts","parser/warrior/protection/modules/spells/ShieldBlock.js","parser/warrior/protection/modules/features/BlockCheck.js","parser/warrior/protection/modules/features/Checklist/Component.tsx","parser/warrior/protection/modules/core/RageTracker.ts","parser/warrior/protection/modules/core/RageDetails.tsx","parser/warrior/protection/modules/spells/ShieldSlam.tsx","parser/warrior/protection/modules/spells/SpellReflect.tsx","parser/warrior/protection/modules/features/Checklist/Module.tsx","parser/warrior/protection/modules/features/IgnorePain.ts","parser/warrior/protection/modules/features/Avatar.tsx","parser/warrior/protection/modules/talents/AngerManagement.tsx","parser/warrior/protection/modules/talents/BoomingVoice.tsx","parser/warrior/protection/modules/talents/HeavyRepercussions.tsx","parser/warrior/protection/modules/talents/IntoTheFray.tsx","parser/warrior/protection/modules/talents/WarMachine.tsx","parser/warrior/protection/modules/talents/Punish.tsx","parser/warrior/protection/modules/talents/DragonRoar.ts","parser/warrior/protection/CombatLogParser.ts","interface/statistics/components/BoringSpellValueText/index.tsx","parser/core/calculateEffectiveDamage.js","interface/statistics/components/BoringValueText/index.tsx","parser/shared/modules/resources/resourcetracker/ResourceTracker.ts","parser/shared/modules/resources/resourcetracker/ResourceBreakdown.tsx","common/ResourceIcon.tsx","common/ResourceLink.tsx","../node_modules/react-animate-height/lib/AnimateHeight.js","parser/core/calculateMaxCasts.ts","parser/shared/modules/MitigationCheck.js","parser/shared/modules/features/AoESpellEfficiency.tsx"],"names":["Haste","CoreHaste","HASTE_BUFFS","SPELLS","INTO_THE_FRAY_BUFF","id","hastePerStack","Abilities","combatant","this","selectedCombatant","spell","DEVASTATE","enabled","hasTalent","DEVASTATOR_TALENT","gcd","base","category","SPELL_CATEGORIES","ROTATIONAL","timelineSortIndex","WHIRLWIND","ROTATIONAL_AOE","SHATTERING_THROW","cooldown","OTHERS","EXECUTE","haste","REVENGE","buffSpellId","REVENGE_FREE_CAST","SHIELD_SLAM","PUNISH_DEBUFF","THUNDER_CLAP","UNSTOPPABLE_FORCE_TALENT","hasBuff","AVATAR_TALENT","castEfficiency","suggestion","recommendedEfficiency","extraSuggestion","IGNORE_PAIN","DEFENSIVE","SHIELD_BLOCK","SHIELD_BLOCK_BUFF","charges","DEMORALIZING_SHOUT","LAST_STAND","BOLSTER_TALENT","SHIELD_WALL","SPELL_REFLECTION","HEROIC_LEAP","UTILITY","BOUNDING_STRIDE_TALENT","HEROIC_THROW","INTERCEPT","TAUNT","BERSERKER_RAGE","COOLDOWNS","PUMMEL","VICTORY_RUSH","IMPENDING_VICTORY_TALENT","STORM_BOLT_TALENT","RAVAGER_TALENT_PROTECTION","DRAGON_ROAR_TALENT","RALLYING_CRY","CoreAbilities","AlwaysBeCasting","when","totalTimeWasted","owner","fightDuration","isGreaterThan","addSuggestion","suggest","actual","recommended","icon","i18n","_","formatPercentage","Math","round","Number","regular","major","CoreAlwaysBeCasting","SpellUsable","options","hasDevastator","lastPotentialTriggerForShieldSlam","globalCooldown","event","spellId","ability","guid","MELEE","timestamp","getGlobalCooldownDuration","cooldownTriggerEvent","isOnCooldown","endCooldown","undefined","CoreSpellUsable","dependencies","GlobalCooldown","MitigationCheck","buffCheckPhysical","buffCheckMagical","buffCheckPhysAndMag","debuffCheckPhysAndMag","CoreMitigationCheck","Buffs","Object","keys","BLOODLUST_BUFFS","map","item","timelineHighlight","CoreBuffs","CooldownThroughputTracker","CoreCooldownThroughputTracker","cooldownSpells","summary","BUILT_IN_SUMMARY_TYPES","DAMAGE","ShieldBlock","args","goodCast","badCast","bolster","ssNeeded","shieldBlocksOffensive","shieldBlocksDefensive","shieldBlocksOverall","addEventListener","Events","cast","by","SELECTED_PLAYER","onCast","damage","onDamage","to","onDamageTaken","fightend","onFightend","isLessThan","minor","average","style","ThresholdStyle","PERCENTAGE","length","checkLastBlock","shieldBlockCast","shieldSlamCast","blocked","blockAbleEvents","eventName","add","name","eventSpellId","blockedDamage","damageTaken","amount","absorbed","good","offensive","shieldBlock","shieldSlamCasts","bonusDamage","timeStamp","push","defensive","Set","beforeDamage","eventDamage","overall","meta","isInefficientCast","inefficientCastReason","suggestionThresholds","SpellLink","floor","goodCasts","offensiveCasts","defensiveCasts","totalCasts","i","Statistic","size","tooltip","BoringSpellValueText","Analyzer","BlockCheck","physicalHitsWithBlock","physicalHitsWithoutBlock","rawDamageWithBlock","rawDamageWithoutBlock","heavyRepercussions","HEAVY_REPERCUSSIONS_TALENT","noHRorBlThresholds","blnoHRThresholds","blHRThresholds","statisticOrder","STATISTIC_ORDER","CORE","listOfEvents","thresholdsToUse","type","prot","bloster","blockableSet","forEach","block","blockedAbility","has","unmitigatedAmount","physicalHitsMitigatedPercent","physicalDamageMitigatedPercent","StatisticBox","SpellIcon","value","label","formatThousands","ProtectionWarriorChecklist","thresholds","AbilityRequirement","props","GenericCastEfficiencyRequirement","getCastEfficiencyForSpellId","Rule","description","ResourceLink","RESOURCE_TYPES","RAGE","Requirement","shieldSlam","BOOMING_VOICE_TALENT","spellReflect","rageDetails","PreparationRule","RageTracker","lastMeleeTaken","maxResource","ragePerMeleeHit","resource","WAR_MACHINE_PROTECTION_TALENT","processInvisibleEnergize","RAGE_AUTO_ATTACKS","hitType","HIT_TYPES","DODGE","PARRY","RAGE_DAMAGE_TAKEN","ResourceTracker","RageDetails","rageTracker","wastedPercent","Icon","wasted","generated","title","url","render","Panel","ResourceBreakdown","tracker","showSpenders","timeOnCd","currentCd","lastCast","averageCd","actualCasts","totalCastsAssumed","statTracker","abilityTracker","fight","start_time","onSlamCast","handleFightEnd","hastePercentage","currentHasteRating","getAbility","casts","end_time","toFixed","slamRatio","StatTracker","AbilityTracker","SpellReflect","magicDamage","magicDamageReduced","totalDamage","SCHOOLS","ids","PHYSICAL","console","log","Checklist","combatants","manaValues","preparationRuleAnalyzer","alwaysBeCasting","blockCheck","Component","selected","downtimeSuggestionThresholds","BaseChecklist","Combatants","CastEfficiency","ManaValues","PreparationRuleAnalyzer","ShieldSlam","IgnorePain","getBuffUptime","uptime","Avatar","bonusDmg","EventFilter","EventType","Damage","handleDamage","calculateEffectiveDamage","formatNumber","getPercentageOfTotalDamageDone","COOLDOWNS_AFFECTED_BY_ANGER_MANAGEMENT","AngerManagement","totalRageSpend","wastedReduction","effectiveReduction","spellUsable","active","ANGER_MANAGEMENT_TALENT","e","classResources","find","cost","rageSpend","reduction","reduceCooldown","position","OPTIONAL","STATISTIC_CATEGORY","TALENTS","dropdown","BoringValueText","className","key","formatDuration","BoomingVoice","rageGenerated","rageWasted","maxRage","nextCastWasted","enemies","onShoutCast","energize","onShoutEnergize","resourceChange","waste","targetIsFriendly","enemy","getEntity","uptimeSuggestionThresholds","NUMBER","Enemies","HeavyRepercussions","sbExtended","sbCasts","sbExtendedMS","rageFromTalent","getGeneratedBySpell","getWastedBySpell","shieldBlockuptime","IntoTheFray","buffStacks","lastStacks","lastUpdate","INTO_THE_FRAY_TALENT","applybuff","handleStacks","applybuffstack","removebuff","removebuffstack","fightEnd","Array","from","MAX_STACKS","stack","stackEvent","RemoveBuff","isNaN","ApplyBuff","reduce","a","b","averageHaste","avgStacks","elem","index","WarMachine","rageFromWarMachine","Punish","PUNISH_TALENT","onSlamDamage","DragonRoar","AoESpellEfficiency","CombatLogParser","CoreCombatLogParser","specModules","mitigationCheck","buffs","abilities","cooldownThroughputTracker","checklist","ignorePain","avatar","angerManagement","boomingVoice","intoTheFray","warMachine","punish","dragonRoar","arcaneTorrent","ArcaneTorrent","children","increase","raw","BoringValue","eventEmitter","current","resourceUpdates","buildersObj","spendersObj","onEnergize","spent","spentByCast","resourceChangeType","gain","_applyBuilder","getResource","maxGain","min","max","initBuilderAbility","used","shouldProcessCastEvent","eventResource","getReducedCost","initSpenderAbility","triggerSpendEvent","resourceCost","r","fabricatedEvent","SpendResource","sourceID","targetID","__fabricated","fabricateEvent","Boolean","values","acc","EventEmitter","abilityId","sort","filter","resourceName","prepareGenerated","prepareSpent","totalGenerated","totalWasted","totalSpent","spendersCasts","colSpan","content","width","paddingRight","textAlign","React","ResourceIcon","noLink","others","alt","useState","setElem","useEffect","TooltipProvider","refresh","other","href","target","rel","ref","defineProperty","exports","_typeof","Symbol","iterator","obj","constructor","prototype","_extends","assign","arguments","source","hasOwnProperty","call","_createClass","defineProperties","descriptor","enumerable","configurable","writable","Constructor","protoProps","staticProps","_react2","_interopRequireDefault","require","_propTypes2","_classnames2","__esModule","default","_defineProperty","ANIMATION_STATE_CLASSES","animating","animatingUp","animatingDown","animatingToHeightZero","animatingToHeightAuto","animatingToHeightSpecific","static","staticHeightZero","staticHeightAuto","staticHeightSpecific","PROPS_TO_OMIT","omit","_len","_key","res","objectKeys","indexOf","cancelAnimationFrames","requestAnimationFrameIDs","cancelAnimationFrame","isNumber","n","parseFloat","isFinite","isPercentage","height","search","substr","runCallback","callback","params","AnimateHeight","_React$Component","instance","TypeError","_classCallCheck","_this","self","ReferenceError","_possibleConstructorReturn","__proto__","getPrototypeOf","animationFrameIDs","overflow","animationStateClasses","getStaticStateClasses","state","shouldUseTransitions","subClass","superClass","create","setPrototypeOf","_inherits","contentElement","hideContent","prevProps","prevState","_this2","_props","delay","duration","onAnimationEnd","onAnimationStart","_cx","showContent","contentHeight","offsetHeight","totalDuration","newHeight","timeoutState","isCurrentHeightAuto","timeoutAnimationStateClasses","setState","clearTimeout","timeoutID","animationClassesTimeoutID","requestAnimationFrame","startAnimationHelper","setTimeout","display","_cx2","_cx3","_this3","_props2","animateOpacity","applyInlineTransitions","contentClassName","easing","_state","componentStyle","transition","WebkitTransition","contentStyle","opacity","componentClasses","ariaHidden","createElement","apply","concat","el","propTypes","bool","object","any","isRequired","string","number","propName","componentName","func","defaultProps","calculateMaxCasts","checksPassedMap","Map","checksFailedMap","checksPhysical","checksMagical","debuffCheckPhysical","debuffCheckMagical","boss","findByBossId","softMitigationChecks","physical","magical","set","checks","buffCheck","debuffCheck","MAGIC_SCHOOLS","includes","tick","some","IMMUNE","get","getEntities","failSum","total","val","passSum","spellIconId","physicalTable","physicalChecks","scope","borderless","borderTop","magicalTable","magicalChecks","fontWeight","hits","hitSuggestionThreshold","totalHits","possibleHits","Infinity","ceil","cooldownS","cooldownMS","missedCasts","timeSum","currentTimestamp","maxCasts"],"mappings":"gMAIMA,E,4HAAcC,KAAdD,EACGE,Y,2BACFD,IAAUC,a,kBAEZC,IAAOC,mBAAmBC,GAAK,CAC9BC,cAAe,OAKNN,Q,OCyNAO,E,0KAjOX,IAAMC,EAAYC,KAAKC,kBACvB,MAAO,CACL,CACEC,MAAOR,IAAOS,UACdC,SAAUL,EAAUM,UAAUX,IAAOY,kBAAkBV,IACvDW,IAAK,CACHC,KAAM,MAERC,SAAUX,EAAUY,iBAAiBC,WACrCC,kBAAmB,GAErB,CACEV,MAAOR,IAAOmB,UACdJ,SAAUX,EAAUY,iBAAiBI,eACrCP,IAAK,CACHC,KAAM,OAGV,CACEN,MAAOR,IAAOqB,iBACdR,IAAK,CACHC,KAAM,MAERQ,SAAU,IACVP,SAAUX,EAAUY,iBAAiBO,OACrCL,kBAAmB,GAErB,CACEV,MAAOR,IAAOwB,QACdX,IAAK,CACHC,KAAM,MAERQ,SAAU,SAAAG,GAAK,OAAI,GAAK,EAAIA,IAC5BV,SAAUX,EAAUY,iBAAiBC,WACrCC,kBAAmB,GAErB,CACEV,MAAOR,IAAO0B,QACdb,IAAK,CACHC,KAAM,MAERa,YAAa3B,IAAO4B,kBAAkB1B,GACtCoB,SAAU,SAAAG,GAAK,OAAI,GAAK,EAAIA,IAC5BV,SAAUX,EAAUY,iBAAiBC,WACrCC,kBAAmB,GAErB,CACEV,MAAOR,IAAO6B,YACdhB,IAAK,CACHC,KAAM,MAERC,SAAUX,EAAUY,iBAAiBC,WACrCU,YAAa3B,IAAO8B,cAAc5B,GAClCoB,SAAU,SAAAG,GAAK,OAAI,GAAK,EAAIA,IAC5BP,kBAAmB,GAErB,CACEV,MAAOR,IAAO+B,aACdlB,IAAK,CACHC,KAAM,MAERC,SAAUX,EAAUY,iBAAiBC,WACrCK,SAAU,SAAAG,GACR,OAAIpB,EAAUM,UAAUX,IAAOgC,yBAAyB9B,KAAOG,EAAU4B,QAAQjC,IAAOkC,cAAchC,IAC7F,GAAS,EAAIuB,GAEf,GAAK,EAAIA,IAElBU,eAAgB,CACdC,YAAY,EACZC,sBAAuB,GACvBC,gBAAiB,yEAEnBpB,kBAAmB,GAErB,CACEV,MAAOR,IAAOuC,YACdxB,SAAUX,EAAUY,iBAAiBwB,UACrCb,YAAa3B,IAAOuC,YAAYrC,GAChCgB,kBAAmB,GAErB,CACEV,MAAOR,IAAOyC,aACdd,YAAa3B,IAAO0C,kBAAkBxC,GACtCa,SAAUX,EAAUY,iBAAiBwB,UACrClB,SAAU,SAAAG,GAAK,OAAI,IAAM,EAAIA,IAC7BkB,QAAS,EACTzB,kBAAmB,GAErB,CACEV,MAAOR,IAAO4C,mBACdjB,YAAa3B,IAAO4C,mBAAmB1C,GACvCa,SAAUX,EAAUY,iBAAiBwB,UACrC3B,IAAK,CACHC,KAAM,MAERQ,SAAU,GACVJ,kBAAmB,GAErB,CACEV,MAAOR,IAAO6C,WACdlB,YAAa3B,IAAO6C,WAAW3C,GAC/Ba,SAAUX,EAAUY,iBAAiBwB,UACrClB,SAAUjB,EAAUM,UAAUX,IAAO8C,eAAe5C,IAAM,IAAW,IACrEgB,kBAAmB,GAErB,CACEV,MAAOR,IAAO+C,YACdpB,YAAa3B,IAAO+C,YAAY7C,GAChCa,SAAUX,EAAUY,iBAAiBwB,UACrClB,SAAU,IACVJ,kBAAmB,GAErB,CACEV,MAAOR,IAAOgD,iBACdjC,SAAUX,EAAUY,iBAAiBwB,UACrClB,SAAU,IAEZ,CACEd,MAAOR,IAAOiD,YACdpC,IAAK,CACHC,KAAM,MAERC,SAAUX,EAAUY,iBAAiBkC,QACrC5B,SAAUjB,EAAUM,UAAUX,IAAOmD,uBAAuBjD,IAAM,GAAU,IAE9E,CACEM,MAAOR,IAAOoD,aACdvC,IAAK,CACHC,KAAM,MAERC,SAAUX,EAAUY,iBAAiBkC,SAEvC,CACE1C,MAAOR,IAAOqD,UACdtC,SAAUX,EAAUY,iBAAiBkC,QACrC5B,SAAU,GACVqB,QAAS,GAEX,CACEnC,MAAOR,IAAOsD,MACdvC,SAAUX,EAAUY,iBAAiBkC,QACrC5B,SAAU,GAEZ,CACEd,MAAOR,IAAOuD,eACdxC,SAAUX,EAAUY,iBAAiBwC,UACrClC,SAAU,GACVJ,kBAAmB,GAErB,CACEV,MAAOR,IAAOyD,OACd1C,SAAUX,EAAUY,iBAAiBkC,QACrC5B,SAAU,IAEZ,CACEd,MAAOR,IAAO0D,aACdhD,SAAUL,EAAUM,UAAUX,IAAO2D,yBAAyBzD,IAC9Da,SAAUX,EAAUY,iBAAiBO,QAEvC,CACEf,MAAOR,IAAO4D,kBACdlD,QAASL,EAAUM,UAAUX,IAAO4D,kBAAkB1D,IACtDa,SAAUX,EAAUY,iBAAiBkC,QACrCrC,IAAK,CACHC,KAAM,MAERQ,SAAU,IAEZ,CACEd,MAAOR,IAAOkC,cACdP,YAAa3B,IAAOkC,cAAchC,GAClCa,SAAUX,EAAUY,iBAAiBwC,UACrC3C,IAAK,CACHC,KAAM,MAERQ,SAAU,GACVJ,kBAAmB,GAErB,CACEV,MAAOR,IAAO2D,yBACdjD,QAASL,EAAUM,UAAUX,IAAO2D,yBAAyBzD,IAC7Da,SAAUX,EAAUY,iBAAiBO,OACrCV,IAAK,CACHC,KAAM,MAERQ,SAAU,IAEZ,CACEd,MAAOR,IAAO6D,0BACdnD,QAASL,EAAUM,UAAUX,IAAO6D,0BAA0B3D,IAC9Da,SAAUX,EAAUY,iBAAiBwC,UACrC3C,IAAK,CACHC,KAAM,MAERQ,SAAU,GACVa,eAAgB,CACdC,YAAY,EACZC,sBAAuB,IAEzBnB,kBAAmB,GAErB,CACEV,MAAOR,IAAO8D,mBACdpD,QAASL,EAAUM,UAAUX,IAAO8D,mBAAmB5D,IACvDa,SAAUX,EAAUY,iBAAiBwC,UACrC3C,IAAK,CACHC,KAAM,MAERQ,SAAU,GACVJ,kBAAmB,GAErB,CACEV,MAAOR,IAAO+D,aACdhD,SAAUX,EAAUY,iBAAiBkC,QACrCrC,IAAK,CACHC,KAAM,MAERQ,SAAU,IACVJ,kBAAmB,Q,UA7NH8C,G,yCCgBTC,E,0KAZDC,GAGVA,EAF2B5D,KAAK6D,gBAAkB7D,KAAK8D,MAAMC,eAEpCC,cAAc,IACpCC,eAAc,SAACC,EAASC,EAAQC,GAAlB,OAAkCF,EAAQ,mGACtDG,KAAK,wBACLF,OAAOG,OAAKC,EAAE,iGAA+DC,YAAiBL,OAC9FC,YAH8C,UAG/BK,KAAKC,MAAMC,OAAOH,YAAiBJ,KAHJ,qBAI9CQ,QAAQR,EAAc,KAAMS,MAAMT,EAAc,Y,GAT3BU,K,mCCDxBC,E,kDASJ,WAAYC,GAAmB,IAAD,8BAC5B,cAAMA,IALRC,mBAI8B,IAH9BC,kCAAsD,KAGxB,EAFpBC,oBAEoB,EAE5B,EAAKF,cAAgB,EAAKhF,kBAAkBI,UAAUX,IAAOY,kBAAkBV,IAFnD,E,mDAKvBwF,GACL,8DAAaA,GACb,IAAMC,EAAUD,EAAME,QAAQC,KAC1BF,IAAY3F,IAAO8F,MAAM5F,IAAMI,KAAKiF,cACtCjF,KAAKkF,kCAAoCE,EAChCC,IAAY3F,IAAOS,UAAUP,IAAMyF,IAAY3F,IAAO+B,aAAa7B,IAAMyF,IAAY3F,IAAO0B,QAAQxB,IAC7GI,KAAKkF,kCAAL,eAA8CE,GAE9CpF,KAAKkF,kCAAkCO,WAAazF,KAAKmF,eAAeO,0BAA0BL,IACzFA,IAAY3F,IAAO6B,YAAY3B,KACxCI,KAAKkF,kCAAoC,Q,oCAI/BG,EAAiBM,GACzBN,IAAY3F,IAAO6B,YAAY3B,IAC7BI,KAAK4F,aAAaP,IACpBrF,KAAK6F,YAAYR,OAASS,EAAW9F,KAAKkF,kCAAoClF,KAAKkF,kCAAkCO,eAAYK,GAIrI,qEAAoBT,EAASM,O,GAnCPI,KAApBhB,EACGiB,a,2BACFD,IAAgBC,c,IACnBb,eAAgBc,MAoCLlB,QC9BAmB,E,kDAVb,WAAYlB,GAAmB,IAAD,8BAC5B,cAAMA,IACDmB,kBAAoB,CAACzG,IAAO0C,kBAAkBxC,IACnD,EAAKwG,iBAAmB,CAAC1G,IAAOgD,iBAAiB9C,IACjD,EAAKyG,oBAAsB,CAAC3G,IAAOuC,YAAYrC,GAAIF,IAAO6C,WAAW3C,GAAIF,IAAO+C,YAAY7C,IAE5F,EAAK0G,sBAAwB,CAAC5G,IAAO4C,mBAAmB1C,IAN5B,E,iBADF2G,G,kBCmCfC,E,sKA7BX,MAAO,CACL,CACEnB,QAASoB,OAAOC,KAAKC,KAAiBC,KAAI,SAAAC,GAAI,OAAIlC,OAAOkC,MACzDC,mBAAmB,GAErB,CACEzB,QAAS3F,IAAOkC,cAAchC,GAC9BkH,mBAAmB,GAErB,CACEzB,QAAS3F,IAAO6C,WAAW3C,GAC3BkH,mBAAmB,GAErB,CACEzB,QAAS3F,IAAO0C,kBAAkBxC,GAClCkH,mBAAmB,GAErB,CACEzB,QAAS3F,IAAO+C,YAAY7C,GAC5BkH,mBAAmB,GAErB,CACEzB,QAAS3F,IAAOgD,iBAAiB9C,GACjCkH,mBAAmB,Q,GA7BPC,K,iBCAdC,E,4HAAkCC,KAAlCD,EACGE,e,sBACFD,IAA8BC,gB,CACjC,CACEhH,MAAOR,IAAOkC,cACduF,QAAS,CACPC,IAAuBC,WAMhBL,Q,kDC8MAM,E,kDA3Lb,aAAsB,IAAD,iDAANC,EAAM,yBAANA,EAAM,uBACnB,+BAASA,KANXC,SAAW,EAKU,EAJrBC,QAAU,EAIW,EAHrBC,QAAU,EAAKzH,kBAAkBI,UAAUX,IAAO8C,eAAe5C,IAG5C,EAFrB+H,SAAY,EAAK1H,kBAAkBI,UAAUX,IAAOY,kBAAkBV,IAAU,EAAJ,EAI1E,EAAKgI,sBAAwB,GAC7B,EAAKC,sBAAwB,GAC7B,EAAKC,oBAAsB,GAC3B,EAAKC,iBAAiBC,IAAOC,KAAKC,GAAGC,KAAiBjI,MAAMR,IAAOyC,cAAe,EAAKiG,QACvF,EAAKL,iBAAiBC,IAAOK,OAAOH,GAAGC,KAAkB,EAAKG,UAC9D,EAAKP,iBAAiBC,IAAOK,OAAOE,GAAGJ,KAAkB,EAAKK,eAC9D,EAAKT,iBAAiBC,IAAOS,SAAU,EAAKC,YARzB,E,iEAnBnB,MAAO,CACLvE,OAAQnE,KAAKwH,UAAYxH,KAAKwH,SAAWxH,KAAKyH,SAC9CkB,WAAY,CACVC,MAAO,GACPC,QAAS,GACThE,MAAO,IAETiE,MAAOC,IAAeC,gB,4CAuBnB5D,GACDpF,KAAK6H,sBAAsBoB,OAAS,GACtCjJ,KAAKkJ,iBAGPlJ,KAAKmJ,gBAAgB/D,K,+BAGdA,GACP,IAAMC,EAAUD,EAAME,QAAQC,KAEzBvF,KAAKC,kBAAkB0B,QAAQjC,IAAO0C,kBAAkBxC,MAInB,IAAtCI,KAAK4H,sBAAsBqB,QAC7BjJ,KAAKmJ,gBAAgB/D,GAGnBC,IAAY3F,IAAO6B,YAAY3B,IACjCI,KAAKoJ,eAAehE,M,oCAIVA,GAEPpF,KAAKC,kBAAkB0B,QAAQjC,IAAO0C,kBAAkBxC,MAIzDI,KAAKC,kBAAkB0B,QAAQjC,IAAO6C,WAAW3C,KAAOI,KAAK0H,UAIvB,IAAtC1H,KAAK6H,sBAAsBoB,QAC7BjJ,KAAKmJ,gBAAgB/D,GAGnBA,EAAMiE,QAAU,IAClBrJ,KAAK6H,sBAAsB7H,KAAK6H,sBAAsBoB,OAAS,GAAGK,iBAAmB,EACrFtJ,KAAK6H,sBAAsB7H,KAAK6H,sBAAsBoB,OAAS,GAAGM,UAAUC,IAAIpE,EAAME,QAAQmE,MAC9FzJ,KAAK6H,sBAAsB7H,KAAK6H,sBAAsBoB,OAAS,GAAGS,aAAaF,IAAIpE,EAAME,QAAQC,OAGnGvF,KAAK6H,sBAAsB7H,KAAK6H,sBAAsBoB,OAAS,GAAGU,eAAiBvE,EAAMiE,SAAW,EACpGrJ,KAAK6H,sBAAsB7H,KAAK6H,sBAAsBoB,OAAS,GAAGW,aAAexE,EAAMyE,OAASzE,EAAM0E,UAAY,EAE9G9J,KAAK6H,sBAAsB7H,KAAK6H,sBAAsBoB,OAAS,GAAGK,gBAAkB,IACtFtJ,KAAK6H,sBAAsB7H,KAAK6H,sBAAsBoB,OAAS,GAAGc,MAAO,O,sCAK7D3E,GAEd,IAAM4E,EAAY,CAChBC,YAAajK,KAAK4H,sBAAsBqB,OAAS,EACjDiB,gBAAiB,EACjBC,YAAa,EACbC,UAAWhF,EAAMK,UACjBsE,MAAM,EACN3E,MAAOA,GAGTpF,KAAK4H,sBAAsByC,KAAKL,GAEhC,IAAMM,EAAY,CAChBL,YAAajK,KAAK6H,sBAAsBoB,OAAS,EACjDK,gBAAiB,EACjBK,cAAe,EACfC,YAAa,EACbL,UAAW,IAAIgB,IACfb,aAAc,IAAIa,IAClBR,MAAM,GAGR/J,KAAK6H,sBAAsBwC,KAAKC,K,qCAInBlF,GACbpF,KAAK4H,sBAAsB5H,KAAK4H,sBAAsBqB,OAAS,GAAGiB,iBAAmB,EAEjFlK,KAAK4H,sBAAsB5H,KAAK4H,sBAAsBqB,OAAS,GAAGiB,gBAAkBlK,KAAK2H,WAC3F3H,KAAK4H,sBAAsB5H,KAAK4H,sBAAsBqB,OAAS,GAAGc,MAAO,GAG3E,IAAMS,EAAexK,KAAK4H,sBAAsB5H,KAAK4H,sBAAsBqB,OAAS,GAAGkB,aAAe,EAChGM,GAAgBrF,EAAMyE,QAAU,IAAMzE,EAAM0E,UAAY,GACxDK,EAAc1F,KAAKC,MAAM+F,EAAcA,EAAc,KAE3DzK,KAAK4H,sBAAsB5H,KAAK4H,sBAAsBqB,OAAS,GAAGkB,YAAcK,EAAeL,I,uCAM/F,IAAMO,EAAU,CACdT,YAAajK,KAAK4H,sBAAsB5H,KAAK4H,sBAAsBqB,OAAS,GAAGgB,YAC/EF,KAAO/J,KAAK4H,sBAAsB5H,KAAK4H,sBAAsBqB,OAAS,GAAGc,MAAQ/J,KAAK6H,sBAAsB7H,KAAK6H,sBAAsBoB,OAAS,GAAGc,MAGrJ,GAAIW,EAAQX,KACV/J,KAAKwH,UAAY,MACZ,CACLxH,KAAKyH,SAAW,EAChB,IAAMrC,EAAQpF,KAAK4H,sBAAsB5H,KAAK4H,sBAAsBqB,OAAS,GAAG7D,MAChFA,EAAMuF,KAAOvF,EAAMuF,MAAQ,GAC3BvF,EAAMuF,KAAKC,mBAAoB,EAC/BxF,EAAMuF,KAAKE,sBAAX,qFACA7K,KAAK4H,sBAAsB5H,KAAK4H,sBAAsBqB,OAAS,GAAG7D,MAAQA,EAG5EpF,KAAK8H,oBAAoBuC,KAAKK,K,mCAK1B1K,KAAK6H,sBAAsBoB,OAAS,GACtCjJ,KAAKkJ,mB,kCAWGtF,GAAO,IAAD,OAChBA,EAAK5D,KAAK8K,sBAAsB7G,eAAc,SAACC,EAASC,EAAQC,GAAlB,OAAkCF,EAC9E,2DAAsB,kBAAC6G,EAAA,EAAD,CAAWnL,GAAIF,IAAOyC,aAAavC,KAAzD,uGAECyE,KAAK3E,IAAOyC,aAAakC,MACzBF,OAAOG,OAAKC,EAAE,+GAA4D,EAAKiD,aAC/EpD,YAL6E,UAK9DK,KAAKuG,MAAM5G,GAAe,EAAKoD,SAAW,EAAKC,UALe,yB,kCAahF,IAJA,IAAIwD,EAAY,EACZC,EAAiB,EACjBC,EAAiB,EACfC,EAAapL,KAAK8H,oBAAoBmB,OACnCoC,EAAI,EAAGA,EAAIrL,KAAK8H,oBAAoBmB,OAAQoC,GAAK,EACxDJ,GAAajL,KAAK8H,oBAAoBuD,GAAGtB,KAAO,EAAI,EACpDmB,GAAkBlL,KAAK4H,sBAAsByD,GAAGtB,KAAO,EAAI,EAC3DoB,GAAkBnL,KAAK6H,sBAAsBwD,GAAGtB,KAAO,EAAI,EAG7D,OACE,kBAACuB,EAAA,EAAD,CACEC,KAAK,WACLC,QACE,0DACsBJ,EAAaH,EAAU,6BAD7C,yBAEyBC,EAAe,6BAFxC,uCAGsC,kBAACH,EAAA,EAAD,CAAWnL,GAAIF,IAAO6B,YAAY3B,KAHxE,eAG0F,kBAACmL,EAAA,EAAD,CAAWnL,GAAIF,IAAOyC,aAAavC,KAH7H,wCAGwK,kBAACmL,EAAA,EAAD,CAAWnL,GAAIF,IAAO6B,YAAY3B,KAH1M,WAIE,6BAAM,6BAJR,yBAKyBuL,EAAe,6BALxC,uDAOE,6BAAM,6BAPR,2DASE,6BAAM,6BATR,0CAUyC,kBAACJ,EAAA,EAAD,CAAWnL,GAAIF,IAAOyC,aAAavC,KAV5E,gGAcF,kBAAC6L,EAAA,EAAD,CAAsBvL,MAAOR,IAAOyC,cAApC,wBACwBiJ,EAAaD,EAAe,mC,GA1MlCO,K,iBCKpBC,E,kDAyCJ,aAAsB,IAAD,iDAANpE,EAAM,yBAANA,EAAM,uBACnB,+BAASA,KA9BXqE,sBAAwB,EA6BH,EA5BrBC,yBAA2B,EA4BN,EA3BrBC,mBAAqB,EA2BA,EA1BrBC,sBAAwB,EA0BH,EAxBrBrE,QAAU,EAAKzH,kBAAkBI,UAAUX,IAAO8C,eAAe5C,IAwB5C,EApBrBoM,mBAAqB,EAAK/L,kBAAkBI,UAAUX,IAAOuM,2BAA2BrM,IAoBnE,EAlBrBsM,mBAAqB,CACnBtD,MAAO,GACPC,QAAS,IACThE,MAAO,IAeY,EAbrBsH,iBAAmB,CACjBvD,MAAO,IACPC,QAAS,IACThE,MAAO,IAUY,EARrBuH,eAAiB,CACfxD,MAAO,IACPC,QAAS,GACThE,MAAO,IAKY,EAFrBwH,eAAiBC,IAAgBC,KAAK,IAIpC,EAAKC,aAAe,GAChB,EAAK9E,SAAW,EAAKsE,mBACvB,EAAKS,gBAAkB,EAAKL,eACnB,EAAK1E,UAAY,EAAKsE,mBAC/B,EAAKS,gBAAkB,EAAKN,iBAE5B,EAAKM,gBAAkB,EAAKP,mBAE9B,EAAKnE,iBAAiBC,IAAOK,OAAOE,GAAGJ,KAAkB,EAAKK,eAC9D,EAAKT,iBAAiBC,IAAOS,SAASF,GAAGJ,KAAkB,EAAKO,YAX7C,E,iEAvCnB,MAAO,CACLvE,OAAQnE,KAAK8L,oBAAsB9L,KAAK8L,mBAAqB9L,KAAK+L,uBAClEpD,WAAY3I,KAAKyM,gBACjB3D,MAAOC,IAAeC,gB,mDAkDZ5D,GAEe,IAAvBA,EAAME,QAAQoH,OAChBtH,EAAMuH,KAAO,CACX1C,YAAajK,KAAKC,kBAAkB0B,QAAQjC,IAAO0C,kBAAkBxC,IACrEgN,QAAU5M,KAAK0H,SAAW1H,KAAKC,kBAAkB0B,QAAQjC,IAAO6C,WAAW3C,KAE7EI,KAAKwM,aAAanC,KAAKjF,M,mCAIb,IAAD,OACLyH,EAAe,IAAItC,IACzBsC,EAAarD,IAAI,GACjBxJ,KAAKiK,YAAYpC,sBAAsBiF,SAAQ,SAASC,GACtDA,EAAMrD,aAAaoD,SAAQ,SAASE,GAClCH,EAAarD,IAAIwD,SAIrBhN,KAAKwM,aAAaM,SAAQ,SAAC1H,GACrByH,EAAaI,IAAI7H,EAAME,QAAQC,QAC7BH,EAAMuH,KAAK1C,aAAe7E,EAAMuH,KAAKC,SACvC,EAAKhB,uBAAyB,EAC9B,EAAKE,oBAAuB1G,EAAM8H,mBAAqB,IAEvD,EAAKrB,0BAA4B,EACjC,EAAKE,uBAA0B3G,EAAM8H,mBAAqB,S,kCAWtDtJ,GACVA,EAAK5D,KAAK8K,sBACP7G,eAAc,SAACC,EAASC,EAAQC,GAAlB,OAAkCF,EAAQ,oDAAe,kBAAC6G,EAAA,EAAD,CAAWnL,GAAIF,IAAO0C,kBAAkBxC,KAAvD,OAAiE,kBAACmL,EAAA,EAAD,CAAWnL,GAAIF,IAAO6C,WAAW3C,KAAlG,QAA8G4E,YAAiBL,GAA/H,mHACtDE,KAAK3E,IAAO0C,kBAAkBiC,MAC9BF,OAAOG,OAAKC,EAAE,oHAA4DC,YAAiBL,OAC3FC,YAH8C,UAG/BK,KAAKC,MAAMF,YAAiBJ,IAHG,mE,kCAOnD,IAAM+I,EAA+BnN,KAAK4L,uBAAyB5L,KAAK4L,sBAAwB5L,KAAK6L,0BAC/FuB,EAAiCpN,KAAK8L,oBAAsB9L,KAAK8L,mBAAqB9L,KAAK+L,uBAEjG,OACE,kBAACsB,EAAA,EAAD,CACEhJ,KAAM,kBAACiJ,EAAA,EAAD,CAAW1N,GAAIF,IAAO0C,kBAAkBxC,KAC9C2N,MAAK,UAAK/I,YAAiB2I,GAAtB,KACLK,MAAM,0BACNhC,QACE,oEAEE,4BACE,4CAAiB,gCAASxL,KAAK4L,uBAA/B,yBAAoF,gCAAS6B,YAAgBzN,KAAK8L,qBAAlH,aACA,4CAAiB,gCAAS9L,KAAK6L,0BAA/B,UAAwE,gCAAQ,wCAAhF,cAAoH,gCAAS4B,YAAgBzN,KAAK+L,wBAAlJ,cAEF,gCAASvH,YAAiB2I,GAA1B,KANF,mDAMoH,gCAAS3I,YAAiB4I,GAA1B,KANpH,qC,GA/Ge1B,KAAnBC,EASG3F,aAAe,CACpBiE,YAAa3C,GAmHFqE,Q,gHC5BA+B,GA/FoB,SAAC,GAAsD,IAApD3N,EAAmD,EAAnDA,UAAW8B,EAAwC,EAAxCA,eAAgB8L,EAAwB,EAAxBA,WACzDC,EAAqB,SAACC,GAAD,OACzB,kBAACC,GAAA,EAAD,eACEjM,eAAgBA,EAAekM,4BAA4BF,EAAM3N,QAC7D2N,KAIR,OACE,kBAAC,KAAD,KACE,kBAACG,GAAA,EAAD,CACEvE,KAAK,oBACLwE,YACE,sDACiB,kBAAClD,EAAA,EAAD,CAAWnL,GAAIF,IAAO6B,YAAY3B,KADnD,QAC8D,kBAACmL,EAAA,EAAD,CAAWnL,GAAIF,IAAO+B,aAAa7B,KADjG,iCACqI,kBAACsO,EAAA,EAAD,CAActO,GAAIuO,IAAeC,KAAKxO,KAD3K,iCAC+M,6BAD/M,IACsN,kBAACmL,EAAA,EAAD,CAAWnL,GAAIF,IAAO0B,QAAQxB,KADpP,0CACiS,kBAACmL,EAAA,EAAD,CAAWnL,GAAIF,IAAOS,UAAUP,KADjU,+EAKF,kBAACgO,EAAD,CAAoB1N,MAAOR,IAAO+B,aAAa7B,KAC/C,kBAACyO,GAAA,EAAD,CACE5E,KAAO,kBAACsB,EAAA,EAAD,CAAWnL,GAAIF,IAAO6B,YAAY3B,KACzC+N,WAAYA,EAAWW,aAEzB,kBAACV,EAAD,CAAoB1N,MAAOR,IAAOyC,aAAavC,KAC/C,kBAACyO,GAAA,EAAD,CACE5E,KAAO,iDAAY,kBAACsB,EAAA,EAAD,CAAWnL,GAAIF,IAAOyC,aAAavC,KAA/C,WACP+N,WAAYA,EAAW1D,cAExBlK,EAAUM,UAAUX,IAAO6O,qBAAqB3O,KAAQ,kBAACgO,EAAD,CAAoB1N,MAAOR,IAAO4C,mBAAmB1C,KAC7GG,EAAUM,UAAUX,IAAO8D,mBAAmB5D,KAAO,kBAACgO,EAAD,CAAoB1N,MAAOR,IAAO8D,mBAAmB5D,MAI7G,kBAACoO,GAAA,EAAD,CACEvE,KAAK,sBACLwE,YACE,uLAKF,kBAACL,EAAD,CAAoB1N,MAAOR,IAAO+C,YAAY7C,KAC9C,kBAACgO,EAAD,CAAoB1N,MAAOR,IAAO6C,WAAW3C,KAC7C,kBAACyO,GAAA,EAAD,CACE5E,KAAO,yDAAoB,kBAACsB,EAAA,EAAD,CAAWnL,GAAIF,IAAOgD,iBAAiB9C,MAClE+N,WAAYA,EAAWa,gBAEvBzO,EAAUM,UAAUX,IAAO6O,qBAAqB3O,KAChD,kBAACgO,EAAD,CAAoB1N,MAAOR,IAAO4C,mBAAmB1C,MAIzD,kBAACoO,GAAA,EAAD,CACEvE,KAAK,sBACLwE,YACE,6CACQ,kBAAClD,EAAA,EAAD,CAAWnL,GAAIF,IAAOkC,cAAchC,KAD5C,8GAC6J,kBAACsO,EAAA,EAAD,CAActO,GAAIuO,IAAeC,KAAKxO,KADnM,IAC0M,6BAD1M,0BACuO,kBAACmL,EAAA,EAAD,CAAWnL,GAAIF,IAAOgC,yBAAyB9B,KADtR,kBAC2S,kBAACmL,EAAA,EAAD,CAAWnL,GAAIF,IAAO+B,aAAa7B,KAD9U,qEAMF,kBAACgO,EAAD,CAAoB1N,MAAOR,IAAOkC,cAAchC,KAChD,kBAACgO,EAAD,CAAoB1N,MAAOR,IAAO4C,mBAAmB1C,KACpDG,EAAUM,UAAUX,IAAO6D,0BAA0B3D,KAAO,kBAACgO,EAAD,CAAoB1N,MAAOR,IAAO6D,0BAA0B3D,MAI3H,kBAACoO,GAAA,EAAD,CACEvE,KAAK,sBACLwE,YACE,8DACyB,kBAACC,EAAA,EAAD,CAActO,GAAIuO,IAAeC,KAAKxO,KAD/D,qEACuI,kBAACmL,EAAA,EAAD,CAAWnL,GAAIF,IAAOuC,YAAYrC,KADzK,QACoL,kBAACmL,EAAA,EAAD,CAAWnL,GAAIF,IAAO0B,QAAQxB,KADlN,oBAKF,kBAACyO,GAAA,EAAD,CAAa5E,KAAK,YAAYkE,WAAYA,EAAWc,eAGvD,kBAACT,GAAA,EAAD,CACEvE,KAAK,UACLwE,YACE,6EACwC,kBAAClD,EAAA,EAAD,CAAWnL,GAAIF,IAAO+D,aAAa7D,KAD3E,uEAKF,kBAACgO,EAAD,CAAoB1N,MAAOR,IAAO+D,aAAa7D,KAC/C,kBAACgO,EAAD,CAAoB1N,MAAOR,IAAOqD,UAAUnD,MAG9C,kBAAC8O,GAAA,EAAD,CAAiBf,WAAYA,M,gDCnEpBgB,G,kDA1Bb,WAAY3J,GAAmB,IAAD,8BAC5B,cAAMA,IAPR4J,eAAiB,EAMa,EAJ9BC,YAAc,IAIgB,EAF9BC,gBAA0B,EAIxB,EAAKC,SAAWZ,IAAeC,KAC3B,EAAKnO,kBAAkBI,UAAUX,IAAOsP,8BAA8BpP,MACxE,EAAKkP,iBAAmB,GAE1B,EAAK/G,iBAAiBC,IAAOK,OAAOH,GAAGC,KAAiBjI,MAAMR,IAAO8F,OAAQ,EAAK8C,UAClF,EAAKP,iBAAiBC,IAAOK,OAAOE,GAAGJ,KAAiBjI,MAAMR,IAAO8F,OAAQ,EAAKgD,eAPtD,E,qDAUrBpD,GACPpF,KAAKiP,yBAAyBvP,IAAOwP,kBAAkBtP,GAAII,KAAK8O,mB,oCAGpD1J,GACRA,EAAM+J,UAAYC,KAAUC,OAASjK,EAAM+J,UAAYC,KAAUE,OAIjElK,EAAMK,UAAYzF,KAAK4O,gBA7BK,MA8B9B5O,KAAKiP,yBAAyBvP,IAAO6P,kBAAkB3P,GA7B5B,GA8B3BI,KAAK4O,eAAiBxJ,EAAMK,e,GA5BR+J,MCIpBC,G,4MAIJpD,eAAiBC,IAAgBC,KAAK,G,EAC5BmD,iB,4DA8BE9L,GAAa,IAAD,OACtBA,EAAK5D,KAAK8K,sBAAsB7G,eAAc,SAACC,EAASC,EAAQC,GAAlB,OAAkCF,EAAQ,cAAD,OAAeM,YAAiB,EAAKmL,eAArC,oBACpFtL,KAAK,8BACLF,OAAOG,OAAKC,EAAE,kFAAkDC,YAAiBL,OACjFC,YAH6E,WAG7DI,YAAiBJ,GAH4C,0B,kCAOhF,OACE,kBAACiJ,EAAA,EAAD,CACEhJ,KAAM,kBAACuL,GAAA,EAAD,CAAMvL,KAAK,+BACjBkJ,MAAK,UAAK/I,YAAiBxE,KAAK2P,eAA3B,MACLnC,MAAM,cACNhC,QAAO,UAAKxL,KAAK0P,YAAYG,OAAtB,mBAAuC7P,KAAK0P,YAAYG,OAAS7P,KAAK0P,YAAYI,UAAlF,qB,4BAKN,IAAD,OACJ,MAAO,CACLC,MAAO,aACPC,IAAK,aACLC,OAAQ,kBACN,kBAACC,GAAA,EAAD,KACE,kBAACC,GAAA,EAAD,CACEC,QAAS,EAAKV,YACdW,cAAY,S,oCArDpB,OAAOrQ,KAAK0P,YAAYG,QAAU7P,KAAK0P,YAAYG,OAAS7P,KAAK0P,YAAYI,YAAc,I,qDAI3F,MAAO,CACL3L,OAAQ,EAAInE,KAAK2P,cACjBhH,WAAY,CACVC,MAAO,IACPC,QAAS,GACThE,MAAO,KAETiE,MAAOC,IAAeC,c,2CAKxB,MAAO,CACL7E,OAAQnE,KAAK2P,cACb3L,cAAe,CACb4E,MAAO,IACPC,QAAS,GACThE,MAAO,KAETiE,MAAOC,IAAeC,gB,GA/BF0C,KAApB+D,GACGzJ,aAAe,CACpB0J,YAAaf,IAoEFc,U,oBCpETnI,G,kDAcJ,WAAYtC,GAAmB,IAAD,8BAC5B,cAAMA,IAVRsL,SAAW,EASmB,EAR9BC,UAAY,EAQkB,EAP9BC,SAAW,EAOmB,EAN9BC,UAAY,EAMkB,EAL9BC,YAAc,EAKgB,EAJ9BC,kBAAoB,EAIU,EAHpBC,iBAGoB,IAFpBC,oBAEoB,EAE5B,EAAKL,SAAW,EAAK1M,MAAMgN,MAAMC,WAAa,IAC9C,EAAKhJ,iBAAiBC,IAAOC,KAAKC,GAAGC,KAAiBjI,MAAMR,IAAO6B,aAAc,EAAKyP,YACtF,EAAKjJ,iBAAiBC,IAAOS,SAAU,EAAKwI,gBAJhB,E,uDAuBnB7L,GACc,IAAnBpF,KAAKuQ,YACPvQ,KAAKsQ,SAAWlL,EAAMK,UAAY,IAAOzF,KAAK8D,MAAMgN,MAAMC,WAAa,KAG1B,MAA1C3L,EAAMK,UAAY,IAAOzF,KAAKwQ,UAAmBxQ,KAAKuQ,YACzDvQ,KAAKsQ,UAAYlL,EAAMK,UAAY,IAAOzF,KAAKwQ,UAG1B,IAAnBxQ,KAAKuQ,YACPvQ,KAAKyQ,WAAazQ,KAAKuQ,WAGzBvQ,KAAKuQ,UAAY,GAAK,EAAIvQ,KAAK4Q,YAAYM,gBAAgBlR,KAAK4Q,YAAYO,qBAC5EnR,KAAKwQ,SAAWpL,EAAMK,UAAY,IAElCzF,KAAK2Q,mBAAqB,I,uCAI1B3Q,KAAK0Q,YAAc1Q,KAAK6Q,eAAeO,WAAW1R,IAAO6B,YAAY3B,IAAIyR,MAChB,MAApDrR,KAAK8D,MAAMgN,MAAMQ,SAAW,IAAOtR,KAAKwQ,UAAmBxQ,KAAKuQ,YACnEvQ,KAAKsQ,UAAYtQ,KAAK8D,MAAMgN,MAAMQ,SAAW,IAAOtR,KAAKwQ,UAE3DxQ,KAAKyQ,UAAYzQ,KAAKyQ,UAAYzQ,KAAK2Q,kBACvC3Q,KAAK2Q,mBAAsB3Q,KAAKsQ,SAAWtQ,KAAKyQ,Y,kCAYtC7M,GAAa,IAAD,OACtBA,EAAK5D,KAAK8K,sBAAsB7G,eAAc,SAACC,EAASC,EAAQC,GAAlB,OAAkCF,EAC9E,mDACc,kBAAC6G,EAAA,EAAD,CAAWnL,GAAIF,IAAO6B,YAAY3B,KADhD,iCACoF,kBAACsO,EAAA,EAAD,CAActO,GAAIuO,IAAeC,KAAKxO,KAD1H,kCAICyE,KAAK3E,IAAO6B,YAAY8C,MACxBF,OAAOG,OAAKC,EAAE,iGAAuD,EAAKmM,gBAC1EtM,YAP6E,WAO7DA,EAAc,EAAKuM,mBAAmBY,QAAQ,GAPe,+BAOU,EAAKZ,kBAPf,kB,gCArDhF,OAAO3Q,KAAK0Q,YAAc1Q,KAAK2Q,oB,2CAI/B,MAAO,CACLxM,OAAQnE,KAAKwR,UACb7I,WAAY,CACVC,MAAO,GACPC,QAAS,GACThE,MAAO,IAETiE,MAAOC,IAAeC,gB,GAjCF0C,KAApBpE,GACGtB,aAAe,CACpB4K,YAAaa,KACbZ,eAAgBa,MAmFLpK,U,UCtFTqK,G,kDAWJ,WAAY3M,GAAmB,IAAD,8BAC5B,cAAMA,IAPR4M,YAAc,EAMgB,EAL9BC,mBAAqB,EAKS,EAJ9BC,YAAc,EAIgB,EAHpBlB,iBAGoB,IAFpBC,oBAEoB,EAE5B,EAAK9I,iBAAiBC,IAAOK,OAAOE,GAAGJ,KAAkB,EAAKG,UAFlC,E,qDAkBrBlD,GACHA,EAAME,QAAQoH,OAASqF,KAAQC,IAAIC,WAGvCjS,KAAK4R,aAAexM,EAAM8H,mBAAqB,EAC3ClN,KAAKC,kBAAkB0B,QAAQjC,IAAOgD,iBAAiB9C,MACzDI,KAAK6R,oBAAsBzM,EAAM8H,mBAAqB,M,sCAKxDgF,QAAQC,IAAR,uBAA4BnS,KAAK4R,cACjCM,QAAQC,IAAR,gCAAqCnS,KAAK6R,qBAC1CK,QAAQC,IAAR,uBAA4BnS,KAAK8R,gB,kCAGvBlO,GACVA,EAAK5D,KAAK8K,sBAAsB7G,eAAc,SAACC,EAASC,EAAQC,GAAlB,OAAkCF,EAC9E,mDACc,kBAAC6G,EAAA,EAAD,CAAWnL,GAAIF,IAAOgD,iBAAiB9C,KADrD,oEAICyE,KAAK3E,IAAOgD,iBAAiB2B,MAC7BF,OAAOG,OAAKC,EAAE,2HAA8DC,YAAiBL,OAC7FC,YAP6E,UAO9DI,YAAiBJ,GAP6C,wB,2CA5BhF,MAAO,CACLD,OAAQnE,KAAK6R,mBAAqB7R,KAAK4R,YACvCjJ,WAAY,CACVC,MAAO,IACPC,QAAS,IACThE,MAAO,KAETiE,MAAOC,IAAeC,gB,GAzBD0C,KAArBiG,GACG3L,aAAe,CACpB4K,YAAaa,KACbZ,eAAgBa,MAsDLC,UCxDTS,G,4MAcMC,gB,IACAxQ,oB,IACAyQ,gB,IACAC,6B,IACAC,qB,IACA/D,iB,IACAiB,iB,IACApB,gB,IACArE,iB,IACAwI,gB,IACAjE,kB,yDAGR,OACE,kBAACkE,GAAD,CACE3S,UAAWC,KAAKqS,WAAWM,SAC3B9Q,eAAgB7B,KAAK6B,eACrB8L,WAAU,2BACL3N,KAAKuS,wBAAwB5E,YADxB,IAERiF,6BAA8B5S,KAAKwS,gBAAgBI,6BACnDnE,YAAazO,KAAKyO,YAAY3D,qBAC9BwD,WAAYtO,KAAKsO,WAAWxD,qBAC5Bb,YAAajK,KAAKiK,YAAYa,qBAC9B2H,WAAYzS,KAAKyS,WAAW3H,qBAC5B0D,aAAcxO,KAAKwO,aAAa1D,6B,GAtClB+H,KAAlBT,GACGpM,aAAe,CACpBqM,WAAYS,IACZjR,eAAgBkR,IAChBT,WAAYU,IACZT,wBAAyBU,IACzBT,gBAAiB7O,EACjB8K,YAAagB,GACbC,YAAaf,GACbL,WAAY4E,GACZjJ,YAAa3C,EACbmL,WAAY9G,EACZ6C,aAAcmD,IAiCHS,UCxCAe,G,qKAhBX,OAAOnT,KAAKC,kBAAkBmT,cAAc1T,IAAOuC,YAAYrC,IAAMI,KAAK8D,MAAMC,gB,iDAIhF,MAAO,CACLI,OAAQnE,KAAKqT,OACb1K,WAAY,CACVC,MAAO,IACPC,QAAS,GACThE,MAAO,IAETiE,MAAOC,IAAeC,gB,GAbH0C,K,mBCgDV4H,G,kDAnCb,WAAYtO,GAAmB,IAAD,8BAC5B,cAAMA,IAJRuO,SAAW,EAGmB,EAF9BlH,eAAiBC,IAAgBC,KAAK,GAIpC,EAAKxE,iBAAiB,IAAIyL,KAAYC,IAAUC,QAAQxL,GAAGC,KAAkB,EAAKwL,cAFtD,E,yDASjBvO,GACNpF,KAAKC,kBAAkB0B,QAAQjC,IAAOkC,cAAchC,MAIzDI,KAAKuT,UAAYK,aAAyBxO,EApBf,O,kCAwB3B,OACE,kBAACiI,EAAA,EAAD,CACEhJ,KAAM,kBAACiJ,EAAA,EAAD,CAAW1N,GAAIF,IAAOkC,cAAchC,KAC1C2N,MAAK,UAAKsG,YAAc7T,KAAKuT,SAAWvT,KAAK8D,MAAMC,cAAiB,KAA/D,QACLyJ,MAAM,qBACNhC,QACE,0DACsBqI,YAAa7T,KAAKuT,UADxC,kBAEG/O,YAAiBxE,KAAK8D,MAAMgQ,+BAA+B9T,KAAKuT,WAFnE,OAEkF,6BAFlF,cAGc/O,YAAiBxE,KAAKqT,QAHpC,S,6BAlBN,OAAOrT,KAAKC,kBAAkBmT,cAAc1T,IAAOkC,cAAchC,IAAMI,KAAK8D,MAAMC,kB,GAVjE2H,K,6BCCfqI,GAAyC,CAC7CrU,IAAOkC,cAAchC,GACrBF,IAAO+C,YAAY7C,IAKfoU,G,kDAUJ,WAAYhP,GAAmB,IAAD,8BAC5B,cAAMA,IAPRiP,eAAiB,EAMa,EAL9BC,gBAAiD,GAKnB,EAJ9BC,mBAAoD,GAItB,EAH9B9H,eAAiBC,KAAgBC,KAAK,GAGR,EAFpB6H,iBAEoB,EAE5B,EAAKC,OAAS,EAAKpU,kBAAkBI,UAAUX,IAAO4U,wBAAwB1U,IAC9E,EAAKmI,iBAAiBC,IAAOC,KAAKC,GAAGC,KAAkB,EAAKC,QAC5D2L,GAAuCjH,SAAQ,SAAAyH,GAC7C,EAAKL,gBAAgBK,GAAK,EAC1B,EAAKJ,mBAAmBI,GAAK,KANH,E,mDAiCvBnP,GAAmB,IAAD,SACjBoP,EAAc,UAAGpP,EAAMoP,sBAAT,aAAG,EAAsBC,MAAK,SAAAF,GAAC,OAAIA,EAAE7H,OAASyB,IAAeC,KAAKxO,MACtF,GAAK4U,GAAmBA,EAAeE,KAAvC,CAGA,IAAMC,EAAYH,EAAeE,KAnDN,GAoDrBE,EAAYD,EApDS,GACV,IAoDjBZ,GAAuCjH,SAAQ,SAAAyH,GAC7C,GAAK,EAAKH,YAAYxO,aAAa2O,GAE5B,CACL,IAAMJ,EAAqB,EAAKC,YAAYS,eAAeN,EAAGK,GAC9D,EAAKT,mBAAmBI,IAAMJ,EAC9B,EAAKD,gBAAgBK,IAAMK,EAAYT,OAJvC,EAAKD,gBAAgBK,IAAMK,KAO/B5U,KAAKiU,gBAAkBU,K,kCAIvB,OACE,kBAACrJ,EAAA,EAAD,CACEwJ,SAAUxI,KAAgByI,SAAS,IACnCxJ,KAAK,WACL9K,SAAUuU,KAAmBC,QAC7BC,SAAUlV,KAAKwL,SAEf,kBAAC2J,GAAA,EAAD,CAAiB3H,MAAO,oCAAE,kBAACzC,EAAA,EAAD,CAAWnL,GAAIF,IAAO4U,wBAAwB1U,KAAhD,qC,8BAlDf,IAAD,OACZ,OACE,2BAAOwV,UAAU,yBACf,+BACE,4BACE,qCACA,yCACA,wCAGJ,+BACGrB,GAAuCnN,KAAI,SAAA2G,GAAK,OAC/C,wBAAI8H,IAAK9H,GACP,4BAAK7N,IAAO6N,GAAO9D,MACnB,4BAAK6L,YAAe,EAAKnB,mBAAmB5G,GAAS,MACrD,4BAAK+H,YAAe,EAAKpB,gBAAgB3G,GAAS,gB,GAnClC7B,KAAxBsI,GACGhO,aAAe,CACpBoO,YAAarP,KA2EFiP,U,UC5ETuB,G,kDAYJ,WAAYvQ,GAAmB,IAAD,8BAC5B,cAAMA,IATRwQ,cAAgB,EAQc,EAP9BC,WAAa,EAOiB,EAN9BlC,SAAW,EAMmB,EAL9BmC,QAAU,IAKoB,EAJ9BC,eAAiB,EAIa,EAH9BtJ,eAAiBC,KAAgBC,KAAK,GAGR,EAFpBqJ,aAEoB,EAE5B,EAAKvB,OAAS,EAAKpU,kBAAkBI,UAAUX,IAAO6O,qBAAqB3O,IAC3E,EAAKmI,iBAAiBC,IAAOC,KAAKC,GAAGC,KAAiBjI,MAAMR,IAAO4C,oBAAqB,EAAKuT,aAC7F,EAAK9N,iBAAiBC,IAAO8N,SAASvN,GAAGJ,KAAiBjI,MAAMR,IAAO4C,oBAAqB,EAAKyT,iBACjG,EAAKhO,iBAAiBC,IAAOK,OAAOH,GAAGC,KAAkB,EAAKG,UALlC,E,wDAoBlBlD,GACkB,IAAxBpF,KAAK2V,iBAITvQ,EAAMuF,KAAOvF,EAAMuF,MAAQ,GAC3BvF,EAAMuF,KAAKC,mBAAoB,EAC/BxF,EAAMuF,KAAKE,sBAAX,2BAAuD7K,KAAK2V,eAA5D,UACA3V,KAAK2V,eAAiB,K,sCAGRvQ,GACdpF,KAAKwV,eAAiBpQ,EAAM4Q,eAC5B,IAAMC,EAAQ7Q,EAAM6Q,OAAS,EAC7BjW,KAAKyV,YAAcQ,EAEnBjW,KAAK2V,eAAiBM,I,+BAGf7Q,GACP,IAAIA,EAAM8Q,iBAAV,CAGA,IAAMC,EAAQnW,KAAK4V,QAAQQ,UAAUhR,GACjC+Q,GAASA,EAAMxU,QAAQjC,IAAO4C,mBAAmB1C,MACnDI,KAAKuT,UAAYK,aAAyBxO,EA5DV,Q,kCAgExBxB,GAAa,IAAD,OACtBA,EAAK5D,KAAKqW,4BACPpS,eAAc,SAACC,EAASC,EAAQC,GAAlB,OAAkCF,EAAQ,kEAA6B,kBAAC6G,EAAA,EAAD,CAAWnL,GAAIF,IAAO4C,mBAAmB1C,KAAtE,mBAA6F,EAAK8V,QAjE3H,GAiEyB,WACtDrR,KAAK3E,IAAO6O,qBAAqBlK,MACjCF,OAAOG,OAAKC,EAAE,qGAA8DJ,aAC5EC,YAH8C,WAG9BA,EAH8B,qC,kCAOnD,OACE,kBAACkH,EAAA,EAAD,CACEwJ,SAAUxI,KAAgByI,SAAS,IACnCxJ,KAAK,WACL9K,SAAUuU,KAAmBC,QAC7BzJ,QACE,oCACGqI,YAAa7T,KAAKuT,UADrB,sBACkD,6BAC/CvT,KAAKyV,WAFR,iBAMF,kBAACN,GAAA,EAAD,CAAiB3H,MAAO,oCAAE,kBAACzC,EAAA,EAAD,CAAWnL,GAAIF,IAAO6O,qBAAqB3O,KAA7C,oBACtB,oCACGI,KAAKwV,cADR,IACuB,4C,iDA/D7B,MAAO,CACLrR,OAAQnE,KAAKyV,WACbzR,cAAe,CACb4E,MAAO,EACPC,QAAS,GACThE,MAAO,IAETiE,MAAOC,IAAeuN,Y,GA5BD5K,KAArB6J,GACGvP,aAAe,CACpB4P,QAASW,MA0FEhB,UC7FTiB,G,kDASJ,WAAYxR,GAAmB,IAAD,8BAC5B,cAAMA,IANRyR,WAAa,EAKiB,EAJ9BC,QAAU,EAIoB,EAH9BrK,eAAiBC,KAAgBC,KAAK,GAGR,EAFpBmD,iBAEoB,EAE5B,EAAK2E,OAAS,EAAKpU,kBAAkBI,UAAUX,IAAOuM,2BAA2BrM,IACjF,EAAKmI,iBAAiBC,IAAOC,KAAKC,GAAGC,KAAiBjI,MAAMR,IAAO6B,aAAc,EAAKyP,YAH1D,E,uDAsBnB5L,GACTpF,KAAK0W,SAAW,EACX1W,KAAKC,kBAAkB0B,QAAQjC,IAAO0C,kBAAkBxC,MAG7DI,KAAKyW,YAAc,K,kCAGT7S,GACVA,EAAK5D,KAAKqW,4BACPpS,eAAc,SAACC,EAASC,EAAQC,GAAlB,OAAkCF,EAAQ,oDAAe,kBAAC6G,EAAA,EAAD,CAAWnL,GAAIF,IAAO6B,YAAY3B,KAAjD,aAAiE,kBAACmL,EAAA,EAAD,CAAWnL,GAAIF,IAAOyC,aAAavC,KAApG,8BAAqI,kBAACmL,EAAA,EAAD,CAAWnL,GAAIF,IAAOyC,aAAavC,KAAxK,sBAAiM,kBAACmL,EAAA,EAAD,CAAWnL,GAAIF,IAAO6B,YAAY3B,KAAnO,MACtDyE,KAAK3E,IAAOuM,2BAA2B5H,MACvCF,OAAOG,OAAKC,EAAE,4HAA0EC,YAAiBL,OACzGC,YAH8C,UAG/BI,YAAiBJ,GAHc,0B,kCAOnD,IAAMuS,EAlDyC,IAkD1B3W,KAAKyW,WAIpBG,GAFmB5W,KAAK0P,YAAYmH,oBAAoBnX,IAAO6B,YAAY3B,IAClDI,KAAK0P,YAAYoH,iBAAiBpX,IAAO6B,YAAY3B,KACd,GAAM,EAE5E,OACE,kBAAC0L,EAAA,EAAD,CACEwJ,SAAUxI,KAAgByI,SAAS,IACnCxJ,KAAK,WACL9K,SAAUuU,KAAmBC,QAC7BzJ,QACE,8DAC0BxL,KAAKyW,WAD/B,uDAC+FE,EAAe,IAD9G,eAC+H,+BAIjI,kBAACxB,GAAA,EAAD,CAAiB3H,MAAO,oCAAE,kBAACzC,EAAA,EAAD,CAAWnL,GAAIF,IAAOuM,2BAA2BrM,KAAnD,iCACtB,oCACG4E,YAAiBmS,GAAgB3W,KAAK+W,kBAAoBJ,IAD7D,KAC8E,6BAC3EC,EAFH,IAEmB,4C,wCApDzB,OAAO5W,KAAKC,kBAAkBmT,cAAc1T,IAAO0C,kBAAkBxC,M,iDAIrE,MAAO,CACLuE,OAAQnE,KAAKyW,WAAazW,KAAK0W,QAC/B/N,WAAY,CACVC,MAAO,GACPC,QAAS,IACThE,MAAO,IAETiE,MAAOC,IAAeC,gB,GA3BK0C,KAA3B8K,GACGxQ,aAAe,CACpB0J,YAAaf,IA0EF6H,UCGAQ,G,kDA5Eb,WAAYhS,GAAmB,IAAD,8BAC5B,cAAMA,IANRiS,gBAK8B,IAJ9BC,WAAa,EAIiB,EAH9BC,WAAa,EAAKrT,MAAMgN,MAAMC,WAGA,EAF9B1E,eAAiBC,KAAgBC,KAAK,GAIpC,EAAK8H,OAAS,EAAKpU,kBAAkBI,UAAUX,IAAO0X,qBAAqBxX,IAC3E,EAAKmI,iBAAiBC,IAAOqP,UAAUnP,GAAGC,KAAiBjI,MAAMR,IAAOC,oBAAqB,EAAK2X,cAClG,EAAKvP,iBAAiBC,IAAOuP,eAAerP,GAAGC,KAAiBjI,MAAMR,IAAOC,oBAAqB,EAAK2X,cACvG,EAAKvP,iBAAiBC,IAAOwP,WAAWtP,GAAGC,KAAiBjI,MAAMR,IAAOC,oBAAqB,EAAK2X,cACnG,EAAKvP,iBAAiBC,IAAOyP,gBAAgBvP,GAAGC,KAAiBjI,MAAMR,IAAOC,oBAAqB,EAAK2X,cACxG,EAAKvP,iBAAiBC,IAAOS,SAAU,EAAKiP,UAC5C,EAAKT,WAAaU,MAAMC,KAAK,CAAE3O,OAAQ4O,IAAkB,iBAAM,CAAC,MARpC,E,yDAmBjBzS,EAAsG0S,GACjH,IAAMC,EAAa3S,GACf2S,EAAWrL,OAAS+G,IAAUuE,YAAcC,MAAMF,EAAWD,UAC/DC,EAAWD,MAAQ,GAEjB1S,EAAMsH,OAAS+G,IAAUyE,YAC3BH,EAAWD,MAAQ,GAGjBA,IACFC,EAAWD,MAAQA,GAGrB9X,KAAKiX,WAAWjX,KAAKkX,YAAY7M,KAAK0N,EAAWtS,UAAYzF,KAAKmX,YAClEnX,KAAKmX,WAAaY,EAAWtS,UAC7BzF,KAAKkX,WAAaa,EAAWD,Q,+BAGtB1S,GACPpF,KAAKsX,aAAalS,EAAOpF,KAAKkX,c,kCAGnB,IAAD,OACV,OACE,kBAAC5L,EAAA,EAAD,CACEwJ,SAAUxI,KAAgByI,SAAS,IACnCxJ,KAAK,WACL9K,SAAUuU,KAAmBC,QAC7BC,SACE,2BAAOE,UAAU,yBACf,+BACE,4BACE,2CACA,wCACA,0CAGJ,+BACGpV,KAAKiX,WAAWrQ,KAAI,SAAC2N,EAAGlJ,GAAJ,OACnB,wBAAIgK,IAAKhK,GACP,6BArEM,EAqEAA,GAAqBkG,QAAQ,GAAnC,KACA,4BAAK+D,YAAef,EAAE4D,QAAO,SAACC,EAAGC,GAAJ,OAAUD,EAAIC,IAAG,GAAK,MACnD,4BAAK7T,YAAiB+P,EAAE4D,QAAO,SAACC,EAAGC,GAAJ,OAAUD,EAAIC,IAAG,GAAK,EAAKvU,MAAMC,eAAhE,YAOV,kBAACoR,GAAA,EAAD,CAAiB3H,MAAO,oCAAE,kBAACzC,EAAA,EAAD,CAAWnL,GAAIF,IAAO0X,qBAAqBxX,KAA7C,0BACrBI,KAAKsY,aADR,Q,mCAzDc,IAAD,OACbC,EAAY,EAIhB,OAHAvY,KAAKiX,WAAWnK,SAAQ,SAAC0L,EAAMC,GAC7BF,GAAaC,EAAKL,QAAO,SAACC,EAAGC,GAAJ,OAAUD,EAAIC,KAAK,EAAKvU,MAAMC,cAAgB0U,MAxBrD,EA0BZF,GAA6BhH,QAAQ,O,GAtBvB7F,KCPpBgN,G,kDAOJ,WAAY1T,GAAmB,IAAD,8BAC5B,cAAMA,IAHE0K,iBAEoB,EAE5B,EAAK2E,OAAS,EAAKpU,kBAAkBI,UAAUX,IAAOsP,8BAA8BpP,IAFxD,E,wDAM5B,IAEM+Y,GAFoB3Y,KAAK0P,YAAYmH,oBAAoBnX,IAAOwP,kBAAkBtP,IACxDI,KAAK0P,YAAYoH,iBAAiBpX,IAAOwP,kBAAkBtP,KAChB,EAC3E,OACE,kBAAC0L,EAAA,EAAD,CACEwJ,SAAUxI,KAAgByI,SAAS,IACnCxJ,KAAK,WACL9K,SAAUuU,KAAmBC,SAE7B,kBAACE,GAAA,EAAD,CAAiB3H,MAAO,oCAAE,kBAACzC,EAAA,EAAD,CAAWnL,GAAIF,IAAOsP,8BAA8BpP,KAAtD,4BACtB,oCACG+Y,EADH,IACuB,8C,GAxBRjN,KAAnBgN,GACG1S,aAAe,CACpB0J,YAAaf,IA8BF+J,UC1BTE,G,kDAQJ,WAAY5T,GAAmB,IAAD,8BAC5B,cAAMA,IALRuO,SAAmB,EAIW,EAH9BlH,eAAiBC,KAAgBC,KAAK,GAGR,EAFpBqJ,aAEoB,EAE5B,EAAKvB,OAAS,EAAKpU,kBAAkBI,UAAUX,IAAOmZ,cAAcjZ,IACpE,EAAKmI,iBAAiBC,IAAOK,OAAOH,GAAGC,KAAiBjI,MAAMR,IAAO6B,aAAc,EAAKuX,cAH5D,E,yDAUjB1T,GACXpF,KAAKuT,UAAYK,aAAyBxO,EArBf,M,kCAyB3B,OACE,kBAACkG,EAAA,EAAD,CACEwJ,SAAUxI,KAAgByI,SAAS,IACnCxJ,KAAK,WACL9K,SAAUuU,KAAmBC,QAC7BzJ,QACE,+DAC2BqI,YAAa7T,KAAKuT,UAD7C,iCACsF/O,YAAiBxE,KAAK8D,MAAMgQ,+BAA+B9T,KAAKuT,WADtJ,OACqK,6BAClK/O,YAAiBxE,KAAKqT,QAFzB,qBAMF,kBAAC8B,GAAA,EAAD,CAAiB3H,MAAO,oCAAE,kBAACzC,EAAA,EAAD,CAAWnL,GAAIF,IAAOmZ,cAAcjZ,KAAtC,wBACtB,oCACGiU,YAAa7T,KAAKuT,SAAWvT,KAAK8D,MAAMC,cAAgB,KAD3D,IACkE,2C,6BAtBxE,OAAO/D,KAAK4V,QAAQxC,cAAc1T,IAAO8B,cAAc5B,IAAMI,KAAK8D,MAAMC,kB,GAfvD2H,KAAfkN,GACG5S,aAAe,CACpB4P,QAASW,MA2CEqC,UCjDAG,G,kDAPb,WAAY/T,GAAmB,IAAD,8BAC5B,cAAMA,IACDM,QAAU5F,IAAO8D,mBACtB,EAAK6Q,OAAS,EAAKpU,kBAAkBI,UAAU,EAAKiF,QAAQ1F,IAHhC,E,iBAFPoZ,GCyBnBC,G,4HAAwBC,KAAxBD,GACGE,YAAc,CAEnBhY,MAAO5B,EACP6Z,gBAAiBlT,EACjBmT,MAAO7S,EAGP8S,UAAWxZ,EACX0S,gBAAiB7O,EACjBsG,YAAa3C,EACbmL,WAAY9G,EACZyI,YAAarP,EACbwU,0BAA2BvS,EAC3BwS,UAAWpH,GAEXqH,WAAYtG,GACZzD,YAAaf,GACbF,YAAagB,GACbiK,OAAQpG,GACRhF,WAAY4E,GACZ1E,aAAcmD,GAGdgI,gBAAiB3F,GACjB4F,aAAcrE,GACdvJ,mBAAoBwK,GACpBqD,YAAa7C,GACb8C,WAAYpB,GACZqB,OAAQnB,GACRoB,WAAYjB,GAGZkB,cAAe,CAACC,IAAe,CAAErY,eAAgB,QAItCoX,c,iCClEf,mCA2BexN,IAXc,SAAC,GAAD,IAAGvL,EAAH,EAAGA,MAAOia,EAAV,EAAUA,SAAU/E,EAApB,EAAoBA,UAApB,OAC3B,yBAAKA,UAAS,0BAAqBA,GAAa,KAC9C,+BACE,kBAAC,IAAD,CAAWxV,GAAIM,EAAMN,KADvB,IAC8B,kBAAC,IAAD,CAAWA,GAAIM,EAAMN,GAAIyE,MAAM,KAE7D,yBAAK+Q,UAAU,SACZ+E,M,iCCtBQ,SAASvG,EAAyBxO,EAAOgV,GACtD,IAAMC,GAAOjV,EAAMyE,QAAU,IAAMzE,EAAM0E,UAAY,GACrD,OAAOuQ,EAAOA,GAAO,EAAID,GAF3B,mC,iCCAA,oBAuBeE,IAXK,SAAC,GAAD,IAAG9M,EAAH,EAAGA,MAAO2M,EAAV,EAAUA,SAAU/E,EAApB,EAAoBA,UAApB,OAClB,yBAAKA,UAAS,0BAAqBA,GAAa,KAC9C,+BACG5H,GAEH,yBAAK4H,UAAU,SACZ+E,M,4FCWD3K,E,kDAsBJ,WAAYxK,GAAkB,IAAD,8BAC3B,cAAMA,IAhBEuV,kBAemB,IAb7BC,QAAU,EAamB,EAZ7BC,gBAAoC,GAYP,EAT7BC,YAA6C,GAShB,EAR7BC,YAA6C,GAQhB,EAL7B5L,cAK6B,IAF7BF,iBAE6B,EAE3B,EAAK9G,iBAAiBC,IAAO8N,SAASvN,GAAGJ,KAAkB,EAAKyS,YAChE,EAAK7S,iBAAiBC,IAAOC,KAAKC,GAAGC,KAAkB,EAAKC,QAHjC,E,+DAaV/C,GACjBrF,KAAK0a,YAAYrV,GAAW,CAAEyK,UAAW,EAAGD,OAAQ,EAAGwB,MAAO,K,yCAE7ChM,GACjBrF,KAAK2a,YAAYtV,GAAW,CAAEwV,MAAO,EAAGC,YAAa,GAAIzJ,MAAO,K,iCAIvDjM,GACT,IAAMC,EAAUD,EAAME,QAAQC,KAE9B,GAAGH,EAAM2V,qBAAuB/a,KAAK+O,SAASnP,GAA9C,CAIA,IAAMqW,EAAQ7Q,EAAM6Q,MACd+E,EAAO5V,EAAM4Q,eAAiBC,EACpCjW,KAAKib,cAAc5V,EAAS2V,EAAM/E,EAAOjW,KAAKkb,YAAY9V,GAAQA,EAAMK,c,+CAYjDJ,EAAiBwE,GACxC,IAAMsR,OAA+BrV,IAArB9F,KAAK6O,YAA4B7O,KAAK6O,YAAc7O,KAAKwa,QAAU3Q,EAC7EmR,EAAOvW,KAAK2W,IAAIvR,EAAQsR,GACxBlF,EAAQxR,KAAK4W,IAAIxR,EAASsR,EAAS,GACzCnb,KAAKib,cAAc5V,EAAS2V,EAAM/E,K,oCAGtB5Q,EAAiB2V,EAAc/E,EAAgBlH,EAA2BtJ,GACjFzF,KAAK0a,YAAYrV,IAClBrF,KAAKsb,mBAAmBjW,GAG5BrF,KAAK0a,YAAYrV,GAASwK,QAAUoG,EACpCjW,KAAK0a,YAAYrV,GAASyK,WAAakL,EACvChb,KAAK0a,YAAYrV,GAASgM,OAAS,EAGlB,OAAbtC,QAAkCjJ,IAAbiJ,QAA8CjJ,IAApBiJ,EAASlF,QAC1D7J,KAAKwa,QAAUzL,EAASlF,YACH/D,IAAjBiJ,EAASsM,MACXrb,KAAK6O,YAAcE,EAASsM,MAG9Brb,KAAKwa,SAAWQ,EAGlBhb,KAAKya,gBAAgBpQ,KAAK,CACxB5E,UAAWA,EACX+U,QAASxa,KAAKwa,QACdvE,MAAOA,EACPnG,UAAWkL,EACXO,KAAM,M,6BAKHnW,GACL,IAAMC,EAAUD,EAAME,QAAQC,KAE9B,GAAIvF,KAAKwb,uBAAuBpW,GAAhC,CAGA,IAAMqW,EAAgBzb,KAAKkb,YAAY9V,GAEvC,GAAIqW,EAAJ,CAIIA,EAAcJ,MAChBrb,KAAK6O,YAAc4M,EAAcJ,KAEnC,IAAM3G,EAAO1U,KAAK0b,eAAetW,GAE5BpF,KAAK2a,YAAYtV,IACpBrF,KAAK2b,mBAAmBtW,GAGrBqP,GAAiB,IAATA,IAIb1U,KAAK2a,YAAYtV,GAASgM,OAAS,EACnCrR,KAAK2a,YAAYtV,GAASyV,YAAYzQ,KAAKqK,GACxCA,EAAO,IACR1U,KAAK2a,YAAYtV,GAASwV,OAASnG,GAIrC1U,KAAKwa,QAAUiB,EAAc5R,OAAS6K,EAEtC1U,KAAKya,gBAAgBpQ,KAAK,CACxB5E,UAAWL,EAAMK,UACjB+U,QAASxa,KAAKwa,QACdvE,MAAO,EACPnG,UAAW,EACXyL,KAAME,EAAc5R,SAGtB7J,KAAK4b,kBAAkBlH,EAAMtP,Q,qCAIhBA,GAAmB,IAAD,EAC/B,OAAIA,EAAMyW,mBAAyD/V,IAAzCV,EAAMyW,aAAa7b,KAAK+O,SAASnP,IAClDwF,EAAMyW,aAAa7b,KAAK+O,SAASnP,IAE1C,UAAOI,KAAKkb,YAAY9V,UAAxB,aAAO,EAAyBsP,O,kCAGtBtP,GAAgD,IAAD,OACzD,OAAIA,EAAMoP,eAGDpP,EAAMoP,eAAeC,MAAK,SAAAqH,GAAC,OAAIA,EAAEpP,OAAS,EAAKqC,SAASnP,WAF/D,I,wCAMcib,EAAezV,GAE/B,IAAM2W,EAAsC,CAC1CrP,KAAM+G,IAAUuI,cAChBvW,UAAWL,EAAMK,UACjBwW,SAAU7W,EAAM6W,SAChBC,SAAU9W,EAAM8W,SAChBlG,eAAgB6E,EAChBE,mBAAoB/a,KAAK+O,SAASnP,GAClC0F,QAASF,EAAME,QACf6W,cAAc,GAGhBnc,KAAKua,aAAa6B,eAAeL,EAAiB3W,K,6CAG7BA,GACrB,OAAOiX,QAAQrc,KAAKkb,YAAY9V,M,0CAGdC,GAClB,OAAQrF,KAAK0a,YAAYrV,IAAYrF,KAAK0a,YAAYrV,GAASyK,WAAc,I,uCAG9DzK,GACf,OAAQrF,KAAK0a,YAAYrV,IAAYrF,KAAK0a,YAAYrV,GAASwK,QAAW,I,6CAGrDxK,GACrB,OAAQrF,KAAK0a,YAAYrV,IAAYrF,KAAK0a,YAAYrV,GAASgM,OAAU,I,gCAIzE,OAAO5K,OAAO6V,OAAOtc,KAAK0a,aAAavC,QAAO,SAACoE,EAAKrc,GAAN,OAAgBqc,EAAMrc,EAAM4P,YAAW,K,6BAIrF,OAAOrJ,OAAO6V,OAAOtc,KAAK0a,aAAavC,QAAO,SAACoE,EAAKrc,GAAN,OAAgBqc,EAAMrc,EAAM2P,SAAQ,K,4BAIlF,OAAOpJ,OAAO6V,OAAOtc,KAAK2a,aAAaxC,QAAO,SAACoE,EAAKrc,GAAN,OAAgBqc,EAAMrc,EAAM2a,QAAO,K,oCAIjF,OAAOpU,OAAO6V,OAAOtc,KAAK2a,aAAaxC,QAAO,SAACoE,EAAKrc,GAAN,OAAgBqc,EAAMrc,EAAMmR,QAAO,O,GA9MvD3F,KAAxB8D,EACGxJ,aAAe,CACpBuU,aAAciC,KAgNHhN,O,0GClOTW,E,+KAEauK,GACf,OAAOjU,OAAOC,KAAKgU,GAChB9T,KAAI,SAAA6V,GAAS,MAAK,CACjBA,UAAW9X,OAAO8X,GAClB3M,UAAW4K,EAAY/V,OAAO8X,IAAY3M,UAC1CD,OAAQ6K,EAAY/V,OAAO8X,IAAY5M,WAExC6M,MAAK,SAACtE,EAAGC,GAAJ,OAAUA,EAAEvI,UAAYsI,EAAEtI,aAC/B6M,QAAO,SAAArX,GAAO,OAAIA,EAAQwK,UAAY,GAAKxK,EAAQuK,Y,mCAG3C8K,GACX,OAAOlU,OAAOC,KAAKiU,GAChB/T,KAAI,SAAA6V,GAAS,MAAK,CACjBA,UAAW9X,OAAO8X,GAClB5B,MAAOF,EAAYhW,OAAO8X,IAAY5B,MACtCxJ,MAAOsJ,EAAYhW,OAAO8X,IAAYpL,UAEvCqL,MAAK,SAACtE,EAAGC,GAAJ,OAAUA,EAAEwC,MAAQzC,EAAEyC,SAC3B8B,QAAO,SAAArX,GAAO,OAAIA,EAAQuV,MAAQ,O,+BAG7B,IAAD,EAC2B7a,KAAK6N,MAA/BuC,EADD,EACCA,QAASC,EADV,EACUA,aACXuM,EAAexM,EAAQrB,SAAStF,KAEhCqG,EAAY9P,KAAK6c,iBAAiBzM,EAAQsK,aAC1CG,EAAQ7a,KAAK8c,aAAa1M,EAAQuK,aAEpCoC,EAAiB3M,EAAQN,UACzBkN,EAAc5M,EAAQP,OAEtBoN,EAAa7M,EAAQyK,MACrBzP,EAAagF,EAAQ8M,cASzB,OANAH,EAAqC,IAAnBA,EAAwB,EAAIA,EAC9CC,EAA+B,IAAhBA,EAAqB,EAAIA,EAExCC,EAA6B,IAAfA,EAAoB,EAAIA,EACtC7R,EAA6B,IAAfA,EAAoB,EAAIA,EAGpC,oCACE,2BAAOgK,UAAU,cACf,+BACE,4BACE,uCACA,wBAAI+H,QAAS,GAAIP,EAAjB,cACA,wBAAIO,QAAS,GAAG,kBAAC,IAAD,CAAgBC,QAAQ,sFAAsFR,EAA9G,cAGpB,+BACG9M,GAAaA,EACXlJ,KAAI,SAAAtB,GAAO,OACV,wBAAI+P,IAAK/P,EAAQmX,WACf,wBAAI3T,MAAO,CAAEuU,MAAO,QAClB,kBAAC,IAAD,CAAWzd,GAAI0F,EAAQmX,aAEzB,wBAAI3T,MAAO,CAAEuU,MAAO,GAAIC,aAAc,EAAGC,UAAW,WAClD,kBAAC,IAAD,CAAgBH,QAAO,UAAK5Y,YAAiBc,EAAQwK,UAAYiN,GAA1C,OAAgEzX,EAAQwK,UAAUyB,QAAQ,KAEnH,wBAAIzI,MAAO,CAAEuU,MAAO,QAClB,yBACEjI,UAAU,kBACVtM,MAAO,CAAEuU,MAAM,GAAD,OAAM/X,EAAQwK,UAAYiN,EAAkB,IAA5C,SAGlB,wBAAIjU,MAAO,CAAEuU,MAAO,GAAIC,aAAc,EAAGC,UAAW,WAClD,kBAAC,IAAD,CAAgBH,QAAO,UAAK5Y,YAAiBc,EAAQuK,OAASmN,GAAvC,OAA0D1X,EAAQuK,OAAO0B,QAAQ,KAE1G,wBAAIzI,MAAO,CAAEuU,MAAO,QAClB,yBACEjI,UAAU,kBACVtM,MAAO,CAAEuU,MAAM,GAAD,OAAM/X,EAAQuK,OAASmN,EAAe,IAAtC,eAO3B3M,GACC,2BAAO+E,UAAU,cACf,+BACE,4BACE,uCACA,wBAAI+H,QAAS,GAAIP,EAAjB,UACA,wBAAIO,QAAS,GAAb,WAGJ,+BACGtC,GAASA,EACPjU,KAAI,SAAAtB,GAAO,OACV,wBAAI+P,IAAK/P,EAAQmX,WACf,wBAAI3T,MAAO,CAAEuU,MAAO,QAClB,kBAAC,IAAD,CAAWzd,GAAI0F,EAAQmX,aAEzB,wBAAI3T,MAAO,CAAEuU,MAAO,GAAIC,aAAc,EAAGC,UAAW,WAClD,kBAAC,IAAD,CAAgBH,QAAO,UAAK5Y,YAAiBc,EAAQuV,MAAQoC,GAAtC,OAAwD3X,EAAQuV,MAAMtJ,QAAQ,KAEvG,wBAAIzI,MAAO,CAAEuU,MAAO,QAClB,yBACEjI,UAAU,kBACVtM,MAAO,CAAEuU,MAAM,GAAD,OAAM/X,EAAQuV,MAAQoC,EAAc,IAApC,SAGlB,wBAAInU,MAAO,CAAEuU,MAAO,GAAIC,aAAc,EAAGC,UAAW,WAClD,kBAAC,IAAD,CAAgBH,QAAO,UAAK5Y,YAAiBc,EAAQ+L,MAAQjG,GAAtC,OAAwD9F,EAAQ+L,QAEzF,wBAAIvI,MAAO,CAAEuU,MAAO,QAClB,yBACEjI,UAAU,kBACVtM,MAAO,CAAEuU,MAAM,GAAD,OAAM/X,EAAQ+L,MAAQjG,EAAc,IAApC,oB,GAlHNoS,IAAM9K,WA+HvBvC,O,sFCpGAsN,IA7BM,SAAC,GAAsC,IAApC7d,EAAmC,EAAnCA,GAAI8d,EAA+B,EAA/BA,OAAWC,EAAoB,+BAKzD,IAAMzd,EAAQiO,IAAevO,IAAO,CAClC6J,KAAM,uBACNpF,KAAM,yBAGFA,EACJ,kBAAC,IAAD,eACEA,KAAMnE,EAAMmE,KACZuZ,IAAK1d,EAAMuJ,MACPkU,IAIR,OAAID,EACKrZ,EAIP,kBAAC,IAAD,CAAczE,GAAIA,EAAIyE,MAAM,GACzBA,K,8FCOQ6J,IA3BM,SAAC,GAAoC,IAAD,IAAlC7J,YAAkC,SAAlBwJ,EAAkB,0BAE/BgQ,mBAAmC,MAFJ,mBAEhDrF,EAFgD,KAE1CsF,EAF0C,KAIvDC,qBAAU,WAAOC,IAAgBC,QAAQzF,MAJc,IAM/C5Y,EAAiDiO,EAAjDjO,GAAIua,EAA6CtM,EAA7CsM,SAN2C,EAMEtM,EAAnCpN,gBANiC,WAMtBqF,EANsB,EAMRoY,EANQ,YAMErQ,EANF,8BAYvD,OACE,qCACEsQ,KAAMH,IAAgBjP,SAASnP,GAC/Bwe,OAAO,SACPC,IAAI,sBACJjJ,UAAW3U,EACX6d,IAAK,SAAA9F,GAASsF,EAAQtF,KAClB0F,GAEH7Z,GAAQ,kBAAC,IAAD,CAAczE,GAAIA,EAAI8d,QAAM,IAAK,IACzCvD,GAAYhM,IAAevO,GAAI6J,Q,iCCnCtChD,OAAO8X,eAAeC,EAAS,aAAc,CAC3CjR,OAAO,IAGT,IAAIkR,EAA4B,oBAAXC,QAAoD,kBAApBA,OAAOC,SAAwB,SAAUC,GAAO,cAAcA,GAAS,SAAUA,GAAO,OAAOA,GAAyB,oBAAXF,QAAyBE,EAAIC,cAAgBH,QAAUE,IAAQF,OAAOI,UAAY,gBAAkBF,GAElQG,EAAWtY,OAAOuY,QAAU,SAAUZ,GAAU,IAAK,IAAI/S,EAAI,EAAGA,EAAI4T,UAAUhW,OAAQoC,IAAK,CAAE,IAAI6T,EAASD,UAAU5T,GAAI,IAAK,IAAIgK,KAAO6J,EAAczY,OAAOqY,UAAUK,eAAeC,KAAKF,EAAQ7J,KAAQ+I,EAAO/I,GAAO6J,EAAO7J,IAAY,OAAO+I,GAEnPiB,EAAe,WAAc,SAASC,EAAiBlB,EAAQvQ,GAAS,IAAK,IAAIxC,EAAI,EAAGA,EAAIwC,EAAM5E,OAAQoC,IAAK,CAAE,IAAIkU,EAAa1R,EAAMxC,GAAIkU,EAAWC,WAAaD,EAAWC,aAAc,EAAOD,EAAWE,cAAe,EAAU,UAAWF,IAAYA,EAAWG,UAAW,GAAMjZ,OAAO8X,eAAeH,EAAQmB,EAAWlK,IAAKkK,IAAiB,OAAO,SAAUI,EAAaC,EAAYC,GAAiJ,OAA9HD,GAAYN,EAAiBK,EAAYb,UAAWc,GAAiBC,GAAaP,EAAiBK,EAAaE,GAAqBF,GAA7gB,GAIfG,EAAUC,EAFDC,EAAQ,IAMjBC,EAAcF,EAFDC,EAAQ,KAMrBE,EAAeH,EAFDC,EAAQ,MAI1B,SAASD,EAAuBnB,GAAO,OAAOA,GAAOA,EAAIuB,WAAavB,EAAM,CAAEwB,QAASxB,GAEvF,SAASyB,EAAgBzB,EAAKvJ,EAAK9H,GAAiK,OAApJ8H,KAAOuJ,EAAOnY,OAAO8X,eAAeK,EAAKvJ,EAAK,CAAE9H,MAAOA,EAAOiS,YAAY,EAAMC,cAAc,EAAMC,UAAU,IAAkBd,EAAIvJ,GAAO9H,EAAgBqR,EAQ3M,IAAI0B,EAA0B,CAC5BC,UAAW,gBACXC,YAAa,oBACbC,cAAe,sBACfC,sBAAuB,gCACvBC,sBAAuB,gCACvBC,0BAA2B,oCAC3BC,OAAQ,aACRC,iBAAkB,0BAClBC,iBAAkB,0BAClBC,qBAAsB,+BAGpBC,EAAgB,CAAC,iBAAkB,wBAAyB,yBAA0B,WAAY,mBAAoB,QAAS,WAAY,SAAU,SAAU,iBAAkB,oBAErL,SAASC,EAAKtC,GACZ,IAAK,IAAIuC,EAAOlC,UAAUhW,OAAQvC,EAAOiR,MAAMwJ,EAAO,EAAIA,EAAO,EAAI,GAAIC,EAAO,EAAGA,EAAOD,EAAMC,IAC9F1a,EAAK0a,EAAO,GAAKnC,UAAUmC,GAG7B,IAAK1a,EAAKuC,OACR,OAAO2V,EAMT,IAHA,IAAIyC,EAAM,GACNC,EAAa7a,OAAOC,KAAKkY,GAEpBvT,EAAI,EAAGA,EAAIiW,EAAWrY,OAAQoC,IAAK,CAC1C,IAAIgK,EAAMiM,EAAWjW,IAEM,IAAvB3E,EAAK6a,QAAQlM,KACfgM,EAAIhM,GAAOuJ,EAAIvJ,IAInB,OAAOgM,EAgBT,SAASG,EAAsBC,GAC7BA,EAAyB3U,SAAQ,SAAUlN,GACzC,OAAO8hB,qBAAqB9hB,MAIhC,SAAS+hB,EAASC,GAChB,OAAQ3J,MAAM4J,WAAWD,KAAOE,SAASF,GAG3C,SAASG,EAAaC,GAEpB,MAAyB,kBAAXA,GAAuBA,EAAOC,OAAO,OAASD,EAAO/Y,OAAS,GAAK0Y,EAASK,EAAOE,OAAO,EAAGF,EAAO/Y,OAAS,IAG7H,SAASkZ,EAAYC,EAAUC,GACzBD,GAAgC,oBAAbA,GACrBA,EAASC,GAIb,IAAIC,EAAgB,SAAUC,GAG5B,SAASD,EAAczU,IAjFzB,SAAyB2U,EAAU7C,GAAe,KAAM6C,aAAoB7C,GAAgB,MAAM,IAAI8C,UAAU,qCAkF5GC,CAAgB1iB,KAAMsiB,GAEtB,IAAIK,EAlFR,SAAoCC,EAAMxD,GAAQ,IAAKwD,EAAQ,MAAM,IAAIC,eAAe,6DAAgE,OAAOzD,GAAyB,kBAATA,GAAqC,oBAATA,EAA8BwD,EAAPxD,EAkFlN0D,CAA2B9iB,MAAOsiB,EAAcS,WAAatc,OAAOuc,eAAeV,IAAgBlD,KAAKpf,KAAM6N,IAE1H8U,EAAMM,kBAAoB,GAE1B,IAAIjB,EAAS,OACTkB,EAAW,UAEXvB,EAAS9T,EAAMmU,SAEjBA,EAASnU,EAAMmU,OAAS,GAAsB,MAAjBnU,EAAMmU,OAAiB,EAAInU,EAAMmU,OAC9DkB,EAAW,UACFnB,EAAalU,EAAMmU,UAE5BA,EAA0B,OAAjBnU,EAAMmU,OAAkB,EAAInU,EAAMmU,OAC3CkB,EAAW,UAGbP,EAAMQ,sBAAwBpE,EAAS,GAAIuB,EAAyBzS,EAAMsV,uBAE1E,IAAIA,EAAwBR,EAAMS,sBAAsBpB,GAQxD,OANAW,EAAMU,MAAQ,CACZF,sBAAuBA,EACvBnB,OAAQA,EACRkB,SAAUA,EACVI,sBAAsB,GAEjBX,EAwQT,OAnXF,SAAmBY,EAAUC,GAAc,GAA0B,oBAAfA,GAA4C,OAAfA,EAAuB,MAAM,IAAIf,UAAU,kEAAoEe,GAAeD,EAASzE,UAAYrY,OAAOgd,OAAOD,GAAcA,EAAW1E,UAAW,CAAED,YAAa,CAAEtR,MAAOgW,EAAU/D,YAAY,EAAOE,UAAU,EAAMD,cAAc,KAAe+D,IAAY/c,OAAOid,eAAiBjd,OAAOid,eAAeH,EAAUC,GAAcD,EAASR,UAAYS,GA2E/dG,CAAUrB,EAAeC,GAmCzBlD,EAAaiD,EAAe,CAAC,CAC3BjN,IAAK,oBACL9H,MAAO,WACL,IAAIyU,EAAShiB,KAAKqjB,MAAMrB,OAMpBhiB,KAAK4jB,gBAAkB5jB,KAAK4jB,eAAe9a,OAC7C9I,KAAK6jB,YAAY7B,KAGpB,CACD3M,IAAK,qBACL9H,MAAO,SAA4BuW,EAAWC,GAC5C,IAAIC,EAAShkB,KAETikB,EAASjkB,KAAK6N,MACdqW,EAAQD,EAAOC,MACfC,EAAWF,EAAOE,SAClBnC,EAASiC,EAAOjC,OAChBoC,EAAiBH,EAAOG,eACxBC,EAAmBJ,EAAOI,iBAI9B,GAAIrkB,KAAK4jB,gBAAkB5B,IAAW8B,EAAU9B,OAAQ,CACtD,IAAIsC,EAIJtkB,KAAKukB,YAAYR,EAAU/B,QAG3BhiB,KAAK4jB,eAAe9a,MAAMoa,SAAW,SACrC,IAAIsB,EAAgBxkB,KAAK4jB,eAAea,aACxCzkB,KAAK4jB,eAAe9a,MAAMoa,SAAW,GAGrC,IAAIwB,EAAgBP,EAAWD,EAE3BS,EAAY,KACZC,EAAe,CACjB5C,OAAQ,KACRkB,SAAU,UAER2B,EAA2C,SAArBd,EAAU/B,OAEhCL,EAASK,IAEX2C,EAAY3C,EAAS,GAAgB,MAAXA,EAAiB,EAAIA,EAC/C4C,EAAa5C,OAAS2C,GACb5C,EAAaC,IAEtB2C,EAAuB,OAAX3C,EAAkB,EAAIA,EAClC4C,EAAa5C,OAAS2C,IAItBA,EAAYH,EACZI,EAAa5C,OAAS,OACtB4C,EAAa1B,SAAW,MAGtB2B,IAEFD,EAAa5C,OAAS2C,EAItBA,EAAYH,GAId,IAAIrB,GAAwB,EAAIjD,EAAaE,UAAoBC,EAAViE,EAAM,GAAyBtkB,KAAKmjB,sBAAsB5C,WAAW,GAAOF,EAAgBiE,EAAKtkB,KAAKmjB,sBAAsB3C,YAAkC,SAArBsD,EAAU9B,QAAqBA,EAAS8B,EAAU9B,QAAS3B,EAAgBiE,EAAKtkB,KAAKmjB,sBAAsB1C,cAA0B,SAAXuB,GAAqBA,EAAS8B,EAAU9B,QAAS3B,EAAgBiE,EAAKtkB,KAAKmjB,sBAAsBzC,sBAA+C,IAAxBkE,EAAa5C,QAAe3B,EAAgBiE,EAAKtkB,KAAKmjB,sBAAsBxC,sBAA+C,SAAxBiE,EAAa5C,QAAoB3B,EAAgBiE,EAAKtkB,KAAKmjB,sBAAsBvC,0BAA2BgE,EAAa5C,OAAS,GAAIsC,IAGvpBQ,EAA+B9kB,KAAKojB,sBAAsBwB,EAAa5C,QAK3EhiB,KAAK+kB,SAAS,CACZ5B,sBAAuBA,EACvBnB,OAAQ2C,EACRzB,SAAU,SAGVI,sBAAuBuB,IAIzBG,aAAahlB,KAAKilB,WAClBD,aAAahlB,KAAKklB,2BAEdL,GAGFD,EAAatB,sBAAuB,EAEpC9B,EAAsBxhB,KAAKijB,mBAC3BjjB,KAAKijB,kBA3Kf,SAA8Bb,GAC5B,IAAIX,EAA2B,GAQ/B,OANAA,EAAyB,GAAK0D,uBAAsB,WAClD1D,EAAyB,GAAK0D,uBAAsB,WAClD/C,UAIGX,EAkK0B2D,EAAqB,WAC5CpB,EAAOe,SAASH,GAGhBzC,EAAYkC,EAAkB,CAAEM,UAAWC,EAAa5C,YAI1DhiB,KAAKklB,0BAA4BG,YAAW,WAC1CrB,EAAOe,SAAS,CACd5B,sBAAuB2B,EACvBxB,sBAAsB,IAKxBU,EAAOH,YAAYe,EAAa5C,QAEhCG,EAAYiC,EAAgB,CAAEO,UAAWC,EAAa5C,WACrD0C,KAGHvC,EAAYkC,EAAkB,CAAEM,UAAWA,IAG3C3kB,KAAKilB,UAAYI,YAAW,WAC1BT,EAAazB,sBAAwB2B,EACrCF,EAAatB,sBAAuB,EAEpCU,EAAOe,SAASH,GAKD,SAAX5C,GAEFgC,EAAOH,YAAYc,GAGrBxC,EAAYiC,EAAgB,CAAEO,UAAWA,MACxCD,OAIR,CACDrP,IAAK,uBACL9H,MAAO,WACLiU,EAAsBxhB,KAAKijB,mBAE3B+B,aAAahlB,KAAKilB,WAClBD,aAAahlB,KAAKklB,2BAElBllB,KAAKilB,UAAY,KACjBjlB,KAAKklB,0BAA4B,KACjCllB,KAAKmjB,sBAAwB,OAE9B,CACD9N,IAAK,cACL9H,MAAO,SAAqByU,GACX,IAAXA,IACFhiB,KAAK4jB,eAAe9a,MAAMwc,QAAU,MAGvC,CACDjQ,IAAK,cACL9H,MAAO,SAAqBoX,GACR,IAAdA,IACF3kB,KAAK4jB,eAAe9a,MAAMwc,QAAU,UAGvC,CACDjQ,IAAK,wBACL9H,MAAO,SAA+ByU,GACpC,IAAIuD,EAEJ,OAAO,EAAIrF,EAAaE,UAAqBC,EAAXkF,EAAO,GAA0BvlB,KAAKmjB,sBAAsBtC,QAAQ,GAAOR,EAAgBkF,EAAMvlB,KAAKmjB,sBAAsBrC,iBAA6B,IAAXkB,GAAe3B,EAAgBkF,EAAMvlB,KAAKmjB,sBAAsBnC,qBAAsBgB,EAAS,GAAI3B,EAAgBkF,EAAMvlB,KAAKmjB,sBAAsBpC,iBAA6B,SAAXiB,GAAoBuD,MAE3W,CACDlQ,IAAK,SACL9H,MAAO,WACL,IAAIiY,EACAC,EAASzlB,KAET0lB,EAAU1lB,KAAK6N,MACf8X,EAAiBD,EAAQC,eACzBC,EAAyBF,EAAQE,uBACjCzL,EAAWuL,EAAQvL,SACnB/E,EAAYsQ,EAAQtQ,UACpByQ,EAAmBH,EAAQG,iBAC3B3B,EAAQwB,EAAQxB,MAChBC,EAAWuB,EAAQvB,SACnB2B,EAASJ,EAAQI,OACjBlmB,EAAK8lB,EAAQ9lB,GACbkJ,EAAQ4c,EAAQ5c,MAChBid,EAAS/lB,KAAKqjB,MACdrB,EAAS+D,EAAO/D,OAChBkB,EAAW6C,EAAO7C,SAClBC,EAAwB4C,EAAO5C,sBAC/BG,EAAuByC,EAAOzC,qBAG9B0C,EAAiBjH,EAAS,GAAIjW,EAAO,CACvCkZ,OAAQA,EACRkB,SAAUA,GAAYpa,EAAMoa,WAG1BI,GAAwBsC,IAC1BI,EAAeC,WAAa,UAAY9B,EAAW,MAAQ2B,EAAS,IAAM5B,EAAQ,KAG9Epb,EAAMmd,aACRD,EAAeC,WAAand,EAAMmd,WAAa,KAAOD,EAAeC,YAIvED,EAAeE,iBAAmBF,EAAeC,YAGnD,IAAIE,EAAe,GAEfR,IACFQ,EAAaF,WAAa,WAAa9B,EAAW,MAAQ2B,EAAS,IAAM5B,EAAQ,KAEjFiC,EAAaD,iBAAmBC,EAAaF,WAE9B,IAAXjE,IACFmE,EAAaC,QAAU,IAI3B,IAAIC,GAAmB,EAAInG,EAAaE,UAAqBC,EAAXmF,EAAO,GAA0BrC,GAAuB,GAAO9C,EAAgBmF,EAAMpQ,EAAWA,GAAYoQ,IAI1Jc,EADyD,qBAA9BtmB,KAAK6N,MAAM,eACL7N,KAAK6N,MAAM,eAA4B,IAAXmU,EAEjE,OAAOlC,EAAQM,QAAQmG,cACrB,MACAxH,EAAS,GAAImC,EAAKsF,WAAM1gB,EAAW,CAAC9F,KAAK6N,OAAO4Y,OAAOxF,IAAiB,CACtE,cAAeqF,EACflR,UAAWiR,EACXzmB,GAAIA,EACJkJ,MAAOkd,IAETlG,EAAQM,QAAQmG,cACd,MACA,CACEnR,UAAWyQ,EACX/c,MAAOqd,EACP7H,IAAK,SAAaoI,GAChB,OAAOjB,EAAO7B,eAAiB8C,IAGnCvM,QAMDmI,EAzSW,CA0SlBxC,EAAQM,QAAQ1N,WAYlB4P,EAAcqE,UAAY,CACxB,cAAe1G,EAAYG,QAAQwG,KACnCjB,eAAgB1F,EAAYG,QAAQwG,KACpCzD,sBAAuBlD,EAAYG,QAAQyG,OAC3CjB,uBAAwB3F,EAAYG,QAAQwG,KAC5CzM,SAAU8F,EAAYG,QAAQ0G,IAAIC,WAClC3R,UAAW6K,EAAYG,QAAQ4G,OAC/BnB,iBAAkB5F,EAAYG,QAAQ4G,OACtC9C,MAAOjE,EAAYG,QAAQ6G,OAC3B9C,SAAUlE,EAAYG,QAAQ6G,OAC9BnB,OAAQ7F,EAAYG,QAAQ4G,OAC5BhF,OArBmB,SAAwBnU,EAAOqZ,EAAUC,GAC5D,IAAI5Z,EAAQM,EAAMqZ,GAElB,MAAqB,kBAAV3Z,GAAsBA,GAAS,GAAKwU,EAAaxU,IAAoB,SAAVA,EAC7D,KAGF,IAAIkV,UAAU,UAAYlV,EAAQ,eAAkC,qBAAVA,EAAwB,YAAckR,EAAQlR,IAAU,yBAA2B2Z,EAAW,OAASC,EAAnJ,yFAerBvnB,GAAIqgB,EAAYG,QAAQ4G,OACxB5C,eAAgBnE,EAAYG,QAAQgH,KACpC/C,iBAAkBpE,EAAYG,QAAQgH,KACtCte,MAAOmX,EAAYG,QAAQyG,QAG7BvE,EAAc+E,aAAe,CAC3B1B,gBAAgB,EAChBxC,sBAAuB7C,EACvBsF,wBAAwB,EACxBzB,SAAU,IACVD,MAAO,EACP4B,OAAQ,OACRhd,MAAO,IAGT0V,EAAQ4B,QAAUkC,G,iCCtbH,SAASgF,EAAkBtmB,EAAkBmjB,GAAgC,IAAd9hB,EAAa,uDAAH,EACtF,OAAQ8hB,EAAW,IAAOnjB,EAAYqB,EAAU,EAPlD,mC,8LCkBM6D,E,kDAmBJ,aAAsB,IAAD,iDAANqB,EAAM,yBAANA,EAAM,gBAEnB,IADA,+BAASA,KAfXggB,gBAAkB,IAAIC,IAcD,EAbrBC,gBAAkB,IAAID,IAaD,EAXrBE,eAAiB,GAWI,EAVrBC,cAAgB,GAUK,EARrBxhB,kBAAoB,GAQC,EAPrBC,iBAAmB,GAOE,EANrBC,oBAAsB,GAMD,EAJrBuhB,oBAAsB,GAID,EAHrBC,mBAAqB,GAGA,EAFrBvhB,sBAAwB,GAIC,MAAnB,EAAKxC,MAAMgkB,KAEb,OADA,EAAKzT,QAAS,EACd,eAEF,IAAMyT,EAAOC,YAAa,EAAKjkB,MAAMgkB,KAAKloB,IANvB,OAQjBkoB,EAAKhX,MAAMkX,sBACXF,EAAKhX,MAAMkX,qBAAqBC,UAChCH,EAAKhX,MAAMkX,qBAAqBE,SAEhC,EAAKR,eAAiBI,EAAKhX,MAAMkX,qBAAqBC,SACtD,EAAKN,cAAgBG,EAAKhX,MAAMkX,qBAAqBE,aACzBpiB,IAAxB,EAAK4hB,qBAAuD5hB,IAAvB,EAAK6hB,gBAC5C,EAAKD,eAAiB,GACtB,EAAKC,cAAgB,MAGvB,EAAKD,eAAiB,GACtB,EAAKC,cAAgB,GAErB,EAAKxhB,kBAAoB,GACzB,EAAKC,iBAAmB,GACxB,EAAKC,oBAAsB,GAE3B,EAAKuhB,oBAAsB,GAC3B,EAAKC,mBAAqB,GAC1B,EAAKvhB,sBAAwB,IAE/B,sBAAI,EAAKohB,gBAAT,YAA4B,EAAKC,gBAAe7a,SAAQ,SAACyH,GACvD,EAAKgT,gBAAgBY,IAAI5T,EAAG,GAC5B,EAAKkT,gBAAgBU,IAAI5T,EAAG,MAE9B,EAAKxM,iBAAiBC,IAAOK,OAAOE,GAAGJ,KAAkB,EAAKK,eAlC3C,E,0DAqCPpD,GAAQ,IAAD,OACblF,EAAQkF,EAAME,QAAQC,KAExB6iB,EAAS,GACTC,EAAY,GACZC,EAAc,GAUlB,GAbgBljB,EAAME,QAAQoH,OAId6b,IAAcvW,IAAIC,UAChCmW,EAASpoB,KAAK0nB,eACdW,EAAS,sBAAOroB,KAAKmG,mBAAZ,YAAkCnG,KAAKqG,sBAChDiiB,EAAW,sBAAOtoB,KAAK4nB,qBAAZ,YAAoC5nB,KAAKsG,0BAEpD8hB,EAASpoB,KAAK2nB,cACdU,EAAS,sBAAOroB,KAAKoG,kBAAZ,YAAiCpG,KAAKqG,sBAC/CiiB,EAAW,sBAAOtoB,KAAK6nB,oBAAZ,YAAmC7nB,KAAKsG,yBAEjD8hB,EAAOI,SAAStoB,KAAWkF,EAAMqjB,KAGnC,GACEJ,EAAUK,MAAK,SAACnU,GAAD,OAAO,EAAKtU,kBAAkB0B,QAAQ4S,OACrDnP,EAAM+J,UAAYC,IAAUuZ,OAG5B3oB,KAAKunB,gBAAgBY,IAAIjoB,EAAOF,KAAKunB,gBAAgBqB,IAAI1oB,GAAS,OAC7D,CACL,IAAMiW,EAAQnW,KAAK4V,QAAQiT,cAAczjB,EAAM6W,UAE3C9F,GAASmS,EAAYI,MAAK,SAACnU,GAAD,OAAO4B,EAAMxU,QAAQ4S,EAAGnP,EAAMK,cAC1DzF,KAAKunB,gBAAgBY,IAAIjoB,EAAOF,KAAKunB,gBAAgBqB,IAAI1oB,GAAS,GAElEF,KAAKynB,gBAAgBU,IAAIjoB,EAAOF,KAAKynB,gBAAgBmB,IAAI1oB,GAAS,M,kCA6B7D,IAAD,OACJ4oB,EAAUnR,MAAMC,KAAK5X,KAAKynB,gBAAgBnL,UAAUnE,QACxD,SAAC4Q,EAAOC,GAAR,OAAgBD,EAAQC,IACxB,GAEIC,EAAUtR,MAAMC,KAAK5X,KAAKunB,gBAAgBjL,UAAUnE,QACxD,SAAC4Q,EAAOC,GAAR,OAAgBD,EAAQC,IACxB,GAEF,GAAIF,EAAUG,IAAY,EACxB,OAAO,KAET,IAKIC,EALEb,EAAS,sBACVroB,KAAKmG,mBADK,YAEVnG,KAAKoG,kBAFK,YAGVpG,KAAKqG,sBAIR6iB,EADEb,EAAUpf,OAAS,EACPof,EAAU,GAEV3oB,IAAO0C,kBAAkBxC,GAGzC,IAAMupB,EACJnpB,KAAKopB,eAAengB,OAAS,EAC3B,oCACE,+BACE,4BACE,wCACA,uCACA,sCACA,wCAGJ,+BACGjJ,KAAKopB,eAAexiB,KAAI,SAAC1G,GAAD,OACvB,wBAAImV,IAAKnV,GACP,6BACA,wBAAImpB,MAAM,OACR,kBAAC,IAAD,CAAWzpB,GAAIM,EAAO4I,MAAO,CAAEkZ,OAAQ,YAEzC,4BAAKnO,YAAa,EAAK0T,gBAAgBqB,IAAI1oB,KAC3C,4BAAK2T,YAAa,EAAK4T,gBAAgBmB,IAAI1oB,WAKjD,KAEAopB,EAAa,CAAEC,UAAW,QAC1BC,EACJxpB,KAAKypB,cAAcxgB,OAAS,EAC1B,oCACE,+BACE,4BACE,wBAAIH,MAAOwgB,GAAX,WACA,wBAAIxgB,MAAOwgB,GAAX,WACA,wBAAIxgB,MAAOwgB,GAAX,UACA,wBAAIxgB,MAAOwgB,GAAX,YAGJ,+BACGtpB,KAAKypB,cAAc7iB,KAAI,SAAC1G,GAAD,OACtB,wBAAImV,IAAKnV,GACP,6BACA,wBAAImpB,MAAM,OACR,kBAAC,IAAD,CAAWzpB,GAAIM,EAAO4I,MAAO,CAAEkZ,OAAQ,YAEzC,4BAAKnO,YAAa,EAAK0T,gBAAgBqB,IAAI1oB,KAC3C,4BAAK2T,YAAa,EAAK4T,gBAAgBmB,IAAI1oB,WAKjD,KAEN,OACE,kBAAC,IAAD,CACEmE,KAAM,kBAAC,IAAD,CAAWzE,GAAIspB,IACrB3b,MAAK,UAAK/I,YAAiBykB,GAAWA,EAAUH,IAA3C,MACLtb,MAAM,iCACNhC,QACE,mHAEE,4BAAKxL,KAAKwL,WAId,2BAAO4J,UAAU,wBAAwBtM,MAAO,CAAE4gB,WAAY,SAC3DP,EACAK,M,8BAjHP,MAAO,sBACFxpB,KAAKmG,mBADH,YAEFnG,KAAKoG,kBAFH,YAGFpG,KAAKqG,qBAHH,YAIFrG,KAAK4nB,qBAJH,YAKF5nB,KAAK6nB,oBALH,YAMF7nB,KAAKsG,wBACRM,KAAI,SAAChH,GAAD,OAAQ,wBAAIyV,IAAKzV,GAAKF,IAAOE,GAAI6J,W,qCAGnB,IAAD,OACnB,OAAOzJ,KAAK0nB,eAAe/K,QACzB,SAACzc,GAAD,OAAW,EAAKqnB,gBAAgBqB,IAAI1oB,GAAS,EAAKunB,gBAAgBmB,IAAI1oB,GAAS,O,oCAI9D,IAAD,OAClB,OAAOF,KAAK2nB,cAAchL,QACxB,SAACzc,GAAD,OAAW,EAAKqnB,gBAAgBqB,IAAI1oB,GAAS,EAAKunB,gBAAgBmB,IAAI1oB,GAAS,S,GA/GvDwL,KAAxBxF,EACGF,aAAe,CACpB4P,QAASW,KAmNErQ,O,sKClNT8S,E,kDAUJ,WAAYhU,GAAkB,IAAD,8BAC3B,cAAMA,IAPEsU,eAMmB,IAJ7BhU,aAI6B,IAH7BiO,SAAW,EAGkB,EAF7BlC,MAAoD,GAIlD,EAAKtJ,iBAAiBC,IAAOC,KAAKC,GAAGC,KAAkB,EAAKC,QAC5D,EAAKL,iBAAiBC,IAAOK,OAAOH,GAAGC,KAAkB,EAAKG,UAHnC,E,mDAMtBlD,GACFA,EAAME,QAAQC,OAASvF,KAAKsF,QAAQ1F,IAGvCI,KAAKqR,MAAMhH,KAAK,CACd5E,UAAWL,EAAMK,UACjBkkB,KAAM,M,+BAIDvkB,GACHA,EAAME,QAAQC,OAASvF,KAAKsF,QAAQ1F,KAIxCI,KAAKuT,UAAYnO,EAAMyE,QAAUzE,EAAM0E,UAAY,GACnD9J,KAAKqR,MAAMrR,KAAKqR,MAAMpI,OAAS,GAAG0gB,MAAQ,K,kCAwDhC/lB,GAAa,IAAD,OACtBA,EAAK5D,KAAK4pB,wBACP3lB,eAAc,SAACC,GAAD,OAAaA,EAAQ,gEAA2B,kBAAC,IAAD,CAAWtE,GAAI,EAAK0F,QAAQ1F,KAAvD,yGAC/ByE,KAAK,EAAKiB,QAAQjB,MAClBF,OAAOG,OAAKC,EAAE,kFAA+C,EAAKslB,cAClEzlB,YAHuB,UAGR,EAAK0lB,aAHG,qC,kCAO9B,OACE,kBAAC,IAAD,CACEhV,SAAUxI,IAAgBC,KAAK,GAC/BlI,KAAM,kBAAC,IAAD,CAAWzE,GAAII,KAAKsF,QAAQ1F,KAClC2N,MAAK,UAAKsG,YAAa7T,KAAKuT,SAAWvT,KAAK8D,MAAMC,cAAgB,KAA7D,QACLyJ,MAAM,qBACNhC,QAAO,UAAKxL,KAAKsF,QAAQmE,KAAlB,6BAA2CoK,YAAa7T,KAAKuT,UAA7D,oBAAkF/O,YAAiBxE,KAAK8D,MAAMgQ,+BAA+B9T,KAAKuT,WAAlJ,W,+BApEG,IAAD,IACPvS,EAAQ,oBAAGhB,KAAKsZ,UAAUlI,WAAWpR,KAAKsF,QAAQ1F,WAA1C,aAAG,EAA4CoB,gBAA/C,QAA2D+oB,IACzE,OAAOtlB,KAAKulB,KAAK1C,YAAkBtmB,EAAUhB,KAAK8D,MAAMC,kB,mCAGtC,IAAD,SACXkmB,EAAS,UAAGjqB,KAAKsZ,UAAUlI,WAAWpR,KAAKsF,QAAQ1F,WAA1C,aAAG,EAA4CoB,SAC9D,QAAkB8E,IAAdmkB,EACF,OAAO,EAET,IAAMC,EAAyB,IAAZD,EACfzZ,EAA0B,KAC1B2Z,EAAc,EACdC,EAAU,EAqBd,OAnBApqB,KAAKqR,MAAMvE,SAAQ,SAAAyH,GACZ/D,EAGH4Z,GAAW7V,EAAE9O,UAAY+K,EAAW0Z,EAFpCE,EAAU7V,EAAE9O,UAAY,EAAK3B,MAAMgN,MAAMC,WAI3CP,EAAW+D,EAAE9O,UACb0kB,GAAe1lB,KAAKuG,MAAMof,EAAUF,GACpCE,GAAWF,EAEP3V,EAAEoV,KAAO,IACXS,EAAU,MAIdA,GAAWpqB,KAAK8D,MAAMumB,kBAAoB7Z,GAAY,GACtD2Z,GAAe1lB,KAAKuG,MAAMof,EAAUF,GACpCE,GAAWF,EAEJzlB,KAAK4W,IAAIrb,KAAK6pB,UAAYM,EAAanqB,KAAKsqB,Y,gCAInD,OAAOtqB,KAAKqR,MAAM8G,QAAO,SAACC,EAAGC,GAAJ,OAAUD,EAAIC,EAAEsR,OAAM,K,6CAI/C,MAAO,CACLxlB,OAAQnE,KAAK6pB,UAAY7pB,KAAK8pB,aAC9BnhB,WAAY,CACVC,MAAO,IACPC,QAAS,GACThE,MAAO,IAETiE,MAAOC,IAAeC,gB,GApFK0C,KAA3BsN,EACGhT,aAAe,CACpBsT,UAAWxZ,KA2GAkZ","file":"static/js/ProtectionWarrior.ffd9e74f.chunk.js","sourcesContent":["import SPELLS from 'common/SPELLS';\r\n\r\nimport CoreHaste from 'parser/shared/modules/Haste';\r\n\r\nclass Haste extends CoreHaste {\r\n  static HASTE_BUFFS = {\r\n    ...CoreHaste.HASTE_BUFFS,\r\n    // Ignorrior specific\r\n    [SPELLS.INTO_THE_FRAY_BUFF.id]: { // from Into the Fray (3% per stack for each enemy nearby)\r\n      hastePerStack: 0.03,\r\n    },\r\n  };\r\n}\r\n\r\nexport default Haste;\r\n","import SPELLS from 'common/SPELLS';\r\nimport CoreAbilities from 'parser/core/modules/Abilities';\r\nimport { SpellbookAbility } from 'parser/core/modules/Ability';\r\n\r\nclass Abilities extends CoreAbilities {\r\n  spellbook(): SpellbookAbility[] {\r\n    const combatant = this.selectedCombatant;\r\n    return [\r\n      {\r\n        spell: SPELLS.DEVASTATE,\r\n        enabled: !combatant.hasTalent(SPELLS.DEVASTATOR_TALENT.id),\r\n        gcd: {\r\n          base: 1500,\r\n        },\r\n        category: Abilities.SPELL_CATEGORIES.ROTATIONAL,\r\n        timelineSortIndex: 3,\r\n      },\r\n      {\r\n        spell: SPELLS.WHIRLWIND,\r\n        category: Abilities.SPELL_CATEGORIES.ROTATIONAL_AOE,\r\n        gcd: {\r\n          base: 1500,\r\n        },\r\n      },\r\n      {\r\n        spell: SPELLS.SHATTERING_THROW,\r\n        gcd: {\r\n          base: 1500,\r\n        },\r\n        cooldown: 180,\r\n        category: Abilities.SPELL_CATEGORIES.OTHERS,\r\n        timelineSortIndex: 3,\r\n      },\r\n      {\r\n        spell: SPELLS.EXECUTE,\r\n        gcd: {\r\n          base: 1500,\r\n        },\r\n        cooldown: haste => 6 / (1 + haste),\r\n        category: Abilities.SPELL_CATEGORIES.ROTATIONAL,\r\n        timelineSortIndex: 3,\r\n      },\r\n      {\r\n        spell: SPELLS.REVENGE,\r\n        gcd: {\r\n          base: 1500,\r\n        },\r\n        buffSpellId: SPELLS.REVENGE_FREE_CAST.id,\r\n        cooldown: haste => 3 / (1 + haste),\r\n        category: Abilities.SPELL_CATEGORIES.ROTATIONAL,\r\n        timelineSortIndex: 3,\r\n      },\r\n      {\r\n        spell: SPELLS.SHIELD_SLAM,\r\n        gcd: {\r\n          base: 1500,\r\n        },\r\n        category: Abilities.SPELL_CATEGORIES.ROTATIONAL,\r\n        buffSpellId: SPELLS.PUNISH_DEBUFF.id,\r\n        cooldown: haste => 9 / (1 + haste),\r\n        timelineSortIndex: 1,\r\n      },\r\n      {\r\n        spell: SPELLS.THUNDER_CLAP,\r\n        gcd: {\r\n          base: 1500,\r\n        },\r\n        category: Abilities.SPELL_CATEGORIES.ROTATIONAL, // 6 / (1 + haste)\r\n        cooldown: haste => {\r\n          if (combatant.hasTalent(SPELLS.UNSTOPPABLE_FORCE_TALENT.id) && combatant.hasBuff(SPELLS.AVATAR_TALENT.id)) {\r\n            return 6 / 2 / (1 + haste);\r\n          }\r\n          return 6 / (1 + haste);\r\n        },\r\n        castEfficiency: {\r\n          suggestion: true,\r\n          recommendedEfficiency: .9,\r\n          extraSuggestion: 'Casting Thunder Clap regularly is very important for performing well.',\r\n        },\r\n        timelineSortIndex: 2,\r\n      },\r\n      {\r\n        spell: SPELLS.IGNORE_PAIN,\r\n        category: Abilities.SPELL_CATEGORIES.DEFENSIVE,\r\n        buffSpellId: SPELLS.IGNORE_PAIN.id,\r\n        timelineSortIndex: 4,\r\n      },\r\n      {\r\n        spell: SPELLS.SHIELD_BLOCK,\r\n        buffSpellId: SPELLS.SHIELD_BLOCK_BUFF.id,\r\n        category: Abilities.SPELL_CATEGORIES.DEFENSIVE,\r\n        cooldown: haste => 16 / (1 + haste),\r\n        charges: 2,\r\n        timelineSortIndex: 5,\r\n      },\r\n      {\r\n        spell: SPELLS.DEMORALIZING_SHOUT,\r\n        buffSpellId: SPELLS.DEMORALIZING_SHOUT.id,\r\n        category: Abilities.SPELL_CATEGORIES.DEFENSIVE,\r\n        gcd: {\r\n          base: 1500,\r\n        },\r\n        cooldown: 45,\r\n        timelineSortIndex: 8,\r\n      },\r\n      {\r\n        spell: SPELLS.LAST_STAND,\r\n        buffSpellId: SPELLS.LAST_STAND.id,\r\n        category: Abilities.SPELL_CATEGORIES.DEFENSIVE,\r\n        cooldown: combatant.hasTalent(SPELLS.BOLSTER_TALENT.id) ? 180 - 60 : 180,\r\n        timelineSortIndex: 9,\r\n      },\r\n      {\r\n        spell: SPELLS.SHIELD_WALL,\r\n        buffSpellId: SPELLS.SHIELD_WALL.id,\r\n        category: Abilities.SPELL_CATEGORIES.DEFENSIVE,\r\n        cooldown: 240,\r\n        timelineSortIndex: 9,\r\n      },\r\n      {\r\n        spell: SPELLS.SPELL_REFLECTION,\r\n        category: Abilities.SPELL_CATEGORIES.DEFENSIVE,\r\n        cooldown: 25,\r\n      },\r\n      {\r\n        spell: SPELLS.HEROIC_LEAP,\r\n        gcd: {\r\n          base: 1500,\r\n        },\r\n        category: Abilities.SPELL_CATEGORIES.UTILITY,\r\n        cooldown: combatant.hasTalent(SPELLS.BOUNDING_STRIDE_TALENT.id) ? 45 - 15 : 45,\r\n      },\r\n      {\r\n        spell: SPELLS.HEROIC_THROW,\r\n        gcd: {\r\n          base: 1500,\r\n        },\r\n        category: Abilities.SPELL_CATEGORIES.UTILITY,\r\n      },\r\n      {\r\n        spell: SPELLS.INTERCEPT,\r\n        category: Abilities.SPELL_CATEGORIES.UTILITY,\r\n        cooldown: 15,\r\n        charges: 2,\r\n      },\r\n      {\r\n        spell: SPELLS.TAUNT,\r\n        category: Abilities.SPELL_CATEGORIES.UTILITY,\r\n        cooldown: 8,\r\n      },\r\n      {\r\n        spell: SPELLS.BERSERKER_RAGE,\r\n        category: Abilities.SPELL_CATEGORIES.COOLDOWNS,\r\n        cooldown: 60,\r\n        timelineSortIndex: 8,\r\n      },\r\n      {\r\n        spell: SPELLS.PUMMEL,\r\n        category: Abilities.SPELL_CATEGORIES.UTILITY,\r\n        cooldown: 15,\r\n      },\r\n      {\r\n        spell: SPELLS.VICTORY_RUSH,\r\n        enabled: !combatant.hasTalent(SPELLS.IMPENDING_VICTORY_TALENT.id),\r\n        category: Abilities.SPELL_CATEGORIES.OTHERS,\r\n      },\r\n      {\r\n        spell: SPELLS.STORM_BOLT_TALENT,\r\n        enabled: combatant.hasTalent(SPELLS.STORM_BOLT_TALENT.id),\r\n        category: Abilities.SPELL_CATEGORIES.UTILITY,\r\n        gcd: {\r\n          base: 1500,\r\n        },\r\n        cooldown: 30,\r\n      },\r\n      {\r\n        spell: SPELLS.AVATAR_TALENT,\r\n        buffSpellId: SPELLS.AVATAR_TALENT.id,\r\n        category: Abilities.SPELL_CATEGORIES.COOLDOWNS,\r\n        gcd: {\r\n          base: 1500,\r\n        },\r\n        cooldown: 90,\r\n        timelineSortIndex: 9,\r\n      },\r\n      {\r\n        spell: SPELLS.IMPENDING_VICTORY_TALENT,\r\n        enabled: combatant.hasTalent(SPELLS.IMPENDING_VICTORY_TALENT.id),\r\n        category: Abilities.SPELL_CATEGORIES.OTHERS,\r\n        gcd: {\r\n          base: 1500,\r\n        },\r\n        cooldown: 30,\r\n      },\r\n      {\r\n        spell: SPELLS.RAVAGER_TALENT_PROTECTION,\r\n        enabled: combatant.hasTalent(SPELLS.RAVAGER_TALENT_PROTECTION.id),\r\n        category: Abilities.SPELL_CATEGORIES.COOLDOWNS,\r\n        gcd: {\r\n          base: 1500,\r\n        },\r\n        cooldown: 60,\r\n        castEfficiency: {\r\n          suggestion: true,\r\n          recommendedEfficiency: .9,\r\n        },\r\n        timelineSortIndex: 9,\r\n      },\r\n      {\r\n        spell: SPELLS.DRAGON_ROAR_TALENT,\r\n        enabled: combatant.hasTalent(SPELLS.DRAGON_ROAR_TALENT.id),\r\n        category: Abilities.SPELL_CATEGORIES.COOLDOWNS,\r\n        gcd: {\r\n          base: 1500,\r\n        },\r\n        cooldown: 35,\r\n        timelineSortIndex: 9,\r\n      },\r\n      {\r\n        spell: SPELLS.RALLYING_CRY,\r\n        category: Abilities.SPELL_CATEGORIES.UTILITY,\r\n        gcd: {\r\n          base: 1500,\r\n        },\r\n        cooldown: 180,\r\n        timelineSortIndex: 9,\r\n      },\r\n    ];\r\n  }\r\n}\r\n\r\nexport default Abilities;\r\n","import React from 'react';\r\nimport { formatPercentage } from 'common/format';\r\nimport CoreAlwaysBeCasting from 'parser/shared/modules/AlwaysBeCasting';\r\nimport { When } from 'parser/core/ParseResults';\r\nimport { i18n } from '@lingui/core';\r\nimport { t } from '@lingui/macro';\r\n\r\nclass AlwaysBeCasting extends CoreAlwaysBeCasting {\r\n  suggestions(when: When) {\r\n    const deadTimePercentage = this.totalTimeWasted / this.owner.fightDuration;\r\n\r\n    when(deadTimePercentage).isGreaterThan(0.2)\r\n      .addSuggestion((suggest, actual, recommended) => suggest(<span> Your downtime can be improved. Try to Always Be Casting (ABC)..</span>)\r\n        .icon('spell_mage_altertime')\r\n        .actual(i18n._(t('warrior.protection.suggestions.alwaysBeCasting.downtime')`${formatPercentage(actual)}% downtime`))\r\n        .recommended(`${Math.round(Number(formatPercentage(recommended)))}% is recommended`)\r\n        .regular(recommended + 0.05).major(recommended + 0.15));\r\n  }\r\n}\r\n\r\nexport default AlwaysBeCasting;\r\n","import SPELLS from 'common/SPELLS';\r\nimport CoreSpellUsable from 'parser/shared/modules/SpellUsable';\r\nimport GlobalCooldown from 'parser/shared/modules/GlobalCooldown';\r\nimport { AnyEvent, CastEvent } from 'parser/core/Events';\r\nimport { Options } from 'parser/core/Analyzer';\r\n\r\nclass SpellUsable extends CoreSpellUsable {\r\n  static dependencies = {\r\n    ...CoreSpellUsable.dependencies,\r\n    globalCooldown: GlobalCooldown,\r\n  };\r\n  hasDevastator: boolean;\r\n  lastPotentialTriggerForShieldSlam: CastEvent | null = null;\r\n  protected globalCooldown!: GlobalCooldown;\r\n\r\n  constructor(options: Options) {\r\n    super(options);\r\n    this.hasDevastator = this.selectedCombatant.hasTalent(SPELLS.DEVASTATOR_TALENT.id);\r\n  }\r\n\r\n  onCast(event: CastEvent) {\r\n    super.onCast(event);\r\n    const spellId = event.ability.guid;\r\n    if (spellId === SPELLS.MELEE.id && this.hasDevastator) {\r\n      this.lastPotentialTriggerForShieldSlam = event;\r\n    } else if (spellId === SPELLS.DEVASTATE.id || spellId === SPELLS.THUNDER_CLAP.id || spellId === SPELLS.REVENGE.id) {\r\n      this.lastPotentialTriggerForShieldSlam = { ...event };\r\n      //reset the cooldown to after the GCD of the resetting ability\r\n      this.lastPotentialTriggerForShieldSlam.timestamp += this.globalCooldown.getGlobalCooldownDuration(spellId);\r\n    } else if (spellId === SPELLS.SHIELD_SLAM.id) {\r\n      this.lastPotentialTriggerForShieldSlam = null;\r\n    }\r\n  }\r\n\r\n  beginCooldown(spellId: number, cooldownTriggerEvent: AnyEvent) {\r\n    if (spellId === SPELLS.SHIELD_SLAM.id) {\r\n      if (this.isOnCooldown(spellId)) {\r\n        this.endCooldown(spellId, undefined, this.lastPotentialTriggerForShieldSlam ? this.lastPotentialTriggerForShieldSlam.timestamp : undefined);\r\n      }\r\n    }\r\n\r\n    super.beginCooldown(spellId, cooldownTriggerEvent);\r\n  }\r\n}\r\n\r\nexport default SpellUsable;\r\n","import CoreMitigationCheck from 'parser/shared/modules/MitigationCheck';\r\nimport SPELLS from 'common/SPELLS';\r\nimport { Options } from 'parser/core/Analyzer';\r\n\r\nclass MitigationCheck extends CoreMitigationCheck {\r\n  constructor(options: Options) {\r\n    super(options);\r\n    this.buffCheckPhysical = [SPELLS.SHIELD_BLOCK_BUFF.id];\r\n    this.buffCheckMagical = [SPELLS.SPELL_REFLECTION.id];\r\n    this.buffCheckPhysAndMag = [SPELLS.IGNORE_PAIN.id, SPELLS.LAST_STAND.id, SPELLS.SHIELD_WALL.id];\r\n\r\n    this.debuffCheckPhysAndMag = [SPELLS.DEMORALIZING_SHOUT.id];\r\n  }\r\n}\r\n\r\nexport default MitigationCheck;\r\n","import SPELLS from 'common/SPELLS';\r\nimport CoreBuffs from 'parser/core/modules/Buffs';\r\nimport BLOODLUST_BUFFS from 'game/BLOODLUST_BUFFS';\r\n\r\nclass Buffs extends CoreBuffs {//TODO: Get shrike to fill this out since I'm lazy\r\n  buffs() {\r\n    //const combatant = this.selectedCombatant;\r\n\r\n    // This should include ALL buffs that can be applied by your spec.\r\n    // This data can be used by various kinds of modules to improve their results, and modules added in the future may rely on buffs that aren't used today.\r\n    return [\r\n      {\r\n        spellId: Object.keys(BLOODLUST_BUFFS).map(item => Number(item)),\r\n        timelineHighlight: true,\r\n      },\r\n      {\r\n        spellId: SPELLS.AVATAR_TALENT.id,\r\n        timelineHighlight: true,\r\n      },\r\n      {\r\n        spellId: SPELLS.LAST_STAND.id,\r\n        timelineHighlight: true,\r\n      },\r\n      {\r\n        spellId: SPELLS.SHIELD_BLOCK_BUFF.id,\r\n        timelineHighlight: true,\r\n      },\r\n      {\r\n        spellId: SPELLS.SHIELD_WALL.id,\r\n        timelineHighlight: true,\r\n      },\r\n      {\r\n        spellId: SPELLS.SPELL_REFLECTION.id,\r\n        timelineHighlight: true,\r\n      },\r\n    ];\r\n  }\r\n}\r\n\r\nexport default Buffs;\r\n","import SPELLS from 'common/SPELLS';\r\n\r\nimport CoreCooldownThroughputTracker, { BUILT_IN_SUMMARY_TYPES } from 'parser/shared/modules/CooldownThroughputTracker';\r\n\r\nclass CooldownThroughputTracker extends CoreCooldownThroughputTracker {\r\n  static cooldownSpells = [\r\n    ...CoreCooldownThroughputTracker.cooldownSpells,\r\n    {\r\n      spell: SPELLS.AVATAR_TALENT,\r\n      summary: [\r\n        BUILT_IN_SUMMARY_TYPES.DAMAGE,\r\n      ],\r\n    },\r\n  ];\r\n}\r\n\r\nexport default CooldownThroughputTracker;\r\n","import React from 'react';\r\nimport SpellLink from 'common/SpellLink';\r\nimport Analyzer, { SELECTED_PLAYER } from 'parser/core/Analyzer';\r\nimport SPELLS from 'common/SPELLS';\r\nimport Statistic from 'interface/statistics/Statistic';\r\nimport BoringSpellValueText from 'interface/statistics/components/BoringSpellValueText/index';\r\nimport { ThresholdStyle } from 'parser/core/ParseResults';\r\nimport { i18n } from '@lingui/core';\r\nimport { t } from '@lingui/macro';\r\nimport Events from 'parser/core/Events';\r\n\r\nconst debug = false;\r\n\r\nclass ShieldBlock extends Analyzer {\r\n\r\n  get suggestionThresholds() {\r\n    return {\r\n      actual: this.goodCast / (this.goodCast + this.badCast),\r\n      isLessThan: {\r\n        minor: .90,\r\n        average: .80,\r\n        major: .70,\r\n      },\r\n      style: ThresholdStyle.PERCENTAGE,\r\n    };\r\n  }\r\n\r\n  shieldBlocksOffensive;\r\n  shieldBlocksDefensive;\r\n  shieldBlocksOverall;\r\n  goodCast = 0;\r\n  badCast = 0;\r\n  bolster = this.selectedCombatant.hasTalent(SPELLS.BOLSTER_TALENT.id);\r\n  ssNeeded = !this.selectedCombatant.hasTalent(SPELLS.DEVASTATOR_TALENT.id) ? 0 : 1;\r\n\r\n  constructor(...args) {\r\n    super(...args);\r\n    this.shieldBlocksOffensive = [];\r\n    this.shieldBlocksDefensive = [];\r\n    this.shieldBlocksOverall = [];\r\n    this.addEventListener(Events.cast.by(SELECTED_PLAYER).spell(SPELLS.SHIELD_BLOCK), this.onCast);\r\n    this.addEventListener(Events.damage.by(SELECTED_PLAYER), this.onDamage);\r\n    this.addEventListener(Events.damage.to(SELECTED_PLAYER), this.onDamageTaken);\r\n    this.addEventListener(Events.fightend, this.onFightend);\r\n  }\r\n\r\n  onCast(event) {\r\n    if (this.shieldBlocksDefensive.length > 0) {\r\n      this.checkLastBlock();\r\n    }\r\n\r\n    this.shieldBlockCast(event);\r\n  }\r\n\r\n  onDamage(event) {\r\n    const spellId = event.ability.guid;\r\n\r\n    if (!this.selectedCombatant.hasBuff(SPELLS.SHIELD_BLOCK_BUFF.id)) {\r\n      return;\r\n    }\r\n\r\n    if (this.shieldBlocksOffensive.length === 0) {\r\n      this.shieldBlockCast(event);//kind of broken but precast shield blocks can't be detected as warcraftlogs doesn't have that data\r\n    }\r\n\r\n    if (spellId === SPELLS.SHIELD_SLAM.id) {\r\n      this.shieldSlamCast(event);\r\n    }\r\n  }\r\n\r\n  onDamageTaken(event) {\r\n\r\n    if (!this.selectedCombatant.hasBuff(SPELLS.SHIELD_BLOCK_BUFF.id)) {\r\n      return;\r\n    }\r\n\r\n    if (this.selectedCombatant.hasBuff(SPELLS.LAST_STAND.id) && this.bolster) {\r\n      return;\r\n    }\r\n\r\n    if (this.shieldBlocksDefensive.length === 0) {\r\n      this.shieldBlockCast(event);//kind of broken but precast shield blocks can't be detected as warcraftlogs doesn't have that data\r\n    }\r\n\r\n    if (event.blocked > 0) {\r\n      this.shieldBlocksDefensive[this.shieldBlocksDefensive.length - 1].blockAbleEvents += 1;\r\n      this.shieldBlocksDefensive[this.shieldBlocksDefensive.length - 1].eventName.add(event.ability.name);\r\n      this.shieldBlocksDefensive[this.shieldBlocksDefensive.length - 1].eventSpellId.add(event.ability.guid);\r\n    }\r\n\r\n    this.shieldBlocksDefensive[this.shieldBlocksDefensive.length - 1].blockedDamage += event.blocked || 0;\r\n    this.shieldBlocksDefensive[this.shieldBlocksDefensive.length - 1].damageTaken += event.amount + event.absorbed || 0;\r\n\r\n    if (this.shieldBlocksDefensive[this.shieldBlocksDefensive.length - 1].blockAbleEvents > 1) {\r\n      this.shieldBlocksDefensive[this.shieldBlocksDefensive.length - 1].good = true;\r\n    }\r\n\r\n  }\r\n\r\n  shieldBlockCast(event) {\r\n\r\n    const offensive = {\r\n      shieldBlock: this.shieldBlocksOffensive.length + 1,\r\n      shieldSlamCasts: 0,\r\n      bonusDamage: 0,\r\n      timeStamp: event.timestamp,\r\n      good: false,\r\n      event: event,\r\n    };\r\n\r\n    this.shieldBlocksOffensive.push(offensive);\r\n\r\n    const defensive = {\r\n      shieldBlock: this.shieldBlocksDefensive.length + 1,\r\n      blockAbleEvents: 0,\r\n      blockedDamage: 0,\r\n      damageTaken: 0,\r\n      eventName: new Set(),//human readable\r\n      eventSpellId: new Set(),//data safe\r\n      good: false,\r\n    };\r\n\r\n    this.shieldBlocksDefensive.push(defensive);\r\n\r\n  }\r\n\r\n  shieldSlamCast(event) {\r\n    this.shieldBlocksOffensive[this.shieldBlocksOffensive.length - 1].shieldSlamCasts += 1;\r\n\r\n    if (this.shieldBlocksOffensive[this.shieldBlocksOffensive.length - 1].shieldSlamCasts > this.ssNeeded) {\r\n      this.shieldBlocksOffensive[this.shieldBlocksOffensive.length - 1].good = true;\r\n    }\r\n\r\n    const beforeDamage = this.shieldBlocksOffensive[this.shieldBlocksOffensive.length - 1].bonusDamage || 0;\r\n    const eventDamage = ((event.amount || 0) + (event.absorbed || 0));\r\n    const bonusDamage = Math.round(eventDamage - eventDamage / 1.3);\r\n\r\n    this.shieldBlocksOffensive[this.shieldBlocksOffensive.length - 1].bonusDamage = beforeDamage + bonusDamage;\r\n\r\n  }\r\n\r\n  checkLastBlock() {\r\n\r\n    const overall = {\r\n      shieldBlock: this.shieldBlocksOffensive[this.shieldBlocksOffensive.length - 1].shieldBlock,\r\n      good: (this.shieldBlocksOffensive[this.shieldBlocksOffensive.length - 1].good || this.shieldBlocksDefensive[this.shieldBlocksDefensive.length - 1].good),\r\n    };\r\n\r\n    if (overall.good) {\r\n      this.goodCast += 1;\r\n    } else {\r\n      this.badCast += 1;\r\n      const event = this.shieldBlocksOffensive[this.shieldBlocksOffensive.length - 1].event;\r\n      event.meta = event.meta || {};\r\n      event.meta.isInefficientCast = true;\r\n      event.meta.inefficientCastReason = `This Shield Block didn't block enough damage nor did you cast enough Shield Slams.`;\r\n      this.shieldBlocksOffensive[this.shieldBlocksOffensive.length - 1].event = event;\r\n    }\r\n\r\n    this.shieldBlocksOverall.push(overall);\r\n\r\n  }\r\n\r\n  onFightend() {\r\n    if (this.shieldBlocksDefensive.length > 0) {\r\n      this.checkLastBlock();\r\n    }\r\n\r\n    if (debug) {\r\n      console.log(this.shieldBlocksOffensive);\r\n      console.log(`Do they have bolster? ${this.bolster}`);\r\n      console.log(this.shieldBlocksDefensive);\r\n      console.log(this.shieldBlocksOverall);\r\n    }\r\n  }\r\n\r\n  suggestions(when) {\r\n    when(this.suggestionThresholds).addSuggestion((suggest, actual, recommended) => suggest(\r\n      <> You had uneventful <SpellLink id={SPELLS.SHIELD_BLOCK.id} /> cast(s) where there was either no blockable damage events or you didn't cast shield slam enough. </>,\r\n    )\r\n      .icon(SPELLS.SHIELD_BLOCK.icon)\r\n      .actual(i18n._(t('warrior.protection.suggestions.shieldBlock.goodCasts')`${this.goodCast} good casts of shield block`))\r\n      .recommended(`${Math.floor(recommended * (this.goodCast + this.badCast))} is recommended`));\r\n  }\r\n\r\n  statistic() {\r\n    let goodCasts = 0;\r\n    let offensiveCasts = 0;\r\n    let defensiveCasts = 0;\r\n    const totalCasts = this.shieldBlocksOverall.length;\r\n    for (let i = 0; i < this.shieldBlocksOverall.length; i += 1) {\r\n      goodCasts += this.shieldBlocksOverall[i].good ? 1 : 0;\r\n      offensiveCasts += this.shieldBlocksOffensive[i].good ? 1 : 0;\r\n      defensiveCasts += this.shieldBlocksDefensive[i].good ? 1 : 0;\r\n    }\r\n\r\n    return (\r\n      <Statistic\r\n        size=\"flexible\"\r\n        tooltip={(\r\n          <>\r\n            Overall bad casts: {totalCasts - goodCasts}<br />\r\n            Good offensive casts: {offensiveCasts}<br />\r\n            Good offensive casts where you cast <SpellLink id={SPELLS.SHIELD_SLAM.id} /> during the <SpellLink id={SPELLS.SHIELD_BLOCK.id} /> buff to take advantage of increased <SpellLink id={SPELLS.SHIELD_SLAM.id} /> damage.\r\n            <br /><br />\r\n            Good defensive casts: {defensiveCasts}<br />\r\n            Good defensive casts where you blocked several hits.\r\n            <br /><br />\r\n            Some casts may be good both offensively and defensively.\r\n            <br /><br />\r\n            Try to maximize the efficiency of your <SpellLink id={SPELLS.SHIELD_BLOCK.id} /> casts by ensuring that you take advantage of the offensive or defensive effects each time.\r\n          </>\r\n        )}\r\n      >\r\n        <BoringSpellValueText spell={SPELLS.SHIELD_BLOCK}>\r\n          Bad Defensive Casts: {totalCasts - defensiveCasts}<br />\r\n        </BoringSpellValueText>\r\n      </Statistic>\r\n    );\r\n  }\r\n}\r\n\r\nexport default ShieldBlock;\r\n","import React from 'react';\r\nimport { formatPercentage, formatThousands } from 'common/format';\r\nimport SpellIcon from 'common/SpellIcon';\r\nimport SpellLink from 'common/SpellLink';\r\nimport StatisticBox, { STATISTIC_ORDER } from 'interface/others/StatisticBox';\r\nimport Analyzer, { SELECTED_PLAYER } from 'parser/core/Analyzer';\r\nimport { ThresholdStyle } from 'parser/core/ParseResults';\r\nimport SPELLS from 'common/SPELLS';\r\nimport { i18n } from '@lingui/core';\r\nimport { t } from '@lingui/macro';\r\n\r\nimport Events from 'parser/core/Events';\r\n\r\nimport ShieldBlock from '../spells/ShieldBlock';\r\n\r\nconst debug = false;\r\n\r\n//Moved from another file as it was easier to keep track of with this name\r\nclass BlockCheck extends Analyzer {\r\n  get suggestionThresholds() {//was in here before but is/was never used and appears to be very high requirements that are unreasonable maybe lower and add laster?\r\n    return {\r\n      actual: this.rawDamageWithBlock / (this.rawDamageWithBlock + this.rawDamageWithoutBlock),\r\n      isLessThan: this.thresholdsToUse,\r\n      style: ThresholdStyle.PERCENTAGE,\r\n    };\r\n  }\r\n\r\n  static dependencies = {\r\n    shieldBlock: ShieldBlock,\r\n  };\r\n  physicalHitsWithBlock = 0;\r\n  physicalHitsWithoutBlock = 0;\r\n  rawDamageWithBlock = 0;\r\n  rawDamageWithoutBlock = 0;\r\n  listOfEvents;\r\n  bolster = this.selectedCombatant.hasTalent(SPELLS.BOLSTER_TALENT.id);\r\n\r\n  //key to make variable names shorter\r\n  //HR = heavyRepercussions\r\n  heavyRepercussions = this.selectedCombatant.hasTalent(SPELLS.HEAVY_REPERCUSSIONS_TALENT.id);\r\n  //Bl = bolster\r\n  noHRorBlThresholds = {//no HR and no BL\r\n    minor: 0.4,\r\n    average: 0.35,\r\n    major: 0.3,\r\n  };\r\n  blnoHRThresholds = {//has BL doesn't have HR\r\n    minor: 0.85,\r\n    average: 0.75,\r\n    major: 0.7,\r\n  };\r\n  blHRThresholds = {//has BL and HR\r\n    minor: 0.95,\r\n    average: 0.9,\r\n    major: 0.8,\r\n  };\r\n  thresholdsToUse;\r\n  statisticOrder = STATISTIC_ORDER.CORE(10);\r\n\r\n  constructor(...args) {\r\n    super(...args);\r\n    this.listOfEvents = [];\r\n    if (this.bolster && this.heavyRepercussions) {\r\n      this.thresholdsToUse = this.blHRThresholds;\r\n    } else if (this.bolster && !this.heavyRepercussions) {\r\n      this.thresholdsToUse = this.blnoHRThresholds;\r\n    } else {\r\n      this.thresholdsToUse = this.noHRorBlThresholds;\r\n    }\r\n    this.addEventListener(Events.damage.to(SELECTED_PLAYER), this.onDamageTaken);\r\n    this.addEventListener(Events.fightend.to(SELECTED_PLAYER), this.onFightend);\r\n  }\r\n\r\n  onDamageTaken(event) {\r\n    // Physical\r\n    if (event.ability.type === 1) {\r\n      event.prot = {\r\n        shieldBlock: this.selectedCombatant.hasBuff(SPELLS.SHIELD_BLOCK_BUFF.id),//ability to look what important buffs they had retro actively\r\n        bloster: (this.bolster && this.selectedCombatant.hasBuff(SPELLS.LAST_STAND.id)),\r\n      };\r\n      this.listOfEvents.push(event);\r\n    }\r\n  }\r\n\r\n  onFightend() {\r\n    const blockableSet = new Set();//this is master list of all BLOCKED events in the fight\r\n    blockableSet.add(1);//make it so if they never hit sb we still get data from the melees they take\r\n    this.shieldBlock.shieldBlocksDefensive.forEach(function(block) {\r\n      block.eventSpellId.forEach(function(blockedAbility) {\r\n        blockableSet.add(blockedAbility);//just go through one set to another\r\n      });\r\n    });\r\n\r\n    this.listOfEvents.forEach((event) => {\r\n      if (blockableSet.has(event.ability.guid)) {//if it ain't been blocked over the whole fight it prob aint blockable\r\n        if (event.prot.shieldBlock || event.prot.bloster) {//they got block up when it happened?\r\n          this.physicalHitsWithBlock += 1;\r\n          this.rawDamageWithBlock += (event.unmitigatedAmount || 0);\r\n        } else {\r\n          this.physicalHitsWithoutBlock += 1;\r\n          this.rawDamageWithoutBlock += (event.unmitigatedAmount || 0);\r\n        }\r\n      }\r\n    });\r\n\r\n    if (debug) {\r\n      console.log(`Hits with block spell up ${this.physicalHitsWithBlock}`);\r\n      console.log(`Hits without block spell up ${this.physicalHitsWithoutBlock}`);\r\n    }\r\n  }\r\n\r\n  suggestions(when) {\r\n    when(this.suggestionThresholds)\r\n      .addSuggestion((suggest, actual, recommended) => suggest(<>You only had <SpellLink id={SPELLS.SHIELD_BLOCK_BUFF.id} /> or <SpellLink id={SPELLS.LAST_STAND.id} /> for {formatPercentage(actual)}% of physical damage taken. You should have one of the two up to mitigate as much physical damage as possible.</>)\r\n        .icon(SPELLS.SHIELD_BLOCK_BUFF.icon)\r\n        .actual(i18n._(t('warrior.protection.suggestions.block.damageMitigated')`${formatPercentage(actual)}% was mitigated by a block spell`))\r\n        .recommended(`${Math.round(formatPercentage(recommended))}% or more is recommended but this may vary between fights`));\r\n  }\r\n\r\n  statistic() {\r\n    const physicalHitsMitigatedPercent = this.physicalHitsWithBlock / (this.physicalHitsWithBlock + this.physicalHitsWithoutBlock);\r\n    const physicalDamageMitigatedPercent = this.rawDamageWithBlock / (this.rawDamageWithBlock + this.rawDamageWithoutBlock);\r\n\r\n    return (\r\n      <StatisticBox\r\n        icon={<SpellIcon id={SPELLS.SHIELD_BLOCK_BUFF.id} />}\r\n        value={`${formatPercentage(physicalHitsMitigatedPercent)}%`}\r\n        label=\"Physical Hits Mitigated\"\r\n        tooltip={(\r\n          <>\r\n            Shield Block usage breakdown:\r\n            <ul>\r\n              <li>You were hit <strong>{this.physicalHitsWithBlock}</strong> times with block up (<strong>{formatThousands(this.rawDamageWithBlock)}</strong> damage).</li>\r\n              <li>You were hit <strong>{this.physicalHitsWithoutBlock}</strong> times <strong><em>without</em></strong> block up (<strong>{formatThousands(this.rawDamageWithoutBlock)}</strong> damage).</li>\r\n            </ul>\r\n            <strong>{formatPercentage(physicalHitsMitigatedPercent)}%</strong> of physical attacks were mitigated with Block (<strong>{formatPercentage(physicalDamageMitigatedPercent)}%</strong> of physical damage taken).\r\n          </>\r\n        )}\r\n      />\r\n    );\r\n  }\r\n}\r\n\r\nexport default BlockCheck;\r\n","import React from 'react';\r\n\r\nimport SPELLS from 'common/SPELLS';\r\nimport SpellLink from 'common/SpellLink';\r\nimport ResourceLink from 'common/ResourceLink';\r\nimport RESOURCE_TYPES from 'game/RESOURCE_TYPES';\r\nimport Checklist from 'parser/shared/modules/features/Checklist';\r\nimport Rule from 'parser/shared/modules/features/Checklist/Rule';\r\nimport Requirement, { RequirementThresholds } from 'parser/shared/modules/features/Checklist/Requirement';\r\nimport PreparationRule from 'parser/shared/modules/features/Checklist/PreparationRule';\r\nimport GenericCastEfficiencyRequirement from 'parser/shared/modules/features/Checklist/GenericCastEfficiencyRequirement';\r\nimport Combatant from 'parser/core/Combatant';\r\nimport CastEfficiency from 'parser/shared/modules/CastEfficiency';\r\n\r\ntype Props = {\r\n  castEfficiency: CastEfficiency,\r\n  combatant: Combatant,\r\n  thresholds: { [name: string]: RequirementThresholds },\r\n};\r\n\r\nconst ProtectionWarriorChecklist = ({ combatant, castEfficiency, thresholds }: Props) => {\r\n  const AbilityRequirement = (props: { spell: number }) => (\r\n    <GenericCastEfficiencyRequirement\r\n      castEfficiency={castEfficiency.getCastEfficiencyForSpellId(props.spell)}\r\n      {...props}\r\n    />\r\n  );\r\n\r\n  return (\r\n    <Checklist>\r\n      <Rule\r\n        name=\"Rotational Spells\"\r\n        description={(\r\n          <>\r\n            Be sure to use <SpellLink id={SPELLS.SHIELD_SLAM.id} /> and <SpellLink id={SPELLS.THUNDER_CLAP.id} /> on cooldown to maximise your <ResourceLink id={RESOURCE_TYPES.RAGE.id} /> generation and damage output.<br /> <SpellLink id={SPELLS.REVENGE.id} /> can be used to avoid rage capping and <SpellLink id={SPELLS.DEVASTATE.id} /> should only be used when every other spell mentioned here is on cooldown.\r\n          </>\r\n        )}\r\n      >\r\n        <AbilityRequirement spell={SPELLS.THUNDER_CLAP.id} />\r\n        <Requirement\r\n          name={(<SpellLink id={SPELLS.SHIELD_SLAM.id} />)}\r\n          thresholds={thresholds.shieldSlam}\r\n        />\r\n        <AbilityRequirement spell={SPELLS.SHIELD_BLOCK.id} />\r\n        <Requirement\r\n          name={(<>Effective <SpellLink id={SPELLS.SHIELD_BLOCK.id} /> Casts </>)}\r\n          thresholds={thresholds.shieldBlock}\r\n        />\r\n        {combatant.hasTalent(SPELLS.BOOMING_VOICE_TALENT.id) && (<AbilityRequirement spell={SPELLS.DEMORALIZING_SHOUT.id} />)}\r\n        {combatant.hasTalent(SPELLS.DRAGON_ROAR_TALENT.id) && <AbilityRequirement spell={SPELLS.DRAGON_ROAR_TALENT.id} />}\r\n\r\n      </Rule>\r\n\r\n      <Rule\r\n        name=\"Defensive Cooldowns\"\r\n        description={(\r\n          <>\r\n            Protection warriors have a multitude of defensive spells on a fairly short cooldown. Be sure to use these to further mitigate incoming damage.\r\n          </>\r\n        )}\r\n      >\r\n        <AbilityRequirement spell={SPELLS.SHIELD_WALL.id} />\r\n        <AbilityRequirement spell={SPELLS.LAST_STAND.id} />\r\n        <Requirement\r\n          name={(<>Magic damage with <SpellLink id={SPELLS.SPELL_REFLECTION.id} /></>)}\r\n          thresholds={thresholds.spellReflect}\r\n        />\r\n        {!combatant.hasTalent(SPELLS.BOOMING_VOICE_TALENT.id) && (\r\n          <AbilityRequirement spell={SPELLS.DEMORALIZING_SHOUT.id} />\r\n        )}\r\n      </Rule>\r\n\r\n      <Rule\r\n        name=\"Offensive Cooldowns\"\r\n        description={(\r\n          <>\r\n            Using <SpellLink id={SPELLS.AVATAR_TALENT.id} /> as often as possible is very important because it will increase your overall damage a lot and provides 20 <ResourceLink id={RESOURCE_TYPES.RAGE.id} />.<br /> If you are also using <SpellLink id={SPELLS.UNSTOPPABLE_FORCE_TALENT.id} /> remember that <SpellLink id={SPELLS.THUNDER_CLAP.id} /> will have a reduced cooldown so you can use it every other GCD.\r\n\r\n          </>\r\n        )}\r\n      >\r\n        <AbilityRequirement spell={SPELLS.AVATAR_TALENT.id} />\r\n        <AbilityRequirement spell={SPELLS.DEMORALIZING_SHOUT.id} />\r\n        {combatant.hasTalent(SPELLS.RAVAGER_TALENT_PROTECTION.id) && <AbilityRequirement spell={SPELLS.RAVAGER_TALENT_PROTECTION.id} />}\r\n\r\n      </Rule>\r\n\r\n      <Rule\r\n        name=\"Don't get too angry\"\r\n        description={(\r\n          <>\r\n            Minimizing your wasted <ResourceLink id={RESOURCE_TYPES.RAGE.id} /> should be top priority as a protection warrior so be sure to use <SpellLink id={SPELLS.IGNORE_PAIN.id} /> and <SpellLink id={SPELLS.REVENGE.id} /> to avoid this.\r\n          </>\r\n        )}\r\n      >\r\n        <Requirement name=\"Lost Rage\" thresholds={thresholds.rageDetails} />\r\n      </Rule>\r\n\r\n      <Rule\r\n        name=\"Utility\"\r\n        description={(\r\n          <>\r\n            Warriors main raid utility comes from <SpellLink id={SPELLS.RALLYING_CRY.id} /> - it should be used on high damage spikes to help people survive.\r\n          </>\r\n        )}\r\n      >\r\n        <AbilityRequirement spell={SPELLS.RALLYING_CRY.id} />\r\n        <AbilityRequirement spell={SPELLS.INTERCEPT.id} />\r\n      </Rule>\r\n\r\n      <PreparationRule thresholds={thresholds} />\r\n    </Checklist>\r\n  );\r\n};\r\n\r\nexport default ProtectionWarriorChecklist;\r\n","import RESOURCE_TYPES from 'game/RESOURCE_TYPES';\r\nimport ResourceTracker from 'parser/shared/modules/resources/resourcetracker/ResourceTracker';\r\nimport SPELLS from 'common/SPELLS';\r\nimport HIT_TYPES from 'game/HIT_TYPES';\r\nimport Events, { DamageEvent } from 'parser/core/Events';\r\nimport { Options, SELECTED_PLAYER } from 'parser/core/Analyzer';\r\n\r\nconst RAGE_GEN_FROM_MELEE_HIT_ICD = 1000; //ms\r\nconst RAGE_PER_MELEE_HIT_TAKEN = 3;\r\n\r\nclass RageTracker extends ResourceTracker {\r\n  lastMeleeTaken = 0;\r\n\r\n  maxResource = 100;\r\n\r\n  ragePerMeleeHit: number = 2;\r\n\r\n  constructor(options: Options) {\r\n    super(options);\r\n    this.resource = RESOURCE_TYPES.RAGE;\r\n    if (this.selectedCombatant.hasTalent(SPELLS.WAR_MACHINE_PROTECTION_TALENT.id)) {\r\n      this.ragePerMeleeHit += 1;\r\n    }\r\n    this.addEventListener(Events.damage.by(SELECTED_PLAYER).spell(SPELLS.MELEE), this.onDamage);\r\n    this.addEventListener(Events.damage.to(SELECTED_PLAYER).spell(SPELLS.MELEE), this.onDamageTaken);\r\n  }\r\n\r\n  onDamage(event: DamageEvent) {\r\n    this.processInvisibleEnergize(SPELLS.RAGE_AUTO_ATTACKS.id, this.ragePerMeleeHit);\r\n  }\r\n\r\n  onDamageTaken(event: DamageEvent) {\r\n    if (event.hitType === HIT_TYPES.DODGE || event.hitType === HIT_TYPES.PARRY) {\r\n      return;\r\n    }\r\n\r\n    if (event.timestamp - this.lastMeleeTaken >= RAGE_GEN_FROM_MELEE_HIT_ICD) {\r\n      this.processInvisibleEnergize(SPELLS.RAGE_DAMAGE_TAKEN.id, RAGE_PER_MELEE_HIT_TAKEN);\r\n      this.lastMeleeTaken = event.timestamp;\r\n    }\r\n  }\r\n}\r\n\r\nexport default RageTracker;\r\n","import React from 'react';\r\n\r\nimport Analyzer from 'parser/core/Analyzer';\r\nimport { ThresholdStyle, When } from 'parser/core/ParseResults';\r\nimport Panel from 'interface/others/Panel';\r\nimport StatisticBox, { STATISTIC_ORDER } from 'interface/others/StatisticBox';\r\nimport { formatPercentage } from 'common/format';\r\nimport Icon from 'common/Icon';\r\nimport ResourceBreakdown from 'parser/shared/modules/resources/resourcetracker/ResourceBreakdown';\r\nimport { i18n } from '@lingui/core';\r\nimport { t } from '@lingui/macro';\r\n\r\nimport RageTracker from './RageTracker';\r\n\r\nclass RageDetails extends Analyzer {\r\n  static dependencies = {\r\n    rageTracker: RageTracker,\r\n  };\r\n  statisticOrder = STATISTIC_ORDER.CORE(3);\r\n  protected rageTracker!: RageTracker;\r\n\r\n  get wastedPercent() {\r\n    return this.rageTracker.wasted / (this.rageTracker.wasted + this.rageTracker.generated) || 0;\r\n  }\r\n\r\n  get efficiencySuggestionThresholds() {\r\n    return {\r\n      actual: 1 - this.wastedPercent,\r\n      isLessThan: {\r\n        minor: 0.95,\r\n        average: 0.90,\r\n        major: .85,\r\n      },\r\n      style: ThresholdStyle.PERCENTAGE,\r\n    };\r\n  }\r\n\r\n  get suggestionThresholds() {\r\n    return {\r\n      actual: this.wastedPercent,\r\n      isGreaterThan: {\r\n        minor: 0.05,\r\n        average: 0.1,\r\n        major: .15,\r\n      },\r\n      style: ThresholdStyle.PERCENTAGE,\r\n    };\r\n  }\r\n\r\n  suggestions(when: When) {\r\n    when(this.suggestionThresholds).addSuggestion((suggest, actual, recommended) => suggest(`You wasted ${formatPercentage(this.wastedPercent)}% of your Rage.`)\r\n      .icon('spell_nature_reincarnation')\r\n      .actual(i18n._(t('warrior.protection.suggestions.rage.wasted')`${formatPercentage(actual)}% wasted`))\r\n      .recommended(`<${formatPercentage(recommended)}% is recommended`));\r\n  }\r\n\r\n  statistic() {\r\n    return (\r\n      <StatisticBox\r\n        icon={<Icon icon=\"spell_nature_reincarnation\" />}\r\n        value={`${formatPercentage(this.wastedPercent)} %`}\r\n        label=\"Rage wasted\"\r\n        tooltip={`${this.rageTracker.wasted} out of ${this.rageTracker.wasted + this.rageTracker.generated} Rage wasted.`}\r\n      />\r\n    );\r\n  }\r\n\r\n  tab() {\r\n    return {\r\n      title: 'Rage usage',\r\n      url: 'rage-usage',\r\n      render: () => (\r\n        <Panel>\r\n          <ResourceBreakdown\r\n            tracker={this.rageTracker}\r\n            showSpenders\r\n          />\r\n        </Panel>\r\n      ),\r\n    };\r\n  }\r\n\r\n}\r\n\r\nexport default RageDetails;\r\n","import React from 'react';\r\n\r\nimport Analyzer, { Options, SELECTED_PLAYER } from 'parser/core/Analyzer';\r\nimport { ThresholdStyle, When } from 'parser/core/ParseResults';\r\nimport SPELLS from 'common/SPELLS';\r\nimport SpellLink from 'common/SpellLink';\r\nimport ResourceLink from 'common/ResourceLink';\r\nimport RESOURCE_TYPES from 'game/RESOURCE_TYPES';\r\nimport StatTracker from 'parser/shared/modules/StatTracker';\r\nimport AbilityTracker from 'parser/shared/modules/AbilityTracker';\r\nimport Events, { CastEvent } from 'parser/core/Events';\r\nimport { i18n } from '@lingui/core';\r\nimport { t } from '@lingui/macro';\r\n\r\nconst debug = false;\r\n\r\nclass ShieldBlock extends Analyzer {\r\n  static dependencies = {\r\n    statTracker: StatTracker,\r\n    abilityTracker: AbilityTracker,\r\n  };\r\n  timeOnCd = 0; //total time its not on cd\r\n  currentCd = 0;\r\n  lastCast = 0;\r\n  averageCd = 0;\r\n  actualCasts = 0;\r\n  totalCastsAssumed = 0;\r\n  protected statTracker!: StatTracker;\r\n  protected abilityTracker!: AbilityTracker;\r\n\r\n  constructor(options: Options) {\r\n    super(options);\r\n    this.lastCast = this.owner.fight.start_time / 1000;\r\n    this.addEventListener(Events.cast.by(SELECTED_PLAYER).spell(SPELLS.SHIELD_SLAM), this.onSlamCast);\r\n    this.addEventListener(Events.fightend, this.handleFightEnd);\r\n  }\r\n\r\n  get slamRatio() {\r\n    return this.actualCasts / this.totalCastsAssumed;\r\n  }\r\n\r\n  get suggestionThresholds() {\r\n    return {\r\n      actual: this.slamRatio,\r\n      isLessThan: {\r\n        minor: .90,\r\n        average: .80,\r\n        major: .70,\r\n      },\r\n      style: ThresholdStyle.PERCENTAGE,\r\n    };\r\n  }\r\n\r\n  onSlamCast(event: CastEvent) {\r\n    if (this.currentCd === 0) { //we then know this is the first cast\r\n      this.timeOnCd = event.timestamp / 1000 - this.owner.fight.start_time / 1000;\r\n    }\r\n\r\n    if ((event.timestamp / 1000 - this.lastCast) * 1.05 > this.currentCd) { //normal cast\r\n      this.timeOnCd += event.timestamp / 1000 - this.lastCast;\r\n    }\r\n\r\n    if (this.currentCd !== 0) {\r\n      this.averageCd += this.currentCd;\r\n    }\r\n\r\n    this.currentCd = 9 / (1 + this.statTracker.hastePercentage(this.statTracker.currentHasteRating));\r\n    this.lastCast = event.timestamp / 1000;\r\n\r\n    this.totalCastsAssumed += 1;\r\n  }\r\n\r\n  handleFightEnd() {\r\n    this.actualCasts = this.abilityTracker.getAbility(SPELLS.SHIELD_SLAM.id).casts;\r\n    if ((this.owner.fight.end_time / 1000 - this.lastCast) * 1.05 > this.currentCd) {\r\n      this.timeOnCd += this.owner.fight.end_time / 1000 - this.lastCast;\r\n    }\r\n    this.averageCd = this.averageCd / this.totalCastsAssumed;\r\n    this.totalCastsAssumed += (this.timeOnCd / this.averageCd);\r\n    //this.totalCastsAssumed = parseInt(this.totalCastsAssumed); [dambroda: not sure what this did?]\r\n    if (debug) {\r\n      console.log('assumed max shield slam casts: ' + this.totalCastsAssumed);\r\n      console.log('time on cd: ' + this.timeOnCd);\r\n      console.log('current cd: ' + this.currentCd);\r\n      console.log('last cast:' + this.lastCast);\r\n      console.log('averageCd: ' + this.averageCd);\r\n      console.log('actual casts ' + this.actualCasts);\r\n    }\r\n  }\r\n\r\n  suggestions(when: When) {\r\n    when(this.suggestionThresholds).addSuggestion((suggest, actual, recommended) => suggest(\r\n      <>\r\n        Try to cast <SpellLink id={SPELLS.SHIELD_SLAM.id} /> more often - it is your main <ResourceLink id={RESOURCE_TYPES.RAGE.id} /> generator and damage source.\r\n      </>,\r\n    )\r\n      .icon(SPELLS.SHIELD_SLAM.icon)\r\n      .actual(i18n._(t('warrior.protection.suggestions.shieldSlam.casts')`${this.actualCasts} shield slam casts`))\r\n      .recommended(`${(recommended * this.totalCastsAssumed).toFixed(0)} recommended out of ${this.totalCastsAssumed} maximum`));\r\n  }\r\n}\r\n\r\nexport default ShieldBlock;\r\n","import React from 'react';\r\n\r\nimport Analyzer, { Options, SELECTED_PLAYER } from 'parser/core/Analyzer';\r\nimport { ThresholdStyle, When } from 'parser/core/ParseResults';\r\nimport SPELLS from 'common/SPELLS';\r\nimport SpellLink from 'common/SpellLink';\r\nimport { formatPercentage } from 'common/format';\r\nimport StatTracker from 'parser/shared/modules/StatTracker';\r\nimport AbilityTracker from 'parser/shared/modules/AbilityTracker';\r\nimport SCHOOLS from 'game/MAGIC_SCHOOLS';\r\nimport Events, { DamageEvent } from 'parser/core/Events';\r\nimport { i18n } from '@lingui/core';\r\nimport { t } from '@lingui/macro';\r\n\r\nconst debug = false;\r\n\r\nclass SpellReflect extends Analyzer {\r\n  static dependencies = {\r\n    statTracker: StatTracker,\r\n    abilityTracker: AbilityTracker,\r\n  };\r\n  magicDamage = 0;\r\n  magicDamageReduced = 0;\r\n  totalDamage = 0;\r\n  protected statTracker!: StatTracker;\r\n  protected abilityTracker!: AbilityTracker;\r\n\r\n  constructor(options: Options) {\r\n    super(options);\r\n    this.addEventListener(Events.damage.to(SELECTED_PLAYER), this.onDamage);\r\n    debug && this.addEventListener(Events.fightend, this.fightEndDebug);\r\n  }\r\n\r\n  get suggestionThresholds() {\r\n    return {\r\n      actual: this.magicDamageReduced / this.magicDamage,\r\n      isLessThan: {\r\n        minor: .25,\r\n        average: .15,\r\n        major: .05,\r\n      },\r\n      style: ThresholdStyle.PERCENTAGE,\r\n    };\r\n  }\r\n\r\n  onDamage(event: DamageEvent) {\r\n    if (event.ability.type === SCHOOLS.ids.PHYSICAL) {\r\n      return;\r\n    }\r\n    this.magicDamage += event.unmitigatedAmount || 0;\r\n    if (this.selectedCombatant.hasBuff(SPELLS.SPELL_REFLECTION.id)) {\r\n      this.magicDamageReduced += event.unmitigatedAmount || 0;\r\n    }\r\n  }\r\n\r\n  fightEndDebug() {\r\n    console.log(`magic damage ${this.magicDamage}`);\r\n    console.log(`magic damage with mit ${this.magicDamageReduced}`);\r\n    console.log(`total damage ${this.totalDamage}`);\r\n  }\r\n\r\n  suggestions(when: When) {\r\n    when(this.suggestionThresholds).addSuggestion((suggest, actual, recommended) => suggest(\r\n      <>\r\n        Try to cast <SpellLink id={SPELLS.SPELL_REFLECTION.id} /> more often when magic damage is going out to take less damage.\r\n      </>,\r\n    )\r\n      .icon(SPELLS.SPELL_REFLECTION.icon)\r\n      .actual(i18n._(t('warrior.protection.suggestions.spellReflect.efficiency')`${formatPercentage(actual)} % magic damage With Spell Reflect Up`))\r\n      .recommended(`${formatPercentage(recommended)} % recommended`));\r\n  }\r\n}\r\n\r\nexport default SpellReflect;\r\n","import React from 'react';\r\n\r\nimport BaseChecklist from 'parser/shared/modules/features/Checklist/Module';\r\nimport CastEfficiency from 'parser/shared/modules/CastEfficiency';\r\nimport Combatants from 'parser/shared/modules/Combatants';\r\nimport ManaValues from 'parser/shared/modules/ManaValues';\r\nimport PreparationRuleAnalyzer from 'parser/shared/modules/features/Checklist/PreparationRuleAnalyzer';\r\n\r\nimport AlwaysBeCasting from '../AlwaysBeCasting';\r\nimport Component from './Component';\r\nimport RageDetails from '../../core/RageDetails';\r\nimport RageTracker from '../../core/RageTracker';\r\nimport ShieldSlam from '../../spells/ShieldSlam';\r\nimport ShieldBlock from '../../spells/ShieldBlock';\r\nimport BlockCheck from '../BlockCheck';\r\nimport SpellReflect from '../../spells/SpellReflect';\r\n\r\nclass Checklist extends BaseChecklist {\r\n  static dependencies = {\r\n    combatants: Combatants,\r\n    castEfficiency: CastEfficiency,\r\n    manaValues: ManaValues,\r\n    preparationRuleAnalyzer: PreparationRuleAnalyzer,\r\n    alwaysBeCasting: AlwaysBeCasting,\r\n    rageDetails: RageDetails,\r\n    rageTracker: RageTracker,\r\n    shieldSlam: ShieldSlam,\r\n    shieldBlock: ShieldBlock,\r\n    blockCheck: BlockCheck,\r\n    spellReflect: SpellReflect,\r\n  };\r\n  protected combatants!: Combatants;\r\n  protected castEfficiency!: CastEfficiency;\r\n  protected manaValues!: ManaValues;\r\n  protected preparationRuleAnalyzer!: PreparationRuleAnalyzer;\r\n  protected alwaysBeCasting!: AlwaysBeCasting;\r\n  protected rageDetails!: RageDetails;\r\n  protected rageTracker!: RageTracker;\r\n  protected shieldSlam!: ShieldSlam;\r\n  protected shieldBlock!: ShieldBlock;\r\n  protected blockCheck!: BlockCheck;\r\n  protected spellReflect!: SpellReflect;\r\n\r\n  render() {\r\n    return (\r\n      <Component\r\n        combatant={this.combatants.selected}\r\n        castEfficiency={this.castEfficiency}\r\n        thresholds={{\r\n          ...this.preparationRuleAnalyzer.thresholds,\r\n          downtimeSuggestionThresholds: this.alwaysBeCasting.downtimeSuggestionThresholds,\r\n          rageDetails: this.rageDetails.suggestionThresholds,\r\n          shieldSlam: this.shieldSlam.suggestionThresholds,\r\n          shieldBlock: this.shieldBlock.suggestionThresholds,\r\n          blockCheck: this.blockCheck.suggestionThresholds,\r\n          spellReflect: this.spellReflect.suggestionThresholds,\r\n        }}\r\n      />\r\n    );\r\n  }\r\n}\r\n\r\nexport default Checklist;\r\n","import Analyzer from 'parser/core/Analyzer';\r\nimport { ThresholdStyle } from 'parser/core/ParseResults';\r\nimport SPELLS from 'common/SPELLS';\r\n\r\nclass IgnorePain extends Analyzer {\r\n  get uptime(): number {\r\n    return this.selectedCombatant.getBuffUptime(SPELLS.IGNORE_PAIN.id) / this.owner.fightDuration;\r\n  }\r\n\r\n  get uptimeSuggestionThresholds() {\r\n    return {\r\n      actual: this.uptime,\r\n      isLessThan: {\r\n        minor: 0.95,\r\n        average: 0.9,\r\n        major: 0.8,\r\n      },\r\n      style: ThresholdStyle.PERCENTAGE,\r\n    };\r\n  }\r\n}\r\n\r\nexport default IgnorePain;\r\n","import React from 'react';\r\nimport Analyzer, { Options, SELECTED_PLAYER } from 'parser/core/Analyzer';\r\nimport SPELLS from 'common/SPELLS';\r\nimport SpellIcon from 'common/SpellIcon';\r\n\r\nimport StatisticBox, { STATISTIC_ORDER } from 'interface/others/StatisticBox';\r\nimport calculateEffectiveDamage from 'parser/core/calculateEffectiveDamage';\r\nimport { formatNumber, formatPercentage } from 'common/format';\r\nimport { DamageEvent, EventType } from 'parser/core/Events';\r\nimport EventFilter from 'parser/core/EventFilter';\r\n\r\nconst AVATAR_DAMAGE_INCREASE = 0.2;\r\n\r\nclass Avatar extends Analyzer {\r\n  bonusDmg = 0;\r\n  statisticOrder = STATISTIC_ORDER.CORE(5);\r\n\r\n  constructor(options: Options) {\r\n    super(options);\r\n    this.addEventListener(new EventFilter(EventType.Damage).by(SELECTED_PLAYER), this.handleDamage);\r\n  }\r\n\r\n  get uptime() {\r\n    return this.selectedCombatant.getBuffUptime(SPELLS.AVATAR_TALENT.id) / this.owner.fightDuration;\r\n  }\r\n\r\n  handleDamage(event: DamageEvent) {\r\n    if (!this.selectedCombatant.hasBuff(SPELLS.AVATAR_TALENT.id)) {\r\n      return;\r\n    }\r\n\r\n    this.bonusDmg += calculateEffectiveDamage(event, AVATAR_DAMAGE_INCREASE);\r\n  }\r\n\r\n  statistic() {\r\n    return (\r\n      <StatisticBox\r\n        icon={<SpellIcon id={SPELLS.AVATAR_TALENT.id} />}\r\n        value={`${formatNumber((this.bonusDmg / this.owner.fightDuration) * 1000)} DPS`}\r\n        label=\"Damage contributed\"\r\n        tooltip={\r\n          <>\r\n            Avatar contributed {formatNumber(this.bonusDmg)} total damage (\r\n            {formatPercentage(this.owner.getPercentageOfTotalDamageDone(this.bonusDmg))}%). <br />\r\n            Uptime was {formatPercentage(this.uptime)}%\r\n          </>\r\n        }\r\n      />\r\n    );\r\n  }\r\n}\r\n\r\nexport default Avatar;\r\n","import React from 'react';\r\nimport Analyzer, { Options, SELECTED_PLAYER } from 'parser/core/Analyzer';\r\nimport SPELLS from 'common/SPELLS';\r\nimport { formatDuration } from 'common/format';\r\nimport RESOURCE_TYPES from 'game/RESOURCE_TYPES';\r\nimport SpellUsable from 'parser/shared/modules/SpellUsable';\r\nimport Events, { CastEvent } from 'parser/core/Events';\r\n\r\nimport Statistic from 'interface/statistics/Statistic';\r\nimport BoringValueText from 'interface/statistics/components/BoringValueText';\r\nimport STATISTIC_CATEGORY from 'interface/others/STATISTIC_CATEGORY';\r\nimport STATISTIC_ORDER from 'interface/others/STATISTIC_ORDER';\r\nimport SpellLink from 'common/SpellLink';\r\n\r\nconst COOLDOWNS_AFFECTED_BY_ANGER_MANAGEMENT = [\r\n  SPELLS.AVATAR_TALENT.id,\r\n  SPELLS.SHIELD_WALL.id,\r\n];\r\nconst RAGE_NEEDED_FOR_A_PROC = 10;\r\nconst CDR_PER_PROC = 1000; // ms\r\n\r\nclass AngerManagement extends Analyzer {\r\n  static dependencies = {\r\n    spellUsable: SpellUsable,\r\n  };\r\n  totalRageSpend = 0;\r\n  wastedReduction: { [spellId: number]: number } = {};\r\n  effectiveReduction: { [spellId: number]: number } = {};\r\n  statisticOrder = STATISTIC_ORDER.CORE(4);\r\n  protected spellUsable!: SpellUsable;\r\n\r\n  constructor(options: Options) {\r\n    super(options);\r\n    this.active = this.selectedCombatant.hasTalent(SPELLS.ANGER_MANAGEMENT_TALENT.id);\r\n    this.addEventListener(Events.cast.by(SELECTED_PLAYER), this.onCast);\r\n    COOLDOWNS_AFFECTED_BY_ANGER_MANAGEMENT.forEach(e => {\r\n      this.wastedReduction[e] = 0;\r\n      this.effectiveReduction[e] = 0;\r\n    });\r\n  }\r\n\r\n  get tooltip() {\r\n    return (\r\n      <table className=\"table table-condensed\">\r\n        <thead>\r\n          <tr>\r\n            <th>Spell</th>\r\n            <th>Effective</th>\r\n            <th>Wasted</th>\r\n          </tr>\r\n        </thead>\r\n        <tbody>\r\n          {COOLDOWNS_AFFECTED_BY_ANGER_MANAGEMENT.map(value => (\r\n            <tr key={value}>\r\n              <td>{SPELLS[value].name}</td>\r\n              <td>{formatDuration(this.effectiveReduction[value] / 1000)}</td>\r\n              <td>{formatDuration(this.wastedReduction[value] / 1000)}</td>\r\n            </tr>\r\n          ))}\r\n        </tbody>\r\n      </table>\r\n    );\r\n  }\r\n\r\n  onCast(event: CastEvent) {\r\n    const classResources = event.classResources?.find(e => e.type === RESOURCE_TYPES.RAGE.id);\r\n    if (!classResources || !classResources.cost) {\r\n      return;\r\n    }\r\n    const rageSpend = classResources.cost / RAGE_NEEDED_FOR_A_PROC;\r\n    const reduction = rageSpend / RAGE_NEEDED_FOR_A_PROC * CDR_PER_PROC;\r\n    COOLDOWNS_AFFECTED_BY_ANGER_MANAGEMENT.forEach(e => {\r\n      if (!this.spellUsable.isOnCooldown(e)) {\r\n        this.wastedReduction[e] += reduction;\r\n      } else {\r\n        const effectiveReduction = this.spellUsable.reduceCooldown(e, reduction);\r\n        this.effectiveReduction[e] += effectiveReduction;\r\n        this.wastedReduction[e] += reduction - effectiveReduction;\r\n      }\r\n    });\r\n    this.totalRageSpend += rageSpend;\r\n  }\r\n\r\n  statistic() {\r\n    return (\r\n      <Statistic\r\n        position={STATISTIC_ORDER.OPTIONAL(13)}\r\n        size=\"flexible\"\r\n        category={STATISTIC_CATEGORY.TALENTS}\r\n        dropdown={this.tooltip}\r\n      >\r\n        <BoringValueText label={<><SpellLink id={SPELLS.ANGER_MANAGEMENT_TALENT.id} /> Possible cooldown reduction</>}>\r\n        </BoringValueText>\r\n      </Statistic>\r\n    );\r\n  }\r\n}\r\n\r\nexport default AngerManagement;\r\n","import React from 'react';\r\nimport Analyzer, { Options, SELECTED_PLAYER } from 'parser/core/Analyzer';\r\nimport { ThresholdStyle, When } from 'parser/core/ParseResults';\r\nimport SPELLS from 'common/SPELLS';\r\n\r\nimport Enemies from 'parser/shared/modules/Enemies';\r\nimport calculateEffectiveDamage from 'parser/core/calculateEffectiveDamage';\r\nimport { formatNumber } from 'common/format';\r\nimport Events, { CastEvent, DamageEvent, EnergizeEvent } from 'parser/core/Events';\r\n\r\nimport Statistic from 'interface/statistics/Statistic';\r\nimport BoringValueText from 'interface/statistics/components/BoringValueText';\r\nimport STATISTIC_CATEGORY from 'interface/others/STATISTIC_CATEGORY';\r\nimport STATISTIC_ORDER from 'interface/others/STATISTIC_ORDER';\r\nimport SpellLink from 'common/SpellLink';\r\n\r\nimport { i18n } from '@lingui/core';\r\nimport { t } from '@lingui/macro';\r\n\r\nconst BOOMING_VOICE_DAMAGE_INCREASE = 0.2;\r\nconst BOOMING_VOICE_RAGE_GENERATION = 40;\r\n\r\nclass BoomingVoice extends Analyzer {\r\n  static dependencies = {\r\n    enemies: Enemies,\r\n  };\r\n  rageGenerated = 0;\r\n  rageWasted = 0;\r\n  bonusDmg = 0;\r\n  maxRage = 100;\r\n  nextCastWasted = 0;\r\n  statisticOrder = STATISTIC_ORDER.CORE(5);\r\n  protected enemies!: Enemies;\r\n\r\n  constructor(options: Options) {\r\n    super(options);\r\n    this.active = this.selectedCombatant.hasTalent(SPELLS.BOOMING_VOICE_TALENT.id);\r\n    this.addEventListener(Events.cast.by(SELECTED_PLAYER).spell(SPELLS.DEMORALIZING_SHOUT), this.onShoutCast);\r\n    this.addEventListener(Events.energize.to(SELECTED_PLAYER).spell(SPELLS.DEMORALIZING_SHOUT), this.onShoutEnergize);\r\n    this.addEventListener(Events.damage.by(SELECTED_PLAYER), this.onDamage);\r\n  }\r\n\r\n  get uptimeSuggestionThresholds() {\r\n    return {\r\n      actual: this.rageWasted,\r\n      isGreaterThan: {\r\n        minor: 0,\r\n        average: 10,\r\n        major: 20,\r\n      },\r\n      style: ThresholdStyle.NUMBER,\r\n    };\r\n  }\r\n\r\n  onShoutCast(event: CastEvent) {\r\n    if (this.nextCastWasted === 0) {\r\n      return;\r\n    }\r\n\r\n    event.meta = event.meta || {};\r\n    event.meta.isInefficientCast = true;\r\n    event.meta.inefficientCastReason = `This cast wasted ${this.nextCastWasted} Rage.`;\r\n    this.nextCastWasted = 0;\r\n  }\r\n\r\n  onShoutEnergize(event: EnergizeEvent) {\r\n    this.rageGenerated += event.resourceChange;\r\n    const waste = event.waste || 0;\r\n    this.rageWasted += waste;\r\n    // on_energize event happens before the cast-event\r\n    this.nextCastWasted = waste;\r\n  }\r\n\r\n  onDamage(event: DamageEvent) {\r\n    if (event.targetIsFriendly) {\r\n      return;\r\n    }\r\n    const enemy = this.enemies.getEntity(event);\r\n    if (enemy && enemy.hasBuff(SPELLS.DEMORALIZING_SHOUT.id)) {\r\n      this.bonusDmg += calculateEffectiveDamage(event, BOOMING_VOICE_DAMAGE_INCREASE);\r\n    }\r\n  }\r\n\r\n  suggestions(when: When) {\r\n    when(this.uptimeSuggestionThresholds)\r\n      .addSuggestion((suggest, actual, recommended) => suggest(<>You wasted Rage by casting <SpellLink id={SPELLS.DEMORALIZING_SHOUT.id} /> with more than {this.maxRage - BOOMING_VOICE_RAGE_GENERATION} Rage.</>)\r\n        .icon(SPELLS.BOOMING_VOICE_TALENT.icon)\r\n        .actual(i18n._(t('warrior.protection.suggestions.boominVoice.rage.wasted')`${actual} Rage wasted`))\r\n        .recommended(`<${recommended} wasted Rage is recommended`));\r\n  }\r\n\r\n  statistic() {\r\n    return (\r\n      <Statistic\r\n        position={STATISTIC_ORDER.OPTIONAL(13)}\r\n        size=\"flexible\"\r\n        category={STATISTIC_CATEGORY.TALENTS}\r\n        tooltip={(\r\n          <>\r\n            {formatNumber(this.bonusDmg)} damage contributed<br />\r\n            {this.rageWasted} Rage wasted\r\n          </>\r\n        )}\r\n      >\r\n        <BoringValueText label={<><SpellLink id={SPELLS.BOOMING_VOICE_TALENT.id} /> Rage generated</>}>\r\n          <>\r\n            {this.rageGenerated} <small>rage</small>\r\n          </>\r\n        </BoringValueText>\r\n      </Statistic>\r\n    );\r\n  }\r\n}\r\n\r\nexport default BoomingVoice;\r\n","import React from 'react';\r\nimport Analyzer, { Options, SELECTED_PLAYER } from 'parser/core/Analyzer';\r\nimport { ThresholdStyle, When } from 'parser/core/ParseResults';\r\nimport SPELLS from 'common/SPELLS';\r\n\r\nimport { formatPercentage } from 'common/format';\r\nimport Events, { CastEvent } from 'parser/core/Events';\r\n\r\nimport Statistic from 'interface/statistics/Statistic';\r\nimport BoringValueText from 'interface/statistics/components/BoringValueText';\r\nimport STATISTIC_CATEGORY from 'interface/others/STATISTIC_CATEGORY';\r\nimport STATISTIC_ORDER from 'interface/others/STATISTIC_ORDER';\r\nimport SpellLink from 'common/SpellLink';\r\n\r\nimport { i18n } from '@lingui/core';\r\nimport { t } from '@lingui/macro';\r\n\r\nimport RageTracker from '../core/RageTracker';\r\n\r\nconst HEAVY_REPERCUSSIONS_SHIELD_BLOCK_EXTEND_MS = 1000;\r\n\r\nclass HeavyRepercussions extends Analyzer {\r\n  static dependencies = {\r\n    rageTracker: RageTracker,\r\n  };\r\n  sbExtended = 0;\r\n  sbCasts = 0;\r\n  statisticOrder = STATISTIC_ORDER.CORE(5);\r\n  protected rageTracker!: RageTracker;\r\n\r\n  constructor(options: Options) {\r\n    super(options);\r\n    this.active = this.selectedCombatant.hasTalent(SPELLS.HEAVY_REPERCUSSIONS_TALENT.id);\r\n    this.addEventListener(Events.cast.by(SELECTED_PLAYER).spell(SPELLS.SHIELD_SLAM), this.onSlamCast);\r\n  }\r\n\r\n  get shieldBlockuptime() {\r\n    return this.selectedCombatant.getBuffUptime(SPELLS.SHIELD_BLOCK_BUFF.id);\r\n  }\r\n\r\n  get uptimeSuggestionThresholds() {\r\n    return {\r\n      actual: this.sbExtended / this.sbCasts,\r\n      isLessThan: {\r\n        minor: .9,\r\n        average: .85,\r\n        major: .80,\r\n      },\r\n      style: ThresholdStyle.PERCENTAGE,\r\n    };\r\n  }\r\n\r\n  onSlamCast(event: CastEvent) {\r\n    this.sbCasts += 1;\r\n    if (!this.selectedCombatant.hasBuff(SPELLS.SHIELD_BLOCK_BUFF.id)) {\r\n      return;\r\n    }\r\n    this.sbExtended += 1;\r\n  }\r\n\r\n  suggestions(when: When) {\r\n    when(this.uptimeSuggestionThresholds)\r\n      .addSuggestion((suggest, actual, recommended) => suggest(<>Try and cast <SpellLink id={SPELLS.SHIELD_SLAM.id} />'s during <SpellLink id={SPELLS.SHIELD_BLOCK.id} /> to increase the uptime of <SpellLink id={SPELLS.SHIELD_BLOCK.id} /> and the damage of <SpellLink id={SPELLS.SHIELD_SLAM.id} />.</>)\r\n        .icon(SPELLS.HEAVY_REPERCUSSIONS_TALENT.icon)\r\n        .actual(i18n._(t('warrior.protection.suggestions.heavyRepercussions.shieldBlockCasts')`${formatPercentage(actual)}% cast during Shield Block`))\r\n        .recommended(`${formatPercentage(recommended)}% is recommended`));\r\n  }\r\n\r\n  statistic() {\r\n    const sbExtendedMS = this.sbExtended * HEAVY_REPERCUSSIONS_SHIELD_BLOCK_EXTEND_MS;\r\n\r\n    const rageByShieldSlam = this.rageTracker.getGeneratedBySpell(SPELLS.SHIELD_SLAM.id);\r\n    const rageWastedByShieldSlam = this.rageTracker.getWastedBySpell(SPELLS.SHIELD_SLAM.id);\r\n    const rageFromTalent = ((rageByShieldSlam + rageWastedByShieldSlam) / 18) * 3;\r\n\r\n    return (\r\n      <Statistic\r\n        position={STATISTIC_ORDER.OPTIONAL(13)}\r\n        size=\"flexible\"\r\n        category={STATISTIC_CATEGORY.TALENTS}\r\n        tooltip={(\r\n          <>\r\n            You casted Shield Slam {this.sbExtended} times during Shield Block, resulting in additional {sbExtendedMS / 1000} sec uptime.<br />\r\n          </>\r\n        )}\r\n      >\r\n        <BoringValueText label={<><SpellLink id={SPELLS.HEAVY_REPERCUSSIONS_TALENT.id} /> Extra Shield Block and Rage</>}>\r\n          <>\r\n            {formatPercentage(sbExtendedMS / (this.shieldBlockuptime - sbExtendedMS))}% <br />\r\n            {rageFromTalent} <small>rage</small>\r\n          </>\r\n        </BoringValueText>\r\n      </Statistic>\r\n    );\r\n  }\r\n}\r\n\r\nexport default HeavyRepercussions;\r\n","import React from 'react';\r\n\r\nimport SPELLS from 'common/SPELLS';\r\nimport { formatDuration, formatPercentage } from 'common/format';\r\nimport Analyzer, { Options, SELECTED_PLAYER } from 'parser/core/Analyzer';\r\nimport Events, { ApplyBuffEvent, ApplyBuffStackEvent, EventType, FightEndEvent, RemoveBuffEvent, RemoveBuffStackEvent } from 'parser/core/Events';\r\n\r\nimport Statistic from 'interface/statistics/Statistic';\r\nimport BoringValueText from 'interface/statistics/components/BoringValueText';\r\nimport STATISTIC_CATEGORY from 'interface/others/STATISTIC_CATEGORY';\r\nimport STATISTIC_ORDER from 'interface/others/STATISTIC_ORDER';\r\nimport SpellLink from 'common/SpellLink';\r\n\r\nconst MAX_STACKS = 5;\r\nconst HASTE_PER_STACK = 2;\r\n\r\n//update haste per stack in ./core/Haste.tsx aswell\r\n\r\nclass IntoTheFray extends Analyzer {\r\n  buffStacks: number[][];\r\n  lastStacks = 0;\r\n  lastUpdate = this.owner.fight.start_time;\r\n  statisticOrder = STATISTIC_ORDER.CORE(5);\r\n\r\n  constructor(options: Options) {\r\n    super(options);\r\n    this.active = this.selectedCombatant.hasTalent(SPELLS.INTO_THE_FRAY_TALENT.id);\r\n    this.addEventListener(Events.applybuff.by(SELECTED_PLAYER).spell(SPELLS.INTO_THE_FRAY_BUFF), this.handleStacks);\r\n    this.addEventListener(Events.applybuffstack.by(SELECTED_PLAYER).spell(SPELLS.INTO_THE_FRAY_BUFF), this.handleStacks);\r\n    this.addEventListener(Events.removebuff.by(SELECTED_PLAYER).spell(SPELLS.INTO_THE_FRAY_BUFF), this.handleStacks);\r\n    this.addEventListener(Events.removebuffstack.by(SELECTED_PLAYER).spell(SPELLS.INTO_THE_FRAY_BUFF), this.handleStacks);\r\n    this.addEventListener(Events.fightend, this.fightEnd);\r\n    this.buffStacks = Array.from({ length: MAX_STACKS + 1 }, () => [0]);\r\n  }\r\n\r\n  get averageHaste() {\r\n    let avgStacks = 0;\r\n    this.buffStacks.forEach((elem, index) => {\r\n      avgStacks += elem.reduce((a, b) => a + b) / this.owner.fightDuration * index;\r\n    });\r\n    return (avgStacks * HASTE_PER_STACK).toFixed(2);\r\n  }\r\n\r\n  handleStacks(event: ApplyBuffEvent | ApplyBuffStackEvent | RemoveBuffEvent | RemoveBuffStackEvent | FightEndEvent, stack?: number) {\r\n    const stackEvent = event as (typeof event & { stack: number });\r\n    if (stackEvent.type === EventType.RemoveBuff || isNaN(stackEvent.stack)) { // NaN check if player is dead during on_finish\r\n      stackEvent.stack = 0;\r\n    }\r\n    if (event.type === EventType.ApplyBuff) {\r\n      stackEvent.stack = 1;\r\n    }\r\n\r\n    if (stack) {\r\n      stackEvent.stack = stack;\r\n    }\r\n\r\n    this.buffStacks[this.lastStacks].push(stackEvent.timestamp - this.lastUpdate);\r\n    this.lastUpdate = stackEvent.timestamp;\r\n    this.lastStacks = stackEvent.stack;\r\n  }\r\n\r\n  fightEnd(event: FightEndEvent) {\r\n    this.handleStacks(event, this.lastStacks);\r\n  }\r\n\r\n  statistic() {\r\n    return (\r\n      <Statistic\r\n        position={STATISTIC_ORDER.OPTIONAL(13)}\r\n        size=\"flexible\"\r\n        category={STATISTIC_CATEGORY.TALENTS}\r\n        dropdown={\r\n          <table className=\"table table-condensed\">\r\n            <thead>\r\n              <tr>\r\n                <th>Haste-Bonus</th>\r\n                <th>Time (s)</th>\r\n                <th>Time (%)</th>\r\n              </tr>\r\n            </thead>\r\n            <tbody>\r\n              {this.buffStacks.map((e, i) => (\r\n                <tr key={i}>\r\n                  <th>{(i * HASTE_PER_STACK).toFixed(0)}%</th>\r\n                  <td>{formatDuration(e.reduce((a, b) => a + b, 0) / 1000)}</td>\r\n                  <td>{formatPercentage(e.reduce((a, b) => a + b, 0) / this.owner.fightDuration)}%</td>\r\n                </tr>\r\n              ))}\r\n            </tbody>\r\n          </table>\r\n        }\r\n      >\r\n        <BoringValueText label={<><SpellLink id={SPELLS.INTO_THE_FRAY_TALENT.id} /> average haste gained</>}>\r\n          {this.averageHaste}%\r\n        </BoringValueText>\r\n      </Statistic>\r\n    );\r\n  }\r\n}\r\n\r\nexport default IntoTheFray;\r\n","import React from 'react';\r\nimport Analyzer, { Options } from 'parser/core/Analyzer';\r\nimport SPELLS from 'common/SPELLS';\r\nimport Statistic from 'interface/statistics/Statistic';\r\nimport BoringValueText from 'interface/statistics/components/BoringValueText';\r\nimport STATISTIC_CATEGORY from 'interface/others/STATISTIC_CATEGORY';\r\nimport STATISTIC_ORDER from 'interface/others/STATISTIC_ORDER';\r\nimport SpellLink from 'common/SpellLink';\r\n\r\nimport RageTracker from '../core/RageTracker';\r\n\r\nclass WarMachine extends Analyzer {\r\n  static dependencies = {\r\n    rageTracker: RageTracker,\r\n  };\r\n\r\n  protected rageTracker!: RageTracker;\r\n\r\n  constructor(options: Options) {\r\n    super(options);\r\n    this.active = this.selectedCombatant.hasTalent(SPELLS.WAR_MACHINE_PROTECTION_TALENT.id);\r\n  }\r\n\r\n  statistic() {\r\n    const rageByAutoAttacks = this.rageTracker.getGeneratedBySpell(SPELLS.RAGE_AUTO_ATTACKS.id);\r\n    const rageWastedByAutoAttacks = this.rageTracker.getWastedBySpell(SPELLS.RAGE_AUTO_ATTACKS.id);\r\n    const rageFromWarMachine = (rageByAutoAttacks + rageWastedByAutoAttacks) / 3;\r\n    return (\r\n      <Statistic\r\n        position={STATISTIC_ORDER.OPTIONAL(13)}\r\n        size=\"flexible\"\r\n        category={STATISTIC_CATEGORY.TALENTS}\r\n      >\r\n        <BoringValueText label={<><SpellLink id={SPELLS.WAR_MACHINE_PROTECTION_TALENT.id} /> Extra Rage From Melees</>}>\r\n          <>\r\n            {rageFromWarMachine} <small>rage</small>\r\n          </>\r\n        </BoringValueText>\r\n      </Statistic>\r\n    );\r\n  }\r\n}\r\n\r\nexport default WarMachine;\r\n","import React from 'react';\r\nimport Analyzer, { Options, SELECTED_PLAYER } from 'parser/core/Analyzer';\r\nimport Enemies from 'parser/shared/modules/Enemies';\r\nimport SPELLS from 'common/SPELLS';\r\n\r\nimport calculateEffectiveDamage from 'parser/core/calculateEffectiveDamage';\r\nimport { formatNumber, formatPercentage } from 'common/format';\r\nimport Events, { DamageEvent } from 'parser/core/Events';\r\n\r\nimport Statistic from 'interface/statistics/Statistic';\r\nimport BoringValueText from 'interface/statistics/components/BoringValueText';\r\nimport STATISTIC_CATEGORY from 'interface/others/STATISTIC_CATEGORY';\r\nimport STATISTIC_ORDER from 'interface/others/STATISTIC_ORDER';\r\nimport SpellLink from 'common/SpellLink';\r\n\r\nconst PUNISH_DAMAGE_INCREASE = 0.2;\r\n\r\nclass Punish extends Analyzer {\r\n  static dependencies = {\r\n    enemies: Enemies,\r\n  };\r\n  bonusDmg: number = 0;\r\n  statisticOrder = STATISTIC_ORDER.CORE(5);\r\n  protected enemies!: Enemies;\r\n\r\n  constructor(options: Options) {\r\n    super(options);\r\n    this.active = this.selectedCombatant.hasTalent(SPELLS.PUNISH_TALENT.id);\r\n    this.addEventListener(Events.damage.by(SELECTED_PLAYER).spell(SPELLS.SHIELD_SLAM), this.onSlamDamage);\r\n  }\r\n\r\n  get uptime() {\r\n    return this.enemies.getBuffUptime(SPELLS.PUNISH_DEBUFF.id) / this.owner.fightDuration;\r\n  }\r\n\r\n  onSlamDamage(event: DamageEvent) {\r\n    this.bonusDmg += calculateEffectiveDamage(event, PUNISH_DAMAGE_INCREASE);\r\n  }\r\n\r\n  statistic() {\r\n    return (\r\n      <Statistic\r\n        position={STATISTIC_ORDER.OPTIONAL(13)}\r\n        size=\"flexible\"\r\n        category={STATISTIC_CATEGORY.TALENTS}\r\n        tooltip={(\r\n          <>\r\n            Punish added a total of {formatNumber(this.bonusDmg)} damage to your Shield Slams ({formatPercentage(this.owner.getPercentageOfTotalDamageDone(this.bonusDmg))}%). <br />\r\n            {formatPercentage(this.uptime)}% debuff uptime.\r\n          </>\r\n        )}\r\n      >\r\n        <BoringValueText label={<><SpellLink id={SPELLS.PUNISH_TALENT.id} /> Damage contributed</>}>\r\n          <>\r\n            {formatNumber(this.bonusDmg / this.owner.fightDuration * 1000)} <small>DPS</small>\r\n          </>\r\n        </BoringValueText>\r\n      </Statistic>\r\n    );\r\n  }\r\n}\r\n\r\nexport default Punish;\r\n","import SPELLS from 'common/SPELLS';\r\nimport AoESpellEfficiency from 'parser/shared/modules/features/AoESpellEfficiency';\r\nimport { Options } from 'parser/core/Analyzer';\r\n\r\nclass DragonRoar extends AoESpellEfficiency {\r\n\r\n  constructor(options: Options) {\r\n    super(options);\r\n    this.ability = SPELLS.DRAGON_ROAR_TALENT;\r\n    this.active = this.selectedCombatant.hasTalent(this.ability.id);\r\n  }\r\n}\r\n\r\nexport default DragonRoar;\r\n\r\n","import CoreCombatLogParser from 'parser/core/CombatLogParser';\r\nimport ArcaneTorrent from 'parser/shared/modules/racials/bloodelf/ArcaneTorrent';\r\n\r\nimport Haste from './modules/core/Haste';\r\nimport Abilities from './modules/Abilities';\r\nimport AlwaysBeCasting from './modules/features/AlwaysBeCasting';\r\nimport SpellUsable from './modules/features/SpellUsable';\r\nimport MitigationCheck from './modules/features/MitigationCheck';\r\nimport Buffs from './modules/features/Buffs';\r\nimport CooldownThroughputTracker from './modules/features/CooldownThroughputTracker';\r\n\r\nimport ShieldBlock from './modules/spells/ShieldBlock';\r\nimport BlockCheck from './modules/features/BlockCheck';\r\nimport Checklist from './modules/features/Checklist/Module';\r\nimport IgnorePain from './modules/features/IgnorePain';\r\nimport RageTracker from './modules/core/RageTracker';\r\nimport RageDetails from './modules/core/RageDetails';\r\nimport Avatar from './modules/features/Avatar';\r\nimport ShieldSlam from './modules/spells/ShieldSlam';\r\n\r\nimport AngerManagement from './modules/talents/AngerManagement';\r\nimport BoomingVoice from './modules/talents/BoomingVoice';\r\nimport HeavyRepercussions from './modules/talents/HeavyRepercussions';\r\nimport IntoTheFray from './modules/talents/IntoTheFray';\r\nimport WarMachine from './modules/talents/WarMachine';\r\nimport Punish from './modules/talents/Punish';\r\nimport DragonRoar from './modules/talents/DragonRoar';\r\nimport SpellReflect from './modules/spells/SpellReflect';\r\n\r\nclass CombatLogParser extends CoreCombatLogParser {\r\n  static specModules = {\r\n    // Core\r\n    haste: Haste,\r\n    mitigationCheck: MitigationCheck,\r\n    buffs: Buffs,\r\n\r\n    // Features\r\n    abilities: Abilities,\r\n    alwaysBeCasting: AlwaysBeCasting,\r\n    shieldBlock: ShieldBlock,\r\n    blockCheck: BlockCheck,\r\n    spellUsable: SpellUsable,\r\n    cooldownThroughputTracker: CooldownThroughputTracker,\r\n    checklist: Checklist,\r\n\r\n    ignorePain: IgnorePain,\r\n    rageTracker: RageTracker,\r\n    rageDetails: RageDetails,\r\n    avatar: Avatar,\r\n    shieldSlam: ShieldSlam,\r\n    spellReflect: SpellReflect,\r\n\r\n    //Talents\r\n    angerManagement: AngerManagement,\r\n    boomingVoice: BoomingVoice,\r\n    heavyRepercussions: HeavyRepercussions,\r\n    intoTheFray: IntoTheFray,\r\n    warMachine: WarMachine,\r\n    punish: Punish,\r\n    dragonRoar: DragonRoar,\r\n\r\n    // Doesn't generate enough rage to be a valid cast\r\n    arcaneTorrent: [ArcaneTorrent, { castEfficiency: null }] as const,\r\n  };\r\n}\r\n\r\nexport default CombatLogParser;\r\n","/**\r\n * A simple component that shows the spell value in the most plain way possible.\r\n * Use this only as the very last resort.\r\n */\r\nimport React from 'react';\r\n\r\nimport SpellIcon from 'common/SpellIcon';\r\nimport SpellLink from 'common/SpellLink';\r\nimport Spell from 'common/SPELLS/Spell';\r\n\r\ntype Props = {\r\n  spell: Spell;\r\n  children: React.ReactNode;\r\n  className?: string;\r\n}\r\n\r\nconst BoringSpellValueText = ({ spell, children, className }: Props) => (\r\n  <div className={`pad boring-text ${className || ''}`}>\r\n    <label>\r\n      <SpellIcon id={spell.id} /> <SpellLink id={spell.id} icon={false} />\r\n    </label>\r\n    <div className=\"value\">\r\n      {children}\r\n    </div>\r\n  </div>\r\n);\r\n\r\nexport default BoringSpellValueText;\r\n","export default function calculateEffectiveDamage(event, increase) {\r\n  const raw = (event.amount || 0) + (event.absorbed || 0);\r\n  return raw - (raw / (1 + increase));\r\n}\r\n","/**\r\n * A simple component that shows a value in the most plain way possible.\r\n * Use this only as the very last resort.\r\n */\r\nimport React from 'react';\r\n\r\ntype Props = {\r\n  label: React.ReactNode;\r\n  children: React.ReactNode;\r\n  className?: string;\r\n}\r\n\r\nconst BoringValue = ({ label, children, className }: Props) => (\r\n  <div className={`pad boring-text ${className || ''}`}>\r\n    <label>\r\n      {label}\r\n    </label>\r\n    <div className=\"value\">\r\n      {children}\r\n    </div>\r\n  </div>\r\n);\r\n\r\nexport default BoringValue;\r\n","import Analyzer, { SELECTED_PLAYER, Options } from 'parser/core/Analyzer';\r\nimport EventEmitter from 'parser/core/modules/EventEmitter';\r\nimport Events, { EventType, ClassResources, EnergizeEvent, CastEvent, HealEvent, SpendResourceEvent } from 'parser/core/Events';\r\nimport { Resource } from 'game/RESOURCE_TYPES';\r\n\r\nexport type BuilderObj = {\r\n  generated: number,\r\n  wasted: number,\r\n  casts: number,\r\n}\r\n\r\nexport type SpenderObj = {\r\n  spent: number,\r\n  spentByCast: number[],\r\n  casts: number,\r\n}\r\n\r\ntype ResourceUpdate = {\r\n  timestamp: number | undefined,\r\n  current: number,\r\n  waste: number,\r\n  generated: number,\r\n  used: number,\r\n}\r\n\r\n/**\r\n * This is an 'abstract' implementation of a framework for tracking resource generating/spending.\r\n * Extend it by following the instructions in the TODO comments below\r\n */\r\nclass ResourceTracker extends Analyzer {\r\n  static dependencies = {\r\n    eventEmitter: EventEmitter,\r\n    // Optional dependency for the `resourceCost` prop of events\r\n    // spellResourceCost: SpellResourceCost,\r\n  };\r\n\r\n  protected eventEmitter!: EventEmitter;\r\n\r\n  current = 0;\r\n  resourceUpdates: ResourceUpdate[] = [];\r\n\r\n  // stores resource gained/spent/wasted by ability ID\r\n  buildersObj: {[index: number]: BuilderObj} = {};\r\n  spendersObj: {[index: number]: SpenderObj} = {};\r\n\r\n  // TODO set this to the resource you wish to track constructor.. see the appropriate objects in game/RESOURCE_TYPES\r\n  resource!: Resource;\r\n\r\n  // TODO a classes 'main' resource passes the max along with events, but for other resources this may need to be defined\r\n  maxResource!: number;\r\n\r\n  constructor(options: Options){\r\n    super(options);\r\n    this.addEventListener(Events.energize.to(SELECTED_PLAYER), this.onEnergize);\r\n    this.addEventListener(Events.cast.by(SELECTED_PLAYER), this.onCast);\r\n  }\r\n\r\n  // FIXME implement natural regen\r\n  // TODO if the tracked resource naturally regenerates (like Energy), set this to true and set the parameters of the regeneration in the below fields\r\n  // naturallyRegenerates = false;\r\n  // baseRegenRate; // TODO resource's base regeneration rate in points per second\r\n  // isRegenHasted; // TODO iff true, regeneration rate will be scaled with haste\r\n\r\n  // TODO if you wish an ability to show in results even if it wasn't used, add it using these functions constructor\r\n  initBuilderAbility(spellId: number) {\r\n    this.buildersObj[spellId] = { generated: 0, wasted: 0, casts: 0 };\r\n  }\r\n  initSpenderAbility(spellId: number) {\r\n    this.spendersObj[spellId] = { spent: 0, spentByCast: [], casts: 0 };\r\n  }\r\n\r\n  // BUILDERS - Handled on energize, using the 'resourceChange' field\r\n  onEnergize(event: EnergizeEvent) {\r\n    const spellId = event.ability.guid;\r\n\r\n    if(event.resourceChangeType !== this.resource.id) {\r\n        return;\r\n    }\r\n\r\n    const waste = event.waste;\r\n    const gain = event.resourceChange - waste;\r\n    this._applyBuilder(spellId, gain, waste, this.getResource(event), event.timestamp);\r\n  }\r\n\r\n  // FIXME Track resource drains too, so that the 'current' value can be more accurate\r\n\r\n  // TODO if a resource gain isn't showing as an energize in events, handle it manually by calling this\r\n  /**\r\n   * FIXME solve with a normalizer instead?\r\n   * Applies an energize of the tracked resource type.\r\n   * @param {number} spellId - The spellId to attribute the resource gain to\r\n   * @param {number} amount - The raw amount of resources to gain\r\n   */\r\n  processInvisibleEnergize(spellId: number, amount: number) {\r\n    const maxGain = this.maxResource !== undefined ? this.maxResource - this.current : amount;\r\n    const gain = Math.min(amount, maxGain);\r\n    const waste = Math.max(amount - maxGain, 0);\r\n    this._applyBuilder(spellId, gain, waste);\r\n  }\r\n\r\n  _applyBuilder(spellId: number, gain: number, waste: number,  resource?: ClassResources, timestamp?: number) {\r\n    if (!this.buildersObj[spellId]) {\r\n        this.initBuilderAbility(spellId);\r\n    }\r\n\r\n    this.buildersObj[spellId].wasted += waste;\r\n    this.buildersObj[spellId].generated += gain;\r\n    this.buildersObj[spellId].casts += 1;\r\n\r\n    // resource.amount for an energize is the amount AFTER the energize\r\n    if (resource !== null && resource !== undefined && resource.amount !== undefined) {\r\n      this.current = resource.amount;\r\n      if (resource.max !== undefined) {\r\n        this.maxResource = resource.max; // track changes in max resource, which can happen due to procs / casts\r\n      }\r\n    } else {\r\n      this.current += gain;\r\n    }\r\n\r\n    this.resourceUpdates.push({\r\n      timestamp: timestamp,\r\n      current: this.current,\r\n      waste: waste,\r\n      generated: gain,\r\n      used: 0,\r\n    });\r\n  }\r\n\r\n  // SPENDERS - Handled on cast, using the 'classResources' field\r\n  onCast(event: CastEvent) {\r\n    const spellId = event.ability.guid;\r\n\r\n    if(!this.shouldProcessCastEvent(event)) {\r\n        return;\r\n    }\r\n    const eventResource = this.getResource(event);\r\n\r\n    if(!eventResource){\r\n      return;\r\n    }\r\n\r\n    if (eventResource.max) {\r\n      this.maxResource = eventResource.max; // track changes in max resource, which can happen due to procs / casts\r\n    }\r\n    const cost = this.getReducedCost(event);\r\n\r\n    if (!this.spendersObj[spellId]) {\r\n      this.initSpenderAbility(spellId);\r\n    }\r\n\r\n    if (!cost || cost === 0) {\r\n      return;\r\n    }\r\n\r\n    this.spendersObj[spellId].casts += 1;\r\n    this.spendersObj[spellId].spentByCast.push(cost);\r\n    if(cost > 0) {\r\n      this.spendersObj[spellId].spent += cost;\r\n    }\r\n\r\n    //Re-sync current amount, to update not-tracked gains.\r\n    this.current = eventResource.amount - cost;\r\n\r\n    this.resourceUpdates.push({\r\n      timestamp: event.timestamp,\r\n      current: this.current,\r\n      waste: 0,\r\n      generated: 0,\r\n      used: eventResource.amount,\r\n    });\r\n\r\n    this.triggerSpendEvent(cost, event);\r\n  }\r\n\r\n  // TODO if your spec has an ability cost reduction that doesn't show in events, handle it manually by overriding here. Or extend SpellResourceCost and apply the discount there.\r\n  getReducedCost(event: CastEvent) {\r\n    if (event.resourceCost && event.resourceCost[this.resource.id] !== undefined) {\r\n      return event.resourceCost[this.resource.id];\r\n    }\r\n    return this.getResource(event)?.cost;\r\n  }\r\n\r\n  getResource(event: CastEvent | HealEvent | EnergizeEvent ) {\r\n    if(!event.classResources) {\r\n      return undefined;\r\n    } else {\r\n      return event.classResources.find(r => r.type === this.resource.id);\r\n    }\r\n  }  \r\n\r\n  triggerSpendEvent(spent: number, event: CastEvent) {\r\n\r\n    const fabricatedEvent: SpendResourceEvent = {\r\n      type: EventType.SpendResource,\r\n      timestamp: event.timestamp,\r\n      sourceID: event.sourceID,\r\n      targetID: event.targetID,\r\n      resourceChange: spent,\r\n      resourceChangeType: this.resource.id,\r\n      ability: event.ability,\r\n      __fabricated: true,\r\n    };\r\n\r\n    this.eventEmitter.fabricateEvent(fabricatedEvent, event);\r\n  }\r\n\r\n  shouldProcessCastEvent(event: CastEvent) {\r\n    return Boolean(this.getResource(event));\r\n  }\r\n\r\n  getGeneratedBySpell(spellId: number) {\r\n    return (this.buildersObj[spellId] && this.buildersObj[spellId].generated) || 0;\r\n  }\r\n\r\n  getWastedBySpell(spellId: number) {\r\n    return (this.buildersObj[spellId] && this.buildersObj[spellId].wasted) || 0;\r\n  }\r\n\r\n  getBuilderCastsBySpell(spellId: number) {\r\n    return (this.buildersObj[spellId] && this.buildersObj[spellId].casts) || 0;\r\n  }\r\n\r\n  get generated() {\r\n    return Object.values(this.buildersObj).reduce((acc, spell) => acc + spell.generated, 0);\r\n  }\r\n\r\n  get wasted() {\r\n    return Object.values(this.buildersObj).reduce((acc, spell) => acc + spell.wasted, 0);\r\n  }\r\n\r\n  get spent() {\r\n    return Object.values(this.spendersObj).reduce((acc, spell) => acc + spell.spent, 0);\r\n  }\r\n\r\n  get spendersCasts() {\r\n    return Object.values(this.spendersObj).reduce((acc, spell) => acc + spell.casts, 0);\r\n  }\r\n}\r\n\r\nexport default ResourceTracker;\r\n","import React from 'react';\r\n\r\nimport SpellLink from 'common/SpellLink';\r\nimport { formatPercentage } from 'common/format';\r\nimport { TooltipElement } from 'common/Tooltip';\r\n\r\nimport ResourceTracker, { BuilderObj, SpenderObj } from './ResourceTracker';\r\n\r\ninterface Props {\r\n  tracker: ResourceTracker,\r\n  showSpenders: boolean,\r\n}\r\n\r\nclass ResourceBreakdown extends React.Component<Props> {\r\n\r\n  prepareGenerated(buildersObj: {[index: number]: BuilderObj}) {\r\n    return Object.keys(buildersObj)\r\n      .map(abilityId => ({\r\n        abilityId: Number(abilityId),\r\n        generated: buildersObj[Number(abilityId)].generated,\r\n        wasted: buildersObj[Number(abilityId)].wasted,\r\n      }))\r\n      .sort((a, b) => b.generated - a.generated)\r\n      .filter(ability => ability.generated > 0 || ability.wasted);\r\n  }\r\n\r\n  prepareSpent(spendersObj: {[index: number]: SpenderObj}) {\r\n    return Object.keys(spendersObj)\r\n      .map(abilityId => ({\r\n        abilityId: Number(abilityId),\r\n        spent: spendersObj[Number(abilityId)].spent,\r\n        casts: spendersObj[Number(abilityId)].casts,\r\n      }))\r\n      .sort((a, b) => b.spent - a.spent)\r\n      .filter(ability => ability.spent > 0);\r\n  }\r\n\r\n  render() {\r\n    const { tracker, showSpenders } = this.props;\r\n    const resourceName = tracker.resource.name;\r\n\r\n    const generated = this.prepareGenerated(tracker.buildersObj);\r\n    const spent = this.prepareSpent(tracker.spendersObj);\r\n\r\n    let totalGenerated = tracker.generated;\r\n    let totalWasted = tracker.wasted;\r\n\r\n    let totalSpent = tracker.spent;\r\n    let totalCasts = tracker.spendersCasts;\r\n\r\n    // looks wrong but totals are only for the purpose of percentage, and if nothing was wasted, then 0/1 gives correct result 0% wasted, if it's not 0 it retains its original value\r\n    totalGenerated = (totalGenerated === 0) ? 1 : totalGenerated;\r\n    totalWasted = (totalWasted === 0) ? 1 : totalWasted;\r\n\r\n    totalSpent = (totalSpent === 0) ? 1 : totalSpent;\r\n    totalCasts = (totalCasts === 0) ? 1 : totalCasts;\r\n\r\n    return (\r\n      <>\r\n        <table className=\"data-table\">\r\n          <thead>\r\n            <tr>\r\n              <th>Ability</th>\r\n              <th colSpan={2}>{resourceName} generated</th>\r\n              <th colSpan={2}><TooltipElement content=\"This is the amount of resources that were generated while you were already at cap.\">{resourceName} wasted</TooltipElement></th>\r\n            </tr>\r\n          </thead>\r\n          <tbody>\r\n            {generated && generated\r\n              .map(ability => (\r\n                <tr key={ability.abilityId}>\r\n                  <td style={{ width: '30%' }}>\r\n                    <SpellLink id={ability.abilityId} />\r\n                  </td>\r\n                  <td style={{ width: 50, paddingRight: 5, textAlign: 'center' }}>\r\n                    <TooltipElement content={`${formatPercentage(ability.generated / totalGenerated)} %`}>{ability.generated.toFixed(0)}</TooltipElement>\r\n                  </td>\r\n                  <td style={{ width: '40%' }}>\r\n                    <div\r\n                      className=\"performance-bar\"\r\n                      style={{ width: `${(ability.generated / totalGenerated) * 100}%` }}\r\n                    />\r\n                  </td>\r\n                  <td style={{ width: 50, paddingRight: 5, textAlign: 'center' }}>\r\n                    <TooltipElement content={`${formatPercentage(ability.wasted / totalWasted)} %`}>{ability.wasted.toFixed(0)}</TooltipElement>\r\n                  </td>\r\n                  <td style={{ width: '30%' }}>\r\n                    <div\r\n                      className=\"performance-bar\"\r\n                      style={{ width: `${(ability.wasted / totalWasted) * 100}%` }}\r\n                    />\r\n                  </td>\r\n                </tr>\r\n              ))}\r\n          </tbody>\r\n        </table>\r\n        {showSpenders && (\r\n          <table className=\"data-table\">\r\n            <thead>\r\n              <tr>\r\n                <th>Ability</th>\r\n                <th colSpan={2}>{resourceName} spent</th>\r\n                <th colSpan={2}>Casts</th>\r\n              </tr>\r\n            </thead>\r\n            <tbody>\r\n              {spent && spent\r\n                .map(ability => (\r\n                  <tr key={ability.abilityId}>\r\n                    <td style={{ width: '30%' }}>\r\n                      <SpellLink id={ability.abilityId} />\r\n                    </td>\r\n                    <td style={{ width: 50, paddingRight: 5, textAlign: 'center' }}>\r\n                      <TooltipElement content={`${formatPercentage(ability.spent / totalSpent)} %`}>{ability.spent.toFixed(0)}</TooltipElement>\r\n                    </td>\r\n                    <td style={{ width: '40%' }}>\r\n                      <div\r\n                        className=\"performance-bar\"\r\n                        style={{ width: `${(ability.spent / totalSpent) * 100}%` }}\r\n                      />\r\n                    </td>\r\n                    <td style={{ width: 50, paddingRight: 5, textAlign: 'center' }}>\r\n                      <TooltipElement content={`${formatPercentage(ability.casts / totalCasts)} %`}>{ability.casts}</TooltipElement>\r\n                    </td>\r\n                    <td style={{ width: '30%' }}>\r\n                      <div\r\n                        className=\"performance-bar\"\r\n                        style={{ width: `${(ability.casts / totalCasts) * 100}%` }}\r\n                      />\r\n                    </td>\r\n                  </tr>\r\n                ))}\r\n            </tbody>\r\n          </table>\r\n        )}\r\n      </>\r\n    );\r\n  }\r\n}\r\n\r\nexport default ResourceBreakdown;\r\n","import React from 'react';\r\nimport RESOURCE_TYPES from 'game/RESOURCE_TYPES';\r\n\r\nimport ResourceLink from './ResourceLink';\r\nimport Icon from './Icon';\r\n\r\ninterface Props extends Omit<React.ComponentProps<typeof Icon>, 'id' | 'icon'> {\r\n  id: number;\r\n  noLink?: boolean;\r\n}\r\n\r\nconst ResourceIcon = ({ id, noLink, ...others }: Props) => {\r\n  if (process.env.NODE_ENV === 'development' && !RESOURCE_TYPES[id]) {\r\n    throw new Error(`Unknown spell: ${id}`);\r\n  }\r\n\r\n  const spell = RESOURCE_TYPES[id] || {\r\n    name: 'Spell not recognized',\r\n    icon: 'inv_misc_questionmark',\r\n  };\r\n\r\n  const icon = (\r\n    <Icon\r\n      icon={spell.icon}\r\n      alt={spell.name}\r\n      {...others}\r\n    />\r\n  );\r\n\r\n  if (noLink) {\r\n    return icon;\r\n  }\r\n\r\n  return (\r\n    <ResourceLink id={id} icon={false}>\r\n      {icon}\r\n    </ResourceLink>\r\n  );\r\n};\r\n\r\nexport default ResourceIcon;\r\n","import React, {useEffect, useState} from 'react';\r\n\r\nimport TooltipProvider from 'interface/common/TooltipProvider';\r\n\r\nimport RESOURCE_TYPES from 'game/RESOURCE_TYPES';\r\n\r\nimport ResourceIcon from './ResourceIcon';\r\n\r\ninterface Props {\r\n  id: number;\r\n  children?: React.ReactNode;\r\n  category?: string;\r\n  icon?: boolean,\r\n}\r\n\r\nconst ResourceLink = ({icon = true, ...props}: Props) => {\r\n\r\n  const [elem, setElem] = useState<HTMLAnchorElement | null>(null);\r\n\r\n  useEffect(() => {TooltipProvider.refresh(elem);})\r\n\r\n  const { id, children, category = undefined, ...other } = props;\r\n\r\n  if (process.env.NODE_ENV === 'development' && !children && !RESOURCE_TYPES[id]) {\r\n    throw new Error(`Unknown spell: ${id}`);\r\n  }\r\n\r\n  return (\r\n    <a\r\n      href={TooltipProvider.resource(id)}\r\n      target=\"_blank\"\r\n      rel=\"noopener noreferrer\"\r\n      className={category}\r\n      ref={elem => {setElem(elem);}}\r\n      {...other}\r\n    >\r\n      {icon && <ResourceIcon id={id} noLink />}{' '}\r\n      {children || RESOURCE_TYPES[id].name}\r\n    </a>\r\n  );\r\n}\r\n\r\nexport default ResourceLink;\r\n","'use strict';\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\n\nvar _typeof = typeof Symbol === \"function\" && typeof Symbol.iterator === \"symbol\" ? function (obj) { return typeof obj; } : function (obj) { return obj && typeof Symbol === \"function\" && obj.constructor === Symbol && obj !== Symbol.prototype ? \"symbol\" : typeof obj; };\n\nvar _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; };\n\nvar _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if (\"value\" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();\n\nvar _react = require('react');\n\nvar _react2 = _interopRequireDefault(_react);\n\nvar _propTypes = require('prop-types');\n\nvar _propTypes2 = _interopRequireDefault(_propTypes);\n\nvar _classnames = require('classnames');\n\nvar _classnames2 = _interopRequireDefault(_classnames);\n\nfunction _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }\n\nfunction _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }\n\nfunction _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError(\"Cannot call a class as a function\"); } }\n\nfunction _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError(\"this hasn't been initialised - super() hasn't been called\"); } return call && (typeof call === \"object\" || typeof call === \"function\") ? call : self; }\n\nfunction _inherits(subClass, superClass) { if (typeof superClass !== \"function\" && superClass !== null) { throw new TypeError(\"Super expression must either be null or a function, not \" + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }\n\nvar ANIMATION_STATE_CLASSES = {\n  animating: 'rah-animating',\n  animatingUp: 'rah-animating--up',\n  animatingDown: 'rah-animating--down',\n  animatingToHeightZero: 'rah-animating--to-height-zero',\n  animatingToHeightAuto: 'rah-animating--to-height-auto',\n  animatingToHeightSpecific: 'rah-animating--to-height-specific',\n  static: 'rah-static',\n  staticHeightZero: 'rah-static--height-zero',\n  staticHeightAuto: 'rah-static--height-auto',\n  staticHeightSpecific: 'rah-static--height-specific'\n};\n\nvar PROPS_TO_OMIT = ['animateOpacity', 'animationStateClasses', 'applyInlineTransitions', 'children', 'contentClassName', 'delay', 'duration', 'easing', 'height', 'onAnimationEnd', 'onAnimationStart'];\n\nfunction omit(obj) {\n  for (var _len = arguments.length, keys = Array(_len > 1 ? _len - 1 : 0), _key = 1; _key < _len; _key++) {\n    keys[_key - 1] = arguments[_key];\n  }\n\n  if (!keys.length) {\n    return obj;\n  }\n\n  var res = {};\n  var objectKeys = Object.keys(obj);\n\n  for (var i = 0; i < objectKeys.length; i++) {\n    var key = objectKeys[i];\n\n    if (keys.indexOf(key) === -1) {\n      res[key] = obj[key];\n    }\n  }\n\n  return res;\n}\n\n// Start animation helper using nested requestAnimationFrames\nfunction startAnimationHelper(callback) {\n  var requestAnimationFrameIDs = [];\n\n  requestAnimationFrameIDs[0] = requestAnimationFrame(function () {\n    requestAnimationFrameIDs[1] = requestAnimationFrame(function () {\n      callback();\n    });\n  });\n\n  return requestAnimationFrameIDs;\n}\n\nfunction cancelAnimationFrames(requestAnimationFrameIDs) {\n  requestAnimationFrameIDs.forEach(function (id) {\n    return cancelAnimationFrame(id);\n  });\n}\n\nfunction isNumber(n) {\n  return !isNaN(parseFloat(n)) && isFinite(n);\n}\n\nfunction isPercentage(height) {\n  // Percentage height\n  return typeof height === 'string' && height.search('%') === height.length - 1 && isNumber(height.substr(0, height.length - 1));\n}\n\nfunction runCallback(callback, params) {\n  if (callback && typeof callback === 'function') {\n    callback(params);\n  }\n}\n\nvar AnimateHeight = function (_React$Component) {\n  _inherits(AnimateHeight, _React$Component);\n\n  function AnimateHeight(props) {\n    _classCallCheck(this, AnimateHeight);\n\n    var _this = _possibleConstructorReturn(this, (AnimateHeight.__proto__ || Object.getPrototypeOf(AnimateHeight)).call(this, props));\n\n    _this.animationFrameIDs = [];\n\n    var height = 'auto';\n    var overflow = 'visible';\n\n    if (isNumber(props.height)) {\n      // If value is string \"0\" make sure we convert it to number 0\n      height = props.height < 0 || props.height === '0' ? 0 : props.height;\n      overflow = 'hidden';\n    } else if (isPercentage(props.height)) {\n      // If value is string \"0%\" make sure we convert it to number 0\n      height = props.height === '0%' ? 0 : props.height;\n      overflow = 'hidden';\n    }\n\n    _this.animationStateClasses = _extends({}, ANIMATION_STATE_CLASSES, props.animationStateClasses);\n\n    var animationStateClasses = _this.getStaticStateClasses(height);\n\n    _this.state = {\n      animationStateClasses: animationStateClasses,\n      height: height,\n      overflow: overflow,\n      shouldUseTransitions: false\n    };\n    return _this;\n  }\n\n  _createClass(AnimateHeight, [{\n    key: 'componentDidMount',\n    value: function componentDidMount() {\n      var height = this.state.height;\n\n      // Hide content if height is 0 (to prevent tabbing into it)\n      // Check for contentElement is added cause this would fail in tests (react-test-renderer)\n      // Read more here: https://github.com/Stanko/react-animate-height/issues/17\n\n      if (this.contentElement && this.contentElement.style) {\n        this.hideContent(height);\n      }\n    }\n  }, {\n    key: 'componentDidUpdate',\n    value: function componentDidUpdate(prevProps, prevState) {\n      var _this2 = this;\n\n      var _props = this.props,\n          delay = _props.delay,\n          duration = _props.duration,\n          height = _props.height,\n          onAnimationEnd = _props.onAnimationEnd,\n          onAnimationStart = _props.onAnimationStart;\n\n      // Check if 'height' prop has changed\n\n      if (this.contentElement && height !== prevProps.height) {\n        var _cx;\n\n        // Remove display: none from the content div\n        // if it was hidden to prevent tabbing into it\n        this.showContent(prevState.height);\n\n        // Cache content height\n        this.contentElement.style.overflow = 'hidden';\n        var contentHeight = this.contentElement.offsetHeight;\n        this.contentElement.style.overflow = '';\n\n        // set total animation time\n        var totalDuration = duration + delay;\n\n        var newHeight = null;\n        var timeoutState = {\n          height: null, // it will be always set to either 'auto' or specific number\n          overflow: 'hidden'\n        };\n        var isCurrentHeightAuto = prevState.height === 'auto';\n\n        if (isNumber(height)) {\n          // If value is string \"0\" make sure we convert it to number 0\n          newHeight = height < 0 || height === '0' ? 0 : height;\n          timeoutState.height = newHeight;\n        } else if (isPercentage(height)) {\n          // If value is string \"0%\" make sure we convert it to number 0\n          newHeight = height === '0%' ? 0 : height;\n          timeoutState.height = newHeight;\n        } else {\n          // If not, animate to content height\n          // and then reset to auto\n          newHeight = contentHeight; // TODO solve contentHeight = 0\n          timeoutState.height = 'auto';\n          timeoutState.overflow = null;\n        }\n\n        if (isCurrentHeightAuto) {\n          // This is the height to be animated to\n          timeoutState.height = newHeight;\n\n          // If previous height was 'auto'\n          // set starting height explicitly to be able to use transition\n          newHeight = contentHeight;\n        }\n\n        // Animation classes\n        var animationStateClasses = (0, _classnames2.default)((_cx = {}, _defineProperty(_cx, this.animationStateClasses.animating, true), _defineProperty(_cx, this.animationStateClasses.animatingUp, prevProps.height === 'auto' || height < prevProps.height), _defineProperty(_cx, this.animationStateClasses.animatingDown, height === 'auto' || height > prevProps.height), _defineProperty(_cx, this.animationStateClasses.animatingToHeightZero, timeoutState.height === 0), _defineProperty(_cx, this.animationStateClasses.animatingToHeightAuto, timeoutState.height === 'auto'), _defineProperty(_cx, this.animationStateClasses.animatingToHeightSpecific, timeoutState.height > 0), _cx));\n\n        // Animation classes to be put after animation is complete\n        var timeoutAnimationStateClasses = this.getStaticStateClasses(timeoutState.height);\n\n        // Set starting height and animating classes\n        // We are safe to call set state as it will not trigger infinite loop\n        // because of the \"height !== prevProps.height\" check\n        this.setState({ // eslint-disable-line react/no-did-update-set-state\n          animationStateClasses: animationStateClasses,\n          height: newHeight,\n          overflow: 'hidden',\n          // When animating from 'auto' we first need to set fixed height\n          // that change should be animated\n          shouldUseTransitions: !isCurrentHeightAuto\n        });\n\n        // Clear timeouts\n        clearTimeout(this.timeoutID);\n        clearTimeout(this.animationClassesTimeoutID);\n\n        if (isCurrentHeightAuto) {\n          // When animating from 'auto' we use a short timeout to start animation\n          // after setting fixed height above\n          timeoutState.shouldUseTransitions = true;\n\n          cancelAnimationFrames(this.animationFrameIDs);\n          this.animationFrameIDs = startAnimationHelper(function () {\n            _this2.setState(timeoutState);\n\n            // ANIMATION STARTS, run a callback if it exists\n            runCallback(onAnimationStart, { newHeight: timeoutState.height });\n          });\n\n          // Set static classes and remove transitions when animation ends\n          this.animationClassesTimeoutID = setTimeout(function () {\n            _this2.setState({\n              animationStateClasses: timeoutAnimationStateClasses,\n              shouldUseTransitions: false\n            });\n\n            // ANIMATION ENDS\n            // Hide content if height is 0 (to prevent tabbing into it)\n            _this2.hideContent(timeoutState.height);\n            // Run a callback if it exists\n            runCallback(onAnimationEnd, { newHeight: timeoutState.height });\n          }, totalDuration);\n        } else {\n          // ANIMATION STARTS, run a callback if it exists\n          runCallback(onAnimationStart, { newHeight: newHeight });\n\n          // Set end height, classes and remove transitions when animation is complete\n          this.timeoutID = setTimeout(function () {\n            timeoutState.animationStateClasses = timeoutAnimationStateClasses;\n            timeoutState.shouldUseTransitions = false;\n\n            _this2.setState(timeoutState);\n\n            // ANIMATION ENDS\n            // If height is auto, don't hide the content\n            // (case when element is empty, therefore height is 0)\n            if (height !== 'auto') {\n              // Hide content if height is 0 (to prevent tabbing into it)\n              _this2.hideContent(newHeight); // TODO solve newHeight = 0\n            }\n            // Run a callback if it exists\n            runCallback(onAnimationEnd, { newHeight: newHeight });\n          }, totalDuration);\n        }\n      }\n    }\n  }, {\n    key: 'componentWillUnmount',\n    value: function componentWillUnmount() {\n      cancelAnimationFrames(this.animationFrameIDs);\n\n      clearTimeout(this.timeoutID);\n      clearTimeout(this.animationClassesTimeoutID);\n\n      this.timeoutID = null;\n      this.animationClassesTimeoutID = null;\n      this.animationStateClasses = null;\n    }\n  }, {\n    key: 'showContent',\n    value: function showContent(height) {\n      if (height === 0) {\n        this.contentElement.style.display = '';\n      }\n    }\n  }, {\n    key: 'hideContent',\n    value: function hideContent(newHeight) {\n      if (newHeight === 0) {\n        this.contentElement.style.display = 'none';\n      }\n    }\n  }, {\n    key: 'getStaticStateClasses',\n    value: function getStaticStateClasses(height) {\n      var _cx2;\n\n      return (0, _classnames2.default)((_cx2 = {}, _defineProperty(_cx2, this.animationStateClasses.static, true), _defineProperty(_cx2, this.animationStateClasses.staticHeightZero, height === 0), _defineProperty(_cx2, this.animationStateClasses.staticHeightSpecific, height > 0), _defineProperty(_cx2, this.animationStateClasses.staticHeightAuto, height === 'auto'), _cx2));\n    }\n  }, {\n    key: 'render',\n    value: function render() {\n      var _cx3,\n          _this3 = this;\n\n      var _props2 = this.props,\n          animateOpacity = _props2.animateOpacity,\n          applyInlineTransitions = _props2.applyInlineTransitions,\n          children = _props2.children,\n          className = _props2.className,\n          contentClassName = _props2.contentClassName,\n          delay = _props2.delay,\n          duration = _props2.duration,\n          easing = _props2.easing,\n          id = _props2.id,\n          style = _props2.style;\n      var _state = this.state,\n          height = _state.height,\n          overflow = _state.overflow,\n          animationStateClasses = _state.animationStateClasses,\n          shouldUseTransitions = _state.shouldUseTransitions;\n\n\n      var componentStyle = _extends({}, style, {\n        height: height,\n        overflow: overflow || style.overflow\n      });\n\n      if (shouldUseTransitions && applyInlineTransitions) {\n        componentStyle.transition = 'height ' + duration + 'ms ' + easing + ' ' + delay + 'ms';\n\n        // Include transition passed through styles\n        if (style.transition) {\n          componentStyle.transition = style.transition + ', ' + componentStyle.transition;\n        }\n\n        // Add webkit vendor prefix still used by opera, blackberry...\n        componentStyle.WebkitTransition = componentStyle.transition;\n      }\n\n      var contentStyle = {};\n\n      if (animateOpacity) {\n        contentStyle.transition = 'opacity ' + duration + 'ms ' + easing + ' ' + delay + 'ms';\n        // Add webkit vendor prefix still used by opera, blackberry...\n        contentStyle.WebkitTransition = contentStyle.transition;\n\n        if (height === 0) {\n          contentStyle.opacity = 0;\n        }\n      }\n\n      var componentClasses = (0, _classnames2.default)((_cx3 = {}, _defineProperty(_cx3, animationStateClasses, true), _defineProperty(_cx3, className, className), _cx3));\n\n      // Check if user passed aria-hidden prop\n      var hasAriaHiddenProp = typeof this.props['aria-hidden'] !== 'undefined';\n      var ariaHidden = hasAriaHiddenProp ? this.props['aria-hidden'] : height === 0;\n\n      return _react2.default.createElement(\n        'div',\n        _extends({}, omit.apply(undefined, [this.props].concat(PROPS_TO_OMIT)), {\n          'aria-hidden': ariaHidden,\n          className: componentClasses,\n          id: id,\n          style: componentStyle\n        }),\n        _react2.default.createElement(\n          'div',\n          {\n            className: contentClassName,\n            style: contentStyle,\n            ref: function ref(el) {\n              return _this3.contentElement = el;\n            }\n          },\n          children\n        )\n      );\n    }\n  }]);\n\n  return AnimateHeight;\n}(_react2.default.Component);\n\nvar heightPropType = function heightPropType(props, propName, componentName) {\n  var value = props[propName];\n\n  if (typeof value === 'number' && value >= 0 || isPercentage(value) || value === 'auto') {\n    return null;\n  }\n\n  return new TypeError('value \"' + value + '\" of type \"' + (typeof value === 'undefined' ? 'undefined' : _typeof(value)) + '\" is invalid type for ' + propName + ' in ' + componentName + '. ' + 'It needs to be a positive number, string \"auto\" or percentage string (e.g. \"15%\").');\n};\n\nAnimateHeight.propTypes = {\n  'aria-hidden': _propTypes2.default.bool,\n  animateOpacity: _propTypes2.default.bool,\n  animationStateClasses: _propTypes2.default.object,\n  applyInlineTransitions: _propTypes2.default.bool,\n  children: _propTypes2.default.any.isRequired,\n  className: _propTypes2.default.string,\n  contentClassName: _propTypes2.default.string,\n  delay: _propTypes2.default.number,\n  duration: _propTypes2.default.number,\n  easing: _propTypes2.default.string,\n  height: heightPropType,\n  id: _propTypes2.default.string,\n  onAnimationEnd: _propTypes2.default.func,\n  onAnimationStart: _propTypes2.default.func,\n  style: _propTypes2.default.object\n};\n\nAnimateHeight.defaultProps = {\n  animateOpacity: false,\n  animationStateClasses: ANIMATION_STATE_CLASSES,\n  applyInlineTransitions: true,\n  duration: 250,\n  delay: 0,\n  easing: 'ease',\n  style: {}\n};\n\nexports.default = AnimateHeight;","/**\r\n * Gets raw max casts of a spell over a period of time.\r\n * @param cooldown the cooldown time of the spell, in seconds\r\n * @param duration the duration of the time period to assess, in milliseconds\r\n * @param charges the number of charges the spell has\r\n */\r\nexport default function calculateMaxCasts(cooldown: number, duration: number, charges = 1) {\r\n  return (duration / 1000 / cooldown) + charges - 1;\r\n}\r\n","import React from 'react';\r\n\r\nimport Analyzer, { SELECTED_PLAYER } from 'parser/core/Analyzer';\r\nimport SPELLS from 'common/SPELLS/index';\r\nimport SpellIcon from 'common/SpellIcon';\r\nimport { formatNumber, formatPercentage } from 'common/format';\r\n\r\nimport SpellLink from 'common/SpellLink';\r\nimport Enemies from 'parser/shared/modules/Enemies';\r\n\r\nimport { findByBossId } from 'raids';\r\nimport StatisticBox from 'interface/others/StatisticBox';\r\nimport HIT_TYPES from 'game/HIT_TYPES';\r\nimport MAGIC_SCHOOLS from 'game/MAGIC_SCHOOLS';\r\nimport Events from 'parser/core/Events';\r\n\r\nconst debug = false;\r\n\r\nclass MitigationCheck extends Analyzer {\r\n  static dependencies = {\r\n    enemies: Enemies,\r\n  };\r\n\r\n  checksPassedMap = new Map();\r\n  checksFailedMap = new Map();\r\n\r\n  checksPhysical = [];\r\n  checksMagical = [];\r\n\r\n  buffCheckPhysical = [];\r\n  buffCheckMagical = [];\r\n  buffCheckPhysAndMag = [];\r\n\r\n  debuffCheckPhysical = [];\r\n  debuffCheckMagical = [];\r\n  debuffCheckPhysAndMag = [];\r\n\r\n  constructor(...args) {\r\n    super(...args);\r\n    if (this.owner.boss == null) {\r\n      this.active = false;\r\n      return;\r\n    }\r\n    const boss = findByBossId(this.owner.boss.id);\r\n    if (\r\n      boss.fight.softMitigationChecks &&\r\n      boss.fight.softMitigationChecks.physical &&\r\n      boss.fight.softMitigationChecks.magical\r\n    ) {\r\n      this.checksPhysical = boss.fight.softMitigationChecks.physical;\r\n      this.checksMagical = boss.fight.softMitigationChecks.magical;\r\n      if (this.checksPhysical === undefined || this.checksMagical === undefined) {\r\n        this.checksPhysical = [];\r\n        this.checksMagical = [];\r\n      }\r\n    } else {\r\n      this.checksPhysical = [];\r\n      this.checksMagical = [];\r\n\r\n      this.buffCheckPhysical = [];\r\n      this.buffCheckMagical = [];\r\n      this.buffCheckPhysAndMag = [];\r\n\r\n      this.debuffCheckPhysical = [];\r\n      this.debuffCheckMagical = [];\r\n      this.debuffCheckPhysAndMag = [];\r\n    }\r\n    [...this.checksPhysical, ...this.checksMagical].forEach((e) => {\r\n      this.checksPassedMap.set(e, 0);\r\n      this.checksFailedMap.set(e, 0);\r\n    });\r\n    this.addEventListener(Events.damage.to(SELECTED_PLAYER), this.onDamageTaken);\r\n  }\r\n\r\n  onDamageTaken(event) {\r\n    const spell = event.ability.guid;\r\n    const hitType = event.ability.type;\r\n    let checks = [];\r\n    let buffCheck = [];\r\n    let debuffCheck = [];\r\n    if (hitType === MAGIC_SCHOOLS.ids.PHYSICAL) {\r\n      checks = this.checksPhysical;\r\n      buffCheck = [...this.buffCheckPhysical, ...this.buffCheckPhysAndMag];\r\n      debuffCheck = [...this.debuffCheckPhysical, ...this.debuffCheckPhysAndMag];\r\n    } else {\r\n      checks = this.checksMagical;\r\n      buffCheck = [...this.buffCheckMagical, ...this.buffCheckPhysAndMag];\r\n      debuffCheck = [...this.debuffCheckMagical, ...this.debuffCheckPhysAndMag];\r\n    }\r\n    if (checks.includes(spell) && !event.tick) {\r\n      debug && console.log(buffCheck);\r\n      debug && console.log(debuffCheck);\r\n      if (\r\n        buffCheck.some((e) => this.selectedCombatant.hasBuff(e)) ||\r\n        event.hitType === HIT_TYPES.IMMUNE\r\n      ) {\r\n        // pass checked if buff was up or the damage missed\r\n        this.checksPassedMap.set(spell, this.checksPassedMap.get(spell) + 1);\r\n      } else {\r\n        const enemy = this.enemies.getEntities()[event.sourceID];\r\n        //We want to get the source rather than the player's target, so no getEntity().\r\n        if (enemy && debuffCheck.some((e) => enemy.hasBuff(e, event.timestamp))) {\r\n          this.checksPassedMap.set(spell, this.checksPassedMap.get(spell) + 1);\r\n        } else {\r\n          this.checksFailedMap.set(spell, this.checksFailedMap.get(spell) + 1);\r\n        }\r\n      }\r\n    }\r\n  }\r\n\r\n  get tooltip() {\r\n    return [\r\n      ...this.buffCheckPhysical,\r\n      ...this.buffCheckMagical,\r\n      ...this.buffCheckPhysAndMag,\r\n      ...this.debuffCheckPhysical,\r\n      ...this.debuffCheckMagical,\r\n      ...this.debuffCheckPhysAndMag,\r\n    ].map((id) => <li key={id}>{SPELLS[id].name}</li>);\r\n  }\r\n\r\n  get physicalChecks() {\r\n    return this.checksPhysical.filter(\r\n      (spell) => this.checksPassedMap.get(spell) + this.checksFailedMap.get(spell) > 0,\r\n    );\r\n  }\r\n\r\n  get magicalChecks() {\r\n    return this.checksMagical.filter(\r\n      (spell) => this.checksPassedMap.get(spell) + this.checksFailedMap.get(spell) > 0,\r\n    );\r\n  }\r\n\r\n  statistic() {\r\n    const failSum = Array.from(this.checksFailedMap.values()).reduce(\r\n      (total, val) => total + val,\r\n      0,\r\n    );\r\n    const passSum = Array.from(this.checksPassedMap.values()).reduce(\r\n      (total, val) => total + val,\r\n      0,\r\n    );\r\n    if (failSum + passSum === 0) {\r\n      return null;\r\n    }\r\n    const buffCheck = [\r\n      ...this.buffCheckPhysical,\r\n      ...this.buffCheckMagical,\r\n      ...this.buffCheckPhysAndMag,\r\n    ];\r\n    let spellIconId;\r\n    if (buffCheck.length > 0) {\r\n      spellIconId = buffCheck[0];\r\n    } else {\r\n      spellIconId = SPELLS.SHIELD_BLOCK_BUFF.id;\r\n    }\r\n\r\n    const physicalTable =\r\n      this.physicalChecks.length > 0 ? (\r\n        <>\r\n          <thead>\r\n            <tr>\r\n              <th>Physical</th>\r\n              <th>Ability</th>\r\n              <th>Passed</th>\r\n              <th>Failed</th>\r\n            </tr>\r\n          </thead>\r\n          <tbody>\r\n            {this.physicalChecks.map((spell) => (\r\n              <tr key={spell}>\r\n                <td />\r\n                <th scope=\"row\">\r\n                  <SpellLink id={spell} style={{ height: '2.5em' }} />\r\n                </th>\r\n                <td>{formatNumber(this.checksPassedMap.get(spell))}</td>\r\n                <td>{formatNumber(this.checksFailedMap.get(spell))}</td>\r\n              </tr>\r\n            ))}\r\n          </tbody>\r\n        </>\r\n      ) : null;\r\n\r\n    const borderless = { borderTop: 'none' };\r\n    const magicalTable =\r\n      this.magicalChecks.length > 0 ? (\r\n        <>\r\n          <thead>\r\n            <tr>\r\n              <th style={borderless}>Magical</th>\r\n              <th style={borderless}>Ability</th>\r\n              <th style={borderless}>Passed</th>\r\n              <th style={borderless}>Failed</th>\r\n            </tr>\r\n          </thead>\r\n          <tbody>\r\n            {this.magicalChecks.map((spell) => (\r\n              <tr key={spell}>\r\n                <td />\r\n                <th scope=\"row\">\r\n                  <SpellLink id={spell} style={{ height: '2.5em' }} />\r\n                </th>\r\n                <td>{formatNumber(this.checksPassedMap.get(spell))}</td>\r\n                <td>{formatNumber(this.checksFailedMap.get(spell))}</td>\r\n              </tr>\r\n            ))}\r\n          </tbody>\r\n        </>\r\n      ) : null;\r\n\r\n    return (\r\n      <StatisticBox\r\n        icon={<SpellIcon id={spellIconId} />}\r\n        value={`${formatPercentage(passSum / (passSum + failSum))} %`}\r\n        label=\"Soft mitigation checks passed.\"\r\n        tooltip={\r\n          <>\r\n            Checks if one of the following buffs or debuffs were up during the mechanic:\r\n            <ul>{this.tooltip}</ul>\r\n          </>\r\n        }\r\n      >\r\n        <table className=\"table table-condensed\" style={{ fontWeight: 'bold' }}>\r\n          {physicalTable}\r\n          {magicalTable}\r\n        </table>\r\n      </StatisticBox>\r\n    );\r\n  }\r\n}\r\n\r\nexport default MitigationCheck;\r\n","import Analyzer, { Options, SELECTED_PLAYER } from 'parser/core/Analyzer';\r\nimport SpellIcon from 'common/SpellIcon';\r\nimport calculateMaxCasts from 'parser/core/calculateMaxCasts';\r\nimport Abilities from 'parser/core/modules/Abilities';\r\nimport SpellLink from 'common/SpellLink';\r\n\r\nimport StatisticBox, { STATISTIC_ORDER } from 'interface/others/StatisticBox';\r\nimport { formatNumber, formatPercentage } from 'common/format';\r\nimport Events, { CastEvent, DamageEvent } from 'parser/core/Events';\r\nimport { ThresholdStyle, When } from 'parser/core/ParseResults';\r\nimport Spell from 'common/SPELLS/Spell';\r\n\r\nimport React from 'react';\r\n\r\nimport { i18n } from '@lingui/core';\r\nimport { t } from '@lingui/macro';\r\n\r\n/*\r\n  Creates a suggestion for an AoE-Spell based on the amount of hits done and min. amount of hits possible\r\n*/\r\n\r\nclass AoESpellEfficiency extends Analyzer {\r\n  static dependencies = {\r\n    abilities: Abilities,\r\n  };\r\n  protected abilities!: Abilities;\r\n\r\n  ability!: Spell;\r\n  bonusDmg = 0;\r\n  casts: Array<{ timestamp: number, hits: number }> = [];\r\n\r\n  constructor(options: Options){\r\n    super(options);\r\n    this.addEventListener(Events.cast.by(SELECTED_PLAYER), this.onCast);\r\n    this.addEventListener(Events.damage.by(SELECTED_PLAYER), this.onDamage);\r\n  }\r\n\r\n  onCast(event: CastEvent) {\r\n    if(event.ability.guid !== this.ability.id) {\r\n      return;\r\n    }\r\n    this.casts.push({\r\n      timestamp: event.timestamp,\r\n      hits: 0,\r\n    });\r\n  }\r\n\r\n  onDamage(event: DamageEvent) {\r\n    if (event.ability.guid !== this.ability.id) {\r\n      return;\r\n    }\r\n\r\n    this.bonusDmg += event.amount + (event.absorbed || 0);\r\n    this.casts[this.casts.length - 1].hits += 1;\r\n  }\r\n\r\n  get maxCasts() {\r\n    const cooldown = this.abilities.getAbility(this.ability.id)?.cooldown ?? Infinity;\r\n    return Math.ceil(calculateMaxCasts(cooldown, this.owner.fightDuration));\r\n  }\r\n\r\n  get possibleHits() {\r\n    const cooldownS = this.abilities.getAbility(this.ability.id)?.cooldown;\r\n    if (cooldownS === undefined) {\r\n      return 0;\r\n    }\r\n    const cooldownMS = cooldownS * 1000;\r\n    let lastCast: number | null = null;\r\n    let missedCasts = 0;\r\n    let timeSum = 0;\r\n\r\n    this.casts.forEach(e => {\r\n      if (!lastCast) {\r\n        timeSum = e.timestamp - this.owner.fight.start_time;\r\n      } else {\r\n        timeSum += e.timestamp - lastCast - cooldownMS;\r\n      }\r\n      lastCast = e.timestamp;\r\n      missedCasts += Math.floor(timeSum / cooldownMS);\r\n      timeSum %= cooldownMS;\r\n      // reset the time sum if a cast hit more than one target (we have to assume this cast was at an optimal time)\r\n      if (e.hits > 1) {\r\n        timeSum = 0;\r\n      }\r\n    });\r\n\r\n    timeSum += this.owner.currentTimestamp - (lastCast || 0);\r\n    missedCasts += Math.floor(timeSum / cooldownMS);\r\n    timeSum %= cooldownMS;\r\n\r\n    return Math.max(this.totalHits + missedCasts, this.maxCasts);\r\n  }\r\n\r\n  get totalHits() {\r\n    return this.casts.reduce((a, b) => a + b.hits, 0);\r\n  }\r\n\r\n  get hitSuggestionThreshold() {\r\n    return {\r\n      actual: this.totalHits / this.possibleHits,\r\n      isLessThan: {\r\n        minor: 0.95,\r\n        average: 0.9,\r\n        major: .8,\r\n      },\r\n      style: ThresholdStyle.PERCENTAGE,\r\n    };\r\n  }\r\n\r\n  suggestions(when: When) {\r\n    when(this.hitSuggestionThreshold)\r\n      .addSuggestion((suggest) => suggest(<>It's benefitial to delay <SpellLink id={this.ability.id} /> to hit multiple targets, but don't delay it too long or you'll miss out on casts and possible hits.</>)\r\n          .icon(this.ability.icon)\r\n          .actual(i18n._(t('shared.suggestions.aoeSpells.efficiency')`${this.totalHits} total hits`))\r\n          .recommended(`${this.possibleHits} or more hits were possible`));\r\n  }\r\n\r\n  statistic() {\r\n    return (\r\n      <StatisticBox\r\n        position={STATISTIC_ORDER.CORE(5)}\r\n        icon={<SpellIcon id={this.ability.id} />}\r\n        value={`${formatNumber(this.bonusDmg / this.owner.fightDuration * 1000)} DPS`}\r\n        label=\"Damage contributed\"\r\n        tooltip={`${this.ability.name} added a total of ${formatNumber(this.bonusDmg)} damage (${formatPercentage(this.owner.getPercentageOfTotalDamageDone(this.bonusDmg))}%).`}\r\n      />\r\n    );\r\n  }\r\n}\r\n\r\nexport default AoESpellEfficiency;\r\n"],"sourceRoot":""}