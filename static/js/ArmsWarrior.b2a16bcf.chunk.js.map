{"version":3,"sources":["parser/warrior/arms/normalizers/OverpowerStacks.js","parser/warrior/arms/modules/features/AlwaysBeCasting.js","parser/warrior/arms/modules/core/Dots/DeepWoundsUptime.js","parser/warrior/arms/modules/core/Dots/RendUptime.js","parser/warrior/arms/modules/core/Execute/ExecuteRange.js","parser/warrior/arms/modules/core/Execute/MortalStrike.js","parser/warrior/arms/modules/features/SpellUsable.js","parser/warrior/arms/modules/core/SweepingStrikes.js","parser/warrior/arms/modules/features/Checklist/Component.js","parser/warrior/arms/modules/features/Checklist/Module.js","parser/warrior/arms/modules/Abilities.js","parser/warrior/arms/modules/features/CooldownThroughputTracker.js","parser/warrior/arms/modules/features/Channeling.js","parser/warrior/arms/modules/features/RageTracker.js","parser/warrior/arms/modules/features/RageDetails.js","parser/warrior/arms/modules/core/TacticianProc.js","parser/warrior/arms/modules/core/Overpower.js","parser/warrior/arms/modules/core/Slam.js","parser/warrior/arms/modules/core/Execute/Rend.js","parser/warrior/arms/modules/core/Dots/index.js","parser/warrior/arms/modules/talents/AngerManagement.js","parser/warrior/arms/modules/talents/Skullsplitter.js","parser/warrior/arms/modules/talents/SuddenDeath.js","parser/warrior/arms/modules/talents/WarMachine.js","parser/warrior/arms/modules/talents/StormBolt.js","parser/warrior/arms/modules/talents/ImpendingVictory.js","parser/warrior/arms/modules/talents/FervorOfBattle.js","parser/warrior/arms/modules/talents/SecondWind.js","parser/warrior/arms/modules/talents/Cleave.js","parser/warrior/arms/modules/talents/Warbreaker.js","parser/warrior/arms/modules/talents/Avatar.js","parser/warrior/arms/modules/talents/Ravager.js","parser/warrior/arms/modules/talents/index.js","parser/warrior/arms/modules/talents/DefensiveStance.js","parser/warrior/arms/CombatLogParser.js","parser/core/calculateEffectiveDamage.js","parser/shared/modules/resources/resourcetracker/ResourceTracker.ts","parser/shared/modules/resources/resourcetracker/ResourceBreakdown.tsx","interface/others/StatisticListBoxItem.js","../node_modules/react-animate-height/lib/AnimateHeight.js","interface/others/StatisticsListBox.js","parser/core/calculateMaxCasts.ts"],"names":["OverpowerNormalizer","events","fixedEvents","forEach","event","eventIndex","push","type","EventType","Cast","ability","guid","SPELLS","OVERPOWER","id","castTimestamp","timestamp","previousEventIndex","previousEvent","sourceID","ApplyBuff","ApplyBuffStack","splice","__modified","EventsNormalizer","AlwaysBeCasting","when","this","downtimeSuggestionThresholds","addSuggestion","suggest","actual","recommended","icon","i18n","_","formatPercentage","downtimePercentage","isGreaterThan","minor","average","major","style","CoreAlwaysBeCasting","DeepWoundsUptime","suggestionThresholds","SpellLink","MASTERY_DEEP_WOUNDS","DEEP_WOUNDS","StatisticListBoxItem","title","value","uptime","enemies","getBuffUptime","MASTERY_DEEP_WOUNDS_DEBUFF","owner","fightDuration","isLessThan","Analyzer","dependencies","Enemies","RendUptime","args","active","selectedCombatant","hasTalent","REND_TALENT","ExecuteRangeTracker","execRange","MASSACRE_TALENT_ARMS","enemyMap","isExecPhase","execPhaseStart","execPhaseDuration","lastHitInExecPhase","addEventListener","Events","damage","by","SELECTED_PLAYER","_onCast","fightend","_onFinished","targetIsFriendly","targetString","encodeTargetString","targetID","targetInstance","hitPoints","maxHitPoints","isTargetInExecuteRange","MortalStrikeAnalyzer","mortalStrikesOutsideExecuteRange","mortalStrikesInExecuteRange","cast","spell","MORTAL_STRIKE","_onMortalStrikeCast","cd","abilities","getAbility","cooldown","max","calculateMaxCasts","executeRange","executionPhaseDuration","maxCast","meta","isInefficientCast","inefficientCastReason","badMortalStrikeThresholds","EXECUTE","goodMortalStrikeThresholds","Abilities","ExecuteRange","SpellUsable","spellId","isOnCooldown","endCooldown","CoreSpellUsable","SweepingStrikes","totalCasts","badCasts","SWEEPING_STRIKES","_castSweepingStrikes","WARBREAKER_TALENT","COLOSSUS_SMASH","spellCd","spellUsable","cooldownRemaining","name","ArmWarriorChecklist","combatant","castEfficiency","thresholds","DotUptime","props","Requirement","AbilityRequirement","GenericCastEfficiencyRequirement","getCastEfficiencyForSpellId","Rule","description","BLADESTORM","RAVAGER_TALENT_ARMS","href","target","rel","SKULLSPLITTER_TALENT","AVATAR_TALENT","rend","DEADLY_CALM_TALENT","goodMortalStrike","badMortalStrike","DIE_BY_THE_SWORD","RALLYING_CRY","CHARGE","HEROIC_LEAP","PreparationRule","Checklist","Component","combatants","selected","preparationRuleAnalyzer","deepWounds","deepWoundsUptime","rendUptime","alwaysBeCasting","mortalStrike","badSweepingStrikes","sweepingStrikes","BaseChecklist","Combatants","CastEfficiency","PreparationRuleAnalyzer","MortalStrike","category","SPELL_CATEGORIES","ROTATIONAL","haste","gcd","base","suggestion","recommendedEfficiency","charges","DREADNAUGHT_TALENT","buffSpellId","SLAM","enabled","EXECUTE_GLYPHED","ROTATIONAL_AOE","CLEAVE_TALENT","WHIRLWIND","VICTORY_RUSH","OTHERS","IMPENDING_VICTORY_TALENT","DEFENSIVE","COOLDOWNS","DEFENSIVE_STANCE_TALENT","importance","ISSUE_IMPORTANCE","MINOR","extraSuggestion","RALLYING_CRY_BUFF","UTILITY","DOUBLE_TIME_TALENT","BOUNDING_STRIDE_BUFF","BOUNDING_STRIDE_TALENT","STORM_BOLT_TALENT","PUMMEL","BERSERKER_RAGE","HEROIC_THROW","INTIMIDATING_SHOUT","HAMSTRING","BATTLE_SHOUT","TAUNT","CoreAbilities","CooldownThroughputTracker","CoreCooldownThroughputTracker","cooldownSpells","summary","BUILT_IN_SUMMARY_TYPES","DAMAGE","castCooldowns","duration","Channeling","options","applybuff","onApplyBuff","removebuff","onRemoveBuff","beginChannel","endChannel","CoreChanneling","RageUsage","lastMeleeTaken","resource","RESOURCE_TYPES","RAGE","MELEE","onDamage","getResource","cost","processInvisibleEnergize","RAGE_AUTO_ATTACKS","ResourceTracker","RageDetails","wastedPercent","StatisticBox","position","STATISTIC_ORDER","CORE","Icon","label","tooltip","rageTracker","wasted","generated","url","render","Panel","ResourceBreakdown","tracker","showSpenders","RageTracker","TacticianProc","totalProcs","TACTICIAN","_countTacticianProc","refreshbuff","SpellIcon","OverpowerAnalyzer","overpowerCasts","wastedProc","_onOverpowerCast","overpower","getBuff","stacks","isAvailable","WastedOverpowerThresholds","OPTIONAL","Slam","badCast","totalCast","_onSlamCast","hasBuff","CRUSHING_ASSAULT_BUFF","isEnhancedCast","enhancedCastReason","badCastSuggestionThresholds","RendAnalyzer","rends","rendsInExecuteRange","_onRendCast","executeRendsThresholds","DotUptimeStatisticBox","Object","keys","constructor","map","includes","StatisticsListBox","module","Fragment","key","subStatistic","deepwoundsUptime","AngerManagement","cooldownsAffected","totalRageSpend","wastedReduction","effectiveReduction","ANGER_MANAGEMENT_TALENT","e","formatDuration","classResources","rage","find","rageSpend","reduction","reduceCooldown","valueTooltip","Skullsplitter","abilityTracker","total","damageEffective","avg","casts","formatThousands","AbilityTracker","SuddenDeath","totalProc","totalDamages","SUDDEN_DEATH_TALENT_ARMS","EXECUTE_DAMAGE","_onExecuteDamage","SUDDEN_DEATH_TALENT_ARMS_BUFF","_countSuddenDeathProc","amount","absorbed","formatNumber","WarMachine","WAR_MACHINE_TALENT","WAR_MACHINE_TALENT_BUFF","StormBolt","stun","applydebuff","STORM_BOLT_TALENT_DEBUFF","_onStun","ImpendingVictory","totalHeal","heal","IMPENDING_VICTORY_TALENT_HEAL","_onImpendingVictoryHeal","impendingVictory","FervorOfBattle","bonusDamage","lastWhirlwindCast","whirlwind","FERVOR_OF_BATTLE_TALENT","_onWhirlwindCast","WHIRLWIND_DAMAGE_1","WHIRLWIND_DAMAGE_2_3","_onFobDamage","calculateEffectiveDamage","dps","getPercentageOfTotalDamageDone","SecondWind","SECOND_WIND_TALENT","SECOND_WIND_TALENT_HEAL","healingEffective","Cleave","Warbreaker","_onDamage","getEntity","COLOSSUS_SMASH_DEBUFF","Avatar","Ravager","RAVAGER_DAMAGE","TalentStatisticBox","skullsplitter","suddenDeath","warMachine","stormBolt","fervorOfBattle","secondWind","cleave","warbreaker","avatar","angerManagement","ravager","DefensiveStance","totalDamageMitigated","totalDamageLost","to","_onDamageTaken","_onDamageDealt","perSecond","tradeoff","preMitigatedDefensiveStance","damageDone","footer","className","Tooltip","content","width","damageTradeoff","src","alt","drps","dlps","dl","dr","CombatLogParser","CoreCombatLogParser","specModules","overpowerStacks","OverpowerStacks","checklist","cooldownThroughputTracker","channeling","rageDetail","RageDetail","tacticianProc","Overpower","slam","Rend","dotUptimes","DotUptimes","talents","Talents","defensiveStance","increase","raw","eventEmitter","current","resourceUpdates","buildersObj","spendersObj","maxResource","energize","onEnergize","onCast","spent","spentByCast","resourceChangeType","waste","gain","resourceChange","_applyBuilder","maxGain","undefined","Math","min","initBuilderAbility","used","shouldProcessCastEvent","eventResource","getReducedCost","initSpenderAbility","triggerSpendEvent","resourceCost","r","fabricatedEvent","SpendResource","__fabricated","fabricateEvent","Boolean","values","reduce","acc","EventEmitter","abilityId","Number","sort","a","b","filter","resourceName","prepareGenerated","prepareSpent","totalGenerated","totalWasted","totalSpent","spendersCasts","colSpan","paddingRight","textAlign","toFixed","React","titleTooltip","defineProperty","exports","_typeof","Symbol","iterator","obj","prototype","_extends","assign","i","arguments","length","source","hasOwnProperty","call","_createClass","defineProperties","descriptor","enumerable","configurable","writable","Constructor","protoProps","staticProps","_react2","_interopRequireDefault","require","_propTypes2","_classnames2","__esModule","default","_defineProperty","ANIMATION_STATE_CLASSES","animating","animatingUp","animatingDown","animatingToHeightZero","animatingToHeightAuto","animatingToHeightSpecific","static","staticHeightZero","staticHeightAuto","staticHeightSpecific","PROPS_TO_OMIT","omit","_len","Array","_key","res","objectKeys","indexOf","cancelAnimationFrames","requestAnimationFrameIDs","cancelAnimationFrame","isNumber","n","isNaN","parseFloat","isFinite","isPercentage","height","search","substr","runCallback","callback","params","AnimateHeight","_React$Component","instance","TypeError","_classCallCheck","_this","self","ReferenceError","_possibleConstructorReturn","__proto__","getPrototypeOf","animationFrameIDs","overflow","animationStateClasses","getStaticStateClasses","state","shouldUseTransitions","subClass","superClass","create","setPrototypeOf","_inherits","contentElement","hideContent","prevProps","prevState","_this2","_props","delay","onAnimationEnd","onAnimationStart","_cx","showContent","contentHeight","offsetHeight","totalDuration","newHeight","timeoutState","isCurrentHeightAuto","timeoutAnimationStateClasses","setState","clearTimeout","timeoutID","animationClassesTimeoutID","requestAnimationFrame","startAnimationHelper","setTimeout","display","_cx2","_cx3","_this3","_props2","animateOpacity","applyInlineTransitions","children","contentClassName","easing","_state","componentStyle","transition","WebkitTransition","contentStyle","opacity","componentClasses","ariaHidden","createElement","apply","concat","ref","el","propTypes","bool","object","any","isRequired","string","number","propName","componentName","func","defaultProps","bodyStyle","others","STATISTIC_CATEGORY","GENERAL"],"mappings":"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","file":"static/js/ArmsWarrior.b2a16bcf.chunk.js","sourcesContent":["import SPELLS from 'common/SPELLS';\r\nimport EventsNormalizer from 'parser/core/EventsNormalizer';\r\nimport { EventType } from 'parser/core/Events';\r\n\r\nclass OverpowerNormalizer extends EventsNormalizer {\r\n\r\n  //Ensures that the apply buff event for Overpower is sorted after the Overpower.\r\n  normalize(events) {\r\n    const fixedEvents = [];\r\n    events.forEach((event, eventIndex) => {\r\n      fixedEvents.push(event);\r\n\r\n      if (event.type === EventType.Cast && event.ability.guid === SPELLS.OVERPOWER.id) {\r\n        const castTimestamp = event.timestamp;\r\n\r\n        for (let previousEventIndex = eventIndex; previousEventIndex >= 0; previousEventIndex -= 1) {\r\n          const previousEvent = fixedEvents[previousEventIndex];\r\n          if (((castTimestamp - previousEvent.timestamp) > 50) || (!previousEvent.ability.guid === SPELLS.OVERPOWER.id && !previousEvent.sourceID === event.sourceID)) {\r\n            break;\r\n          }\r\n\r\n          if (previousEvent.type === EventType.ApplyBuff || previousEvent.type === EventType.ApplyBuffStack) {\r\n            fixedEvents.splice(previousEventIndex, 1);\r\n            fixedEvents.push(previousEvent);\r\n            previousEvent.__modified = true;\r\n            break;\r\n          }\r\n        }\r\n      }\r\n    });\r\n\r\n    return fixedEvents;\r\n  }\r\n}\r\n\r\nexport default OverpowerNormalizer;\r\n","import CoreAlwaysBeCasting from 'parser/shared/modules/AlwaysBeCasting';\r\nimport { formatPercentage } from 'common/format';\r\nimport { i18n } from '@lingui/core';\r\nimport { t } from '@lingui/macro';\r\n\r\nclass AlwaysBeCasting extends CoreAlwaysBeCasting {\r\n\r\n  get downtimeSuggestionThresholds() {\r\n    return {\r\n      actual: this.downtimePercentage,\r\n      isGreaterThan: {\r\n        minor: 0.15,\r\n        average: 0.20,\r\n        major: 0.25,\r\n      },\r\n      style: 'percentage',\r\n    };\r\n  }\r\n\r\n  suggestions(when) {\r\n    when(this.downtimeSuggestionThresholds)\r\n      .addSuggestion((suggest, actual, recommended) => suggest('Your downtime can be improved. Try to Always Be Casting (ABC), try to reduce the delay between casting spells.')\r\n        .icon('spell_mage_altertime')\r\n        .actual(i18n._(t('warrior.arms.suggestions.alwaysBeCasting.downtime')`${formatPercentage(actual)}% downtime`))\r\n        .recommended(`<${formatPercentage(recommended)}% is recommended`));\r\n  }\r\n}\r\n\r\nexport default AlwaysBeCasting;\r\n","import React from 'react';\r\nimport Analyzer from 'parser/core/Analyzer';\r\nimport Enemies from 'parser/shared/modules/Enemies';\r\nimport SPELLS from 'common/SPELLS/index';\r\nimport { formatPercentage } from 'common/format';\r\nimport SpellLink from 'common/SpellLink';\r\nimport StatisticListBoxItem from 'interface/others/StatisticListBoxItem';\r\n\r\nimport { i18n } from '@lingui/core';\r\nimport { t } from '@lingui/macro';\r\n\r\nclass DeepWoundsUptime extends Analyzer {\r\n  get uptime() {\r\n    return this.enemies.getBuffUptime(SPELLS.MASTERY_DEEP_WOUNDS_DEBUFF.id) / this.owner.fightDuration;\r\n  }\r\n\r\n  get suggestionThresholds() {\r\n    return {\r\n      actual: this.uptime,\r\n      isLessThan: {\r\n        minor: 0.8,\r\n        average: 0.7,\r\n        major: 0.6,\r\n      },\r\n      style: 'percentage',\r\n    };\r\n  }\r\n\r\n  static dependencies = {\r\n    enemies: Enemies,\r\n  };\r\n\r\n  suggestions(when) {\r\n    when(this.suggestionThresholds).addSuggestion((suggest, actual, recommended) => suggest(<>Your <SpellLink id={SPELLS.MASTERY_DEEP_WOUNDS.id} /> uptime can be improved. Try to use your core abilities more often to apply <SpellLink id={SPELLS.DEEP_WOUNDS.id} /> on your target</>)\r\n      .icon(SPELLS.MASTERY_DEEP_WOUNDS.icon)\r\n      .actual(i18n._(t('warrior.arms.suggestions.deepWounds.uptime')`${formatPercentage(actual)}% Deep Wounds uptime`))\r\n      .recommended(`>${formatPercentage(recommended)}% is recommended`));\r\n  }\r\n\r\n  subStatistic() {\r\n    return (\r\n      <StatisticListBoxItem\r\n        title={<><SpellLink id={SPELLS.MASTERY_DEEP_WOUNDS.id} /> uptime</>}\r\n        value={`${formatPercentage(this.uptime)} %`}\r\n      />\r\n    );\r\n  }\r\n}\r\n\r\nexport default DeepWoundsUptime;\r\n","import React from 'react';\r\nimport Analyzer from 'parser/core/Analyzer';\r\nimport Enemies from 'parser/shared/modules/Enemies';\r\nimport SPELLS from 'common/SPELLS/index';\r\nimport { formatPercentage } from 'common/format';\r\nimport SpellLink from 'common/SpellLink';\r\nimport StatisticListBoxItem from 'interface/others/StatisticListBoxItem';\r\nimport { i18n } from '@lingui/core';\r\nimport { t } from '@lingui/macro';\r\n\r\n/**\r\n * Example report: /report/gXbFvNaJTBf39jYV/1-LFR+Taloc+-+Kill+(4:06)/4-Dimentionz\r\n */\r\n\r\nclass RendUptime extends Analyzer {\r\n  get uptime() {\r\n    return this.enemies.getBuffUptime(SPELLS.REND_TALENT.id) / this.owner.fightDuration;\r\n  }\r\n\r\n  get suggestionThresholds() {\r\n    return {\r\n      actual: this.uptime,\r\n      isLessThan: {\r\n        minor: 0.7,\r\n        average: 0.65,\r\n        major: 0.6,\r\n      },\r\n      style: 'percentage',\r\n    };\r\n  }\r\n\r\n  static dependencies = {\r\n    enemies: Enemies,\r\n  };\r\n\r\n  constructor(...args) {\r\n    super(...args);\r\n    this.active = this.selectedCombatant.hasTalent(SPELLS.REND_TALENT.id);\r\n  }\r\n\r\n  suggestions(when) {\r\n    when(this.suggestionThresholds).addSuggestion((suggest, actual, recommended) => suggest(<>Your <SpellLink id={SPELLS.REND_TALENT.id} /> uptime can be improved. If you choose this talent, you better use it !</>)\r\n      .icon(SPELLS.REND_TALENT.icon)\r\n      .actual(i18n._(t('warrior.arms.suggestions.rend.uptime')`${formatPercentage(actual)}% Rend uptime`))\r\n      .recommended(`>${formatPercentage(recommended)}% is recommended`));\r\n  }\r\n\r\n  subStatistic() {\r\n    return (\r\n      <StatisticListBoxItem\r\n        title={<><SpellLink id={SPELLS.REND_TALENT.id} /> uptime</>}\r\n        value={`${formatPercentage(this.uptime)} %`}\r\n      />\r\n    );\r\n  }\r\n}\r\n\r\nexport default RendUptime;\r\n","import Analyzer, { SELECTED_PLAYER } from 'parser/core/Analyzer';\r\nimport { encodeTargetString } from 'parser/shared/modules/EnemyInstances';\r\nimport SPELLS from 'common/SPELLS';\r\nimport Events from 'parser/core/Events';\r\n\r\nconst debug = false;\r\n\r\nconst EXECUTE_RANGE = 0.2;\r\nconst EXECUTE_RANGE_MASSACRE = 0.35;\r\n\r\n/**\r\n * Tracks whether enemies are in Execute range through damage events so that it can be accessed in cast events by other modules.\r\n * Tracks the duration of the execution range of the fight.\r\n * @extends Analyzer\r\n */\r\nclass ExecuteRangeTracker extends Analyzer {\r\n\r\n  execRange = (this.selectedCombatant.hasTalent(SPELLS.MASSACRE_TALENT_ARMS.id) ? EXECUTE_RANGE_MASSACRE : EXECUTE_RANGE);\r\n  enemyMap = {};\r\n\r\n  isExecPhase = false;\r\n  execPhaseStart = 0;\r\n  execPhaseDuration = 0;\r\n  lastHitInExecPhase = 0;\r\n\r\n  constructor(...args) {\r\n    super(...args);\r\n    this.addEventListener(Events.damage.by(SELECTED_PLAYER), this._onCast);\r\n    this.addEventListener(Events.fightend, this._onFinished);\r\n  }\r\n\r\n  _onCast(event) {\r\n    if (event.targetIsFriendly) {\r\n      return;\r\n    }\r\n    const targetString = encodeTargetString(event.targetID, event.targetInstance);\r\n    this.enemyMap[targetString] = event.hitPoints / event.maxHitPoints <= this.execRange;\r\n\r\n    if (this.isTargetInExecuteRange(event)) {\r\n      this.lastHitInExecPhase = event.timestamp;\r\n    }\r\n\r\n    if (this.isTargetInExecuteRange(event) && !this.isExecPhase) {\r\n      this.isExecPhase = true;\r\n      this.execPhaseStart = event.timestamp;\r\n      debug && console.log('Execution phase started');\r\n    }\r\n\r\n    if (!this.isTargetInExecuteRange(event) && this.isExecPhase && event.timestamp > this.lastHitInExecPhase + 2000) {\r\n      this.isExecPhase = false;\r\n      this.execPhaseDuration += event.timestamp - this.execPhaseStart;\r\n      debug && console.log('Execution phase finished, total duration: ' + this.execPhaseDuration);\r\n    }\r\n  }\r\n\r\n  _onFinished(event) {\r\n    if (this.isExecPhase) {\r\n      this.execPhaseDuration += event.timestamp - this.execPhaseStart;\r\n      debug && console.log('Execution phase finished, total duration: ' + this.execPhaseDuration);\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Returns whether the target is in Execute range.\r\n   */\r\n  isTargetInExecuteRange({ targetID, targetInstance }) {\r\n    const targetString = encodeTargetString(targetID, targetInstance);\r\n    return this.enemyMap[targetString];\r\n  }\r\n\r\n  /**\r\n   * Returns the duration of the execution phase during the fight\r\n   */\r\n  executionPhaseDuration() {\r\n    return this.execPhaseDuration;\r\n  }\r\n}\r\n\r\nexport default ExecuteRangeTracker;\r\n","import React from 'react';\r\nimport Analyzer, { SELECTED_PLAYER } from 'parser/core/Analyzer';\r\nimport { formatPercentage } from 'common/format';\r\nimport SPELLS from 'common/SPELLS';\r\nimport SpellLink from 'common/SpellLink';\r\nimport Abilities from 'parser/core/modules/Abilities';\r\nimport calculateMaxCasts from 'parser/core/calculateMaxCasts';\r\nimport Events from 'parser/core/Events';\r\nimport { i18n } from '@lingui/core';\r\nimport { t } from '@lingui/macro';\r\n\r\nimport ExecuteRange from './ExecuteRange';\r\n\r\nclass MortalStrikeAnalyzer extends Analyzer {\r\n  get goodMortalStrikeThresholds() {\r\n    const cd = this.abilities.getAbility(SPELLS.MORTAL_STRIKE.id).cooldown;\r\n    const max = calculateMaxCasts(cd, this.owner.fightDuration - this.executeRange.executionPhaseDuration());\r\n    const maxCast = this.mortalStrikesOutsideExecuteRange / max > 1 ? this.mortalStrikesOutsideExecuteRange : max;\r\n\r\n    return {\r\n      actual: this.mortalStrikesOutsideExecuteRange / maxCast,\r\n      isLessThan: {\r\n        minor: 0.9,\r\n        average: 0.8,\r\n        major: 0.7,\r\n      },\r\n      style: 'percentage',\r\n    };\r\n  }\r\n\r\n  get badMortalStrikeThresholds() {\r\n    const cd = this.abilities.getAbility(SPELLS.MORTAL_STRIKE.id).cooldown;\r\n    const max = calculateMaxCasts(cd, this.executeRange.executionPhaseDuration());\r\n    const maxCast = this.mortalStrikesInExecuteRange / max > 1 ? this.mortalStrikesInExecuteRange : max;\r\n\r\n    return {\r\n      actual: this.mortalStrikesInExecuteRange / maxCast,\r\n      isGreaterThan: {\r\n        minor: 0,\r\n        average: 0.05,\r\n        major: 0.1,\r\n      },\r\n      style: 'percentage',\r\n    };\r\n  }\r\n\r\n  static dependencies = {\r\n    abilities: Abilities,\r\n    executeRange: ExecuteRange,\r\n  };\r\n  mortalStrikesOutsideExecuteRange = 0;\r\n  mortalStrikesInExecuteRange = 0;\r\n\r\n  constructor(...args) {\r\n    super(...args);\r\n    this.addEventListener(Events.cast.by(SELECTED_PLAYER).spell(SPELLS.MORTAL_STRIKE), this._onMortalStrikeCast);\r\n  }\r\n\r\n  _onMortalStrikeCast(event) {\r\n    if (this.executeRange.isTargetInExecuteRange(event)) {\r\n      this.mortalStrikesInExecuteRange += 1;\r\n\r\n      event.meta = event.meta || {};\r\n      event.meta.isInefficientCast = true;\r\n      event.meta.inefficientCastReason = 'This Mortal Strike was used on a target in Execute range.';\r\n    } else {\r\n      this.mortalStrikesOutsideExecuteRange += 1;\r\n    }\r\n  }\r\n\r\n  suggestions(when) {\r\n    when(this.badMortalStrikeThresholds).addSuggestion((suggest, actual, recommended) => suggest(<>Try to avoid using <SpellLink id={SPELLS.MORTAL_STRIKE.id} icon /> on a target in <SpellLink id={SPELLS.EXECUTE.id} icon /> range, as <SpellLink id={SPELLS.MORTAL_STRIKE.id} /> is less rage efficient than <SpellLink id={SPELLS.EXECUTE.id} />.</>)\r\n      .icon(SPELLS.MORTAL_STRIKE.icon)\r\n      .actual(i18n._(t('warrior.arms.suggestions.mortalStrike.efficiency')`Mortal Strike was cast ${this.mortalStrikesInExecuteRange} times accounting for ${formatPercentage(actual)}% of the total possible casts of Mortal Strike during a time a target was in execute range.`))\r\n      .recommended(`${formatPercentage(recommended)}% is recommended`));\r\n    when(this.goodMortalStrikeThresholds).addSuggestion((suggest, actual, recommended) => suggest(<>Try to cast <SpellLink id={SPELLS.MORTAL_STRIKE.id} icon /> more often when the target is outside execute range.</>)\r\n      .icon(SPELLS.MORTAL_STRIKE.icon)\r\n      .actual(i18n._(t('warrior.arms.suggestions.motalStrike.outsideExecute')`Mortal Strike was used ${formatPercentage(actual)}% of the time on a target outside execute range.`))\r\n      .recommended(`${formatPercentage(recommended)}% is recommended`));\r\n  }\r\n}\r\n\r\nexport default MortalStrikeAnalyzer;\r\n","import SPELLS from 'common/SPELLS';\r\nimport CoreSpellUsable from 'parser/shared/modules/SpellUsable';\r\n\r\nclass SpellUsable extends CoreSpellUsable {\r\n  static dependencies = {\r\n    ...CoreSpellUsable.dependencies,\r\n  };\r\n\r\n  beginCooldown(spellId, ...args) {\r\n    // Tactician passive: You have a 1.40% chance per Rage spent on damaging abilities to reset the remaining cooldown on Overpower.\r\n    if (spellId === SPELLS.OVERPOWER.id) {\r\n      if (this.isOnCooldown(spellId)) {\r\n        this.endCooldown(spellId);\r\n      }\r\n    }\r\n\r\n    // We must do this after ending the cd or it will trigger an error\r\n    super.beginCooldown(spellId, ...args);\r\n  }\r\n}\r\n\r\nexport default SpellUsable;\r\n","import React from 'react';\r\nimport { formatPercentage } from 'common/format';\r\nimport SpellLink from 'common/SpellLink';\r\nimport SPELLS from 'common/SPELLS';\r\nimport Analyzer, { SELECTED_PLAYER } from 'parser/core/Analyzer';\r\nimport Abilities from 'parser/core/modules/Abilities';\r\nimport Events from 'parser/core/Events';\r\n\r\nimport { i18n } from '@lingui/core';\r\nimport { t } from '@lingui/macro';\r\n\r\nimport SpellUsable from '../features/SpellUsable';\r\n\r\n/**\r\n * Example report: /report/YXFby87mzNrLtwj1/12-Normal+King+Rastakhan+-+Wipe+1+(3:32)/30-Korebian/timeline\r\n */\r\n\r\nclass SweepingStrikes extends Analyzer {\r\n  get suggestionThresholds() {\r\n    return {\r\n      actual: this.badCasts / this.totalCasts,\r\n      isGreaterThan: {\r\n        minor: 0,\r\n        average: 0.2,\r\n        major: 0.5,\r\n      },\r\n      style: 'percent',\r\n    };\r\n  }\r\n\r\n  static dependencies = {\r\n    spellUsable: SpellUsable,\r\n    abilities: Abilities,\r\n  };\r\n  totalCasts = 0;\r\n  badCasts = 0;\r\n\r\n  constructor(...args) {\r\n    super(...args);\r\n    this.addEventListener(Events.cast.by(SELECTED_PLAYER).spell(SPELLS.SWEEPING_STRIKES), this._castSweepingStrikes);\r\n  }\r\n\r\n  _castSweepingStrikes(event) {\r\n    this.totalCasts += 1;\r\n\r\n    const spell = this.selectedCombatant.hasTalent(SPELLS.WARBREAKER_TALENT.id) ? SPELLS.WARBREAKER_TALENT : SPELLS.COLOSSUS_SMASH;\r\n    const spellCd = this.abilities.getAbility(spell.id).cooldown;\r\n    if (this.spellUsable.isOnCooldown(spell.id)) {\r\n      const cdElapsed = (spellCd * 1000) - this.spellUsable.cooldownRemaining(spell.id);\r\n      if (cdElapsed < 1000) {\r\n        this.badCasts += 1;\r\n        event.meta = event.meta || {};\r\n        event.meta.isInefficientCast = true;\r\n        event.meta.inefficientCastReason = `This Sweeping Strikes was used on a target during ${spell.name}.`;\r\n      }\r\n    }\r\n\r\n  }\r\n\r\n  suggestions(when) {\r\n    when(this.suggestionThresholds).addSuggestion((suggest, actual, recommended) => suggest(<>Try to cast <SpellLink id={SPELLS.SWEEPING_STRIKES.id} icon /> before <SpellLink id={SPELLS.COLOSSUS_SMASH.id} /> (or <SpellLink id={SPELLS.WARBREAKER_TALENT.id} /> if talented).</>)\r\n      .icon(SPELLS.SWEEPING_STRIKES.icon)\r\n      .actual(i18n._(t('warrior.arms.suggestions.sweepingStrikes.efficiency')`Sweeping Strikes was used ${formatPercentage(actual)}% of the time shortly after Colossus Smash/Warbreaker.`))\r\n      .recommended(`${formatPercentage(recommended)}% is recommended`));\r\n  }\r\n\r\n}\r\n\r\nexport default SweepingStrikes;\r\n","import React from 'react';\r\nimport PropTypes from 'prop-types';\r\n\r\nimport SPELLS from 'common/SPELLS';\r\nimport SpellLink from 'common/SpellLink';\r\nimport Checklist from 'parser/shared/modules/features/Checklist';\r\nimport Rule from 'parser/shared/modules/features/Checklist/Rule';\r\nimport Requirement from 'parser/shared/modules/features/Checklist/Requirement';\r\nimport PreparationRule from 'parser/shared/modules/features/Checklist/PreparationRule';\r\nimport GenericCastEfficiencyRequirement from 'parser/shared/modules/features/Checklist/GenericCastEfficiencyRequirement';\r\n\r\nconst ArmWarriorChecklist = ({ combatant, castEfficiency, thresholds }) => {\r\n  const DotUptime = props => (\r\n    <Requirement\r\n      name={(<><SpellLink id={props.id} icon /> uptime</>)}\r\n      thresholds={props.thresholds}\r\n    />\r\n  );\r\n  DotUptime.propTypes = {\r\n    id: PropTypes.number.isRequired,\r\n  };\r\n\r\n  const AbilityRequirement = props => (\r\n    <GenericCastEfficiencyRequirement\r\n      castEfficiency={castEfficiency.getCastEfficiencyForSpellId(props.spell)}\r\n      {...props}\r\n    />\r\n  );\r\n  AbilityRequirement.propTypes = {\r\n    spell: PropTypes.number.isRequired,\r\n  };\r\n\r\n  return (\r\n    <Checklist>\r\n      <Rule\r\n        name=\"Use core abilities and offensive cooldowns as often as possible\"\r\n        description={(\r\n          <>\r\n            Spells such as <SpellLink id={SPELLS.COLOSSUS_SMASH.id} /> (or <SpellLink id={SPELLS.WARBREAKER_TALENT.id} /> if talented), <SpellLink id={SPELLS.MORTAL_STRIKE.id} /> and <SpellLink id={SPELLS.OVERPOWER.id} /> are your most efficient spells available, try to cast them as much as possible.\r\n            Keep in mind that it is sometimes more useful to keep <SpellLink id={SPELLS.BLADESTORM.id} /> (or <SpellLink id={SPELLS.RAVAGER_TALENT_ARMS.id} />) and use it when several targets are present in the fight. &nbsp;\r\n            <a href=\"https://www.wowhead.com/arms-warrior-rotation-guide\" target=\"_blank\" rel=\"noopener noreferrer\">More info.</a>\r\n          </>\r\n        )}\r\n      >\r\n        <AbilityRequirement spell={combatant.hasTalent(SPELLS.WARBREAKER_TALENT.id) ? SPELLS.WARBREAKER_TALENT.id : SPELLS.COLOSSUS_SMASH.id} />\r\n        <AbilityRequirement spell={combatant.hasTalent(SPELLS.RAVAGER_TALENT_ARMS.id) ? SPELLS.RAVAGER_TALENT_ARMS.id : SPELLS.BLADESTORM.id} />\r\n        {combatant.hasTalent(SPELLS.SKULLSPLITTER_TALENT.id) && <AbilityRequirement spell={SPELLS.SKULLSPLITTER_TALENT.id} />}\r\n        <AbilityRequirement spell={SPELLS.OVERPOWER.id} />\r\n        {combatant.hasTalent(SPELLS.AVATAR_TALENT.id) && <AbilityRequirement spell={SPELLS.AVATAR_TALENT.id} />}\r\n        {combatant.hasTalent(SPELLS.REND_TALENT.id) && <DotUptime id={SPELLS.REND_TALENT.id} thresholds={thresholds.rend} />}\r\n        {combatant.hasTalent(SPELLS.DEADLY_CALM_TALENT.id) && <AbilityRequirement spell={SPELLS.DEADLY_CALM_TALENT.id} />}\r\n      </Rule>\r\n\r\n      <Rule\r\n        name={(<>Use <SpellLink id={SPELLS.MORTAL_STRIKE.id} /> efficiently</>)}\r\n        description={(\r\n          <>\r\n            Mortal Strike shouldn't be used during the execution phase, you should cast it as much as possible when the target is above 20% (or 35% with <SpellLink id={SPELLS.MASSACRE_TALENT_ARMS.id} />) but avoid casting it when you reach the execution phase and use <SpellLink id={SPELLS.EXECUTE.id} /> instead since it is more rage efficient.\r\n          </>\r\n        )}\r\n      >\r\n        <Requirement\r\n          name={(<><SpellLink id={SPELLS.MORTAL_STRIKE.id} icon /> outside execution phase</>)}\r\n          thresholds={thresholds.goodMortalStrike}\r\n        />\r\n        <Requirement\r\n          name={(<><SpellLink id={SPELLS.MORTAL_STRIKE.id} icon /> during execution phase</>)}\r\n          thresholds={thresholds.badMortalStrike}\r\n        />\r\n      </Rule>\r\n      <Rule\r\n        name=\"Use your defensive cooldowns\"\r\n        description=\"While you shouldn't cast these defensives on cooldown, be aware of them and use them whenever effective. Not using them at all indicates you might not be aware of them or not using them optimally.\"\r\n      >\r\n        <AbilityRequirement spell={SPELLS.DIE_BY_THE_SWORD.id} />\r\n        <AbilityRequirement spell={SPELLS.RALLYING_CRY.id} />\r\n      </Rule>\r\n      <Rule\r\n        name=\"Avoid downtime\"\r\n        description={(\r\n          <>\r\n            As a melee DPS, it is important to stay within range of the target and cast your abilities promptly. If you find yourself out of range, try using <SpellLink id={SPELLS.CHARGE.id} /> and <SpellLink id={SPELLS.HEROIC_LEAP.id} /> to get back more quickly.\r\n          </>\r\n        )}\r\n      >\r\n        <Requirement name=\"Downtime\" thresholds={thresholds.downtimeSuggestionThresholds} />\r\n      </Rule>\r\n      <PreparationRule thresholds={thresholds} />\r\n    </Checklist>\r\n  );\r\n};\r\n\r\nArmWarriorChecklist.propTypes = {\r\n  castEfficiency: PropTypes.object.isRequired,\r\n  combatant: PropTypes.shape({\r\n    hasTalent: PropTypes.func.isRequired,\r\n  }).isRequired,\r\n  thresholds: PropTypes.object.isRequired,\r\n};\r\n\r\nexport default ArmWarriorChecklist;\r\n","import React from 'react';\r\nimport BaseChecklist from 'parser/shared/modules/features/Checklist/Module';\r\nimport CastEfficiency from 'parser/shared/modules/CastEfficiency';\r\nimport Combatants from 'parser/shared/modules/Combatants';\r\nimport PreparationRuleAnalyzer from 'parser/shared/modules/features/Checklist/PreparationRuleAnalyzer';\r\n\r\nimport AlwaysBeCasting from '../AlwaysBeCasting';\r\nimport DeepWoundsUptime from '../../core/Dots/DeepWoundsUptime';\r\nimport RendUptime from '../../core/Dots/RendUptime';\r\nimport MortalStrike from '../../core/Execute/MortalStrike';\r\nimport SweepingStrikes from '../../core/SweepingStrikes';\r\nimport Component from './Component';\r\n\r\nclass Checklist extends BaseChecklist {\r\n  static dependencies = {\r\n    combatants: Combatants,\r\n    castEfficiency: CastEfficiency,\r\n    alwaysBeCasting: AlwaysBeCasting,\r\n    preparationRuleAnalyzer: PreparationRuleAnalyzer,\r\n    deepWoundsUptime: DeepWoundsUptime,\r\n    rendUptime: RendUptime,\r\n    mortalStrike: MortalStrike,\r\n    sweepingStrikes: SweepingStrikes,\r\n  };\r\n\r\n  render() {\r\n    return (\r\n      <Component\r\n        combatant={this.combatants.selected}\r\n        castEfficiency={this.castEfficiency}\r\n        thresholds={{\r\n          ...this.preparationRuleAnalyzer.thresholds,\r\n\r\n          deepWounds: this.deepWoundsUptime.suggestionThresholds,\r\n          rend: this.rendUptime.suggestionThresholds,\r\n          downtimeSuggestionThresholds: this.alwaysBeCasting.downtimeSuggestionThresholds,\r\n          goodMortalStrike: this.mortalStrike.goodMortalStrikeThresholds,\r\n          badMortalStrike: this.mortalStrike.badMortalStrikeThresholds,\r\n          badSweepingStrikes: this.sweepingStrikes.suggestionThresholds,\r\n        }}\r\n      />\r\n    );\r\n  }\r\n}\r\n\r\nexport default Checklist;\r\n","import SPELLS from 'common/SPELLS';\r\nimport CoreAbilities from 'parser/core/modules/Abilities';\r\nimport ISSUE_IMPORTANCE from 'parser/core/ISSUE_IMPORTANCE';\r\n\r\nclass Abilities extends CoreAbilities {\r\n  spellbook() {\r\n    const combatant = this.selectedCombatant;\r\n    return [\r\n      // Rotational\r\n      {\r\n        spell: SPELLS.MORTAL_STRIKE,\r\n        category: Abilities.SPELL_CATEGORIES.ROTATIONAL,\r\n        cooldown: haste => 6 / (1 + haste),\r\n        gcd: {\r\n          base: 1500,\r\n        },\r\n        castEfficiency: {\r\n          suggestion: false, // Suggestions are in MortalStrike.js\r\n          recommendedEfficiency: 0.8,\r\n        },\r\n      },\r\n      {\r\n        spell: SPELLS.OVERPOWER,\r\n        category: Abilities.SPELL_CATEGORIES.ROTATIONAL,\r\n        cooldown: 12,\r\n        charges: 1 + (combatant.hasTalent(SPELLS.DREADNAUGHT_TALENT.id) ? 1 : 0),\r\n        gcd: {\r\n          base: 1500,\r\n        },\r\n        buffSpellId: SPELLS.OVERPOWER.id,\r\n      },\r\n      {\r\n        spell: SPELLS.SLAM,\r\n        category: Abilities.SPELL_CATEGORIES.ROTATIONAL,\r\n        gcd: {\r\n          base: 1500,\r\n        },\r\n      },\r\n      {\r\n        spell: SPELLS.REND_TALENT,\r\n        category: Abilities.SPELL_CATEGORIES.ROTATIONAL,\r\n        gcd: {\r\n          base: 1500,\r\n        },\r\n        enabled: combatant.hasTalent(SPELLS.REND_TALENT.id),\r\n      },\r\n      {\r\n        spell: SPELLS.COLOSSUS_SMASH,\r\n        category: Abilities.SPELL_CATEGORIES.ROTATIONAL,\r\n        cooldown: 45,\r\n        gcd: {\r\n          base: 1500,\r\n        },\r\n        castEfficiency: {\r\n          suggestion: true,\r\n          recommendedEfficiency: 0.9,\r\n        },\r\n        enabled: !combatant.hasTalent(SPELLS.WARBREAKER_TALENT.id),\r\n      },\r\n      {\r\n        spell: SPELLS.SKULLSPLITTER_TALENT,\r\n        category: Abilities.SPELL_CATEGORIES.ROTATIONAL,\r\n        cooldown: haste => 21 / (1 + haste),\r\n        gcd: {\r\n          base: 1500,\r\n        },\r\n        enabled: combatant.hasTalent(SPELLS.SKULLSPLITTER_TALENT.id),\r\n      },\r\n      {\r\n        spell: [SPELLS.EXECUTE, SPELLS.EXECUTE_GLYPHED],\r\n        category: Abilities.SPELL_CATEGORIES.ROTATIONAL,\r\n        gcd: {\r\n          base: 1500,\r\n        },\r\n      },\r\n      // Rotational AOE\r\n      {\r\n        spell: SPELLS.WARBREAKER_TALENT,\r\n        category: Abilities.SPELL_CATEGORIES.ROTATIONAL_AOE,\r\n        cooldown: 45,\r\n        gcd: {\r\n          base: 1500,\r\n        },\r\n        castEfficiency: {\r\n          suggestion: true,\r\n          recommendedEfficiency: 0.9,\r\n        },\r\n        enabled: combatant.hasTalent(SPELLS.WARBREAKER_TALENT.id), // replaces Colussus Smash\r\n      },\r\n      {\r\n        spell: SPELLS.CLEAVE_TALENT,\r\n        category: Abilities.SPELL_CATEGORIES.ROTATIONAL_AOE,\r\n        cooldown: haste => 9 / (1 + haste),\r\n        gcd: {\r\n          base: 1500,\r\n        },\r\n        castEfficiency: {\r\n          suggestion: true,\r\n          recommendedEfficiency: 0.6, // I don't know at what efficiency this talent becomes worth it so I'm keeping it save\r\n        },\r\n        enabled: combatant.hasTalent(SPELLS.CLEAVE_TALENT.id),\r\n      },\r\n      {\r\n        spell: SPELLS.SWEEPING_STRIKES,\r\n        category: Abilities.SPELL_CATEGORIES.ROTATIONAL_AOE,\r\n        cooldown: 30,\r\n        gcd: {\r\n          base: 1500,\r\n        },\r\n        buffSpellId: SPELLS.SWEEPING_STRIKES.id,\r\n      },\r\n      {\r\n        spell: SPELLS.WHIRLWIND,\r\n        category: Abilities.SPELL_CATEGORIES.ROTATIONAL_AOE,\r\n        gcd: {\r\n          base: 1500,\r\n        },\r\n      },\r\n      {\r\n        spell: SPELLS.BLADESTORM,\r\n        category: Abilities.SPELL_CATEGORIES.ROTATIONAL_AOE,\r\n        cooldown: 90,\r\n        gcd: {\r\n          base: 1500,\r\n        },\r\n        castEfficiency: {\r\n          suggestion: true,\r\n          recommendedEfficiency: 0.7,\r\n        },\r\n        enabled: !combatant.hasTalent(SPELLS.RAVAGER_TALENT_ARMS.id),\r\n        buffSpellId: SPELLS.BLADESTORM.id,\r\n      },\r\n      {\r\n        spell: SPELLS.RAVAGER_TALENT_ARMS,\r\n        category: Abilities.SPELL_CATEGORIES.ROTATIONAL_AOE,\r\n        cooldown: 60,\r\n        gcd: {\r\n          base: 1500,\r\n        },\r\n        castEfficiency: {\r\n          suggestion: true,\r\n          recommendedEfficiency: 0.7,\r\n        },\r\n        enabled: combatant.hasTalent(SPELLS.RAVAGER_TALENT_ARMS.id), // Replaces Bladestorm\r\n      },\r\n      // Others\r\n      {\r\n        spell: SPELLS.VICTORY_RUSH,\r\n        category: Abilities.SPELL_CATEGORIES.OTHERS,\r\n        gcd: {\r\n          base: 1500,\r\n        },\r\n        enabled: !combatant.hasTalent(SPELLS.IMPENDING_VICTORY_TALENT.id),\r\n      },\r\n      {\r\n        spell: SPELLS.IMPENDING_VICTORY_TALENT,\r\n        category: Abilities.SPELL_CATEGORIES.DEFENSIVE,\r\n        cooldown: 30,\r\n        gcd: {\r\n          base: 1500,\r\n        },\r\n        enabled: combatant.hasTalent(SPELLS.IMPENDING_VICTORY_TALENT.id), // Replaces Victory Rush\r\n      },\r\n      // Cooldowns\r\n      {\r\n        spell: SPELLS.AVATAR_TALENT,\r\n        category: Abilities.SPELL_CATEGORIES.COOLDOWNS,\r\n        cooldown: 90,\r\n        gcd: {\r\n          base: 1500,\r\n        },\r\n        castEfficiency: {\r\n          suggestion: true,\r\n          recommendedEfficiency: 0.9,\r\n        },\r\n        enabled: combatant.hasTalent(SPELLS.AVATAR_TALENT.id),\r\n      },\r\n      {\r\n        spell: SPELLS.DEADLY_CALM_TALENT,\r\n        category: Abilities.SPELL_CATEGORIES.COOLDOWNS,\r\n        cooldown: 60,\r\n        gcd: null,\r\n        castEfficiency: {\r\n          suggestion: true,\r\n          recommendedEfficiency: 0.9,\r\n        },\r\n        enabled: combatant.hasTalent(SPELLS.DEADLY_CALM_TALENT.id),\r\n        buffSpellId: SPELLS.DEADLY_CALM_TALENT.id,\r\n      },\r\n      // Defensive\r\n      {\r\n        spell: SPELLS.DEFENSIVE_STANCE_TALENT,\r\n        category: Abilities.SPELL_CATEGORIES.DEFENSIVE,\r\n        cooldown: 6,\r\n        gcd: null,\r\n        enabled: combatant.hasTalent(SPELLS.DEFENSIVE_STANCE_TALENT.id),\r\n        buffSpellId: SPELLS.DEFENSIVE_STANCE_TALENT.id,\r\n      },\r\n      {\r\n        spell: SPELLS.DIE_BY_THE_SWORD,\r\n        category: Abilities.SPELL_CATEGORIES.DEFENSIVE,\r\n        cooldown: 180,\r\n        gcd: null,\r\n        castEfficiency: {\r\n          suggestion: false,\r\n          recommendedEfficiency: 0.4,\r\n        },\r\n        buffSpellId: SPELLS.DIE_BY_THE_SWORD.id,\r\n      },\r\n      {\r\n        spell: SPELLS.RALLYING_CRY,\r\n        category: Abilities.SPELL_CATEGORIES.DEFENSIVE,\r\n        cooldown: 180,\r\n        gcd: {\r\n          base: 1500,\r\n        },\r\n        castEfficiency: {\r\n          suggestion: true,\r\n          recommendedEfficiency: 0.6,\r\n          importance: ISSUE_IMPORTANCE.MINOR,\r\n          extraSuggestion: 'Use it preemptively as a buffer against large AOE, or reactively if you notice your raid is getting dangerously low on health.',\r\n        },\r\n        buffSpellId: SPELLS.RALLYING_CRY_BUFF.id,\r\n      },\r\n      // Utility\r\n      {\r\n        spell: SPELLS.CHARGE,\r\n        category: Abilities.SPELL_CATEGORIES.UTILITY,\r\n        cooldown: 20 - (combatant.hasTalent(SPELLS.DOUBLE_TIME_TALENT.id) ? 3 : 0),\r\n        charges: 1 + (combatant.hasTalent(SPELLS.DOUBLE_TIME_TALENT.id) ? 1 : 0),\r\n        gcd: null, // Off gcd since 8.1\r\n        castEfficiency: {\r\n          suggestion: true,\r\n          recommendedEfficiency: 0.01,\r\n          extraSuggestion: 'Use it to get back into range after moving out to avoid mechanics. Not only does this allow you to get back to DPSing faster, it also generates rage for you to DPS with.',\r\n        },\r\n      },\r\n      {\r\n        spell: SPELLS.HEROIC_LEAP,\r\n        category: Abilities.SPELL_CATEGORIES.UTILITY,\r\n        buffSpellId: SPELLS.BOUNDING_STRIDE_BUFF.id,\r\n        cooldown: 45 - (combatant.hasTalent(SPELLS.BOUNDING_STRIDE_TALENT.id) ? 15 : 0),\r\n        gcd: null,\r\n        castEfficiency: {\r\n          suggestion: true,\r\n          recommendedEfficiency: 0.01,\r\n          extraSuggestion: 'Use it to escape mechanics at the last moment, allowing you more time to DPS.',\r\n        },\r\n      },\r\n      {\r\n        spell: SPELLS.STORM_BOLT_TALENT,\r\n        category: Abilities.SPELL_CATEGORIES.UTILITY,\r\n        cooldown: 30,\r\n        gcd: {\r\n          base: 1500,\r\n        },\r\n        castEfficiency: {\r\n          suggestion: true,\r\n          recommendedEfficiency: 0.4,\r\n          extraSuggestion: 'If you\\'re picking a utility talent over something that increases your mobility or survivability, you better use it.',\r\n        },\r\n        enabled: combatant.hasTalent(SPELLS.STORM_BOLT_TALENT.id),\r\n      },\r\n      {\r\n        spell: SPELLS.PUMMEL,\r\n        category: Abilities.SPELL_CATEGORIES.UTILITY,\r\n        cooldown: 15,\r\n        gcd: null,\r\n      },\r\n      {\r\n        spell: SPELLS.BERSERKER_RAGE,\r\n        category: Abilities.SPELL_CATEGORIES.UTILITY,\r\n        cooldown: 60,\r\n        gcd: null,\r\n        buffSpellId: SPELLS.BERSERKER_RAGE.id,\r\n      },\r\n      {\r\n        spell: SPELLS.HEROIC_THROW,\r\n        category: Abilities.SPELL_CATEGORIES.UTILITY,\r\n        cooldown: 6,\r\n        gcd: {\r\n          base: 1500,\r\n        },\r\n      },\r\n      {\r\n        spell: SPELLS.INTIMIDATING_SHOUT,\r\n        category: Abilities.SPELL_CATEGORIES.UTILITY,\r\n        cooldown: 90,\r\n        gcd: {\r\n          base: 1500,\r\n        },\r\n      },\r\n      {\r\n        spell: SPELLS.HAMSTRING,\r\n        category: Abilities.SPELL_CATEGORIES.UTILITY,\r\n        gcd: {\r\n          base: 1500,\r\n        },\r\n      },\r\n      {\r\n        spell: SPELLS.BATTLE_SHOUT,\r\n        category: Abilities.SPELL_CATEGORIES.UTILITY,\r\n        cooldown: 15,\r\n        gcd: {\r\n          base: 1500,\r\n        },\r\n      },\r\n      {\r\n        spell: SPELLS.TAUNT,\r\n        category: Abilities.SPELL_CATEGORIES.UTILITY,\r\n        cooldown: 8,\r\n        gcd: null,\r\n      },\r\n    ];\r\n  }\r\n}\r\n\r\nexport default Abilities;\r\n","import SPELLS from 'common/SPELLS';\r\nimport CoreCooldownThroughputTracker, { BUILT_IN_SUMMARY_TYPES } from 'parser/shared/modules/CooldownThroughputTracker';\r\n\r\nclass CooldownThroughputTracker extends CoreCooldownThroughputTracker {\r\n  static cooldownSpells = [\r\n    ...CoreCooldownThroughputTracker.cooldownSpells,\r\n    {\r\n      spell: SPELLS.SWEEPING_STRIKES,\r\n      summary: [\r\n        BUILT_IN_SUMMARY_TYPES.DAMAGE,\r\n      ],\r\n    },\r\n    {\r\n      spell: SPELLS.AVATAR_TALENT,\r\n      summary: [\r\n        BUILT_IN_SUMMARY_TYPES.DAMAGE,\r\n      ],\r\n    },\r\n    {\r\n      spell: SPELLS.DEADLY_CALM_TALENT,\r\n      summary: [\r\n        BUILT_IN_SUMMARY_TYPES.DAMAGE,\r\n      ],\r\n    },\r\n  ];\r\n\r\n  static castCooldowns = [\r\n    ...CoreCooldownThroughputTracker.castCooldowns,\r\n    {\r\n      spell: SPELLS.WARBREAKER_TALENT,\r\n      duration: 10,\r\n      summary: [\r\n        BUILT_IN_SUMMARY_TYPES.DAMAGE,\r\n      ],\r\n    },\r\n    {\r\n      spell: SPELLS.COLOSSUS_SMASH,\r\n      duration: 10,\r\n      summary: [\r\n        BUILT_IN_SUMMARY_TYPES.DAMAGE,\r\n      ],\r\n    },\r\n  ];\r\n}\r\n\r\nexport default CooldownThroughputTracker;\r\n","import SPELLS from 'common/SPELLS';\r\nimport CoreChanneling from 'parser/shared/modules/Channeling';\r\nimport Events from 'parser/core/Events';\r\nimport { SELECTED_PLAYER } from 'parser/core/Analyzer';\r\n\r\nclass Channeling extends CoreChanneling {\r\n  static dependencies = {\r\n    ...CoreChanneling.dependencies,\r\n  };\r\n\r\n  constructor(options) {\r\n    super(options);\r\n    this.addEventListener(Events.applybuff.by(SELECTED_PLAYER).spell(SPELLS.BLADESTORM), this.onApplyBuff);\r\n    this.addEventListener(Events.removebuff.by(SELECTED_PLAYER).spell(SPELLS.BLADESTORM), this.onRemoveBuff);\r\n  }\r\n\r\n  onApplyBuff(event) {\r\n    // Begin channeling when the bladestorm buff is applied.\r\n    this.beginChannel(event);\r\n  }\r\n\r\n  onRemoveBuff(event) {\r\n    // End channeling when the bladestorm buff is removed.\r\n    this.endChannel(event);\r\n  }\r\n\r\n  onCast(event) {\r\n    // Bladestorm triggers multiple cast successes after the buff is applied which would cancel the channel, so we manually ignore those here.\r\n    if (SPELLS.BLADESTORM.id !== event.ability.guid) {\r\n      super.onCast(event);\r\n    }\r\n  }\r\n}\r\n\r\nexport default Channeling;\r\n","import ResourceTracker from 'parser/shared/modules/resources/resourcetracker/ResourceTracker';\r\nimport RESOURCE_TYPES from 'game/RESOURCE_TYPES';\r\nimport SPELLS from 'common/SPELLS';\r\nimport Events from 'parser/core/Events';\r\nimport { SELECTED_PLAYER } from 'parser/core/Analyzer';\r\n\r\nconst RAGE_PER_MELEE_HIT = 25;\r\n\r\nclass RageUsage extends ResourceTracker {\r\n  lastMeleeTaken = 0;\r\n\r\n  constructor(...args) {\r\n    super(...args);\r\n    this.resource = RESOURCE_TYPES.RAGE;\r\n    this.addEventListener(Events.damage.by(SELECTED_PLAYER).spell(SPELLS.MELEE), this.onDamage);\r\n  }\r\n\r\n  getReducedCost(event) {\r\n    if (!this.getResource(event).cost) {\r\n      return 0;\r\n    }\r\n    const cost = this.getResource(event).cost / 10;\r\n    return cost;\r\n  }\r\n\r\n  onDamage(event) {\r\n    this.processInvisibleEnergize(SPELLS.RAGE_AUTO_ATTACKS.id, RAGE_PER_MELEE_HIT);\r\n  }\r\n}\r\n\r\nexport default RageUsage;\r\n","import React from 'react';\r\nimport Analyzer from 'parser/core/Analyzer';\r\nimport Panel from 'interface/others/Panel';\r\nimport StatisticBox, { STATISTIC_ORDER } from 'interface/others/StatisticBox';\r\nimport { formatPercentage } from 'common/format';\r\nimport Icon from 'common/Icon';\r\nimport ResourceBreakdown from 'parser/shared/modules/resources/resourcetracker/ResourceBreakdown';\r\nimport { i18n } from '@lingui/core';\r\nimport { t } from '@lingui/macro';\r\n\r\nimport RageTracker from './RageTracker';\r\n\r\nclass RageDetails extends Analyzer {\r\n  get wastedPercent() {\r\n    return (this.rageTracker.wasted / (this.rageTracker.wasted + this.rageTracker.generated) || 0);\r\n  }\r\n\r\n  get efficiencySuggestionThresholds() {\r\n    return {\r\n      actual: 1 - this.wastedPercent,\r\n      isLessThan: {\r\n        minor: 0.95,\r\n        average: 0.90,\r\n        major: .85,\r\n      },\r\n      style: 'percentage',\r\n    };\r\n  }\r\n\r\n  get suggestionThresholds() {\r\n    return {\r\n      actual: this.wastedPercent,\r\n      isGreaterThan: {\r\n        minor: 0.05,\r\n        average: 0.1,\r\n        major: .15,\r\n      },\r\n      style: 'percentage',\r\n    };\r\n  }\r\n\r\n  static dependencies = {\r\n    rageTracker: RageTracker,\r\n  };\r\n\r\n  suggestions(when) {\r\n    when(this.suggestionThresholds).addSuggestion((suggest, actual, recommended) => suggest(`You wasted ${formatPercentage(this.wastedPercent)}% of your Rage.`)\r\n      .icon('spell_nature_reincarnation')\r\n      .actual(i18n._(t('warrior.arms.suggestions.rage.wasted')`${formatPercentage(actual)}% wasted`))\r\n      .recommended(`<${formatPercentage(recommended)}% is recommended`));\r\n  }\r\n\r\n  statistic() {\r\n    return (\r\n      <StatisticBox\r\n        position={STATISTIC_ORDER.CORE(5)}\r\n        icon={<Icon icon=\"spell_nature_reincarnation\" />}\r\n        value={`${formatPercentage(this.wastedPercent)} %`}\r\n        label=\"Rage wasted\"\r\n        tooltip={`${this.rageTracker.wasted} out of ${this.rageTracker.wasted + this.rageTracker.generated} rage wasted.`}\r\n      />\r\n    );\r\n  }\r\n\r\n  tab() {\r\n    return {\r\n      title: 'Rage usage',\r\n      url: 'rage-usage',\r\n      render: () => (\r\n        <Panel>\r\n          <ResourceBreakdown\r\n            tracker={this.rageTracker}\r\n            showSpenders\r\n          />\r\n        </Panel>\r\n      ),\r\n    };\r\n  }\r\n\r\n}\r\n\r\nexport default RageDetails;\r\n","import React from 'react';\r\nimport StatisticBox, { STATISTIC_ORDER } from 'interface/others/StatisticBox';\r\nimport SpellIcon from 'common/SpellIcon';\r\nimport SPELLS from 'common/SPELLS';\r\nimport Analyzer, { SELECTED_PLAYER } from 'parser/core/Analyzer';\r\nimport Events from 'parser/core/Events';\r\n\r\nclass TacticianProc extends Analyzer {\r\n\r\n  totalProcs = 0;\r\n\r\n  constructor(...args) {\r\n    super(...args);\r\n    this.addEventListener(Events.applybuff.by(SELECTED_PLAYER).spell(SPELLS.TACTICIAN), this._countTacticianProc);\r\n    this.addEventListener(Events.refreshbuff.by(SELECTED_PLAYER).spell(SPELLS.TACTICIAN), this._countTacticianProc);\r\n  }\r\n\r\n  _countTacticianProc() {\r\n    this.totalProcs += 1;\r\n  }\r\n\r\n  statistic() {\r\n    return (\r\n      <StatisticBox\r\n        position={STATISTIC_ORDER.CORE(2)}\r\n        icon={<SpellIcon id={SPELLS.TACTICIAN.id} />}\r\n        value={this.totalProcs}\r\n        label=\"Total Tactician Procs\"\r\n        tooltip={`Tactician resets the cooldown on Overpower. You got ${this.totalProcs} more Overpower casts.`}\r\n      />\r\n    );\r\n  }\r\n}\r\n\r\nexport default TacticianProc;\r\n","import React from 'react';\r\nimport { formatPercentage } from 'common/format';\r\nimport SpellLink from 'common/SpellLink';\r\nimport SpellIcon from 'common/SpellIcon';\r\nimport SPELLS from 'common/SPELLS';\r\nimport Analyzer, { SELECTED_PLAYER } from 'parser/core/Analyzer';\r\nimport Events from 'parser/core/Events';\r\nimport Enemies from 'parser/shared/modules/Enemies';\r\nimport StatisticBox, { STATISTIC_ORDER } from 'interface/others/StatisticBox';\r\n\r\nimport { i18n } from '@lingui/core';\r\nimport { t } from '@lingui/macro';\r\n\r\nimport ExecuteRange from './Execute/ExecuteRange';\r\nimport SpellUsable from '../features/SpellUsable';\r\n\r\n/**\r\n * Logs used to test:\r\n *\r\n * 0 wasted buffs: https://www.warcraftlogs.com/reports/YF9MzcnWXd4ak7vC/#fight=1&source=25\r\n * 4/15 wasted: https://www.warcraftlogs.com/reports/qAK2R8kZg9DL1YFm/#fight=27&source=1113&type=summary&graph=true\r\n *\r\n */\r\n\r\nclass OverpowerAnalyzer extends Analyzer {\r\n  get WastedOverpowerThresholds() {\r\n    return {\r\n      actual: this.wastedProc / this.overpowerCasts,\r\n      isGreaterThan: {\r\n        minor: 0,\r\n        average: 0.05,\r\n        major: 0.1,\r\n      },\r\n      style: 'percentage',\r\n    };\r\n  }\r\n\r\n  static dependencies = {\r\n    executeRange: ExecuteRange,\r\n    enemies: Enemies,\r\n    spellUsable: SpellUsable,\r\n  };\r\n  overpowerCasts = 0;\r\n  wastedProc = 0;\r\n\r\n  constructor(...args) {\r\n    super(...args);\r\n    this.addEventListener(Events.cast.by(SELECTED_PLAYER).spell(SPELLS.OVERPOWER), this._onOverpowerCast);\r\n  }\r\n\r\n  _onOverpowerCast(event) {\r\n    this.overpowerCasts += 1;\r\n    const overpower = this.selectedCombatant.getBuff(SPELLS.OVERPOWER.id);\r\n\r\n    if (!(overpower && overpower.stacks === 2 && this.spellUsable.isAvailable(SPELLS.MORTAL_STRIKE.id))) {\r\n      return;\r\n    }\r\n\r\n    // if not in execute and stacks were at two when overpower was casted then a proc is considered wasted\r\n    if (!this.executeRange.isTargetInExecuteRange(event)) {\r\n      this.wastedProc += 1;\r\n\r\n      event.meta = event.meta || {};\r\n      event.meta.isInefficientCast = true;\r\n      event.meta.inefficientCastReason = 'This Overpower was used while already at 2 stacks and Mortal Strike was available';\r\n    }\r\n  }\r\n\r\n  suggestions(when) {\r\n    when(this.WastedOverpowerThresholds).addSuggestion((suggest, actual, recommended) => suggest(<>Try to avoid using <SpellLink id={SPELLS.OVERPOWER.id} icon /> at 2 stacks when <SpellLink id={SPELLS.MORTAL_STRIKE.id} icon /> is available. Use your stacks of Overpower with Mortal Strike to avoid over stacking, which result in a loss of damage.</>)\r\n      .icon(SPELLS.OVERPOWER.icon)\r\n      .actual(i18n._(t('warrior.arms.suggestions.overpower.stacksWasted')`${formatPercentage(actual)}% of Overpower stacks were wasted.`))\r\n      .recommended(`${formatPercentage(recommended)}% is recommended.`));\r\n  }\r\n\r\n  statistic() {\r\n    return (\r\n      <StatisticBox\r\n        icon={<SpellIcon id={SPELLS.OVERPOWER.id} />}\r\n        label=\"Overpower Buffs Wasted\"\r\n        position={STATISTIC_ORDER.OPTIONAL(6)}\r\n        value={(\r\n          <>\r\n            {this.wastedProc} <small>wasted buffs</small><br />\r\n            {this.overpowerCasts} <small>total casts</small>\r\n          </>\r\n        )}\r\n        tooltip={(\r\n          <>\r\n            The overpower buff caps at two stacks. When at cap, casting Overpower will waste a buff stack.\r\n            This is not important during execute phase as Mortal Strike is replaced with Execute which does not\r\n            consume Overpower buff stacks.\r\n          </>\r\n        )}\r\n      />\r\n    );\r\n  }\r\n}\r\n\r\nexport default OverpowerAnalyzer;\r\n","import React from 'react';\r\nimport { formatPercentage } from 'common/format';\r\nimport SpellLink from 'common/SpellLink';\r\nimport SPELLS from 'common/SPELLS';\r\nimport Analyzer, { SELECTED_PLAYER } from 'parser/core/Analyzer';\r\nimport Events from 'parser/core/Events';\r\nimport Enemies from 'parser/shared/modules/Enemies';\r\n\r\nimport { i18n } from '@lingui/core';\r\nimport { t } from '@lingui/macro';\r\n\r\nimport ExecuteRange from './Execute/ExecuteRange';\r\nimport SpellUsable from '../features/SpellUsable';\r\n\r\nclass Slam extends Analyzer {\r\n  get badCastSuggestionThresholds() {\r\n    return {\r\n      actual: (this.badCast / this.totalCast) || 0,\r\n      isGreaterThan: {\r\n        minor: 0,\r\n        average: 0.05,\r\n        major: 0.1,\r\n      },\r\n      style: 'percentage',\r\n    };\r\n  }\r\n\r\n  static dependencies = {\r\n    executeRange: ExecuteRange,\r\n    enemies: Enemies,\r\n    spellUsable: SpellUsable,\r\n  };\r\n  badCast = 0;\r\n  totalCast = 0;\r\n\r\n  constructor(...args) {\r\n    super(...args);\r\n    this.addEventListener(Events.cast.by(SELECTED_PLAYER).spell(SPELLS.SLAM), this._onSlamCast);\r\n  }\r\n\r\n  _onSlamCast(event) {\r\n    this.totalCast += 1;\r\n    if (this.spellUsable.isAvailable(SPELLS.MORTAL_STRIKE.id) && !this.executeRange.isTargetInExecuteRange(event)) {\r\n      event.meta = event.meta || {};\r\n      event.meta.isInefficientCast = true;\r\n      event.meta.inefficientCastReason = 'This Slam was used on a target while Mortal Strike was off cooldown.';\r\n      this.badCast += 1;\r\n    } else if (this.executeRange.isTargetInExecuteRange(event)) {\r\n      if (!this.selectedCombatant.hasBuff(SPELLS.CRUSHING_ASSAULT_BUFF.id)) {\r\n        event.meta = event.meta || {};\r\n        event.meta.isInefficientCast = true;\r\n        event.meta.inefficientCastReason = 'This Slam was used on a target while in execution range.';\r\n        this.badCast += 1;\r\n      } else {\r\n        event.meta = event.meta || {};\r\n        event.meta.isEnhancedCast = true;\r\n        event.meta.enhancedCastReason = 'This Slam consumed a Crushing Assasult buff.';\r\n      }\r\n    }\r\n  }\r\n\r\n  suggestions(when) {\r\n    when(this.badCastSuggestionThresholds).addSuggestion((suggest, actual, recommended) => suggest(<>Try to avoid using <SpellLink id={SPELLS.SLAM.id} /> when <SpellLink id={SPELLS.MORTAL_STRIKE.id} /> or <SpellLink id={SPELLS.EXECUTE.id} /> is available as it is more rage efficient.</>)\r\n      .icon(SPELLS.SLAM.icon)\r\n      .actual(i18n._(t('warrior.arms.suggestions.slam.efficiency')`Slam was cast ${this.badCast} times accounting for ${formatPercentage(actual)}% of total casts, while Mortal Strike or Execute was available.`))\r\n      .recommended(`${recommended}% is recommended`));\r\n  }\r\n\r\n}\r\n\r\nexport default Slam;\r\n","import React from 'react';\r\nimport { formatPercentage } from 'common/format';\r\nimport SPELLS from 'common/SPELLS';\r\nimport SpellLink from 'common/SpellLink';\r\nimport Analyzer, { SELECTED_PLAYER } from 'parser/core/Analyzer';\r\nimport Events from 'parser/core/Events';\r\nimport { i18n } from '@lingui/core';\r\nimport { t } from '@lingui/macro';\r\n\r\nimport ExecuteRange from './ExecuteRange';\r\n\r\nclass RendAnalyzer extends Analyzer {\r\n  get executeRendsThresholds() {\r\n    return {\r\n      actual: this.rendsInExecuteRange / this.rends,\r\n      isGreaterThan: {\r\n        minor: 0,\r\n        average: 0.05,\r\n        major: 0.1,\r\n      },\r\n      style: 'percent',\r\n    };\r\n  }\r\n\r\n  static dependencies = {\r\n    executeRange: ExecuteRange,\r\n  };\r\n  rends = 0;\r\n  rendsInExecuteRange = 0;\r\n\r\n  constructor(...args) {\r\n    super(...args);\r\n    this.active = this.selectedCombatant.hasTalent(SPELLS.REND_TALENT.id);\r\n    this.addEventListener(Events.cast.by(SELECTED_PLAYER).spell(SPELLS.REND_TALENT), this._onRendCast);\r\n  }\r\n\r\n  _onRendCast(event) {\r\n    this.rends += 1;\r\n    if (this.executeRange.isTargetInExecuteRange(event)) {\r\n      this.rendsInExecuteRange += 1;\r\n\r\n      event.meta = event.meta || {};\r\n      event.meta.isInefficientCast = true;\r\n      event.meta.inefficientCastReason = 'This Rend was used on a target in Execute range.';\r\n    }\r\n  }\r\n\r\n  suggestions(when) {\r\n    when(this.executeRendsThresholds).addSuggestion((suggest, actual, recommended) => suggest(<>Try to avoid using <SpellLink id={SPELLS.REND_TALENT.id} icon /> on a target in <SpellLink id={SPELLS.EXECUTE.id} icon /> range.</>)\r\n      .icon(SPELLS.REND_TALENT.icon)\r\n      .actual(i18n._(t('warrior.arms.suggestions.execute.rend.casts')`Rend was used ${formatPercentage(actual)}% of the time on a target in execute range.`))\r\n      .recommended(`${formatPercentage(recommended)}% is recommended`));\r\n  }\r\n}\r\n\r\nexport default RendAnalyzer;\r\n","import React from 'react';\r\nimport Analyzer from 'parser/core/Analyzer';\r\nimport StatisticsListBox, { STATISTIC_ORDER } from 'interface/others/StatisticsListBox';\r\n\r\nimport DeepWoundsUptime from './DeepWoundsUptime';\r\nimport RendUptime from './RendUptime';\r\n\r\nclass DotUptimeStatisticBox extends Analyzer {\r\n  static dependencies = {\r\n    deepwoundsUptime: DeepWoundsUptime,\r\n    rendUptime: RendUptime,\r\n  };\r\n\r\n  constructor(...args) {\r\n    super(...args);\r\n    this.active = Object.keys(this.constructor.dependencies)\r\n      .map(name => this[name].active)\r\n      .includes(true);\r\n  }\r\n\r\n  statistic() {\r\n    return (\r\n      <StatisticsListBox\r\n        position={STATISTIC_ORDER.CORE(3)}\r\n        title=\"DoT uptimes\"\r\n      >\r\n        {Object.keys(this.constructor.dependencies).map(name => {\r\n          const module = this[name];\r\n          if (!module.active) {\r\n            return null;\r\n          }\r\n          return (\r\n            <React.Fragment key={name}>\r\n              {module.subStatistic()}\r\n            </React.Fragment>\r\n          );\r\n        })}\r\n      </StatisticsListBox>\r\n    );\r\n  }\r\n}\r\n\r\nexport default DotUptimeStatisticBox;\r\n","import React from 'react';\r\nimport Analyzer, { SELECTED_PLAYER } from 'parser/core/Analyzer';\r\nimport SPELLS from 'common/SPELLS';\r\nimport SpellLink from 'common/SpellLink';\r\nimport { formatDuration } from 'common/format';\r\nimport RESOURCE_TYPES from 'game/RESOURCE_TYPES';\r\nimport SpellUsable from 'parser/shared/modules/SpellUsable';\r\nimport StatisticListBoxItem from 'interface/others/StatisticListBoxItem';\r\nimport Events from 'parser/core/Events';\r\n\r\n/**\r\n * Every 20 Rage you spend reduces the remaining cooldown on Colossus Smash and Bladestorm by 1 sec.\r\n */\r\n\r\nconst RAGE_NEEDED_FOR_A_PROC = 20;\r\nconst CDR_PER_PROC = 1000; // ms\r\n\r\nclass AngerManagement extends Analyzer {\r\n  get tooltip() {\r\n    return this.cooldownsAffected.map(id => (\r\n      <>{SPELLS[id].name}: {formatDuration(this.effectiveReduction[id] / 1000)} reduction ({formatDuration(this.wastedReduction[id] / 1000)} wasted)<br /></>\r\n    ));\r\n  }\r\n\r\n  static dependencies = {\r\n    spellUsable: SpellUsable,\r\n  };\r\n  cooldownsAffected = [\r\n    this.selectedCombatant.hasTalent(SPELLS.WARBREAKER_TALENT.id) ? SPELLS.WARBREAKER_TALENT.id : SPELLS.COLOSSUS_SMASH.id,\r\n    SPELLS.BLADESTORM.id,\r\n  ];\r\n  totalRageSpend = 0;\r\n  wastedReduction = {};\r\n  effectiveReduction = {};\r\n\r\n  constructor(...args) {\r\n    super(...args);\r\n    this.active = this.selectedCombatant.hasTalent(SPELLS.ANGER_MANAGEMENT_TALENT.id);\r\n    this.cooldownsAffected.forEach(e => {\r\n      this.wastedReduction[e] = 0;\r\n      this.effectiveReduction[e] = 0;\r\n    });\r\n\r\n    this.addEventListener(Events.cast.by(SELECTED_PLAYER), this._onCast);\r\n  }\r\n\r\n  _onCast(event) {\r\n    if (!event.classResources) {\r\n      return;\r\n    }\r\n    const rage = event.classResources.find(e => e.type === RESOURCE_TYPES.RAGE.id);\r\n    if (!rage || !rage.cost) {\r\n      return;\r\n    }\r\n\r\n    const rageSpend = rage.cost / 10;\r\n    const reduction = rageSpend / RAGE_NEEDED_FOR_A_PROC * CDR_PER_PROC;\r\n    this.cooldownsAffected.forEach(e => {\r\n      if (!this.spellUsable.isOnCooldown(e)) {\r\n        this.wastedReduction[e] += reduction;\r\n      } else {\r\n        const effectiveReduction = this.spellUsable.reduceCooldown(e, reduction);\r\n        this.effectiveReduction[e] += effectiveReduction;\r\n        this.wastedReduction[e] += reduction - effectiveReduction;\r\n      }\r\n    });\r\n    this.totalRageSpend += rageSpend;\r\n  }\r\n\r\n  subStatistic() {\r\n    return (\r\n      <StatisticListBoxItem\r\n        title={<><SpellLink id={SPELLS.ANGER_MANAGEMENT_TALENT.id} /> CDR</>}\r\n        value={`${formatDuration((this.effectiveReduction[SPELLS.BLADESTORM.id] + this.wastedReduction[SPELLS.BLADESTORM.id]) / 1000)} min`}\r\n        valueTooltip={this.tooltip}\r\n      />\r\n    );\r\n  }\r\n}\r\n\r\nexport default AngerManagement;\r\n","import React from 'react';\r\nimport SPELLS from 'common/SPELLS';\r\nimport { formatThousands } from 'common/format';\r\nimport Analyzer from 'parser/core/Analyzer';\r\nimport AbilityTracker from 'parser/shared/modules/AbilityTracker';\r\nimport SpellLink from 'common/SpellLink';\r\nimport StatisticListBoxItem from 'interface/others/StatisticListBoxItem';\r\n\r\n/**\r\n * Bash an enemy's skull, dealing [ 84% of Attack Power ] Physical damage.\r\n */\r\n\r\nclass Skullsplitter extends Analyzer {\r\n  static dependencies = {\r\n    abilityTracker: AbilityTracker,\r\n  };\r\n\r\n  constructor(...args) {\r\n    super(...args);\r\n    this.active = this.selectedCombatant.hasTalent(SPELLS.SKULLSPLITTER_TALENT.id);\r\n  }\r\n\r\n  subStatistic() {\r\n    const Skullsplitter = this.abilityTracker.getAbility(SPELLS.SKULLSPLITTER_TALENT.id);\r\n    const total = Skullsplitter.damageEffective || 0;\r\n    const avg = total / (Skullsplitter.casts || 1);\r\n    return (\r\n      <StatisticListBoxItem\r\n        title={<>Average <SpellLink id={SPELLS.SKULLSPLITTER_TALENT.id} /> damage</>}\r\n        value={formatThousands(avg)}\r\n        valueTooltip={`Total Skullsplitter damage: ${formatThousands(total)}`}\r\n      />\r\n    );\r\n  }\r\n}\r\n\r\nexport default Skullsplitter;\r\n","import React from 'react';\r\nimport SPELLS from 'common/SPELLS';\r\nimport { formatNumber } from 'common/format';\r\nimport Analyzer, { SELECTED_PLAYER } from 'parser/core/Analyzer';\r\nimport SpellLink from 'common/SpellLink';\r\nimport StatisticListBoxItem from 'interface/others/StatisticListBoxItem';\r\nimport Events from 'parser/core/Events';\r\n\r\n/**\r\n * Your attacks have a chance to make your next Execute cost no Rage,\r\n * be usable on any target regardless of their health, and deal damage as if you spent 40 Rage.\r\n */\r\n\r\nclass SuddenDeath extends Analyzer {\r\n\r\n  totalProc = 0;\r\n  totalDamages = 0;\r\n\r\n  constructor(...args) {\r\n    super(...args);\r\n    this.active = this.selectedCombatant.hasTalent(SPELLS.SUDDEN_DEATH_TALENT_ARMS.id);\r\n    this.addEventListener(Events.damage.by(SELECTED_PLAYER).spell(SPELLS.EXECUTE_DAMAGE), this._onExecuteDamage);\r\n    this.addEventListener(Events.applybuff.by(SELECTED_PLAYER).spell(SPELLS.SUDDEN_DEATH_TALENT_ARMS_BUFF), this._countSuddenDeathProc);\r\n    this.addEventListener(Events.refreshbuff.by(SELECTED_PLAYER).spell(SPELLS.SUDDEN_DEATH_TALENT_ARMS_BUFF), this._countSuddenDeathProc);\r\n  }\r\n\r\n  _onExecuteDamage(event) {\r\n    if (!this.selectedCombatant.hasBuff(SPELLS.SUDDEN_DEATH_TALENT_ARMS_BUFF.id)) {\r\n      return;\r\n    }\r\n    this.totalDamages += event.amount + (event.absorbed || 0);\r\n  }\r\n\r\n  _countSuddenDeathProc() {\r\n    this.totalProc += 1;\r\n  }\r\n\r\n  subStatistic() {\r\n    return (\r\n      <StatisticListBoxItem\r\n        title={<><SpellLink id={SPELLS.EXECUTE_DAMAGE.id} /> with <SpellLink id={SPELLS.SUDDEN_DEATH_TALENT_ARMS.id} /> damage</>}\r\n        value={formatNumber(this.totalDamages)}\r\n        valueTooltip={`Total Execute damage while Sudden Death was active (${this.totalProc} proc)`}\r\n      />\r\n    );\r\n  }\r\n}\r\n\r\nexport default SuddenDeath;\r\n","import React from 'react';\r\nimport Analyzer from 'parser/core/Analyzer';\r\nimport SPELLS from 'common/SPELLS';\r\nimport { formatPercentage } from 'common/format';\r\nimport SpellLink from 'common/SpellLink';\r\nimport StatisticListBoxItem from 'interface/others/StatisticListBoxItem';\r\n\r\n/**\r\n * Your auto attacks generate 10% more Rage.\r\n *\r\n * Killing an enemy instantly generates 10 Rage, and increases your movement speed by 30% for 8 sec.\r\n */\r\n\r\nclass WarMachine extends Analyzer {\r\n  get uptime() {\r\n    return this.selectedCombatant.getBuffUptime(SPELLS.WAR_MACHINE_TALENT_BUFF.id) / this.owner.fightDuration;\r\n  }\r\n\r\n  constructor(...args) {\r\n    super(...args);\r\n    this.active = this.selectedCombatant.hasTalent(SPELLS.WAR_MACHINE_TALENT.id);\r\n  }\r\n\r\n  subStatistic() {\r\n    return (\r\n      <StatisticListBoxItem\r\n        title={<><SpellLink id={SPELLS.WAR_MACHINE_TALENT.id} /> uptime</>}\r\n        value={`${formatPercentage(this.uptime)} %`}\r\n      />\r\n    );\r\n  }\r\n}\r\n\r\nexport default WarMachine;\r\n","import React from 'react';\r\nimport SPELLS from 'common/SPELLS';\r\nimport { formatNumber, formatThousands } from 'common/format';\r\nimport Analyzer, { SELECTED_PLAYER } from 'parser/core/Analyzer';\r\nimport AbilityTracker from 'parser/shared/modules/AbilityTracker';\r\nimport SpellLink from 'common/SpellLink';\r\nimport StatisticListBoxItem from 'interface/others/StatisticListBoxItem';\r\nimport Events from 'parser/core/Events';\r\n\r\n/**\r\n * Hurls your weapon at an enemy, causing [ 16.38% of Attack Power ] Physical damage and stunning for 4 sec.\r\n */\r\n\r\nclass StormBolt extends Analyzer {\r\n  static dependencies = {\r\n    abilityTracker: AbilityTracker,\r\n  };\r\n\r\n  stun = 0;\r\n\r\n  constructor(...args) {\r\n    super(...args);\r\n    this.active = this.selectedCombatant.hasTalent(SPELLS.STORM_BOLT_TALENT.id);\r\n    this.addEventListener(Events.applydebuff.by(SELECTED_PLAYER).spell(SPELLS.STORM_BOLT_TALENT_DEBUFF), this._onStun);\r\n  }\r\n\r\n  _onStun() {\r\n    this.stun += 1;\r\n  }\r\n\r\n  subStatistic() {\r\n    const stormBolt = this.abilityTracker.getAbility(SPELLS.STORM_BOLT_TALENT.id);\r\n    const total = stormBolt.damageEffective || 0;\r\n    return (\r\n      <StatisticListBoxItem\r\n        title={<><SpellLink id={SPELLS.STORM_BOLT_TALENT.id} /> Stun</>}\r\n        value={formatNumber(this.stun)}\r\n        valueTooltip={`Total Storm Bolt damage: ${formatThousands(total)}`}\r\n      />\r\n    );\r\n  }\r\n}\r\n\r\nexport default StormBolt;\r\n","import React from 'react';\r\nimport SPELLS from 'common/SPELLS';\r\nimport { formatThousands } from 'common/format';\r\nimport Analyzer, { SELECTED_PLAYER } from 'parser/core/Analyzer';\r\nimport AbilityTracker from 'parser/shared/modules/AbilityTracker';\r\nimport SpellLink from 'common/SpellLink';\r\nimport StatisticListBoxItem from 'interface/others/StatisticListBoxItem';\r\nimport Events from 'parser/core/Events';\r\n\r\n/**\r\n * Instantly attack the target, causing [ 39.31% of Attack Power ] damage\r\n * and healing you for 20% of your maximum health.\r\n *\r\n * Killing an enemy that yields experience or honor resets the cooldown of Impending Victory.\r\n */\r\n\r\nclass ImpendingVictory extends Analyzer {\r\n  static dependencies = {\r\n    abilityTracker: AbilityTracker,\r\n  };\r\n\r\n  totalHeal = 0;\r\n\r\n  constructor(...args) {\r\n    super(...args);\r\n    this.active = this.selectedCombatant.hasTalent(SPELLS.IMPENDING_VICTORY_TALENT.id);\r\n    this.addEventListener(Events.heal.by(SELECTED_PLAYER).spell(SPELLS.IMPENDING_VICTORY_TALENT_HEAL), this._onImpendingVictoryHeal);\r\n  }\r\n\r\n  _onImpendingVictoryHeal(event) {\r\n    this.totalHeal += event.amount;\r\n  }\r\n\r\n  subStatistic() {\r\n    const impendingVictory = this.abilityTracker.getAbility(SPELLS.IMPENDING_VICTORY_TALENT.id);\r\n    const total = impendingVictory.damageEffective || 0;\r\n    const avg = this.totalHeal / (impendingVictory.casts || 1);\r\n    return (\r\n      <StatisticListBoxItem\r\n        title={<>Average <SpellLink id={SPELLS.IMPENDING_VICTORY_TALENT.id} /> heal</>}\r\n        value={formatThousands(avg)}\r\n        valueTooltip={(\r\n          <>\r\n            Total Impending Victory heal: {formatThousands(this.totalHeal)} <br />\r\n            Total Impending Victory damages: {formatThousands(total)}\r\n          </>\r\n        )}\r\n      />\r\n    );\r\n  }\r\n}\r\n\r\nexport default ImpendingVictory;\r\n","import React from 'react';\r\nimport Analyzer, { SELECTED_PLAYER } from 'parser/core/Analyzer';\r\nimport calculateEffectiveDamage from 'parser/core/calculateEffectiveDamage';\r\nimport SPELLS from 'common/SPELLS';\r\nimport { formatPercentage, formatThousands } from 'common/format';\r\nimport SpellLink from 'common/SpellLink';\r\nimport StatisticListBoxItem from 'interface/others/StatisticListBoxItem';\r\nimport Events from 'parser/core/Events';\r\n\r\n/**\r\n * Whirlwind deals 10% increased damage, and Slams your primary target.\r\n *\r\n * Example log: /report/cM1Kmp3qW8Yvkang/1-LFR+Zul+-+Kill+(4:21)/22-Gorrtil/events\r\n */\r\n\r\nconst WHIRLWIND_DAMAGE_BONUS = 0.1;\r\nconst MAX_DELAY = 30;\r\n\r\nclass FervorOfBattle extends Analyzer {\r\n\r\n  get dps() {\r\n    return this.bonusDamage / this.owner.fightDuration * 1000;\r\n  }\r\n\r\n  bonusDamage = 0;\r\n  lastWhirlwindCast = 0;\r\n  whirlwind = 0;\r\n\r\n  constructor(...args) {\r\n    super(...args);\r\n    this.active = this.selectedCombatant.hasTalent(SPELLS.FERVOR_OF_BATTLE_TALENT.id);\r\n    this.addEventListener(Events.cast.by(SELECTED_PLAYER).spell(SPELLS.WHIRLWIND), this._onWhirlwindCast);\r\n    this.addEventListener(Events.damage.by(SELECTED_PLAYER).spell([SPELLS.WHIRLWIND_DAMAGE_1, SPELLS.WHIRLWIND_DAMAGE_2_3, SPELLS.SLAM]), this._onFobDamage);\r\n  }\r\n\r\n  _onWhirlwindCast(event) {\r\n    this.lastWhirlwindCast = event.timestamp;\r\n  }\r\n\r\n  _onFobDamage(event) {\r\n    const guid = event.ability.guid;\r\n    if (guid === SPELLS.WHIRLWIND_DAMAGE_1.id || guid === SPELLS.WHIRLWIND_DAMAGE_2_3.id) {\r\n      this.bonusDamage += calculateEffectiveDamage(event, WHIRLWIND_DAMAGE_BONUS);\r\n    } else if (guid === SPELLS.SLAM.id && event.timestamp - this.lastWhirlwindCast < MAX_DELAY) {\r\n      this.bonusDamage += event.amount + (event.absorbed || 0);\r\n    }\r\n  }\r\n\r\n  subStatistic() {\r\n    return (\r\n      <StatisticListBoxItem\r\n        title={<><SpellLink id={SPELLS.FERVOR_OF_BATTLE_TALENT.id} /> bonus damage</>}\r\n        value={`${formatThousands(this.dps)} DPS`}\r\n        valueTooltip={`Your Fervor of Battle contributed ${formatThousands(this.bonusDamage)} total damage (${formatPercentage(this.owner.getPercentageOfTotalDamageDone(this.bonusDamage))} %).`}\r\n      />\r\n    );\r\n  }\r\n}\r\n\r\nexport default FervorOfBattle;\r\n","import React from 'react';\r\nimport SPELLS from 'common/SPELLS';\r\nimport { formatThousands } from 'common/format';\r\nimport Analyzer from 'parser/core/Analyzer';\r\nimport AbilityTracker from 'parser/shared/modules/AbilityTracker';\r\nimport SpellLink from 'common/SpellLink';\r\nimport StatisticListBoxItem from 'interface/others/StatisticListBoxItem';\r\n\r\n/**\r\n * Restores 6% health every 1 sec when you have not taken damage for 5 sec.\r\n */\r\n\r\nclass SecondWind extends Analyzer {\r\n  static dependencies = {\r\n    abilityTracker: AbilityTracker,\r\n  };\r\n\r\n  constructor(...args) {\r\n    super(...args);\r\n    this.active = this.selectedCombatant.hasTalent(SPELLS.SECOND_WIND_TALENT.id);\r\n  }\r\n\r\n  subStatistic() {\r\n    const secondWind = this.abilityTracker.getAbility(SPELLS.SECOND_WIND_TALENT_HEAL.id);\r\n    const heal = secondWind.healingEffective || 0;\r\n    return (\r\n      <StatisticListBoxItem\r\n        title={<><SpellLink id={SPELLS.SECOND_WIND_TALENT.id} /> health restored</>}\r\n        value={formatThousands(heal)}\r\n      />\r\n    );\r\n  }\r\n}\r\n\r\nexport default SecondWind;\r\n","import React from 'react';\r\nimport Analyzer from 'parser/core/Analyzer';\r\nimport AbilityTracker from 'parser/shared/modules/AbilityTracker';\r\nimport SPELLS from 'common/SPELLS';\r\nimport { formatThousands } from 'common/format';\r\nimport SpellLink from 'common/SpellLink';\r\nimport StatisticListBoxItem from 'interface/others/StatisticListBoxItem';\r\n\r\n/**\r\n * Strikes all enemies in front of you with a sweeping attack for [ 45% of Attack Power ] Physical damage.\r\n * Hitting 3 or more targets inflicts Deep Wounds.\r\n */\r\n\r\nclass Cleave extends Analyzer {\r\n  static dependencies = {\r\n    abilityTracker: AbilityTracker,\r\n  };\r\n\r\n  constructor(...args) {\r\n    super(...args);\r\n    this.active = this.selectedCombatant.hasTalent(SPELLS.CLEAVE_TALENT.id);\r\n  }\r\n\r\n  subStatistic() {\r\n    const Cleave = this.abilityTracker.getAbility(SPELLS.CLEAVE_TALENT.id);\r\n    const total = Cleave.damageEffective || 0;\r\n    const avg = total / (Cleave.casts || 1);\r\n    return (\r\n      <StatisticListBoxItem\r\n        title={<>Average <SpellLink id={SPELLS.CLEAVE_TALENT.id} /> damage</>}\r\n        value={formatThousands(avg)}\r\n        valueTooltip={`Total Cleave damage: ${formatThousands(total)}`}\r\n      />\r\n    );\r\n  }\r\n}\r\n\r\nexport default Cleave;\r\n","import React from 'react';\r\nimport Analyzer, { SELECTED_PLAYER } from 'parser/core/Analyzer';\r\nimport Enemies from 'parser/shared/modules/Enemies';\r\nimport calculateEffectiveDamage from 'parser/core/calculateEffectiveDamage';\r\nimport SPELLS from 'common/SPELLS';\r\nimport { formatPercentage, formatThousands } from 'common/format';\r\nimport SpellLink from 'common/SpellLink';\r\nimport StatisticListBoxItem from 'interface/others/StatisticListBoxItem';\r\nimport Events from 'parser/core/Events';\r\n\r\n/**\r\n * Smash the ground and shatter the armor of all enemies within 8 yds,\r\n * dealing [ 150% of Attack Power ] Physical damage and increasing damage\r\n * you deal to them by 30% for 10 sec.\r\n */\r\n\r\nconst WARBREAKER_BONUS_DAMAGES = 0.3;\r\n\r\nclass Warbreaker extends Analyzer {\r\n  get dps() {\r\n    return this.totalDamages / this.owner.fightDuration * 1000;\r\n  }\r\n\r\n  static dependencies = {\r\n    enemies: Enemies,\r\n  };\r\n  totalDamages = 0;\r\n\r\n  constructor(...args) {\r\n    super(...args);\r\n    this.active = this.selectedCombatant.hasTalent(SPELLS.WARBREAKER_TALENT.id);\r\n    this.addEventListener(Events.damage.by(SELECTED_PLAYER), this._onDamage);\r\n  }\r\n\r\n  _onDamage(event) {\r\n    if (event.targetIsFriendly) {\r\n      return;\r\n    }\r\n    if (event.ability.guid === SPELLS.WARBREAKER_TALENT.id) {\r\n      this.totalDamages += (event.amount || 0) + (event.absorbed || 0);\r\n    }\r\n    const target = this.enemies.getEntity(event);\r\n    if (target !== null && target.hasBuff(SPELLS.COLOSSUS_SMASH_DEBUFF.id, event.timestamp)) {\r\n      this.totalDamages += calculateEffectiveDamage(event, WARBREAKER_BONUS_DAMAGES);\r\n    }\r\n  }\r\n\r\n  subStatistic() {\r\n    return (\r\n      <StatisticListBoxItem\r\n        title={<><SpellLink id={SPELLS.WARBREAKER_TALENT.id} /> bonus damage</>}\r\n        value={`${formatThousands(this.dps)} DPS`}\r\n        valueTooltip={(\r\n          <>\r\n            Your Warbreaker contributed {formatThousands(this.totalDamages)} total damage ({formatPercentage(this.owner.getPercentageOfTotalDamageDone(this.totalDamages))} %).<br />\r\n            This accounts for the damage dealt by Warbreaker and the 30% increased damage from Colossus Smash debuff.\r\n          </>\r\n        )}\r\n      />\r\n    );\r\n  }\r\n}\r\n\r\nexport default Warbreaker;\r\n","import React from 'react';\r\nimport Analyzer, { SELECTED_PLAYER } from 'parser/core/Analyzer';\r\nimport calculateEffectiveDamage from 'parser/core/calculateEffectiveDamage';\r\nimport SPELLS from 'common/SPELLS';\r\nimport { formatPercentage, formatThousands } from 'common/format';\r\nimport SpellLink from 'common/SpellLink';\r\nimport StatisticListBoxItem from 'interface/others/StatisticListBoxItem';\r\nimport Events from 'parser/core/Events';\r\n\r\n/**\r\n * Transform into a colossus for 20 sec, causing you to deal 20% increased damage\r\n * and removing all roots and snares.\r\n */\r\n\r\nconst AVATAR_BONUS_DAMAGE = 0.2;\r\n\r\nclass Avatar extends Analyzer {\r\n\r\n  get dps() {\r\n    return this.totalDamages / this.owner.fightDuration * 1000;\r\n  }\r\n\r\n  totalDamages = 0;\r\n\r\n  constructor(...args) {\r\n    super(...args);\r\n    this.active = this.selectedCombatant.hasTalent(SPELLS.AVATAR_TALENT.id);\r\n    this.addEventListener(Events.damage.by(SELECTED_PLAYER), this._onDamage);\r\n  }\r\n\r\n  _onDamage(event) {\r\n    if (event.targetIsFriendly || !this.selectedCombatant.hasBuff(SPELLS.AVATAR_TALENT.id, event.timestamp)) {\r\n      return;\r\n    }\r\n    this.totalDamages += calculateEffectiveDamage(event, AVATAR_BONUS_DAMAGE);\r\n  }\r\n\r\n  subStatistic() {\r\n    return (\r\n      <StatisticListBoxItem\r\n        title={<><SpellLink id={SPELLS.AVATAR_TALENT.id} /> bonus damage</>}\r\n        value={`${formatThousands(this.dps)} DPS`}\r\n        valueTooltip={(\r\n          <>\r\n            Your Avatar contributed {formatThousands(this.totalDamages)} total damage ({formatPercentage(this.owner.getPercentageOfTotalDamageDone(this.totalDamages))} %).<br />\r\n            This only accounts for the passive 20% increased damage of Avatar.\r\n          </>\r\n        )}\r\n      />\r\n    );\r\n  }\r\n}\r\n\r\nexport default Avatar;\r\n","import React from 'react';\r\nimport SPELLS from 'common/SPELLS';\r\nimport { formatThousands } from 'common/format';\r\nimport Analyzer from 'parser/core/Analyzer';\r\nimport AbilityTracker from 'parser/shared/modules/AbilityTracker';\r\nimport SpellLink from 'common/SpellLink';\r\nimport StatisticListBoxItem from 'interface/others/StatisticListBoxItem';\r\n\r\n/**\r\n * Throws a whirling weapon at the target location that inflicts [ 309.6% of Attack Power ] damage\r\n * to all enemies within 8 yards over 7 sec.\r\n */\r\n\r\nclass Ravager extends Analyzer {\r\n  static dependencies = {\r\n    abilityTracker: AbilityTracker,\r\n  };\r\n\r\n  constructor(...args) {\r\n    super(...args);\r\n    this.active = this.selectedCombatant.hasTalent(SPELLS.RAVAGER_TALENT_ARMS.id);\r\n  }\r\n\r\n  subStatistic() {\r\n    const ravager = this.abilityTracker.getAbility(SPELLS.RAVAGER_DAMAGE.id);\r\n    const total = ravager.damageEffective || 0;\r\n    return (\r\n      <StatisticListBoxItem\r\n        title={<><SpellLink id={SPELLS.RAVAGER_TALENT_ARMS.id} /> damage</>}\r\n        value={formatThousands(total)}\r\n      />\r\n    );\r\n  }\r\n}\r\n\r\nexport default Ravager;\r\n","import React from 'react';\r\nimport Analyzer from 'parser/core/Analyzer';\r\nimport StatisticsListBox, { STATISTIC_ORDER } from 'interface/others/StatisticsListBox';\r\n\r\n// Talents\r\nimport AngerManagement from './AngerManagement';\r\nimport Skullsplitter from './Skullsplitter';\r\nimport SuddenDeath from './SuddenDeath';\r\nimport WarMachine from './WarMachine';\r\nimport StormBolt from './StormBolt';\r\nimport ImpendingVictory from './ImpendingVictory';\r\nimport FervorOfBattle from './FervorOfBattle';\r\nimport SecondWind from './SecondWind';\r\nimport Cleave from './Cleave';\r\nimport Warbreaker from './Warbreaker';\r\nimport Avatar from './Avatar';\r\nimport Ravager from './Ravager';\r\n\r\n// Rend statistics are in '../core/Dots'\r\n\r\nclass TalentStatisticBox extends Analyzer {\r\n  static dependencies = {\r\n    skullsplitter: Skullsplitter,\r\n    suddenDeath: SuddenDeath,\r\n    warMachine: WarMachine,\r\n    stormBolt: StormBolt,\r\n    impendingVictory: ImpendingVictory,\r\n    fervorOfBattle: FervorOfBattle,\r\n    secondWind: SecondWind,\r\n    cleave: Cleave,\r\n    warbreaker: Warbreaker,\r\n    avatar: Avatar,\r\n    angerManagement: AngerManagement,\r\n    ravager: Ravager,\r\n  };\r\n\r\n  constructor(...args) {\r\n    super(...args);\r\n    this.active = Object.keys(this.constructor.dependencies)\r\n      .map(name => this[name].active)\r\n      .includes(true);\r\n  }\r\n\r\n  statistic() {\r\n    return (\r\n      <StatisticsListBox\r\n        title=\"Talents\"\r\n        position={STATISTIC_ORDER.CORE(2)}\r\n        tooltip=\"This provides an overview of the damage contributions of various talents. This isn't meant as a way to 1:1 evaluate talents, as some talents bring other strengths to the table than pure damage.\"\r\n      >\r\n        {Object.keys(this.constructor.dependencies).map(name => {\r\n          const module = this[name];\r\n          if (!module.active) {\r\n            return null;\r\n          }\r\n          return (\r\n            <React.Fragment key={name}>\r\n              {module.subStatistic()}\r\n            </React.Fragment>\r\n          );\r\n        })}\r\n      </StatisticsListBox>\r\n    );\r\n  }\r\n}\r\n\r\nexport default TalentStatisticBox;\r\n","import React from 'react';\r\n\r\nimport SPELLS from 'common/SPELLS/talents/warrior';\r\nimport SpellIcon from 'common/SpellIcon';\r\nimport SpellLink from 'common/SpellLink';\r\nimport { formatNumber, formatThousands } from 'common/format';\r\nimport Analyzer, { SELECTED_PLAYER } from 'parser/core/Analyzer';\r\nimport StatisticBox, { STATISTIC_ORDER } from 'interface/others/StatisticBox';\r\nimport Events from 'parser/core/Events';\r\nimport Tooltip from 'common/Tooltip';\r\nimport { i18n } from '@lingui/core';\r\nimport { t } from '@lingui/macro';\r\n\r\n/**\r\n * A defensive combat state that reduces all damage you take by 20%,\r\n * and all damage you deal by 10%. Lasts 0 sec.\r\n */\r\n\r\n// TODO: Add a suggestion regarding having this up too little\r\n\r\nconst DEFENSIVE_STANCE_DR = 0.2;\r\nconst DEFENSIVE_STANCE_DL = 0.1;\r\nconst MAX_WIDTH = .9;\r\n\r\nclass DefensiveStance extends Analyzer {\r\n  get drps() {\r\n    return this.perSecond(this.totalDamageMitigated);\r\n  }\r\n\r\n  get dlps() {\r\n    return this.perSecond(this.totalDamageLost);\r\n  }\r\n\r\n  totalDamageMitigated = 0;\r\n  totalDamageLost = 0;\r\n\r\n  constructor(...args) {\r\n    super(...args);\r\n    this.active = this.selectedCombatant.hasTalent(SPELLS.DEFENSIVE_STANCE_TALENT.id);\r\n    this.addEventListener(Events.damage.to(SELECTED_PLAYER), this._onDamageTaken);\r\n    this.addEventListener(Events.damage.by(SELECTED_PLAYER), this._onDamageDealt);\r\n  }\r\n\r\n  perSecond(amount) {\r\n    return amount / this.owner.fightDuration * 1000;\r\n  }\r\n\r\n  damageTradeoff() {\r\n    let tradeoff = this.totalDamageMitigated / (this.totalDamageLost + this.totalDamageMitigated);\r\n    if (tradeoff > MAX_WIDTH) {\r\n      tradeoff = MAX_WIDTH;\r\n    } else if (tradeoff < 1 - MAX_WIDTH) {\r\n      tradeoff = 1 - MAX_WIDTH;\r\n    }\r\n    return tradeoff;\r\n  }\r\n\r\n  _onDamageTaken(event) {\r\n    if (this.selectedCombatant.hasBuff(SPELLS.DEFENSIVE_STANCE_TALENT.id)) {\r\n      const preMitigatedDefensiveStance = (event.amount + event.absorbed) / (1 - DEFENSIVE_STANCE_DR);\r\n      this.totalDamageMitigated += preMitigatedDefensiveStance * DEFENSIVE_STANCE_DR;\r\n    }\r\n  }\r\n\r\n  _onDamageDealt(event) {\r\n    if (this.selectedCombatant.hasBuff(SPELLS.DEFENSIVE_STANCE_TALENT.id)) {\r\n      const damageDone = event.amount / (1 - DEFENSIVE_STANCE_DL);\r\n      this.totalDamageLost += damageDone * DEFENSIVE_STANCE_DL;\r\n    }\r\n  }\r\n\r\n  statistic() {\r\n    const footer = (\r\n      <div className=\"statistic-box-bar\">\r\n        <Tooltip content={`You effectively reduced damage taken by a total of ${formatThousands(this.totalDamageMitigated)} damage (${formatThousands(this.perSecond(this.totalDamageMitigated))} DRPS).`}>\r\n          <div\r\n            className=\"stat-health-bg\"\r\n            style={{ width: `${this.damageTradeoff() * 100}%` }}\r\n          >\r\n            <img src=\"/img/shield.png\" alt=\"Damage reduced\" />\r\n          </div>\r\n        </Tooltip>\r\n        <Tooltip content={`You lost ${formatThousands(this.totalDamageLost)} damage through the use of Defensive Stance. (${formatThousands(this.perSecond(this.totalDamageLost))} DLPS).`}>\r\n          <div className=\"remainder DeathKnight-bg\">\r\n            <img src=\"/img/sword.png\" alt=\"Damage lost\" />\r\n          </div>\r\n        </Tooltip>\r\n      </div>\r\n    );\r\n\r\n    return (\r\n      <StatisticBox\r\n        position={STATISTIC_ORDER.CORE(5)}\r\n        icon={<SpellIcon id={SPELLS.DEFENSIVE_STANCE_TALENT.id} />}\r\n        value={`≈${formatNumber(this.drps)} DRPS, ${formatNumber(this.dlps)} DLPS`}\r\n        label=\"Damage reduced & lost\"\r\n        tooltip={(\r\n          <>\r\n            <strong>Total:</strong><br />\r\n            Effective damage reduction: {formatThousands(this.totalDamageMitigated)} damage ({formatThousands(this.perSecond(this.totalDamageMitigated))} DRPS)<br />\r\n            Effective damage lost: {formatThousands(this.totalDamageLost)} damage ({formatThousands(this.perSecond(this.totalDamageLost))} DLPS)\r\n          </>\r\n        )}\r\n        footer={footer}\r\n      />\r\n    );\r\n  }\r\n\r\n  suggestions(when) {\r\n    when(this.totalDamageLost).isGreaterThan(this.totalDamageMitigated)\r\n      .addSuggestion((suggest, dl, dr) => suggest('While Defensive Stance was up, your damage done was reduced by more than the damage you mitigated. Ensure that you are only using Defensive Stance when you are about to take a lot of damage and that you cancel it quickly to minimize the time spent dealing less damage.')\r\n        .icon(SPELLS.DEFENSIVE_STANCE_TALENT.icon)\r\n        .actual(i18n._(t('warrior.arms.suggestions.defensiveStance')`A total of ${formatNumber(dl)} of your damage has been reduced compared to ${formatNumber(dr)} of the damage from the boss.`))\r\n        .recommended('Reduced damage taken should be higher than your reduced damage.'));\r\n    when(this.totalDamageMitigated).isLessThan(1)\r\n      .addSuggestion((suggest) => suggest(<> You never used <SpellLink id={SPELLS.DEFENSIVE_STANCE_TALENT.id} />. Try to use it to reduce incoming damage or use another talent that would be more useful. </>)\r\n        .icon(SPELLS.DEFENSIVE_STANCE_TALENT.icon));\r\n  }\r\n}\r\n\r\nexport default DefensiveStance;\r\n","import CoreCombatLogParser from 'parser/core/CombatLogParser';\r\n\r\n// Normalizers\r\nimport OverpowerStacks from './normalizers/OverpowerStacks';\r\n// Features\r\nimport Checklist from './modules/features/Checklist/Module';\r\nimport Abilities from './modules/Abilities';\r\nimport AlwaysBeCasting from './modules/features/AlwaysBeCasting';\r\nimport CooldownThroughputTracker from './modules/features/CooldownThroughputTracker';\r\nimport SpellUsable from './modules/features/SpellUsable';\r\nimport Channeling from './modules/features/Channeling';\r\n// Resource\r\nimport RageTracker from './modules/features/RageTracker';\r\nimport RageDetail from './modules/features/RageDetails';\r\n// Core\r\nimport TacticianProc from './modules/core/TacticianProc';\r\nimport Overpower from './modules/core/Overpower';\r\nimport Slam from './modules/core/Slam';\r\nimport SweepingStrikes from './modules/core/SweepingStrikes';\r\n// Execute Range\r\nimport Rend from './modules/core/Execute/Rend';\r\nimport MortalStrike from './modules/core/Execute/MortalStrike';\r\nimport ExecuteRange from './modules/core/Execute/ExecuteRange';\r\n// Dots\r\nimport DeepWoundsUptime from './modules/core/Dots/DeepWoundsUptime';\r\nimport RendUptime from './modules/core/Dots/RendUptime';\r\nimport DotUptimes from './modules/core/Dots';\r\n// Talents\r\nimport Talents from './modules/talents';\r\nimport AngerManagement from './modules/talents/AngerManagement';\r\nimport DefensiveStance from './modules/talents/DefensiveStance';\r\nimport Skullsplitter from './modules/talents/Skullsplitter';\r\nimport SuddenDeath from './modules/talents/SuddenDeath';\r\nimport WarMachine from './modules/talents/WarMachine';\r\nimport StormBolt from './modules/talents/StormBolt';\r\nimport ImpendingVictory from './modules/talents/ImpendingVictory';\r\nimport FervorOfBattle from './modules/talents/FervorOfBattle';\r\nimport SecondWind from './modules/talents/SecondWind';\r\nimport Cleave from './modules/talents/Cleave';\r\nimport Warbreaker from './modules/talents/Warbreaker';\r\nimport Avatar from './modules/talents/Avatar';\r\nimport Ravager from './modules/talents/Ravager';\r\n\r\nclass CombatLogParser extends CoreCombatLogParser {\r\n  static specModules = {\r\n    // Normalizers\r\n    overpowerStacks: OverpowerStacks,\r\n\r\n    // WarriorCore\r\n    abilities: Abilities,\r\n\r\n    // Features\r\n    checklist: Checklist,\r\n    alwaysBeCasting: AlwaysBeCasting,\r\n    cooldownThroughputTracker: CooldownThroughputTracker,\r\n    spellUsable: SpellUsable,\r\n    channeling: Channeling,\r\n\r\n    // Resource\r\n    rageTracker: RageTracker,\r\n    rageDetail: RageDetail,\r\n\r\n    // Core\r\n    tacticianProc: TacticianProc,\r\n    overpower: Overpower,\r\n    slam: Slam,\r\n    sweepingStrikes: SweepingStrikes,\r\n\r\n    // Execute range\r\n    executeRange: ExecuteRange,\r\n    rend: Rend,\r\n    mortalStrike: MortalStrike,\r\n\r\n    // Dots\r\n    deepWoundsUptime: DeepWoundsUptime,\r\n    rendUptime: RendUptime,\r\n    dotUptimes: DotUptimes,\r\n\r\n    // Talents\r\n    talents: Talents,\r\n    angerManagement: AngerManagement,\r\n    defensiveStance: DefensiveStance,\r\n    skullsplitter: Skullsplitter,\r\n    suddenDeath: SuddenDeath,\r\n    warMachine: WarMachine,\r\n    stormBolt: StormBolt,\r\n    impendingVictory: ImpendingVictory,\r\n    fervorOfBattle: FervorOfBattle,\r\n    secondWind: SecondWind,\r\n    cleave: Cleave,\r\n    warbreaker: Warbreaker,\r\n    avatar: Avatar,\r\n    ravager: Ravager,\r\n  };\r\n}\r\n\r\nexport default CombatLogParser;\r\n","export default function calculateEffectiveDamage(event, increase) {\r\n  const raw = (event.amount || 0) + (event.absorbed || 0);\r\n  return raw - (raw / (1 + increase));\r\n}\r\n","import Analyzer, { SELECTED_PLAYER, Options } from 'parser/core/Analyzer';\r\nimport EventEmitter from 'parser/core/modules/EventEmitter';\r\nimport Events, { EventType, ClassResources, EnergizeEvent, CastEvent, HealEvent, SpendResourceEvent } from 'parser/core/Events';\r\nimport { Resource } from 'game/RESOURCE_TYPES';\r\n\r\nexport type BuilderObj = {\r\n  generated: number,\r\n  wasted: number,\r\n  casts: number,\r\n}\r\n\r\nexport type SpenderObj = {\r\n  spent: number,\r\n  spentByCast: number[],\r\n  casts: number,\r\n}\r\n\r\ntype ResourceUpdate = {\r\n  timestamp: number | undefined,\r\n  current: number,\r\n  waste: number,\r\n  generated: number,\r\n  used: number,\r\n}\r\n\r\n/**\r\n * This is an 'abstract' implementation of a framework for tracking resource generating/spending.\r\n * Extend it by following the instructions in the TODO comments below\r\n */\r\nclass ResourceTracker extends Analyzer {\r\n  static dependencies = {\r\n    eventEmitter: EventEmitter,\r\n    // Optional dependency for the `resourceCost` prop of events\r\n    // spellResourceCost: SpellResourceCost,\r\n  };\r\n\r\n  protected eventEmitter!: EventEmitter;\r\n\r\n  current = 0;\r\n  resourceUpdates: ResourceUpdate[] = [];\r\n\r\n  // stores resource gained/spent/wasted by ability ID\r\n  buildersObj: {[index: number]: BuilderObj} = {};\r\n  spendersObj: {[index: number]: SpenderObj} = {};\r\n\r\n  // TODO set this to the resource you wish to track constructor.. see the appropriate objects in game/RESOURCE_TYPES\r\n  resource!: Resource;\r\n\r\n  // TODO a classes 'main' resource passes the max along with events, but for other resources this may need to be defined\r\n  maxResource!: number;\r\n\r\n  constructor(options: Options){\r\n    super(options);\r\n    this.addEventListener(Events.energize.to(SELECTED_PLAYER), this.onEnergize);\r\n    this.addEventListener(Events.cast.by(SELECTED_PLAYER), this.onCast);\r\n  }\r\n\r\n  // FIXME implement natural regen\r\n  // TODO if the tracked resource naturally regenerates (like Energy), set this to true and set the parameters of the regeneration in the below fields\r\n  // naturallyRegenerates = false;\r\n  // baseRegenRate; // TODO resource's base regeneration rate in points per second\r\n  // isRegenHasted; // TODO iff true, regeneration rate will be scaled with haste\r\n\r\n  // TODO if you wish an ability to show in results even if it wasn't used, add it using these functions constructor\r\n  initBuilderAbility(spellId: number) {\r\n    this.buildersObj[spellId] = { generated: 0, wasted: 0, casts: 0 };\r\n  }\r\n  initSpenderAbility(spellId: number) {\r\n    this.spendersObj[spellId] = { spent: 0, spentByCast: [], casts: 0 };\r\n  }\r\n\r\n  // BUILDERS - Handled on energize, using the 'resourceChange' field\r\n  onEnergize(event: EnergizeEvent) {\r\n    const spellId = event.ability.guid;\r\n\r\n    if(event.resourceChangeType !== this.resource.id) {\r\n        return;\r\n    }\r\n\r\n    const waste = event.waste;\r\n    const gain = event.resourceChange - waste;\r\n    this._applyBuilder(spellId, gain, waste, this.getResource(event), event.timestamp);\r\n  }\r\n\r\n  // FIXME Track resource drains too, so that the 'current' value can be more accurate\r\n\r\n  // TODO if a resource gain isn't showing as an energize in events, handle it manually by calling this\r\n  /**\r\n   * FIXME solve with a normalizer instead?\r\n   * Applies an energize of the tracked resource type.\r\n   * @param {number} spellId - The spellId to attribute the resource gain to\r\n   * @param {number} amount - The raw amount of resources to gain\r\n   */\r\n  processInvisibleEnergize(spellId: number, amount: number) {\r\n    const maxGain = this.maxResource !== undefined ? this.maxResource - this.current : amount;\r\n    const gain = Math.min(amount, maxGain);\r\n    const waste = Math.max(amount - maxGain, 0);\r\n    this._applyBuilder(spellId, gain, waste);\r\n  }\r\n\r\n  _applyBuilder(spellId: number, gain: number, waste: number,  resource?: ClassResources, timestamp?: number) {\r\n    if (!this.buildersObj[spellId]) {\r\n        this.initBuilderAbility(spellId);\r\n    }\r\n\r\n    this.buildersObj[spellId].wasted += waste;\r\n    this.buildersObj[spellId].generated += gain;\r\n    this.buildersObj[spellId].casts += 1;\r\n\r\n    // resource.amount for an energize is the amount AFTER the energize\r\n    if (resource !== null && resource !== undefined && resource.amount !== undefined) {\r\n      this.current = resource.amount;\r\n      if (resource.max !== undefined) {\r\n        this.maxResource = resource.max; // track changes in max resource, which can happen due to procs / casts\r\n      }\r\n    } else {\r\n      this.current += gain;\r\n    }\r\n\r\n    this.resourceUpdates.push({\r\n      timestamp: timestamp,\r\n      current: this.current,\r\n      waste: waste,\r\n      generated: gain,\r\n      used: 0,\r\n    });\r\n  }\r\n\r\n  // SPENDERS - Handled on cast, using the 'classResources' field\r\n  onCast(event: CastEvent) {\r\n    const spellId = event.ability.guid;\r\n\r\n    if(!this.shouldProcessCastEvent(event)) {\r\n        return;\r\n    }\r\n    const eventResource = this.getResource(event);\r\n\r\n    if(!eventResource){\r\n      return;\r\n    }\r\n\r\n    if (eventResource.max) {\r\n      this.maxResource = eventResource.max; // track changes in max resource, which can happen due to procs / casts\r\n    }\r\n    const cost = this.getReducedCost(event);\r\n\r\n    if (!this.spendersObj[spellId]) {\r\n      this.initSpenderAbility(spellId);\r\n    }\r\n\r\n    if (!cost || cost === 0) {\r\n      return;\r\n    }\r\n\r\n    this.spendersObj[spellId].casts += 1;\r\n    this.spendersObj[spellId].spentByCast.push(cost);\r\n    if(cost > 0) {\r\n      this.spendersObj[spellId].spent += cost;\r\n    }\r\n\r\n    //Re-sync current amount, to update not-tracked gains.\r\n    this.current = eventResource.amount - cost;\r\n\r\n    this.resourceUpdates.push({\r\n      timestamp: event.timestamp,\r\n      current: this.current,\r\n      waste: 0,\r\n      generated: 0,\r\n      used: eventResource.amount,\r\n    });\r\n\r\n    this.triggerSpendEvent(cost, event);\r\n  }\r\n\r\n  // TODO if your spec has an ability cost reduction that doesn't show in events, handle it manually by overriding here. Or extend SpellResourceCost and apply the discount there.\r\n  getReducedCost(event: CastEvent) {\r\n    if (event.resourceCost && event.resourceCost[this.resource.id] !== undefined) {\r\n      return event.resourceCost[this.resource.id];\r\n    }\r\n    return this.getResource(event)?.cost;\r\n  }\r\n\r\n  getResource(event: CastEvent | HealEvent | EnergizeEvent ) {\r\n    if(!event.classResources) {\r\n      return undefined;\r\n    } else {\r\n      return event.classResources.find(r => r.type === this.resource.id);\r\n    }\r\n  }  \r\n\r\n  triggerSpendEvent(spent: number, event: CastEvent) {\r\n\r\n    const fabricatedEvent: SpendResourceEvent = {\r\n      type: EventType.SpendResource,\r\n      timestamp: event.timestamp,\r\n      sourceID: event.sourceID,\r\n      targetID: event.targetID,\r\n      resourceChange: spent,\r\n      resourceChangeType: this.resource.id,\r\n      ability: event.ability,\r\n      __fabricated: true,\r\n    };\r\n\r\n    this.eventEmitter.fabricateEvent(fabricatedEvent, event);\r\n  }\r\n\r\n  shouldProcessCastEvent(event: CastEvent) {\r\n    return Boolean(this.getResource(event));\r\n  }\r\n\r\n  getGeneratedBySpell(spellId: number) {\r\n    return (this.buildersObj[spellId] && this.buildersObj[spellId].generated) || 0;\r\n  }\r\n\r\n  getWastedBySpell(spellId: number) {\r\n    return (this.buildersObj[spellId] && this.buildersObj[spellId].wasted) || 0;\r\n  }\r\n\r\n  getBuilderCastsBySpell(spellId: number) {\r\n    return (this.buildersObj[spellId] && this.buildersObj[spellId].casts) || 0;\r\n  }\r\n\r\n  get generated() {\r\n    return Object.values(this.buildersObj).reduce((acc, spell) => acc + spell.generated, 0);\r\n  }\r\n\r\n  get wasted() {\r\n    return Object.values(this.buildersObj).reduce((acc, spell) => acc + spell.wasted, 0);\r\n  }\r\n\r\n  get spent() {\r\n    return Object.values(this.spendersObj).reduce((acc, spell) => acc + spell.spent, 0);\r\n  }\r\n\r\n  get spendersCasts() {\r\n    return Object.values(this.spendersObj).reduce((acc, spell) => acc + spell.casts, 0);\r\n  }\r\n}\r\n\r\nexport default ResourceTracker;\r\n","import React from 'react';\r\n\r\nimport SpellLink from 'common/SpellLink';\r\nimport { formatPercentage } from 'common/format';\r\nimport { TooltipElement } from 'common/Tooltip';\r\n\r\nimport ResourceTracker, { BuilderObj, SpenderObj } from './ResourceTracker';\r\n\r\ninterface Props {\r\n  tracker: ResourceTracker,\r\n  showSpenders: boolean,\r\n}\r\n\r\nclass ResourceBreakdown extends React.Component<Props> {\r\n\r\n  prepareGenerated(buildersObj: {[index: number]: BuilderObj}) {\r\n    return Object.keys(buildersObj)\r\n      .map(abilityId => ({\r\n        abilityId: Number(abilityId),\r\n        generated: buildersObj[Number(abilityId)].generated,\r\n        wasted: buildersObj[Number(abilityId)].wasted,\r\n      }))\r\n      .sort((a, b) => b.generated - a.generated)\r\n      .filter(ability => ability.generated > 0 || ability.wasted);\r\n  }\r\n\r\n  prepareSpent(spendersObj: {[index: number]: SpenderObj}) {\r\n    return Object.keys(spendersObj)\r\n      .map(abilityId => ({\r\n        abilityId: Number(abilityId),\r\n        spent: spendersObj[Number(abilityId)].spent,\r\n        casts: spendersObj[Number(abilityId)].casts,\r\n      }))\r\n      .sort((a, b) => b.spent - a.spent)\r\n      .filter(ability => ability.spent > 0);\r\n  }\r\n\r\n  render() {\r\n    const { tracker, showSpenders } = this.props;\r\n    const resourceName = tracker.resource.name;\r\n\r\n    const generated = this.prepareGenerated(tracker.buildersObj);\r\n    const spent = this.prepareSpent(tracker.spendersObj);\r\n\r\n    let totalGenerated = tracker.generated;\r\n    let totalWasted = tracker.wasted;\r\n\r\n    let totalSpent = tracker.spent;\r\n    let totalCasts = tracker.spendersCasts;\r\n\r\n    // looks wrong but totals are only for the purpose of percentage, and if nothing was wasted, then 0/1 gives correct result 0% wasted, if it's not 0 it retains its original value\r\n    totalGenerated = (totalGenerated === 0) ? 1 : totalGenerated;\r\n    totalWasted = (totalWasted === 0) ? 1 : totalWasted;\r\n\r\n    totalSpent = (totalSpent === 0) ? 1 : totalSpent;\r\n    totalCasts = (totalCasts === 0) ? 1 : totalCasts;\r\n\r\n    return (\r\n      <>\r\n        <table className=\"data-table\">\r\n          <thead>\r\n            <tr>\r\n              <th>Ability</th>\r\n              <th colSpan={2}>{resourceName} generated</th>\r\n              <th colSpan={2}><TooltipElement content=\"This is the amount of resources that were generated while you were already at cap.\">{resourceName} wasted</TooltipElement></th>\r\n            </tr>\r\n          </thead>\r\n          <tbody>\r\n            {generated && generated\r\n              .map(ability => (\r\n                <tr key={ability.abilityId}>\r\n                  <td style={{ width: '30%' }}>\r\n                    <SpellLink id={ability.abilityId} />\r\n                  </td>\r\n                  <td style={{ width: 50, paddingRight: 5, textAlign: 'center' }}>\r\n                    <TooltipElement content={`${formatPercentage(ability.generated / totalGenerated)} %`}>{ability.generated.toFixed(0)}</TooltipElement>\r\n                  </td>\r\n                  <td style={{ width: '40%' }}>\r\n                    <div\r\n                      className=\"performance-bar\"\r\n                      style={{ width: `${(ability.generated / totalGenerated) * 100}%` }}\r\n                    />\r\n                  </td>\r\n                  <td style={{ width: 50, paddingRight: 5, textAlign: 'center' }}>\r\n                    <TooltipElement content={`${formatPercentage(ability.wasted / totalWasted)} %`}>{ability.wasted.toFixed(0)}</TooltipElement>\r\n                  </td>\r\n                  <td style={{ width: '30%' }}>\r\n                    <div\r\n                      className=\"performance-bar\"\r\n                      style={{ width: `${(ability.wasted / totalWasted) * 100}%` }}\r\n                    />\r\n                  </td>\r\n                </tr>\r\n              ))}\r\n          </tbody>\r\n        </table>\r\n        {showSpenders && (\r\n          <table className=\"data-table\">\r\n            <thead>\r\n              <tr>\r\n                <th>Ability</th>\r\n                <th colSpan={2}>{resourceName} spent</th>\r\n                <th colSpan={2}>Casts</th>\r\n              </tr>\r\n            </thead>\r\n            <tbody>\r\n              {spent && spent\r\n                .map(ability => (\r\n                  <tr key={ability.abilityId}>\r\n                    <td style={{ width: '30%' }}>\r\n                      <SpellLink id={ability.abilityId} />\r\n                    </td>\r\n                    <td style={{ width: 50, paddingRight: 5, textAlign: 'center' }}>\r\n                      <TooltipElement content={`${formatPercentage(ability.spent / totalSpent)} %`}>{ability.spent.toFixed(0)}</TooltipElement>\r\n                    </td>\r\n                    <td style={{ width: '40%' }}>\r\n                      <div\r\n                        className=\"performance-bar\"\r\n                        style={{ width: `${(ability.spent / totalSpent) * 100}%` }}\r\n                      />\r\n                    </td>\r\n                    <td style={{ width: 50, paddingRight: 5, textAlign: 'center' }}>\r\n                      <TooltipElement content={`${formatPercentage(ability.casts / totalCasts)} %`}>{ability.casts}</TooltipElement>\r\n                    </td>\r\n                    <td style={{ width: '30%' }}>\r\n                      <div\r\n                        className=\"performance-bar\"\r\n                        style={{ width: `${(ability.casts / totalCasts) * 100}%` }}\r\n                      />\r\n                    </td>\r\n                  </tr>\r\n                ))}\r\n            </tbody>\r\n          </table>\r\n        )}\r\n      </>\r\n    );\r\n  }\r\n}\r\n\r\nexport default ResourceBreakdown;\r\n","import React from 'react';\r\nimport PropTypes from 'prop-types';\r\nimport { TooltipElement } from 'common/Tooltip';\r\n\r\n/**\r\n * @deprecated Use `interface/statistic/Statistic` instead.\r\n */\r\nconst StatisticListBoxItem = ({ title, value, titleTooltip, valueTooltip}) => (\r\n    <div className=\"flex\">\r\n      <div className=\"flex-main\">\r\n        {titleTooltip ? <TooltipElement content={titleTooltip}>{title}</TooltipElement> : title}\r\n      </div>\r\n      <div className=\"flex-sub text-right\">\r\n        {valueTooltip ? <TooltipElement content={valueTooltip}>{value}</TooltipElement> : value}\r\n      </div>\r\n    </div>\r\n  );\r\nStatisticListBoxItem.propTypes = {\r\n  title: PropTypes.node.isRequired,\r\n  value: PropTypes.node.isRequired,\r\n  titleTooltip: PropTypes.node,\r\n  valueTooltip: PropTypes.node,\r\n};\r\n\r\nexport default StatisticListBoxItem;\r\n","'use strict';\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\n\nvar _typeof = typeof Symbol === \"function\" && typeof Symbol.iterator === \"symbol\" ? function (obj) { return typeof obj; } : function (obj) { return obj && typeof Symbol === \"function\" && obj.constructor === Symbol && obj !== Symbol.prototype ? \"symbol\" : typeof obj; };\n\nvar _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; };\n\nvar _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if (\"value\" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();\n\nvar _react = require('react');\n\nvar _react2 = _interopRequireDefault(_react);\n\nvar _propTypes = require('prop-types');\n\nvar _propTypes2 = _interopRequireDefault(_propTypes);\n\nvar _classnames = require('classnames');\n\nvar _classnames2 = _interopRequireDefault(_classnames);\n\nfunction _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }\n\nfunction _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }\n\nfunction _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError(\"Cannot call a class as a function\"); } }\n\nfunction _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError(\"this hasn't been initialised - super() hasn't been called\"); } return call && (typeof call === \"object\" || typeof call === \"function\") ? call : self; }\n\nfunction _inherits(subClass, superClass) { if (typeof superClass !== \"function\" && superClass !== null) { throw new TypeError(\"Super expression must either be null or a function, not \" + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }\n\nvar ANIMATION_STATE_CLASSES = {\n  animating: 'rah-animating',\n  animatingUp: 'rah-animating--up',\n  animatingDown: 'rah-animating--down',\n  animatingToHeightZero: 'rah-animating--to-height-zero',\n  animatingToHeightAuto: 'rah-animating--to-height-auto',\n  animatingToHeightSpecific: 'rah-animating--to-height-specific',\n  static: 'rah-static',\n  staticHeightZero: 'rah-static--height-zero',\n  staticHeightAuto: 'rah-static--height-auto',\n  staticHeightSpecific: 'rah-static--height-specific'\n};\n\nvar PROPS_TO_OMIT = ['animateOpacity', 'animationStateClasses', 'applyInlineTransitions', 'children', 'contentClassName', 'delay', 'duration', 'easing', 'height', 'onAnimationEnd', 'onAnimationStart'];\n\nfunction omit(obj) {\n  for (var _len = arguments.length, keys = Array(_len > 1 ? _len - 1 : 0), _key = 1; _key < _len; _key++) {\n    keys[_key - 1] = arguments[_key];\n  }\n\n  if (!keys.length) {\n    return obj;\n  }\n\n  var res = {};\n  var objectKeys = Object.keys(obj);\n\n  for (var i = 0; i < objectKeys.length; i++) {\n    var key = objectKeys[i];\n\n    if (keys.indexOf(key) === -1) {\n      res[key] = obj[key];\n    }\n  }\n\n  return res;\n}\n\n// Start animation helper using nested requestAnimationFrames\nfunction startAnimationHelper(callback) {\n  var requestAnimationFrameIDs = [];\n\n  requestAnimationFrameIDs[0] = requestAnimationFrame(function () {\n    requestAnimationFrameIDs[1] = requestAnimationFrame(function () {\n      callback();\n    });\n  });\n\n  return requestAnimationFrameIDs;\n}\n\nfunction cancelAnimationFrames(requestAnimationFrameIDs) {\n  requestAnimationFrameIDs.forEach(function (id) {\n    return cancelAnimationFrame(id);\n  });\n}\n\nfunction isNumber(n) {\n  return !isNaN(parseFloat(n)) && isFinite(n);\n}\n\nfunction isPercentage(height) {\n  // Percentage height\n  return typeof height === 'string' && height.search('%') === height.length - 1 && isNumber(height.substr(0, height.length - 1));\n}\n\nfunction runCallback(callback, params) {\n  if (callback && typeof callback === 'function') {\n    callback(params);\n  }\n}\n\nvar AnimateHeight = function (_React$Component) {\n  _inherits(AnimateHeight, _React$Component);\n\n  function AnimateHeight(props) {\n    _classCallCheck(this, AnimateHeight);\n\n    var _this = _possibleConstructorReturn(this, (AnimateHeight.__proto__ || Object.getPrototypeOf(AnimateHeight)).call(this, props));\n\n    _this.animationFrameIDs = [];\n\n    var height = 'auto';\n    var overflow = 'visible';\n\n    if (isNumber(props.height)) {\n      // If value is string \"0\" make sure we convert it to number 0\n      height = props.height < 0 || props.height === '0' ? 0 : props.height;\n      overflow = 'hidden';\n    } else if (isPercentage(props.height)) {\n      // If value is string \"0%\" make sure we convert it to number 0\n      height = props.height === '0%' ? 0 : props.height;\n      overflow = 'hidden';\n    }\n\n    _this.animationStateClasses = _extends({}, ANIMATION_STATE_CLASSES, props.animationStateClasses);\n\n    var animationStateClasses = _this.getStaticStateClasses(height);\n\n    _this.state = {\n      animationStateClasses: animationStateClasses,\n      height: height,\n      overflow: overflow,\n      shouldUseTransitions: false\n    };\n    return _this;\n  }\n\n  _createClass(AnimateHeight, [{\n    key: 'componentDidMount',\n    value: function componentDidMount() {\n      var height = this.state.height;\n\n      // Hide content if height is 0 (to prevent tabbing into it)\n      // Check for contentElement is added cause this would fail in tests (react-test-renderer)\n      // Read more here: https://github.com/Stanko/react-animate-height/issues/17\n\n      if (this.contentElement && this.contentElement.style) {\n        this.hideContent(height);\n      }\n    }\n  }, {\n    key: 'componentDidUpdate',\n    value: function componentDidUpdate(prevProps, prevState) {\n      var _this2 = this;\n\n      var _props = this.props,\n          delay = _props.delay,\n          duration = _props.duration,\n          height = _props.height,\n          onAnimationEnd = _props.onAnimationEnd,\n          onAnimationStart = _props.onAnimationStart;\n\n      // Check if 'height' prop has changed\n\n      if (this.contentElement && height !== prevProps.height) {\n        var _cx;\n\n        // Remove display: none from the content div\n        // if it was hidden to prevent tabbing into it\n        this.showContent(prevState.height);\n\n        // Cache content height\n        this.contentElement.style.overflow = 'hidden';\n        var contentHeight = this.contentElement.offsetHeight;\n        this.contentElement.style.overflow = '';\n\n        // set total animation time\n        var totalDuration = duration + delay;\n\n        var newHeight = null;\n        var timeoutState = {\n          height: null, // it will be always set to either 'auto' or specific number\n          overflow: 'hidden'\n        };\n        var isCurrentHeightAuto = prevState.height === 'auto';\n\n        if (isNumber(height)) {\n          // If value is string \"0\" make sure we convert it to number 0\n          newHeight = height < 0 || height === '0' ? 0 : height;\n          timeoutState.height = newHeight;\n        } else if (isPercentage(height)) {\n          // If value is string \"0%\" make sure we convert it to number 0\n          newHeight = height === '0%' ? 0 : height;\n          timeoutState.height = newHeight;\n        } else {\n          // If not, animate to content height\n          // and then reset to auto\n          newHeight = contentHeight; // TODO solve contentHeight = 0\n          timeoutState.height = 'auto';\n          timeoutState.overflow = null;\n        }\n\n        if (isCurrentHeightAuto) {\n          // This is the height to be animated to\n          timeoutState.height = newHeight;\n\n          // If previous height was 'auto'\n          // set starting height explicitly to be able to use transition\n          newHeight = contentHeight;\n        }\n\n        // Animation classes\n        var animationStateClasses = (0, _classnames2.default)((_cx = {}, _defineProperty(_cx, this.animationStateClasses.animating, true), _defineProperty(_cx, this.animationStateClasses.animatingUp, prevProps.height === 'auto' || height < prevProps.height), _defineProperty(_cx, this.animationStateClasses.animatingDown, height === 'auto' || height > prevProps.height), _defineProperty(_cx, this.animationStateClasses.animatingToHeightZero, timeoutState.height === 0), _defineProperty(_cx, this.animationStateClasses.animatingToHeightAuto, timeoutState.height === 'auto'), _defineProperty(_cx, this.animationStateClasses.animatingToHeightSpecific, timeoutState.height > 0), _cx));\n\n        // Animation classes to be put after animation is complete\n        var timeoutAnimationStateClasses = this.getStaticStateClasses(timeoutState.height);\n\n        // Set starting height and animating classes\n        // We are safe to call set state as it will not trigger infinite loop\n        // because of the \"height !== prevProps.height\" check\n        this.setState({ // eslint-disable-line react/no-did-update-set-state\n          animationStateClasses: animationStateClasses,\n          height: newHeight,\n          overflow: 'hidden',\n          // When animating from 'auto' we first need to set fixed height\n          // that change should be animated\n          shouldUseTransitions: !isCurrentHeightAuto\n        });\n\n        // Clear timeouts\n        clearTimeout(this.timeoutID);\n        clearTimeout(this.animationClassesTimeoutID);\n\n        if (isCurrentHeightAuto) {\n          // When animating from 'auto' we use a short timeout to start animation\n          // after setting fixed height above\n          timeoutState.shouldUseTransitions = true;\n\n          cancelAnimationFrames(this.animationFrameIDs);\n          this.animationFrameIDs = startAnimationHelper(function () {\n            _this2.setState(timeoutState);\n\n            // ANIMATION STARTS, run a callback if it exists\n            runCallback(onAnimationStart, { newHeight: timeoutState.height });\n          });\n\n          // Set static classes and remove transitions when animation ends\n          this.animationClassesTimeoutID = setTimeout(function () {\n            _this2.setState({\n              animationStateClasses: timeoutAnimationStateClasses,\n              shouldUseTransitions: false\n            });\n\n            // ANIMATION ENDS\n            // Hide content if height is 0 (to prevent tabbing into it)\n            _this2.hideContent(timeoutState.height);\n            // Run a callback if it exists\n            runCallback(onAnimationEnd, { newHeight: timeoutState.height });\n          }, totalDuration);\n        } else {\n          // ANIMATION STARTS, run a callback if it exists\n          runCallback(onAnimationStart, { newHeight: newHeight });\n\n          // Set end height, classes and remove transitions when animation is complete\n          this.timeoutID = setTimeout(function () {\n            timeoutState.animationStateClasses = timeoutAnimationStateClasses;\n            timeoutState.shouldUseTransitions = false;\n\n            _this2.setState(timeoutState);\n\n            // ANIMATION ENDS\n            // If height is auto, don't hide the content\n            // (case when element is empty, therefore height is 0)\n            if (height !== 'auto') {\n              // Hide content if height is 0 (to prevent tabbing into it)\n              _this2.hideContent(newHeight); // TODO solve newHeight = 0\n            }\n            // Run a callback if it exists\n            runCallback(onAnimationEnd, { newHeight: newHeight });\n          }, totalDuration);\n        }\n      }\n    }\n  }, {\n    key: 'componentWillUnmount',\n    value: function componentWillUnmount() {\n      cancelAnimationFrames(this.animationFrameIDs);\n\n      clearTimeout(this.timeoutID);\n      clearTimeout(this.animationClassesTimeoutID);\n\n      this.timeoutID = null;\n      this.animationClassesTimeoutID = null;\n      this.animationStateClasses = null;\n    }\n  }, {\n    key: 'showContent',\n    value: function showContent(height) {\n      if (height === 0) {\n        this.contentElement.style.display = '';\n      }\n    }\n  }, {\n    key: 'hideContent',\n    value: function hideContent(newHeight) {\n      if (newHeight === 0) {\n        this.contentElement.style.display = 'none';\n      }\n    }\n  }, {\n    key: 'getStaticStateClasses',\n    value: function getStaticStateClasses(height) {\n      var _cx2;\n\n      return (0, _classnames2.default)((_cx2 = {}, _defineProperty(_cx2, this.animationStateClasses.static, true), _defineProperty(_cx2, this.animationStateClasses.staticHeightZero, height === 0), _defineProperty(_cx2, this.animationStateClasses.staticHeightSpecific, height > 0), _defineProperty(_cx2, this.animationStateClasses.staticHeightAuto, height === 'auto'), _cx2));\n    }\n  }, {\n    key: 'render',\n    value: function render() {\n      var _cx3,\n          _this3 = this;\n\n      var _props2 = this.props,\n          animateOpacity = _props2.animateOpacity,\n          applyInlineTransitions = _props2.applyInlineTransitions,\n          children = _props2.children,\n          className = _props2.className,\n          contentClassName = _props2.contentClassName,\n          delay = _props2.delay,\n          duration = _props2.duration,\n          easing = _props2.easing,\n          id = _props2.id,\n          style = _props2.style;\n      var _state = this.state,\n          height = _state.height,\n          overflow = _state.overflow,\n          animationStateClasses = _state.animationStateClasses,\n          shouldUseTransitions = _state.shouldUseTransitions;\n\n\n      var componentStyle = _extends({}, style, {\n        height: height,\n        overflow: overflow || style.overflow\n      });\n\n      if (shouldUseTransitions && applyInlineTransitions) {\n        componentStyle.transition = 'height ' + duration + 'ms ' + easing + ' ' + delay + 'ms';\n\n        // Include transition passed through styles\n        if (style.transition) {\n          componentStyle.transition = style.transition + ', ' + componentStyle.transition;\n        }\n\n        // Add webkit vendor prefix still used by opera, blackberry...\n        componentStyle.WebkitTransition = componentStyle.transition;\n      }\n\n      var contentStyle = {};\n\n      if (animateOpacity) {\n        contentStyle.transition = 'opacity ' + duration + 'ms ' + easing + ' ' + delay + 'ms';\n        // Add webkit vendor prefix still used by opera, blackberry...\n        contentStyle.WebkitTransition = contentStyle.transition;\n\n        if (height === 0) {\n          contentStyle.opacity = 0;\n        }\n      }\n\n      var componentClasses = (0, _classnames2.default)((_cx3 = {}, _defineProperty(_cx3, animationStateClasses, true), _defineProperty(_cx3, className, className), _cx3));\n\n      // Check if user passed aria-hidden prop\n      var hasAriaHiddenProp = typeof this.props['aria-hidden'] !== 'undefined';\n      var ariaHidden = hasAriaHiddenProp ? this.props['aria-hidden'] : height === 0;\n\n      return _react2.default.createElement(\n        'div',\n        _extends({}, omit.apply(undefined, [this.props].concat(PROPS_TO_OMIT)), {\n          'aria-hidden': ariaHidden,\n          className: componentClasses,\n          id: id,\n          style: componentStyle\n        }),\n        _react2.default.createElement(\n          'div',\n          {\n            className: contentClassName,\n            style: contentStyle,\n            ref: function ref(el) {\n              return _this3.contentElement = el;\n            }\n          },\n          children\n        )\n      );\n    }\n  }]);\n\n  return AnimateHeight;\n}(_react2.default.Component);\n\nvar heightPropType = function heightPropType(props, propName, componentName) {\n  var value = props[propName];\n\n  if (typeof value === 'number' && value >= 0 || isPercentage(value) || value === 'auto') {\n    return null;\n  }\n\n  return new TypeError('value \"' + value + '\" of type \"' + (typeof value === 'undefined' ? 'undefined' : _typeof(value)) + '\" is invalid type for ' + propName + ' in ' + componentName + '. ' + 'It needs to be a positive number, string \"auto\" or percentage string (e.g. \"15%\").');\n};\n\nAnimateHeight.propTypes = {\n  'aria-hidden': _propTypes2.default.bool,\n  animateOpacity: _propTypes2.default.bool,\n  animationStateClasses: _propTypes2.default.object,\n  applyInlineTransitions: _propTypes2.default.bool,\n  children: _propTypes2.default.any.isRequired,\n  className: _propTypes2.default.string,\n  contentClassName: _propTypes2.default.string,\n  delay: _propTypes2.default.number,\n  duration: _propTypes2.default.number,\n  easing: _propTypes2.default.string,\n  height: heightPropType,\n  id: _propTypes2.default.string,\n  onAnimationEnd: _propTypes2.default.func,\n  onAnimationStart: _propTypes2.default.func,\n  style: _propTypes2.default.object\n};\n\nAnimateHeight.defaultProps = {\n  animateOpacity: false,\n  animationStateClasses: ANIMATION_STATE_CLASSES,\n  applyInlineTransitions: true,\n  duration: 250,\n  delay: 0,\n  easing: 'ease',\n  style: {}\n};\n\nexports.default = AnimateHeight;","import React from 'react';\r\nimport PropTypes from 'prop-types';\r\n\r\nimport { TooltipElement } from 'common/Tooltip';\r\n\r\nimport './StatisticBox.css';\r\nimport STATISTIC_CATEGORY from './STATISTIC_CATEGORY';\r\n\r\nexport { default as STATISTIC_ORDER } from './STATISTIC_ORDER';\r\n\r\n/**\r\n * @deprecated Use `interface/statistic/Statistic` instead.\r\n */\r\nconst StatisticsListBox = ({ title, tooltip, children, bodyStyle, ...others }) => {\r\n  delete others.category;\r\n  delete others.position;\r\n  return (\r\n    <div className=\"col-lg-3 col-md-4 col-sm-6 col-xs-12\">\r\n      <div className=\"panel statistic statistic-box statistic-box-list\" {...others}>\r\n        {title && (\r\n          <div className=\"panel-heading\">\r\n            <h2>{tooltip ? <TooltipElement content={tooltip}>{title}</TooltipElement> : title}</h2>\r\n          </div>\r\n        )}\r\n        <div className=\"panel-body items\" style={bodyStyle}>\r\n          {children}\r\n        </div>\r\n      </div>\r\n    </div>\r\n  );\r\n};\r\nStatisticsListBox.propTypes = {\r\n  title: PropTypes.node,\r\n  children: PropTypes.node.isRequired,\r\n  tooltip: PropTypes.node,\r\n  bodyStyle: PropTypes.object,\r\n  category: PropTypes.string,\r\n  position: PropTypes.number,\r\n};\r\nStatisticsListBox.defaultProps = {\r\n  category: STATISTIC_CATEGORY.GENERAL,\r\n};\r\n\r\nexport default StatisticsListBox;\r\n","/**\r\n * Gets raw max casts of a spell over a period of time.\r\n * @param cooldown the cooldown time of the spell, in seconds\r\n * @param duration the duration of the time period to assess, in milliseconds\r\n * @param charges the number of charges the spell has\r\n */\r\nexport default function calculateMaxCasts(cooldown: number, duration: number, charges = 1) {\r\n  return (duration / 1000 / cooldown) + charges - 1;\r\n}\r\n"],"sourceRoot":""}