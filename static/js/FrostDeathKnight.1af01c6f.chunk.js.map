{"version":3,"sources":["parser/deathknight/frost/modules/features/CooldownThroughputTracker.ts","parser/deathknight/frost/modules/Abilities.tsx","parser/deathknight/frost/modules/features/AlwaysBeCasting.tsx","parser/deathknight/frost/modules/features/SpellUsable.ts","parser/deathknight/frost/modules/runicpower/RunicPowerTracker.ts","parser/deathknight/frost/modules/runicpower/RunicPowerDetails.tsx","parser/deathknight/frost/modules/features/RuneTracker.ts","parser/deathknight/frost/modules/features/checklist/Component.tsx","parser/deathknight/frost/modules/features/checklist/Module.tsx","parser/deathknight/frost/modules/features/FrostFeverUptime.tsx","parser/deathknight/frost/modules/features/RimeEfficiency.tsx","parser/deathknight/frost/modules/features/HardHowlingBlastCasts.tsx","parser/deathknight/frost/modules/features/KillingMachine.tsx","parser/deathknight/frost/modules/talents/BreathOfSindragosa.tsx","parser/deathknight/frost/modules/talents/HypothermicPresence.tsx","parser/deathknight/frost/modules/talents/GatheringStorm.tsx","parser/deathknight/frost/modules/talents/Frostscythe.tsx","parser/deathknight/frost/CombatLogParser.ts","parser/core/calculateEffectiveDamage.js","interface/icons/Uptime.js","interface/statistics/components/BoringSpellValue/index.tsx","parser/deathknight/shared/RuneTracker.js","parser/deathknight/shared/runeforges/RuneOfTheFallenCrusader.tsx","parser/deathknight/shared/runeforges/RuneOfHysteria.tsx","parser/deathknight/shared/RuneBreakdown.js","parser/deathknight/shared/RuneDetails.js"],"names":["CooldownThroughputTracker","CoreCooldownThroughputTracker","cooldownSpells","spell","SPELLS","BREATH_OF_SINDRAGOSA_TALENT","summary","BUILT_IN_SUMMARY_TYPES","DAMAGE","PILLAR_OF_FROST","OBLITERATION_TALENT","ignoredSpells","REMORSELESS_WINTER_DAMAGE","id","REMORSELESS_WINTER_ENV_CAST","Abilities","combatant","this","selectedCombatant","buffSpellId","category","SPELL_CATEGORIES","COOLDOWNS","gcd","cooldown","castEfficiency","suggestion","recommendedEfficiency","extraSuggestion","timelineSortIndex","EMPOWER_RUNE_WEAPON","SpellLink","HORN_OF_WINTER_TALENT","base","enabled","hasTalent","FROSTWYRMS_FURY","icon","HYPOTHERMIC_PRESENCE_TALENT","RAISE_DEAD_BLOOD_FROST","OBLITERATE_CAST","ROTATIONAL","REMORSELESS_WINTER","HOWLING_BLAST","FROST_STRIKE_CAST","FROSTSCYTHE_TALENT","ROTATIONAL_AOE","GLACIAL_ADVANCE_TALENT","haste","SACRIFICIAL_PACT","ANTI_MAGIC_SHELL","DEFENSIVE","isDefensive","ICEBOUND_FORTITUDE","DEATH_STRIKE","DEATH_PACT_TALENT","ANTI_MAGIC_ZONE","ANTI_MAGIC_ZONE_BUFF","LICHBORNE","DEATH_GRIP","UTILITY","static","CHAINS_OF_ICE","COLD_HEART_TALENT","DEATHS_ADVANCE","DARK_COMMAND","RAISE_ALLY","MIND_FREEZE","PATH_OF_FROST","ASPHYXIATE_TALENT","CONTROL_UNDEAD","BLINDING_SLEET_TALENT","WRAITH_WALK_TALENT","DEATH_AND_DECAY","DEATH_COIL","RUNE_1","HIDDEN","charges","RUNE_2","RUNE_3","SWARMING_MIST","hasCovenant","COVENANTS","VENTHYR","DOOR_OF_SHADOWS","ABOMINATION_LIMB","NECROLORD","FLESHCRAFT","SHACKLE_THE_UNWORTHY","KYRIAN","DEATHS_DUE","NIGHT_FAE","SOULSHAPE","CoreAbilities","AlwaysBeCasting","when","downtimeSuggestionThresholds","addSuggestion","suggest","actual","recommended","i18n","_","formatPercentage","downtimePercentage","isGreaterThan","minor","average","major","style","ThresholdStyle","PERCENTAGE","CoreAlwaysBeCasting","ICECAP_ABILITIES","OBLITERATE_MAIN_HAND_DAMAGE","OBLITERATE_OFF_HAND_DAMAGE","FROST_STRIKE_MAIN_HAND_DAMAGE","FROST_STRIKE_OFF_HAND_DAMAGE","SpellUsable","options","lastCritTime","hasIcecap","ICECAP_TALENT","addEventListener","Events","damage","by","SELECTED_PLAYER","onDamage","event","hitType","HIT_TYPES","CRIT","BLOCKED_CRIT","offInternalCD","timestamp","isOnCooldown","reduceCooldown","CoreSpellUsable","dependencies","RunicPowerTracker","mostRecentTickTime","_totalHypothermicPresenceReduction","resource","RESOURCE_TYPES","RUNIC_POWER","BREATH_OF_SINDRAGOSA_TALENT_DAMAGE_TICK","onBreathDamage","ability","guid","spendersObj","initSpenderAbility","casts","fakeCast","type","EventType","Cast","sourceID","targetID","sourceIsFriendly","targetIsFriendly","cost","getHypothermicPresenceReduction","spentByCast","push","spent","current","resourceUpdates","waste","generated","used","triggerSpendEvent","hasBuff","newCost","getResource","Math","round","ResourceTracker","RunicPowerDetails","runicPowerTracker","suggestionThresholds","wastedPercent","Statistic","position","STATISTIC_ORDER","CORE","size","tooltip","wasted","BoringResourceValue","value","label","title","url","render","Panel","ResourceBreakdown","tracker","showSpenders","isLessThan","Analyzer","RuneTracker","runeEfficiency","CoreRuneTracker","FrostDeathKnightChecklist","thresholds","AbilityRequirement","props","GenericCastEfficiencyRequirement","getCastEfficiencyForSpellId","Rule","name","description","href","target","rel","ARCANE_TORRENT_RUNIC_POWER","Requirement","runicPowerEfficiency","PreparationRule","Checklist","combatants","preparationRuleAnalyzer","alwaysBeCasting","runeTracker","runicPowerDetails","Component","selected","suggestionThresholdsEfficiency","efficiencySuggestionThresholds","BaseModule","Combatants","CastEfficiency","PreparationRuleAnalyzer","FrostFeverUptime","enemies","frostFeverUptime","FROST_FEVER","regular","BoringSpellValueText","Uptime","getBuffUptime","owner","fightDuration","Enemies","RimeEfficiency","rimeProcs","lastGCDTime","lastGCDDuration","lastProcTime","refreshedRimeProcs","expiredRimeProcs","applybuff","RIME","onApplyBuff","removebuff","onRemoveBuff","refreshbuff","onRefreshBuff","GlobalCooldown","onGlobalCooldown","BUFF_DURATION_SEC","duration","wastedProcRate","totalWastedProcs","efficiency","suffix","abilityTracker","AbilityTracker","HardHowlingBlastCasts","castsWithoutRime","cast","onCast","getEntity","KillingMachineEfficiency","kmProcs","refreshedKMProcs","expiredKMProcs","globalCooldown","KILLING_MACHINE","Fragment","totalProcs","BreathOfSindragosa","beginTimestamp","badCasts","totalDuration","breathActive","active","fightend","onFightEnd","tickingOnFinishedString","averageDuration","toFixed","SECONDS","HypothermicPresence","OPTIONAL","BoringSpellValue","totalHypothermicPresenceReduction","GatheringStorm","totalCasts","bonusDamage","totalStacks","currentStacks","extendedDuration","GATHERING_STORM_TALENT","GATHERING_STORM_TALENT_BUFF","applybuffstack","onApplyBuffStack","boostedDamage","calculateEffectiveDamage","classResources","filter","RUNES","forEach","ItemDamageDone","amount","averageExtension","Frostscythe","hits","goodCasts","hitThreshold","efficencyThresholds","CombatLogParser","CoreCombatLogParser","specModules","cooldownThroughputTracker","abilities","spellUsable","checklist","frostfeverUptime","rimeEfficiency","killingMachineEfficiency","breathofSindragoa","hypothermicPresence","runeDetails","RuneDetails","gatheringStorm","frostscythe","runeOfTheFallenCrusader","RuneOfTheFallenCrusader","runeOfHysteria","RuneOfHysteria","arcaneTorrent","ArcaneTorrent","increase","raw","absorbed","Icon","other","xmlns","viewBox","className","d","extra","RUNE_IDS","args","runesReady","_fightend","_lastTimestamp","fight","start_time","_runesReadySum","MAX_RUNES","i","onFightend","to","RUNIC_CORRUPTION","onApplybuff","onRemovebuff","UpdateSpellUsable","onUpdateSpellUsable","runesAvailable","x","y","end_time","addPassiveRuneRegeneration","prepull","runeCost","startCooldown","resourceChangeType","resourceChange","addCharge","changeCooldown","change","trigger","EndCooldown","RestoreCharge","BeginCooldown","AddCooldownCharge","timeFromStart","passiveRunesGained","runesMaxCasts","passiveRunesWasted","runesWasted","runicCorruptionContribution","addPassiveAccelerator","initBuilderAbility","buildersObj","spellId","gained","uptime","contribution","acceleratorGained","acceleratorWasted","multiplier","remainingCooldown","cooldownRemaining","reduction","runeId","longestCooldown","expectedCooldown","getExpectedCooldownDuration","cooldownTriggerEvent","shortestCooldown","beginCooldown","chargesOnCooldown","chargesAvailable","timeSpentAtRuneCount","formatNumber","dropdown","index","map","key","formatDuration","color","runeOneCooldown","getCooldown","runeTwoCooldown","runeThreeCooldown","runeCastEfficiencies","reduce","accumulator","currentValue","length","spender","timeSpentAtRune","time","healing","overhealing","hasWeaponEnchant","RUNE_OF_THE_FALLEN_CRUSADER","heal","UNHOLY_STRENGTH_BUFF","_onHeal","overheal","absorb","overhealPercentage","averageStrength","runicPowerGained","runicPowerWasted","RUNE_OF_HYSTERIA","energize","_onEnergize","RUNE_OF_HYSTERIA_BUFF","runicPowerWastedDuringHysteria","gainedSpell","wastedSpell","spec","SPECS","BLOOD_DEATH_KNIGHT","gainedDeathStrikes","wastedDeathStrikes","floor","runicPowerGainedByHysteria","wastedPercentage","potentialRunicPowerGainedByHysteria","potentiallyGainedDeathStrikes","RuneBreakdown","resourceName","prepareGenerated","prepareSpent","totalGenerated","totalWasted","totalSpent","spendersCasts","colSpan","Tooltip","content","abilityId","width","SpellIcon","noLink","paddingRight","textAlign","propTypes","PropTypes","object","isRequired","bool","data","mark","encoding","field","axis","labelExpr","formatTime","grid","tickMinStep","disableHeight","BaseChart","height","runes"],"mappings":"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","file":"static/js/FrostDeathKnight.1af01c6f.chunk.js","sourcesContent":["import SPELLS from 'common/SPELLS';\r\nimport CoreCooldownThroughputTracker, { BUILT_IN_SUMMARY_TYPES } from 'parser/shared/modules/CooldownThroughputTracker';\r\n\r\nclass CooldownThroughputTracker extends CoreCooldownThroughputTracker {\r\n  static cooldownSpells = [\r\n    ...CoreCooldownThroughputTracker.cooldownSpells,\r\n    {\r\n      spell: SPELLS.BREATH_OF_SINDRAGOSA_TALENT,\r\n      summary: [\r\n        BUILT_IN_SUMMARY_TYPES.DAMAGE,\r\n      ],\r\n    },\r\n    {\r\n      spell: SPELLS.PILLAR_OF_FROST,\r\n      summary: [\r\n        BUILT_IN_SUMMARY_TYPES.DAMAGE,\r\n      ],\r\n    },\r\n    {\r\n      spell: SPELLS.OBLITERATION_TALENT,\r\n      summary: [\r\n        BUILT_IN_SUMMARY_TYPES.DAMAGE,\r\n      ],\r\n    },\r\n  ];\r\n\r\n  static ignoredSpells = [\r\n    ...CoreCooldownThroughputTracker.ignoredSpells,\r\n    SPELLS.REMORSELESS_WINTER_DAMAGE.id,\r\n    SPELLS.REMORSELESS_WINTER_ENV_CAST.id,\r\n  ];\r\n}\r\n\r\nexport default CooldownThroughputTracker;\r\n","import React from 'react';\r\n\r\nimport SPELLS from 'common/SPELLS';\r\nimport SpellLink from 'common/SpellLink';\r\n\r\nimport CoreAbilities from 'parser/core/modules/Abilities';\r\nimport { SpellbookAbility } from 'parser/core/modules/Ability';\r\nimport COVENANTS from 'game/shadowlands/COVENANTS';\r\n\r\nclass Abilities extends CoreAbilities {\r\n  spellbook(): SpellbookAbility[] {\r\n    const combatant = this.selectedCombatant;\r\n    return [\r\n      // COOLDOWNS\r\n      {\r\n        spell: SPELLS.PILLAR_OF_FROST,\r\n        buffSpellId: SPELLS.PILLAR_OF_FROST.id,\r\n        category: Abilities.SPELL_CATEGORIES.COOLDOWNS,\r\n        gcd: null,\r\n        cooldown: 60,\r\n        castEfficiency: {\r\n          suggestion: true,\r\n          recommendedEfficiency: 0.85,\r\n          extraSuggestion: 'You should aim to use this off CD.',\r\n        },\r\n        timelineSortIndex: 0,\r\n      },\r\n      {\r\n        spell: SPELLS.EMPOWER_RUNE_WEAPON,\r\n        buffSpellId: SPELLS.EMPOWER_RUNE_WEAPON.id,\r\n        category: Abilities.SPELL_CATEGORIES.COOLDOWNS,\r\n        gcd: null,\r\n        cooldown: 120,\r\n        castEfficiency: {\r\n          suggestion: true,\r\n          recommendedEfficiency: 0.80,\r\n          extraSuggestion: <>You should use this with every <SpellLink id={SPELLS.BREATH_OF_SINDRAGOSA_TALENT.id} /> if it is talented. Otherwise use it with <SpellLink id={SPELLS.PILLAR_OF_FROST.id} />.</>,\r\n        },\r\n        timelineSortIndex: 1,\r\n      },\r\n      {\r\n        spell: SPELLS.HORN_OF_WINTER_TALENT,\r\n        category: Abilities.SPELL_CATEGORIES.COOLDOWNS,\r\n        gcd: {\r\n          base: 1500,\r\n        },\r\n        cooldown: 45,\r\n        enabled: combatant.hasTalent(SPELLS.HORN_OF_WINTER_TALENT.id),\r\n        castEfficiency: {\r\n          suggestion: true,\r\n          recommendedEfficiency: 0.90,\r\n        },\r\n      },\r\n      {\r\n        spell: SPELLS.BREATH_OF_SINDRAGOSA_TALENT,\r\n        buffSpellId: SPELLS.BREATH_OF_SINDRAGOSA_TALENT.id,\r\n        category: Abilities.SPELL_CATEGORIES.COOLDOWNS,\r\n        gcd: null,\r\n        cooldown: 120,\r\n        enabled: combatant.hasTalent(SPELLS.BREATH_OF_SINDRAGOSA_TALENT.id),\r\n        castEfficiency: {\r\n          suggestion: true,\r\n          recommendedEfficiency: 0.90,\r\n          extraSuggestion: 'You should only save this if there is a mechanic you will need to deal with in the next 30 seconds or if you need to save it for a particular phase',\r\n        },\r\n        timelineSortIndex: 2,\r\n      },\r\n      {\r\n        spell: SPELLS.FROSTWYRMS_FURY,\r\n        category: Abilities.SPELL_CATEGORIES.COOLDOWNS,\r\n        gcd: {\r\n          base: 1500,\r\n        },\r\n        cooldown: 180,\r\n        castEfficiency: {\r\n          suggestion: true,\r\n          recommendedEfficiency: 0.90,\r\n          extraSuggestion: <>Although you normally want to use this off CD, you can save it to line it up with <SpellLink id={SPELLS.PILLAR_OF_FROST.id} icon />.  You can also hold it if you know there will be an opportunity to hit more than one enemy in the next 30 seconds.</>,\r\n        },\r\n      },\r\n      {\r\n        spell: SPELLS.HYPOTHERMIC_PRESENCE_TALENT,\r\n        category: Abilities.SPELL_CATEGORIES.COOLDOWNS,\r\n        gcd: null,\r\n        cooldown: 45,\r\n        enabled: combatant.hasTalent(SPELLS.HYPOTHERMIC_PRESENCE_TALENT.id),\r\n      },\r\n      {\r\n        spell: SPELLS.RAISE_DEAD_BLOOD_FROST,\r\n        category: Abilities.SPELL_CATEGORIES.COOLDOWNS,\r\n        gcd: null,\r\n        cooldown: 120,\r\n      },\r\n      // ROTATIONAL\r\n      {\r\n        spell: SPELLS.OBLITERATE_CAST,\r\n        category: Abilities.SPELL_CATEGORIES.ROTATIONAL,\r\n        gcd: {\r\n          base: 1500,\r\n        },\r\n      },\r\n      {\r\n        spell: SPELLS.REMORSELESS_WINTER,\r\n        buffSpellId: SPELLS.REMORSELESS_WINTER.id,\r\n        category: Abilities.SPELL_CATEGORIES.ROTATIONAL,\r\n        gcd: {\r\n          base: 1500,\r\n        },\r\n        cooldown: 20,\r\n        castEfficiency: {\r\n          suggestion: false,\r\n          recommendedEfficiency: 0.90,\r\n        },\r\n      },\r\n      {\r\n        spell: SPELLS.HOWLING_BLAST,\r\n        category: Abilities.SPELL_CATEGORIES.ROTATIONAL,\r\n        gcd: {\r\n          base: 1500,\r\n        },\r\n      },\r\n      {\r\n        spell: SPELLS.FROST_STRIKE_CAST,\r\n        category: Abilities.SPELL_CATEGORIES.ROTATIONAL,\r\n        gcd: {\r\n          base: 1500,\r\n        },\r\n      },\r\n      {\r\n        spell: SPELLS.FROSTSCYTHE_TALENT,\r\n        category: Abilities.SPELL_CATEGORIES.ROTATIONAL_AOE,\r\n        gcd: {\r\n          base: 1500,\r\n        },\r\n        enabled: combatant.hasTalent(SPELLS.FROSTSCYTHE_TALENT.id),\r\n      },\r\n      {\r\n        spell: SPELLS.GLACIAL_ADVANCE_TALENT,\r\n        category: Abilities.SPELL_CATEGORIES.ROTATIONAL,\r\n        cooldown: haste => 6 / (1 + haste),\r\n        gcd: {\r\n          base: 1500,\r\n        },\r\n        enabled: combatant.hasTalent(SPELLS.GLACIAL_ADVANCE_TALENT.id),\r\n      },\r\n      {\r\n        spell: SPELLS.SACRIFICIAL_PACT,\r\n        category: Abilities.SPELL_CATEGORIES.COOLDOWNS,\r\n        cooldown: 120,\r\n        gcd: {\r\n          base: 1500,\r\n        },\r\n        castEfficiency: {\r\n          suggestion: true,\r\n          recommendedEfficiency: 0.90,\r\n        },\r\n      },\r\n\r\n      // DEFENSIVE\r\n      {\r\n        spell: SPELLS.ANTI_MAGIC_SHELL,\r\n        buffSpellId: SPELLS.ANTI_MAGIC_SHELL.id,\r\n        category: Abilities.SPELL_CATEGORIES.DEFENSIVE,\r\n        gcd: null,\r\n        cooldown: 60,\r\n        isDefensive: true,\r\n      },\r\n      {\r\n        spell: SPELLS.ICEBOUND_FORTITUDE,\r\n        buffSpellId: SPELLS.ICEBOUND_FORTITUDE.id,\r\n        category: Abilities.SPELL_CATEGORIES.DEFENSIVE,\r\n        gcd: null,\r\n        cooldown: 180,\r\n        isDefensive: true,\r\n      },\r\n      {\r\n        spell: SPELLS.DEATH_STRIKE,\r\n        category: Abilities.SPELL_CATEGORIES.DEFENSIVE,\r\n        gcd: {\r\n          base: 1500,\r\n        },\r\n        isDefensive: true,\r\n      },\r\n      {\r\n        spell: SPELLS.DEATH_PACT_TALENT,\r\n        buffSpellId: SPELLS.DEATH_PACT_TALENT.id,\r\n        category: Abilities.SPELL_CATEGORIES.DEFENSIVE,\r\n        gcd: null,\r\n        cooldown: 120,\r\n        isDefensive: true,\r\n        enabled: combatant.hasTalent(SPELLS.DEATH_PACT_TALENT.id),\r\n      },\r\n      {\r\n        spell: SPELLS.ANTI_MAGIC_ZONE,\r\n        buffSpellId: SPELLS.ANTI_MAGIC_ZONE_BUFF.id,\r\n        category: Abilities.SPELL_CATEGORIES.DEFENSIVE,\r\n        gcd: null,\r\n        cooldown: 120,\r\n        isDefensive: true,\r\n      },\r\n      {\r\n        spell: SPELLS.LICHBORNE,\r\n        buffSpellId: SPELLS.LICHBORNE.id,\r\n        category: Abilities.SPELL_CATEGORIES.DEFENSIVE,\r\n        gcd: null,\r\n        cooldown: 120,\r\n        isDefensive: true,\r\n      },\r\n      // UTILITY\r\n      {\r\n        spell: SPELLS.DEATH_GRIP,\r\n        category: Abilities.SPELL_CATEGORIES.UTILITY,\r\n        gcd: {\r\n          static: 500,\r\n        },\r\n        cooldown: 25,\r\n      },\r\n      {\r\n        spell: SPELLS.CHAINS_OF_ICE,\r\n        category: combatant.hasTalent(SPELLS.COLD_HEART_TALENT.id) ? Abilities.SPELL_CATEGORIES.ROTATIONAL : Abilities.SPELL_CATEGORIES.UTILITY,\r\n        gcd: {\r\n          base: 1500,\r\n        },\r\n      },\r\n      {\r\n        spell: SPELLS.DEATHS_ADVANCE,\r\n        category: Abilities.SPELL_CATEGORIES.UTILITY,\r\n        gcd: null,\r\n        cooldown: 45,\r\n      },\r\n      {\r\n        spell: SPELLS.DARK_COMMAND,\r\n        category: Abilities.SPELL_CATEGORIES.UTILITY,\r\n        gcd: null,\r\n        cooldown: 8,\r\n      },\r\n      {\r\n        spell: SPELLS.RAISE_ALLY,\r\n        category: Abilities.SPELL_CATEGORIES.UTILITY,\r\n        gcd: {\r\n          base: 1500,\r\n        },\r\n        cooldown: 600,\r\n      },\r\n      {\r\n        spell: SPELLS.MIND_FREEZE,\r\n        category: Abilities.SPELL_CATEGORIES.UTILITY,\r\n        gcd: null,\r\n        cooldown: 15,\r\n      },\r\n      {\r\n        spell: SPELLS.PATH_OF_FROST,\r\n        category: Abilities.SPELL_CATEGORIES.UTILITY,\r\n        gcd: {\r\n          base: 1500,\r\n        },\r\n      },\r\n      {\r\n        spell: SPELLS.ASPHYXIATE_TALENT,\r\n        category: Abilities.SPELL_CATEGORIES.UTILITY,\r\n        gcd: {\r\n          base: 1500,\r\n        },\r\n        cooldown: 45,\r\n      },\r\n      {\r\n        spell: SPELLS.CONTROL_UNDEAD,\r\n        category: Abilities.SPELL_CATEGORIES.UTILITY,\r\n        gcd: {\r\n          base: 1500,\r\n        },\r\n      },\r\n      {\r\n        spell: SPELLS.BLINDING_SLEET_TALENT,\r\n        category: Abilities.SPELL_CATEGORIES.UTILITY,\r\n        gcd: {\r\n          base: 1500,\r\n        },\r\n        cooldown: 60,\r\n        enabled: combatant.hasTalent(SPELLS.BLINDING_SLEET_TALENT.id),\r\n      },\r\n      {\r\n        spell: SPELLS.WRAITH_WALK_TALENT,\r\n        category: Abilities.SPELL_CATEGORIES.UTILITY,\r\n        gcd: {\r\n          base: 1500,\r\n        },\r\n        cooldown: 60,\r\n        enabled: combatant.hasTalent(SPELLS.WRAITH_WALK_TALENT.id),\r\n      },\r\n      {\r\n        spell: SPELLS.DEATH_AND_DECAY,\r\n        category: Abilities.SPELL_CATEGORIES.UTILITY,\r\n        gcd: {\r\n          base: 1500,\r\n        },\r\n        cooldown: 30,\r\n      },\r\n      {\r\n        spell: SPELLS.DEATH_COIL,\r\n        category: Abilities.SPELL_CATEGORIES.UTILITY,\r\n        gcd: {\r\n          base: 1500,\r\n        }\r\n      },\r\n      // RUNES\r\n      {\r\n        spell: SPELLS.RUNE_1,\r\n        category: Abilities.SPELL_CATEGORIES.HIDDEN,\r\n        cooldown: haste => 10 / (1 + haste),\r\n        charges: 2,\r\n      },\r\n\r\n      {\r\n        spell: SPELLS.RUNE_2,\r\n        category: Abilities.SPELL_CATEGORIES.HIDDEN,\r\n        cooldown: haste => 10 / (1 + haste),\r\n        charges: 2,\r\n      },\r\n\r\n      {\r\n        spell: SPELLS.RUNE_3,\r\n        category: Abilities.SPELL_CATEGORIES.HIDDEN,\r\n        cooldown: haste => 10 / (1 + haste),\r\n        charges: 2,\r\n      },\r\n      // covenants\r\n      {\r\n        spell: SPELLS.SWARMING_MIST,\r\n        category: Abilities.SPELL_CATEGORIES.COOLDOWNS,     \r\n        cooldown: 60,\r\n        gcd: {\r\n          base: 1500,\r\n        },\r\n        castEfficiency: {\r\n          suggestion: true,\r\n          recommendedEfficiency: 0.90,\r\n        },\r\n        enabled: combatant.hasCovenant(COVENANTS.VENTHYR.id),\r\n      },\r\n      {\r\n        spell: SPELLS.DOOR_OF_SHADOWS,\r\n        category: Abilities.SPELL_CATEGORIES.UTILITY,     \r\n        cooldown: 60,\r\n        gcd: {\r\n          base: 1500,\r\n        },\r\n        enabled: combatant.hasCovenant(COVENANTS.VENTHYR.id),\r\n      },\r\n      {\r\n        spell: SPELLS.ABOMINATION_LIMB,\r\n        category: Abilities.SPELL_CATEGORIES.COOLDOWNS,     \r\n        cooldown: 120,\r\n        gcd: {\r\n          base: 1500,\r\n        },\r\n        castEfficiency: {\r\n          suggestion: true,\r\n          recommendedEfficiency: 0.90,\r\n        },\r\n        enabled: combatant.hasCovenant(COVENANTS.NECROLORD.id),\r\n      },\r\n      {\r\n        spell: SPELLS.FLESHCRAFT,\r\n        category: Abilities.SPELL_CATEGORIES.DEFENSIVE,     \r\n        cooldown: 120,\r\n        enabled: combatant.hasCovenant(COVENANTS.NECROLORD.id),\r\n      },\r\n      {\r\n        spell: SPELLS.SHACKLE_THE_UNWORTHY,\r\n        category: Abilities.SPELL_CATEGORIES.COOLDOWNS,     \r\n        cooldown: 60,\r\n        gcd: {\r\n          base: 1500,\r\n        },\r\n        castEfficiency: {\r\n          suggestion: true,\r\n          recommendedEfficiency: 0.90,\r\n        },\r\n        enabled: combatant.hasCovenant(COVENANTS.KYRIAN.id),\r\n      },\r\n      {\r\n        spell: SPELLS.DEATHS_DUE,\r\n        category: Abilities.SPELL_CATEGORIES.ROTATIONAL,     \r\n        cooldown: 30,\r\n        gcd: {\r\n          base: 1500,\r\n        },\r\n        castEfficiency: {\r\n          suggestion: true,\r\n          recommendedEfficiency: 0.90,\r\n        },\r\n        enabled: combatant.hasCovenant(COVENANTS.NIGHT_FAE.id),\r\n      },\r\n      {\r\n        spell: SPELLS.SOULSHAPE,\r\n        category: Abilities.SPELL_CATEGORIES.UTILITY,     \r\n        cooldown: 30,\r\n        gcd: {\r\n          base: 1500,\r\n        },\r\n        enabled: combatant.hasCovenant(COVENANTS.NIGHT_FAE.id),\r\n      },\r\n    ];\r\n  }\r\n}\r\n\r\nexport default Abilities;\r\n","import React from 'react';\r\n\r\nimport CoreAlwaysBeCasting from 'parser/shared/modules/AlwaysBeCasting';\r\nimport { When, ThresholdStyle } from 'parser/core/ParseResults';\r\nimport SPELLS from 'common/SPELLS';\r\nimport { formatPercentage } from 'common/format';\r\nimport SpellLink from 'common/SpellLink';\r\nimport { i18n } from '@lingui/core';\r\nimport { t } from '@lingui/macro';\r\n\r\nclass AlwaysBeCasting extends CoreAlwaysBeCasting {\r\n  get downtimeSuggestionThresholds() {\r\n    return {\r\n      actual: this.downtimePercentage,\r\n      isGreaterThan: {\r\n        minor: 0.30,\r\n        average: 0.35,\r\n        major: .45,\r\n      },\r\n      style: ThresholdStyle.PERCENTAGE,\r\n    };\r\n  }\r\n\r\n  suggestions(when: When) {\r\n    when(this.downtimeSuggestionThresholds)\r\n      .addSuggestion((suggest, actual, recommended) => suggest(<>Your downtime can be improved. Try to Always Be Casting (ABC), reducing time away from the boss unless due to mechanics.  If you do have to move, try casting filler spells, such as <SpellLink id={SPELLS.HOWLING_BLAST.id} /> or <SpellLink id={SPELLS.REMORSELESS_WINTER.id} />.</>)\r\n          .icon('spell_mage_altertime')\r\n          .actual(i18n._(t('deathknight.frost.suggestions.alwaysBeCasting')`${formatPercentage(actual)}% downtime`))\r\n          .recommended(`<${formatPercentage(recommended)}% is recommended`));\r\n  }\r\n}\r\n\r\nexport default AlwaysBeCasting;\r\n","import SPELLS from 'common/SPELLS';\r\nimport CoreSpellUsable from 'parser/shared/modules/SpellUsable';\r\nimport HIT_TYPES from 'game/HIT_TYPES';\r\nimport Events, { DamageEvent } from 'parser/core/Events';\r\nimport { Options, SELECTED_PLAYER } from 'parser/core/Analyzer';\r\n\r\n/**\r\n *\r\nYour Frost Strike, Frostscythe, and Obliterate critical strikes reduce the remaining cooldown of Pillar of Frost by 4 sec.\r\n */\r\nconst ICECAP_COOLDOWN_REDUCTION_MS = 4000;\r\nconst ICECAP_INTERNAL_CD = 1000;\r\n\r\nconst ICECAP_ABILITIES = [\r\n  SPELLS.OBLITERATE_MAIN_HAND_DAMAGE,\r\n  SPELLS.OBLITERATE_OFF_HAND_DAMAGE,\r\n  SPELLS.FROST_STRIKE_MAIN_HAND_DAMAGE,\r\n  SPELLS.FROST_STRIKE_OFF_HAND_DAMAGE,\r\n  SPELLS.FROSTSCYTHE_TALENT\r\n];\r\n\r\nclass SpellUsable extends CoreSpellUsable {\r\n  static dependencies = {\r\n    ...CoreSpellUsable.dependencies,\r\n  };\r\n\r\n  lastCritTime: number = -2000;\r\n  hasIcecap: boolean;\r\n\r\n  constructor(options: Options) {\r\n    super(options);\r\n    this.hasIcecap = this.selectedCombatant.hasTalent(SPELLS.ICECAP_TALENT.id);\r\n    this.addEventListener(Events.damage.by(SELECTED_PLAYER).spell(ICECAP_ABILITIES), this.onDamage);\r\n  }\r\n\r\n  onDamage(event: DamageEvent) {\r\n    if (!this.hasIcecap) {\r\n      return;\r\n    }\r\n\r\n    const isCrit = event.hitType === HIT_TYPES.CRIT || event.hitType === HIT_TYPES.BLOCKED_CRIT;\r\n    if (!isCrit) {\r\n      return;\r\n    }\r\n\r\n    const offInternalCD = (this.lastCritTime + ICECAP_INTERNAL_CD) <= event.timestamp;\r\n      if (this.isOnCooldown(SPELLS.PILLAR_OF_FROST.id) && offInternalCD) {\r\n        this.reduceCooldown(SPELLS.PILLAR_OF_FROST.id, ICECAP_COOLDOWN_REDUCTION_MS);\r\n        this.lastCritTime = event.timestamp;\r\n      }\r\n  }\r\n}\r\n\r\nexport default SpellUsable;\r\n","import RESOURCE_TYPES from 'game/RESOURCE_TYPES';\r\nimport ResourceTracker from 'parser/shared/modules/resources/resourcetracker/ResourceTracker';\r\nimport { Options, SELECTED_PLAYER } from 'parser/core/Analyzer';\r\nimport Events, { CastEvent, DamageEvent, EventType } from 'parser/core/Events';\r\nimport SPELLS from 'common/SPELLS';\r\n\r\nconst BREATH_COST_PER_TICK = 160;\r\nconst HYPOTHERMIC_PRESENCE_COST_REDUCTION = .35;\r\n\r\nclass RunicPowerTracker extends ResourceTracker {\r\n  constructor(options: Options) {\r\n    super(options);\r\n    this.resource = RESOURCE_TYPES.RUNIC_POWER;\r\n\r\n    this.addEventListener(Events.damage.by(SELECTED_PLAYER).spell(SPELLS.BREATH_OF_SINDRAGOSA_TALENT_DAMAGE_TICK), this.onBreathDamage);\r\n  }\r\n\r\n  mostRecentTickTime = 0;\r\n  private _totalHypothermicPresenceReduction = 0;\r\n\r\n  get totalHypothermicPresenceReduction() {\r\n    return Math.round(this._totalHypothermicPresenceReduction / 10);\r\n  }\r\n\r\n  // The following is adapted from ResourceTracker to handle the specific use case for BoS where\r\n  // a single cast event triggers many ticks of a damage event where each damage tick costs\r\n  // resources\r\n  onCast(event: CastEvent) {\r\n    if (event.ability.guid === SPELLS.BREATH_OF_SINDRAGOSA_TALENT.id) {\r\n      if (!this.spendersObj[SPELLS.BREATH_OF_SINDRAGOSA_TALENT.id]) {\r\n        this.initSpenderAbility(SPELLS.BREATH_OF_SINDRAGOSA_TALENT.id);\r\n      }\r\n      \r\n      this.spendersObj[SPELLS.BREATH_OF_SINDRAGOSA_TALENT.id].casts += 1;\r\n    }\r\n\r\n    else {\r\n      super.onCast(event);\r\n    }\r\n  }\r\n\r\n  onBreathDamage(event: DamageEvent) {\r\n    if (event.timestamp === this.mostRecentTickTime) {\r\n      return;\r\n    }\r\n\r\n    // need to make a fake cast to satisfy TypeScript expecting a cast event in triggerSpendEvent\r\n    const fakeCast: CastEvent = {\r\n      type: EventType.Cast,\r\n      timestamp: event.timestamp,\r\n      sourceID: event.sourceID!,\r\n      targetID: event.targetID,\r\n      ability: event.ability,\r\n      sourceIsFriendly: event.sourceIsFriendly,\r\n      targetIsFriendly: event.targetIsFriendly,\r\n    }    \r\n\r\n    let cost = this.getHypothermicPresenceReduction(BREATH_COST_PER_TICK, event.timestamp);\r\n\r\n    cost = cost / 10;\r\n\r\n    this.spendersObj[SPELLS.BREATH_OF_SINDRAGOSA_TALENT.id].spentByCast.push(cost);\r\n    if(cost > 0) {\r\n      this.spendersObj[SPELLS.BREATH_OF_SINDRAGOSA_TALENT.id].spent += cost;\r\n    }\r\n\r\n    this.current -= cost;\r\n\r\n    this.resourceUpdates.push({\r\n      timestamp: event.timestamp,\r\n      current: this.current,\r\n      waste: 0,\r\n      generated: 0,\r\n      used: cost,\r\n    });\r\n\r\n    this.triggerSpendEvent(cost, fakeCast);\r\n\r\n    this.mostRecentTickTime = event.timestamp;\r\n  }\r\n\r\n  getHypothermicPresenceReduction(cost: number, timestamp: number) {\r\n    \r\n    if (this.selectedCombatant.hasBuff(SPELLS.HYPOTHERMIC_PRESENCE_TALENT.id, timestamp)) {\r\n      const newCost = cost * (1 - HYPOTHERMIC_PRESENCE_COST_REDUCTION);\r\n      this._totalHypothermicPresenceReduction += (cost - newCost);\r\n      cost = newCost;\r\n    }\r\n\r\n    return cost;\r\n  }\r\n\r\n  getReducedCost(event: CastEvent) {\r\n    const cost = this.getResource(event)?.cost;\r\n    if (cost) {\r\n      const reducedCost = this.getHypothermicPresenceReduction(cost, event.timestamp);\r\n      return reducedCost / 10;\r\n    }\r\n  }\r\n}\r\n\r\nexport default RunicPowerTracker;\r\n","import React from 'react';\r\n\r\nimport Analyzer from 'parser/core/Analyzer';\r\nimport { ThresholdStyle, When } from 'parser/core/ParseResults';\r\nimport Panel from 'interface/others/Panel';\r\nimport { formatPercentage } from 'common/format';\r\nimport ResourceBreakdown from 'parser/shared/modules/resources/resourcetracker/ResourceBreakdown';\r\nimport { i18n } from '@lingui/core';\r\nimport { t } from '@lingui/macro';\r\nimport STATISTIC_ORDER from 'interface/others/STATISTIC_ORDER';\r\nimport Statistic from 'interface/statistics/Statistic';\r\n\r\nimport BoringResourceValue from 'interface/statistics/components/BoringResourceValue';\r\nimport RESOURCE_TYPES from 'game/RESOURCE_TYPES';\r\n\r\nimport RunicPowerTracker from './RunicPowerTracker';\r\n\r\nclass RunicPowerDetails extends Analyzer {\r\n  static dependencies = {\r\n    runicPowerTracker: RunicPowerTracker,\r\n  };\r\n\r\n  protected runicPowerTracker!: RunicPowerTracker;\r\n\r\n  get wastedPercent() {\r\n    return this.runicPowerTracker.wasted / (this.runicPowerTracker.wasted + this.runicPowerTracker.generated) || 0;\r\n  }\r\n\r\n  get efficiencySuggestionThresholds() {\r\n    return {\r\n      actual: 1 - this.wastedPercent,\r\n      isLessThan: {\r\n        minor: 0.95,\r\n        average: 0.90,\r\n        major: .85,\r\n      },\r\n      style: ThresholdStyle.PERCENTAGE,\r\n    };\r\n  }\r\n\r\n  get suggestionThresholds() {\r\n    return {\r\n      actual: this.wastedPercent,\r\n      isGreaterThan: {\r\n        minor: 0.05,\r\n        average: 0.1,\r\n        major: .15,\r\n      },\r\n      style: ThresholdStyle.PERCENTAGE,\r\n    };\r\n  }\r\n\r\n  suggestions(when: When) {\r\n    when(this.suggestionThresholds).addSuggestion((suggest, actual, recommended) => suggest(`You wasted ${formatPercentage(this.wastedPercent)}% of your Runic Power.`)\r\n      .icon('inv_sword_62')\r\n      .actual(i18n._(t('deathknight.frost.suggestions.runicPower.wasted')`${formatPercentage(actual)}% wasted`))\r\n      .recommended(`<${formatPercentage(recommended)}% is recommended`));\r\n  }\r\n\r\n  statistic() {\r\n    return (\r\n      <Statistic\r\n        position={STATISTIC_ORDER.CORE(11)}\r\n        size=\"small\"\r\n        tooltip={`${this.runicPowerTracker.wasted} out of ${this.runicPowerTracker.wasted + this.runicPowerTracker.generated} runic power wasted.`}\r\n      >\r\n        <BoringResourceValue\r\n          resource={RESOURCE_TYPES.RUNIC_POWER}\r\n          value={`${formatPercentage(this.wastedPercent)} %`}\r\n          label=\"Runic Power wasted\"\r\n        />\r\n      </Statistic>\r\n\r\n    );\r\n  }\r\n\r\n  tab() {\r\n    return {\r\n      title: 'Runic Power usage',\r\n      url: 'runic-power-usage',\r\n      render: () => (\r\n        <Panel>\r\n          <ResourceBreakdown\r\n            tracker={this.runicPowerTracker}\r\n            showSpenders\r\n          />\r\n        </Panel>\r\n      ),\r\n    };\r\n  }\r\n\r\n}\r\n\r\nexport default RunicPowerDetails;\r\n","import { ThresholdStyle } from 'parser/core/ParseResults';\r\n\r\nimport CoreRuneTracker from '../../../shared/RuneTracker';\r\n\r\nclass RuneTracker extends CoreRuneTracker {\r\n\r\n  get suggestionThresholds() {\r\n    return {\r\n      actual: 1 - this.runeEfficiency,\r\n      isGreaterThan: {\r\n        minor: 0.10,\r\n        average: 0.20,\r\n        major: 0.30,\r\n      },\r\n      style: ThresholdStyle.PERCENTAGE,\r\n    };\r\n  }\r\n\r\n  get suggestionThresholdsEfficiency() {\r\n    return {\r\n      actual: this.runeEfficiency,\r\n      isLessThan: {\r\n        minor: 0.90,\r\n        average: 0.80,\r\n        major: 0.70,\r\n      },\r\n      style: ThresholdStyle.PERCENTAGE,\r\n    };\r\n  }\r\n\r\n}\r\n\r\nexport default RuneTracker;\r\n","import React from 'react';\r\nimport PropTypes from 'prop-types';\r\n\r\nimport SPELLS from 'common/SPELLS';\r\nimport SpellLink from 'common/SpellLink';\r\nimport Checklist from 'parser/shared/modules/features/Checklist';\r\nimport Rule from 'parser/shared/modules/features/Checklist/Rule';\r\nimport Requirement from 'parser/shared/modules/features/Checklist/Requirement';\r\nimport PreparationRule from 'parser/shared/modules/features/Checklist/PreparationRule';\r\nimport GenericCastEfficiencyRequirement from 'parser/shared/modules/features/Checklist/GenericCastEfficiencyRequirement';\r\n\r\nconst FrostDeathKnightChecklist = ({ combatant, castEfficiency, thresholds }: any) => {\r\n  const AbilityRequirement = (props: any) => (\r\n    <GenericCastEfficiencyRequirement\r\n      castEfficiency={castEfficiency.getCastEfficiencyForSpellId(props.spell)}\r\n      {...props}\r\n    />\r\n  );\r\n  AbilityRequirement.propTypes = {\r\n    spell: PropTypes.number.isRequired,\r\n  };\r\n\r\n  return (\r\n    <Checklist>\r\n      <Rule\r\n        name=\"Use cooldowns as often as possible\"\r\n        description={(\r\n          <>\r\n            You should aim to use your cooldowns as often as you can to maximize your damage output.{' '}\r\n            <a href=\"https://www.wowhead.com/frost-death-knight-rotation-guide#cooldown-usage\" target=\"_blank\" rel=\"noopener noreferrer\">More info.</a>\r\n          </>\r\n        )}\r\n      >\r\n        <AbilityRequirement spell={SPELLS.PILLAR_OF_FROST.id} />\r\n        {combatant.hasTalent(SPELLS.BREATH_OF_SINDRAGOSA_TALENT.id) && (\r\n          <AbilityRequirement spell={SPELLS.BREATH_OF_SINDRAGOSA_TALENT.id} />\r\n        )}\r\n        <AbilityRequirement spell={SPELLS.EMPOWER_RUNE_WEAPON.id} />\r\n        {/* We can't detect race, so disable this when it has never been cast. */}\r\n        {castEfficiency.getCastEfficiencyForSpellId(SPELLS.ARCANE_TORRENT_RUNIC_POWER.id) && (\r\n          <AbilityRequirement spell={SPELLS.ARCANE_TORRENT_RUNIC_POWER.id} />\r\n        )}\r\n      </Rule>\r\n      <Rule\r\n        name=\"Try to avoid being inactive for a large portion of the fight\"\r\n        description={(\r\n          <>\r\n            While some downtime is inevitable in fights with movement, you should aim to reduce downtime to prevent capping Runes.  In a worst case scenario, you can cast <SpellLink id={SPELLS.HOWLING_BLAST.id} /> to prevent Rune capping\r\n          </>\r\n        )}\r\n      >\r\n        <Requirement name=\"Downtime\" thresholds={thresholds.downtimeSuggestionThresholds} />\r\n      </Rule>\r\n      <Rule\r\n        name=\"Avoid capping Runes\"\r\n        description=\"Death Knights are a resource based class, relying on Runes and Runic Power to cast core abilities.  You can have up to three runes recharging at once.  You want to dump runes whenever you have 4 or more runes to make sure none are wasted\"\r\n      >\r\n        <Requirement name=\"Rune Efficiency\" thresholds={thresholds.runeEfficiency} />\r\n      </Rule>\r\n      <Rule\r\n        name=\"Avoid capping Runic Power\"\r\n        description={(<>Death Knights are a resource based class, relying on Runes and Runic Power to cast core abilities.  Cast <SpellLink id={SPELLS.FROST_STRIKE_CAST.id} /> when you have 73+ Runic Power to avoid overcapping.</>)}\r\n      >\r\n        <Requirement name=\"Runic Power Efficiency\" thresholds={thresholds.runicPowerEfficiency} />\r\n      </Rule>\r\n      <PreparationRule thresholds={thresholds} />\r\n    </Checklist>\r\n  );\r\n};\r\n\r\nFrostDeathKnightChecklist.propTypes = {\r\n  castEfficiency: PropTypes.object.isRequired,\r\n  combatant: PropTypes.shape({\r\n    hasTalent: PropTypes.func.isRequired,\r\n  }).isRequired,\r\n  thresholds: PropTypes.object.isRequired,\r\n};\r\n\r\nexport default FrostDeathKnightChecklist;\r\n","import React from 'react';\r\n\r\nimport BaseModule from 'parser/shared/modules/features/Checklist/Module';\r\nimport CastEfficiency from 'parser/shared/modules/CastEfficiency';\r\nimport Combatants from 'parser/shared/modules/Combatants';\r\nimport PreparationRuleAnalyzer from 'parser/shared/modules/features/Checklist/PreparationRuleAnalyzer';\r\n\r\nimport AlwaysBeCasting from '../AlwaysBeCasting';\r\nimport RunicPowerDetails from '../../runicpower/RunicPowerDetails';\r\nimport RuneTracker from '../RuneTracker';\r\n\r\nimport Component from './Component';\r\n\r\nclass Checklist extends BaseModule {\r\n  static dependencies = {\r\n    combatants: Combatants,\r\n    castEfficiency: CastEfficiency,\r\n    alwaysBeCasting: AlwaysBeCasting,\r\n    preparationRuleAnalyzer: PreparationRuleAnalyzer,\r\n    runicPowerDetails: RunicPowerDetails,\r\n    runeTracker: RuneTracker,\r\n  };\r\n\r\n  protected combatants!: Combatants;\r\n  protected castEfficiency!: CastEfficiency;\r\n  protected preparationRuleAnalyzer!: PreparationRuleAnalyzer;\r\n  protected alwaysBeCasting!: AlwaysBeCasting;\r\n  protected runeTracker!: RuneTracker;\r\n  protected runicPowerDetails!: RunicPowerDetails;\r\n\r\n\r\n  render() {\r\n    return (\r\n      <Component\r\n        combatant={this.combatants.selected}\r\n        castEfficiency={this.castEfficiency}\r\n        thresholds={{\r\n          ...this.preparationRuleAnalyzer.thresholds,\r\n          runeEfficiency: this.runeTracker.suggestionThresholdsEfficiency,\r\n          runicPowerEfficiency: this.runicPowerDetails.efficiencySuggestionThresholds,\r\n          downtimeSuggestionThresholds: this.alwaysBeCasting.downtimeSuggestionThresholds,\r\n        }}\r\n      />\r\n    );\r\n  }\r\n}\r\n\r\nexport default Checklist;\r\n","import React from 'react';\r\nimport Analyzer from 'parser/core/Analyzer';\r\nimport { When } from 'parser/core/ParseResults';\r\nimport Enemies from 'parser/shared/modules/Enemies';\r\nimport SPELLS from 'common/SPELLS';\r\nimport SpellLink from 'common/SpellLink';\r\nimport { formatPercentage } from 'common/format';\r\nimport { i18n } from '@lingui/core';\r\nimport { t } from '@lingui/macro';\r\nimport STATISTIC_ORDER from 'interface/others/STATISTIC_ORDER';\r\nimport Statistic from 'interface/statistics/Statistic';\r\n\r\nimport BoringSpellValueText from 'interface/statistics/components/BoringSpellValueText';\r\nimport UptimeIcon from 'interface/icons/Uptime';\r\n\r\nclass FrostFeverUptime extends Analyzer {\r\n  static dependencies = {\r\n    enemies: Enemies,\r\n  };\r\n\r\n  protected enemies!: Enemies;\r\n\r\n  get frostFeverUptime() {\r\n    return this.enemies.getBuffUptime(SPELLS.FROST_FEVER.id) / this.owner.fightDuration;\r\n  }\r\n\r\n  suggestions(when: When) {\r\n    when(this.frostFeverUptime).isLessThan(0.95)\r\n      .addSuggestion((suggest, actual, recommended) => suggest(<span>Your <SpellLink id={SPELLS.FROST_FEVER.id} /> uptime can be improved. Try to pay attention to when Frost Fever is about to fall off the priority target, using <SpellLink id={SPELLS.HOWLING_BLAST.id} /> to refresh Frost Fever. Using a debuff tracker can help.</span>)\r\n        .icon(SPELLS.FROST_FEVER.icon)\r\n        .actual(i18n._(t('deathknight.frost.suggestions.frostFever.uptime')`${formatPercentage(actual)}% Frost Fever uptime`))\r\n        .recommended(`>${formatPercentage(recommended)}% is recommended`)\r\n        .regular(recommended - 0.05).major(recommended - 0.15));\r\n  }\r\n\r\n  statistic() {\r\n    return (\r\n      <Statistic\r\n        position={STATISTIC_ORDER.CORE(20)}\r\n        size=\"flexible\"\r\n      >\r\n        <BoringSpellValueText spell={SPELLS.FROST_FEVER}>\r\n          <>\r\n            <UptimeIcon /> {formatPercentage(this.frostFeverUptime)}% <small>uptime</small>\r\n          </>\r\n        </BoringSpellValueText>\r\n      </Statistic>\r\n    );\r\n  }\r\n}\r\n\r\nexport default FrostFeverUptime;\r\n","import React from 'react';\r\nimport Analyzer, { Options, SELECTED_PLAYER } from 'parser/core/Analyzer';\r\nimport { ThresholdStyle, When } from 'parser/core/ParseResults';\r\nimport Events, { ApplyBuffEvent, GlobalCooldownEvent, RefreshBuffEvent, RemoveBuffEvent } from 'parser/core/Events';\r\nimport SPELLS from 'common/SPELLS';\r\nimport SpellLink from 'common/SpellLink';\r\nimport { formatPercentage } from 'common/format';\r\nimport AbilityTracker from 'parser/shared/modules/AbilityTracker';\r\nimport { i18n } from '@lingui/core';\r\nimport { t } from '@lingui/macro';\r\n\r\nimport STATISTIC_ORDER from 'interface/others/STATISTIC_ORDER';\r\nimport Statistic from 'interface/statistics/Statistic';\r\n\r\nimport BoringSpellValueText from 'interface/statistics/components/BoringSpellValueText';\r\n\r\nconst LAG_BUFFER_MS = 100;\r\nconst BUFF_DURATION_SEC = 15;\r\n\r\nclass RimeEfficiency extends Analyzer {\r\n  static dependencies = {\r\n    abilityTracker: AbilityTracker,\r\n  };\r\n\r\n  rimeProcs: number = 0;\r\n  lastGCDTime: number = 0;\r\n  lastGCDDuration: number = 0;\r\n  lastProcTime: number = 0;\r\n  refreshedRimeProcs: number = 0;\r\n  expiredRimeProcs: number = 0;\r\n\r\n  constructor(options: Options) {\r\n    super(options);\r\n\r\n    this.addEventListener(Events.applybuff.by(SELECTED_PLAYER).spell(SPELLS.RIME), this.onApplyBuff);\r\n    this.addEventListener(Events.removebuff.by(SELECTED_PLAYER).spell(SPELLS.RIME), this.onRemoveBuff);\r\n    this.addEventListener(Events.refreshbuff.by(SELECTED_PLAYER).spell(SPELLS.RIME), this.onRefreshBuff);\r\n    this.addEventListener(Events.GlobalCooldown, this.onGlobalCooldown);\r\n  }\r\n\r\n  onApplyBuff(event: ApplyBuffEvent) {\r\n    this.rimeProcs += 1;\r\n    this.lastProcTime = event.timestamp;\r\n  }\r\n\r\n  onRemoveBuff(event: RemoveBuffEvent) {\r\n    const durationHeld = event.timestamp - this.lastProcTime;\r\n    if (durationHeld > (BUFF_DURATION_SEC * 1000)) {\r\n      this.expiredRimeProcs += 1;\r\n    }\r\n  }\r\n\r\n  onRefreshBuff(event: RefreshBuffEvent) {\r\n    const timeSinceGCD = event.timestamp - this.lastGCDTime;\r\n    if (timeSinceGCD < this.lastGCDDuration + LAG_BUFFER_MS) {\r\n      return;\r\n    }\r\n    this.refreshedRimeProcs += 1;\r\n  }\r\n\r\n  onGlobalCooldown(event: GlobalCooldownEvent) {\r\n    this.lastGCDTime = event.timestamp;\r\n    this.lastGCDDuration = event.duration;\r\n  }\r\n\r\n  get totalWastedProcs() {\r\n    return this.refreshedRimeProcs + this.expiredRimeProcs;\r\n  }\r\n\r\n  get wastedProcRate() {\r\n    return this.totalWastedProcs / this.rimeProcs;\r\n  }\r\n\r\n  get efficiency() {\r\n    return 1 - this.wastedProcRate;\r\n  }\r\n\r\n  get suggestionThresholds() {\r\n    return {\r\n      actual: this.efficiency,\r\n      isLessThan: {\r\n        minor: .95,\r\n        average: .90,\r\n        major: .85,\r\n      },\r\n      style: ThresholdStyle.PERCENTAGE,\r\n      suffix: 'Average',\r\n    };\r\n  }\r\n\r\n  suggestions(when: When) {\r\n    when(this.suggestionThresholds)\r\n      .addSuggestion((suggest, actual, recommended) => suggest(<> You are wasting <SpellLink id={SPELLS.RIME.id} /> procs. You should be casting <SpellLink id={SPELLS.HOWLING_BLAST.id} /> as soon as possible when you have a Rime proc to avoid wasting it.</>)\r\n        .icon(SPELLS.RIME.icon)\r\n        .actual(i18n._(t('deathknight.frost.suggestions.rime.wastedProcs')`${formatPercentage(this.wastedProcRate)}% of Rime procs were either refreshed and lost or expired without being used`))\r\n        .recommended(`<${recommended} is recommended`));\r\n  }\r\n\r\n  statistic() {\r\n    return (\r\n      <Statistic\r\n        position={STATISTIC_ORDER.CORE(5)}\r\n        size=\"flexible\"\r\n        tooltip={`You wasted ${this.totalWastedProcs} out of ${this.rimeProcs} Rime procs (${formatPercentage(this.wastedProcRate)}%).  ${this.expiredRimeProcs} procs expired without being used and ${this.refreshedRimeProcs} procs were overwritten by new procs.`}\r\n      >\r\n        <BoringSpellValueText spell={SPELLS.RIME}>\r\n          <>\r\n            {formatPercentage(this.efficiency)} % <small>efficiency</small>\r\n          </>\r\n        </BoringSpellValueText>\r\n      </Statistic>\r\n    );\r\n  }\r\n}\r\n\r\nexport default RimeEfficiency;\r\n","import React from 'react';\r\nimport SPELLS from 'common/SPELLS';\r\nimport Analyzer, { Options, SELECTED_PLAYER } from 'parser/core/Analyzer';\r\nimport Events, { CastEvent } from 'parser/core/Events';\r\nimport Enemies from 'parser/shared/modules/Enemies';\r\nimport AbilityTracker from 'parser/shared/modules/AbilityTracker';\r\nimport STATISTIC_ORDER from 'interface/others/STATISTIC_ORDER';\r\nimport Statistic from 'interface/statistics/Statistic';\r\n\r\nimport BoringSpellValueText from 'interface/statistics/components/BoringSpellValueText';\r\n\r\nconst debug = false;\r\n\r\nclass HardHowlingBlastCasts extends Analyzer {\r\n  static dependencies = {\r\n    abilityTracker: AbilityTracker,\r\n    enemies: Enemies,\r\n  };\r\n\r\n  protected abilityTracker!: AbilityTracker;\r\n  protected enemies!: Enemies;\r\n\r\n  constructor(options: Options) {\r\n    super(options);\r\n\r\n    this.addEventListener(Events.cast.by(SELECTED_PLAYER).spell(SPELLS.HOWLING_BLAST), this.onCast);\r\n  }\r\n\r\n  castsWithoutRime = 0;\r\n\r\n  onCast(event: CastEvent) {\r\n    const target = this.enemies.getEntity(event);\r\n    if (!target) {\r\n      return;\r\n    }\r\n    if (!this.selectedCombatant.hasBuff(SPELLS.RIME.id, event.timestamp) && target.hasBuff(SPELLS.FROST_FEVER.id)) {\r\n      this.castsWithoutRime += 1;\r\n      debug && console.log(`Caught a HB hardcast at ${event.timestamp}`);\r\n    }\r\n  }\r\n\r\n  statistic() {\r\n    return (\r\n      <Statistic\r\n        position={STATISTIC_ORDER.CORE(50)}\r\n        size=\"flexible\"\r\n        tooltip=\"You should aim to get this as close to 0 as possible. It is almost always a DPS loss to cast Howling Blast without Rime. It is okay to do this during extended periods of being out of melee range. In this case, it is acceptable to dump runes to build RP and stop yourself from capping runes. It is also okay to hardcast to apply Frost Fever to a target. The analyzer does not count it against you when you do this\"\r\n      >\r\n        <BoringSpellValueText spell={SPELLS.HOWLING_BLAST}>\r\n          <>\r\n            {this.castsWithoutRime} <small>casts without Rime proc</small>\r\n          </>\r\n        </BoringSpellValueText>\r\n      </Statistic>\r\n    );\r\n  }\r\n}\r\n\r\nexport default HardHowlingBlastCasts;\r\n","import React from 'react';\r\nimport SPELLS from 'common/SPELLS';\r\nimport SpellLink from 'common/SpellLink';\r\nimport { formatPercentage } from 'common/format';\r\nimport Analyzer, { Options, SELECTED_PLAYER } from 'parser/core/Analyzer';\r\nimport { ThresholdStyle, When } from 'parser/core/ParseResults';\r\nimport Events, { ApplyBuffEvent, GlobalCooldownEvent, RefreshBuffEvent, RemoveBuffEvent } from 'parser/core/Events';\r\nimport AbilityTracker from 'parser/shared/modules/AbilityTracker';\r\nimport { i18n } from '@lingui/core';\r\nimport { t } from '@lingui/macro';\r\nimport STATISTIC_ORDER from 'interface/others/STATISTIC_ORDER';\r\nimport Statistic from 'interface/statistics/Statistic';\r\n\r\nimport BoringSpellValueText from 'interface/statistics/components/BoringSpellValueText';\r\n\r\nconst LAG_BUFFER_MS = 100;\r\nconst BUFF_DURATION_MS = 10000;\r\n\r\nclass KillingMachineEfficiency extends Analyzer {\r\n  static dependencies = {\r\n    abilityTracker: AbilityTracker,\r\n  };\r\n\r\n  protected abilityTracker!: AbilityTracker;\r\n\r\n  kmProcs: number = 0;\r\n  lastGCDTime: number = 0;\r\n  lastGCDDuration: number = 0;\r\n  lastProcTime: number = 0;\r\n  refreshedKMProcs = 0;\r\n  expiredKMProcs = 0;\r\n\r\n  constructor(options: Options) {\r\n    super(options);\r\n\r\n    this.addEventListener(Events.GlobalCooldown, this.globalCooldown);\r\n    this.addEventListener(Events.applybuff.by(SELECTED_PLAYER).spell(SPELLS.KILLING_MACHINE), this.onApplyBuff);\r\n    this.addEventListener(Events.removebuff.by(SELECTED_PLAYER).spell(SPELLS.KILLING_MACHINE), this.onRemoveBuff);\r\n    this.addEventListener(Events.refreshbuff.by(SELECTED_PLAYER).spell(SPELLS.KILLING_MACHINE), this.onRefreshBuff);\r\n  }\r\n\r\n  onApplyBuff(event: ApplyBuffEvent) {\r\n    this.kmProcs += 1;\r\n    this.lastProcTime = event.timestamp;\r\n  }\r\n\r\n  onRemoveBuff(event: RemoveBuffEvent) {\r\n    const durationHeld = event.timestamp - this.lastProcTime;\r\n    if (durationHeld > (BUFF_DURATION_MS)) {\r\n      this.expiredKMProcs += 1;\r\n    }\r\n  }\r\n\r\n  onRefreshBuff(event: RefreshBuffEvent) {\r\n    const timeSinceGCD = event.timestamp - this.lastGCDTime;\r\n    if (timeSinceGCD < this.lastGCDDuration + LAG_BUFFER_MS) {\r\n      return;\r\n    }\r\n    this.refreshedKMProcs += 1;\r\n  }\r\n\r\n  globalCooldown(event: GlobalCooldownEvent) {\r\n    this.lastGCDTime = event.timestamp;\r\n    this.lastGCDDuration = event.duration;\r\n  }\r\n\r\n  get totalWastedProcs() {\r\n    return this.refreshedKMProcs + this.expiredKMProcs;\r\n  }\r\n\r\n  get wastedProcRate() {\r\n    return this.totalWastedProcs / this.kmProcs;\r\n  }\r\n\r\n  get totalProcs() {\r\n    return this.kmProcs + this.refreshedKMProcs;\r\n  }\r\n\r\n  get efficiency() {\r\n    return 1 - this.wastedProcRate;\r\n  }\r\n\r\n  get suggestionThresholds() {\r\n    return {\r\n      actual: this.efficiency,\r\n      isLessThan: {\r\n        minor: .95,\r\n        average: .90,\r\n        major: .85,\r\n      },\r\n      style: ThresholdStyle.PERCENTAGE,\r\n      suffix: 'Average',\r\n    };\r\n  }\r\n\r\n  suggestions(when: When) {\r\n    when(this.suggestionThresholds)\r\n      .addSuggestion((suggest, actual, recommended) => suggest(<React.Fragment> You wasted <SpellLink id={SPELLS.KILLING_MACHINE.id} /> procs. You should be casting <SpellLink id={SPELLS.OBLITERATE_CAST.id} /> or <SpellLink id={SPELLS.FROSTSCYTHE_TALENT.id} /> within 1 or 2 GCDs of gaining a Killing Machine proc to avoid wasting it. See one of the guides on the About tab for more information on when another ability takes precedence over spending Killing Machine</React.Fragment>)\r\n        .icon(SPELLS.KILLING_MACHINE.icon)\r\n        .actual(i18n._(t('deathknight.frost.suggestions.killingMachine.wasted')`${formatPercentage(this.wastedProcRate)}% of Killing Machine procs were either refreshed and lost or expired without being used`))\r\n        .recommended(`<${formatPercentage(1 - recommended)}% is recommended`));\r\n  }\r\n\r\n  statistic() {\r\n    return (\r\n      <Statistic\r\n        position={STATISTIC_ORDER.CORE(5)}\r\n        size=\"flexible\"\r\n        tooltip={(\r\n          <>\r\n            You wasted {this.totalWastedProcs} out of {this.totalProcs} Killing Machine procs ({formatPercentage(this.wastedProcRate)}%). <br />\r\n            {this.expiredKMProcs} procs expired without being used and {this.refreshedKMProcs} procs were overwritten by new procs.\r\n          </>\r\n        )}\r\n      >\r\n        <BoringSpellValueText spell={SPELLS.KILLING_MACHINE}>\r\n          <>\r\n            {formatPercentage(this.efficiency)} % <small>efficiency</small>\r\n          </>\r\n        </BoringSpellValueText>\r\n      </Statistic>\r\n    );\r\n  }\r\n}\r\n\r\nexport default KillingMachineEfficiency;\r\n","import React from 'react';\r\n\r\nimport SPELLS from 'common/SPELLS';\r\nimport SpellLink from 'common/SpellLink';\r\n\r\nimport { i18n } from '@lingui/core';\r\nimport { t } from '@lingui/macro';\r\n\r\nimport Analyzer, { SELECTED_PLAYER, Options } from 'parser/core/Analyzer';\r\nimport { When, ThresholdStyle } from 'parser/core/ParseResults';\r\nimport Events, { CastEvent, RemoveBuffEvent, FightEndEvent } from 'parser/core/Events';\r\nimport { STATISTIC_ORDER } from 'interface/others/StatisticBox';\r\nimport Statistic from 'interface/statistics/Statistic';\r\nimport BoringSpellValueText from 'interface/statistics/components/BoringSpellValueText';\r\n\r\nconst GOOD_BREATH_DURATION_MS = 25000;\r\n\r\nclass BreathOfSindragosa extends Analyzer {\r\n\r\n  beginTimestamp = 0;\r\n  casts = 0;\r\n  badCasts = 0;\r\n  totalDuration = 0;\r\n  breathActive = false;\r\n\r\n  constructor(options: Options) {\r\n    super(options);\r\n    this.active = this.selectedCombatant.hasTalent(SPELLS.BREATH_OF_SINDRAGOSA_TALENT.id);\r\n    if (!this.active) {\r\n      return;\r\n    }\r\n\r\n    this.addEventListener(Events.cast.by(SELECTED_PLAYER).spell(SPELLS.BREATH_OF_SINDRAGOSA_TALENT), this.onCast);\r\n    this.addEventListener(Events.removebuff.by(SELECTED_PLAYER).spell(SPELLS.BREATH_OF_SINDRAGOSA_TALENT), this.onRemoveBuff);\r\n    this.addEventListener(Events.fightend, this.onFightEnd);\r\n  }\r\n\r\n\r\n  onCast(event: CastEvent) {\r\n    this.casts += 1;\r\n    this.beginTimestamp = event.timestamp;\r\n    this.breathActive = true;\r\n  }\r\n\r\n  onRemoveBuff(event: RemoveBuffEvent) {\r\n    this.breathActive = false;\r\n    const duration = event.timestamp - this.beginTimestamp;\r\n    if (duration < GOOD_BREATH_DURATION_MS) {\r\n      this.badCasts += 1;\r\n    }\r\n    this.totalDuration += duration;\r\n  }\r\n\r\n  onFightEnd(event: FightEndEvent) {\r\n    if (this.breathActive) {\r\n      this.casts -= 1;\r\n    }\r\n  }\r\n\r\n  suggestions(when: When){\r\n    when(this.suggestionThresholds)\r\n      .addSuggestion((suggest, actual, recommended) => suggest(<> You are not getting good uptime from your <SpellLink id={SPELLS.BREATH_OF_SINDRAGOSA_TALENT.id} /> casts. A good cast is one that lasts 25 seconds or more.  To ensure a good duration, make sure you have 70+ Runic Power pooled and have less than 4 Runes available before you start the cast.  Also make sure to use <SpellLink id={SPELLS.EMPOWER_RUNE_WEAPON.id} /> within a few seconds of casting Breath of Sindragosa. Pay close attention to your Runic Power and make sure you are not overcapping. {this.tickingOnFinishedString}</>)\r\n        .icon(SPELLS.BREATH_OF_SINDRAGOSA_TALENT.icon)\r\n        .actual(i18n._(t('deathknight.frost.suggestions.breathOfSindragosa.uptime')`You averaged ${(this.averageDuration).toFixed(1)} seconds of uptime per cast`))\r\n        .recommended(`>${recommended} seconds is recommended`));\r\n  }\r\n\r\n  get tickingOnFinishedString() {\r\n    return this.breathActive ? \"Your final cast was not counted in the average since it was still ticking when the fight ended\" : \"\";\r\n  }\r\n\r\n  get averageDuration() {\r\n    return ((this.totalDuration / this.casts) || 0) / 1000;\r\n  }\r\n\r\n  get suggestionThresholds() {\r\n    return {\r\n      actual: this.averageDuration,\r\n      isLessThan: {\r\n        minor: 25.0,\r\n        average: 22.5,\r\n        major: 20.0,\r\n      },\r\n      style: ThresholdStyle.SECONDS,\r\n      suffix: 'Average',\r\n    };\r\n  }\r\n\r\n  statistic() {\r\n    return (\r\n      <Statistic\r\n        tooltip={`You cast Breath of Sindragosa ${this.casts} times for a combined total of ${(this.totalDuration / 1000).toFixed(1)} seconds.  ${this.badCasts} casts were under 25 seconds.  ${this.tickingOnFinishedString}`}\r\n        position={STATISTIC_ORDER.CORE(60)}\r\n        size=\"flexible\"\r\n      >\r\n        <BoringSpellValueText spell={SPELLS.BREATH_OF_SINDRAGOSA_TALENT}>\r\n          <>\r\n           {(this.averageDuration).toFixed(1)}s  <small>average duration</small>\r\n          </>\r\n        </BoringSpellValueText>\r\n      </Statistic>\r\n    );\r\n  }\r\n}\r\n\r\nexport default BreathOfSindragosa;\r\n","import React from \"react\";\r\n\r\nimport Analyzer, { Options } from \"parser/core/Analyzer\";\r\nimport SPELLS from \"common/SPELLS\";\r\n\r\nimport Statistic from \"interface/statistics/Statistic\";\r\nimport { STATISTIC_ORDER } from \"interface/others/StatisticBox\";\r\nimport BoringSpellValue from \"interface/statistics/components/BoringSpellValue\";\r\n\r\nimport RunicPowerTracker from \"../runicpower/RunicPowerTracker\";\r\n\r\n/** reduces the Runic Power cost of your abilities by 35% for 8 sec */\r\nclass HypothermicPresence extends Analyzer {\r\n  static dependencies = {\r\n    runicPowerTracker: RunicPowerTracker,\r\n  }\r\n  \r\n  protected runicPowerTracker!: RunicPowerTracker;\r\n  \r\n  constructor(options: Options) {\r\n    super(options);\r\n    this.active = this.selectedCombatant.hasTalent(SPELLS.HYPOTHERMIC_PRESENCE_TALENT.id);\r\n    if (!this.active) {\r\n      return;\r\n    }\r\n  }\r\n  \r\n  statistic() {\r\n    return (\r\n      <Statistic\r\n      position={STATISTIC_ORDER.OPTIONAL(50)}\r\n      size=\"flexible\"\r\n      >\r\n        <BoringSpellValue \r\n          spell={SPELLS.HYPOTHERMIC_PRESENCE_TALENT}\r\n          value={`${this.runicPowerTracker.totalHypothermicPresenceReduction}`}\r\n          label=\"Runic Power saved\"\r\n        />\r\n      </Statistic>\r\n      )\r\n    }\r\n  }\r\n  \r\n  export default HypothermicPresence;","import React from 'react';\r\nimport ItemDamageDone from 'interface/ItemDamageDone';\r\nimport UptimeIcon from 'interface/icons/Uptime';\r\nimport STATISTIC_ORDER from 'interface/others/STATISTIC_ORDER';\r\nimport Statistic from 'interface/statistics/Statistic';\r\n\r\nimport BoringSpellValueText from 'interface/statistics/components/BoringSpellValueText';\r\n\r\nimport SPELLS from 'common/SPELLS';\r\nimport RESOURCE_TYPES from 'game/RESOURCE_TYPES';\r\n\r\nimport Analyzer, { Options, SELECTED_PLAYER } from 'parser/core/Analyzer';\r\nimport calculateEffectiveDamage from 'parser/core/calculateEffectiveDamage';\r\nimport Events, { ApplyBuffEvent, ApplyBuffStackEvent, CastEvent, DamageEvent, RemoveBuffEvent } from 'parser/core/Events';\r\n\r\nconst DAMAGE_BOOST = .10;\r\nconst DURATION_BOOST_MS = 500;\r\nconst debug = false;\r\n\r\n/**\r\n *Each Rune spent during Remorseless Winter increases its damage by 10%, and extends its duration by 0.5 sec.\r\n */\r\nclass GatheringStorm extends Analyzer {\r\n  totalCasts: number = 0;\r\n  bonusDamage: number = 0;\r\n  totalStacks: number = 0;\r\n  currentStacks: number = 0;\r\n  extendedDuration: number = 0;\r\n\r\n  constructor(options: Options) {\r\n    super(options);\r\n    this.active = this.selectedCombatant.hasTalent(SPELLS.GATHERING_STORM_TALENT.id);\r\n    if (!this.active) {\r\n      return;\r\n    }\r\n\r\n    this.addEventListener(Events.applybuff.by(SELECTED_PLAYER).spell(SPELLS.GATHERING_STORM_TALENT_BUFF), this.onApplyBuff);\r\n    this.addEventListener(Events.applybuffstack.by(SELECTED_PLAYER).spell(SPELLS.GATHERING_STORM_TALENT_BUFF), this.onApplyBuffStack);\r\n    this.addEventListener(Events.damage.by(SELECTED_PLAYER).spell(SPELLS.REMORSELESS_WINTER_DAMAGE), this.onDamage);\r\n    this.addEventListener(Events.removebuff.by(SELECTED_PLAYER).spell(SPELLS.GATHERING_STORM_TALENT_BUFF), this.onRemoveBuff);\r\n    this.addEventListener(Events.cast.by(SELECTED_PLAYER), this.onCast);\r\n  }\r\n\r\n  onApplyBuff(event: ApplyBuffEvent) {\r\n    this.currentStacks = 1;\r\n    this.totalCasts += 1;\r\n    this.totalStacks += 1;\r\n    debug && console.log('applied buff');\r\n  }\r\n\r\n  onApplyBuffStack(event: ApplyBuffStackEvent) {\r\n    this.currentStacks += 1;\r\n    this.totalStacks += 1;\r\n    debug && console.log(`added buff stack, now at ${this.currentStacks}`);\r\n  }\r\n\r\n  onDamage(event: DamageEvent) {\r\n    const boostedDamage = calculateEffectiveDamage(event, (DAMAGE_BOOST * this.currentStacks));\r\n    this.bonusDamage += boostedDamage;\r\n    debug && console.log(`boosted damage with ${this.currentStacks} stacks = ${boostedDamage}`);\r\n  }\r\n\r\n  onRemoveBuff(event: RemoveBuffEvent) {\r\n    this.currentStacks = 0;\r\n    debug && console.log(`removed buff`);\r\n  }\r\n\r\n  onCast(event: CastEvent) {\r\n    if (!this.selectedCombatant.hasBuff(SPELLS.REMORSELESS_WINTER.id)) {\r\n      return;\r\n    }\r\n    if (event.ability.guid === SPELLS.HOWLING_BLAST.id && this.selectedCombatant.hasBuff(SPELLS.RIME.id)) { // handles the free HB from Rime proc,\r\n      this.extendedDuration += DURATION_BOOST_MS;\r\n      return;\r\n    }\r\n    if (event.classResources) {\r\n      event.classResources\r\n        .filter(resource => resource.type === RESOURCE_TYPES.RUNES.id)\r\n        .forEach(({ cost }) => {\r\n          this.extendedDuration = this.extendedDuration + (DURATION_BOOST_MS * cost);\r\n          debug && console.log(`Added ${(DURATION_BOOST_MS * cost)} to the duration for a total of ${this.extendedDuration} boost to duration`);\r\n        });\r\n    }\r\n  }\r\n\r\n  get averageExtension() {\r\n    return this.extendedDuration / 1000 / this.totalCasts;\r\n  }\r\n\r\n  statistic() {\r\n    return (\r\n      <Statistic\r\n        position={STATISTIC_ORDER.OPTIONAL()}\r\n        size=\"flexible\"\r\n      >\r\n        <BoringSpellValueText spell={SPELLS.GATHERING_STORM_TALENT}>\r\n          <>\r\n            <ItemDamageDone amount={this.bonusDamage} /> <br />\r\n            <UptimeIcon /> {this.averageExtension.toFixed(1)} <small>average seconds extended </small>\r\n          </>\r\n        </BoringSpellValueText>\r\n      </Statistic>\r\n    );\r\n  }\r\n}\r\n\r\nexport default GatheringStorm;\r\n","import React from 'react';\r\n\r\nimport SPELLS from 'common/SPELLS';\r\nimport { formatPercentage } from 'common/format';\r\nimport SpellLink from 'common/SpellLink';\r\nimport Events, { CastEvent, DamageEvent } from 'parser/core/Events';\r\nimport { ThresholdStyle, When } from 'parser/core/ParseResults';\r\nimport Analyzer, { Options, SELECTED_PLAYER } from 'parser/core/Analyzer';\r\nimport STATISTIC_ORDER from 'interface/others/STATISTIC_ORDER';\r\nimport Statistic from 'interface/statistics/Statistic';\r\n\r\nimport BoringSpellValueText from 'interface/statistics/components/BoringSpellValueText';\r\n\r\nimport { i18n } from '@lingui/core';\r\nimport { t } from '@lingui/macro';\r\n\r\n/**\r\n *A sweeping attack that strikes all enemies in front of you for (14% of attack power) Frost damage. This attack benefits from Killing Machine. Critical strikes with Frostscythe deal 4 times normal damage.\r\n */\r\nclass Frostscythe extends Analyzer {\r\n  casts: number = 0;\r\n  hits: number = -1; // need to initialize negative to make sure first cast isn't counted as bad\r\n  goodCasts: number = 0;\r\n  hitThreshold: number = 0;\r\n\r\n  constructor(options: Options) {\r\n    super(options);\r\n    this.active = this.selectedCombatant.hasTalent(SPELLS.FROSTSCYTHE_TALENT.id);\r\n    if (!this.active) {\r\n      return;\r\n    }\r\n\r\n    this.addEventListener(Events.cast.by(SELECTED_PLAYER).spell(SPELLS.FROSTSCYTHE_TALENT), this.onCast);\r\n    this.addEventListener(Events.damage.by(SELECTED_PLAYER).spell(SPELLS.FROSTSCYTHE_TALENT), this.onDamage);\r\n    this.addEventListener(Events.fightend, this.onFightEnd);\r\n  }\r\n\r\n  onCast(event: CastEvent) {\r\n    if (this.hits >= this.hitThreshold) { // this is checking the previous cast, not the cast in the current event\r\n      this.goodCasts += 1;\r\n    }\r\n    this.casts += 1;\r\n    this.hitThreshold = this.selectedCombatant.hasBuff(SPELLS.KILLING_MACHINE.id, event.timestamp) ? 1 : 2;\r\n    this.hits = 0;\r\n  }\r\n\r\n  onDamage(event: DamageEvent) {\r\n    this.hits += 1;\r\n  }\r\n\r\n  onFightEnd() { // check if the last cast of Fsc was good\r\n    if (this.hits >= this.hitThreshold) {\r\n      this.goodCasts += 1;\r\n    }\r\n  }\r\n\r\n  get efficiency() {\r\n    return this.goodCasts / this.casts;\r\n  }\r\n\r\n  get efficencyThresholds() {\r\n    return {\r\n      actual: this.efficiency,\r\n      isLessThan: {\r\n        minor: 0.95,\r\n        average: 0.85,\r\n        major: .75,\r\n      },\r\n      style: ThresholdStyle.PERCENTAGE,\r\n    };\r\n  }\r\n\r\n  suggestions(when: When) {\r\n    when(this.efficencyThresholds).addSuggestion((suggest, actual, recommended) => suggest(\r\n      <>\r\n        Your <SpellLink id={SPELLS.FROSTSCYTHE_TALENT.id} /> efficiency can be improved. Only cast Frostscythe if you have a <SpellLink id={SPELLS.KILLING_MACHINE.id} icon /> proc or you can hit 2+ targets.\r\n      </>)\r\n      .icon(SPELLS.FROSTSCYTHE_TALENT.icon)\r\n      .actual(i18n._(t('deathknight.forst.frostScythe.efficiency')`${formatPercentage(actual)}% Frostscythe efficiency`))\r\n      .recommended(`>${formatPercentage(recommended)}% is recommended`));\r\n  }\r\n\r\n  statistic() {\r\n    return (\r\n      <Statistic\r\n        position={STATISTIC_ORDER.OPTIONAL()}\r\n        size=\"flexible\"\r\n        tooltip={`A good cast is one where you either hit 1+ targets with a Killing Machine buff or you hit 2+ targets.  You had ${this.goodCasts} / ${this.casts} good casts`}\r\n      >\r\n        <BoringSpellValueText spell={SPELLS.FROSTSCYTHE_TALENT}>\r\n          <>\r\n            {formatPercentage(this.efficiency)} % <small>efficiency</small>\r\n          </>\r\n        </BoringSpellValueText>\r\n      </Statistic>\r\n    );\r\n  }\r\n}\r\n\r\nexport default Frostscythe;\r\n","import CoreCombatLogParser from 'parser/core/CombatLogParser';\r\nimport ArcaneTorrent from 'parser/shared/modules/racials/bloodelf/ArcaneTorrent';\r\n\r\nimport CooldownThroughputTracker from './modules/features/CooldownThroughputTracker';\r\nimport Abilities from './modules/Abilities';\r\nimport AlwaysBeCasting from './modules/features/AlwaysBeCasting';\r\nimport SpellUsable from './modules/features/SpellUsable';\r\nimport Checklist from './modules/features/checklist/Module';\r\n\r\nimport FrostFeverUptime from './modules/features/FrostFeverUptime';\r\nimport RimeEfficiency from './modules/features/RimeEfficiency';\r\nimport HardHowlingBlastCasts from './modules/features/HardHowlingBlastCasts';\r\nimport KillingMachineEfficiency from './modules/features/KillingMachine';\r\nimport BreathOfSindragosa from './modules/talents/BreathOfSindragosa';\r\nimport HypothermicPresence from './modules/talents/HypothermicPresence';\r\n\r\nimport RuneTracker from './modules/features/RuneTracker';\r\nimport RuneDetails from '../shared/RuneDetails';\r\nimport RunicPowerDetails from './modules/runicpower/RunicPowerDetails';\r\nimport RunicPowerTracker from './modules/runicpower/RunicPowerTracker';\r\n\r\nimport GatheringStorm from './modules/talents/GatheringStorm';\r\nimport Frostscythe from './modules/talents/Frostscythe';\r\n\r\n// Runes\r\nimport RuneOfTheFallenCrusader from '../shared/runeforges/RuneOfTheFallenCrusader';\r\nimport RuneOfHysteria from '../shared/runeforges/RuneOfHysteria';\r\n\r\nclass CombatLogParser extends CoreCombatLogParser {\r\n  static specModules = {\r\n    // Core\r\n    cooldownThroughputTracker: CooldownThroughputTracker,\r\n    abilities: Abilities,\r\n    alwaysBeCasting: AlwaysBeCasting,\r\n    spellUsable: SpellUsable,\r\n    checklist: Checklist,\r\n\r\n    // Features\r\n    HardHowlingBlastCasts: HardHowlingBlastCasts,\r\n    frostfeverUptime: FrostFeverUptime,\r\n    rimeEfficiency: RimeEfficiency,\r\n    killingMachineEfficiency: KillingMachineEfficiency,\r\n    breathofSindragoa: BreathOfSindragosa,\r\n    hypothermicPresence: HypothermicPresence,\r\n\r\n    //resource tracker\r\n    runeTracker: RuneTracker,\r\n    runeDetails: RuneDetails,\r\n    runicPowerDetails: RunicPowerDetails,\r\n    runicPowerTracker: RunicPowerTracker,\r\n\r\n    //talents\r\n    gatheringStorm: GatheringStorm,\r\n    frostscythe: Frostscythe,\r\n\r\n    // Runes\r\n    runeOfTheFallenCrusader: RuneOfTheFallenCrusader,\r\n    runeOfHysteria: RuneOfHysteria,\r\n\r\n    arcaneTorrent: [ArcaneTorrent, { castEfficiency: 0.5 }] as const,\r\n  };\r\n}\r\n\r\nexport default CombatLogParser;\r\n","export default function calculateEffectiveDamage(event, increase) {\r\n  const raw = (event.amount || 0) + (event.absorbed || 0);\r\n  return raw - (raw / (1 + increase));\r\n}\r\n","import React from 'react';\r\n\r\n// https://thenounproject.com/term/duration/370713/\r\n// duration by Bohdan Burmich from the Noun Project\r\nconst Icon = ({ ...other }) => (\r\n  <svg xmlns=\"http://www.w3.org/2000/svg\" viewBox=\"10 10 80 80\" className=\"icon\" {...other}>\r\n    <path d=\"M50,86.4865c17.4361,0,31.6216-14.1855,31.6216-31.6216c0-16.6168-12.8865-30.2714-29.1892-31.5189v-4.9677h7.2973v-4.8649  H40.2703v4.8649h7.2973v4.9677c-16.3027,1.2475-29.1892,14.902-29.1892,31.5189C18.3784,72.3009,32.5639,86.4865,50,86.4865z M52.4324,28.2236c3.1101,0.2817,6.0664,1.0982,8.7798,2.356l-8.7798,15.2073V28.2236z M47.5676,28.2236v26.6412 c0,1.1008,0.7393,2.0647,1.8029,2.3497c0.209,0.0561,0.4205,0.0827,0.6295,0.0827c0.8533,0,1.6642-0.4504,2.1065-1.2162 l13.3146-23.0616c6.8507,4.8503,11.3357,12.8315,11.3357,21.8454c0,14.7537-12.0031,26.7567-26.7568,26.7567 s-26.7568-12.003-26.7568-26.7567C23.2432,40.9315,33.9501,29.4573,47.5676,28.2236z\" />\r\n  </svg>\r\n);\r\n\r\nexport default Icon;\r\n","/**\r\n * A simple component that shows the spell icon left and a value right.\r\n * Use this only for things that the player certainly should be familiar with, such as their own spells.\r\n * Do NOT use for items or azerite powers.\r\n */\r\nimport React from 'react';\r\n\r\nimport SpellIcon from 'common/SpellIcon';\r\n\r\nimport '../BoringValue.scss';\r\nimport Spell from 'common/SPELLS/Spell';\r\n\r\ntype Props = {\r\n  spell: Spell;\r\n  value: React.ReactNode;\r\n  label: React.ReactNode;\r\n  extra?: React.ReactNode;\r\n  className?: string;\r\n}\r\n\r\nconst BoringSpellValue = ({ spell, value, label, extra, className }: Props) => (\r\n  <div className={`flex boring-value ${className || ''}`}>\r\n    <div className=\"flex-sub icon\">\r\n      <SpellIcon id={spell.id} />\r\n    </div>\r\n    <div className=\"flex-main value\">\r\n      <div>{value}</div>\r\n      <small>{label}</small>\r\n      {extra}\r\n    </div>\r\n  </div>\r\n);\r\n\r\nexport default BoringSpellValue;\r\n","import React from 'react';\r\n\r\nimport RESOURCE_TYPES from 'game/RESOURCE_TYPES';\r\nimport SPELLS from 'common/SPELLS';\r\nimport { formatDuration, formatNumber, formatPercentage } from 'common/format';\r\nimport STATISTIC_ORDER from 'interface/others/STATISTIC_ORDER';\r\nimport Statistic from 'interface/statistics/Statistic';\r\n\r\nimport SpellUsable from 'parser/shared/modules/SpellUsable';\r\nimport CastEfficiency from 'parser/shared/modules/CastEfficiency';\r\nimport Abilities from 'parser/core/modules/Abilities';\r\nimport ResourceTracker from 'parser/shared/modules/resources/resourcetracker/ResourceTracker';\r\nimport Events, { EventType } from 'parser/core/Events';\r\nimport { SELECTED_PLAYER } from 'parser/core/Analyzer';\r\n\r\nimport { i18n } from '@lingui/core';\r\nimport { t } from '@lingui/macro';\r\nimport BoringResourceValue from 'interface/statistics/components/BoringResourceValue';\r\n\r\nconst MAX_RUNES = 6;\r\nconst RUNIC_CORRUPTION_INCREASE = 1; //Runic Corruption\r\nconst RUNE_IDS = [\r\n  SPELLS.RUNE_1, //-101\r\n  SPELLS.RUNE_2, //-102\r\n  SPELLS.RUNE_3, //-103\r\n];\r\n\r\n/*\r\n * Runes are tracked as 3 fake spells with 2 charges to simulate 3 runes charging at the same time.\r\n * aslong as spells always use the rune pair with the shortest cooldown remaining it should match\r\n * its in game functionality.\r\n */\r\nclass RuneTracker extends ResourceTracker {\r\n  static dependencies = {\r\n    ...ResourceTracker.dependencies,\r\n    spellUsable: SpellUsable,\r\n    castEfficiency: CastEfficiency,\r\n    abilities: Abilities,\r\n  };\r\n\r\n  runesReady = []; //{x, y} points of {time, runeCount} for the chart\r\n  _runesReadySum; //time spent at each rune. _runesReadySum[1] is time spent at one rune available.\r\n  _lastTimestamp; //used to find time since last rune change for the _runesReadySum\r\n  _fightend = false; //fightend, avoid wierd graph by not adding later runes\r\n\r\n  constructor(...args) {\r\n    super(...args);\r\n    this.resource = RESOURCE_TYPES.RUNES;\r\n    this._lastTimestamp = this.owner.fight.start_time;\r\n    this._runesReadySum = [MAX_RUNES + 1];\r\n    for (let i = 0; i <= MAX_RUNES; i += 1) {\r\n      this._runesReadySum[i] = 0;\r\n    }\r\n    this.addEventListener(Events.fightend, this.onFightend);\r\n    this.addEventListener(Events.applybuff.to(SELECTED_PLAYER).spell(SPELLS.RUNIC_CORRUPTION), this.onApplybuff);\r\n    this.addEventListener(Events.removebuff.to(SELECTED_PLAYER).spell(SPELLS.RUNIC_CORRUPTION), this.onRemovebuff);\r\n    this.addEventListener(Events.UpdateSpellUsable.spell(RUNE_IDS), this.onUpdateSpellUsable);\r\n  }\r\n\r\n  onFightend() { //add a last event for calculating uptimes and make the chart not end early.\r\n    const runesAvailable = this.runesAvailable;\r\n    this._fightend = true;\r\n\r\n    this.runesReady.push({ x: this.owner.fightDuration / 1000, y: runesAvailable });\r\n    this._runesReadySum[runesAvailable] += this.owner.fight.end_time - this._lastTimestamp;\r\n    this.addPassiveRuneRegeneration();\r\n  }\r\n\r\n  onCast(event) {\r\n    if (!event.classResources || event.prepull) {\r\n      return;\r\n    }\r\n    super.onCast(event);\r\n\r\n    event.classResources\r\n      .filter(resource => resource.type === this.resource.id)\r\n      .forEach(({ amount, cost }) => {\r\n        let runeCost = cost || 0;\r\n        //adjust for resource cost reduction\r\n        if (event.ability.guid === SPELLS.OBLITERATE_CAST.id && this.selectedCombatant.hasBuff(SPELLS.OBLITERATION_TALENT.id)) {\r\n          runeCost -= 1;\r\n        }\r\n        if (runeCost <= 0) {\r\n          return;\r\n        }\r\n        for (let i = 0; i < runeCost; i += 1) { //start rune cooldown\r\n          this.startCooldown(event);\r\n        }\r\n      });\r\n  }\r\n\r\n  onEnergize(event) { //add a charge to the rune with the longest remaining cooldown when a rune is refunded.\r\n    super.onEnergize(event);\r\n    if (event.resourceChangeType !== this.resource.id) {\r\n      return;\r\n    }\r\n    const amount = event.resourceChange;\r\n    for (let i = 0; i < amount; i += 1) {\r\n      this.addCharge();\r\n    }\r\n  }\r\n\r\n  onApplybuff(event) { //decrease cooldown when a buff that increases rune regeneration rate is applied.\r\n    const multiplier = 1 / (1 + RUNIC_CORRUPTION_INCREASE);\r\n    RUNE_IDS.forEach(spell => {\r\n      this.changeCooldown(spell.id, multiplier);\r\n    });\r\n  }\r\n\r\n  onRemovebuff(event) { //increase cooldown when a buff that increases rune regeneration rate fades.\r\n    const multiplier = 1 + RUNIC_CORRUPTION_INCREASE;\r\n    RUNE_IDS.forEach(spell => {\r\n      this.changeCooldown(spell.id, multiplier);\r\n    });\r\n  }\r\n\r\n  onUpdateSpellUsable(event) { //track when a rune comes off cooldown\r\n    let change = 0;\r\n    if (event.trigger === EventType.EndCooldown || event.trigger === EventType.RestoreCharge) { //gained a rune\r\n      change += 1;\r\n    } else if (event.trigger === EventType.BeginCooldown || event.trigger === EventType.AddCooldownCharge) { //spent a rune\r\n      change -= 1;\r\n    } else { //no change\r\n      return;\r\n    }\r\n\r\n    //time since last rune change was spent at current runes minus the change.\r\n    this._runesReadySum[this.runesAvailable - change] += event.timestamp - this._lastTimestamp;\r\n    this._lastTimestamp = event.timestamp;\r\n    //Adding two points to the rune chart, one at {time, lastRuneCount} and one at {time, newRuneCount} so the chart does not have diagonal lines.\r\n\r\n    if (this._fightend) {\r\n      return;\r\n    }\r\n\r\n    this.runesReady.push({ x: this.timeFromStart(event.timestamp), y: this.runesAvailable - change });\r\n    this.runesReady.push({ x: this.timeFromStart(event.timestamp), y: this.runesAvailable });\r\n  }\r\n\r\n  // add passive rune regeneration and RC/4p21blood\r\n  addPassiveRuneRegeneration() {\r\n    let passiveRunesGained = this.runesMaxCasts;\r\n    let passiveRunesWasted = this.runesWasted;\r\n    //add runic corruption gained (and subtract it from passive regn)\r\n    const runicCorruptionContribution = this.addPassiveAccelerator(SPELLS.RUNIC_CORRUPTION.id, passiveRunesGained, passiveRunesWasted, RUNIC_CORRUPTION_INCREASE);\r\n    passiveRunesGained *= 1 - runicCorruptionContribution;\r\n    passiveRunesWasted *= 1 - runicCorruptionContribution;\r\n    //add passive rune regn\r\n    this.initBuilderAbility(SPELLS.RUNE_1.id);\r\n    this.buildersObj[SPELLS.RUNE_1.id].generated += Math.round(passiveRunesGained);\r\n    this.buildersObj[SPELLS.RUNE_1.id].wasted += Math.round(passiveRunesWasted);\r\n  }\r\n\r\n  addPassiveAccelerator(spellId, gained, wasted, increase) { //used to add passive rune gain accelerators like Runic Corruption\r\n    //use uptime to get approximate contribution to passive regeneration\r\n    const uptime = this.selectedCombatant.getBuffUptime(spellId) / this.owner.fightDuration;\r\n    if (!(uptime > 0)) {\r\n      return 0;\r\n    }\r\n    this.initBuilderAbility(spellId);\r\n    const contribution = uptime * increase / (1 + increase);\r\n    const acceleratorGained = Math.round(gained * contribution);\r\n    this.buildersObj[spellId].generated += acceleratorGained;\r\n    const acceleratorWasted = Math.round(wasted * contribution);\r\n    this.buildersObj[spellId].wasted += acceleratorWasted;\r\n    return contribution;\r\n  }\r\n\r\n  changeCooldown(spellId, multiplier) { //increases or decreases rune cooldown\r\n    if (!this.spellUsable.isOnCooldown(spellId)) {\r\n      return;\r\n    }\r\n    const remainingCooldown = this.spellUsable.cooldownRemaining(spellId);\r\n    const newCooldown = remainingCooldown * multiplier;\r\n    const reduction = remainingCooldown - newCooldown;\r\n    this.spellUsable.reduceCooldown(spellId, reduction);\r\n  }\r\n\r\n  addCharge() {\r\n    const runeId = this.longestCooldown;\r\n    if (!this.spellUsable.isOnCooldown(runeId)) {\r\n      return;\r\n    }\r\n    const expectedCooldown = this.abilities.getExpectedCooldownDuration(runeId, this.spellUsable.cooldownTriggerEvent(runeId));\r\n    this.spellUsable.reduceCooldown(runeId, expectedCooldown);\r\n  }\r\n\r\n  startCooldown(event) {\r\n    const runeId = this.shortestCooldown;\r\n    this.spellUsable.beginCooldown(runeId, event);\r\n  }\r\n\r\n  get shortestCooldown() {\r\n    const runeOneCooldown = this.getCooldown(SPELLS.RUNE_1.id) || 0;\r\n    const runeTwoCooldown = this.getCooldown(SPELLS.RUNE_2.id) || 0;\r\n    const runeThreeCooldown = this.getCooldown(SPELLS.RUNE_3.id) || 0;\r\n    if (runeOneCooldown <= runeTwoCooldown && runeOneCooldown <= runeThreeCooldown) {\r\n      return SPELLS.RUNE_1.id;\r\n    } else if (runeTwoCooldown <= runeThreeCooldown) {\r\n      return SPELLS.RUNE_2.id;\r\n    } else {\r\n      return SPELLS.RUNE_3.id;\r\n    }\r\n  }\r\n\r\n  get longestCooldown() {\r\n    const runeOneCooldown = this.getCooldown(SPELLS.RUNE_1.id) || 0;\r\n    const runeTwoCooldown = this.getCooldown(SPELLS.RUNE_2.id) || 0;\r\n    const runeThreeCooldown = this.getCooldown(SPELLS.RUNE_3.id) || 0;\r\n    if (runeOneCooldown >= runeTwoCooldown && runeOneCooldown >= runeThreeCooldown) {\r\n      return SPELLS.RUNE_1.id;\r\n    } else if (runeTwoCooldown >= runeThreeCooldown) {\r\n      return SPELLS.RUNE_2.id;\r\n    } else {\r\n      return SPELLS.RUNE_3.id;\r\n    }\r\n  }\r\n\r\n  get runesAvailable() {\r\n    let chargesAvailable = 0;\r\n    RUNE_IDS.forEach(spell => {\r\n      chargesAvailable += this.spellUsable.chargesAvailable(spell.id);\r\n    });\r\n    return chargesAvailable;\r\n  }\r\n\r\n  getCooldown(spellId) {\r\n    if (!this.spellUsable.isOnCooldown(spellId)) {\r\n      return null;\r\n    }\r\n    const chargesOnCooldown = 2 - this.spellUsable.chargesAvailable(spellId);\r\n    const cooldownRemaining = this.spellUsable.cooldownRemaining(spellId);\r\n    const fullChargeCooldown = this.abilities.getExpectedCooldownDuration(spellId, this.spellUsable.cooldownTriggerEvent(spellId));\r\n    return (chargesOnCooldown - 1) * fullChargeCooldown + cooldownRemaining;\r\n  }\r\n\r\n  get runeEfficiency() {\r\n    const runeCastEfficiencies = [];\r\n    RUNE_IDS.forEach(spell => {\r\n      runeCastEfficiencies.push(this.castEfficiency.getCastEfficiencyForSpellId(spell.id).efficiency);\r\n    });\r\n    return runeCastEfficiencies.reduce((accumulator, currentValue) => accumulator + currentValue) / runeCastEfficiencies.length;\r\n  }\r\n\r\n  // total runes generated with passive regeneration\r\n  get runesMaxCasts() {\r\n    let totalCasts = 0;\r\n    for (const spender in this.spendersObj) { //add runes spent\r\n      totalCasts += this.spendersObj[spender].spent;\r\n    }\r\n    // subtract starting runes and add end runes\r\n    return totalCasts - MAX_RUNES + this.runesReady[this.runesReady.length - 1].y;\r\n  }\r\n\r\n  // total runes wasted with passive regeneration\r\n  get runesWasted() {\r\n    return this.runesMaxCasts * (1 - this.runeEfficiency);\r\n  }\r\n\r\n  get timeSpentAtRuneCount() {\r\n    const timeSpentAtRune = [];\r\n    this._runesReadySum.forEach((time) => {\r\n      timeSpentAtRune.push(time / this.owner.fightDuration);\r\n    });\r\n    return timeSpentAtRune;\r\n  }\r\n\r\n  timeFromStart(timestamp) {\r\n    return (timestamp - this.owner.fight.start_time) / 1000;\r\n  }\r\n\r\n  get suggestionThresholds() {\r\n    return {\r\n      actual: 1 - this.runeEfficiency,\r\n      isGreaterThan: {\r\n        minor: 0.05,\r\n        average: 0.1,\r\n        major: 0.2,\r\n      },\r\n      style: 'percentage',\r\n    };\r\n  }\r\n\r\n  get suggestionThresholdsEfficiency() {\r\n    return {\r\n      actual: this.runeEfficiency,\r\n      isLessThan: {\r\n        minor: 0.95,\r\n        average: 0.9,\r\n        major: 0.8,\r\n      },\r\n      style: 'percentage',\r\n    };\r\n  }\r\n\r\n  suggestions(when) {\r\n    when(this.suggestionThresholds).addSuggestion((suggest, actual, recommended) => suggest(<>You overcapped {formatPercentage(actual)}% of your runes. Try to always have at least 3 runes on cooldown.</>)\r\n      .icon(SPELLS.RUNE_1.icon)\r\n      .actual(i18n._(t('deathknight.shared.suggestions.runes.overcapped')`${formatPercentage(actual)}% runes overcapped`))\r\n      .recommended(`<${formatPercentage(recommended)}% is recommended`));\r\n  }\r\n\r\n  statistic() {\r\n    const timeSpentAtRuneCount = this.timeSpentAtRuneCount;\r\n    const badThreshold = 4;\r\n    return (\r\n      <Statistic\r\n        position={STATISTIC_ORDER.CORE(10)}\r\n        size=\"flexible\"\r\n        tooltip={(\r\n          <>\r\n            Number of runes wasted: {formatNumber(this.runesWasted)} <br />\r\n            These numbers only include runes wasted from passive regeneration. <br />\r\n            The table below shows the time spent at any given number of runes available.\r\n          </>\r\n        )}\r\n        dropdown={\r\n          <table className=\"table table-condensed\">\r\n            <thead>\r\n              <tr>\r\n                <th>Runes</th>\r\n                <th>Time (s)</th>\r\n                <th>Time (%)</th>\r\n              </tr>\r\n            </thead>\r\n            <tbody>\r\n              { //split into good and bad number of runes available\r\n                this._runesReadySum.filter((value, index) => index < badThreshold).map((value, index) => (\r\n                  <tr key={index}>\r\n                    <th>{index}</th>\r\n                    <td>{formatDuration(this._runesReadySum[index] / 1000)}</td>\r\n                    <td>{formatPercentage(timeSpentAtRuneCount[index])}%</td>\r\n                  </tr>\r\n                ))\r\n              }\r\n              {\r\n                this._runesReadySum.filter((value, index) => index >= badThreshold).map((value, index) => (\r\n                  <tr key={index + badThreshold}>\r\n                    <th style={{ color: 'red' }}>{index + badThreshold}</th>\r\n                    <td>{formatDuration(this._runesReadySum[index + badThreshold] / 1000)}</td>\r\n                    <td>{formatPercentage(timeSpentAtRuneCount[index + badThreshold])}%</td>\r\n                  </tr>\r\n                ))\r\n              }\r\n            </tbody>\r\n          </table>\r\n        }\r\n      >\r\n        <BoringResourceValue\r\n          resource={RESOURCE_TYPES.RUNES}\r\n          value={`${formatPercentage(1 - this.runeEfficiency)} %`}\r\n          label=\"Runes overcapped\"\r\n        />\r\n      </Statistic>\r\n    );\r\n  }\r\n}\r\n\r\nexport default RuneTracker;\r\n","import React from 'react';\r\n\r\nimport SPELLS from 'common/SPELLS';\r\n\r\nimport Analyzer, { Options, SELECTED_PLAYER } from 'parser/core/Analyzer';\r\nimport Events, { HealEvent } from 'parser/core/Events';\r\n\r\nimport STATISTIC_ORDER from 'interface/others/STATISTIC_ORDER';\r\nimport Statistic from 'interface/statistics/Statistic';\r\nimport BoringSpellValueText from 'interface/statistics/components/BoringSpellValueText';\r\nimport { formatNumber, formatPercentage } from 'common/format';\r\n\r\nconst UNHOLY_STRENGTH_STRENGTH = 0.15; // 15% Str buff while active\r\n\r\nclass RuneOfTheFallenCrusader extends Analyzer {\r\n\r\n  healing: number = 0;\r\n  overhealing: number = 0;\r\n\r\n  constructor(options: Options) {\r\n    super(options);\r\n\r\n    const active = this.selectedCombatant.hasWeaponEnchant(SPELLS.RUNE_OF_THE_FALLEN_CRUSADER)\r\n    this.active = active\r\n    if (!active) {\r\n      return;\r\n    }\r\n\r\n    this.addEventListener(Events.heal.to(SELECTED_PLAYER).spell(SPELLS.UNHOLY_STRENGTH_BUFF), this._onHeal);\r\n  }\r\n\r\n  _onHeal(event: HealEvent) {\r\n    if (event.overheal) {\r\n      this.overhealing += event.overheal\r\n    }\r\n    this.healing += event.amount + event.absorb\r\n  }\r\n\r\n  get overhealPercentage() {\r\n    return this.overhealing / this.healing\r\n  }\r\n\r\n  get uptime() {\r\n    return this.selectedCombatant.getBuffUptime(SPELLS.UNHOLY_STRENGTH_BUFF.id) / this.owner.fightDuration;\r\n  }\r\n\r\n  get averageStrength() {\r\n    return this.uptime * UNHOLY_STRENGTH_STRENGTH\r\n  }\r\n\r\n  statistic() {\r\n    return (\r\n      <Statistic\r\n        position={STATISTIC_ORDER.OPTIONAL(2)}\r\n        size=\"flexible\"\r\n        tooltip={(\r\n          <>\r\n            <strong>Uptime: </strong> {formatPercentage(this.uptime)}% <br />\r\n            <strong>Healing: </strong> {formatNumber(this.healing)} <br />\r\n            <strong>Overhealing: </strong> {formatNumber(this.overhealing)} ({formatPercentage(this.overhealPercentage)} %) <br />\r\n          </>\r\n        )}\r\n      >\r\n        <BoringSpellValueText spell={SPELLS.RUNE_OF_THE_FALLEN_CRUSADER}>\r\n          <>\r\n            {formatPercentage(this.averageStrength)} % <small>average Strength</small>\r\n          </>\r\n        </BoringSpellValueText>\r\n      </Statistic>\r\n    );\r\n  }\r\n\r\n}\r\n\r\nexport default RuneOfTheFallenCrusader;\r\n","import React from 'react';\r\n\r\nimport SPELLS from 'common/SPELLS';\r\n\r\nimport Analyzer, { Options } from 'parser/core/Analyzer';\r\nimport Events, { EnergizeEvent } from 'parser/core/Events';\r\n\r\nimport STATISTIC_ORDER from 'interface/others/STATISTIC_ORDER';\r\nimport Statistic from 'interface/statistics/Statistic';\r\nimport BoringSpellValueText from 'interface/statistics/components/BoringSpellValueText';\r\nimport { formatPercentage } from 'common/format';\r\n\r\nimport RESOURCE_TYPES from 'game/RESOURCE_TYPES';\r\n\r\nimport { ThresholdStyle, When } from 'parser/core/ParseResults';\r\nimport { i18n } from '@lingui/core';\r\nimport { t } from '@lingui/macro';\r\nimport SPECS from 'game/SPECS';\r\n\r\nconst RP_BUFF_BY_HYSTERIA = 0.2;\r\nconst DEATH_STRIKE_COST = 45;\r\n\r\n// Energize Events are not floats, making it difficult to track the exact amount of RP gained by Hysteria\r\n// But Energize Events round up if the RP gained was eg. 0.4 and the player had 50.7 RP\r\n// Tracking total RP gained during Hysteria and multiplying it by .2 works for now because fractions add up\r\n// this becomes inaccurate if other spells generate fractions of RP\r\n\r\nclass RuneOfHysteria extends Analyzer {\r\n\r\n  runicPowerGained: number = 0;\r\n  runicPowerWasted: number = 0;\r\n\r\n  constructor(options: Options) {\r\n    super(options);\r\n\r\n    const active = this.selectedCombatant.hasWeaponEnchant(SPELLS.RUNE_OF_HYSTERIA)\r\n    this.active = active\r\n    if (!active) {\r\n      return;\r\n    }\r\n\r\n    this.addEventListener(Events.energize, this._onEnergize)\r\n  }\r\n\r\n  _onEnergize(event: EnergizeEvent) {\r\n    const hysteriaUp = this.selectedCombatant.hasBuff(SPELLS.RUNE_OF_HYSTERIA_BUFF.id, event.timestamp);\r\n    if (!hysteriaUp || event.resourceChangeType !== RESOURCE_TYPES.RUNIC_POWER.id) {\r\n      return;\r\n    }\r\n\r\n    this.runicPowerGained += event.resourceChange;\r\n    this.runicPowerWasted += event.waste\r\n  }\r\n\r\n  get runicPowerGainedByHysteria() {\r\n    return this.runicPowerGained * RP_BUFF_BY_HYSTERIA\r\n  }\r\n\r\n  get runicPowerWastedDuringHysteria() {\r\n    return this.runicPowerWasted * RP_BUFF_BY_HYSTERIA\r\n  }\r\n\r\n  get potentialRunicPowerGainedByHysteria() {\r\n    return this.runicPowerGainedByHysteria + this.runicPowerWastedDuringHysteria\r\n  }\r\n\r\n  get wastedPercentage() {\r\n    return this.runicPowerWastedDuringHysteria / this.runicPowerGainedByHysteria\r\n  }\r\n\r\n  get potentiallyGainedDeathStrikes() {\r\n    return Math.floor(this.potentialRunicPowerGainedByHysteria / DEATH_STRIKE_COST)\r\n  }\r\n\r\n  get gainedDeathStrikes() {\r\n    return Math.floor(this.runicPowerGainedByHysteria / DEATH_STRIKE_COST)\r\n  }\r\n\r\n  get wastedDeathStrikes() {\r\n    return this.potentiallyGainedDeathStrikes - this.gainedDeathStrikes\r\n  }\r\n\r\n  get efficiencySuggestionThresholds() {\r\n    return {\r\n      actual: this.wastedPercentage,\r\n      isGreaterThan: {\r\n        minor: 0,\r\n        average: .2,\r\n        major: .4,\r\n      },\r\n      style: ThresholdStyle.PERCENTAGE,\r\n    };\r\n  }\r\n\r\n  suggestions(when: When) {\r\n    when(this.efficiencySuggestionThresholds)\r\n      .addSuggestion((suggest, actual, recommended) => suggest(<span>Avoid being Runic Power capped at all times, you wasted {this.runicPowerWastedDuringHysteria} PR of {SPELLS.RUNE_OF_HYSTERIA.name} by being RP capped.</span>)\r\n          .icon(SPELLS.RUNE_OF_HYSTERIA.icon)\r\n          .actual(i18n._(t('deathknight.suggestions.hysteria.efficiency')`You wasted ${(formatPercentage(actual))}% of RP from ${SPELLS.RUNE_OF_HYSTERIA.name} by being RP capped.`))\r\n          .recommended(`${formatPercentage(recommended)}% is recommended`));\r\n  }\r\n\r\n  statistic() {\r\n    let gainedSpell: React.ReactNode = <></>\r\n    let wastedSpell: React.ReactNode = <></>\r\n\r\n    if (this.selectedCombatant.spec === SPECS.BLOOD_DEATH_KNIGHT) {\r\n      gainedSpell = <>, resulting in {this.gainedDeathStrikes} additional {SPELLS.DEATH_STRIKE.name}</>\r\n      wastedSpell = <>, losing out on {this.wastedDeathStrikes} {SPELLS.DEATH_STRIKE.name}</>\r\n    }\r\n\r\n    return (\r\n      <Statistic\r\n        position={STATISTIC_ORDER.OPTIONAL(2)}\r\n        size=\"flexible\"\r\n        tooltip={(\r\n          <>\r\n            You gained {Math.floor(this.runicPowerGainedByHysteria)} RP by using {SPELLS.RUNE_OF_HYSTERIA.name}{gainedSpell}.<br />\r\n            {this.runicPowerWastedDuringHysteria > 1 && <>\r\n              You wasted {this.runicPowerWastedDuringHysteria} RP ({formatPercentage(this.wastedPercentage)} %) from Hysteria by being RP capped{wastedSpell}.\r\n            </>}\r\n          </>\r\n        )}\r\n      >\r\n        <BoringSpellValueText spell={SPELLS.RUNE_OF_HYSTERIA}>\r\n          <>\r\n            {Math.floor(this.runicPowerGainedByHysteria)} <small>RP gained</small>\r\n          </>\r\n        </BoringSpellValueText>\r\n      </Statistic>\r\n    );\r\n  }\r\n\r\n}\r\n\r\nexport default RuneOfHysteria;\r\n","import React from 'react';\r\nimport PropTypes from 'prop-types';\r\n\r\nimport SpellIcon from 'common/SpellIcon';\r\nimport SpellLink from 'common/SpellLink';\r\nimport { formatPercentage } from 'common/format';\r\nimport SPELLS from 'common/SPELLS';\r\nimport { TooltipElement } from 'common/Tooltip';\r\n\r\nimport ResourceBreakdown from 'parser/shared/modules/resources/resourcetracker/ResourceBreakdown';\r\n\r\n//Need to extend this class to change how passive rune regeneration is displayed.\r\n//The only new lines are 44, 49-54 and 78.\r\nclass RuneBreakdown extends ResourceBreakdown {\r\n  static propTypes = {\r\n    tracker: PropTypes.object.isRequired,\r\n    showSpenders: PropTypes.bool,\r\n  };\r\n\r\n  render() {\r\n    const { tracker, showSpenders } = this.props;\r\n    const resourceName = tracker.resource.name;\r\n    const generated = this.prepareGenerated(tracker.buildersObj);\r\n    const spent = this.prepareSpent(tracker.spendersObj);\r\n\r\n    let totalGenerated = tracker.generated;\r\n    let totalWasted = tracker.wasted;\r\n\r\n    let totalSpent = tracker.spent;\r\n    let totalCasts = tracker.spendersCasts;\r\n\r\n    // looks wrong but totals are only for the purpose of percentage, and if nothing was wasted, then 0/1 gives correct result 0% wasted, if it's not 0 it retains its original value\r\n    totalGenerated = (totalGenerated === 0) ? 1 : totalGenerated;\r\n    totalWasted = (totalWasted === 0) ? 1 : totalWasted;\r\n\r\n    totalSpent = (totalSpent === 0) ? 1 : totalSpent;\r\n    totalCasts = (totalCasts === 0) ? 1 : totalCasts;\r\n\r\n    return (\r\n      <div>\r\n        <table className=\"data-table\">\r\n          <thead>\r\n            <tr>\r\n              <th>Ability</th>\r\n              <th colSpan=\"2\"><TooltipElement content=\"Runes generated from passive regeneration and abilities that accelerate it are estimates.\">{resourceName} generated</TooltipElement></th>\r\n              <th colSpan=\"2\"><TooltipElement content=\"This is the amount of resources that were generated while you were already at cap.\">{resourceName} wasted</TooltipElement></th>\r\n            </tr>\r\n          </thead>\r\n          <tbody>\r\n            {generated && generated\r\n              .filter(ability => ability.abilityId === SPELLS.RUNE_1.id)\r\n              .map(ability => (\r\n                <tr key={ability.abilityId}>\r\n                  <td style={{ width: '30%' }}>\r\n                    <SpellIcon id={ability.abilityId} noLink />{' '}\r\n                    Passive Rune regeneration\r\n                  </td>\r\n                  <td style={{ width: 50, paddingRight: 5, textAlign: 'center' }}>\r\n                    <TooltipElement content={`${formatPercentage(ability.generated / totalGenerated)} %`}>{ability.generated}</TooltipElement>\r\n                  </td>\r\n                  <td style={{ width: '40%' }}>\r\n                    <div\r\n                      className=\"performance-bar\"\r\n                      style={{ width: `${(ability.generated / totalGenerated) * 100}%` }}\r\n                    />\r\n                  </td>\r\n                  <td style={{ width: 50, paddingRight: 5, textAlign: 'center' }}>\r\n                    <TooltipElement content={`${formatPercentage(ability.wasted / totalWasted)} %`}>{ability.wasted}</TooltipElement>\r\n                  </td>\r\n                  <td style={{ width: '30%' }}>\r\n                    <div\r\n                      className=\"performance-bar\"\r\n                      style={{ width: `${(ability.wasted / totalWasted) * 100}%` }}\r\n                    />\r\n                  </td>\r\n                </tr>\r\n              ))}\r\n            {generated && generated\r\n              .filter(ability => ability.abilityId !== SPELLS.RUNE_1.id)\r\n              .map(ability => (\r\n                <tr key={ability.abilityId}>\r\n                  <td style={{ width: '30%' }}>\r\n                    <SpellLink id={ability.abilityId} />\r\n                  </td>\r\n                  <td style={{ width: 50, paddingRight: 5, textAlign: 'center' }}>\r\n                    <TooltipElement content={`${formatPercentage(ability.generated / totalGenerated)} %`}>{ability.generated}</TooltipElement>\r\n                  </td>\r\n                  <td style={{ width: '40%' }}>\r\n                    <div\r\n                      className=\"performance-bar\"\r\n                      style={{ width: `${(ability.generated / totalGenerated) * 100}%` }}\r\n                    />\r\n                  </td>\r\n                  <td style={{ width: 50, paddingRight: 5, textAlign: 'center' }}>\r\n                    <TooltipElement content={`${formatPercentage(ability.wasted / totalWasted)} %`}>{ability.wasted}</TooltipElement>\r\n                  </td>\r\n                  <td style={{ width: '30%' }}>\r\n                    <div\r\n                      className=\"performance-bar\"\r\n                      style={{ width: `${(ability.wasted / totalWasted) * 100}%` }}\r\n                    />\r\n                  </td>\r\n                </tr>\r\n              ))}\r\n          </tbody>\r\n        </table>\r\n        {showSpenders && (\r\n          <table className=\"data-table\">\r\n            <thead>\r\n              <tr>\r\n                <th>Ability</th>\r\n                <th colSpan=\"2\">{resourceName} spent</th>\r\n                <th colSpan=\"2\">Casts</th>\r\n              </tr>\r\n            </thead>\r\n            <tbody>\r\n              {spent && spent\r\n                .map(ability => (\r\n                  <tr key={ability.abilityId}>\r\n                    <td style={{ width: '30%' }}>\r\n                      <SpellLink id={ability.abilityId} />\r\n                    </td>\r\n                    <td style={{ width: 50, paddingRight: 5, textAlign: 'center' }}>\r\n                      <TooltipElement content={`${formatPercentage(ability.spent / totalSpent)} %`}>{ability.spent}</TooltipElement>\r\n                    </td>\r\n                    <td style={{ width: '40%' }}>\r\n                      <div\r\n                        className=\"performance-bar\"\r\n                        style={{ width: `${(ability.spent / totalSpent) * 100}%` }}\r\n                      />\r\n                    </td>\r\n                    <td style={{ width: 50, paddingRight: 5, textAlign: 'center' }}>\r\n                      <TooltipElement content={`${formatPercentage(ability.casts / totalCasts)} %`}>{ability.casts}</TooltipElement>\r\n                    </td>\r\n                    <td style={{ width: '30%' }}>\r\n                      <div\r\n                        className=\"performance-bar\"\r\n                        style={{ width: `${(ability.casts / totalCasts) * 100}%` }}\r\n                      />\r\n                    </td>\r\n                  </tr>\r\n                ))}\r\n            </tbody>\r\n          </table>\r\n        )}\r\n      </div>\r\n    );\r\n  }\r\n}\r\n\r\nexport default RuneBreakdown;\r\n","import React from 'react';\r\nimport { AutoSizer } from 'react-virtualized';\r\n\r\nimport Analyzer from 'parser/core/Analyzer';\r\nimport Panel from 'interface/others/Panel';\r\nimport BaseChart, { formatTime } from 'interface/others/BaseChart';\r\n\r\nimport RuneBreakdown from './RuneBreakdown';\r\nimport RuneTracker from './RuneTracker';\r\n\r\n\r\nclass RuneDetails extends Analyzer {\r\n  static dependencies = {\r\n    runeTracker: RuneTracker,\r\n  };\r\n\r\n  tab() {\r\n    const data = this.runeTracker.runesReady;\r\n\r\n    const spec = {\r\n      data: {\r\n        name: 'runes',\r\n      },\r\n      mark: {\r\n        type: 'line',\r\n        color: 'rgb(196, 31, 59)',\r\n      },\r\n      encoding: {\r\n        x: {\r\n          field: 'x',\r\n          type: 'quantitative',\r\n          axis: {\r\n            labelExpr: formatTime('datum.value * 1000'),\r\n            grid: false,\r\n          },\r\n          title: null,\r\n        },\r\n        y: {\r\n          field: 'y',\r\n          type: 'quantitative',\r\n          title: '# of Runes',\r\n          axis: {\r\n            grid: false,\r\n            tickMinStep: 1,\r\n          },\r\n        },\r\n      },\r\n    };\r\n\r\n    return {\r\n      title: 'Rune usage',\r\n      url: 'rune-usage',\r\n      render: () => (\r\n        <Panel>\r\n          <AutoSizer disableHeight>\r\n            {({width}) => (\r\n              <BaseChart\r\n                width={width}\r\n                height={400}\r\n                spec={spec}\r\n                data={{ runes: data }}\r\n              />\r\n            )}\r\n          </AutoSizer>\r\n          <RuneBreakdown\r\n            tracker={this.runeTracker}\r\n            showSpenders\r\n          />\r\n        </Panel>\r\n      ),\r\n    };\r\n }\r\n\r\n}\r\n\r\nexport default RuneDetails;\r\n"],"sourceRoot":""}