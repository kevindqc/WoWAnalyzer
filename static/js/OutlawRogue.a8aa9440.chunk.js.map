{"version":3,"sources":["parser/rogue/outlaw/modules/Abilities.js","parser/rogue/outlaw/modules/features/AlwaysBeCasting.js","parser/rogue/outlaw/modules/Buffs.js","parser/rogue/outlaw/modules/core/OutlawComboPointTracker.js","parser/rogue/outlaw/modules/core/ComboPoints.js","parser/rogue/outlaw/modules/core/OutlawEnergyCapTracker.js","parser/rogue/outlaw/modules/core/Energy.js","parser/rogue/shared/resources/FinisherTracker.js","parser/rogue/outlaw/modules/features/Finishers.js","parser/rogue/outlaw/constants.js","parser/rogue/outlaw/modules/spells/RollTheBonesBuffs.js","parser/rogue/outlaw/modules/features/RollTheBonesCastTracker.js","parser/rogue/outlaw/modules/spells/RollTheBonesEfficiency.js","parser/rogue/outlaw/modules/spells/BetweenTheEyesDamageTracker.js","parser/rogue/outlaw/modules/spells/BetweenTheEyes.js","parser/rogue/outlaw/modules/spells/Dispatch.js","parser/rogue/outlaw/modules/spells/OpportunityDamageTracker.js","parser/rogue/outlaw/modules/spells/Opportunity.js","parser/rogue/outlaw/modules/features/Checklist/Component.js","parser/rogue/outlaw/modules/features/Checklist/Module.js","parser/rogue/outlaw/modules/spells/RollTheBonesCounter.js","parser/rogue/outlaw/modules/core/RestlessBlades.js","parser/rogue/outlaw/modules/spells/SliceAndDiceUptime.js","parser/rogue/outlaw/modules/talents/BladeRush.tsx","parser/rogue/outlaw/modules/spells/BladeFlurry.ts","parser/rogue/outlaw/modules/spells/shadowlands/legendaries/GuileCharm.tsx","parser/rogue/outlaw/modules/spells/shadowlands/legendaries/GreenskinsWickers.tsx","parser/rogue/outlaw/CombatLogParser.ts","interface/icons/Uptime.js","parser/shared/modules/features/Checklist/helpers/calculateMedian.js","parser/shared/modules/features/Checklist/helpers/average.js","parser/shared/modules/features/Checklist/helpers/harmonic.js","parser/shared/modules/features/Checklist/Rule.tsx","parser/shared/modules/features/Checklist/Requirement.tsx","parser/shared/modules/features/Checklist/helpers/performanceForThresholds.js","parser/shared/modules/features/Checklist/index.js","parser/shared/modules/features/Checklist/PreparationRule.js","parser/shared/modules/features/Checklist/GenericCastEfficiencyRequirement.js","common/colorForPerformance.ts","interface/statistics/components/DonutChart/index.js","interface/icons/Dropdown.js","interface/common/Expandable.tsx","parser/rogue/shared/casttracker/FilteredDamageTracker.ts"],"names":["Abilities","combatant","this","selectedCombatant","standardGcd","hasBuff","SPELLS","ADRENALINE_RUSH","id","spell","COMBO_POINT","AMBUSH","category","SPELL_CATEGORIES","ROTATIONAL","gcd","static","DISPATCH","ROLL_THE_BONES","SLICE_AND_DICE","SINISTER_STRIKE","MARKED_FOR_DEATH_TALENT","cooldown","castEfficiency","suggestion","enabled","hasTalent","GHOSTLY_STRIKE_TALENT","recommendedEfficiency","BETWEEN_THE_EYES","PISTOL_SHOT","BLADE_FLURRY","ROTATIONAL_AOE","DREADBLADES_TALENT","COOLDOWNS","extraSuggestion","BLADE_RUSH_TALENT","SpellLink","icon","KILLING_SPREE_TALENT","CLOAK_OF_SHADOWS","DEFENSIVE","CRIMSON_VIAL","base","FEINT","buffSpellId","RIPOSTE","PICK_LOCK","OTHERS","PICK_POCKET","VANISH","UTILITY","CHEAP_SHOT","PREY_ON_THE_WEAK_TALENT","importance","ISSUE_IMPORTANCE","MINOR","GRAPPLING_HOOK","RETRACTABLE_HOOK_TALENT","SPRINT","TRICKS_OF_THE_TRADE","STEALTH","KICK","BLIND","BLINDING_POWDER_TALENT","DISTRACT","GOUGE","SHROUD_OF_CONCEALMENT","SAP","SERRATED_BONE_SPIKE","hasCovenant","COVENANTS","NECROLORD","charges","SEPSIS","NIGHT_FAE","ECHOING_REPRIMAND","KYRIAN","FLAGELLATION","VENTHYR","CoreAbilities","AlwaysBeCasting","actual","downtimePercentage","isGreaterThan","minor","average","major","style","CoreAlwaysBeCasting","Buffs","spellId","timelineHighlight","OPPORTUNITY","ALACRITY_TALENT","RUTHLESS_PRECISION","GRAND_MELEE","BROADSIDE","SKULL_AND_CROSSBONES","BURIED_TREASURE","TRUE_BEARING","Object","keys","BLOODLUST_BUFFS","map","item","Number","CoreBuffs","OutlawComboPointTracker","options","addEventListener","Events","damage","by","SELECTED_PLAYER","onDamage","event","ability","guid","SINISTER_STRIKE_PROC","amount","processInvisibleEnergize","ComboPointTracker","ComboPoints","when","resourceSuggest","comboPointTracker","avg","makeExtraSuggestion","Analyzer","dependencies","OutlawEnergyCapTracker","regenRate","combatantHasBuffActive","regen","max","Math","floor","EnergyCapTracker","buffsChangeMax","buffsChangeRegen","Energy","energyTracker","COMBAT_POTENCY","BLADE_RUSH_TALENT_BUFF","EnergyTracker","FinisherTracker","inefficientFinisherCount","SpendResource","onSpendResource","maxResource","spendersCasts","totalFinisherCount","finisherInefficiency","maximumComboPoints","EVISCERATE","spent","resourceChange","resourceChangeType","RESOURCE_TYPES","COMBO_POINTS","recommendedFinisherPoints","suggestionThresholds","addSuggestion","suggest","recommended","Fragment","suggestionIcon","i18n","_","formatPercentage","Finishers","points","QUICK_DRAW_TALENT","quickDrawSuggestionText","ROLL_THE_BONES_BUFFS","RollTheBonesBuffs","spellid","getBuffUptime","owner","fightDuration","StatisticBox","position","STATISTIC_ORDER","CORE","SpellIcon","value","Uptime","totalPercentUptime","label","className","e","key","percentUptime","isLessThan","ROLL_THE_BONES_CATEGORIES","LOW_VALUE","MID_VALUE","HIGH_VALUE","RollTheBonesCastTracker","args","rolltheBonesCastEvents","rolltheBonesCastValues","values","reduce","cast","processCast","length","appliedBuffs","some","buff","timestampEnd","duration","timestamp","classResources","refresh","lastCast","filter","b","energyCapTracker","min","castRemainingDuration","newCast","isRefresh","push","categorizeCast","RollTheBonesEfficiency","active","onCast","delayedRolls","rollTheBonesCastTracker","RTBIsDelayed","rtbCastValues","pass","goodLowValueRolls","total","rollSuggestionThreshold","goodMidValueRolls","goodHighValueRolls","rollSuggestions","forEach","BetweenTheEyesDamageTracker","spellUsable","isOnCooldown","FilteredDamageTracker","SpellUsable","BetweenTheEyes","thresholds","damageTracker","getAbility","filtered","betweenTheEyesDamageTracker","casts","DamageTracker","Dispatch","subscribeInefficientCast","s","delayedCastSuggestion","OpportunityDamageTracker","Opportunity","opportunityDamageTracker","OutlawRogueChecklist","AbilityRequirement","props","GenericCastEfficiencyRequirement","getCastEfficiencyForSpellId","Rule","name","description","Requirement","rollTheBonesBuffs","rollTheBonesEfficiency","finishers","dispatch","betweenTheEyes","opportunity","energyEfficiency","comboPointEfficiency","energyCapEfficiency","PreparationRule","Checklist","Component","combatants","selected","preparationRuleAnalyzer","energyDetails","comboPointDetails","BaseChecklist","Combatants","CastEfficiency","PreparationRuleAnalyzer","EnergyDetails","ComboPointDetails","RollTheBonesCounter","distributionObj","buffCount","items","color","DonutChart","Statistic","OPTIONAL","tooltip","rolltheBonesBuffDistributionChart","AFFECTED_ABILITIES","RestlessBlades","cdr","reduceCooldown","SliceAndDiceUptime","size","BladeRush","abilities","KIDNEY_SHOT","onFinishMove","cpCost","getResource","cost","cooldownRemaining","cooldownReduction","endCooldown","BladeFlurry","GuileCharm","deepInsightUptime","moderateInsightUptime","shallowInsightUptime","hasLegendaryByBonusID","GUILE_CHARM","bonusID","BoringSpellValueText","SHALLOW_INSIGHT_BUFF","shallowInsight","MODERATE_INSIGHT_BUFF","moderateInsight","DEEP_INSIGHT_BUFF","deepInsight","GreenskinsWickers","greenskinProcs","GREENSKINS_WICKERS","applybuff","GREENSKINS_WICKERS_BUFF","onGreenskinBuff","CombatLogParser","CoreCombatLogParser","specModules","alwaysBeCasting","buffs","checklist","comboPoints","energy","spellEnergyCost","SpellEnergyCost","restlessBlades","guileCharm","greenskinsWickers","essenceOfBloodfang","EssenceOfBloodfang","invigoratingShadowdust","InvigoratingShadowdust","rollTheBonesCounter","sliceAndDiceUptime","bladeFlurry","bladeRush","serratedBoneSpike","SerratedBoneSpike","echoingReprimand","EchoingReprimand","flagellation","Flagellation","sepsis","Sepsis","arcaneTorrent","ArcaneTorrent","Icon","other","xmlns","viewBox","d","calculateMedian","arr","sort","a","half","c","p","harmonic","cum","val","PERFORMANCE_METHOD","RuleContext","React","createContext","useState","requirementPerformances","performance","passed","expanded","state","setState","calculateRulePerformance","useCallback","DEFAULT","MEDIAN","AVERAGE","LOWEST","FIRST","HARMONIC","Error","requirements","children","Array","isArray","child","isValidElement","Provider","prevState","performanceMethod","element","inverseExpanded","header","width","backgroundColor","colorForPerformance","Dropdown","Information","setPerformance","ThresholdStyle","PERCENTAGE","NUMBER","formatNumber","THOUSANDS","formatThousands","DECIMAL","toFixed","BOOLEAN","SECONDS","valueTooltip","prefix","suffix","undefined","thresholdsN","formatThresholdsActual","marginLeft","Tooltip","content","minWidth","marginRight","transition","performanceForGreaterThanThresholds","performanceForLessThanThresholds","isEqual","performanceForThresholds","PureComponent","Consumer","href","potionsUsed","bestPotionUsed","itemsEnchanted","itemsBestEnchanted","weaponsEnhanced","bestWeaponEnhancements","higherFlaskPresent","flaskPresent","higherFoodPresent","foodPresent","renderEnchantRequirements","renderWeaponEnhancementRequirements","renderPotionRequirements","renderFlaskRequirements","renderFoodRequirements","others","captureException","isMaxCasts","maxCasts","efficiency","gotMaxCasts","averageIssueEfficiency","majorIssueEfficiency","sum","index","background","chartSize","innerRadiusFactor","data","spec","mark","type","innerRadius","encoding","theta","field","legend","scale","domain","range","view","stroke","height","renderLegend","renderChart","defaultProps","Expandable","setExpanded","Element","onClick","prevExpanded","ControlledExpandable","castObservers","shouldProcessEvent","broadcastCastEvent","fn","spells","messageFunction","subscribeToCastEvent","find","meta","isInefficientCast","inefficientCastReason","subscriber"],"mappings":"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","file":"static/js/OutlawRogue.a8aa9440.chunk.js","sourcesContent":["import React from 'react';\r\n\r\nimport SPELLS from 'common/SPELLS';\r\nimport SpellLink from 'common/SpellLink';\r\nimport CoreAbilities from 'parser/core/modules/Abilities';\r\nimport ISSUE_IMPORTANCE from 'parser/core/ISSUE_IMPORTANCE';\r\nimport COVENANTS from 'game/shadowlands/COVENANTS';\r\n\r\nclass Abilities extends CoreAbilities {\r\n  spellbook() {\r\n    const combatant = this.selectedCombatant;\r\n\r\n    const standardGcd = combatant => 1000 * (1 - (combatant.hasBuff(SPELLS.ADRENALINE_RUSH.id) ? 0.2 : 0));\r\n\r\n    return [\r\n      // // Base class resource\r\n      {\r\n        spell: SPELLS.COMBO_POINT,\r\n      },\r\n      // Rotational\r\n      {\r\n        spell: SPELLS.AMBUSH,\r\n        category: Abilities.SPELL_CATEGORIES.ROTATIONAL,\r\n        gcd: {\r\n          static: standardGcd,\r\n        },\r\n      },\r\n      {\r\n        spell: SPELLS.DISPATCH,\r\n        category: Abilities.SPELL_CATEGORIES.ROTATIONAL,\r\n        gcd: {\r\n          static: standardGcd,\r\n        },\r\n      },\r\n      {\r\n        spell: SPELLS.ROLL_THE_BONES,\r\n        category: Abilities.SPELL_CATEGORIES.ROTATIONAL,\r\n        gcd: {\r\n          static: standardGcd,\r\n        },\r\n      },\r\n      {\r\n        spell: SPELLS.SLICE_AND_DICE,\r\n        category: Abilities.SPELL_CATEGORIES.ROTATIONAL,\r\n        gcd: {\r\n          static: standardGcd,\r\n        },\r\n      },\r\n      {\r\n        spell: SPELLS.SINISTER_STRIKE,\r\n        category: Abilities.SPELL_CATEGORIES.ROTATIONAL,\r\n        gcd: {\r\n          static: standardGcd,\r\n        },\r\n      },\r\n      {\r\n        spell: SPELLS.MARKED_FOR_DEATH_TALENT,\r\n        category: Abilities.SPELL_CATEGORIES.ROTATIONAL,\r\n        cooldown: 60,\r\n        gcd: null,\r\n        castEfficiency: {\r\n          suggestion: true,\r\n        },\r\n        enabled: combatant.hasTalent(SPELLS.MARKED_FOR_DEATH_TALENT.id),\r\n      },\r\n      {\r\n        spell: SPELLS.GHOSTLY_STRIKE_TALENT,\r\n        category: Abilities.SPELL_CATEGORIES.ROTATIONAL,\r\n        cooldown: 35,\r\n        gcd: {\r\n          static: standardGcd,\r\n        },\r\n        castEfficiency: {\r\n          suggestion: true,\r\n          recommendedEfficiency: 0.95,\r\n        },\r\n        enabled: combatant.hasTalent(SPELLS.GHOSTLY_STRIKE_TALENT.id),\r\n      },\r\n      {\r\n        spell: SPELLS.BETWEEN_THE_EYES,\r\n        category: Abilities.SPELL_CATEGORIES.ROTATIONAL,\r\n        cooldown: 30,\r\n        gcd: {\r\n          static: standardGcd,\r\n        },\r\n      },\r\n      {\r\n        spell: SPELLS.PISTOL_SHOT,\r\n        category: Abilities.SPELL_CATEGORIES.ROTATIONAL,\r\n        gcd: {\r\n          static: standardGcd,\r\n        },\r\n      },\r\n      // Rotational (AOE)\r\n      {\r\n        spell: SPELLS.BLADE_FLURRY,\r\n        category: Abilities.SPELL_CATEGORIES.ROTATIONAL_AOE,\r\n        cooldown: 30,\r\n        gcd: {\r\n          static: standardGcd,\r\n        },\r\n      },\r\n      // Cooldowns\r\n      {\r\n        spell: SPELLS.DREADBLADES_TALENT,\r\n        category: Abilities.SPELL_CATEGORIES.COOLDOWNS,\r\n        cooldown: 90,\r\n        gcd: {\r\n          static: standardGcd,\r\n        },\r\n        castEfficiency: {\r\n          suggestion: true,\r\n          recommendedEfficiency: 0.9,\r\n          extraSuggestion: `Using Dreadblades on cooldown is very important and should only be delayed when you know you won't be able to attack for the majority of it's duration.`,\r\n        },\r\n      },\r\n      {\r\n        spell: SPELLS.ADRENALINE_RUSH,\r\n        category: Abilities.SPELL_CATEGORIES.COOLDOWNS,\r\n        cooldown: 180,\r\n        castEfficiency: {\r\n          suggestion: true,\r\n          recommendedEfficiency: 0.9,\r\n          extraSuggestion: `Using Adrenaline Rush on cooldown is very important and should only be delayed when you know you won't be able to attack for the majority of it's duration.`,\r\n        },\r\n      },\r\n      {\r\n        spell: SPELLS.BLADE_RUSH_TALENT,\r\n        category: Abilities.SPELL_CATEGORIES.COOLDOWNS,\r\n        cooldown: 45,\r\n        gcd: {\r\n          static: standardGcd,\r\n        },\r\n        castEfficiency: {\r\n          suggestion: true,\r\n          extraSuggestion: <>You should delay using it to line it up with <SpellLink id={SPELLS.BLADE_FLURRY.id} icon /> in AoE scenarios.</>,\r\n        },\r\n        enabled: combatant.hasTalent(SPELLS.BLADE_RUSH_TALENT.id),\r\n      },\r\n      {\r\n        spell: SPELLS.KILLING_SPREE_TALENT,\r\n        category: Abilities.SPELL_CATEGORIES.COOLDOWNS,\r\n        cooldown: 120,\r\n        gcd: {\r\n          static: standardGcd,\r\n        },\r\n        castEfficiency: {\r\n          suggestion: true,\r\n          extraSuggestion: <>You should delay using it to line it up with <SpellLink id={SPELLS.BLADE_FLURRY.id} icon /> in AoE scenarios.</>,\r\n        },\r\n        enabled: combatant.hasTalent(SPELLS.KILLING_SPREE_TALENT.id),\r\n      },\r\n      // Defensive\r\n      {\r\n        spell: SPELLS.CLOAK_OF_SHADOWS,\r\n        category: Abilities.SPELL_CATEGORIES.DEFENSIVE,\r\n        cooldown: 120,\r\n        gcd: null,\r\n      },\r\n      {\r\n        spell: SPELLS.CRIMSON_VIAL,\r\n        category: Abilities.SPELL_CATEGORIES.DEFENSIVE,\r\n        cooldown: 30,\r\n        gcd: {\r\n          base: 1000, // Adrenaline Rush doesn't decrease this, but Haste does\r\n        },\r\n      },\r\n      {\r\n        spell: SPELLS.FEINT,\r\n        category: Abilities.SPELL_CATEGORIES.DEFENSIVE,\r\n        buffSpellId: SPELLS.FEINT.id,\r\n        cooldown: 15,\r\n        gcd: {\r\n          static: standardGcd,\r\n        },\r\n      },\r\n      {\r\n        spell: SPELLS.RIPOSTE,\r\n        category: Abilities.SPELL_CATEGORIES.DEFENSIVE,\r\n        buffSpellId: SPELLS.RIPOSTE.id,\r\n        cooldown: 120,\r\n        gcd: null,\r\n      },\r\n      // Others\r\n      {\r\n        spell: SPELLS.PICK_LOCK,\r\n        category: Abilities.SPELL_CATEGORIES.OTHERS,\r\n      },\r\n      {\r\n        spell: SPELLS.PICK_POCKET,\r\n        category: Abilities.SPELL_CATEGORIES.OTHERS,\r\n        // While this actually has a 0.5s CD, it shows up weird in the Abilities tab if we set that\r\n      },\r\n      // Utility\r\n      {\r\n        spell: SPELLS.VANISH,\r\n        category: Abilities.SPELL_CATEGORIES.UTILITY,\r\n        cooldown: 120,\r\n        gcd: null,\r\n        castEfficiency: {\r\n          suggestion: true,\r\n          extraSuggestion: <>In most fights this can be used on cooldown for an <SpellLink id={SPELLS.AMBUSH.id} icon />, but it's perfectly fine to save this for a <SpellLink id={SPELLS.CHEAP_SHOT.id} icon /> on adds, especially when talented for <SpellLink id={SPELLS.PREY_ON_THE_WEAK_TALENT.id} icon />.</>,\r\n          importance: ISSUE_IMPORTANCE.MINOR,\r\n        },\r\n      },\r\n      {\r\n        spell: SPELLS.GRAPPLING_HOOK,\r\n        category: Abilities.SPELL_CATEGORIES.UTILITY,\r\n        cooldown: 60 - (combatant.hasTalent(SPELLS.RETRACTABLE_HOOK_TALENT.id) ? 30 : 0),\r\n        gcd: null,\r\n      },\r\n      {\r\n        spell: SPELLS.SPRINT,\r\n        category: Abilities.SPELL_CATEGORIES.UTILITY,\r\n        cooldown: 60,\r\n        gcd: null,\r\n      },\r\n      {\r\n        spell: SPELLS.TRICKS_OF_THE_TRADE,\r\n        category: Abilities.SPELL_CATEGORIES.UTILITY,\r\n        cooldown: 30,\r\n        gcd: null,\r\n      },\r\n      {\r\n        spell: SPELLS.STEALTH,\r\n        category: Abilities.SPELL_CATEGORIES.UTILITY,\r\n        cooldown: 2,\r\n        gcd: null,\r\n      },\r\n      {\r\n        spell: SPELLS.KICK,\r\n        category: Abilities.SPELL_CATEGORIES.UTILITY,\r\n        cooldown: 15,\r\n        gcd: null,\r\n      },\r\n      {\r\n        spell: SPELLS.BLIND,\r\n        category: Abilities.SPELL_CATEGORIES.UTILITY,\r\n        cooldown: 120 - (combatant.hasTalent(SPELLS.BLINDING_POWDER_TALENT.id) ? 30 : 0),\r\n        gcd: {\r\n          static: standardGcd,\r\n        },\r\n      },\r\n      {\r\n        spell: SPELLS.CHEAP_SHOT,\r\n        category: Abilities.SPELL_CATEGORIES.UTILITY,\r\n        gcd: {\r\n          static: standardGcd,\r\n        },\r\n      },\r\n      {\r\n        spell: SPELLS.DISTRACT,\r\n        category: Abilities.SPELL_CATEGORIES.UTILITY,\r\n        cooldown: 30,\r\n        gcd: {\r\n          static: standardGcd,\r\n        },\r\n      },\r\n      {\r\n        spell: SPELLS.GOUGE,\r\n        category: Abilities.SPELL_CATEGORIES.UTILITY,\r\n        cooldown: 15,\r\n        gcd: {\r\n          static: standardGcd,\r\n        },\r\n      },\r\n      {\r\n        spell: SPELLS.SHROUD_OF_CONCEALMENT,\r\n        category: Abilities.SPELL_CATEGORIES.UTILITY,\r\n        cooldown: 6 * 60,\r\n        gcd: {\r\n          base: 1000,\r\n        },\r\n      },\r\n      {\r\n        spell: SPELLS.SAP,\r\n        category: Abilities.SPELL_CATEGORIES.UTILITY,\r\n      },\r\n      // Covenant Abilities\r\n      {\r\n        spell: SPELLS.SERRATED_BONE_SPIKE,\r\n        category: Abilities.SPELL_CATEGORIES.ROTATIONAL,\r\n        enabled: combatant.hasCovenant(COVENANTS.NECROLORD.id),\r\n        charges: 3,\r\n        cooldown: 30,\r\n        gcd: {\r\n          static: standardGcd,\r\n        },\r\n      },\r\n      {\r\n        spell: SPELLS.SEPSIS,\r\n        category: Abilities.SPELL_CATEGORIES.ROTATIONAL,\r\n        enabled: combatant.hasCovenant(COVENANTS.NIGHT_FAE.id),\r\n        gcd: {\r\n          static: standardGcd,\r\n        },\r\n      },\r\n      {\r\n        spell: SPELLS.ECHOING_REPRIMAND,\r\n        category: Abilities.SPELL_CATEGORIES.ROTATIONAL,\r\n        enabled: combatant.hasCovenant(COVENANTS.KYRIAN.id),\r\n        gcd: {\r\n          static: standardGcd,\r\n        },\r\n      },\r\n      {\r\n        spell: SPELLS.FLAGELLATION,\r\n        category: Abilities.SPELL_CATEGORIES.ROTATIONAL,\r\n        enabled: combatant.hasCovenant(COVENANTS.VENTHYR.id),\r\n        gcd: {\r\n          static: standardGcd,\r\n        },\r\n      },\r\n    ];\r\n  }\r\n}\r\n\r\nexport default Abilities;\r\n","import CoreAlwaysBeCasting from 'parser/shared/modules/AlwaysBeCasting';\r\n\r\nclass AlwaysBeCasting extends CoreAlwaysBeCasting {\r\n  get downtimeSuggestionThresholds() {\r\n    //TODO Varied for SnD and RtB?\r\n    return {\r\n      actual: this.downtimePercentage,\r\n      isGreaterThan: {\r\n        minor: 0.2,\r\n        average: 0.25,\r\n        major: 0.3,\r\n      },\r\n      style: 'percentage',\r\n    };\r\n  }\r\n}\r\n\r\nexport default AlwaysBeCasting;\r\n","import SPELLS from 'common/SPELLS';\r\nimport CoreBuffs from 'parser/core/modules/Buffs';\r\nimport BLOODLUST_BUFFS from 'game/BLOODLUST_BUFFS';\r\n\r\nclass Buffs extends CoreBuffs {\r\n  buffs() {\r\n    // This should include ALL buffs that can be applied by your spec.\r\n    // This data can be used by various kinds of modules to improve their results, and modules added in the future may rely on buffs that aren't used today.\r\n    return [\r\n      // Core\r\n      {\r\n        spellId: SPELLS.ADRENALINE_RUSH.id,\r\n        timelineHighlight: true,\r\n      },\r\n      {\r\n        spellId: SPELLS.BLADE_RUSH_TALENT.id,\r\n      },\r\n      {\r\n        spellId: SPELLS.OPPORTUNITY.id,\r\n        timelineHighlight: true,\r\n      },\r\n\r\n      // Talents\r\n      {\r\n        spellId: SPELLS.ALACRITY_TALENT.id,\r\n      },\r\n\r\n      // Roll the Bones\r\n      {\r\n        spellId: SPELLS.ROLL_THE_BONES.id,\r\n        timelineHighlight: true,\r\n      },\r\n      {\r\n        spellId: SPELLS.RUTHLESS_PRECISION.id,\r\n      },\r\n      {\r\n        spellId: SPELLS.GRAND_MELEE.id,\r\n      },\r\n      {\r\n        spellId: SPELLS.BROADSIDE.id,\r\n      },\r\n      {\r\n        spellId: SPELLS.SKULL_AND_CROSSBONES.id,\r\n      },\r\n      {\r\n        spellId: SPELLS.BURIED_TREASURE.id,\r\n      },\r\n      {\r\n        spellId: SPELLS.TRUE_BEARING.id,\r\n      },\r\n\r\n      // Misc\r\n      {\r\n        spellId: SPELLS.CLOAK_OF_SHADOWS.id,\r\n      },\r\n      {\r\n        spellId: SPELLS.CRIMSON_VIAL.id,\r\n      },\r\n      {\r\n        spellId: SPELLS.FEINT.id,\r\n      },\r\n      {\r\n        spellId: SPELLS.RIPOSTE.id,\r\n      },\r\n      {\r\n        spellId: SPELLS.SPRINT.id,\r\n      },\r\n      {\r\n        spellId: SPELLS.SHROUD_OF_CONCEALMENT.id,\r\n      },\r\n\r\n      // Bloodlust Buffs\r\n      {\r\n        spellId: Object.keys(BLOODLUST_BUFFS).map(item => Number(item)),\r\n        timelineHighlight: true,\r\n      },\r\n    ];\r\n  }\r\n}\r\n\r\nexport default Buffs;\r\n","import SPELLS from 'common/SPELLS';\r\n\r\nimport Events from 'parser/core/Events';\r\nimport { SELECTED_PLAYER } from 'parser/core/Analyzer';\r\n\r\nimport ComboPointTracker from '../../../shared/resources/ComboPointTracker';\r\n\r\nclass OutlawComboPointTracker extends ComboPointTracker {\r\n  constructor(options) {\r\n    super(options);\r\n    this.addEventListener(Events.damage.by(SELECTED_PLAYER), this.onDamage);\r\n  }\r\n\r\n  onDamage(event) {\r\n    const spellId = event.ability.guid;\r\n\r\n    // Bonus hits from Sinister Strike are not included in the energize event, so add them in here\r\n    if (spellId === SPELLS.SINISTER_STRIKE_PROC.id) {\r\n      let amount = 1;\r\n\r\n      if (this.selectedCombatant.hasBuff(SPELLS.BROADSIDE.id)) {\r\n        amount = 2;\r\n      }\r\n\r\n      this.processInvisibleEnergize(SPELLS.SINISTER_STRIKE.id, amount);\r\n    }\r\n  }\r\n}\r\n\r\nexport default OutlawComboPointTracker;\r\n","import React from 'react';\r\n\r\nimport Analyzer from 'parser/core/Analyzer';\r\nimport SPELLS from 'common/SPELLS';\r\nimport SpellLink from 'common/SpellLink';\r\nimport resourceSuggest from 'parser/shared/modules/resources/resourcetracker/ResourceSuggest';\r\n\r\nimport ComboPointTracker from '../../../shared/resources/ComboPointTracker';\r\n\r\nclass ComboPoints extends Analyzer {\r\n  static dependencies = {\r\n    comboPointTracker: ComboPointTracker,\r\n  };\r\n\r\n  makeExtraSuggestion(spell) {\r\n    return <>Avoid wasting combo points when casting <SpellLink id={spell.id} />.</>;\r\n  }\r\n\r\n  suggestions(when) {\r\n    resourceSuggest(when, this.comboPointTracker, {\r\n      spell: SPELLS.MARKED_FOR_DEATH_TALENT, // 5 CP\r\n      minor: 0.2, // MFD is typically guaranteed to waste 1 CP (20%) because of the Ruthlessness passive refunding CP from the previous finisher.\r\n      avg: 0.4, // Using MFD at 2 CP is not recommended but not a huge problem.\r\n      major: 0.6,\r\n      extraSuggestion: this.makeExtraSuggestion(SPELLS.MARKED_FOR_DEATH_TALENT),\r\n    });\r\n    resourceSuggest(when, this.comboPointTracker, {\r\n      spell: SPELLS.SINISTER_STRIKE, // 1 CP + 35% chance for another\r\n      minor: 0.05, // Due to the 35% chance to double hit, especially with the Broadside RTB buff, you are bound to burn some CP\r\n      avg: 0.1,\r\n      major: 0.15,\r\n      extraSuggestion: this.makeExtraSuggestion(SPELLS.SINISTER_STRIKE),\r\n    });\r\n    resourceSuggest(when, this.comboPointTracker, {\r\n      spell: SPELLS.AMBUSH, // 2 CP\r\n      minor: 0,\r\n      avg: 0.1,\r\n      major: 0.2,\r\n      extraSuggestion: this.makeExtraSuggestion(SPELLS.AMBUSH),\r\n    });\r\n    resourceSuggest(when, this.comboPointTracker, {\r\n      spell: SPELLS.PISTOL_SHOT, // 1 CP, 2 with proc and Quick Draw\r\n      minor: 0,\r\n      avg: 0.05,\r\n      major: 0.1,\r\n      extraSuggestion: this.makeExtraSuggestion(SPELLS.PISTOL_SHOT),\r\n    });\r\n    resourceSuggest(when, this.comboPointTracker, {\r\n      spell: SPELLS.GHOSTLY_STRIKE_TALENT, // 1 CP\r\n      minor: 0,\r\n      avg: 0.05,\r\n      major: 0.1,\r\n      extraSuggestion: this.makeExtraSuggestion(SPELLS.GHOSTLY_STRIKE_TALENT),\r\n    });\r\n    resourceSuggest(when, this.comboPointTracker, {\r\n      spell: SPELLS.CHEAP_SHOT, // 2 CP\r\n      minor: 0,\r\n      avg: 0.1,\r\n      major: 0.2,\r\n      extraSuggestion: this.makeExtraSuggestion(SPELLS.CHEAP_SHOT),\r\n    });\r\n    resourceSuggest(when, this.comboPointTracker, {\r\n      spell: SPELLS.GOUGE, // 1 CP\r\n      minor: 0,\r\n      avg: 0.1,\r\n      major: 0.2,\r\n      extraSuggestion: this.makeExtraSuggestion(SPELLS.GOUGE),\r\n    });\r\n  }\r\n}\r\n\r\nexport default ComboPoints;\r\n","import SPELLS from 'common/SPELLS';\r\n\r\nimport EnergyCapTracker from '../../../shared/resources/EnergyCapTracker';\r\n\r\nconst BASE_ENERGY_REGEN = 10;\r\nconst BURIED_TREASURE_REGEN = 4;\r\nconst ADRENALINE_RUSH_REGEN_MULTIPLIER = 1.6;\r\n\r\nconst ADRENALINE_RUSH_MAX_ADDITION = 50;\r\n\r\nclass OutlawEnergyCapTracker extends EnergyCapTracker {\r\n  static buffsChangeMax = [\r\n    SPELLS.ADRENALINE_RUSH.id,\r\n  ];\r\n  static buffsChangeRegen = [\r\n    SPELLS.ADRENALINE_RUSH.id,\r\n    SPELLS.BURIED_TREASURE.id,\r\n  ];\r\n\r\n  getBaseRegenRate() {\r\n    let regenRate = BASE_ENERGY_REGEN;\r\n    if (this.combatantHasBuffActive(SPELLS.BURIED_TREASURE.id)) {\r\n      // Buried Treasure buff adds 4 energy per second, before any multipliers\r\n      regenRate += BURIED_TREASURE_REGEN;\r\n    }\r\n\r\n    return regenRate;\r\n  }\r\n\r\n  naturalRegenRate() {\r\n    let regen = super.naturalRegenRate();\r\n\r\n    if (this.combatantHasBuffActive(SPELLS.ADRENALINE_RUSH.id)) {\r\n      regen *= ADRENALINE_RUSH_REGEN_MULTIPLIER;\r\n    }\r\n\r\n    return regen;\r\n  }\r\n\r\n  currentMaxResource() {\r\n    let max = super.currentMaxResource();\r\n    if (this.combatantHasBuffActive(SPELLS.ADRENALINE_RUSH.id)) {\r\n      max += ADRENALINE_RUSH_MAX_ADDITION;\r\n    }\r\n\r\n    // What should be x.5 becomes x in-game.\r\n    return Math.floor(max);\r\n  }\r\n}\r\n\r\nexport default OutlawEnergyCapTracker;\r\n","import React from 'react';\r\n\r\nimport Analyzer from 'parser/core/Analyzer';\r\nimport SPELLS from 'common/SPELLS';\r\nimport SpellLink from 'common/SpellLink';\r\nimport resourceSuggest from 'parser/shared/modules/resources/resourcetracker/ResourceSuggest';\r\n\r\nimport EnergyTracker from '../../../shared/resources/EnergyTracker';\r\n\r\nclass Energy extends Analyzer {\r\n  static dependencies = {\r\n    energyTracker: EnergyTracker,\r\n  };\r\n\r\n  suggestions(when) {\r\n    resourceSuggest(when, this.energyTracker, {\r\n      spell: SPELLS.COMBAT_POTENCY,\r\n      minor: 0.05,\r\n      avg: 0.1,\r\n      major: 0.15,\r\n      extraSuggestion: <>Try to keep energy below max to avoid waisting <SpellLink id={SPELLS.COMBAT_POTENCY.id} /> procs.</>,\r\n    });\r\n\r\n    if (this.selectedCombatant.hasTalent(SPELLS.BLADE_RUSH_TALENT.id)) {\r\n      resourceSuggest(when, this.energyTracker, {\r\n        spell: SPELLS.BLADE_RUSH_TALENT_BUFF,\r\n        minor: 0.05,\r\n        avg: 0.1,\r\n        major: 0.15,\r\n        extraSuggestion: <>Try to keep energy below max to avoid waisting <SpellLink id={SPELLS.BLADE_RUSH_TALENT.id} /> gains.</>,\r\n      });\r\n    }\r\n  }\r\n}\r\n\r\nexport default Energy;\r\n","import React from 'react';\r\n\r\nimport SPELLS from 'common/SPELLS';\r\nimport { formatPercentage } from 'common/format';\r\nimport RESOURCE_TYPES from 'game/RESOURCE_TYPES';\r\nimport Analyzer, { SELECTED_PLAYER } from 'parser/core/Analyzer';\r\nimport { i18n } from '@lingui/core';\r\nimport { t } from '@lingui/macro';\r\n\r\nimport Events from 'parser/core/Events';\r\n\r\nimport ComboPointTracker from './ComboPointTracker';\r\n\r\nconst MINOR_THRESHOLD = 0.05;\r\nconst AVERAGE_THRESHOLD = 0.1;\r\nconst MAJOR_THRESHOLD = 0.2;\r\n\r\nclass FinisherTracker extends Analyzer {\r\n  get maximumComboPoints() {\r\n    return this.comboPointTracker.maxResource;\r\n  }\r\n\r\n  get totalFinisherCount() {\r\n    return this.comboPointTracker.spendersCasts;\r\n  }\r\n\r\n  get finisherInefficiency() {\r\n    return this.inefficientFinisherCount / this.totalFinisherCount;\r\n  }\r\n\r\n  get suggestionThresholds() {\r\n    return {\r\n      actual: this.finisherInefficiency,\r\n      isGreaterThan: {\r\n        minor: MINOR_THRESHOLD,\r\n        average: AVERAGE_THRESHOLD,\r\n        major: MAJOR_THRESHOLD,\r\n      },\r\n      style: 'percentage',\r\n    };\r\n  }\r\n\r\n  static dependencies = {\r\n    comboPointTracker: ComboPointTracker,\r\n  };\r\n  inefficientFinisherCount = 0;\r\n\r\n  constructor(options) {\r\n    super(options);\r\n    this.addEventListener(Events.SpendResource.by(SELECTED_PLAYER), this.onSpendResource);\r\n  }\r\n\r\n  /**\r\n   * IMPLEMENTME\r\n   * This is where logic is implemented for deciding how many combo points should be used for finishers.\r\n   * @returns {number}  The minimum number of combo points for finishers; CP spends less than this number are considered inefficient.\r\n   */\r\n  recommendedFinisherPoints() {\r\n    const points = this.maximumComboPoints;\r\n    return points;\r\n  }\r\n\r\n  /**\r\n   * IMPLEMENTME\r\n   * Return spec specific suggestion text or JSX node here.\r\n   */\r\n  extraSuggestion() {\r\n    return '';\r\n  }\r\n\r\n  /**\r\n   * IMPLEMENTME\r\n   * This can be overridden to change the suggestion icon to be something relevant to the spec.\r\n   */\r\n  suggestionIcon() {\r\n    return SPELLS.EVISCERATE.icon;\r\n  }\r\n\r\n  onSpendResource(event) {\r\n    const spent = event.resourceChange;\r\n    if (event.resourceChangeType !== RESOURCE_TYPES.COMBO_POINTS.id) {\r\n      return;\r\n    }\r\n\r\n    if (spent < this.recommendedFinisherPoints()) {\r\n      this.inefficientFinisherCount += 1;\r\n    }\r\n  }\r\n\r\n  suggestions(when) {\r\n    when(this.suggestionThresholds).addSuggestion((suggest, actual, recommended) => suggest(<React.Fragment>Try to use your finishers at {this.maximumComboPoints} combo points. {this.extraSuggestion()}</React.Fragment>)\r\n      .icon(this.suggestionIcon())\r\n      .actual(i18n._(t('rogue.shared.suggestions.finishers.efficiency')`${formatPercentage(actual)}% (${this.inefficientFinisherCount} out of ${this.totalFinisherCount}) inefficient casts`))\r\n      .recommended(`<${formatPercentage(recommended)}% is recommended`));\r\n  }\r\n}\r\n\r\nexport default FinisherTracker;\r\n","import React from 'react';\r\n\r\nimport SPELLS from 'common/SPELLS';\r\nimport SpellLink from 'common/SpellLink';\r\n\r\nimport FinisherTracker from '../../../shared/resources/FinisherTracker';\r\n\r\nclass Finishers extends FinisherTracker {\r\n\r\n  get quickDrawSuggestionText() {\r\n    if (this.selectedCombatant.hasTalent(SPELLS.QUICK_DRAW_TALENT.id)) {\r\n      return <>, or you have an <SpellLink id={SPELLS.OPPORTUNITY.id} /> proc,</>;\r\n    }\r\n    return '';\r\n  }\r\n\r\n  recommendedFinisherPoints() {\r\n    let points = super.recommendedFinisherPoints();\r\n\r\n    if (this.selectedCombatant.hasBuff(SPELLS.BROADSIDE.id)) {\r\n      points -= 1;\r\n    } else if (this.selectedCombatant.hasTalent(SPELLS.QUICK_DRAW_TALENT.id) && this.selectedCombatant.hasBuff(SPELLS.OPPORTUNITY.id)) {\r\n      points -= 1;\r\n    }\r\n\r\n    return points;\r\n  }\r\n\r\n  extraSuggestion() {\r\n    return <>If you have <SpellLink id={SPELLS.BROADSIDE.id} /> active{this.quickDrawSuggestionText} use your finisher at {this.maximumComboPoints - 1} combo points instead.</>;\r\n  }\r\n\r\n  suggestionIcon() {\r\n    return SPELLS.DISPATCH.icon;\r\n  }\r\n}\r\n\r\nexport default Finishers;\r\n","import SPELLS from 'common/SPELLS';\r\n\r\n// The 6 buffs that Roll the Bones can grant, so does not include Roll the Bones itself\r\nexport const ROLL_THE_BONES_BUFFS = [\r\n  SPELLS.RUTHLESS_PRECISION,\r\n  SPELLS.GRAND_MELEE,\r\n  SPELLS.BROADSIDE,\r\n  SPELLS.SKULL_AND_CROSSBONES,\r\n  SPELLS.BURIED_TREASURE,\r\n  SPELLS.TRUE_BEARING,\r\n];\r\n\r\nexport const ROLL_THE_BONES_DURATION = 30000;","import React from 'react';\r\n\r\nimport SPELLS from 'common/SPELLS';\r\nimport SpellIcon from 'common/SpellIcon';\r\nimport { formatPercentage } from 'common/format';\r\nimport SpellLink from 'common/SpellLink';\r\nimport Analyzer from 'parser/core/Analyzer';\r\nimport UptimeIcon from 'interface/icons/Uptime';\r\nimport StatisticBox from 'interface/others/StatisticBox';\r\nimport STATISTIC_ORDER from 'interface/others/STATISTIC_ORDER';\r\nimport { i18n } from '@lingui/core';\r\nimport { t } from '@lingui/macro';\r\n\r\nimport { ROLL_THE_BONES_BUFFS } from '../../constants';\r\n\r\nclass RollTheBonesBuffs extends Analyzer {\r\n  /**\r\n   * Percentage of the fight that Roll the Bones was active\r\n   * In other words, at least one of the buffs was active\r\n   */\r\n  get totalPercentUptime() {\r\n    return this.percentUptime(SPELLS.ROLL_THE_BONES.id);\r\n  }\r\n\r\n  get suggestionThresholds() {\r\n    return {\r\n      actual: this.totalPercentUptime,\r\n      isLessThan: {\r\n        minor: 0.95,\r\n        average: 0.9,\r\n        major: 0.8,\r\n      },\r\n      style: 'percentage',\r\n    };\r\n  }\r\n\r\n  percentUptime(spellid) {\r\n    return this.selectedCombatant.getBuffUptime(spellid) / this.owner.fightDuration;\r\n  }\r\n\r\n  suggestions(when) {\r\n    when(this.suggestionThresholds).addSuggestion((suggest, actual, recommended) => suggest(<>Your <SpellLink id={SPELLS.ROLL_THE_BONES.id} /> uptime can be improved. Try to always have <SpellLink id={SPELLS.ROLL_THE_BONES.id} /> active, even with a lower value roll.</>)\r\n      .icon(SPELLS.ROLL_THE_BONES.icon)\r\n      .actual(i18n._(t('rogue.outlaw.suggestions.rollTheBones.uptime')`${formatPercentage(actual)}% Roll the Bones uptime`))\r\n      .recommended(`>${formatPercentage(recommended)}% is recommended`));\r\n  }\r\n\r\n  statistic() {\r\n    return (\r\n      <StatisticBox\r\n        position={STATISTIC_ORDER.CORE()}\r\n        icon={<SpellIcon id={SPELLS.ROLL_THE_BONES.id} />}\r\n        value={(\r\n          <>\r\n            <UptimeIcon /> {formatPercentage(this.totalPercentUptime)}% <small>uptime</small><br />\r\n          </>\r\n        )}\r\n        label={<SpellLink id={SPELLS.ROLL_THE_BONES.id} icon={false} />}\r\n      >\r\n        <table className=\"table table-condensed\">\r\n          <thead>\r\n            <tr>\r\n              <th>Buff</th>\r\n              <th>Time (%)</th>\r\n            </tr>\r\n          </thead>\r\n          <tbody>\r\n            {ROLL_THE_BONES_BUFFS.map((e) => (\r\n              <tr key={e.id}>\r\n                <th><SpellLink id={e.id} /></th>\r\n                <td>{`${formatPercentage(this.percentUptime(e.id))} %`}</td>\r\n              </tr>\r\n            ))}\r\n          </tbody>\r\n        </table>\r\n      </StatisticBox>\r\n    );\r\n  }\r\n}\r\n\r\nexport default RollTheBonesBuffs;\r\n","import SPELLS from 'common/SPELLS';\r\nimport Analyzer from 'parser/core/Analyzer';\r\nimport Events from 'parser/core/Events';\r\nimport { SELECTED_PLAYER } from 'parser/core/EventFilter';\r\n\r\nimport EnergyCapTracker from '../../../shared/resources/EnergyCapTracker'; // todo use the outlaw cap tracker once available\r\nimport { ROLL_THE_BONES_BUFFS, ROLL_THE_BONES_DURATION } from '../../constants';\r\n\r\nexport const ROLL_THE_BONES_CATEGORIES = {\r\n  LOW_VALUE: 'low',\r\n  MID_VALUE: 'mid',\r\n  HIGH_VALUE: 'high',\r\n};\r\n\r\n// e.g. 1 combo point is 12 seconds, 3 combo points is 24 seconds\r\nconst PANDEMIC_WINDOW = 0.3;\r\n\r\n/**\r\n * This module will group buffs applied by Roll the Bones by their respective casts\r\n * The purpose is to make it easier to do analysis on roll efficiency, etc.\r\n *\r\n * Roll the Bones itself will have AURA_APPLIED, AURA_REFRESH, and AURA_REMOVED events\r\n * Buffs granted by RTB will not have their own AURA_REFRESH; only the AURA_APPLIED and AURA_REMOVED events\r\n * Buffs granted by RTB will not have an AURA_REMOVED nor an AURA_APPLIED if they are being refreshed. They just carry on\r\n *\r\n * Order of events when you cast Roll the Bones:\r\n * AURA_REMOVED for any granted buffs that are dropping off (only if this is a refresh, otherwise they'd just have a separate AURA_REMOVED prior to the cast)\r\n * AURA_APPLIED/AURA_REFRESH for Roll the Bones\r\n * AURA_APPLIED for any granted buffs being added\r\n * CAST_SUCCESS for Roll the Bones\r\n */\r\nclass RollTheBonesCastTracker extends Analyzer {\r\n  get lastCast() {\r\n    return this.rolltheBonesCastEvents[this.rolltheBonesCastEvents.length - 1];\r\n  }\r\n\r\n  static dependencies = {\r\n    energyCapTracker: EnergyCapTracker,\r\n  };\r\n  rolltheBonesCastEvents = [];\r\n  rolltheBonesCastValues = Object.values(ROLL_THE_BONES_CATEGORIES).reduce((map, label) => {\r\n    map[label] = [];\r\n    return map;\r\n  }, {});\r\n\r\n  constructor(...args) {\r\n    super(...args);\r\n    this.addEventListener(Events.cast.by(SELECTED_PLAYER).spell(SPELLS.ROLL_THE_BONES), this.processCast);\r\n  }\r\n\r\n  categorizeCast(cast) {\r\n    if (cast.appliedBuffs.some(buff => buff.id === SPELLS.RUTHLESS_PRECISION.id || buff.id === SPELLS.GRAND_MELEE.id)) {\r\n      return ROLL_THE_BONES_CATEGORIES.HIGH_VALUE;\r\n    } else if (cast.appliedBuffs.length > 1) {\r\n      return ROLL_THE_BONES_CATEGORIES.MID_VALUE;\r\n    }\r\n\r\n    return ROLL_THE_BONES_CATEGORIES.LOW_VALUE;\r\n  }\r\n\r\n  castRemainingDuration(cast) {\r\n    if (!cast.timestampEnd) {\r\n      return 0;\r\n    }\r\n\r\n    return cast.duration - (cast.timestampEnd - cast.timestamp);\r\n  }\r\n\r\n  processCast(event) {\r\n    if (!event || !event.classResources) {\r\n      return;\r\n    }\r\n    const refresh = this.lastCast ? event.timestamp < (this.lastCast.timestamp + this.lastCast.duration) : false;\r\n\r\n    // All of the events for adding/removing buffs occur at the same timestamp as the cast, so this.selectedCombatant.hasBuff isn't quite accurate\r\n    const appliedBuffs = ROLL_THE_BONES_BUFFS.filter(b => this.energyCapTracker.combatantHasBuffActive(b.id));\r\n\r\n    let duration = ROLL_THE_BONES_DURATION;\r\n\r\n    // If somehow logging starts in the middle of combat and the first cast is actually a refresh, pandemic timing and previous buffs will be missing\r\n    if (refresh && this.lastCast) {\r\n      this.lastCast.timestampEnd = event.timestamp;\r\n\r\n      // pandemic works a little differently for rogues. RTB works the same way Rupture works for Assassination\r\n      // the allowed pandemic amount is based on the CURRENT combo points, not the buff/dot that is already applied\r\n      // e.g. 1s remaining, refresh with 30s, final is 31s. 20s remaining, refresh with 30s, final is 39s\r\n      duration += Math.min(this.castRemainingDuration(this.lastCast), duration * PANDEMIC_WINDOW);\r\n    }\r\n\r\n    const newCast = {\r\n      ...event,\r\n      appliedBuffs: appliedBuffs,\r\n      duration: duration,\r\n      isRefresh: refresh,\r\n    };\r\n\r\n    this.rolltheBonesCastEvents.push(newCast);\r\n    this.rolltheBonesCastValues[this.categorizeCast(newCast)].push(newCast);\r\n  }\r\n}\r\n\r\nexport default RollTheBonesCastTracker;\r\n","import React from 'react';\r\nimport SPELLS from 'common/SPELLS';\r\nimport SpellLink from 'common/SpellLink';\r\nimport { formatPercentage } from 'common/format';\r\nimport Analyzer, { SELECTED_PLAYER } from 'parser/core/Analyzer';\r\nimport { i18n } from '@lingui/core';\r\nimport { t } from '@lingui/macro';\r\n\r\nimport Events from 'parser/core/Events';\r\n\r\nimport RollTheBonesCastTracker, { ROLL_THE_BONES_CATEGORIES } from '../features/RollTheBonesCastTracker';\r\n\r\nconst MID_TIER_REFRESH_TIME = 11000;\r\nconst HIGH_TIER_REFRESH_TIME = 3000;\r\n\r\n/**\r\n * Roll the Bones is pretty complex with a number of rules around when to use it. I've done my best to break this down into four main suggestions\r\n * Ruthless Precision and Grand Melee are the two 'good' buffs. The other four are 'bad' buffs\r\n *\r\n * 1 - Uptime (handled in separate module, as close to 100% as possible)\r\n * 2 - Low value rolls (1 'bad' buff, reroll as soon as you can)\r\n * 3 - Mid value rolls (2 'bad' buffs, reroll at the pandemic window)\r\n * 4 - High value rolls (1 'good' buff, 2 buffs where at least one is a 'good' buff, or 5 buffs, keep as long as you can, rerolling under 3 seconds is considered fine)\r\n */\r\nclass RollTheBonesEfficiency extends Analyzer {\r\n  get goodLowValueRolls() {\r\n    const delayedRolls = this.rollTheBonesCastTracker.rolltheBonesCastValues[ROLL_THE_BONES_CATEGORIES.LOW_VALUE]\r\n      .filter(cast => cast.RTBIsDelayed).length;\r\n    const totalRolls = this.rollTheBonesCastTracker.rolltheBonesCastValues[ROLL_THE_BONES_CATEGORIES.LOW_VALUE].length;\r\n\r\n    return totalRolls - delayedRolls;\r\n  }\r\n\r\n  get goodMidValueRolls() {\r\n    // todo get the actual pandemic window. it's tricky because it's based on the next cast, and it's not really important that the player is exact anyway\r\n    return this.rollTheBonesCastTracker.rolltheBonesCastValues[ROLL_THE_BONES_CATEGORIES.MID_VALUE]\r\n      .filter(cast => this.rollTheBonesCastTracker.castRemainingDuration(cast) > HIGH_TIER_REFRESH_TIME && this.rollTheBonesCastTracker.castRemainingDuration(cast) < MID_TIER_REFRESH_TIME).length;\r\n  }\r\n\r\n  get goodHighValueRolls() {\r\n    return this.rollTheBonesCastTracker.rolltheBonesCastValues[ROLL_THE_BONES_CATEGORIES.HIGH_VALUE]\r\n      .filter(cast => this.rollTheBonesCastTracker.castRemainingDuration(cast) <= HIGH_TIER_REFRESH_TIME).length;\r\n  }\r\n\r\n  get rollSuggestions() {\r\n    const rtbCastValues = this.rollTheBonesCastTracker.rolltheBonesCastValues;\r\n    return [\r\n      // Percentage of low rolls that weren't rerolled right away, meaning a different finisher was cast first\r\n      // Inverted to make all three suggestions consistent\r\n      {\r\n        label: 'low value',\r\n        pass: this.goodLowValueRolls,\r\n        total: rtbCastValues[ROLL_THE_BONES_CATEGORIES.LOW_VALUE].length,\r\n        extraSuggestion: <>If you roll a single buff and it's not one of the two highest value, try to reroll it as soon as you can.</>,\r\n        suggestionThresholds: this.rollSuggestionThreshold(this.goodLowValueRolls, rtbCastValues[ROLL_THE_BONES_CATEGORIES.LOW_VALUE].length),\r\n      },\r\n      // Percentage of mid rolls that were rerolled at or below pandemic, but above 3 seconds\r\n      {\r\n        label: 'mid value',\r\n        pass: this.goodMidValueRolls,\r\n        total: rtbCastValues[ROLL_THE_BONES_CATEGORIES.MID_VALUE].length,\r\n        extraSuggestion: <>If you roll two buffs and neither is one of the two highest value, try to reroll them once you reach the pandemic window, at about 9-10 seconds remaining.</>,\r\n        suggestionThresholds: this.rollSuggestionThreshold(this.goodMidValueRolls, rtbCastValues[ROLL_THE_BONES_CATEGORIES.MID_VALUE].length),\r\n      },\r\n      // Percentage of good rolls that were rerolled below 3 seconds\r\n      {\r\n        label: 'high value',\r\n        pass: this.goodHighValueRolls,\r\n        total: rtbCastValues[ROLL_THE_BONES_CATEGORIES.HIGH_VALUE].length,\r\n        extraSuggestion: <>If you ever roll one of the two highest value buffs (especially with a 5 buff roll!), try to leave the buff active as long as possible, refreshing with less than 3 seconds remaining.</>,\r\n        suggestionThresholds: this.rollSuggestionThreshold(this.goodHighValueRolls, rtbCastValues[ROLL_THE_BONES_CATEGORIES.HIGH_VALUE].length),\r\n      },\r\n    ];\r\n  }\r\n\r\n  static dependencies = {\r\n    rollTheBonesCastTracker: RollTheBonesCastTracker,\r\n  };\r\n\r\n  constructor(...args) {\r\n    super(...args);\r\n    this.active = !this.selectedCombatant.hasTalent(SPELLS.SLICE_AND_DICE.id);\r\n    this.addEventListener(Events.cast.by(SELECTED_PLAYER).spell([SPELLS.DISPATCH, SPELLS.BETWEEN_THE_EYES]), this.onCast);\r\n  }\r\n\r\n  onCast(event) {\r\n    if (event.ability.guid !== SPELLS.DISPATCH.id && event.ability.guid !== SPELLS.BETWEEN_THE_EYES.id) {\r\n      return;\r\n    }\r\n\r\n    const lastCast = this.rollTheBonesCastTracker.lastCast;\r\n    if (lastCast && this.rollTheBonesCastTracker.categorizeCast(lastCast) === ROLL_THE_BONES_CATEGORIES.LOW_VALUE) {\r\n      //FIX WHEN UPDATING ROGUE TO TS\r\n      lastCast.RTBIsDelayed = true;\r\n    }\r\n  }\r\n\r\n  rollSuggestionThreshold(pass, total) {\r\n    return {\r\n      actual: total === 0 ? 1 : pass / total,\r\n      isLessThan: {\r\n        minor: 1,\r\n        average: 0.9,\r\n        major: 0.8,\r\n      },\r\n      style: 'percentage',\r\n    };\r\n  }\r\n\r\n  suggestions(when) {\r\n    this.rollSuggestions.forEach(suggestion => {\r\n      when(suggestion.suggestionThresholds).addSuggestion((suggest, actual, recommended) => suggest(<>Your efficiency with refreshing <SpellLink id={SPELLS.ROLL_THE_BONES.id} /> after a {suggestion.label} roll could be improved. <SpellLink id={SPELLS.RUTHLESS_PRECISION.id} /> and <SpellLink id={SPELLS.GRAND_MELEE.id} /> are your highest value buffs from <SpellLink id={SPELLS.ROLL_THE_BONES.id} />. {suggestion.extraSuggestion || ''}</>)\r\n        .icon(SPELLS.ROLL_THE_BONES.icon)\r\n        .actual(i18n._(t('rogue.outlaw.suggestions.rollTheBones.efficiency')`${formatPercentage(actual)}% (${suggestion.pass} out of ${suggestion.total}) efficient rerolls`))\r\n        .recommended(`${formatPercentage(recommended)}% is recommended`));\r\n    });\r\n  }\r\n}\r\n\r\nexport default RollTheBonesEfficiency;\r\n","import SPELLS from 'common/SPELLS/index';\r\n\r\nimport FilteredDamageTracker from '../../../shared/casttracker/FilteredDamageTracker';\r\nimport SpellUsable from '../../../shared/SpellUsable';\r\n\r\nclass BetweenTheEyesDamageTracker extends FilteredDamageTracker {\r\n  static dependencies = {\r\n    spellUsable: SpellUsable,\r\n  };\r\n\r\n  shouldProcessEvent(event) {\r\n    // isOnCooldown returns true when this event is a BTE cast, but we want to keep those casts too\r\n    if (event.ability.guid !== SPELLS.BETWEEN_THE_EYES.id && this.spellUsable.isOnCooldown(SPELLS.BETWEEN_THE_EYES.id)) {\r\n      return false;\r\n    }\r\n\r\n    const hasRuthlessPrecision = this.selectedCombatant.hasBuff(SPELLS.RUTHLESS_PRECISION.id);\r\n    return hasRuthlessPrecision;\r\n  }\r\n}\r\n\r\nexport default BetweenTheEyesDamageTracker;\r\n","import React from 'react';\r\n\r\nimport SPELLS from 'common/SPELLS';\r\nimport SpellLink from 'common/SpellLink';\r\nimport { formatPercentage } from 'common/format';\r\nimport Analyzer from 'parser/core/Analyzer';\r\n\r\nimport DamageTracker from 'parser/shared/modules/AbilityTracker';\r\n\r\nimport { i18n } from '@lingui/core';\r\nimport { t } from '@lingui/macro';\r\n\r\nimport BetweenTheEyesDamageTracker from './BetweenTheEyesDamageTracker';\r\n\r\nclass BetweenTheEyes extends Analyzer {\r\n  get thresholds() {\r\n    const total = this.damageTracker.getAbility(SPELLS.BETWEEN_THE_EYES.id);\r\n    const filtered = this.betweenTheEyesDamageTracker.getAbility(SPELLS.BETWEEN_THE_EYES.id);\r\n\r\n    // the betweenTheEyesDamageTracker is tracking casts when you should be using BTE, so subtract from the total to get all the casts when you shouldn't\r\n    const incorrectCasts = total.casts - filtered.casts;\r\n\r\n    return {\r\n      actual: incorrectCasts / total.casts,\r\n      isGreaterThan: {\r\n        minor: 0,\r\n        average: 0.05,\r\n        major: 0.1,\r\n      },\r\n      style: 'percentage',\r\n    };\r\n  }\r\n\r\n  static dependencies = {\r\n    damageTracker: DamageTracker,\r\n    betweenTheEyesDamageTracker: BetweenTheEyesDamageTracker,\r\n  };\r\n\r\n  suggestions(when) {\r\n    when(this.thresholds).addSuggestion((suggest, actual, recommended) => suggest(<>You casted <SpellLink id={SPELLS.BETWEEN_THE_EYES.id} /> without having <SpellLink id={SPELLS.RUTHLESS_PRECISION.id} /> active. The only time you should use <SpellLink id={SPELLS.BETWEEN_THE_EYES.id} /> as your damaging finisher is during <SpellLink id={SPELLS.RUTHLESS_PRECISION.id} />.</>)\r\n      .icon(SPELLS.BETWEEN_THE_EYES.icon)\r\n      .actual(i18n._(t('rogue.outlaw.suggestions.betweentheEyes.efficiency')`${formatPercentage(actual)}% inefficient casts`))\r\n      .recommended(`${formatPercentage(recommended)}% is recommended`));\r\n  }\r\n}\r\n\r\nexport default BetweenTheEyes;\r\n","import React from 'react';\r\n\r\nimport SPELLS from 'common/SPELLS';\r\nimport SpellLink from 'common/SpellLink';\r\nimport { formatPercentage } from 'common/format';\r\nimport Analyzer from 'parser/core/Analyzer';\r\n\r\nimport DamageTracker from 'parser/shared/modules/AbilityTracker';\r\n\r\nimport { i18n } from '@lingui/core';\r\nimport { t } from '@lingui/macro';\r\n\r\nimport BetweenTheEyesDamageTracker from './BetweenTheEyesDamageTracker';\r\n\r\nclass Dispatch extends Analyzer {\r\n  get thresholds() {\r\n    const total = this.damageTracker.getAbility(SPELLS.DISPATCH.id);\r\n    const filtered = this.betweenTheEyesDamageTracker.getAbility(SPELLS.DISPATCH.id);\r\n\r\n    return {\r\n      actual: filtered.casts / total.casts,\r\n      isGreaterThan: {\r\n        minor: 0,\r\n        average: 0.1,\r\n        major: 0.2,\r\n      },\r\n      style: 'percentage',\r\n    };\r\n  }\r\n\r\n  get delayedCastSuggestion() {\r\n    return <>Whenever you have the <SpellLink id={SPELLS.RUTHLESS_PRECISION.id} /> buff, you should prioritize <SpellLink id={SPELLS.BETWEEN_THE_EYES.id} /> as your damaging spender.</>;\r\n  }\r\n\r\n  static dependencies = {\r\n    damageTracker: DamageTracker,\r\n    betweenTheEyesDamageTracker: BetweenTheEyesDamageTracker,\r\n  };\r\n\r\n  constructor(...args) {\r\n    super(...args);\r\n    this.betweenTheEyesDamageTracker.subscribeInefficientCast([SPELLS.DISPATCH], (s) => `Between The Eyes should be prioritized as your spender during Ruthless Precision`);\r\n  }\r\n\r\n  suggestions(when) {\r\n    when(this.thresholds).addSuggestion((suggest, actual, recommended) => suggest(<>You casted <SpellLink id={SPELLS.DISPATCH.id} /> while <SpellLink id={SPELLS.BETWEEN_THE_EYES.id} /> was available. {this.delayedCastSuggestion}</>)\r\n      .icon(SPELLS.DISPATCH.icon)\r\n      .actual(i18n._(t('rogue.outlaw.dispatch.efficiency')`${formatPercentage(actual)}% inefficient casts`))\r\n      .recommended(`${formatPercentage(recommended)}% is recommended`));\r\n  }\r\n}\r\n\r\nexport default Dispatch;\r\n","import SPELLS from 'common/SPELLS/index';\r\n\r\nimport FilteredDamageTracker from '../../../shared/casttracker/FilteredDamageTracker';\r\n\r\nclass OpportunityDamageTracker extends FilteredDamageTracker {\r\n  shouldProcessEvent(event) {\r\n    return this.selectedCombatant.hasBuff(SPELLS.OPPORTUNITY.id);\r\n  }\r\n}\r\n\r\nexport default OpportunityDamageTracker;\r\n","import React from 'react';\r\n\r\nimport SPELLS from 'common/SPELLS';\r\nimport SpellLink from 'common/SpellLink';\r\nimport { formatPercentage } from 'common/format';\r\nimport Analyzer from 'parser/core/Analyzer';\r\n\r\nimport DamageTracker from 'parser/shared/modules/AbilityTracker';\r\n\r\nimport { i18n } from '@lingui/core';\r\nimport { t } from '@lingui/macro';\r\n\r\nimport OpportunityDamageTracker from './OpportunityDamageTracker';\r\n\r\nclass Opportunity extends Analyzer {\r\n  get thresholds() {\r\n    const total = this.damageTracker.getAbility(SPELLS.SINISTER_STRIKE.id);\r\n    const filtered = this.opportunityDamageTracker.getAbility(SPELLS.SINISTER_STRIKE.id);\r\n\r\n    return {\r\n      actual: filtered.casts / total.casts,\r\n      isGreaterThan: {\r\n        minor: 0,\r\n        average: 0.05,\r\n        major: 0.1,\r\n      },\r\n      style: 'percentage',\r\n    };\r\n  }\r\n\r\n  static dependencies = {\r\n    damageTracker: DamageTracker,\r\n    opportunityDamageTracker: OpportunityDamageTracker,\r\n  };\r\n\r\n  constructor(...args) {\r\n    super(...args);\r\n\r\n    this.opportunityDamageTracker.subscribeInefficientCast(\r\n      [SPELLS.SINISTER_STRIKE],\r\n      (s) => `Pistol Shot should be used as your builder during Opportunity`,\r\n    );\r\n  }\r\n\r\n  suggestions(when) {\r\n    when(this.thresholds).addSuggestion((suggest, actual, recommended) => suggest(<>You casted <SpellLink id={SPELLS.SINISTER_STRIKE.id} /> while having an <SpellLink id={SPELLS.OPPORTUNITY.id} /> proc. Try to prioritize <SpellLink id={SPELLS.PISTOL_SHOT.id} /> as your combo point builder when you have <SpellLink id={SPELLS.OPPORTUNITY.id} /> active to avoid the possibility of missing additional procs.</>)\r\n      .icon(SPELLS.OPPORTUNITY.icon)\r\n      .actual(i18n._(t('rogue.outlaw.suggestions.opportunity.efficiency')`${formatPercentage(actual)}% inefficient casts`))\r\n      .recommended(`${formatPercentage(recommended)}% is recommended`));\r\n  }\r\n}\r\n\r\nexport default Opportunity;\r\n","import React from 'react';\r\nimport PropTypes from 'prop-types';\r\n\r\nimport SPELLS from 'common/SPELLS';\r\nimport SpellLink from 'common/SpellLink';\r\nimport Checklist from 'parser/shared/modules/features/Checklist';\r\nimport Rule from 'parser/shared/modules/features/Checklist/Rule';\r\nimport Requirement from 'parser/shared/modules/features/Checklist/Requirement';\r\nimport PreparationRule from 'parser/shared/modules/features/Checklist/PreparationRule';\r\nimport GenericCastEfficiencyRequirement from 'parser/shared/modules/features/Checklist/GenericCastEfficiencyRequirement';\r\n\r\nconst OutlawRogueChecklist = ({ combatant, castEfficiency, thresholds }) => {\r\n  const AbilityRequirement = props => (\r\n    <GenericCastEfficiencyRequirement\r\n      castEfficiency={castEfficiency.getCastEfficiencyForSpellId(props.spell)}\r\n      {...props}\r\n    />\r\n  );\r\n  AbilityRequirement.propTypes = {\r\n    spell: PropTypes.number.isRequired,\r\n  };\r\n\r\n  return (\r\n    <Checklist>\r\n      <Rule\r\n        name=\"Maximize your Roll the Bones usage\"\r\n        description={<>Efficient use of <SpellLink id={SPELLS.ROLL_THE_BONES.id} /> is a critical part of Outlaw rogue. You should try to keep as high of an uptime as possible with any of the buffs, and reroll efficiently to get higher value buffs. <SpellLink id={SPELLS.RUTHLESS_PRECISION.id} /> and <SpellLink id={SPELLS.GRAND_MELEE.id} /> are the highest value of the six possible buffs. You should reroll until you get one of them, or any two other buffs. Any high value roll should be kept for the full duration.</>}\r\n      >\r\n        <Requirement\r\n          name={(\r\n            <>\r\n              <SpellLink id={SPELLS.ROLL_THE_BONES.id} /> uptime\r\n            </>\r\n          )}\r\n          thresholds={thresholds.rollTheBonesBuffs}\r\n        />\r\n        {thresholds.rollTheBonesEfficiency.map(suggestion => (\r\n          <Requirement\r\n            key={suggestion.label}\r\n            name={`Reroll ${suggestion.label} efficiency`}\r\n            thresholds={suggestion.suggestionThresholds}\r\n          />\r\n        ))}\r\n      </Rule>\r\n      <Rule\r\n        name=\"Use your finishers efficiently\"\r\n        description={<>Your two damaging finishers should typically be used at maximum combo points. If you have <SpellLink id={SPELLS.RUTHLESS_PRECISION.id} /> active you should prioritize <SpellLink id={SPELLS.BETWEEN_THE_EYES.id} /> as your damaging finisher.</>}\r\n      >\r\n        <Requirement name=\"Finisher combo point inefficiency\" thresholds={thresholds.finishers} />\r\n        <Requirement\r\n          name={(\r\n            <>\r\n              Inefficient <SpellLink id={SPELLS.DISPATCH.id} /> casts\r\n            </>\r\n          )}\r\n          thresholds={thresholds.dispatch}\r\n        />\r\n        <Requirement\r\n          name={(\r\n            <>\r\n              Inefficient <SpellLink id={SPELLS.BETWEEN_THE_EYES.id} /> casts\r\n            </>\r\n          )}\r\n          thresholds={thresholds.betweenTheEyes}\r\n        />\r\n\r\n      </Rule>\r\n      <Rule\r\n        name=\"Make sure to use your opportunity procs\"\r\n        description={<>Your <SpellLink id={SPELLS.OPPORTUNITY.id} /> proc will do more damage than a <SpellLink id={SPELLS.SINISTER_STRIKE.id} />, so make sure to use <SpellLink id={SPELLS.PISTOL_SHOT.id} /> as your combo point builder when the proc is available and you aren't already capped on combo points.</>}\r\n      >\r\n        <Requirement\r\n          name={(\r\n            <>\r\n              Delayed <SpellLink id={SPELLS.OPPORTUNITY.id} /> procs\r\n            </>\r\n          )}\r\n          thresholds={thresholds.opportunity}\r\n        />\r\n      </Rule>\r\n      <Rule\r\n        name=\"Do not overcap your resources\"\r\n        description=\"You should try to always avoid overcapping your Energy and Combo Points.\"\r\n      >\r\n        <Requirement name=\"Energy generator efficiency\" thresholds={thresholds.energyEfficiency} />\r\n        <Requirement name=\"Combo Point efficiency\" thresholds={thresholds.comboPointEfficiency} />\r\n        <Requirement name=\"Energy regeneration efficiency\" thresholds={thresholds.energyCapEfficiency} />\r\n      </Rule>\r\n      <Rule\r\n        name=\"Use your cooldowns\"\r\n        description=\"Your cooldowns are a major contributor to your DPS, and should be used as frequently as possible throughout a fight. A cooldown should be held on to only if a priority DPS phase is coming soon. Holding cooldowns too long will hurt your DPS.\"\r\n      >\r\n        <AbilityRequirement spell={SPELLS.ADRENALINE_RUSH.id} />\r\n        {combatant.hasTalent(SPELLS.GHOSTLY_STRIKE_TALENT.id) && (\r\n          <AbilityRequirement spell={SPELLS.GHOSTLY_STRIKE_TALENT.id} />\r\n        )}\r\n        {combatant.hasTalent(SPELLS.MARKED_FOR_DEATH_TALENT.id) && (\r\n          <AbilityRequirement spell={SPELLS.MARKED_FOR_DEATH_TALENT.id} />\r\n        )}\r\n        {combatant.hasTalent(SPELLS.BLADE_RUSH_TALENT.id) && (\r\n          <AbilityRequirement spell={SPELLS.BLADE_RUSH_TALENT.id} />\r\n        )}\r\n        {combatant.hasTalent(SPELLS.KILLING_SPREE_TALENT.id) && (\r\n          <AbilityRequirement spell={SPELLS.KILLING_SPREE_TALENT.id} />\r\n        )}\r\n        <AbilityRequirement spell={SPELLS.VANISH.id} />\r\n      </Rule>\r\n      <PreparationRule thresholds={thresholds} />\r\n    </Checklist>\r\n  );\r\n};\r\n\r\nOutlawRogueChecklist.propTypes = {\r\n  castEfficiency: PropTypes.object.isRequired,\r\n  combatant: PropTypes.shape({\r\n    hasTalent: PropTypes.func.isRequired,\r\n  }).isRequired,\r\n  thresholds: PropTypes.object.isRequired,\r\n};\r\n\r\nexport default OutlawRogueChecklist;\r\n","import React from 'react';\r\n\r\nimport BaseChecklist from 'parser/shared/modules/features/Checklist/Module';\r\nimport CastEfficiency from 'parser/shared/modules/CastEfficiency';\r\nimport Combatants from 'parser/shared/modules/Combatants';\r\nimport PreparationRuleAnalyzer from 'parser/shared/modules/features/Checklist/PreparationRuleAnalyzer';\r\n\r\nimport EnergyDetails from '../../../../shared/resources/EnergyDetails';\r\nimport OutlawEnergyCapTracker from '../../core/OutlawEnergyCapTracker';\r\nimport ComboPointDetails from '../../../../shared/resources/ComboPointDetails';\r\n\r\nimport Finishers from '../Finishers';\r\nimport RollTheBonesBuffs from '../../spells/RollTheBonesBuffs';\r\nimport RollTheBonesEfficiency from '../../spells/RollTheBonesEfficiency';\r\nimport BetweenTheEyes from '../../spells/BetweenTheEyes';\r\nimport Dispatch from '../../spells/Dispatch';\r\nimport Opportunity from '../../spells/Opportunity';\r\n\r\nimport Component from './Component';\r\n\r\nclass Checklist extends BaseChecklist {\r\n  static dependencies = {\r\n    combatants: Combatants,\r\n    castEfficiency: CastEfficiency,\r\n    preparationRuleAnalyzer: PreparationRuleAnalyzer,\r\n\r\n    energyDetails: EnergyDetails,\r\n    energyCapTracker: OutlawEnergyCapTracker,\r\n    comboPointDetails: ComboPointDetails,\r\n\r\n    finishers: Finishers,\r\n    rollTheBonesBuffs: RollTheBonesBuffs,\r\n    rollTheBonesEfficiency: RollTheBonesEfficiency,\r\n    betweenTheEyes: BetweenTheEyes,\r\n    dispatch: Dispatch,\r\n    opportunity: Opportunity,\r\n  };\r\n\r\n  render() {\r\n    return (\r\n      <Component\r\n        combatant={this.combatants.selected}\r\n        castEfficiency={this.castEfficiency}\r\n        thresholds={{\r\n          ...this.preparationRuleAnalyzer.thresholds,\r\n\r\n          energyEfficiency: this.energyDetails.suggestionThresholds,\r\n          energyCapEfficiency: this.energyCapTracker.suggestionThresholds,\r\n          comboPointEfficiency: this.comboPointDetails.suggestionThresholds,\r\n\r\n          finishers: this.finishers.suggestionThresholds,\r\n          rollTheBonesBuffs: this.rollTheBonesBuffs.suggestionThresholds,\r\n          rollTheBonesEfficiency: this.rollTheBonesEfficiency.rollSuggestions,\r\n          betweenTheEyes: this.betweenTheEyes.thresholds,\r\n          dispatch: this.dispatch.thresholds,\r\n          opportunity: this.opportunity.thresholds,\r\n        }}\r\n      />\r\n    );\r\n  }\r\n}\r\n\r\nexport default Checklist;\r\n","import React from 'react';\r\n\r\nimport SPELLS from 'common/SPELLS';\r\nimport SpellLink from 'common/SpellLink';\r\nimport Analyzer from 'parser/core/Analyzer';\r\nimport Statistic from 'interface/statistics/Statistic';\r\nimport DonutChart from 'interface/statistics/components/DonutChart';\r\nimport STATISTIC_ORDER from 'interface/others/STATISTIC_ORDER';\r\n\r\nimport RollTheBonesCastTracker from '../features/RollTheBonesCastTracker';\r\n\r\nclass RollTheBonesCounter extends Analyzer {\r\n  static dependencies = {\r\n    rollTheBonesCastTracker: RollTheBonesCastTracker,\r\n  };\r\n\r\n  rolltheBonesBuffDistributionChart() {\r\n    const castTracker = this.rollTheBonesCastTracker;\r\n\r\n    const distributionObj = castTracker.rolltheBonesCastEvents.reduce((buffCount, cast) => {\r\n      buffCount[cast.appliedBuffs.length] = (buffCount[cast.appliedBuffs.length] || 0) + 1;\r\n      return buffCount;\r\n    }, {});\r\n\r\n    const items = [\r\n      {\r\n        color: '#00b159',\r\n        label: <>1 Buff</>,\r\n        value: distributionObj[1] || 0,\r\n      },\r\n      {\r\n        color: '#db00db',\r\n        label: <>2 Buffs</>,\r\n        value: distributionObj[2] || 0,\r\n      },\r\n      {\r\n        color: '#f37735',\r\n        label: <>5 Buffs</>,\r\n        value: distributionObj[5] || 0,\r\n      },\r\n    ];\r\n\r\n    return (\r\n      <DonutChart\r\n        items={items}\r\n      />\r\n    );\r\n  }\r\n\r\n  statistic() {\r\n    return (\r\n      <Statistic\r\n        position={STATISTIC_ORDER.OPTIONAL()}\r\n        tooltip=\"Simulated averages are approximately 80% chance for 1 buff, 19% chance for 2 buffs, 1% chance for 5 buffs\"\r\n      >\r\n        <div className=\"pad\">\r\n          <label><SpellLink id={SPELLS.ROLL_THE_BONES.id} /> distribution</label>\r\n          {this.rolltheBonesBuffDistributionChart()}\r\n        </div>\r\n      </Statistic>\r\n    );\r\n  }\r\n}\r\n\r\nexport default RollTheBonesCounter;\r\n","import SPELLS from 'common/SPELLS';\r\nimport RESOURCE_TYPES from 'game/RESOURCE_TYPES';\r\nimport SpellUsable from 'parser/shared/modules/SpellUsable';\r\nimport Analyzer, { SELECTED_PLAYER } from 'parser/core/Analyzer';\r\nimport Events from 'parser/core/Events';\r\n\r\n/**\r\n * Restless Blades\r\n * Finishing moves reduce the remaining cooldown of Adrenaline Rush, Between the Eyes, Sprint, Grappling Hook, Ghostly Strike, Marked for Death, Blade Rush, Killing Spree and Vanish by 1 sec per combo point spent.\r\n */\r\n\r\nconst AFFECTED_ABILITIES =\r\n  [SPELLS.ADRENALINE_RUSH.id,\r\n    SPELLS.BETWEEN_THE_EYES.id,\r\n    SPELLS.SPRINT.id,\r\n    SPELLS.GRAPPLING_HOOK.id,\r\n    SPELLS.GHOSTLY_STRIKE_TALENT.id,\r\n    SPELLS.MARKED_FOR_DEATH_TALENT.id,\r\n    SPELLS.BLADE_RUSH_TALENT.id,\r\n    SPELLS.KILLING_SPREE_TALENT.id,\r\n    SPELLS.VANISH.id,\r\n  ];\r\n\r\nclass RestlessBlades extends Analyzer {\r\n  static dependencies = {\r\n    spellUsable: SpellUsable,\r\n  };\r\n\r\n  constructor(options) {\r\n    super(options);\r\n    this.addEventListener(Events.SpendResource.by(SELECTED_PLAYER), this.onSpendResource);\r\n  }\r\n\r\n  onSpendResource(event) {\r\n    const spent = event.resourceChange;\r\n    if (event.resourceChangeType !== RESOURCE_TYPES.COMBO_POINTS.id) {\r\n      return;\r\n    }\r\n\r\n    let cdr = 1000;\r\n    if (this.selectedCombatant.hasBuff(SPELLS.TRUE_BEARING.id)) {\r\n      cdr += 1000;\r\n    }\r\n    const amount = cdr * spent;\r\n\r\n    AFFECTED_ABILITIES.forEach(spell => this.reduceCooldown(spell, amount));\r\n  }\r\n\r\n  reduceCooldown(spellId, amount) {\r\n    if (this.spellUsable.isOnCooldown(spellId)) {\r\n      this.spellUsable.reduceCooldown(spellId, amount);\r\n    }\r\n  }\r\n}\r\n\r\nexport default RestlessBlades;\r\n","import React from 'react';\r\nimport SPELLS from 'common/SPELLS';\r\nimport Analyzer from 'parser/core/Analyzer';\r\nimport Statistic from 'interface/statistics/Statistic';\r\nimport { formatPercentage } from 'common/format';\r\nimport STATISTIC_ORDER from 'interface/others/STATISTIC_ORDER';\r\nimport SpellLink from 'common/SpellLink';\r\n\r\nclass SliceAndDiceUptime extends Analyzer {\r\n  get percentUptime() {\r\n    return (\r\n      this.selectedCombatant.getBuffUptime(SPELLS.SLICE_AND_DICE.id) / this.owner.fightDuration\r\n    );\r\n  }\r\n\r\n  statistic() {\r\n    return (\r\n      <Statistic\r\n        position={STATISTIC_ORDER.CORE(100)}\r\n        size=\"flexible\"\r\n      >\r\n        <div className=\"pad\">\r\n          <label><SpellLink id={SPELLS.SLICE_AND_DICE.id} /> Uptime</label>\r\n          <div className=\"value\">{formatPercentage(this.percentUptime)}%</div>\r\n        </div>\r\n      </Statistic>\r\n    );\r\n  }\r\n}\r\n\r\nexport default SliceAndDiceUptime;\r\n","import Analyzer, { Options, SELECTED_PLAYER } from 'parser/core/Analyzer';\r\nimport Abilities from 'parser/core/modules/Abilities';\r\nimport SpellUsable from 'parser/shared/modules/SpellUsable';\r\nimport SPELLS from 'common/SPELLS';\r\nimport Events, { CastEvent } from 'parser/core/Events';\r\nimport RESOURCE_TYPES, { getResource } from 'game/RESOURCE_TYPES';\r\n\r\nclass BladeRush extends Analyzer {\r\n  static dependencies = {\r\n    abilities: Abilities,\r\n    spellUsable: SpellUsable,\r\n  };\r\n\r\n  protected abilities!: Abilities;\r\n  protected spellUsable!: SpellUsable;\r\n\r\n  constructor(options: Options) {\r\n    super(options);\r\n    this.active = this.selectedCombatant.hasTalent(SPELLS.BLADE_RUSH_TALENT.id);\r\n    this.addEventListener(Events.cast.by(SELECTED_PLAYER).spell([SPELLS.DISPATCH, SPELLS.EVISCERATE, SPELLS.KIDNEY_SHOT, SPELLS.BETWEEN_THE_EYES, SPELLS.SLICE_AND_DICE]), this.onFinishMove);\r\n  }\r\n\r\n  onFinishMove(event: CastEvent) {\r\n    const cpCost = getResource(event.classResources, RESOURCE_TYPES.COMBO_POINTS.id)?.cost;\r\n    if (!cpCost) {\r\n      return;\r\n    }\r\n    if (this.spellUsable.isOnCooldown(SPELLS.BLADE_RUSH_TALENT.id)) {\r\n      const cooldownRemaining = this.spellUsable.cooldownRemaining(SPELLS.BLADE_RUSH_TALENT.id);\r\n      const extraCDR = this.selectedCombatant.hasBuff(SPELLS.TRUE_BEARING.id) ? (cpCost * 1000) : 0;\r\n      const cooldownReduction = (cpCost * 1000) + extraCDR;\r\n      const newChargeCDR = cooldownRemaining - cooldownReduction;\r\n      if (newChargeCDR < 0) {\r\n        this.spellUsable.endCooldown(SPELLS.BLADE_RUSH_TALENT.id, false, event.timestamp);\r\n      } else {\r\n        this.spellUsable.reduceCooldown(SPELLS.BLADE_RUSH_TALENT.id, cooldownReduction, event.timestamp);\r\n      }\r\n\r\n    }\r\n  }\r\n}\r\n\r\nexport default BladeRush;\r\n","import Analyzer, { Options, SELECTED_PLAYER } from 'parser/core/Analyzer';\r\nimport Abilities from 'parser/core/modules/Abilities';\r\nimport SpellUsable from 'parser/shared/modules/SpellUsable';\r\nimport SPELLS from 'common/SPELLS';\r\nimport Events, { CastEvent } from 'parser/core/Events';\r\nimport RESOURCE_TYPES, { getResource } from 'game/RESOURCE_TYPES';\r\n\r\nclass BladeFlurry extends Analyzer {\r\n  static dependencies = {\r\n    abilities: Abilities,\r\n    spellUsable: SpellUsable,\r\n  };\r\n\r\n  protected abilities!: Abilities;\r\n  protected spellUsable!: SpellUsable;\r\n\r\n  constructor(options: Options) {\r\n    super(options);\r\n    this.addEventListener(Events.cast.by(SELECTED_PLAYER).spell([SPELLS.DISPATCH, SPELLS.EVISCERATE, SPELLS.KIDNEY_SHOT, SPELLS.BETWEEN_THE_EYES, SPELLS.SLICE_AND_DICE]), this.onFinishMove);\r\n  }\r\n\r\n  onFinishMove(event: CastEvent) {\r\n    const cpCost = getResource(event.classResources, RESOURCE_TYPES.COMBO_POINTS.id)?.cost;\r\n    if (!cpCost) {\r\n      return;\r\n    }\r\n    if (this.spellUsable.isOnCooldown(SPELLS.BLADE_FLURRY.id)) {\r\n      const extraCDR = this.selectedCombatant.hasBuff(SPELLS.TRUE_BEARING.id) ? (cpCost * 1000) : 0;\r\n      const cooldownReduction = (cpCost * 1000) + extraCDR;\r\n      this.spellUsable.reduceCooldown(SPELLS.BLADE_FLURRY.id, cooldownReduction, event.timestamp);\r\n    }\r\n  }\r\n}\r\n\r\nexport default BladeFlurry;\r\n","import React from 'react';\r\nimport Analyzer, { Options } from 'parser/core/Analyzer';\r\nimport Abilities from 'parser/core/modules/Abilities';\r\nimport SPELLS from 'common/SPELLS';\r\nimport Statistic from 'interface/statistics/Statistic';\r\nimport { formatPercentage } from 'common/format';\r\nimport BoringSpellValueText from 'interface/statistics/components/BoringSpellValueText';\r\nimport SpellIcon from 'common/SpellIcon';\r\n\r\nclass GuileCharm extends Analyzer {\r\n  static dependencies = {\r\n    abilities: Abilities,\r\n  };\r\n\r\n  deepInsightUptime: number = 0;\r\n  moderateInsightUptime: number = 0;\r\n  shallowInsightUptime: number = 0;\r\n  protected abilities!: Abilities;\r\n\r\n  constructor(options: Options) {\r\n    super(options);\r\n    this.active = this.selectedCombatant.hasLegendaryByBonusID(SPELLS.GUILE_CHARM.bonusID);\r\n  }\r\n\r\n  get percentUptime() {\r\n    this.shallowInsightUptime = this.selectedCombatant.getBuffUptime(SPELLS.SHALLOW_INSIGHT_BUFF.id) / this.owner.fightDuration;\r\n    this.moderateInsightUptime = this.selectedCombatant.getBuffUptime(SPELLS.MODERATE_INSIGHT_BUFF.id) / this.owner.fightDuration;\r\n    this.deepInsightUptime = this.selectedCombatant.getBuffUptime(SPELLS.DEEP_INSIGHT_BUFF.id) / this.owner.fightDuration;\r\n    return {\r\n      shallowInsight: this.shallowInsightUptime,\r\n      moderateInsight: this.moderateInsightUptime,\r\n      deepInsight: this.deepInsightUptime,\r\n    };\r\n  }\r\n\r\n  statistic() {\r\n    return (\r\n      <Statistic size=\"flexible\" tooltip=\"This measures how long each buff from this legendary is active.\">\r\n        <BoringSpellValueText spell={SPELLS.GUILE_CHARM}>\r\n          <SpellIcon id={SPELLS.SHALLOW_INSIGHT_BUFF.id} /> {formatPercentage(this.percentUptime.shallowInsight)}% <small>Shallow Insight uptime</small><br />\r\n          <SpellIcon id={SPELLS.MODERATE_INSIGHT_BUFF.id} /> {formatPercentage(this.percentUptime.moderateInsight)}% <small>Moderate Insight uptime</small><br />\r\n          <SpellIcon id={SPELLS.DEEP_INSIGHT_BUFF.id} /> {formatPercentage(this.percentUptime.deepInsight)}% <small>Deep Insight uptime</small>\r\n        </BoringSpellValueText>\r\n      </Statistic>\r\n    );\r\n  }\r\n}\r\n\r\nexport default GuileCharm;","import React from 'react';\r\nimport Analyzer, { Options, SELECTED_PLAYER } from 'parser/core/Analyzer';\r\nimport Abilities from 'parser/core/modules/Abilities';\r\nimport Events, { ApplyBuffEvent } from 'parser/core/Events';\r\nimport SPELLS from 'common/SPELLS';\r\nimport Statistic from 'interface/statistics/Statistic';\r\nimport BoringSpellValueText from 'interface/statistics/components/BoringSpellValueText';\r\nimport SpellIcon from 'common/SpellIcon';\r\n\r\nclass GreenskinsWickers extends Analyzer {\r\n  static dependencies = {\r\n    abilities: Abilities,\r\n  };\r\n\r\n  greenskinProcs: number = 0;\r\n  protected abilities!: Abilities;\r\n\r\n  constructor(options: Options) {\r\n    super(options);\r\n    this.active = this.selectedCombatant.hasLegendaryByBonusID(SPELLS.GREENSKINS_WICKERS.bonusID);\r\n    this.addEventListener(Events.applybuff.by(SELECTED_PLAYER).spell(SPELLS.GREENSKINS_WICKERS_BUFF), this.onGreenskinBuff);\r\n  }\r\n\r\n  // Not sure what else should be tracked here. Maybe the total damage done by Pistol Shot with this legendary equipped?\r\n  onGreenskinBuff(event: ApplyBuffEvent) {\r\n    this.greenskinProcs += 1;\r\n  }\r\n\r\n  statistic() {\r\n    return (\r\n      <Statistic size=\"flexible\" tooltip=\"This shows you the amount of procs gained from Greenskin's Wickers Legendary.\">\r\n        <BoringSpellValueText spell={SPELLS.GREENSKINS_WICKERS}>\r\n          <SpellIcon id={SPELLS.GREENSKINS_WICKERS.id} /> {this.greenskinProcs} <small>Procs gained</small>\r\n        </BoringSpellValueText>\r\n      </Statistic>\r\n    );\r\n  }\r\n}\r\n\r\nexport default GreenskinsWickers;\r\n","import CoreCombatLogParser from 'parser/core/CombatLogParser';\r\nimport ArcaneTorrent from 'parser/shared/modules/racials/bloodelf/ArcaneTorrent';\r\n\r\nimport Abilities from './modules/Abilities';\r\nimport AlwaysBeCasting from './modules/features/AlwaysBeCasting';\r\nimport Buffs from './modules/Buffs';\r\nimport SpellUsable from '../shared/SpellUsable';\r\n\r\nimport ComboPointDetails from '../shared/resources/ComboPointDetails';\r\nimport OutlawComboPointTracker from './modules/core/OutlawComboPointTracker';\r\nimport ComboPoints from './modules/core/ComboPoints';\r\nimport EnergyDetails from '../shared/resources/EnergyDetails';\r\nimport EnergyTracker from '../shared/resources/EnergyTracker';\r\nimport OutlawEnergyCapTracker from './modules/core/OutlawEnergyCapTracker';\r\nimport Energy from './modules/core/Energy';\r\nimport SpellEnergyCost from '../shared/resources/SpellEnergyCost';\r\n\r\nimport Checklist from './modules/features/Checklist/Module';\r\nimport RollTheBonesBuffs from './modules/spells/RollTheBonesBuffs';\r\nimport RollTheBonesCastTracker from './modules/features/RollTheBonesCastTracker';\r\nimport RollTheBonesCounter from './modules/spells/RollTheBonesCounter';\r\nimport RollTheBonesEfficiency from './modules/spells/RollTheBonesEfficiency';\r\nimport RestlessBlades from './modules/core/RestlessBlades';\r\nimport SliceAndDiceUptime from './modules/spells/SliceAndDiceUptime';\r\nimport Dispatch from './modules/spells/Dispatch';\r\nimport Opportunity from './modules/spells/Opportunity';\r\nimport OpportunityDamageTracker from './modules/spells/OpportunityDamageTracker';\r\nimport BetweenTheEyes from './modules/spells/BetweenTheEyes';\r\nimport BetweenTheEyesDamageTracker from './modules/spells/BetweenTheEyesDamageTracker';\r\nimport Finishers from './modules/features/Finishers';\r\n\r\nimport SerratedBoneSpike from '../shared/shadowlands/covenants/necrolord/SerratedBoneSpike';\r\nimport EchoingReprimand from '../shared/shadowlands/covenants/kyrian/EchoingReprimand';\r\nimport Sepsis from '../shared/shadowlands/covenants/nightfae/Sepsis';\r\nimport Flagellation from '../shared/shadowlands/covenants/venthyr/Flagellation';\r\n\r\nimport BladeRush from './modules/talents/BladeRush';\r\nimport BladeFlurry from './modules/spells/BladeFlurry';\r\nimport GuileCharm from './modules/spells/shadowlands/legendaries/GuileCharm';\r\nimport GreenskinsWickers from './modules/spells/shadowlands/legendaries/GreenskinsWickers';\r\nimport EssenceOfBloodfang from '../shared/shadowlands/legendaries/EssenceOfBloodfang';\r\nimport InvigoratingShadowdust from '../shared/shadowlands/legendaries/InvigoratingShadowdust';\r\n\r\nclass CombatLogParser extends CoreCombatLogParser {\r\n  static specModules = {\r\n    //Feature\r\n    abilities: Abilities,\r\n    alwaysBeCasting: AlwaysBeCasting,\r\n    buffs: Buffs,\r\n    spellUsable: SpellUsable,\r\n    checklist: Checklist,\r\n\r\n    //Resource\r\n    comboPointTracker: OutlawComboPointTracker,\r\n    comboPointDetails: ComboPointDetails,\r\n    comboPoints: ComboPoints,\r\n    energyTracker: EnergyTracker,\r\n    energyCapTracker: OutlawEnergyCapTracker,\r\n    energyDetails: EnergyDetails,\r\n    energy: Energy,\r\n    spellEnergyCost: SpellEnergyCost,\r\n\r\n    //Core\r\n    restlessBlades: RestlessBlades,\r\n    rollTheBonesCastTracker: RollTheBonesCastTracker,\r\n\r\n    //Items\r\n    guileCharm: GuileCharm,\r\n    greenskinsWickers: GreenskinsWickers,\r\n    essenceOfBloodfang: EssenceOfBloodfang,\r\n    invigoratingShadowdust: InvigoratingShadowdust,\r\n\r\n    //Casts\r\n    dispatch: Dispatch,\r\n    opportunityDamageTracker: OpportunityDamageTracker,\r\n    opportunity: Opportunity,\r\n    betweenTheEyesDamageTracker: BetweenTheEyesDamageTracker,\r\n    betweenTheEyes: BetweenTheEyes,\r\n    rollTheBonesBuffs: RollTheBonesBuffs,\r\n    rollTheBonesCounter: RollTheBonesCounter,\r\n    rollTheBonesEfficiency: RollTheBonesEfficiency,\r\n    finishers: Finishers,\r\n    sliceAndDiceUptime: SliceAndDiceUptime,\r\n    bladeFlurry: BladeFlurry,\r\n    //Talents\r\n    bladeRush: BladeRush,\r\n    // Covenants\r\n    serratedBoneSpike: SerratedBoneSpike,\r\n    echoingReprimand: EchoingReprimand,\r\n    flagellation: Flagellation,\r\n    sepsis: Sepsis,\r\n\r\n    // Outlaw's throughput benefit isn't as big as for other classes since we don't have a lot of free gcds to use\r\n    arcaneTorrent: [\r\n      ArcaneTorrent, {\r\n        gcd: 1000,\r\n        castEfficiency: 0.5,\r\n        extraSuggestion: 'You should be using Arcane Torrent whenever you have a free GCD for it.',\r\n      },\r\n    ] as const,\r\n  };\r\n}\r\n\r\nexport default CombatLogParser;\r\n","import React from 'react';\r\n\r\n// https://thenounproject.com/term/duration/370713/\r\n// duration by Bohdan Burmich from the Noun Project\r\nconst Icon = ({ ...other }) => (\r\n  <svg xmlns=\"http://www.w3.org/2000/svg\" viewBox=\"10 10 80 80\" className=\"icon\" {...other}>\r\n    <path d=\"M50,86.4865c17.4361,0,31.6216-14.1855,31.6216-31.6216c0-16.6168-12.8865-30.2714-29.1892-31.5189v-4.9677h7.2973v-4.8649  H40.2703v4.8649h7.2973v4.9677c-16.3027,1.2475-29.1892,14.902-29.1892,31.5189C18.3784,72.3009,32.5639,86.4865,50,86.4865z M52.4324,28.2236c3.1101,0.2817,6.0664,1.0982,8.7798,2.356l-8.7798,15.2073V28.2236z M47.5676,28.2236v26.6412 c0,1.1008,0.7393,2.0647,1.8029,2.3497c0.209,0.0561,0.4205,0.0827,0.6295,0.0827c0.8533,0,1.6642-0.4504,2.1065-1.2162 l13.3146-23.0616c6.8507,4.8503,11.3357,12.8315,11.3357,21.8454c0,14.7537-12.0031,26.7567-26.7568,26.7567 s-26.7568-12.003-26.7568-26.7567C23.2432,40.9315,33.9501,29.4573,47.5676,28.2236z\" />\r\n  </svg>\r\n);\r\n\r\nexport default Icon;\r\n","export default function calculateMedian(values) {\r\n  const arr = [...values];\r\n  arr.sort((a, b) => a - b);\r\n\r\n  const half = Math.floor(arr.length / 2);\r\n\r\n  if (arr.length % 2) {\r\n    return arr[half];\r\n  } else {\r\n    return (arr[half - 1] + arr[half]) / 2.0;\r\n  }\r\n}\r\n","export default function average(values) {\r\n  return values.reduce((c, p) => c + p, 0) / values.length;\r\n}\r\n","export default function harmonic(values) {\r\n  return values.length / values.reduce((cum, val) => cum + 1/val, 0);\r\n}\r\n","import React, {useCallback, useState} from 'react';\r\n\r\nimport DropdownIcon from 'interface/icons/Dropdown';\r\nimport InformationIcon from 'interface/icons/Information';\r\nimport { ControlledExpandable } from 'interface/common/Expandable';\r\nimport colorForPerformance from 'common/colorForPerformance';\r\n\r\nimport calculateMedian from './helpers/calculateMedian';\r\nimport average from './helpers/average';\r\nimport harmonic from './helpers/harmonic';\r\n\r\nexport const RuleContext = React.createContext((value: number) => {/**/});\r\n\r\n\r\nexport enum PERFORMANCE_METHOD {\r\n  DEFAULT = 'DEFAULT',\r\n  MEDIAN = 'MEDIAN',\r\n  AVERAGE = 'AVERAGE',\r\n  LOWEST = 'LOWEST',\r\n  FIRST = 'FIRST',\r\n  HARMONIC = 'HARMONIC',\r\n};\r\n\r\ninterface Props {\r\n  name: React.ReactNode;\r\n  children: React.ReactNode;\r\n  description?: React.ReactNode;\r\n  performanceMethod?: PERFORMANCE_METHOD;\r\n}\r\n\r\ninterface State {\r\n  requirementPerformances: number[],\r\n  performance: number;\r\n  passed: boolean;\r\n  expanded: boolean;\r\n}\r\n\r\nconst Rule = (props: Props) => {\r\n\r\n  const [state, setState] = useState<State>({requirementPerformances: [], performance: 1, passed: true, expanded: false});\r\n\r\n\r\n  const calculateRulePerformance = useCallback((values: number[], style = PERFORMANCE_METHOD.DEFAULT) => {\r\n    // Lowest would generally be too punishing for small mistakes, if you want to have a single value tank the rule consider making it its own rule.\r\n    // Average would mark things as OK when one thing was OK and 3 things were \"average\", I think this is wrong and it should mark the rule as average. Median achieves this.\r\n    // Actual Median could mark a rule as 100% ok when there are still some things being neglected, so instead I opted for the best of both worlds and using the lowest of the median or average by default.\r\n\r\n    switch (style) {\r\n      case PERFORMANCE_METHOD.DEFAULT:\r\n        return Math.min(calculateMedian(values), average(values));\r\n      case PERFORMANCE_METHOD.MEDIAN:\r\n        return calculateMedian(values);\r\n      case PERFORMANCE_METHOD.AVERAGE:\r\n        return average(values);\r\n      case PERFORMANCE_METHOD.LOWEST:\r\n        return Math.min(...values);\r\n      case PERFORMANCE_METHOD.FIRST:\r\n        return values[0];\r\n      case PERFORMANCE_METHOD.HARMONIC:\r\n        return harmonic(values);\r\n      default:\r\n        throw new Error(`Unknown style: ${style}`);\r\n    }\r\n  }, [])\r\n\r\n \r\n\r\n  const checkEmptyRule = (child: React.ReactNode) => {\r\n    if (React.isValidElement(child) && child?.props) {\r\n      return true;\r\n    } else {\r\n      return false;\r\n    }\r\n  }\r\n\r\n  const setRequirementPerformance = (p: number) => {\r\n    // We don't have to worry about adding the same Requirement's performance multiple times here because it's only called in the Requirement's constructor, which is only called once.\r\n    setState((prevState: State) => {\r\n      const requirementPerformances: State['requirementPerformances'] = [...prevState.requirementPerformances, p];\r\n      const performance = requirementPerformances.length > 0 ? calculateRulePerformance(requirementPerformances, props.performanceMethod) : 1\r\n      const passed = performance > 0.666;\r\n      const expanded = !passed;\r\n      return {requirementPerformances, performance: performance, passed, expanded}\r\n    })\r\n  }\r\n\r\n  const { name, children: requirements, description } = props;\r\n\r\n  if (!requirements || (Array.isArray(requirements) && !requirements.some(checkEmptyRule))) {\r\n    return null;\r\n  }\r\n\r\n  const inverseExpanded = () => {\r\n    setState(prevState => ({...prevState, expanded: !prevState.expanded}))\r\n  }\r\n\r\n  return (\r\n    <RuleContext.Provider value={setRequirementPerformance}>\r\n      <ControlledExpandable\r\n        element=\"li\"\r\n        className={state.passed ? 'passed' : 'failed'}\r\n        inverseExpanded={inverseExpanded}\r\n        expanded={state.expanded}\r\n        header={(\r\n          <div className=\"flex wrapable\">\r\n            <div className=\"flex-main name\">\r\n              {name}\r\n            </div>\r\n            <div className=\"flex-sub perf\">\r\n              <div className=\"perf-container\">\r\n                <div\r\n                  className=\"perf-bar\"\r\n                  style={{\r\n                    width: `${state.performance * 100}%`,\r\n                    backgroundColor: colorForPerformance(state.performance),\r\n                  }}\r\n                />\r\n              </div>\r\n            </div>\r\n            <div className=\"flex-sub chevron\">\r\n              <div>\r\n                <DropdownIcon />\r\n              </div>\r\n            </div>\r\n          </div>\r\n        )}\r\n      >\r\n        {description && (\r\n          <div className=\"row text-muted description\">\r\n            <InformationIcon />\r\n            <div className=\"col-md-12\">\r\n              {description}\r\n            </div>\r\n          </div>\r\n        )}\r\n        <div className=\"row\">\r\n          {requirements}\r\n        </div>\r\n      </ControlledExpandable>\r\n    </RuleContext.Provider>\r\n  );\r\n}\r\n\r\nexport default Rule;\r\n","import React from 'react';\r\n\r\nimport InformationIcon from 'interface/icons/Information';\r\nimport { formatNumber, formatPercentage, formatThousands } from 'common/format';\r\nimport Tooltip, { TooltipElement } from 'common/Tooltip';\r\nimport colorForPerformance from 'common/colorForPerformance';\r\nimport { BoolThreshold, NumberThreshold, Threshold, ThresholdStyle } from 'parser/core/ParseResults';\r\nimport { Trans } from '@lingui/macro';\r\n\r\nimport performanceForThresholds from './helpers/performanceForThresholds';\r\nimport { RuleContext } from './Rule';\r\n\r\n\r\nexport type RequirementThresholds = NumberThreshold | BoolThreshold;\r\n\r\ninterface Props {\r\n  name: React.ReactNode,\r\n  thresholds: RequirementThresholds,\r\n  tooltip?: React.ReactNode,\r\n  valueTooltip?: React.ReactNode,\r\n  setPerformance: (performance: number) => void,\r\n  prefix?: React.ReactNode,\r\n  suffix?: React.ReactNode,\r\n}\r\nclass Requirement extends React.PureComponent<Props> {\r\n\r\n  constructor(props: Props) {\r\n    super(props);\r\n    props.setPerformance(this.performance);\r\n  }\r\n\r\n  get performance() {\r\n    return performanceForThresholds(this.props.thresholds);\r\n  }\r\n\r\n  formatThresholdsActual(thresholds: Threshold<any>) {\r\n    switch (thresholds.style) {\r\n      case ThresholdStyle.PERCENTAGE:\r\n        return `${formatPercentage(thresholds.actual)}%`;\r\n      case ThresholdStyle.NUMBER:\r\n        return `${formatNumber(thresholds.actual)}`;\r\n      case ThresholdStyle.THOUSANDS:\r\n        return `${formatThousands(thresholds.actual)}`;\r\n      case ThresholdStyle.DECIMAL:\r\n        return `${thresholds.actual.toFixed(2)}`;\r\n      case ThresholdStyle.BOOLEAN:\r\n        return thresholds.actual ? <Trans id=\"common.yes\">Yes</Trans> : <Trans id=\"common.no\">No</Trans>;\r\n      case ThresholdStyle.SECONDS:\r\n        return `${thresholds.actual.toFixed(2)}s`;\r\n      default:\r\n        throw new Error(`Unknown style: ${thresholds.style}`);\r\n    }\r\n  }\r\n\r\n  render() {\r\n    const { name, thresholds, tooltip, valueTooltip, prefix, suffix } = this.props;\r\n\r\n    const performance = this.performance;\r\n    let max = undefined;\r\n    const thresholdsN = thresholds as NumberThreshold;\r\n    if(thresholdsN.max !== undefined) {\r\n      max = `/ ${thresholdsN.max}`;\r\n    }\r\n    const actual = (\r\n      <>\r\n        {prefix} {this.formatThresholdsActual(thresholds)} {max} {suffix}\r\n      </>\r\n    );\r\n\r\n    return (\r\n      <div className=\"col-md-6\">\r\n        <div className=\"flex\">\r\n          <div className=\"flex-main\">\r\n            {name}\r\n          </div>\r\n          {tooltip && (\r\n            <div\r\n              className=\"flex-sub\"\r\n              style={{ marginLeft: 10 }}\r\n            >\r\n              <Tooltip content={tooltip}>\r\n                <div>\r\n                  <InformationIcon />\r\n                </div>\r\n              </Tooltip>\r\n            </div>\r\n          )}\r\n          <div className=\"flex-sub content-middle text-muted\" style={{ minWidth: 55, marginLeft: 5, marginRight: 10 }}>\r\n            <div className=\"text-right\" style={{ width: '100%' }}>\r\n              {valueTooltip ? <TooltipElement content={valueTooltip}>{actual}</TooltipElement> : actual}\r\n            </div>\r\n          </div>\r\n          <div className=\"flex-sub content-middle\" style={{ width: 50 }}>\r\n            <div className=\"performance-bar-container\">\r\n              <div\r\n                className=\"performance-bar small\"\r\n                style={{\r\n                  width: `${performance * 100}%`,\r\n                  transition: 'background-color 800ms',\r\n                  backgroundColor: colorForPerformance(performance),\r\n                }}\r\n              />\r\n            </div>\r\n          </div>\r\n        </div>\r\n      </div>\r\n    );\r\n  }\r\n}\r\n\r\nexport default (props: Omit<Props, 'setPerformance'>) => (\r\n  <RuleContext.Consumer>\r\n    {(setPerformance: (performance: number) => void) => (\r\n      <Requirement\r\n        {...props}\r\n        setPerformance={setPerformance}\r\n      />\r\n    )}\r\n  </RuleContext.Consumer>\r\n);\r\n","/**\r\n *   0 - 33% major This is different from the *minor* threshold which is at 100% instead of 66%. The reason for this is that the minor threshold being at 75% and then 75%-100% being minor - max is that this would suggest going for max is best while this is not always the case. Something like Crusader Strike (with the Crusader's Might talent) has a recommended cast efficiency of 35% *because* you should only cast it enough to benefit you, more than that would be good but not 100% cast efficiency as then you're losing healing.\r\n * 33% - 66% average\r\n * 66% - 99% minor\r\n * 100% good (no issue)\r\n * @param actual\r\n * @param minor\r\n * @param average\r\n * @param major\r\n * @returns {number}\r\n */\r\nfunction performanceForLessThanThresholds(actual, { minor, average, major }) {\r\n  if (actual < major) {\r\n    // major issue\r\n    return 0.333 * actual / major;\r\n  } else if (actual < average) {\r\n    // average issue (between major and average issue)\r\n    return 0.333 + 0.333 * ((actual - major) / (average - major));\r\n  } else if (actual < minor) {\r\n    // minor issue (between average and minor issue)\r\n    return 0.666 + 0.333 * ((actual - average) / (minor - average));\r\n  } else {\r\n    // no issue\r\n    return 1;\r\n  }\r\n}\r\nfunction performanceForGreaterThanThresholds(actual, { minor, average, major }) {\r\n  if (actual > major) {\r\n    // major issue\r\n    return 0.333 * major / actual;\r\n  } else if (actual > average) {\r\n    // average issue (between major and average issue)\r\n    return 0.666 - 0.333 * ((actual - average) / (major - average));\r\n  } else if (actual > minor) {\r\n    // minor issue (between average and minor issue)\r\n    return 1 - 0.333 * ((actual - minor) / (average - minor));\r\n  } else {\r\n    // no issue\r\n    return 1;\r\n  }\r\n}\r\nexport default function performanceForThresholds(thresholds) {\r\n  if (thresholds.isGreaterThan) {\r\n    if (typeof thresholds.isGreaterThan === 'object') {\r\n      return performanceForGreaterThanThresholds(thresholds.actual, thresholds.isGreaterThan);\r\n    } else {\r\n      return thresholds.isGreaterThan / thresholds.actual;\r\n    }\r\n  } else if (thresholds.isLessThan) {\r\n    if (typeof thresholds.isLessThan === 'object') {\r\n      return performanceForLessThanThresholds(thresholds.actual, thresholds.isLessThan);\r\n    } else {\r\n      return thresholds.actual / thresholds.isLessThan;\r\n    }\r\n  } else if (thresholds.isEqual !== undefined) {\r\n    return thresholds.actual !== thresholds.isEqual ? 1 : 0;\r\n  } else {\r\n    throw new Error('Failed to recognize threshold type');\r\n  }\r\n}\r\n","import React from 'react';\r\nimport PropTypes from 'prop-types';\r\nimport { Trans } from '@lingui/macro';\r\n\r\nimport './Checklist.scss';\r\n\r\nconst Checklist = props => {\r\n  const { children } = props;\r\n\r\n  return (\r\n    <ul className=\"checklist\">\r\n      {!children && (\r\n        <li>\r\n          <div className=\"alert alert-danger\">\r\n            <Trans id=\"shared.checklist.missingChecklist\">The checklist is not yet available for this spec. See <a href=\"https://github.com/WoWAnalyzer/WoWAnalyzer\">GitHub</a> or join us on <a href=\"https://discord.gg/AxphPxU\">Discord</a> if you're interested in contributing this.</Trans>\r\n          </div>\r\n        </li>\r\n      )}\r\n\r\n      {children}\r\n    </ul>\r\n  );\r\n};\r\n\r\nChecklist.propTypes = {\r\n  children: PropTypes.node,\r\n};\r\n\r\nexport default Checklist;\r\n","import React from 'react';\r\nimport PropTypes from 'prop-types';\r\nimport { Trans } from '@lingui/macro';\r\n\r\nimport Rule from './Rule';\r\nimport Requirement from './Requirement';\r\n\r\nclass PreparationRule extends React.PureComponent {\r\n\r\n  static propTypes = {\r\n    children: PropTypes.node,\r\n    thresholds: PropTypes.object.isRequired,\r\n  };\r\n\r\n  renderPotionRequirements() {\r\n    const { thresholds } = this.props;\r\n\r\n    return (\r\n      <>\r\n        <Requirement\r\n          name={<Trans id=\"shared.modules.features.checklist.combatPotionsUsed\">Combat potions used</Trans>}\r\n          thresholds={thresholds.potionsUsed}\r\n        />\r\n        <Requirement\r\n          name={<Trans id=\"shared.modules.features.checklist.highQualityCombatPotionsUsed\">High quality combat potions used</Trans>}\r\n          thresholds={thresholds.bestPotionUsed}\r\n        />\r\n      </>\r\n    );\r\n  }\r\n  renderEnchantRequirements() {\r\n    const { thresholds } = this.props;\r\n\r\n    return (\r\n      <>\r\n        <Requirement\r\n          name={<Trans id=\"shared.modules.features.checklist.enchanted\">All items enchanted</Trans>}\r\n          thresholds={thresholds.itemsEnchanted}\r\n        />\r\n        <Requirement\r\n          name={<Trans id=\"shared.modules.features.checklist.enchantedHigh\">Using high quality enchants</Trans>}\r\n          thresholds={thresholds.itemsBestEnchanted}\r\n        />\r\n      </>\r\n    );\r\n  }\r\n  renderWeaponEnhancementRequirements() {\r\n    const { thresholds } = this.props;\r\n\r\n    return (\r\n      <>\r\n        <Requirement\r\n          name={<Trans>All weapons enhanced (oils/stones)</Trans>}\r\n          thresholds={thresholds.weaponsEnhanced}\r\n        />\r\n        <Requirement\r\n          name={<Trans>Using high quality weapon enhancements</Trans>}\r\n          thresholds={thresholds.bestWeaponEnhancements}\r\n        />\r\n      </>\r\n    );\r\n  }\r\n  renderFlaskRequirements() {\r\n    const { thresholds } = this.props;\r\n    return (\r\n      <>\r\n        <Requirement\r\n          name={<Trans id=\"shared.modules.features.checklist.flaskHigh\">High quality flask used</Trans>}\r\n          thresholds={thresholds.higherFlaskPresent}\r\n        />\r\n        <Requirement\r\n          name={<Trans id=\"shared.modules.features.checklist.flask\">Flask used</Trans>}\r\n          thresholds={thresholds.flaskPresent}\r\n        />\r\n      </>\r\n    );\r\n  }\r\n  renderFoodRequirements() {\r\n    const { thresholds } = this.props;\r\n    return (\r\n      <>\r\n        <Requirement\r\n          name={<Trans id=\"shared.modules.features.checklist.foodHigh\">High quality food used</Trans>}\r\n          thresholds={thresholds.higherFoodPresent}\r\n        />\r\n        <Requirement\r\n          name={<Trans id=\"shared.modules.features.checklist.food\">Food used</Trans>}\r\n          thresholds={thresholds.foodPresent}\r\n        />\r\n      </>\r\n    );\r\n  }\r\n\r\n  render() {\r\n    const { children } = this.props;\r\n\r\n    return (\r\n      <Rule\r\n        name={<Trans id=\"shared.modules.features.checklist.wellPrepared\">Be well prepared</Trans>}\r\n        description={<Trans id=\"shared.modules.features.checklist.wellPreparedDetails\">Being well prepared with food, flasks, potions and enchants is an easy way to improve your performance.</Trans>}\r\n      >\r\n        {this.renderEnchantRequirements()}\r\n        {this.renderWeaponEnhancementRequirements()}\r\n        {this.renderPotionRequirements()}\r\n        {this.renderFlaskRequirements()}\r\n        {this.renderFoodRequirements()}\r\n        {children}\r\n      </Rule>\r\n    );\r\n  }\r\n}\r\n\r\nexport default PreparationRule;\r\n","import React from 'react';\r\nimport PropTypes from 'prop-types';\r\n\r\nimport SpellLink from 'common/SpellLink';\r\nimport { captureException } from 'common/errorLogger';\r\n\r\nimport Requirement from './Requirement';\r\n\r\n/**\r\n * This is a common requirement for all checklists that uses settings for CastEfficiency to create a Requirement. It shows the spell and your efficiency as performance depending on the configured cast efficiency efficiency thresholds.\r\n *\r\n * This requirement is automatically disabled if the ability's CastEfficiency suggestion is disabled (i.e. if the ability's castEfficiency: { suggestion } is unset or false), or the ability is disabled completely. If you set `onlyWithSuggestion` to `false` in the object when creating this requirement you can change this behavior to always show if the ability is enabled, regardless of the CastEfficiency suggestion property being set.\r\n */\r\nclass GenericCastEfficiencyRequirement extends React.PureComponent {\r\n  static propTypes = {\r\n    spell: PropTypes.number.isRequired,\r\n    name: PropTypes.node,\r\n    castEfficiency: PropTypes.shape({\r\n      efficiency: PropTypes.number.isRequired,\r\n      gotMaxCasts: PropTypes.bool.isRequired,\r\n      recommendedEfficiency: PropTypes.number.isRequired,\r\n      averageIssueEfficiency: PropTypes.number.isRequired,\r\n      majorIssueEfficiency: PropTypes.number.isRequired,\r\n      casts: PropTypes.any,\r\n      maxCasts: PropTypes.any,\r\n    }).isRequired,\r\n    isMaxCasts: PropTypes.bool,\r\n  };\r\n\r\n  get thresholds() {\r\n    if (!this.props.castEfficiency) {\r\n      captureException(new Error(`GenericCastEfficiencyRequirement requires that you pass the castEfficiency object yourself. Spell: ${this.props.spell}`));\r\n      return null;\r\n    }\r\n\r\n    if(this.props.isMaxCasts) {\r\n      const {\r\n        casts,\r\n        maxCasts,\r\n      } = this.props.castEfficiency;\r\n\r\n      return {\r\n        actual: casts,\r\n        max: maxCasts,\r\n        isLessThan: {\r\n          minor: maxCasts,\r\n          average: maxCasts - 1,\r\n          major: maxCasts - 2,\r\n        },\r\n        style: 'number',\r\n      };\r\n    } else {\r\n      const {\r\n        efficiency,\r\n        gotMaxCasts,\r\n        recommendedEfficiency: minor,\r\n        averageIssueEfficiency: average,\r\n        majorIssueEfficiency: major,\r\n      } = this.props.castEfficiency;\r\n\r\n      return {\r\n        actual: gotMaxCasts ? 1 : efficiency,\r\n        isLessThan: {\r\n          minor,\r\n          average,\r\n          major,\r\n        },\r\n        style: 'percentage',\r\n      };\r\n    }\r\n  }\r\n\r\n  render() {\r\n    const { spell, name, ...others } = this.props;\r\n\r\n    const thresholds = this.thresholds;\r\n    if (!thresholds) {\r\n      return null;\r\n    }\r\n\r\n    return (\r\n      <Requirement\r\n        name={name || <SpellLink id={spell} />}\r\n        thresholds={thresholds}\r\n        {...others}\r\n      />\r\n    );\r\n  }\r\n}\r\n\r\nexport default GenericCastEfficiencyRequirement;\r\n","export default function colorForPerformance(performance: number) {\r\n  if (performance >= 1) {\r\n    return '#4ec04e';\r\n  } else if (performance > 0.666) {\r\n    return '#a6c34c';\r\n  } else if (performance > 0.5) {\r\n    return '#ffc84a';\r\n  } else if (performance > 0.333) {\r\n    return '#df7102';\r\n  } else {\r\n    return '#ac1f39';\r\n  }\r\n}\r\n","import React from 'react';\r\nimport PropTypes from 'prop-types';\r\nimport BaseChart from 'interface/others/BaseChart';\r\n\r\nimport { formatPercentage } from 'common/format';\r\nimport SpellLink from 'common/SpellLink';\r\nimport { TooltipElement } from 'common/Tooltip';\r\n\r\nimport './style.scss';\r\n\r\nclass DonutChart extends React.PureComponent {\r\n  static propTypes = {\r\n    items: PropTypes.arrayOf(PropTypes.shape({\r\n      value: PropTypes.number.isRequired,\r\n      label: PropTypes.node.isRequired,\r\n      color: PropTypes.string.isRequired,\r\n      tooltip: PropTypes.node,\r\n      spellId: PropTypes.number,\r\n      valueTooltip: PropTypes.node,\r\n    })).isRequired,\r\n    // While you could change the chart size, I strongly recommend you do not for consistency and to avoid breaking whenever this component is modified. Do you really need to adjust the size?\r\n    chartSize: PropTypes.number,\r\n    innerRadiusFactor: PropTypes.number,\r\n  };\r\n  static defaultProps = {\r\n    chartSize: 90,\r\n    innerRadiusFactor: 0.28,\r\n  };\r\n\r\n  renderLegend(items) {\r\n    const total = items.reduce((sum, item) => sum + item.value, 0);\r\n\r\n    return (\r\n      <div className=\"legend\">\r\n        {items.map(({ color, label, tooltip, value, spellId, valueTooltip }, index) => {\r\n          label = tooltip ? (\r\n            <TooltipElement content={tooltip}>{label}</TooltipElement>\r\n          ) : label;\r\n          label = spellId ? (\r\n            <SpellLink id={spellId}>{label}</SpellLink>\r\n          ) : label;\r\n          return (\r\n            <div key={index} className=\"flex\">\r\n              <div className=\"flex-sub\">\r\n                <div className=\"circle\" style={{ background: color }} />\r\n              </div>\r\n              <div className=\"flex-main\">\r\n                {label}\r\n              </div>\r\n              <div className=\"flex-sub\">\r\n                <TooltipElement content={valueTooltip ? valueTooltip : value}>\r\n                  {formatPercentage(value / total, 0)}%\r\n                </TooltipElement>\r\n              </div>\r\n            </div>\r\n          );\r\n        })}\r\n      </div>\r\n    );\r\n  }\r\n  renderChart(items, chartSize, innerRadiusFactor) {\r\n    const innerRadius = chartSize * innerRadiusFactor;\r\n\r\n    const data = {\r\n      items,\r\n    };\r\n    const spec = {\r\n      data: {\r\n        name: 'items',\r\n      },\r\n      mark: {\r\n        type: 'arc',\r\n        innerRadius,\r\n      },\r\n      encoding: {\r\n        theta: {\r\n          field: 'value',\r\n          type: 'quantitative',\r\n        },\r\n        color: {\r\n          field: 'label',\r\n          type: 'nominal',\r\n          legend: null,\r\n          scale: {\r\n            domain: items.map(({label}) => label),\r\n            range: items.map(({color}) => color),\r\n          },\r\n        },\r\n      },\r\n      view: {\r\n        stroke: null,\r\n      },\r\n    };\r\n    return (\r\n      <div className=\"chart\">\r\n        <BaseChart\r\n          width={chartSize}\r\n          height={chartSize}\r\n          spec={spec}\r\n          data={data}\r\n        />\r\n      </div>\r\n    );\r\n  }\r\n  render() {\r\n    const { items, chartSize, innerRadiusFactor } = this.props;\r\n\r\n    return (\r\n      <div className=\"donut-chart\">\r\n        {this.renderLegend(items)}\r\n        {this.renderChart(items, chartSize, innerRadiusFactor)}\r\n      </div>\r\n    );\r\n  }\r\n}\r\n\r\nexport default DonutChart;\r\n","import React from 'react';\r\n\r\n// https://thenounproject.com/search/?q=dropdown&i=1871189\r\n// Dropdown by zalhan from the Noun Project\r\nconst Icon = ({ ...other }) => (\r\n  <svg xmlns=\"http://www.w3.org/2000/svg\" viewBox=\"0 0 16 9\" className=\"icon\" {...other}>\r\n      <path d=\"M14.0059397,2.26485497e-14 C15.1072288,2.26485497e-14 15.3722573,0.627746582 14.5881847,1.41182411 L8.70999225,7.29005337 C8.317902,7.68214607 7.67653023,7.6764822 7.29009898,7.29005337 L1.41183294,1.41182411 C0.632099139,0.632095183 0.894513756,2.26485497e-14 1.99406028,2.26485497e-14 L14.0059397,2.26485497e-14 Z\" />\r\n  </svg>\r\n);\r\n\r\nexport default Icon;\r\n","import React, {useState} from 'react';\r\nimport AnimateHeight from 'react-animate-height';\r\n\r\nimport './Expandable.scss';\r\n\r\ninterface Props {\r\n  header: React.ReactNode;\r\n  children: React.ReactNode;\r\n  element: React.ElementType;\r\n  className?: string;\r\n  expanded?: boolean;\r\n  inverseExpanded: () => void;\r\n}\r\n\r\nexport const Expandable = (props: Omit<Props, 'expanded'|'inverseExpanded'>) => {\r\n  const [expanded, setExpanded] = useState<boolean>(false);\r\n  const handleToggle = () => {\r\n    setExpanded((prevExpanded: boolean) => !prevExpanded)\r\n  }\r\n\r\n  const { header, children, element: Element, className } = props;\r\n  \r\n  return (\r\n    <Element className={`expandable ${expanded ? 'expanded' : ''} ${className || ''}`}>\r\n      <div className=\"meta\" onClick={handleToggle}>\r\n        {header}\r\n      </div>\r\n      <AnimateHeight className=\"details\" height={expanded ? 'auto' : 0}>\r\n        {children}\r\n      </AnimateHeight>\r\n    </Element>\r\n  );\r\n}\r\n\r\nexport const ControlledExpandable = (props: Props) =>  {\r\n  const { header, children, element: Element, className } = props;\r\n\r\n  return (\r\n    <Element className={`expandable ${props.expanded ? 'expanded' : ''} ${className || ''}`}>\r\n      <div className=\"meta\" onClick={props.inverseExpanded}>\r\n        {header}\r\n      </div>\r\n      <AnimateHeight className=\"details\" height={props.expanded ? 'auto' : 0}>\r\n        {children}\r\n      </AnimateHeight>\r\n    </Element>\r\n  );\r\n}\r\n","import Spell from 'common/SPELLS/Spell';\r\nimport { CastEvent, DamageEvent, HealEvent } from 'parser/core/Events';\r\nimport DamageTracker from 'parser/shared/modules/AbilityTracker';\r\n\r\nclass FilteredDamageTracker extends DamageTracker {\r\n  castObservers: any[] = [];\r\n\r\n  onDamage(event: DamageEvent) {\r\n    if (!this.shouldProcessEvent(event)) {\r\n      return;\r\n    }\r\n    super.onDamage(event);\r\n  }\r\n\r\n  onHeal(event: HealEvent) {\r\n    if (!this.shouldProcessEvent(event)) {\r\n      return;\r\n    }\r\n    super.onHeal(event);\r\n  }\r\n\r\n  onCast(event: CastEvent) {\r\n    if (!this.shouldProcessEvent(event)) {\r\n      return;\r\n    }\r\n    this.broadcastCastEvent(event);\r\n    super.onCast(event);\r\n  }\r\n\r\n  shouldProcessEvent(event: any) {\r\n    return false;\r\n  }\r\n\r\n  subscribeToCastEvent(fn: any) {\r\n    this.castObservers.push(fn);\r\n  }\r\n\r\n  subscribeInefficientCast(spells: Spell[], messageFunction: any) {\r\n    this.subscribeToCastEvent((event: any) => {\r\n      const spell = spells.find(s => event.ability.guid === s.id);\r\n      if (spell) {\r\n        event.meta = event.meta || {};\r\n        event.meta.isInefficientCast = true;\r\n        event.meta.inefficientCastReason = messageFunction(spell);\r\n      }\r\n    });\r\n  }\r\n\r\n  broadcastCastEvent(event: CastEvent) {\r\n    this.castObservers.forEach((subscriber) => subscriber(event));\r\n  }\r\n}\r\n\r\nexport default FilteredDamageTracker;\r\n"],"sourceRoot":""}