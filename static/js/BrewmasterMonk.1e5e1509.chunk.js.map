{"version":3,"sources":["parser/monk/brewmaster/modules/core/HealingDone.ts","parser/monk/brewmaster/modules/core/DamageTaken.ts","parser/monk/brewmaster/modules/core/HealingReceived.js","parser/monk/brewmaster/modules/spells/HighTolerance.js","parser/monk/brewmaster/modules/core/StaggerFabricator.ts","parser/monk/brewmaster/modules/core/Stagger.tsx","parser/monk/brewmaster/modules/Abilities.ts","parser/monk/brewmaster/constants.js","parser/monk/brewmaster/modules/spells/BlackoutCombo.js","parser/monk/brewmaster/modules/core/SharedBrews.ts","parser/monk/brewmaster/modules/spells/KegSmash.js","parser/monk/brewmaster/modules/spells/TigerPalm.tsx","parser/monk/brewmaster/modules/spells/BlackOxBrew.js","parser/monk/brewmaster/modules/core/BrewCDR.tsx","parser/monk/brewmaster/modules/core/GlobalCooldown.js","parser/monk/brewmaster/modules/core/Channeling.js","parser/monk/brewmaster/modules/spells/RushingJadeWind.js","parser/monk/brewmaster/modules/spells/PurifyingBrew.tsx","parser/monk/brewmaster/modules/spells/Shuffle.tsx","parser/monk/brewmaster/modules/core/Checklist/Component.tsx","parser/monk/brewmaster/modules/spells/CelestialBrew.tsx","parser/monk/brewmaster/modules/core/Checklist/Module.tsx","parser/monk/brewmaster/modules/spells/BreathOfFire.js","parser/monk/brewmaster/modules/spells/CelestialFortune.js","parser/monk/brewmaster/normalizers/GiftOfTheOx.js","parser/monk/brewmaster/modules/spells/GiftOfTheOx.js","parser/monk/brewmaster/modules/features/AlwaysBeCasting.js","parser/monk/brewmaster/modules/features/StaggerPoolGraph.tsx","parser/monk/brewmaster/normalizers/ExpelHarm.js","parser/monk/brewmaster/CombatLogParser.ts","interface/statistics/components/BoringSpellValueText/index.tsx","parser/core/calculateEffectiveDamage.js","interface/statistics/components/BoringValueText/index.tsx","parser/shared/modules/features/Checklist/helpers/calculateMedian.js","parser/shared/modules/features/Checklist/helpers/average.js","parser/shared/modules/features/Checklist/helpers/harmonic.js","parser/shared/modules/features/Checklist/Rule.tsx","parser/shared/modules/features/Checklist/Requirement.tsx","parser/shared/modules/features/Checklist/helpers/performanceForThresholds.js","parser/shared/modules/features/Checklist/index.js","parser/shared/modules/features/Checklist/PreparationRule.js","parser/shared/modules/features/Checklist/GenericCastEfficiencyRequirement.js","common/colorForPerformance.ts","../node_modules/react-animate-height/lib/AnimateHeight.js","parser/shared/ExecuteHelper.ts","interface/icons/Dropdown.js","interface/common/Expandable.tsx","parser/monk/shared/modules/spells/TouchOfDeath.js","parser/monk/shared/modules/covenants/FallenOrder.tsx","parser/shared/modules/hit-tracking/IgnoredAbilities.ts","parser/shared/modules/hit-tracking/utilities.ts"],"names":["HealingDone","options","addEventListener","Events","absorbed","to","SELECTED_PLAYER","spell","SPELLS","STAGGER","onStagger","event","this","_subtractHealingByAbsorb","amount","CoreHealingDone","DamageTaken","_staggeredDamage","onToPlayerAbsorbed","_subtractDamage","extraAbility","undefined","guid","CoreDamageTaken","HealingReceived","args","HealingReceivedExternal","HealingReceivedSelf","active","heal","onHeal","sourceID","owner","playerId","Statistic","position","STATISTIC_ORDER","CORE","size","tooltip","formatThousands","label","src","style","border","alt","formatNumber","fightDuration","Analyzer","HIGH_TOLERANCE_HASTE","LIGHT_STAGGER_DEBUFF","id","MODERATE_STAGGER_DEBUFF","HEAVY_STAGGER_DEBUFF","hasHighTolerance","combatant","hasTalent","HIGH_TOLERANCE_TALENT","hasteFnGenerator","value","haste","HighTolerance","staggerDurations","_staggerLevel","_lastDebuffApplied","selectedCombatant","applydebuff","onApplyDebuff","removedebuff","onRemoveDebuff","fightend","onFightend","Object","keys","map","key","reduce","prev","cur","lightDuration","moderateDuration","heavyDuration","ability","timestamp","fight","end_time","OPTIONAL","noneDuration","formatPercentage","SpellIcon","meanHaste","STAGGER_THRESHOLDS","StaggerFabricator","_lastKnownMaxHp","_initialized","_previousBuff","eventEmitter","ht","_staggerPool","offset_time","cast","PURIFYING_BREW","_pbCast","_absorb","damage","_damage","death","_death","staggerEvent","_fab","EventType","AddStagger","fabricateEvent","_updateHaste","overage","Math","max","RemoveStagger","type","reason","overheal","newPooledDamage","sourceEvent","currentBuff","staggerRatio","maxHitPoints","_applyHasteLoss","_applyHasteGain","SPIRIT_LINK_TOTEM_REDISTRIBUTE","addStagger","STAGGER_TAKEN","removeStagger","__fabricated","prepull","purifyPercentage","dependencies","EventEmitter","Haste","Stagger","totalPhysicalStaggered","totalMagicalStaggered","totalStaggerTaken","staggerMissingFromFight","fab","EventFilter","_addstagger","_removestagger","_fightend","damageAvoided","totalStaggered","trigger","staggerPool","Abilities","KEG_SMASH","category","SPELL_CATEGORIES","ROTATIONAL","cooldown","charges","castEfficiency","suggestion","gcd","static","BLACKOUT_KICK_BRM","BREATH_OF_FIRE","isDefensive","buffSpellId","BREATH_OF_FIRE_DEBUFF","TIGER_PALM","RUSHING_JADE_WIND_TALENT_BREWMASTER","enabled","CRACKLING_JADE_LIGHTNING","base","SPINNING_CRANE_KICK_BRM","ROTATIONAL_AOE","INVOKE_NIUZAO_THE_BLACK_OX","COOLDOWNS","DEFENSIVE","LIGHT_BREWING_TALENT","recommendedEfficiency","CELESTIAL_BREW","BLACK_OX_BREW_TALENT","EXPEL_HARM","FORTIFYING_BREW_BRM","FORTIFYING_BREW_BRM_BUFF","HEALING_ELIXIR_TALENT","DAMPEN_HARM_TALENT","ZEN_MEDITATION","RING_OF_PEACE_TALENT","UTILITY","CHI_TORPEDO_TALENT","ROLL","CELERITY_TALENT","TRANSCENDENCE","TRANSCENDENCE_TRANSFER","SUMMON_BLACK_OX_STATUE_TALENT","PARALYSIS","LEG_SWEEP","TIGER_TAIL_SWEEP_TALENT","PROVOKE","SPEAR_HAND_STRIKE","DETOX_ENERGY","VIVIFY","TIGERS_LUST_TALENT","CoreAbilities","GIFT_OF_THE_OX_SPELLS","FORTIFYING_BREW","GIFT_OF_THE_OX_1","GIFT_OF_THE_OX_2","GIFT_OF_THE_OX_3","GIFT_OF_THE_OX_4","GIFT_OF_THE_OX_5","GIFT_OF_THE_OX_6","GIFT_OF_THE_OX_7","GIFT_OF_THE_OX_8","GIFT_OF_THE_OX_SPELL_IDS","SPELLS_WHICH_REMOVE_BOC","BlackoutCombo","blackoutComboConsumed","blackoutComboBuffs","lastBlackoutComboCast","spellsBOCWasUsedOn","statisticOrder","BLACKOUT_COMBO_TALENT","applybuff","by","BLACKOUT_COMBO_BUFF","onApplyBuff","refreshbuff","onRefreshBuff","onCast","actual","isLessThan","minor","average","major","spellId","when","isGreaterThan","addSuggestion","suggest","recommended","SpellLink","icon","i18n","_","round","regular","wastedPerc","sort","a","b","name","BREWS","SharedBrews","spellUsable","spellHistory","slice","filter","isOnCooldown","forEach","reduceCooldown","finalBrew","length","SpellUsable","SpellHistory","KegSmash","totalCasts","bocHits","cdr","bocCDR","wastedCDR","wastedBocCDR","_bocBuffActive","onGainBOC","removebuff","onLoseBOC","actualReduction","brews","actualBocReduction","boc","isConditional","prototype","hasOwnProperty","call","BETTER_SPELLS","RUSHING_JADE_WIND","hasBuff","CHI_BURST_TALENT","CHI_WAVE_TALENT","TigerPalm","badCasts","normalHits","bocBuffActive","bocApplyToTP","statTracker","checkBadTP","onDamage","availableSpells","entry","isAvailable","meta","isInefficientCast","inefficientCastReason","badCastSuggestion","totalBocHits","ThresholdStyle","PERCENTAGE","StatTracker","BlackOxBrew","casts","cd","cooldownRemaining","abilities","getExpectedCooldownDuration","cooldownTriggerEvent","_trackCdr","endCooldown","_resetPB","_resetCB","suggestionThreshold","BrewCDR","_totalHaste","_newHaste","_lastHasteChange","ks","tp","bob","start_time","ChangeHaste","_finalizeHaste","toFixed","totalCDR","cooldownReductionRatio","oldHaste","newHaste","getAbility","getCooldown","GlobalCooldown","CoreGlobalCooldown","Channeling","onRemoveBuff","beginChannel","isChannelingSpell","log","_currentChannel","endChannel","CoreChanneling","RUSHING_JADE_WIND_BUFF","RushingJadeWind","uptime","getBuffUptime","uptimeThreshold","PurifyingBrew","purifies","purifyDelays","heavyPurifies","_heavyStaggerDropped","_lastHit","_msTilPurify","spells","_removeHeavyStagger","purifyDelaySuggestion","spec","mark","transform","calculate","as","formatTime","encoding","x","field","axis","labelExpr","grid","title","scale","zero","y","format","totalPurified","totalPurifies","minPurify","maxPurify","avgPurifyDelay","meanPurify","FooterChart","data","gap","push","delay","hasHeavyStagger","Cast","msgs","markupPurify","console","warn","Infinity","total","PURIFY_DELAY_THRESHOLD","SECONDS","Shuffle","hitsWith","hitsWithout","enemies","_damageTaken","shouldIgnore","SHUFFLE","uptimeSuggestionThreshold","Enemies","Component","thresholds","AbilityRequirement","props","GenericCastEfficiencyRequirement","getCastEfficiencyForSpellId","Rule","onClick","e","preventDefault","description","PURIFIED_CHI","Requirement","goodCBCasts","performanceMethod","PERFORMANCE_METHOD","HARMONIC","href","shuffleHits","purifyDelay","TOUCH_OF_DEATH","badTp","bocTp","bocDpsWaste","rjw","PreparationRule","CelestialBrew","_absorbs","_currentAbsorb","_currentChiStacks","_expireTime","_cbAbsorb","_resetAbsorb","_expireAbsorb","_purifiedChiApplied","applybuffstack","_purifiedChiStackApplied","_expirePurifiedChi","_finalize","goodCastSuggestion","avgAbsorb","absorb","wastedAbsorb","wasted","avgStacks","stacks","fold","tickCount","stack","color","legend","domain","range","order","expireChi","error","Checklist","combatants","prep","pb","shuffle","cb","selected","dpsWasteThreshold","bocEmpoweredThreshold","BaseChecklist","Combatants","CastEfficiency","PreparationRuleAnalyzer","BreathOfFire","hitsWithBoF","hitsWithoutBoF","onDamageTaken","mitigatedHits","enemy","CelestialFortune","_totalHealing","critBonusHealing","_overhealing","_healingByEntityBySpell","_currentAbsorbs","_lastMaxHp","_nextCFHeal","onAbsorb","stats","baseCritPercentage","currentCritPercentage","CELESTIAL_FORTUNE_HEAL","bonusCritRatio","_queueHealing","_addHealing","sourceAbsorbs","_addAbsorb","sourceId","totalCFAmount","totalAmount","abs","_initHealing","amountAbsorbed","crit","cfBonus","hps","playerSpan","float","players","SPECS","specId","specClassName","className","replace","SpecIcon","entries","objA","obj","tableEntries","width","Number","Icon","ITEMS","ItemIcon","backgroundColor","url","render","Panel","marginTop","marginBottom","padding","GiftOfTheOx","events","includes","__modified","EventsNormalizer","totalHealing","agiBonusHealing","wdpsBonusHealing","_baseAgiHealing","masteryBonusHealing","_wdps","orbsGenerated","orbsConsumed","expelHarmCasts","expelHarmOrbsConsumed","expelHarmOverhealing","_lastEHTimestamp","_orbGenerated","_expelCast","_gotoxHeal","calculatePrimaryStat","mainHand","itemLevel","denom","currentAgilityRating","currentMasteryPercentage","masteryPercentage","AlwaysBeCasting","totalTimeWasted","CoreAlwaysBeCasting","StaggerPoolGraph","_hpEvents","_staggerEvents","_deathEvents","_purifyEvents","_lastHp","_heal","hitPoints","previousTimestamp","explanation","plot","xAxis","nice","layer","line","interpolate","strokeWidth","selection","hover","empty","on","nearest","condition","not","filled","combined","minHeight","height","BaseChart","deaths","isGotOxHeal","Heal","isCFHeal","ExpelHarm","idx","i","target","CombatLogParser","CoreCombatLogParser","specModules","healingDone","healingReceived","damageTaken","stagger","staggerFabricator","brewCdr","channeling","globalCooldown","arcaneTorrent","ArcaneTorrent","checklist","alwaysBeCasting","staggerPoolGraph","purifyingBrew","celestialBrew","blackoutCombo","kegSmash","tigerPalm","bof","highTolerance","cf","gotox","GiftOfTheOxStat","touchOfDeath","TouchOfDeath","gotoxNorm","ehNorm","ExpelHarmNorm","fallenOrder","FallenOrder","BoringSpellValueText","children","calculateEffectiveDamage","increase","raw","BoringValue","calculateMedian","values","arr","half","floor","c","p","harmonic","cum","val","RuleContext","React","createContext","useState","requirementPerformances","performance","passed","expanded","state","setState","calculateRulePerformance","useCallback","DEFAULT","min","MEDIAN","AVERAGE","LOWEST","FIRST","Error","requirements","Array","isArray","some","child","isValidElement","Provider","prevState","element","inverseExpanded","header","colorForPerformance","Dropdown","Information","setPerformance","NUMBER","THOUSANDS","DECIMAL","BOOLEAN","valueTooltip","prefix","suffix","thresholdsN","formatThresholdsActual","marginLeft","Tooltip","content","minWidth","marginRight","transition","performanceForGreaterThanThresholds","performanceForLessThanThresholds","isEqual","performanceForThresholds","PureComponent","Consumer","potionsUsed","bestPotionUsed","itemsEnchanted","itemsBestEnchanted","weaponsEnhanced","bestWeaponEnhancements","higherFlaskPresent","flaskPresent","higherFoodPresent","foodPresent","renderEnchantRequirements","renderWeaponEnhancementRequirements","renderPotionRequirements","renderFlaskRequirements","renderFoodRequirements","others","captureException","isMaxCasts","maxCasts","efficiency","gotMaxCasts","averageIssueEfficiency","majorIssueEfficiency","defineProperty","exports","_typeof","Symbol","iterator","constructor","_extends","assign","arguments","source","_createClass","defineProperties","descriptor","enumerable","configurable","writable","Constructor","protoProps","staticProps","_react2","_interopRequireDefault","require","_propTypes2","_classnames2","__esModule","default","_defineProperty","ANIMATION_STATE_CLASSES","animating","animatingUp","animatingDown","animatingToHeightZero","animatingToHeightAuto","animatingToHeightSpecific","staticHeightZero","staticHeightAuto","staticHeightSpecific","PROPS_TO_OMIT","omit","_len","_key","res","objectKeys","indexOf","cancelAnimationFrames","requestAnimationFrameIDs","cancelAnimationFrame","isNumber","n","isNaN","parseFloat","isFinite","isPercentage","search","substr","runCallback","callback","params","AnimateHeight","_React$Component","instance","TypeError","_classCallCheck","_this","self","ReferenceError","_possibleConstructorReturn","__proto__","getPrototypeOf","animationFrameIDs","overflow","animationStateClasses","getStaticStateClasses","shouldUseTransitions","subClass","superClass","create","setPrototypeOf","_inherits","contentElement","hideContent","prevProps","_this2","_props","duration","onAnimationEnd","onAnimationStart","_cx","showContent","contentHeight","offsetHeight","totalDuration","newHeight","timeoutState","isCurrentHeightAuto","timeoutAnimationStateClasses","clearTimeout","timeoutID","animationClassesTimeoutID","requestAnimationFrame","startAnimationHelper","setTimeout","display","_cx2","_cx3","_this3","_props2","animateOpacity","applyInlineTransitions","contentClassName","easing","_state","componentStyle","WebkitTransition","contentStyle","opacity","componentClasses","ariaHidden","createElement","apply","concat","ref","el","propTypes","bool","object","any","isRequired","string","number","propName","componentName","func","defaultProps","ExecuteHelper","inExecuteWindow","inHealthExecuteWindow","executeWindowStart","lastExecuteHitTimestamp","totalExecuteWindowDuration","castsWithExecute","executeSources","onGeneralDamage","executeSpells","onExecuteCast","onExecuteDamage","executeOutsideRangeEnablers","applyExecuteEnablerBuff","removeExecuteEnablerBuff","onFightEnd","lowerThreshold","upperThreshold","isTargetInExecuteRange","isTargetInReverseExecuteRange","usable","allOnCD","targetIsFriendly","areExecuteSpellsOnCD","isExecuteUsableOutsideExecuteRange","isTargetInHealthExecuteWindow","modifiesDamage","damageModifier","other","xmlns","viewBox","d","Expandable","setExpanded","Element","prevExpanded","ControlledExpandable","MINUTE","adjustMaxCasts","add","ceil","totalExecuteDuration","windDamage","brewDamage","mistDamage","mistHealing","mistOverhealing","cloneMap","Map","hasCovenant","COVENANTS","VENTHYR","FALLEN_ORDER_CAST","summon","FALLEN_ORDER_OX_CLONE","FALLEN_ORDER_TIGER_CLONE","FALLEN_ORDER_CRANE_CLONE","trackSummons","SELECTED_PLAYER_PET","FALLEN_ORDER_ENVELOPING_MIST","FALLEN_ORDER_SOOTHING_MIST","mistHealingTracker","FALLEN_ORDER_KEG_SMASH","FALLEN_ORDER_BREATH_OF_FIRE","brewDamageTracker","FALLEN_ORDER_SPINNING_CRANE_KICK","FISTS_OF_FURY_DAMAGE","windDamageTracker","MELEE","handleMelee","set","targetID","cloneType","get","mistDamageTracker","totalDamage","STATISTIC_CATEGORY","IGNORED","magic","MAGIC_SCHOOLS","ids","PHYSICAL","sourceIsFriendly","getEntities","notableEnemy","IgnoredAbilities"],"mappings":"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","file":"static/js/BrewmasterMonk.1e5e1509.chunk.js","sourcesContent":["import SPELLS from 'common/SPELLS';\r\nimport { Options, SELECTED_PLAYER } from 'parser/core/Analyzer';\r\nimport Events, { AbsorbedEvent } from 'parser/core/Events';\r\n\r\nimport CoreHealingDone from 'parser/shared/modules/throughput/HealingDone';\r\n\r\nclass HealingDone extends CoreHealingDone {\r\n  constructor(options: Options) {\r\n    super(options);\r\n\r\n    this.addEventListener(Events.absorbed.to(SELECTED_PLAYER).spell(SPELLS.STAGGER), this.onStagger);\r\n  }\r\n\r\n  onStagger(event: AbsorbedEvent) {\r\n    // This is the same correction as damage taken for Brewmaster monks\r\n    // When stagger removes damage from an attack it is not a true heal but just delays the damage to be taken by a dot\r\n    // this needs to be subtrached from the damage taken but also the healing done.\r\n\r\n    this._subtractHealingByAbsorb(event, event.amount, 0, 0);\r\n  }\r\n}\r\n\r\nexport default HealingDone;\r\n","import CoreDamageTaken from 'parser/shared/modules/throughput/DamageTaken';\r\nimport SPELLS from 'common/SPELLS';\r\nimport Events, { AbsorbedEvent } from 'parser/core/Events';\r\nimport { Options, SELECTED_PLAYER } from 'parser/core/Analyzer';\r\n\r\nclass DamageTaken extends CoreDamageTaken {\r\n  _staggeredDamage: { [guid: number]: number } = {};\r\n\r\n  constructor(options: Options) {\r\n    super(options);\r\n\r\n    this.addEventListener(Events.absorbed.to(SELECTED_PLAYER).spell(SPELLS.STAGGER), this.onToPlayerAbsorbed);\r\n  }\r\n\r\n  onToPlayerAbsorbed(event: AbsorbedEvent) {\r\n    // The `damage` events of Brewmaster Monks always includes the amount staggered as \"absorbed\" damage,\r\n    // but this absorbed damage might also include absorbs received from other people (e.g. Power Word:\r\n    // Shield) so we can't just ignore it completely.Luckily the logs give us another event that shows\r\n    // just the damage staggered, namely an `absorbed` event by the Stagger spell. We can safely use this\r\n    // to reduce the damage taken as it can only be caused by this. If Stagger gets absorbed by a shield\r\n    // such as Power Word: Shield, it will trigger an `absorbed` event with as spell PW:S, NOT Stagger,\r\n    // so this also works nicely with external absorbs.\r\n\r\n    this._subtractDamage(event, 0, event.amount, 0, 0, event.extraAbility);\r\n    if (this._staggeredDamage[event.extraAbility.guid] === undefined) {\r\n      this._staggeredDamage[event.extraAbility.guid] = 0;\r\n    }\r\n    this._staggeredDamage[event.extraAbility.guid] += event.amount;\r\n  }\r\n\r\n  staggeredByAbility(guid: number) {\r\n    return this._staggeredDamage[guid] !== undefined ? this._staggeredDamage[guid] : 0;\r\n  }\r\n}\r\n\r\nexport default DamageTaken;\r\n","import React from 'react';\r\nimport { formatThousands, formatNumber } from 'common/format';\r\nimport Analyzer, { SELECTED_PLAYER } from 'parser/core/Analyzer';\r\nimport STATISTIC_ORDER from 'interface/others/STATISTIC_ORDER';\r\nimport Statistic from 'interface/statistics/Statistic';\r\nimport BoringValue from 'interface/statistics/components/BoringValueText';\r\nimport Events from 'parser/core/Events';\r\n\r\nclass HealingReceived extends Analyzer {\r\n  HealingReceivedExternal = 0;\r\n  HealingReceivedSelf = 0;\r\n\r\n  constructor(...args) {\r\n    super(...args);\r\n    // Disabling this module i don't think its right and it might add confusion.\r\n    this.active = false;\r\n    this.addEventListener(Events.heal.to(SELECTED_PLAYER), this.onHeal);\r\n  }\r\n\r\n  onHeal(event) {\r\n    if (event.sourceID === this.owner.playerId) {\r\n      this.HealingReceivedSelf += event.amount;\r\n    } else {\r\n      this.HealingReceivedExternal += event.amount;\r\n    }\r\n  }\r\n\r\n  statistic() {\r\n    return (\r\n      <Statistic\r\n        position={STATISTIC_ORDER.CORE(2)}\r\n        size=\"flexible\"\r\n        tooltip={(\r\n          <>\r\n            Healing received:\r\n            <ul>\r\n              <li>From self: {formatThousands(this.HealingReceivedSelf)}</li>\r\n              <li>From external sources: {formatThousands(this.HealingReceivedExternal)}</li>\r\n            </ul>\r\n            The total healing received was {formatThousands(this.HealingReceivedSelf + this.HealingReceivedExternal)}\r\n          </>\r\n        )}\r\n      >\r\n        {/*dunno if this works here. I couldn't see it in the page then saw it was disabled. Updated the element nonetheless.*/}\r\n        <BoringValue\r\n          label={<><img\r\n            src=\"/img/healing.png\"\r\n            style={{ border: 0 }}\r\n            alt=\"Healing\"\r\n          /> External healing received</>}\r\n        >\r\n          <>\r\n            {formatNumber((this.HealingReceivedExternal) / this.owner.fightDuration * 1000)} HPS\r\n          </>\r\n        </BoringValue>\r\n      </Statistic>\r\n    );\r\n  }\r\n}\r\n\r\nexport default HealingReceived;\r\n","import React from 'react';\r\nimport SpellIcon from 'common/SpellIcon';\r\nimport STATISTIC_ORDER from 'interface/others/STATISTIC_ORDER';\r\nimport Statistic from 'interface/statistics/Statistic';\r\nimport HasteIcon from 'interface/icons/Haste';\r\nimport BoringValue from 'interface/statistics/components/BoringValueText';\r\nimport SPELLS from 'common/SPELLS';\r\nimport { formatPercentage, formatThousands } from 'common/format';\r\n\r\nimport Analyzer, { SELECTED_PLAYER } from 'parser/core/Analyzer';\r\nimport Events from 'parser/core/Events';\r\n\r\nexport const HIGH_TOLERANCE_HASTE = {\r\n  [SPELLS.LIGHT_STAGGER_DEBUFF.id]: 0.08,\r\n  [SPELLS.MODERATE_STAGGER_DEBUFF.id]: 0.12,\r\n  [SPELLS.HEAVY_STAGGER_DEBUFF.id]: 0.15,\r\n};\r\n\r\nfunction hasHighTolerance(combatant) {\r\n  return combatant.hasTalent(SPELLS.HIGH_TOLERANCE_TALENT.id);\r\n}\r\n\r\nfunction hasteFnGenerator(value) {\r\n  return { haste: combatant => hasHighTolerance(combatant) ? value : 0.0 };\r\n}\r\n\r\nexport const HIGH_TOLERANCE_HASTE_FNS = {\r\n  [SPELLS.LIGHT_STAGGER_DEBUFF.id]: hasteFnGenerator(0.08),\r\n  [SPELLS.MODERATE_STAGGER_DEBUFF.id]: hasteFnGenerator(0.12),\r\n  [SPELLS.HEAVY_STAGGER_DEBUFF.id]: hasteFnGenerator(0.15),\r\n};\r\n\r\nclass HighTolerance extends Analyzer {\r\n  get meanHaste() {\r\n    return Object.keys(HIGH_TOLERANCE_HASTE)\r\n      .map(key => this.staggerDurations[key] * HIGH_TOLERANCE_HASTE[key])\r\n      .reduce((prev, cur) => prev + cur, 0) / this.owner.fightDuration;\r\n  }\r\n\r\n  get lightDuration() {\r\n    return this.staggerDurations[SPELLS.LIGHT_STAGGER_DEBUFF.id];\r\n  }\r\n\r\n  get moderateDuration() {\r\n    return this.staggerDurations[SPELLS.MODERATE_STAGGER_DEBUFF.id];\r\n  }\r\n\r\n  get heavyDuration() {\r\n    return this.staggerDurations[SPELLS.HEAVY_STAGGER_DEBUFF.id];\r\n  }\r\n\r\n  get noneDuration() {\r\n    return this.owner.fightDuration - this.lightDuration - this.moderateDuration - this.heavyDuration;\r\n  }\r\n\r\n  staggerDurations = {\r\n    [SPELLS.LIGHT_STAGGER_DEBUFF.id]: 0,\r\n    [SPELLS.MODERATE_STAGGER_DEBUFF.id]: 0,\r\n    [SPELLS.HEAVY_STAGGER_DEBUFF.id]: 0,\r\n  };\r\n  _staggerLevel = null;\r\n  _lastDebuffApplied = 0;\r\n\r\n  constructor(...args) {\r\n    super(...args);\r\n    this.active = hasHighTolerance(this.selectedCombatant);\r\n    this.addEventListener(Events.applydebuff.to(SELECTED_PLAYER), this.onApplyDebuff);\r\n    this.addEventListener(Events.removedebuff.to(SELECTED_PLAYER), this.onRemoveDebuff);\r\n    this.addEventListener(Events.fightend, this.onFightend);\r\n  }\r\n\r\n  onApplyDebuff(event) {\r\n    if (!HIGH_TOLERANCE_HASTE[event.ability.guid]) {\r\n      return;\r\n    }\r\n    this._lastDebuffApplied = event.timestamp;\r\n    this._staggerLevel = event.ability.guid;\r\n  }\r\n\r\n  onRemoveDebuff(event) {\r\n    if (!HIGH_TOLERANCE_HASTE[event.ability.guid]) {\r\n      return;\r\n    }\r\n    this.staggerDurations[event.ability.guid] += event.timestamp - this._lastDebuffApplied;\r\n    this._staggerLevel = null;\r\n  }\r\n\r\n  onFightend() {\r\n    if (this._staggerLevel !== null) {\r\n      this.staggerDurations[this._staggerLevel] += this.owner.fight.end_time - this._lastDebuffApplied;\r\n    }\r\n  }\r\n\r\n  statistic() {\r\n    return (\r\n      <Statistic\r\n        position={STATISTIC_ORDER.OPTIONAL()}\r\n        size=\"flexible\"\r\n        tooltip={(\r\n          <>\r\n            You spent:\r\n            <ul>\r\n              <li><strong>{formatThousands(this.noneDuration / 1000)}s</strong> ({formatPercentage(this.noneDuration / this.owner.fightDuration)}%) without Stagger.</li>\r\n              <li><strong>{formatThousands(this.lightDuration / 1000)}s</strong> ({formatPercentage(this.lightDuration / this.owner.fightDuration)}%) in Light Stagger.</li>\r\n              <li><strong>{formatThousands(this.moderateDuration / 1000)}s</strong> ({formatPercentage(this.moderateDuration / this.owner.fightDuration)}%) in Moderate Stagger.</li>\r\n              <li><strong>{formatThousands(this.heavyDuration / 1000)}s</strong> ({formatPercentage(this.heavyDuration / this.owner.fightDuration)}%) in Heavy Stagger.</li>\r\n            </ul>\r\n          </>\r\n        )}\r\n      >\r\n        <BoringValue label={<><SpellIcon id={SPELLS.HIGH_TOLERANCE_TALENT.id} /> Avg. Haste from High Tolerance</>}>\r\n          <>\r\n            <HasteIcon /> {formatPercentage(this.meanHaste)} %\r\n          </>\r\n        </BoringValue>\r\n      </Statistic>\r\n    );\r\n  }\r\n}\r\n\r\nexport default HighTolerance;\r\n","import SPELLS from 'common/SPELLS';\r\nimport Analyzer, { Options, SELECTED_PLAYER } from 'parser/core/Analyzer';\r\nimport EventEmitter from 'parser/core/modules/EventEmitter';\r\nimport Events, { Ability, AbsorbedEvent, AnyEvent, CastEvent, DamageEvent, DeathEvent, Event, EventType } from 'parser/core/Events';\r\nimport Haste from 'parser/shared/modules/Haste';\r\n\r\nimport HighTolerance, { HIGH_TOLERANCE_HASTE } from '../spells/HighTolerance';\r\n\r\ntype StaggerEventType = EventType.AddStagger | EventType.RemoveStagger\r\n\r\nconst PURIFY_BASE = 0.5;\r\n\r\nconst STAGGER_THRESHOLDS = {\r\n  HEAVY: 0.6,\r\n  MODERATE: 0.3,\r\n  LIGHT: 0.0,\r\n};\r\n\r\nexport interface AddStaggerEvent extends Event<EventType.AddStagger> {\r\n  amount: number;\r\n  overheal: number;\r\n  newPooledDamage: number;\r\n  extraAbility?: Ability;\r\n  trigger?: AbsorbedEvent;\r\n}\r\n\r\nexport interface RemoveStaggerEvent extends Event<EventType.RemoveStagger> {\r\n  amount: number;\r\n  overheal: number;\r\n  newPooledDamage: number;\r\n  trigger?: CastEvent | DeathEvent;\r\n}\r\n\r\nexport type MaxHPEvent = AnyEvent & { maxHitPoints?: number; }\r\n\r\n/**\r\n * Fabricate events corresponding to stagger pool updates. Each stagger\r\n * tick, purify, and stagger absorb generates one event.\r\n */\r\nclass StaggerFabricator extends Analyzer {\r\n  static dependencies = {\r\n    eventEmitter: EventEmitter,\r\n    ht: HighTolerance,\r\n    haste: Haste,\r\n  };\r\n  _lastKnownMaxHp = 0;\r\n  _initialized = false;\r\n  _previousBuff: number = 0;\r\n  protected eventEmitter!: EventEmitter;\r\n  protected ht!: HighTolerance;\r\n  protected haste!: Haste;\r\n\r\n  constructor(options: Options) {\r\n    super(options);\r\n\r\n    //count as uninitialized if fight didn't start at actual fight start time (aka phase)\r\n    this._initialized = (this.owner.fight.offset_time || 0) === 0;\r\n\r\n    this.addEventListener(Events.cast.spell(SPELLS.PURIFYING_BREW), this._pbCast);\r\n    this.addEventListener(Events.absorbed, this._absorb);\r\n    this.addEventListener(Events.damage.to(SELECTED_PLAYER), this._damage);\r\n    this.addEventListener(Events.death.to(SELECTED_PLAYER), this._death);\r\n  }\r\n\r\n  _staggerPool = 0;\r\n\r\n  get staggerPool() {\r\n    return this._staggerPool;\r\n  }\r\n\r\n  get purifyPercentage() {\r\n    return PURIFY_BASE;\r\n  }\r\n\r\n  addStagger(event: MaxHPEvent, amount: number) {\r\n    this._staggerPool += amount;\r\n    const staggerEvent = this._fab(EventType.AddStagger, event, amount);\r\n    this.eventEmitter.fabricateEvent(staggerEvent, event);\r\n    if (this.ht && this.ht.active) {\r\n      this._updateHaste(event, staggerEvent);\r\n    }\r\n  }\r\n\r\n  removeStagger(event: MaxHPEvent, amount: number) {\r\n    this._staggerPool -= amount;\r\n    const overage = (this._staggerPool < 0) ? this._staggerPool : 0;\r\n    // sometimes a stagger tick is recorded immediately after death.\r\n    // this ensures we don't go into negative stagger\r\n    //\r\n    // other sources of flat reduction may also hit this condition\r\n    this._staggerPool = Math.max(this._staggerPool, 0);\r\n    const staggerEvent = this._fab(EventType.RemoveStagger, event, amount, overage);\r\n    this.eventEmitter.fabricateEvent(staggerEvent, event);\r\n    if (this.ht && this.ht.active) {\r\n      this._updateHaste(event, staggerEvent);\r\n    }\r\n    return amount + overage;\r\n  }\r\n\r\n  _fab(type: StaggerEventType, reason: MaxHPEvent, amount: number, overage: number = 0) {\r\n    return {\r\n      timestamp: reason.timestamp,\r\n      type: type,\r\n      amount: amount + overage,\r\n      overheal: -overage,\r\n      newPooledDamage: this._staggerPool,\r\n    };\r\n  }\r\n\r\n  _updateHaste(sourceEvent: MaxHPEvent, staggerEvent: AddStaggerEvent | RemoveStaggerEvent) {\r\n    let currentBuff;\r\n    const staggerRatio = staggerEvent.newPooledDamage / (sourceEvent.maxHitPoints ? sourceEvent.maxHitPoints : this._lastKnownMaxHp);\r\n    if (staggerRatio === 0) {\r\n      currentBuff = null;\r\n    } else if (staggerRatio < STAGGER_THRESHOLDS.MODERATE) {\r\n      currentBuff = SPELLS.LIGHT_STAGGER_DEBUFF.id;\r\n    } else if (staggerRatio < STAGGER_THRESHOLDS.HEAVY) {\r\n      currentBuff = SPELLS.MODERATE_STAGGER_DEBUFF.id;\r\n    } else {\r\n      currentBuff = SPELLS.HEAVY_STAGGER_DEBUFF.id;\r\n    }\r\n\r\n    if (currentBuff !== this._previousBuff) {\r\n      this._previousBuff && this.haste._applyHasteLoss(staggerEvent, HIGH_TOLERANCE_HASTE[this._previousBuff]);\r\n      currentBuff && this.haste._applyHasteGain(staggerEvent, HIGH_TOLERANCE_HASTE[currentBuff]);\r\n      this._previousBuff = currentBuff;\r\n    }\r\n  }\r\n\r\n  private _absorb(event: AbsorbedEvent) {\r\n    if (event.ability.guid !== SPELLS.STAGGER.id) {\r\n      return;\r\n    }\r\n    if (event.extraAbility && event.extraAbility.guid === SPELLS.SPIRIT_LINK_TOTEM_REDISTRIBUTE.id) {\r\n      return;\r\n    }\r\n    this.addStagger(event, event.amount);\r\n  }\r\n\r\n  private _damage(event: DamageEvent) {\r\n    // used for buff tracking\r\n    if (event.maxHitPoints) {\r\n      this._lastKnownMaxHp = event.maxHitPoints;\r\n    }\r\n\r\n    if (event.ability.guid !== SPELLS.STAGGER_TAKEN.id) {\r\n      return;\r\n    }\r\n    const amount = event.amount + (event.absorbed || 0);\r\n    if (!this._initialized) { //if stagger hasn't been initialized (aka new phase), send a fake add stagger event\r\n      this._staggerPool = amount * 19; //stagger lasts for 10 seconds at 0.5s per tick, we can calculate the total stagger remaining in the pool to be 19*tick (1 out of 20 total stacks being removed this tick)\r\n      this.addStagger({\r\n        ...event,\r\n        __fabricated: true,\r\n        prepull: true,\r\n      }, 0); //send empty stagger event to initialized purify etc without tainting the damage staggered statistic\r\n      this._initialized = true;\r\n    } else { //skip this tick's remove event as we only added 19 ticks to the pool\r\n      this.removeStagger(event, amount);\r\n    }\r\n\r\n  }\r\n\r\n  private _pbCast(event: CastEvent) {\r\n    // used for buff tracking\r\n    if (event.maxHitPoints) {\r\n      this._lastKnownMaxHp = event.maxHitPoints;\r\n    }\r\n\r\n    const amount = this._staggerPool * this.purifyPercentage;\r\n    this.removeStagger(event, amount);\r\n  }\r\n\r\n  private _death(event: DeathEvent) {\r\n    const amount = this._staggerPool;\r\n    this.removeStagger(event, amount);\r\n  }\r\n}\r\n\r\nexport default StaggerFabricator;\r\n","import React from 'react';\r\n\r\nimport SPELLS from 'common/SPELLS';\r\nimport SpellIcon from 'common/SpellIcon';\r\nimport { formatNumber, formatPercentage, formatThousands } from 'common/format';\r\nimport Analyzer, { Options } from 'parser/core/Analyzer';\r\nimport Events, { EventType } from 'parser/core/Events';\r\nimport EventFilter from 'parser/core/EventFilter';\r\nimport STATISTIC_ORDER from 'interface/others/STATISTIC_ORDER';\r\nimport Statistic from 'interface/statistics/Statistic';\r\nimport BoringValue from 'interface/statistics/components/BoringValueText';\r\n\r\nimport StaggerFabricator, { AddStaggerEvent, RemoveStaggerEvent } from './StaggerFabricator';\r\n\r\nconst debug = false;\r\nconst PHYSICAL_DAMAGE = 1;\r\n\r\nclass Stagger extends Analyzer {\r\n  static dependencies = {\r\n    fab: StaggerFabricator,\r\n  };\r\n  totalPhysicalStaggered = 0;\r\n  totalMagicalStaggered = 0;\r\n  totalStaggerTaken = 0;\r\n  staggerMissingFromFight = 0;\r\n  protected fab!: StaggerFabricator;\r\n\r\n  constructor(options: Options) {\r\n    super(options);\r\n\r\n    this.addEventListener(new EventFilter(EventType.AddStagger), this._addstagger);\r\n    this.addEventListener(new EventFilter(EventType.RemoveStagger), this._removestagger);\r\n    this.addEventListener(Events.fightend, this._fightend);\r\n  }\r\n\r\n  get totalStaggered() {\r\n    return this.totalPhysicalStaggered + this.totalMagicalStaggered;\r\n  }\r\n\r\n  get pctPurified() {\r\n    return (this.totalStaggered - this.totalStaggerTaken) / this.totalStaggered;\r\n  }\r\n\r\n  statistic() {\r\n    const damageAvoided = this.totalStaggered - this.totalStaggerTaken - this.staggerMissingFromFight;\r\n    return (\r\n      <Statistic\r\n        position={STATISTIC_ORDER.CORE(2)}\r\n        size=\"flexible\"\r\n        tooltip={(\r\n          <>\r\n            Incoming damage added to stagger:\r\n            <ul>\r\n              <li>Total physical damage added to stagger: {formatThousands(this.totalPhysicalStaggered)}</li>\r\n              <li>Total magical damage added to stagger: {formatThousands(this.totalMagicalStaggered)}</li>\r\n            </ul>\r\n            Damage taken from stagger:\r\n            <ul>\r\n              <li>Total damage from stagger dot: {formatThousands(this.totalStaggerTaken)} ({formatPercentage(this.totalStaggerTaken / this.totalStaggered)}% of total staggered)</li>\r\n              <li>Total damage removed from stagger dot before damaging you: {formatThousands(damageAvoided)} ({formatPercentage(damageAvoided / this.totalStaggered)}% of total staggered)</li>\r\n            </ul>\r\n          </>\r\n        )}\r\n      >\r\n        <BoringValue label={<><SpellIcon id={SPELLS.STAGGER.id} /> Damage staggered</>}>\r\n          <>\r\n            {formatNumber(this.totalStaggered)}\r\n          </>\r\n        </BoringValue>\r\n      </Statistic>\r\n    );\r\n  }\r\n\r\n  private _addstagger(event: AddStaggerEvent) {\r\n    if (event.trigger!.extraAbility.type === PHYSICAL_DAMAGE) {\r\n      this.totalPhysicalStaggered += event.amount;\r\n    } else {\r\n      this.totalMagicalStaggered += event.amount;\r\n    }\r\n  }\r\n\r\n  private _removestagger(event: RemoveStaggerEvent) {\r\n    if (event.trigger!.ability && event.trigger!.ability.guid === SPELLS.STAGGER_TAKEN.id) {\r\n      this.totalStaggerTaken += event.amount;\r\n    }\r\n  }\r\n\r\n  private _fightend() {\r\n    this.staggerMissingFromFight = this.fab.staggerPool;\r\n    if (debug) {\r\n      console.log(`Total physical staggered: ${formatNumber(this.totalPhysicalStaggered)}`);\r\n      console.log(`Total magical staggered: ${formatNumber(this.totalMagicalStaggered)}`);\r\n      console.log(`Total taken: ${formatNumber(this.totalStaggerTaken)}`);\r\n      console.log(`Stagger taken after fight: ${formatNumber(this.staggerMissingFromFight)}`);\r\n      console.log(`Damage avoided: ${formatNumber(this.totalPhysicalStaggered + this.totalMagicalStaggered - this.totalStaggerTaken)}`);\r\n    }\r\n  }\r\n}\r\n\r\nexport default Stagger;\r\n","import SPELLS from 'common/SPELLS';\r\nimport CoreAbilities from 'parser/core/modules/Abilities';\r\nimport { SpellbookAbility } from 'parser/core/modules/Ability';\r\n\r\nclass Abilities extends CoreAbilities {\r\n  spellbook(): SpellbookAbility[] {\r\n    const combatant = this.selectedCombatant;\r\n    return [\r\n      // Rotational Spells\r\n      {\r\n        spell: SPELLS.KEG_SMASH,\r\n        category: Abilities.SPELL_CATEGORIES.ROTATIONAL,\r\n        cooldown: haste => 8 / (1 + haste),\r\n        charges: 1,\r\n        castEfficiency: {\r\n          suggestion: true,\r\n        },\r\n        gcd: {\r\n          static: 1000,\r\n        },\r\n      },\r\n      {\r\n        spell: SPELLS.BLACKOUT_KICK_BRM,\r\n        category: Abilities.SPELL_CATEGORIES.ROTATIONAL,\r\n        cooldown: 4,\r\n        castEfficiency: {\r\n          suggestion: true,\r\n        },\r\n        gcd: {\r\n          static: 1000,\r\n        },\r\n      },\r\n      {\r\n        spell: SPELLS.BREATH_OF_FIRE,\r\n        isDefensive: true,\r\n        buffSpellId: SPELLS.BREATH_OF_FIRE_DEBUFF.id,\r\n        category: Abilities.SPELL_CATEGORIES.ROTATIONAL,\r\n        cooldown: 15,\r\n        gcd: {\r\n          static: 1000,\r\n        },\r\n      },\r\n      {\r\n        spell: SPELLS.TIGER_PALM,\r\n        category: Abilities.SPELL_CATEGORIES.ROTATIONAL,\r\n        gcd: {\r\n          static: 1000,\r\n        },\r\n      },\r\n      {\r\n        spell: SPELLS.RUSHING_JADE_WIND_TALENT_BREWMASTER,\r\n        category: Abilities.SPELL_CATEGORIES.ROTATIONAL,\r\n        cooldown: haste => 6 / (1 + haste),\r\n        enabled: combatant.hasTalent(SPELLS.RUSHING_JADE_WIND_TALENT_BREWMASTER.id),\r\n        gcd: {\r\n          static: 1000,\r\n        },\r\n      },\r\n      {\r\n        spell: SPELLS.CRACKLING_JADE_LIGHTNING,\r\n        category: Abilities.SPELL_CATEGORIES.ROTATIONAL,\r\n        gcd: {\r\n          // This was tested in-game (in Legion): it does NOT have a static GCD but a base GCD of 1sec and scales with Haste\r\n          base: 1500,\r\n        },\r\n      },\r\n      {\r\n        spell: SPELLS.SPINNING_CRANE_KICK_BRM,\r\n        category: Abilities.SPELL_CATEGORIES.ROTATIONAL_AOE,\r\n        gcd: {\r\n          static: 1000,\r\n        },\r\n      },\r\n      // Cooldowns\r\n      {\r\n        spell: SPELLS.INVOKE_NIUZAO_THE_BLACK_OX,\r\n        category: Abilities.SPELL_CATEGORIES.COOLDOWNS,\r\n        cooldown: 180,\r\n        gcd: {\r\n          static: 1000,\r\n        },\r\n      },\r\n      {\r\n        spell: SPELLS.PURIFYING_BREW,\r\n        category: Abilities.SPELL_CATEGORIES.DEFENSIVE,\r\n        cooldown: haste => (combatant.hasTalent(SPELLS.LIGHT_BREWING_TALENT) ? 20 : 16) / (1 + haste),\r\n        charges: 2,\r\n        gcd: null,\r\n        castEfficiency: {\r\n          suggestion: true,\r\n          recommendedEfficiency: 0.95,\r\n        },\r\n      },\r\n      {\r\n        spell: SPELLS.CELESTIAL_BREW,\r\n        category: Abilities.SPELL_CATEGORIES.DEFENSIVE,\r\n        cooldown: combatant.hasTalent(SPELLS.LIGHT_BREWING_TALENT) ? 60 : 48,\r\n        gcd: {\r\n          static: 1000,\r\n        },\r\n        castEfficiency: {\r\n          suggestion: true,\r\n          recommendedEfficiency: 0.9,\r\n        },\r\n      },\r\n      {\r\n        spell: SPELLS.BLACK_OX_BREW_TALENT,\r\n        category: Abilities.SPELL_CATEGORIES.DEFENSIVE,\r\n        cooldown: 120,\r\n        castEfficiency: {\r\n          suggestion: false,\r\n          recommendedEfficiency: 0.7,\r\n        },\r\n        enabled: combatant.hasTalent(SPELLS.BLACK_OX_BREW_TALENT.id),\r\n        gcd: null,\r\n      },\r\n      {\r\n        spell: SPELLS.EXPEL_HARM,\r\n        category: Abilities.SPELL_CATEGORIES.DEFENSIVE,\r\n        cooldown: 5,\r\n        gcd: {\r\n          static: 500,\r\n        },\r\n      },\r\n      {\r\n        spell: SPELLS.FORTIFYING_BREW_BRM,\r\n        buffSpellId: SPELLS.FORTIFYING_BREW_BRM_BUFF.id,\r\n        category: Abilities.SPELL_CATEGORIES.DEFENSIVE,\r\n        cooldown: 420,\r\n        gcd: null,\r\n      },\r\n      {\r\n        spell: SPELLS.HEALING_ELIXIR_TALENT,\r\n        category: Abilities.SPELL_CATEGORIES.COOLDOWNS,\r\n        cooldown: 30,\r\n        enabled: combatant.hasTalent(SPELLS.HEALING_ELIXIR_TALENT.id),\r\n        gcd: null,\r\n      },\r\n      {\r\n        spell: SPELLS.DAMPEN_HARM_TALENT,\r\n        buffSpellId: SPELLS.DAMPEN_HARM_TALENT.id,\r\n        category: Abilities.SPELL_CATEGORIES.DEFENSIVE,\r\n        cooldown: 120,\r\n        enabled: combatant.hasTalent(SPELLS.DAMPEN_HARM_TALENT.id),\r\n        gcd: null,\r\n      },\r\n      {\r\n        spell: SPELLS.ZEN_MEDITATION,\r\n        buffSpellId: SPELLS.ZEN_MEDITATION.id,\r\n        category: Abilities.SPELL_CATEGORIES.DEFENSIVE,\r\n        cooldown: 300,\r\n        gcd: null,\r\n      },\r\n      // Utility\r\n      {\r\n        spell: SPELLS.RING_OF_PEACE_TALENT,\r\n        category: Abilities.SPELL_CATEGORIES.UTILITY,\r\n        enabled: combatant.hasTalent(SPELLS.RING_OF_PEACE_TALENT.id),\r\n        gcd: {\r\n          // This was tested in-game (in Legion): it does NOT have a static GCD but a base GCD of 1sec and scales with Haste\r\n          base: 1500,\r\n        },\r\n      },\r\n      {\r\n        spell: SPELLS.CHI_TORPEDO_TALENT,\r\n        category: Abilities.SPELL_CATEGORIES.UTILITY,\r\n        enabled: combatant.hasTalent(SPELLS.CHI_TORPEDO_TALENT.id),\r\n        cooldown: 20,\r\n        charges: 2,\r\n        // Both Roll and Chi Torpedo don't actually have a GCD but block all spells during its animation for about the same duration, so maybe time it in-game and mark it as channeling instead? The issue is you can follow up any ability on the GCD with chi torpedo/roll, so it can still cause overlap.\r\n        gcd: null,\r\n      },\r\n      {\r\n        spell: SPELLS.ROLL,\r\n        category: Abilities.SPELL_CATEGORIES.UTILITY,\r\n        enabled: !combatant.hasTalent(SPELLS.CHI_TORPEDO_TALENT.id),\r\n        cooldown: combatant.hasTalent(SPELLS.CELERITY_TALENT.id) ? 15 : 20,\r\n        charges: combatant.hasTalent(SPELLS.CELERITY_TALENT.id) ? 3 : 2,\r\n        // Both Roll and Chi Torpedo don't actually have a GCD but block all spells during its animation for about the same duration, so maybe time it in-game and mark it as channeling instead? The issue is you can follow up any ability on the GCD with chi torpedo/roll, so it can still cause overlap.\r\n        gcd: null,\r\n      },\r\n      {\r\n        spell: SPELLS.TRANSCENDENCE,\r\n        category: Abilities.SPELL_CATEGORIES.UTILITY,\r\n        gcd: {\r\n          static: 1000,\r\n        },\r\n      },\r\n      {\r\n        spell: SPELLS.TRANSCENDENCE_TRANSFER,\r\n        category: Abilities.SPELL_CATEGORIES.UTILITY,\r\n        gcd: {\r\n          // This was tested in-game (in Legion): it does NOT have a static GCD but a base GCD of 1sec and scales with Haste\r\n          base: 1500,\r\n        },\r\n      },\r\n      {\r\n        spell: SPELLS.SUMMON_BLACK_OX_STATUE_TALENT,\r\n        category: Abilities.SPELL_CATEGORIES.UTILITY,\r\n        enabled: combatant.hasTalent(SPELLS.SUMMON_BLACK_OX_STATUE_TALENT.id),\r\n        gcd: {\r\n          static: 1000,\r\n        },\r\n      },\r\n      {\r\n        spell: SPELLS.PARALYSIS,\r\n        category: Abilities.SPELL_CATEGORIES.UTILITY,\r\n        cooldown: 45,\r\n        gcd: {\r\n          static: 1000,\r\n        },\r\n      },\r\n      {\r\n        spell: SPELLS.LEG_SWEEP,\r\n        category: Abilities.SPELL_CATEGORIES.UTILITY,\r\n        cooldown: combatant.hasTalent(SPELLS.TIGER_TAIL_SWEEP_TALENT.id) ? 50 : 60,\r\n        gcd: {\r\n          static: 1000,\r\n        },\r\n      },\r\n      {\r\n        spell: SPELLS.PROVOKE,\r\n        category: Abilities.SPELL_CATEGORIES.UTILITY,\r\n        cooldown: 8,\r\n        gcd: null,\r\n      },\r\n      {\r\n        spell: SPELLS.SPEAR_HAND_STRIKE,\r\n        cooldown: 15,\r\n        category: Abilities.SPELL_CATEGORIES.UTILITY,\r\n        gcd: null,\r\n      },\r\n      // Its unlikely that these spells will ever be cast but if they are they will show.\r\n      {\r\n        spell: SPELLS.DETOX_ENERGY,\r\n        category: Abilities.SPELL_CATEGORIES.UTILITY,\r\n        cooldown: 8,\r\n        gcd: {\r\n          // This was tested in-game (in Legion): it does NOT have a static GCD but a base GCD of 1sec and scales with Haste\r\n          base: 1500,\r\n        },\r\n      },\r\n      {\r\n        spell: SPELLS.VIVIFY, // don't know if the vivify spell has been updated to the new ID yet\r\n        category: Abilities.SPELL_CATEGORIES.UTILITY,\r\n        gcd: {\r\n          base: 1500,\r\n        },\r\n      },\r\n      {\r\n        spell: SPELLS.TIGERS_LUST_TALENT,\r\n        category: Abilities.SPELL_CATEGORIES.UTILITY,\r\n        enabled: combatant.hasTalent(SPELLS.TIGERS_LUST_TALENT.id),\r\n        cooldown: 30,\r\n        gcd: {\r\n          static: 1000,\r\n        },\r\n      },\r\n    ];\r\n  }\r\n}\r\n\r\nexport default Abilities;\r\n","import SPELLS from 'common/SPELLS';\r\n\r\nexport const BREWS = [\r\n  SPELLS.PURIFYING_BREW,\r\n  SPELLS.FORTIFYING_BREW,\r\n  SPELLS.BLACK_OX_BREW_TALENT,\r\n];\r\n\r\n// Yes there are 7... The cake is a lie (8 really)\r\nexport const GIFT_OF_THE_OX_SPELLS = [\r\n  SPELLS.GIFT_OF_THE_OX_1,\r\n  SPELLS.GIFT_OF_THE_OX_2,\r\n  SPELLS.GIFT_OF_THE_OX_3,\r\n  SPELLS.GIFT_OF_THE_OX_4,\r\n  SPELLS.GIFT_OF_THE_OX_5,\r\n  SPELLS.GIFT_OF_THE_OX_6,\r\n  SPELLS.GIFT_OF_THE_OX_7,\r\n  SPELLS.GIFT_OF_THE_OX_8,\r\n];\r\n\r\nexport const GIFT_OF_THE_OX_SPELL_IDS = GIFT_OF_THE_OX_SPELLS.map(({ id }) => id);\r\n\r\nexport const SPELLS_WHICH_REMOVE_BOC = [\r\n  SPELLS.TIGER_PALM,\r\n  SPELLS.BREATH_OF_FIRE,\r\n  SPELLS.KEG_SMASH,\r\n];\r\n\r\nexport const BASE_AGI = 1468;\r\n","import React from 'react';\r\n\r\nimport Analyzer, { SELECTED_PLAYER } from 'parser/core/Analyzer';\r\nimport SPELLS from 'common/SPELLS';\r\nimport SpellLink from 'common/SpellLink';\r\nimport SpellIcon from 'common/SpellIcon';\r\nimport { formatPercentage } from 'common/format';\r\nimport STATISTIC_ORDER from 'interface/others/STATISTIC_ORDER';\r\nimport Statistic from 'interface/statistics/Statistic';\r\nimport BoringValue from 'interface/statistics/components/BoringValueText';\r\nimport { i18n } from '@lingui/core';\r\nimport { t } from '@lingui/macro';\r\n\r\nimport Events from 'parser/core/Events';\r\n\r\nimport { SPELLS_WHICH_REMOVE_BOC } from '../../constants';\r\n\r\nconst debug = false;\r\nconst BOC_DURATION = 15000;\r\n\r\nclass BlackoutCombo extends Analyzer {\r\n  get dpsWasteThreshold() {\r\n    if (!this.active) {\r\n      return null;\r\n    }\r\n    return {\r\n      actual: this.spellsBOCWasUsedOn[SPELLS.TIGER_PALM.id] / this.blackoutComboBuffs,\r\n      isLessThan: {\r\n        minor: 0.95,\r\n        average: 0.9,\r\n        major: 0.85,\r\n      },\r\n      style: 'percentage',\r\n    };\r\n  }\r\n\r\n  blackoutComboConsumed = 0;\r\n  blackoutComboBuffs = 0;\r\n  lastBlackoutComboCast = 0;\r\n  spellsBOCWasUsedOn = {};\r\n  statisticOrder = STATISTIC_ORDER.OPTIONAL();\r\n\r\n  constructor(...args) {\r\n    super(...args);\r\n    this.active = this.selectedCombatant.hasTalent(SPELLS.BLACKOUT_COMBO_TALENT.id);\r\n    this.addEventListener(Events.applybuff.by(SELECTED_PLAYER).spell(SPELLS.BLACKOUT_COMBO_BUFF), this.onApplyBuff);\r\n    this.addEventListener(Events.refreshbuff.by(SELECTED_PLAYER).spell(SPELLS.BLACKOUT_COMBO_BUFF), this.onRefreshBuff);\r\n    this.addEventListener(Events.cast.by(SELECTED_PLAYER).spell(SPELLS_WHICH_REMOVE_BOC), this.onCast);\r\n  }\r\n\r\n  onApplyBuff(event) {\r\n    debug && console.log('Blackout combo applied');\r\n    this.blackoutComboBuffs += 1;\r\n    this.lastBlackoutComboCast = event.timestamp;\r\n  }\r\n\r\n  onRefreshBuff(event) {\r\n    debug && console.log('Blackout combo refreshed');\r\n    this.blackoutComboBuffs += 1;\r\n    this.lastBlackoutComboCast = event.timestamp;\r\n  }\r\n\r\n  onCast(event) {\r\n    const spellId = event.ability.guid;\r\n    // BOC should be up\r\n    if (this.lastBlackoutComboCast > 0 && this.lastBlackoutComboCast + BOC_DURATION > event.timestamp) {\r\n      this.blackoutComboConsumed += 1;\r\n      if (this.spellsBOCWasUsedOn[spellId] === undefined) {\r\n        this.spellsBOCWasUsedOn[spellId] = 0;\r\n      }\r\n      this.spellsBOCWasUsedOn[spellId] += 1;\r\n    }\r\n    this.lastBlackoutComboCast = 0;\r\n  }\r\n\r\n  suggestions(when) {\r\n    const wastedPerc = (this.blackoutComboBuffs - this.blackoutComboConsumed) / this.blackoutComboBuffs;\r\n\r\n    when(wastedPerc).isGreaterThan(0.1)\r\n      .addSuggestion((suggest, actual, recommended) => suggest(<span>You wasted {formatPercentage(actual)}% of your <SpellLink id={SPELLS.BLACKOUT_COMBO_BUFF.id} /> procs. Try to use the procs as soon as you get them so they are not overwritten.</span>)\r\n        .icon(SPELLS.BLACKOUT_COMBO_BUFF.icon)\r\n        .actual(i18n._(t('monk.brewmaster.suggestions.blackoutCombo.wasted')`${formatPercentage(actual)}% unused`))\r\n        .recommended(`${Math.round(formatPercentage(recommended))}% or less is recommended`)\r\n        .regular(recommended + 0.1).major(recommended + 0.2));\r\n  }\r\n\r\n  statistic() {\r\n    const wastedPerc = (this.blackoutComboBuffs - this.blackoutComboConsumed) / this.blackoutComboBuffs;\r\n\r\n    return (\r\n      <Statistic\r\n        position={STATISTIC_ORDER.OPTIONAL()}\r\n        size=\"flexible\"\r\n        tooltip={(\r\n          <>\r\n            You got total <strong>{this.blackoutComboBuffs}</strong> Blackout Combo procs and used <strong>{this.blackoutComboConsumed}</strong> of them.<br />\r\n            Blackout combo buff usage:\r\n            <ul>\r\n              {Object.keys(this.spellsBOCWasUsedOn)\r\n                .sort((a, b) => this.spellsBOCWasUsedOn[b] - this.spellsBOCWasUsedOn[a])\r\n                .map(type => (\r\n                  <li key={type}><em>{SPELLS[type].name || 'Unknown'}</em> was used {this.spellsBOCWasUsedOn[type]} time{this.spellsBOCWasUsedOn[type] === 1 ? '' : 's'} ({formatPercentage(this.spellsBOCWasUsedOn[type] / this.blackoutComboConsumed)}%)</li>),\r\n                )}\r\n            </ul>\r\n          </>\r\n        )}\r\n      >\r\n        <BoringValue label={<><SpellIcon id={SPELLS.BLACKOUT_COMBO_BUFF.id} /> Wasted Blackout Combo</>}>\r\n          <>\r\n            {formatPercentage(wastedPerc)}%\r\n          </>\r\n        </BoringValue>\r\n      </Statistic>\r\n    );\r\n  }\r\n}\r\n\r\nexport default BlackoutCombo;\r\n","import SPELLS from 'common/SPELLS';\r\nimport Analyzer from 'parser/core/Analyzer';\r\nimport SpellUsable from 'parser/shared/modules/SpellUsable';\r\nimport SpellHistory from 'parser/shared/modules/SpellHistory';\r\n\r\nconst BREWS = [\r\n  SPELLS.BLACK_OX_BREW_TALENT,\r\n  SPELLS.FORTIFYING_BREW_BRM,\r\n  SPELLS.CELESTIAL_BREW,\r\n  SPELLS.PURIFYING_BREW,\r\n];\r\n\r\nclass SharedBrews extends Analyzer {\r\n  static dependencies = {\r\n    spellUsable: SpellUsable,\r\n    spellHistory: SpellHistory,\r\n  };\r\n\r\n  protected spellUsable!: SpellUsable;\r\n  protected spellHistory!: SpellHistory;\r\n\r\n  // reduces the cooldown of the (fake) ISB/PB in SpellUsable, returning the amount by\r\n  // which the CD was reduced (0 if it was not on cooldown)\r\n  //\r\n  // also reduces BoB & FB cooldowns\r\n  reduceCooldown(amount: number) {\r\n    BREWS.slice(0, -1)\r\n      .filter(spell => this.spellUsable.isOnCooldown(spell.id))\r\n      .forEach(spell => this.spellUsable.reduceCooldown(spell.id, amount));\r\n\r\n    const finalBrew = BREWS[BREWS.length - 1];\r\n    if (!this.spellUsable.isOnCooldown(finalBrew.id)) {\r\n      return 0;\r\n    }\r\n    return this.spellUsable.reduceCooldown(finalBrew.id, amount);\r\n  }\r\n}\r\n\r\nexport default SharedBrews;\r\n","import SPELLS from 'common/SPELLS';\r\nimport Analyzer, { SELECTED_PLAYER } from 'parser/core/Analyzer';\r\n\r\nimport Events from 'parser/core/Events';\r\n\r\nimport BlackoutCombo from './BlackoutCombo';\r\nimport SharedBrews from '../core/SharedBrews';\r\n\r\nconst KEG_SMASH_REDUCTION = 3000;\r\nconst BOC_KEG_SMASH_REDUCTION = 2000;\r\n\r\nclass KegSmash extends Analyzer {\r\n  static dependencies = {\r\n    boc: BlackoutCombo,\r\n    brews: SharedBrews,\r\n  };\r\n\r\n  totalCasts = 0;\r\n  bocHits = 0;\r\n\r\n  cdr = 0;\r\n  bocCDR = 0;\r\n  wastedCDR = 0;\r\n  wastedBocCDR = 0;\r\n\r\n  _bocBuffActive = false;\r\n\r\n  constructor(options) {\r\n    super(options);\r\n    this.addEventListener(Events.applybuff.by(SELECTED_PLAYER).spell(SPELLS.BLACKOUT_COMBO_BUFF), this.onGainBOC);\r\n    this.addEventListener(Events.refreshbuff.by(SELECTED_PLAYER).spell(SPELLS.BLACKOUT_COMBO_BUFF), this.onGainBOC);\r\n    this.addEventListener(Events.removebuff.by(SELECTED_PLAYER).spell(SPELLS.BLACKOUT_COMBO_BUFF), this.onLoseBOC);\r\n    this.addEventListener(Events.cast.by(SELECTED_PLAYER).spell(SPELLS.KEG_SMASH), this.onCast);\r\n  }\r\n\r\n  onGainBOC(event) {\r\n    this._bocBuffActive = true;\r\n  }\r\n\r\n  onLoseBOC(event) {\r\n    this._bocBuffActive = false;\r\n  }\r\n\r\n  onCast(event) {\r\n    this.totalCasts += 1;\r\n\r\n    const actualReduction = this.brews.reduceCooldown(KEG_SMASH_REDUCTION);\r\n    this.cdr += actualReduction;\r\n    this.wastedCDR += KEG_SMASH_REDUCTION - actualReduction;\r\n\r\n    if (this._bocBuffActive) {\r\n      this.bocHits += 1; // assuming (not a big assumption) that we get ≥ 1 hit per cast\r\n\r\n      // possible for minor loss of correctness due to potential gap\r\n      // between cast and hit, but even on long fights this won't\r\n      // amount to much\r\n      const actualBocReduction = this.brews.reduceCooldown(BOC_KEG_SMASH_REDUCTION);\r\n      this.bocCDR += actualBocReduction;\r\n      this.wastedBocCDR += BOC_KEG_SMASH_REDUCTION - actualBocReduction;\r\n    }\r\n  }\r\n\r\n}\r\n\r\nexport default KegSmash;\r\n","import React from 'react';\r\nimport SPELLS from 'common/SPELLS';\r\nimport SpellLink from 'common/SpellLink';\r\nimport Analyzer, { Options, SELECTED_PLAYER } from 'parser/core/Analyzer';\r\nimport StatTracker from 'parser/shared/modules/StatTracker';\r\nimport Combatant from 'parser/core/Combatant';\r\nimport { SpellInfo } from 'parser/core/EventFilter';\r\nimport Events, { ApplyBuffEvent, CastEvent, DamageEvent, RefreshBuffEvent, RemoveBuffEvent } from 'parser/core/Events';\r\nimport SpellUsable from 'parser/shared/modules/SpellUsable';\r\nimport { ThresholdStyle, When } from 'parser/core/ParseResults';\r\nimport { formatPercentage } from 'common/format';\r\n\r\nimport BlackoutCombo from './BlackoutCombo';\r\nimport SharedBrews from '../core/SharedBrews';\r\n\r\nconst TIGER_PALM_REDUCTION = 1000;\r\n\r\ninterface ConditionalSpell {\r\n  spell: SpellInfo,\r\n  when: (c: Combatant) => boolean,\r\n}\r\n\r\nfunction isConditional(spell: ConditionalSpell | SpellInfo): spell is ConditionalSpell {\r\n  return Object.prototype.hasOwnProperty.call(spell, 'when');\r\n}\r\n\r\nconst BETTER_SPELLS: Array<SpellInfo | ConditionalSpell> = [\r\n  SPELLS.KEG_SMASH,\r\n  SPELLS.BLACKOUT_KICK_BRM,\r\n  SPELLS.BREATH_OF_FIRE,\r\n  {\r\n    spell: SPELLS.RUSHING_JADE_WIND,\r\n    when: (combatant: Combatant) => combatant.hasTalent(SPELLS.RUSHING_JADE_WIND.id) && !combatant.hasBuff(SPELLS.RUSHING_JADE_WIND.id),\r\n  },\r\n  {\r\n    spell: SPELLS.CHI_BURST_TALENT,\r\n    when: (combatant: Combatant) => combatant.hasTalent(SPELLS.CHI_BURST_TALENT.id),\r\n  },\r\n  {\r\n    spell: SPELLS.CHI_WAVE_TALENT,\r\n    when: (combatant: Combatant) => combatant.hasTalent(SPELLS.CHI_WAVE_TALENT.id),\r\n  },\r\n];\r\n\r\nclass TigerPalm extends Analyzer {\r\n  static dependencies = {\r\n    boc: BlackoutCombo,\r\n    brews: SharedBrews,\r\n    statTracker: StatTracker,\r\n    spellUsable: SpellUsable,\r\n  };\r\n  totalCasts = 0;\r\n  badCasts = 0;\r\n  normalHits = 0;\r\n  bocHits = 0;\r\n  cdr = 0;\r\n  wastedCDR = 0;\r\n  bocBuffActive = false;\r\n  bocApplyToTP = false;\r\n  protected boc!: BlackoutCombo;\r\n  protected brews!: SharedBrews;\r\n  protected statTracker!: StatTracker;\r\n  protected spellUsable!: SpellUsable;\r\n\r\n  constructor(options: Options) {\r\n    super(options);\r\n    this.addEventListener(Events.applybuff.by(SELECTED_PLAYER).spell(SPELLS.BLACKOUT_COMBO_BUFF), this.onGainBOC);\r\n    this.addEventListener(Events.refreshbuff.by(SELECTED_PLAYER).spell(SPELLS.BLACKOUT_COMBO_BUFF), this.onGainBOC);\r\n    this.addEventListener(Events.removebuff.by(SELECTED_PLAYER).spell(SPELLS.BLACKOUT_COMBO_BUFF), this.onLoseBOC);\r\n    this.addEventListener(Events.cast.by(SELECTED_PLAYER).spell(SPELLS.TIGER_PALM), this.onCast);\r\n    this.addEventListener(Events.cast.by(SELECTED_PLAYER).spell(SPELLS.TIGER_PALM), this.checkBadTP);\r\n    this.addEventListener(Events.damage.by(SELECTED_PLAYER).spell(SPELLS.TIGER_PALM), this.onDamage);\r\n  }\r\n\r\n  get totalBocHits() {\r\n    return this.bocHits;\r\n  }\r\n\r\n  get bocEmpoweredThreshold() {\r\n    if (!this.selectedCombatant.hasTalent(SPELLS.BLACKOUT_COMBO_TALENT.id)) {\r\n      return null;\r\n    }\r\n    return {\r\n      actual: this.totalBocHits / this.totalCasts,\r\n      isLessThan: {\r\n        minor: 0.95,\r\n        average: 0.9,\r\n        major: 0.85,\r\n      },\r\n      style: ThresholdStyle.PERCENTAGE,\r\n    };\r\n  }\r\n\r\n  get badCastSuggestion() {\r\n    const actual = this.badCasts / this.totalCasts;\r\n    return {\r\n      actual,\r\n      isGreaterThan: {\r\n        minor: 0.05,\r\n        average: 0.1,\r\n        major: 0.15,\r\n      },\r\n      style: ThresholdStyle.PERCENTAGE,\r\n    };\r\n  }\r\n\r\n  onGainBOC(event: ApplyBuffEvent | RefreshBuffEvent) {\r\n    this.bocBuffActive = true;\r\n  }\r\n\r\n  onLoseBOC(event: RemoveBuffEvent) {\r\n    this.bocBuffActive = false;\r\n  }\r\n\r\n  onCast(event: CastEvent) {\r\n    this.totalCasts += 1;\r\n    this.bocApplyToTP = this.bocBuffActive;\r\n  }\r\n\r\n  // a Tiger Palm cast is bad if it is cast while one of the `BETTER_SPELLS` is\r\n\r\n  onDamage(event: DamageEvent) {\r\n    // OK SO we have a hit, lets reduce the CD by the base amount...\r\n    const actualReduction = this.brews.reduceCooldown(TIGER_PALM_REDUCTION);\r\n    this.cdr += actualReduction;\r\n    this.wastedCDR += TIGER_PALM_REDUCTION - actualReduction;\r\n\r\n    if (this.bocApplyToTP) {\r\n      this.bocHits += 1;\r\n    } else {\r\n      this.normalHits += 1;\r\n    }\r\n  }\r\n\r\n  // off cooldown, or if casting it delayed Keg Smash due to energy starvation.\r\n  checkBadTP(event: CastEvent) {\r\n    if (this.bocBuffActive) {\r\n      return; // TP+BoC is highest prio\r\n    }\r\n\r\n    const availableSpells: SpellInfo[] = BETTER_SPELLS.filter(entry => {\r\n      if (isConditional(entry)) {\r\n        return entry.when(this.selectedCombatant) && this.spellUsable.isAvailable(entry.spell.id);\r\n      } else {\r\n        return this.spellUsable.isAvailable(entry.id);\r\n      }\r\n    }).map(entry => isConditional(entry) ? entry.spell : entry);\r\n\r\n    if (availableSpells.length === 0) {\r\n      return; // nothing better to cast, so this is OK\r\n    }\r\n\r\n    // this clobbers the timeline metadata, but at this time nothing sets it\r\n    // outside of individual analyzers.\r\n    event.meta = {\r\n      isInefficientCast: true,\r\n      inefficientCastReason: (\r\n        <>\r\n          The following better spells were available during this GCD:\r\n          <ul>\r\n            {availableSpells.map(({ id }) => <li key={id}><SpellLink id={id} /></li>)}\r\n          </ul>\r\n        </>\r\n      ),\r\n    };\r\n\r\n    this.badCasts += 1;\r\n  }\r\n\r\n  suggestions(when: When) {\r\n    when(this.badCastSuggestion)\r\n      .addSuggestion((suggest, actual, recommended) => suggest(<><SpellLink id={SPELLS.TIGER_PALM.id} /> is your lowest priority ability. You should avoid casting it when you have other damaging abilities like <SpellLink id={SPELLS.KEG_SMASH.id} /> or <SpellLink id={SPELLS.BLACKOUT_KICK_BRM.id} /> available.</>)\r\n        .icon(SPELLS.TIGER_PALM.icon)\r\n        .actual(`${formatPercentage(actual)}% of casts while better spells were available`)\r\n        .recommended(`< ${formatPercentage(recommended)}% is recommended`));\r\n  }\r\n}\r\n\r\nexport default TigerPalm;\r\n","import React from 'react';\r\nimport SpellLink from 'common/SpellLink';\r\nimport SPELLS from 'common/SPELLS';\r\nimport { formatPercentage } from 'common/format';\r\n\r\nimport Analyzer, { SELECTED_PLAYER } from 'parser/core/Analyzer';\r\nimport SpellUsable from 'parser/shared/modules/SpellUsable';\r\nimport { i18n } from '@lingui/core';\r\nimport { t } from '@lingui/macro';\r\n\r\nimport Events from 'parser/core/Events';\r\n\r\nimport Abilities from '../Abilities';\r\n\r\nclass BlackOxBrew extends Analyzer {\r\n  get suggestionThreshold() {\r\n    return {\r\n      actual: this.wastedCDR / (this.cdr + this.wastedCDR),\r\n      isGreaterThan: {\r\n        minor: 0.10,\r\n        average: 0.2,\r\n        major: 0.3,\r\n      },\r\n      style: 'percentage',\r\n    };\r\n  }\r\n\r\n  static dependencies = {\r\n    spellUsable: SpellUsable,\r\n    abilities: Abilities,\r\n  };\r\n  cdr = {\r\n    [SPELLS.PURIFYING_BREW.id]: 0,\r\n    [SPELLS.CELESTIAL_BREW.id]: 0,\r\n  };\r\n  wastedCDR = {\r\n    [SPELLS.PURIFYING_BREW.id]: 0,\r\n    [SPELLS.CELESTIAL_BREW.id]: 0,\r\n  };\r\n  casts = 0;\r\n\r\n  constructor(...args) {\r\n    super(...args);\r\n    this.active = this.selectedCombatant.hasTalent(SPELLS.BLACK_OX_BREW_TALENT.id);\r\n    this.addEventListener(Events.cast.by(SELECTED_PLAYER).spell(SPELLS.BLACK_OX_BREW_TALENT), this.onCast);\r\n  }\r\n\r\n  _trackCdr(spellId) {\r\n    const cd = this.spellUsable.cooldownRemaining(spellId);\r\n    this.cdr[spellId] += cd;\r\n    const wastedCDR = this.abilities.getExpectedCooldownDuration(spellId, this.spellUsable.cooldownTriggerEvent(spellId)) - cd;\r\n    this.wastedCDR[spellId] += wastedCDR;\r\n  }\r\n\r\n  _resetPB() {\r\n    // loop until we've reset all the charges individually, recording\r\n    // the amount of cooldown reduction for each charge.\r\n    const spellId = SPELLS.PURIFYING_BREW.id;\r\n    while (this.spellUsable.isOnCooldown(spellId)) {\r\n      this._trackCdr(spellId);\r\n      this.spellUsable.endCooldown(spellId, false);\r\n    }\r\n  }\r\n\r\n  _resetCB() {\r\n    const spellId = SPELLS.CELESTIAL_BREW.id;\r\n    if (this.spellUsable.isOnCooldown(spellId)) {\r\n      this._trackCdr(spellId);\r\n      this.spellUsable.endCooldown(spellId, false);\r\n    } else {\r\n      this.wastedCDR[spellId] = this.abilities.getExpectedCooldownDuration(spellId, this.spellUsable.cooldownTriggerEvent(spellId));\r\n    }\r\n  }\r\n\r\n  onCast(event) {\r\n    this.casts += 1;\r\n\r\n    this._resetPB();\r\n    this._resetCB();\r\n  }\r\n\r\n  suggestions(when) {\r\n    when(this.suggestionThreshold)\r\n      .addSuggestion((suggest, actual, recommended) => suggest(<>Your <SpellLink id={SPELLS.BLACK_OX_BREW_TALENT.id} /> usage can be improved.</>)\r\n        .icon(SPELLS.BLACK_OX_BREW_TALENT.icon)\r\n        .actual(i18n._(t('monk.brewmaster.suggestions.blackOxBrew.cdrWasted')`${formatPercentage(actual)}% of Cooldown Reduction wasted`))\r\n        .recommended(`< ${formatPercentage(recommended)}% is recommended`));\r\n  }\r\n}\r\n\r\nexport default BlackOxBrew;\r\n","import React from 'react';\r\nimport SPELLS from 'common/SPELLS';\r\nimport SpellIcon from 'common/SpellIcon';\r\nimport { formatPercentage } from 'common/format';\r\nimport Events, { ChangeHasteEvent, EventType } from 'parser/core/Events';\r\nimport EventFilter from 'parser/core/EventFilter';\r\nimport Analyzer, { Options } from 'parser/core/Analyzer';\r\nimport STATISTIC_ORDER from 'interface/others/STATISTIC_ORDER';\r\nimport Statistic from 'interface/statistics/Statistic';\r\nimport BoringValue from 'interface/statistics/components/BoringValueText';\r\n\r\nimport Abilities from '../Abilities';\r\nimport KegSmash from '../spells/KegSmash';\r\nimport TigerPalm from '../spells/TigerPalm';\r\nimport BlackOxBrew from '../spells/BlackOxBrew';\r\n\r\nclass BrewCDR extends Analyzer {\r\n  static dependencies = {\r\n    ks: KegSmash,\r\n    tp: TigerPalm,\r\n    bob: BlackOxBrew,\r\n    abilities: Abilities,\r\n  };\r\n  _totalHaste = 0;\r\n  _newHaste = 0;\r\n  _lastHasteChange = 0;\r\n  protected ks!: KegSmash;\r\n  protected tp!: TigerPalm;\r\n  protected bob!: BlackOxBrew;\r\n  protected abilities!: Abilities;\r\n\r\n  constructor(options: Options) {\r\n    super(options);\r\n    this._lastHasteChange = this.owner.fight.start_time;\r\n\r\n    this.addEventListener(new EventFilter(EventType.ChangeHaste), this._updateHaste);\r\n    this.addEventListener(Events.fightend, this._finalizeHaste);\r\n  }\r\n\r\n  get meanHaste() {\r\n    return this._totalHaste / this.owner.fightDuration;\r\n  }\r\n\r\n  get totalCDR() {\r\n    let totalCDR = 0;\r\n    // add in KS CDR...\r\n    totalCDR += this.ks.cdr;\r\n    totalCDR += this.ks.bocCDR;\r\n    // ...and TP...\r\n    totalCDR += this.tp.cdr;\r\n    // ...and BoB...\r\n    totalCDR += this.bob.cdr[SPELLS.PURIFYING_BREW.id];\r\n    return totalCDR;\r\n  }\r\n\r\n  // The idea here is pretty simple: we have an amount of time that has\r\n  // passed (fightDuration) and an amount of time that has \"passed\"\r\n  // via flat cooldown reduction on abilities (totalCDR). For example,\r\n  // Keg Smash effetively causes 4 seconds to \"pass\" when cast. So we\r\n  // want to know what fraction of time that has passed was caused by\r\n  // cooldown reduction effects, which is:\r\n  //\r\n  // cdr% = totalCDR / (fightDuration + totalCDR)\r\n  //\r\n  // related:\r\n  // https://github.com/WoWAnalyzer/WoWAnalyzer/pull/1238#discussion_r163734298\r\n  get cooldownReductionRatio() {\r\n    return this.totalCDR / (this.owner.fightDuration + this.totalCDR);\r\n  }\r\n\r\n  get avgCooldown() {\r\n    const ability = this.abilities.getAbility(SPELLS.PURIFYING_BREW.id)!;\r\n    return ability.getCooldown(this.meanHaste);\r\n  }\r\n\r\n  statistic() {\r\n    return (\r\n      <Statistic\r\n        position={STATISTIC_ORDER.OPTIONAL()}\r\n        size=\"flexible\"\r\n        tooltip={(\r\n          <>\r\n            Your cooldowns were reduced by:\r\n            <ul>\r\n              <li>{this.ks.totalCasts} Keg Smash casts — <strong>{(this.ks.cdr / 1000).toFixed(2)}s</strong> (<strong>{(this.ks.wastedCDR / 1000).toFixed(2)}s</strong> wasted)</li>\r\n              {this.ks.bocHits > 0 && <li>Using Blackout Combo on {this.ks.bocHits} Keg Smash hits — <strong>{(this.ks.bocCDR / 1000).toFixed(2)}s</strong> (<strong>{(this.ks.wastedBocCDR / 1000).toFixed(2)}s</strong> wasted)</li>}\r\n              <li>{this.tp.totalCasts} Tiger Palm hits — <strong>{(this.tp.cdr / 1000).toFixed(2)}s</strong> (<strong>{(this.tp.wastedCDR / 1000).toFixed(2)}s</strong> wasted)</li>\r\n              {this.bob.active && <li>{this.bob.casts} Black Ox Brew casts — <strong>{(this.bob.cdr[SPELLS.PURIFYING_BREW.id] / 1000).toFixed(2)}s</strong> (<strong>{(this.bob.wastedCDR[SPELLS.PURIFYING_BREW.id] / 1000).toFixed(2)}s</strong> wasted)</li>}\r\n            </ul>\r\n            <strong>Total cooldown reduction:</strong> {(this.totalCDR / 1000).toFixed(2)}s.<br />\r\n          </>\r\n        )}\r\n      >\r\n        <BoringValue label={<><SpellIcon id={SPELLS.TIGER_PALM.id} /> Effective Brew CDR</>}>\r\n          <>\r\n            {formatPercentage(this.cooldownReductionRatio)} %\r\n          </>\r\n        </BoringValue>\r\n      </Statistic>\r\n    );\r\n  }\r\n\r\n  private _updateHaste(event: ChangeHasteEvent) {\r\n    this._totalHaste += event.oldHaste! * (event.timestamp - this._lastHasteChange);\r\n    this._lastHasteChange = event.timestamp;\r\n    this._newHaste = event.newHaste!;\r\n  }\r\n\r\n  private _finalizeHaste() {\r\n    this._totalHaste += this._newHaste * (this.owner.fight.end_time - this._lastHasteChange);\r\n  }\r\n}\r\n\r\nexport default BrewCDR;\r\n","import SPELLS from 'common/SPELLS';\r\nimport CoreGlobalCooldown from 'parser/shared/modules/GlobalCooldown';\r\n\r\n/**\r\n * Crackling Jade Lightning has ticks marked as \"cast\", and we fix its channel in the CracklingJadeLightning module. This also fixes its GCD.\r\n */\r\nclass GlobalCooldown extends CoreGlobalCooldown {\r\n  onCast(event) {\r\n    if (event.ability.guid === SPELLS.CRACKLING_JADE_LIGHTNING.id) {\r\n      // This GCD gets handled by the `beginchannel` event\r\n      return;\r\n    }\r\n    super.onCast(event);\r\n  }\r\n}\r\n\r\nexport default GlobalCooldown;\r\n","import SPELLS from 'common/SPELLS';\r\nimport CoreChanneling from 'parser/shared/modules/Channeling';\r\nimport Events from 'parser/core/Events';\r\nimport { SELECTED_PLAYER } from 'parser/core/Analyzer';\r\n\r\n/**\r\n * Crackling Jade Lightning don't reveal in the combatlog when channeling begins and ends, this fabricates the required events so that ABC can handle it properly.\r\n * Combatlog event order is messy, it often looks like:\r\n * 1. applydebuff Crackling Jade Lightning\r\n * 2. begincast/cast new spell\r\n * 3. removedebuff Crackling Jade Lightning\r\n * To avoid Crackling Jade Lightning as being marked \"canceled\" when we start a new spell we mark it as ended instead on the begincast/cast.\r\n */\r\nclass Channeling extends CoreChanneling {\r\n  constructor(options) {\r\n    super(options);\r\n    this.addEventListener(Events.applydebuff.by(SELECTED_PLAYER).spell(SPELLS.CRACKLING_JADE_LIGHTNING), this.onApplyDebuff);\r\n    this.addEventListener(Events.removedebuff.by(SELECTED_PLAYER).spell(SPELLS.CRACKLING_JADE_LIGHTNING), this.onRemoveDebuff);\r\n    this.addEventListener(Events.removebuff.by(SELECTED_PLAYER).spell(SPELLS.CRACKLING_JADE_LIGHTNING), this.onRemoveBuff);\r\n  }\r\n\r\n  onCast(event) {\r\n    if (event.ability.guid === SPELLS.CRACKLING_JADE_LIGHTNING.id) {\r\n      // We track Crackling Jade Lightning differently\r\n      return;\r\n    }\r\n    if (event.ability.guid === SPELLS.ZEN_MEDITATION.id) {\r\n      this.beginChannel(event);\r\n      return;\r\n    }\r\n    super.onCast(event);\r\n  }\r\n\r\n  cancelChannel(event, ability) {\r\n    if (this.isChannelingSpell(SPELLS.CRACKLING_JADE_LIGHTNING.id) || this.isChannelingSpell(SPELLS.ZEN_MEDITATION.id)) {\r\n      // If a channeling spell is \"canceled\" it was actually just ended, so if it looks canceled then instead just mark it as ended\r\n      this.log('Marking', this._currentChannel.ability.name, 'as ended since we started casting something else');\r\n      this.endChannel(event);\r\n    } else {\r\n      super.cancelChannel(event, ability);\r\n    }\r\n  }\r\n\r\n  onApplyDebuff(event) {\r\n    this.beginChannel(event);\r\n  }\r\n\r\n  // Looking at `removebuff` will includes progress towards a tick that never happened. This progress could be considered downtime as it accounts for nothing.\r\n  // If it's ever decided to consider the time between last tick and channel ending as downtime, just change the endchannel trigger.\r\n  onRemoveDebuff(event) {\r\n    if (!this.isChannelingSpell(SPELLS.CRACKLING_JADE_LIGHTNING.id)) {\r\n      // This may be true if we did the event-order fix in begincast/cast and it was already ended there.\r\n      return;\r\n    }\r\n    this.endChannel(event);\r\n  }\r\n\r\n  onRemoveBuff(event) {\r\n    if (event.ability.guid !== SPELLS.ZEN_MEDITATION.id) {\r\n      return;\r\n    }\r\n    if (!this.isChannelingSpell(SPELLS.ZEN_MEDITATION.id)) {\r\n      // This may be true if we did the event-order fix in begincast/cast and it was already ended there.\r\n      return;\r\n    }\r\n    this.endChannel(event);\r\n  }\r\n}\r\n\r\nexport default Channeling;\r\n","import React from 'react';\r\n\r\nimport SPELLS from 'common/SPELLS';\r\nimport SpellLink from 'common/SpellLink';\r\nimport { formatPercentage } from 'common/format';\r\nimport Analyzer from 'parser/core/Analyzer';\r\nimport { i18n } from '@lingui/core';\r\nimport { t } from '@lingui/macro';\r\n\r\n// the buff events all use this spell\r\nexport const RUSHING_JADE_WIND_BUFF = SPELLS.RUSHING_JADE_WIND_TALENT_BREWMASTER;\r\n\r\nclass RushingJadeWind extends Analyzer {\r\n  get uptimeThreshold() {\r\n    if (!this.active) {\r\n      return null;\r\n    }\r\n\r\n    return {\r\n      actual: this.uptime,\r\n      isLessThan: {\r\n        minor: 0.85,\r\n        average: 0.75,\r\n        major: 0.65,\r\n      },\r\n      style: 'percentage',\r\n    };\r\n  }\r\n\r\n  get uptime() {\r\n    return this.selectedCombatant.getBuffUptime(RUSHING_JADE_WIND_BUFF.id) / this.owner.fightDuration;\r\n  }\r\n\r\n  constructor(...args) {\r\n    super(...args);\r\n    this.active = this.selectedCombatant.hasTalent(SPELLS.RUSHING_JADE_WIND_TALENT_BREWMASTER.id);\r\n  }\r\n\r\n  // using a suggestion rather than a checklist item for this as RJW is\r\n\r\n  // purely offensive\r\n  suggestions(when) {\r\n    when(this.uptimeThreshold)\r\n      .addSuggestion((suggest, actual, recommended) => suggest(<>You had low uptime on <SpellLink id={SPELLS.RUSHING_JADE_WIND.id} />. Try to maintain 100% uptime by refreshing the buff before it drops.</>)\r\n        .icon(SPELLS.RUSHING_JADE_WIND.icon)\r\n        .actual(i18n._(t('monk.brewmaster.suggestions.rushingJadeWind.uptime')`${formatPercentage(actual)}% uptime`))\r\n        .recommended(`${Math.round(formatPercentage(recommended))}% is recommended`));\r\n  }\r\n}\r\n\r\nexport default RushingJadeWind;\r\n","import React from 'react';\r\n\r\nimport { formatNumber } from 'common/format';\r\nimport SpellIcon from 'common/SpellIcon';\r\nimport SpellLink from 'common/SpellLink';\r\nimport SPELLS from 'common/SPELLS';\r\nimport Analyzer, { Options, SELECTED_PLAYER } from 'parser/core/Analyzer';\r\nimport { ThresholdStyle, When } from 'parser/core/ParseResults';\r\nimport Events, { CastEvent, EventType, RemoveDebuffEvent } from 'parser/core/Events';\r\nimport EventFilter from 'parser/core/EventFilter';\r\nimport Abilities from 'parser/core/modules/Abilities';\r\nimport SpellUsable from 'parser/shared/modules/SpellUsable';\r\nimport STATISTIC_ORDER from 'interface/others/STATISTIC_ORDER';\r\nimport Statistic from 'interface/statistics/Statistic';\r\nimport BoringValue from 'interface/statistics/components/BoringValueText';\r\nimport FooterChart, { formatTime } from 'interface/others/FooterChart';\r\nimport { i18n } from '@lingui/core';\r\nimport { t } from '@lingui/macro';\r\n\r\nimport SharedBrews from '../core/SharedBrews';\r\nimport BrewCDR from '../core/BrewCDR';\r\nimport { AddStaggerEvent, RemoveStaggerEvent } from '../core/StaggerFabricator';\r\n\r\nconst PURIFY_DELAY_THRESHOLD = 750; // with the removal of ISB, i'm cutting the delay threshold.\r\n\r\nfunction markupPurify(event: CastEvent, delay: number, hasHeavyStagger: boolean) {\r\n  const msgs = [];\r\n  if (delay > PURIFY_DELAY_THRESHOLD) {\r\n    msgs.push(<li key=\"PURIFY_DELAY_THRESHOLD\">You delayed casting it for <b>{(delay / 1000).toFixed(2)}s</b> after being hit, allowing Stagger to tick down.</li>);\r\n  }\r\n\r\n  if (msgs.length === 0) {\r\n    return;\r\n  }\r\n  const meta = event.meta || {};\r\n  meta.isInefficientCast = true;\r\n  meta.inefficientCastReason = (\r\n    <>\r\n      This Purifying Brew cast was inefficient because:\r\n      <ul>{msgs}</ul>\r\n    </>\r\n  );\r\n  event.meta = meta;\r\n}\r\n\r\nclass PurifyingBrew extends Analyzer {\r\n  static dependencies = {\r\n    brews: SharedBrews,\r\n    spells: SpellUsable,\r\n    abilities: Abilities,\r\n    cdr: BrewCDR,\r\n  };\r\n  purifies: RemoveStaggerEvent[] = [];\r\n  purifyDelays: number[] = [];\r\n  heavyPurifies = 0;\r\n  // cast event happens\r\n  _heavyStaggerDropped = false;\r\n  _lastHit?: AddStaggerEvent | RemoveStaggerEvent;\r\n  _msTilPurify = 0;\r\n  protected brews!: SharedBrews;\r\n\r\n  // used to track heavy stagger for when the debuff drops just before the\r\n  protected spells!: SpellUsable;\r\n  protected abilities!: Abilities;\r\n  protected cdr!: BrewCDR;\r\n\r\n  constructor(options: Options) {\r\n    super(options);\r\n\r\n    this.addEventListener(Events.removedebuff.to(SELECTED_PLAYER).spell(SPELLS.HEAVY_STAGGER_DEBUFF), this._removeHeavyStagger);\r\n    this.addEventListener(new EventFilter(EventType.AddStagger), this._addstagger);\r\n    this.addEventListener(new EventFilter(EventType.RemoveStagger), this._removestagger);\r\n  }\r\n\r\n  get meanPurify() {\r\n    if (this.purifies.length === 0) {\r\n      return 0;\r\n    }\r\n\r\n    return this.totalPurified / this.totalPurifies;\r\n  }\r\n\r\n  get minPurify() {\r\n    if (this.purifies.length === 0) {\r\n      return 0;\r\n    }\r\n\r\n    return this.purifies.reduce((prev, cur) => (prev < cur.amount) ? prev : cur.amount, Infinity);\r\n  }\r\n\r\n  get maxPurify() {\r\n    return this.purifies.reduce((prev, cur) => (prev > cur.amount) ? prev : cur.amount, 0);\r\n  }\r\n\r\n  get totalPurified() {\r\n    return this.purifies.reduce((prev, cur) => prev + cur.amount, 0);\r\n  }\r\n\r\n  get totalPurifies() {\r\n    return this.purifies.length;\r\n  }\r\n\r\n  get avgPurifyDelay() {\r\n    if (this.purifyDelays.length === 0) {\r\n      return 0;\r\n    }\r\n    return this.purifyDelays.reduce((total, delay) => total + delay) / this.purifyDelays.length;\r\n  }\r\n\r\n  get purifyDelaySuggestion() {\r\n    return {\r\n      actual: this.avgPurifyDelay / 1000,\r\n      isGreaterThan: {\r\n        minor: 1,\r\n        average: PURIFY_DELAY_THRESHOLD / 1000,\r\n        major: PURIFY_DELAY_THRESHOLD / 1000 + 1,\r\n      },\r\n      style: ThresholdStyle.SECONDS,\r\n    };\r\n  }\r\n\r\n  suggestions(when: When) {\r\n    when(this.purifyDelaySuggestion).addSuggestion((suggest, actual, recommended) => suggest(<>You should delay your <SpellLink id={SPELLS.PURIFYING_BREW.id} /> cast as little as possible after being hit to maximize its effectiveness.</>)\r\n      .icon(SPELLS.PURIFYING_BREW.icon)\r\n      .actual(i18n._(t('monk.brewmaster.suggestions.purifyingBrew.avgdelay')`${actual.toFixed(2)}s Average Delay`))\r\n      .recommended(`< ${recommended.toFixed(2)}s is recommended`));\r\n  }\r\n\r\n  statistic() {\r\n    const spec = {\r\n      mark: 'bar',\r\n      transform: [\r\n        { calculate: `datum.timestamp - ${this.owner.fight.start_time}`, as: 'timestamp' },\r\n        { calculate: 'datum.timestamp / 60000', as: 'time_min' },\r\n        { calculate: formatTime(), as: 'time_label' },\r\n      ],\r\n      encoding: {\r\n        x: {\r\n          field: 'time_min',\r\n          type: 'quantitative' as const,\r\n          axis: {\r\n            labelExpr: formatTime('(datum.value * 60000)'),\r\n            grid: false,\r\n          },\r\n          title: null,\r\n          scale: { zero: true },\r\n        },\r\n        y: {\r\n          field: 'amount',\r\n          type: 'quantitative' as const,\r\n          title: null,\r\n          axis: {\r\n            grid: false,\r\n            format: '~s',\r\n          },\r\n        },\r\n        tooltip: [\r\n          { field: 'time_label', type: 'nominal' as const, title: 'Time' },\r\n          { field: 'amount', type: 'quantitative' as const, title: 'Amount Purified', format: '.3~s' },\r\n        ],\r\n      },\r\n    };\r\n\r\n    return (\r\n      <Statistic\r\n        size=\"flexible\"\r\n        position={STATISTIC_ORDER.OPTIONAL()}\r\n        tooltip={(\r\n          <>\r\n            Purifying Brew removed <strong>{formatNumber(this.totalPurified)}</strong> damage in total over {this.totalPurifies} casts.<br />\r\n            The smallest purify removed <strong>{formatNumber(this.minPurify)}</strong> and the largest purify removed <strong>{formatNumber(this.maxPurify)}</strong>.<br />\r\n            Your purifies were delayed from the nearest peak by <strong>{(this.avgPurifyDelay / 1000).toFixed(2)}s</strong> on average.\r\n          </>\r\n        )}\r\n      >\r\n        <BoringValue label={<><SpellIcon id={SPELLS.PURIFYING_BREW.id} /> Avg. Mitigation per Purifying Brew</>}>\r\n          <>\r\n            {formatNumber(this.meanPurify)} <br />\r\n            <FooterChart data={this.purifies} spec={spec} />\r\n          </>\r\n        </BoringValue>\r\n      </Statistic>\r\n    );\r\n  }\r\n\r\n  private _removeHeavyStagger(event: RemoveDebuffEvent) {\r\n    if (event.ability.guid === SPELLS.HEAVY_STAGGER_DEBUFF.id) {\r\n      this._heavyStaggerDropped = true;\r\n    }\r\n  }\r\n\r\n  private _addstagger(event: AddStaggerEvent) {\r\n    this._lastHit = event;\r\n    this._msTilPurify = this.spells.isAvailable(SPELLS.PURIFYING_BREW.id) ? 0 : this.spells.cooldownRemaining(SPELLS.PURIFYING_BREW.id);\r\n  }\r\n\r\n  private _removestagger(event: RemoveStaggerEvent) {\r\n    if (this._lastHit === undefined) {\r\n      if (event.amount > 0) {\r\n        console.warn('Stagger removed but player hasn\\'t been hit yet', event);\r\n      }\r\n      return; // no hit yet\r\n    }\r\n    // tracking gap from peak --- ideally you want to purify as close to\r\n    // a peak as possible, but if no purify charges are available we\r\n    // want to get the new pooled amount\r\n    const gap = event.timestamp - this._lastHit!.timestamp;\r\n    if (event.trigger!.ability && event.trigger!.ability.guid === SPELLS.STAGGER.id && this._msTilPurify - gap > 0) {\r\n      this._msTilPurify = Math.max(0, this._msTilPurify - gap);\r\n      this._lastHit = event;\r\n    }\r\n\r\n    // tracking purification\r\n    if (!event.trigger!.ability || event.trigger!.ability.guid !== SPELLS.PURIFYING_BREW.id) {\r\n      // reset this, if we lost heavy stagger then death or another ability took us out of heavy stagger\r\n      this._heavyStaggerDropped = false;\r\n      return;\r\n    }\r\n    this.purifies.push(event);\r\n    const delay = event.timestamp - this._lastHit.timestamp - this._msTilPurify;\r\n    this.purifyDelays.push(delay);\r\n    const hasHeavyStagger = this.selectedCombatant.hasBuff(SPELLS.HEAVY_STAGGER_DEBUFF.id) || this._heavyStaggerDropped;\r\n    const trigger = event.trigger!;\r\n\r\n    if (trigger.type === EventType.Cast) {\r\n      markupPurify(trigger, delay, hasHeavyStagger);\r\n    }\r\n    if (hasHeavyStagger) {\r\n      this.heavyPurifies += 1;\r\n    }\r\n    this._heavyStaggerDropped = false;\r\n  }\r\n}\r\n\r\nexport default PurifyingBrew;\r\n","import React from 'react';\r\nimport SPELLS from 'common/SPELLS';\r\nimport SpellLink from 'common/SpellLink';\r\nimport Analyzer, { Options, SELECTED_PLAYER } from 'parser/core/Analyzer';\r\nimport Enemies from 'parser/shared/modules/Enemies';\r\nimport Events, { DamageEvent } from 'parser/core/Events';\r\nimport { ThresholdStyle, When } from 'parser/core/ParseResults';\r\nimport { formatPercentage } from 'common/format';\r\n\r\nimport { shouldIgnore } from 'parser/shared/modules/hit-tracking/utilities';\r\n\r\nexport default class Shuffle extends Analyzer {\r\n  static dependencies = {\r\n    enemies: Enemies,\r\n  };\r\n  hitsWith = 0;\r\n  hitsWithout = 0;\r\n  protected enemies!: Enemies;\r\n\r\n  constructor(options: Options) {\r\n    super(options);\r\n\r\n    this.addEventListener(Events.damage.to(SELECTED_PLAYER), this._damageTaken);\r\n  }\r\n\r\n  get uptimeSuggestionThreshold() {\r\n    return {\r\n      actual: this.hitsWith / (this.hitsWith + this.hitsWithout),\r\n      isLessThan: {\r\n        minor: 0.98,\r\n        average: 0.96,\r\n        major: 0.94,\r\n      },\r\n      style: ThresholdStyle.PERCENTAGE,\r\n    };\r\n  }\r\n\r\n  _damageTaken(event: DamageEvent) {\r\n    if (event.ability.guid === SPELLS.STAGGER_TAKEN.id) {\r\n      return;\r\n    }\r\n\r\n    if (shouldIgnore(this.enemies, event)) {\r\n      return;\r\n    }\r\n\r\n    if (this.selectedCombatant.hasBuff(SPELLS.SHUFFLE.id)) {\r\n      this.hitsWith += 1;\r\n    } else {\r\n      this.hitsWithout += 1;\r\n    }\r\n  }\r\n\r\n  suggestions(when: When) {\r\n    when(this.uptimeSuggestionThreshold)\r\n      .addSuggestion((suggest, actual, recommended) => suggest(\r\n        <>You should maintain <SpellLink id={SPELLS.SHUFFLE.id} /> while actively tanking.</>,\r\n      ).icon(SPELLS.SHUFFLE.icon)\r\n        .actual(`${formatPercentage(actual)}% of hits mitigated by Shuffle.`)\r\n        .recommended(`at least ${formatPercentage(recommended)}% is recommended`));\r\n  }\r\n}\r\n","import React from 'react';\r\nimport PropTypes from 'prop-types';\r\nimport SPELLS from 'common/SPELLS';\r\nimport SpellLink from 'common/SpellLink';\r\nimport Checklist from 'parser/shared/modules/features/Checklist';\r\nimport Rule, { PERFORMANCE_METHOD } from 'parser/shared/modules/features/Checklist/Rule';\r\nimport Requirement from 'parser/shared/modules/features/Checklist/Requirement';\r\nimport PreparationRule from 'parser/shared/modules/features/Checklist/PreparationRule';\r\nimport GenericCastEfficiencyRequirement from 'parser/shared/modules/features/Checklist/GenericCastEfficiencyRequirement';\r\n\r\nconst Component = ({ combatant, castEfficiency, thresholds }: any) => {\r\n  const AbilityRequirement = (props: any) => (\r\n    <GenericCastEfficiencyRequirement\r\n      castEfficiency={castEfficiency.getCastEfficiencyForSpellId(props.spell)}\r\n      {...props}\r\n    />\r\n  );\r\n  AbilityRequirement.propTypes = {\r\n    spell: PropTypes.number.isRequired,\r\n    name: PropTypes.any,\r\n  };\r\n\r\n  return (\r\n    <Checklist>\r\n      <Rule\r\n        name={<>Use <SpellLink id={SPELLS.CELESTIAL_BREW.id} onClick={e => e.preventDefault()} /> effectively</>}\r\n        description={(\r\n          <>\r\n            <SpellLink id={SPELLS.CELESTIAL_BREW.id} /> is a key part of your defensive toolkit. While it might be tempting to wait to cast it until you have max <SpellLink id={SPELLS.PURIFIED_CHI.id} />, it is much better to get more total casts off in most situations.\r\n          </>\r\n        )}\r\n      >\r\n        <AbilityRequirement spell={SPELLS.CELESTIAL_BREW.id} name={<><SpellLink id={SPELLS.CELESTIAL_BREW.id} /> cast efficiency</>} />\r\n        <Requirement\r\n          name={<><SpellLink id={SPELLS.CELESTIAL_BREW.id} /> Absorbs Effectively Used</>}\r\n          thresholds={thresholds.goodCBCasts}\r\n          tooltip=\"A cast is counted as effective if at least 75% of the shield is used.\"\r\n        />\r\n      </Rule>\r\n      <Rule\r\n        name={<>Use <SpellLink id={SPELLS.PURIFYING_BREW.id} onClick={e => e.preventDefault()} /> effectively</>}\r\n        performanceMethod={PERFORMANCE_METHOD.HARMONIC}\r\n        description={(\r\n          <>\r\n            Effective use of <SpellLink id={SPELLS.PURIFYING_BREW.id} /> is fundamental to playing Brewmaster successfully. While we cannot <em>automatically</em> tell whether a purify is effective or not, there are some simple guidelines that naturally lead to more effective purifies:\r\n            <ul>\r\n              <li>Spend all of your charges of <SpellLink id={SPELLS.PURIFYING_BREW.id} />.</li>\r\n              <li>Avoid casting <SpellLink id={SPELLS.PURIFYING_BREW.id} /> at less than <SpellLink id={SPELLS.HEAVY_STAGGER_DEBUFF.id} />—but not if it would waste charges! In a raid environment, <SpellLink id={SPELLS.HEAVY_STAGGER_DEBUFF.id} /> is not dangerous in itself. While not every fight will put you into <SpellLink id={SPELLS.HEAVY_STAGGER_DEBUFF.id} /> consistently, this remains a good rule of thumb.</li>\r\n              <li>If you are going to purify a hit, do so as soon as possible after it lands. Every half-second delayed after the hit causes you to take 5% of the hit's damage from <SpellLink id={SPELLS.STAGGER.id} />.</li>\r\n            </ul>\r\n            For more information on effective use of <SpellLink id={SPELLS.PURIFYING_BREW.id} />, see the <a href=\"https://www.peakofserenity.com/bfa/brewmaster/purifying/\">Peak of Serenity guide</a>.\r\n          </>\r\n        )}\r\n      >\r\n        <AbilityRequirement spell={SPELLS.PURIFYING_BREW.id} name={<><SpellLink id={SPELLS.PURIFYING_BREW.id} /> cast efficiency</>} />\r\n        <Requirement\r\n          name={<>Maintain <SpellLink id={SPELLS.SHUFFLE.id} /> while tanking</>} thresholds={thresholds.shuffleHits}\r\n          tooltip=\"Shuffle increases the power of your Purifies. Maintain it by casting your rotational abilities.\"\r\n        />\r\n        <Requirement\r\n          name=\"Average Purification Delay\" thresholds={thresholds.purifyDelay}\r\n          tooltip=\"The delay is tracked from the most recent time you were able to purify after a hit. If the hit occurred when no charges were available, you are not penalized.\"\r\n        />\r\n      </Rule>\r\n      <Rule\r\n        name=\"Top the Damage Charts\"\r\n        description={(\r\n          <>\r\n            While the <em>primary</em> role of a tank is to get hit in the face a bunch and not die in the process, once that is under control we get to spend some energy dealing damage! Maintaining a <a href=\"https://www.peakofserenity.com/bfa/brewmaster/guide/\">correct DPS rotation</a> also provides optimal brew generation. <strong>However, if you are dying, ignore this checklist item!</strong> As much as we may enjoy padding for those sweet orange parses, not-wiping takes precedence.\r\n          </>\r\n        )}\r\n      >\r\n        <AbilityRequirement spell={SPELLS.KEG_SMASH.id} />\r\n        <AbilityRequirement spell={SPELLS.BLACKOUT_KICK_BRM.id} />\r\n        <AbilityRequirement spell={SPELLS.INVOKE_NIUZAO_THE_BLACK_OX.id} />\r\n        <AbilityRequirement spell={SPELLS.TOUCH_OF_DEATH.id} />\r\n        <Requirement\r\n          name={<><SpellLink id={SPELLS.TIGER_PALM.id} /> casts while better abilities were available</>}\r\n          tooltip=\"Tiger Palm is a filler ability and should only be used when other spells are on cooldown.\"\r\n          thresholds={thresholds.badTp}\r\n        />\r\n        {combatant.hasTalent(SPELLS.BLACKOUT_COMBO_TALENT.id) && (\r\n          <>\r\n            <Requirement\r\n              name={<><SpellLink id={SPELLS.BLACKOUT_COMBO_TALENT.id} />-empowered <SpellLink id={SPELLS.TIGER_PALM.id}>Tiger Palms</SpellLink></>}\r\n              thresholds={thresholds.bocTp}\r\n            />\r\n            <Requirement\r\n              name={<><SpellLink id={SPELLS.BLACKOUT_COMBO_TALENT.id}>Blackout Combos</SpellLink> spent on <SpellLink id={SPELLS.TIGER_PALM.id} /></>}\r\n              thresholds={thresholds.bocDpsWaste}\r\n            />\r\n          </>\r\n        )}\r\n        {combatant.hasTalent(SPELLS.RUSHING_JADE_WIND_TALENT_BREWMASTER.id) && (\r\n          <Requirement\r\n            name={<><SpellLink id={SPELLS.RUSHING_JADE_WIND.id} /> uptime</>}\r\n            thresholds={thresholds.rjw}\r\n          />\r\n        )}\r\n      </Rule>\r\n      <PreparationRule thresholds={thresholds}></PreparationRule>\r\n    </Checklist>\r\n  );\r\n};\r\n\r\nexport default Component;\r\n","import React from 'react';\r\n\r\nimport SPELLS from 'common/SPELLS';\r\nimport SpellLink from 'common/SpellLink';\r\nimport Analyzer, { Options, SELECTED_PLAYER } from 'parser/core/Analyzer';\r\nimport Events, { AbsorbedEvent, ApplyBuffEvent, ApplyBuffStackEvent, CastEvent, RemoveBuffEvent } from 'parser/core/Events';\r\nimport SpellIcon from 'common/SpellIcon';\r\nimport STATISTIC_ORDER from 'interface/others/STATISTIC_ORDER';\r\nimport Statistic from 'interface/statistics/Statistic';\r\nimport BoringValue from 'interface/statistics/components/BoringValueText';\r\nimport { formatNumber, formatPercentage } from 'common/format';\r\nimport FooterChart, { formatTime } from 'interface/others/FooterChart';\r\nimport { ThresholdStyle, When } from 'parser/core/ParseResults';\r\n\r\nconst PURIFIED_CHI_PCT = 0.2;\r\nconst PURIFIED_CHI_WINDOW = 150;\r\n\r\nconst WASTED_THRESHOLD = 0.75;\r\n\r\ntype Absorb = {\r\n  cast: CastEvent,\r\n  timestamp: number, // timestamp relative to start time\r\n  amount: number,\r\n  wasted: number,\r\n  stacks: number,\r\n};\r\n\r\nclass CelestialBrew extends Analyzer {\r\n  _absorbs: Absorb[];\r\n  _currentAbsorb?: Absorb;\r\n  _currentChiStacks: number = 0;\r\n  _expireTime: number | null = null;\r\n\r\n  constructor(options: Options) {\r\n    super(options);\r\n\r\n    this._absorbs = [];\r\n\r\n    this.addEventListener(Events.absorbed.by(SELECTED_PLAYER).spell(SPELLS.CELESTIAL_BREW), this._cbAbsorb);\r\n    this.addEventListener(Events.cast.by(SELECTED_PLAYER).spell(SPELLS.CELESTIAL_BREW), this._resetAbsorb);\r\n    this.addEventListener(Events.removebuff.spell(SPELLS.CELESTIAL_BREW), this._expireAbsorb);\r\n    this.addEventListener(Events.applybuff.to(SELECTED_PLAYER).spell(SPELLS.PURIFIED_CHI), this._purifiedChiApplied);\r\n    this.addEventListener(Events.applybuffstack.to(SELECTED_PLAYER).spell(SPELLS.PURIFIED_CHI), this._purifiedChiStackApplied);\r\n    this.addEventListener(Events.removebuff.spell(SPELLS.PURIFIED_CHI).to(SELECTED_PLAYER), this._expirePurifiedChi);\r\n    this.addEventListener(Events.fightend, this._finalize);\r\n  }\r\n\r\n  get goodCastSuggestion() {\r\n    const actual = this._absorbs\r\n      .filter(({ amount, wasted }) => amount / (amount + wasted) >= WASTED_THRESHOLD)\r\n      .length / this._absorbs.length;\r\n    return {\r\n      actual,\r\n      isLessThan: {\r\n        minor: 0.9,\r\n        average: 0.8,\r\n        major: 0.7,\r\n      },\r\n      style: ThresholdStyle.PERCENTAGE,\r\n    };\r\n  }\r\n\r\n  expireChi(timestamp: number) {\r\n    if (this._expireTime && timestamp - this._expireTime > PURIFIED_CHI_WINDOW) {\r\n      this._expireTime = null;\r\n      this._currentChiStacks = 0;\r\n    }\r\n  }\r\n\r\n  suggestions(when: When) {\r\n    when(this.goodCastSuggestion)\r\n      .addSuggestion((suggest, actual, recommended) => suggest(\r\n        <>You should try to use <SpellLink id={SPELLS.CELESTIAL_BREW.id} /> when most or all of the absorb will be consumed.</>,\r\n      )\r\n        .icon(SPELLS.CELESTIAL_BREW.icon)\r\n        .actual(`${formatPercentage(actual)}% of your absorbs expired with more than 25% remaining.`)\r\n        .recommended(`< ${formatPercentage(recommended)}% is recommended`));\r\n  }\r\n\r\n  statistic() {\r\n    const avgAbsorb = this._absorbs.length === 0 ? 0 : this._absorbs.reduce((total, absorb) => total + absorb.amount, 0) / this._absorbs.length;\r\n    const wastedAbsorb = this._absorbs.reduce((total, absorb) => total + absorb.wasted, 0);\r\n    const avgStacks = this._absorbs.length === 0 ? 0 : this._absorbs.reduce((total, absorb) => total + absorb.stacks, 0) / this._absorbs.length;\r\n\r\n    const spec = {\r\n      mark: 'bar' as const,\r\n      transform: [\r\n        {\r\n          fold: ['amount', 'wasted'],\r\n        },\r\n        {\r\n          calculate: 'datum.timestamp / 60000',\r\n          as: 'time_min',\r\n        },\r\n        {\r\n          calculate: formatTime(),\r\n          as: 'time_label',\r\n        },\r\n      ],\r\n      encoding: {\r\n        x: {\r\n          field: 'time_min',\r\n          type: 'quantitative' as const,\r\n          axis: {\r\n            title: null,\r\n            labelExpr: formatTime('(datum.value * 60000)'),\r\n            grid: false,\r\n          },\r\n          scale: { zero: true },\r\n        },\r\n        y: {\r\n          field: 'value',\r\n          type: 'quantitative' as const,\r\n          title: null,\r\n          axis: {\r\n            format: '~s',\r\n            tickCount: 3,\r\n            grid: false,\r\n          },\r\n          stack: true,\r\n        },\r\n        color: {\r\n          field: 'key',\r\n          type: 'nominal' as const,\r\n          legend: null,\r\n          scale: {\r\n            domain: ['amount', 'wasted'],\r\n            range: ['rgb(112, 181, 112)', 'rgb(255, 128, 0)'],\r\n          },\r\n        },\r\n        order: { field: 'key' },\r\n        tooltip: [\r\n          { field: 'time_label', type: 'nominal' as const, title: 'Time' },\r\n          { field: 'stacks', type: 'ordinal' as const, title: 'Purified Chi Stacks' },\r\n          { field: 'amount', type: 'quantitative' as const, title: 'Damage Absorbed', format: '.3~s' },\r\n          { field: 'wasted', type: 'quantitative' as const, title: 'Absorb Wasted', format: '.3~s' },\r\n        ],\r\n      },\r\n    };\r\n    return (\r\n      <Statistic\r\n        position={STATISTIC_ORDER.OPTIONAL()}\r\n        size=\"flexible\"\r\n        tooltip={(\r\n          <>\r\n            Does not include <strong>{formatNumber(wastedAbsorb)} wasted absorb</strong> (avg: <strong>{formatNumber(wastedAbsorb / this._absorbs.length)}</strong>).<br />\r\n\r\n            You cast Celestial Brew with an average of <strong>{avgStacks.toFixed(2)} stacks</strong> of Purified Chi, increasing the absorb amount by <strong>{formatPercentage(avgStacks * PURIFIED_CHI_PCT)}%</strong>.\r\n          </>\r\n        )}\r\n      >\r\n        <BoringValue label={<><SpellIcon id={SPELLS.CELESTIAL_BREW.id} /> Avg. Absorb per Celestial Brew</>}>\r\n          <>\r\n            {formatNumber(avgAbsorb)} % <br />\r\n            <FooterChart spec={spec} data={this._absorbs} />\r\n          </>\r\n        </BoringValue>\r\n      </Statistic>\r\n    );\r\n  }\r\n\r\n  private _expirePurifiedChi(event: RemoveBuffEvent) {\r\n    this._expireTime = event.timestamp;\r\n  }\r\n\r\n  private _purifiedChiApplied(event: ApplyBuffEvent) {\r\n    this.expireChi(event.timestamp);\r\n\r\n    this._currentChiStacks = 1;\r\n  }\r\n\r\n  private _purifiedChiStackApplied(event: ApplyBuffStackEvent) {\r\n    this._currentChiStacks = event.stack;\r\n  }\r\n\r\n  private _resetAbsorb(cast: CastEvent) {\r\n    this.expireChi(cast.timestamp);\r\n\r\n    if (this._currentAbsorb) {\r\n      this._absorbs.push(this._currentAbsorb);\r\n    }\r\n\r\n    this._currentAbsorb = {\r\n      cast,\r\n      timestamp: cast.timestamp - this.owner.fight.start_time,\r\n      amount: 0,\r\n      wasted: 0,\r\n      stacks: this._currentChiStacks,\r\n    };\r\n\r\n    this._currentChiStacks = 0;\r\n  }\r\n\r\n  private _cbAbsorb(event: AbsorbedEvent) {\r\n    if (this._currentAbsorb === undefined) {\r\n      console.error('CB absorb detected without CB active!', event);\r\n      return;\r\n    }\r\n\r\n    this._currentAbsorb.amount += event.amount;\r\n  }\r\n\r\n  private _expireAbsorb(event: RemoveBuffEvent) {\r\n    if (this._currentAbsorb === undefined) {\r\n      console.error('CB expired but was never applied!', event);\r\n      return;\r\n    }\r\n\r\n    this._currentAbsorb.wasted = event.absorb || 0;\r\n  }\r\n\r\n  private _finalize() {\r\n    if (this._currentAbsorb) {\r\n      this._absorbs.push(this._currentAbsorb);\r\n    }\r\n  }\r\n}\r\n\r\nexport default CelestialBrew;\r\n","import React from 'react';\r\n\r\nimport BaseChecklist from 'parser/shared/modules/features/Checklist/Module';\r\nimport CastEfficiency from 'parser/shared/modules/CastEfficiency';\r\nimport Combatants from 'parser/shared/modules/Combatants';\r\nimport PreparationRuleAnalyzer from 'parser/shared/modules/features/Checklist/PreparationRuleAnalyzer';\r\n\r\nimport BlackoutCombo from '../../spells/BlackoutCombo';\r\nimport TigerPalm from '../../spells/TigerPalm';\r\nimport RushingJadeWind from '../../spells/RushingJadeWind';\r\nimport PurifyingBrew from '../../spells/PurifyingBrew';\r\nimport Shuffle from '../../spells/Shuffle';\r\n\r\nimport Component from './Component';\r\nimport CelestialBrew from '../../spells/CelestialBrew';\r\n\r\nexport default class Checklist extends BaseChecklist {\r\n  static dependencies = {\r\n    combatants: Combatants,\r\n    castEfficiency: CastEfficiency,\r\n    prep: PreparationRuleAnalyzer,\r\n    boc: BlackoutCombo,\r\n    tp: TigerPalm,\r\n    rjw: RushingJadeWind,\r\n    pb: PurifyingBrew,\r\n    shuffle: Shuffle,\r\n    cb: CelestialBrew,\r\n  };\r\n\r\n  protected combatants!: Combatants;\r\n  protected prep!: PreparationRuleAnalyzer;\r\n  protected castEfficiency!: CastEfficiency;\r\n  protected boc!: BlackoutCombo;\r\n  protected tp!: TigerPalm;\r\n  protected rjw!: RushingJadeWind;\r\n  protected pb!: PurifyingBrew;\r\n  protected shuffle!: Shuffle;\r\n  protected cb!: CelestialBrew;\r\n\r\n  render() {\r\n    return (\r\n      <Component\r\n        combatant={this.combatants.selected}\r\n        castEfficiency={this.castEfficiency}\r\n        thresholds={{\r\n          ...this.prep.thresholds,\r\n          bocDpsWaste: this.boc.dpsWasteThreshold,\r\n          bocTp: this.tp.bocEmpoweredThreshold,\r\n          badTp: this.tp.badCastSuggestion,\r\n          rjw: this.rjw.uptimeThreshold,\r\n          purifyDelay: this.pb.purifyDelaySuggestion,\r\n          shuffleHits: this.shuffle.uptimeSuggestionThreshold,\r\n          goodCBCasts: this.cb.goodCastSuggestion,\r\n        }}\r\n      />\r\n    );\r\n  }\r\n}\r\n","import React from 'react';\r\nimport SpellLink from 'common/SpellLink';\r\nimport SPELLS from 'common/SPELLS';\r\nimport { formatPercentage } from 'common/format';\r\n\r\nimport Analyzer, { SELECTED_PLAYER } from 'parser/core/Analyzer';\r\nimport Enemies from 'parser/shared/modules/Enemies';\r\nimport { i18n } from '@lingui/core';\r\nimport { t } from '@lingui/macro';\r\n\r\nimport Events from 'parser/core/Events';\r\n\r\nimport { shouldIgnore } from 'parser/shared/modules/hit-tracking/utilities';\r\n\r\nconst DEBUG_ABILITIES = false;\r\n\r\nclass BreathOfFire extends Analyzer {\r\n  get uptime() {\r\n    return this.enemies.getBuffUptime(SPELLS.BREATH_OF_FIRE_DEBUFF.id) / this.owner.fightDuration;\r\n  }\r\n\r\n  get mitigatedHits() {\r\n    return this.hitsWithBoF / (this.hitsWithBoF + this.hitsWithoutBoF);\r\n  }\r\n\r\n  get suggestionThreshold() {\r\n    return {\r\n      actual: this.mitigatedHits,\r\n      // max possible now is 0.8 w/o shenanigans\r\n      isLessThan: {\r\n        minor: 0.7,\r\n        average: 0.6,\r\n        major: 0.5,\r\n      },\r\n      style: 'percentage',\r\n    };\r\n  }\r\n\r\n  static dependencies = {\r\n    enemies: Enemies,\r\n  };\r\n  hitsWithBoF = 0;\r\n  hitsWithoutBoF = 0;\r\n\r\n  constructor(options) {\r\n    super(options);\r\n    this.addEventListener(Events.damage.to(SELECTED_PLAYER), this.onDamageTaken);\r\n  }\r\n\r\n  onDamageTaken(event) {\r\n    if (event.ability.guid === SPELLS.STAGGER_TAKEN.id) {\r\n      return;\r\n    }\r\n    if (shouldIgnore(this.enemies, event)) {\r\n      return;\r\n    }\r\n\r\n    const enemy = this.enemies.enemies[event.sourceID];\r\n    if (enemy && enemy.hasBuff(SPELLS.BREATH_OF_FIRE_DEBUFF.id)) {\r\n      this.hitsWithBoF += 1;\r\n    } else {\r\n      if (DEBUG_ABILITIES && event.ability.guid !== SPELLS.MELEE.id) {\r\n        console.log('hit w/o bof', event);\r\n      }\r\n      this.hitsWithoutBoF += 1;\r\n    }\r\n  }\r\n\r\n  suggestions(when) {\r\n    when(this.suggestionThreshold)\r\n      .addSuggestion((suggest, actual, recommended) => suggest(<>Your <SpellLink id={SPELLS.BREATH_OF_FIRE.id} /> usage can be improved. The associated debuff is a key part of our damage mitigation.</>)\r\n        .icon(SPELLS.BREATH_OF_FIRE.icon)\r\n        .actual(i18n._(t('monk.brewmaster.suggestions.breathOfFire.hitsMitigated')`${formatPercentage(actual)}% of hits mitigated with Breath of Fire`))\r\n        .recommended(`> ${formatPercentage(recommended)}% is recommended`));\r\n  }\r\n}\r\n\r\nexport default BreathOfFire;\r\n","import React from 'react';\r\nimport Analyzer, { SELECTED_PLAYER } from 'parser/core/Analyzer';\r\nimport StatTracker from 'parser/shared/modules/StatTracker';\r\nimport Combatants from 'parser/shared/modules/Combatants';\r\nimport STATISTIC_ORDER from 'interface/others/STATISTIC_ORDER';\r\nimport Statistic from 'interface/statistics/Statistic';\r\nimport BoringValue from 'interface/statistics/components/BoringValueText';\r\nimport SPELLS from 'common/SPELLS';\r\nimport ITEMS from 'common/ITEMS';\r\nimport ItemIcon from 'common/ItemIcon';\r\nimport SPECS from 'game/SPECS';\r\nimport SpellIcon from 'common/SpellIcon';\r\nimport SpecIcon from 'common/SpecIcon';\r\nimport SpellLink from 'common/SpellLink';\r\nimport Icon from 'common/Icon';\r\nimport Panel from 'interface/others/Panel';\r\nimport { formatNumber } from 'common/format';\r\nimport Events from 'parser/core/Events';\r\n\r\n/**\r\n * Celestial Fortune\r\n *\r\n * CF has two effects:\r\n *\r\n * 1. Any non-absorb heal has a chance equal to your crit% to trigger\r\n * CF, healing you for an additional 65%\r\n *\r\n * 2. Any absorb is increased by a factor of (1 + crit%)\r\n *\r\n * This module tracks both and breaks down the healing done by source\r\n * player.\r\n */\r\nclass CelestialFortune extends Analyzer {\r\n  _totalHealing = 0;\r\n\r\n  get totalHealing() {\r\n    return this._totalHealing;\r\n  }\r\n\r\n  get hps() {\r\n    return this._totalHealing / (this.owner.fightDuration / 1000);\r\n  }\r\n\r\n  get bonusCritRatio() {\r\n    return 1 - this.stats.baseCritPercentage / this.stats.currentCritPercentage;\r\n  }\r\n\r\n  static dependencies = {\r\n    stats: StatTracker,\r\n    combatants: Combatants,\r\n  };\r\n  critBonusHealing = 0;\r\n  _overhealing = 0;\r\n  _healingByEntityBySpell = {};\r\n  _currentAbsorbs = {};\r\n  _lastMaxHp = 0;\r\n  _nextCFHeal = null;\r\n\r\n  constructor(options) {\r\n    super(options);\r\n    this.addEventListener(Events.heal.to(SELECTED_PLAYER), this.onHeal);\r\n    this.addEventListener(Events.absorbed.to(SELECTED_PLAYER), this.onAbsorb);\r\n    this.addEventListener(Events.removebuff.to(SELECTED_PLAYER), this.onRemoveBuff);\r\n  }\r\n\r\n  onHeal(event) {\r\n    this._lastMaxHp = event.maxHitPoints ? event.maxHitPoints : this._lastMaxHp;\r\n    if (event.ability.guid === SPELLS.CELESTIAL_FORTUNE_HEAL.id) {\r\n      const amount = event.amount + (event.absorbed || 0);\r\n      const overheal = event.overheal || 0;\r\n      this._totalHealing += amount;\r\n      this.critBonusHealing += Math.max(0, amount * this.bonusCritRatio);\r\n      this._overhealing += overheal;\r\n      this._queueHealing(event);\r\n      return;\r\n    } else {\r\n      // only adds if a CF heal is queued\r\n      this._addHealing(event);\r\n    }\r\n  }\r\n\r\n  // track damage being absorbed\r\n  onAbsorb(event) {\r\n    if (event.ability.guid === SPELLS.STAGGER.id) {\r\n      return;\r\n    }\r\n\r\n    if (!this._currentAbsorbs[event.sourceID]) {\r\n      this._currentAbsorbs[event.sourceID] = {};\r\n    }\r\n\r\n    const sourceAbsorbs = this._currentAbsorbs[event.sourceID];\r\n    sourceAbsorbs[event.ability.guid] = sourceAbsorbs[event.ability.guid] ? sourceAbsorbs[event.ability.guid] + event.amount : event.amount;\r\n  }\r\n\r\n  onRemoveBuff(event) {\r\n    if (!this._currentAbsorbs[event.sourceID]) {\r\n      return; // no absorbs from this source\r\n    }\r\n\r\n    const sourceAbsorbs = this._currentAbsorbs[event.sourceID];\r\n\r\n    if (!sourceAbsorbs[event.ability.guid]) {\r\n      return; // no absorbs from this (source, ability) pair\r\n    }\r\n\r\n    this._addAbsorb(sourceAbsorbs[event.ability.guid], event);\r\n\r\n    sourceAbsorbs[event.ability.guid] = undefined;\r\n  }\r\n\r\n  _queueHealing(event) {\r\n    if (this._nextCFHeal !== null) {\r\n      console.warn('Resetting CF healing', event);\r\n    }\r\n    this._nextCFHeal = event;\r\n  }\r\n\r\n  _initHealing(sourceId, id, absorb) {\r\n    if (!this._healingByEntityBySpell[sourceId]) {\r\n      this._healingByEntityBySpell[sourceId] = {\r\n        _totalHealing: 0,\r\n      };\r\n    }\r\n    if (!this._healingByEntityBySpell[sourceId][id]) {\r\n      this._healingByEntityBySpell[sourceId][id] = {\r\n        amount: 0,\r\n        absorb,\r\n      };\r\n    }\r\n  }\r\n\r\n  _addHealing(event) {\r\n    if (this._nextCFHeal === null) {\r\n      return;\r\n    }\r\n    const totalCFAmount = this._nextCFHeal.amount + (this._nextCFHeal.overheal || 0);\r\n    const totalAmount = event.amount + (event.overheal || 0);\r\n    if (Math.abs(totalCFAmount - 0.65 * totalAmount) > 0.1 * totalAmount && totalAmount > 100) {\r\n      console.warn('Potential CF misalignment', event, this._nextCFHeal);\r\n    }\r\n\r\n    const spellId = event.ability.guid;\r\n    const sourceId = event.sourceID;\r\n    this._initHealing(sourceId, spellId, false);\r\n    this._healingByEntityBySpell[sourceId][spellId].amount += this._nextCFHeal.amount;\r\n    this._healingByEntityBySpell[sourceId]._totalHealing += this._nextCFHeal.amount;\r\n    this._nextCFHeal = null;\r\n  }\r\n\r\n  _addAbsorb(amountAbsorbed, event) {\r\n    const crit = this.stats.currentCritPercentage;\r\n    const sourceId = event.sourceID;\r\n    const spellId = event.ability.guid;\r\n    this._initHealing(sourceId, spellId, true);\r\n    const totalAbsorb = amountAbsorbed + event.absorb;\r\n    const cfBonus = totalAbsorb * crit / (1 + crit);\r\n    // any absorb overhealing is taken from the cf bonus *first*\r\n    const amount = Math.max(0, cfBonus - event.absorb);\r\n\r\n    this._healingByEntityBySpell[sourceId][spellId].amount += amount;\r\n    this._healingByEntityBySpell[sourceId]._totalHealing += amount;\r\n    this._totalHealing += amount;\r\n    this.critBonusHealing += amount * this.bonusCritRatio;\r\n  }\r\n\r\n  statistic() {\r\n    return (\r\n      <Statistic\r\n        size=\"flexible\"\r\n        position={STATISTIC_ORDER.OPTIONAL()}\r\n      >\r\n        <BoringValue label={<><SpellIcon id={SPELLS.CELESTIAL_FORTUNE_HEAL.id} /> Celestial Fortune Healing</>}>\r\n          <>\r\n            {formatNumber(this.hps)} HPS\r\n          </>\r\n        </BoringValue>\r\n      </Statistic>\r\n    );\r\n  }\r\n\r\n  entries() {\r\n    function playerSpan(id, style = { float: 'left' }) {\r\n      const combatant = this.combatants.players[id];\r\n      if (!combatant) {\r\n        return '';\r\n      }\r\n      const spec = SPECS[combatant.specId];\r\n      const specClassName = spec.className.replace(' ', '');\r\n      return (\r\n        <span style={style} className={specClassName}><SpecIcon id={spec.id} />{` ${combatant.name}`}</span>\r\n      );\r\n    }\r\n\r\n    const playerTable = ([sourceId, obj]) => {\r\n      const tableEntries = Object.entries(obj)\r\n        .filter(([id, { amount }]) => amount > this._lastMaxHp * 0.01)\r\n        .sort(([idA, objA], [idB, objB]) => objB.amount - objA.amount);\r\n\r\n      if (tableEntries.length === 0) {\r\n        return null; // a few small healing sources, skipping\r\n      }\r\n      return (\r\n        <tbody key={sourceId}>\r\n          <tr>\r\n            <th style={{ width: '20%' }}>{playerSpan.call(this, sourceId)}</th>\r\n            <th style={{ width: '20%' }}>Spell</th>\r\n            <th style={{ width: '10%' }}>HPS</th>\r\n            <th>Fraction of CF Healing</th>\r\n            <th />\r\n          </tr>\r\n          {tableEntries\r\n            .filter(([id, obj]) => id !== '_totalHealing')\r\n            .map(([id, { absorb, amount }]) => (\r\n              <tr key={id}>\r\n                <td />\r\n                <td>\r\n                  <SpellLink id={Number(id)} icon={false}>\r\n                    {SPELLS[id] ? <><Icon icon={SPELLS[id].icon} /> {SPELLS[id].name}</> : ITEMS[id] ? <><ItemIcon id={ITEMS[id]} /> {ITEMS[id].name}</> : id}\r\n                  </SpellLink>\r\n                </td>\r\n                <td>{absorb ? '≈' : ''}{`${formatNumber(amount / (this.owner.fightDuration / 1000))} HPS`}</td>\r\n                <td style={{ width: '20%' }}>\r\n                  <div className=\"flex performance-bar-container\">\r\n                    <div\r\n                      className=\"flex-sub performance-bar\"\r\n                      style={{ width: `${amount / this._totalHealing * 100}%`, backgroundColor: '#70b570' }}\r\n                    />\r\n                  </div>\r\n                </td>\r\n                <td className=\"text-left\">\r\n                  {`${(amount / this._totalHealing * 100).toFixed(2)}%`}\r\n                </td>\r\n              </tr>\r\n            ))}\r\n          <tr>\r\n            <td />\r\n            <td>Total from {playerSpan.call(this, sourceId, {})}</td>\r\n            <td>{`${formatNumber(obj._totalHealing / (this.owner.fightDuration / 1000))} HPS`}</td>\r\n            <td style={{ width: '20%' }}>\r\n              <div className=\"flex performance-bar-container\">\r\n                <div\r\n                  className=\"flex-sub performance-bar\"\r\n                  style={{ width: `${obj._totalHealing / this._totalHealing * 100}%`, backgroundColor: '#ff8000' }}\r\n                />\r\n              </div>\r\n            </td>\r\n            <td className=\"text-left\">\r\n              {`${(obj._totalHealing / this._totalHealing * 100).toFixed(2)}%`}\r\n            </td>\r\n          </tr>\r\n        </tbody>\r\n      );\r\n    };\r\n\r\n    const entries = Object.entries(this._healingByEntityBySpell)\r\n      .sort(([idA, objA], [idB, objB]) => objB._totalHealing - objA._totalHealing)\r\n      .map(playerTable);\r\n    return entries;\r\n  }\r\n\r\n  tab() {\r\n    return {\r\n      title: 'Celestial Fortune',\r\n      url: 'celestial-fortune',\r\n      render: () => (\r\n        <Panel>\r\n          <div style={{ marginTop: -10, marginBottom: -10 }}>\r\n            <div style={{ padding: '1em' }}>Bonus healing provided by <SpellLink id={SPELLS.CELESTIAL_FORTUNE_HEAL.id} />, broken down by triggering spell and which player cast that spell.</div>\r\n            <table className=\"data-table\" style={{ marginTop: 10, marginBottom: 10 }}>\r\n              {this.entries()}\r\n            </table>\r\n          </div>\r\n        </Panel>\r\n      ),\r\n    };\r\n  }\r\n}\r\n\r\nexport default CelestialFortune;\r\n","import EventsNormalizer from 'parser/core/EventsNormalizer';\r\nimport { EventType } from 'parser/core/Events';\r\n\r\nimport { GIFT_OF_THE_OX_SPELL_IDS } from '../constants';\r\n\r\nexport const GOTOX_GENERATED_EVENT = 'orb-generated';\r\n\r\n/**\r\n * Gift of the Ox orbs show up as 'casts' which messes with other things\r\n * that expect casts to be *actual abilities.*\r\n *\r\n * because we only have events related to one player, we don't need to\r\n * filter by SELECTED_PLAYER in other modules\r\n */\r\nclass GiftOfTheOx extends EventsNormalizer {\r\n  normalize(events) {\r\n    return events.map(event => {\r\n      if (event.type === EventType.Cast && GIFT_OF_THE_OX_SPELL_IDS.includes(event.ability.guid)) {\r\n        event.type = GOTOX_GENERATED_EVENT;\r\n        event.__modified = true;\r\n      }\r\n      return event;\r\n    });\r\n  }\r\n}\r\n\r\nexport default GiftOfTheOx;\r\n","import React from 'react';\r\nimport SPELLS from 'common/SPELLS';\r\nimport SpellIcon from 'common/SpellIcon';\r\n\r\nimport { formatNumber } from 'common/format';\r\nimport Analyzer, { SELECTED_PLAYER } from 'parser/core/Analyzer';\r\nimport Events from 'parser/core/Events';\r\nimport StatTracker from 'parser/shared/modules/StatTracker';\r\nimport STATISTIC_ORDER from 'interface/others/STATISTIC_ORDER';\r\nimport Statistic from 'interface/statistics/Statistic';\r\nimport BoringValue from 'interface/statistics/components/BoringValueText';\r\nimport { calculatePrimaryStat } from 'common/stats';\r\n\r\nimport { BASE_AGI, GIFT_OF_THE_OX_SPELLS } from '../../constants';\r\nimport { GOTOX_GENERATED_EVENT } from '../../normalizers/GiftOfTheOx';\r\n\r\nconst WDPS_BASE_ILVL = 310;\r\nconst WDPS_310_AGI_POLEARM = 122.8;\r\n\r\n/**\r\n * Gift of the Ox\r\n *\r\n * Generated healing spheres when struck, which heal for 1.5x AP when\r\n * consumed by walking over, expiration, overcapping, or casting\r\n * Expel Harm.\r\n *\r\n * See peak for a breakdown of how it works and all its quirks:\r\n * https://www.peakofserenity.com/2018/10/06/gift-of-the-ox/\r\n */\r\nexport default class GiftOfTheOx extends Analyzer {\r\n  static dependencies = {\r\n    stats: StatTracker,\r\n  };\r\n\r\n  totalHealing = 0;\r\n  agiBonusHealing = 0;\r\n  wdpsBonusHealing = 0;\r\n  _baseAgiHealing = 0;\r\n  masteryBonusHealing = 0;\r\n  _wdps = 0;\r\n\r\n  orbsGenerated = 0;\r\n  orbsConsumed = 0;\r\n\r\n  expelHarmCasts = 0;\r\n  expelHarmOrbsConsumed = 0;\r\n  expelHarmOverhealing = 0;\r\n\r\n  _lastEHTimestamp = null;\r\n\r\n  constructor(...args) {\r\n    super(...args);\r\n    this.addEventListener(GOTOX_GENERATED_EVENT, this._orbGenerated);\r\n    this.addEventListener(Events.cast.by(SELECTED_PLAYER).spell(SPELLS.EXPEL_HARM), this._expelCast);\r\n    this.addEventListener(Events.heal.by(SELECTED_PLAYER).spell(GIFT_OF_THE_OX_SPELLS), this._gotoxHeal);\r\n\r\n    this._wdps = calculatePrimaryStat(WDPS_BASE_ILVL, WDPS_310_AGI_POLEARM, this.selectedCombatant.mainHand.itemLevel);\r\n  }\r\n\r\n  _orbGenerated(event) {\r\n    this.orbsGenerated += 1;\r\n  }\r\n\r\n  _expelCast(event) {\r\n    this.expelHarmCasts += 1;\r\n    this._lastEHTimestamp = event.timestamp;\r\n  }\r\n\r\n  _gotoxHeal(event) {\r\n    this.orbsConsumed += 1;\r\n    const amount = event.amount + (event.absorbed || 0);\r\n    this.totalHealing += amount;\r\n\r\n    // so the formula for the healing is\r\n    //\r\n    // Heal = 1.5 * (6 * WDPS + BonusAgi + BaseAgi) * Mastery * Vers\r\n    //\r\n    // With BaseAgi known, we get:\r\n    //\r\n    // BonusHeal = 1.5 * (6 * WDPS + BonusAgi + BaseAgi) * Mastery * Vers - 1.5 * (6 * WDPS + BaseAgi) * Mastery * Vers\r\n    //           = Heal * (1 - (6 WDPS + BaseAgi) / (6 WDPS + BonusAgi + BaseAgi))\r\n    //           = Heal * (BonusAgi / (6 WDPS + BonusAgi + BaseAgi))\r\n    //\r\n    // and similar for bonus WDPS healing and base agi healing\r\n    const denom = (6 * this._wdps + this.stats.currentAgilityRating);\r\n    this.agiBonusHealing += amount * (this.stats.currentAgilityRating - BASE_AGI) / denom;\r\n    this.wdpsBonusHealing += amount * 6 * this._wdps / denom;\r\n    this._baseAgiHealing += amount * BASE_AGI / denom;\r\n    // MasteryBonusHeal = 1.5 * AP * (1 + BonusMastery + BaseMastery) * Vers - 1.5 * AP * (1 + BaseMastery) * Vers\r\n    //                  = Heal * (1 - (1 + BaseMastery) / (1 + BonusMastery + BaseMastery))\r\n    //                  = Heal * BonusMastery / (1 + BonusMastery + BaseMastery)\r\n    this.masteryBonusHealing += amount * (this.stats.currentMasteryPercentage - this.stats.masteryPercentage(0, true)) / (1 + this.stats.currentMasteryPercentage);\r\n\r\n    if (event.timestamp === this._lastEHTimestamp) {\r\n      this.expelHarmOrbsConsumed += 1;\r\n      this.expelHarmOverhealing += event.overheal || 0;\r\n    }\r\n  }\r\n\r\n  statistic() {\r\n    return (\r\n      <Statistic\r\n        size=\"flexible\"\r\n        position={STATISTIC_ORDER.OPTIONAL()}\r\n        tooltip={(\r\n          <>\r\n            You generated {formatNumber(this.orbsGenerated)} healing spheres and consumed {formatNumber(this.orbsConsumed)} of them, healing for <b>{formatNumber(this.totalHealing)}</b>.<br />\r\n            {formatNumber(this.expelHarmOrbsConsumed)} of these were consumed with Expel Harm over {formatNumber(this.expelHarmCasts)} casts.\r\n          </>\r\n        )}\r\n      >\r\n        <BoringValue label={<><SpellIcon id={GIFT_OF_THE_OX_SPELLS[0].id} /> Gift of the Ox Healing</>}>\r\n          <>\r\n            {formatNumber(this.totalHealing / (this.owner.fightDuration / 1000))} HPS\r\n          </>\r\n        </BoringValue>\r\n      </Statistic>\r\n    );\r\n  }\r\n}\r\n","import { formatPercentage } from 'common/format';\r\nimport { STATISTIC_ORDER } from 'interface/others/StatisticBox';\r\nimport CoreAlwaysBeCasting from 'parser/shared/modules/AlwaysBeCasting';\r\nimport { i18n } from '@lingui/core';\r\nimport { t } from '@lingui/macro';\r\n\r\nclass AlwaysBeCasting extends CoreAlwaysBeCasting {\r\n  statisticOrder = STATISTIC_ORDER.CORE(10);\r\n\r\n  suggestions(when) {\r\n    const deadTimePercentage = this.totalTimeWasted / this.owner.fightDuration;\r\n\r\n    when(deadTimePercentage).isGreaterThan(0.2)\r\n      .addSuggestion((suggest, actual, recommended) => suggest('Your downtime can be improved. Try to Always Be Casting (ABC).')\r\n        .icon('spell_mage_altertime')\r\n        .actual(i18n._(t('monk.brewmaster.suggestions.alwaysBeCasting.downtime')`${formatPercentage(actual)}% downtime`))\r\n        .recommended(`<${formatPercentage(recommended)}% is recommended`)\r\n        .regular(recommended + 0.05).major(recommended + 0.15));\r\n  }\r\n}\r\n\r\nexport default AlwaysBeCasting;\r\n","import React from 'react';\r\nimport { AutoSizer } from 'react-virtualized';\r\n\r\nimport SPELLS from 'common/SPELLS';\r\nimport SpellLink from 'common/SpellLink';\r\nimport Analyzer, { Options, SELECTED_PLAYER } from 'parser/core/Analyzer';\r\nimport Events, { DamageEvent, DeathEvent, EventType, HealEvent } from 'parser/core/Events';\r\nimport Panel from 'interface/others/Panel';\r\nimport BaseChart, { formatTime } from 'interface/others/BaseChart';\r\n\r\nimport StaggerFabricator, { AddStaggerEvent, RemoveStaggerEvent } from '../core/StaggerFabricator';\r\n\r\ninterface StaggerEvent {\r\n  timestamp: number;\r\n  newPooledDamage: number;\r\n  hitPoints: number | null;\r\n  maxHitPoints: number | null;\r\n}\r\n\r\ntype PurifyEvent = RemoveStaggerEvent & {\r\n  previousTimestamp: number;\r\n}\r\n\r\ninterface HPEvent {\r\n  timestamp: number;\r\n  hitPoints?: number;\r\n  maxHitPoints?: number;\r\n}\r\n\r\n/**\r\n * A graph of staggered damage (and related quantities) over time.\r\n *\r\n * The idea of this is to help people identify the root cause of:\r\n *   - overly high dtps (purifying well after a peak instead of at the peak)\r\n *   - death (stagger ticking too high? one-shot? health trickling away without heals?)\r\n *\r\n * As well as just giving a generally interesting look into when damage\r\n * actually hit your health bar on a fight.\r\n */\r\nclass StaggerPoolGraph extends Analyzer {\r\n  static dependencies = {\r\n    fab: StaggerFabricator,\r\n  };\r\n\r\n  _hpEvents: HPEvent[] = [];\r\n  _staggerEvents: StaggerEvent[] = [];\r\n  _deathEvents: DeathEvent[] = [];\r\n  _purifyEvents: PurifyEvent[] = [];\r\n  _lastHp: number | null = null;\r\n  _lastMaxHp: number | null = null;\r\n\r\n  constructor(options: Options) {\r\n    super(options);\r\n\r\n    this.addEventListener(Events.death.to(SELECTED_PLAYER), this._death);\r\n    this.addEventListener(Events.damage.to(SELECTED_PLAYER), this._damage);\r\n    this.addEventListener(Events.heal.to(SELECTED_PLAYER), this._heal);\r\n    this.addEventListener(EventType.AddStagger, this._addstagger);\r\n    this.addEventListener(EventType.RemoveStagger, this._removestagger);\r\n  }\r\n\r\n  get plot() {\r\n    const xAxis = {\r\n      field: 'timestamp_shifted',\r\n      type: 'quantitative' as const,\r\n      axis: {\r\n        labelExpr: formatTime('datum.value'),\r\n        tickCount: 25,\r\n        grid: false,\r\n      },\r\n      scale: {\r\n        nice: false,\r\n      },\r\n      title: null,\r\n    };\r\n\r\n    const spec = {\r\n      data: {\r\n        name: 'combined',\r\n      },\r\n      transform: [\r\n        {\r\n          filter: 'isValid(datum.newPooledDamage)',\r\n        },\r\n        {\r\n          calculate: `datum.timestamp - ${this.owner.fight.start_time}`,\r\n          as: 'timestamp_shifted',\r\n        },\r\n      ],\r\n      encoding: {\r\n        x: xAxis,\r\n        tooltip: [\r\n          { field: 'hitPoints', type: 'quantitative' as const, title: 'Hit Points', format: '.3~s' },\r\n          { field: 'newPooledDamage', type: 'quantitative' as const, title: 'Staggered Damage', format: '.3~s' },\r\n        ],\r\n      },\r\n      layer: [\r\n        {\r\n          mark: {\r\n            type: 'area' as const,\r\n            line: {\r\n              interpolate: 'linear' as const,\r\n              color: '#fab700',\r\n              strokeWidth: 1,\r\n            },\r\n            color: 'rgba(250, 183, 0, 0.15)',\r\n          },\r\n          encoding: {\r\n            y: {\r\n              field: 'newPooledDamage',\r\n              type: 'quantitative' as const,\r\n              title: null,\r\n              axis: {\r\n                grid: false,\r\n                format: '~s',\r\n              },\r\n            },\r\n          },\r\n        },\r\n        {\r\n          mark: {\r\n            type: 'area' as const,\r\n            line: {\r\n              interpolate: 'linear' as const,\r\n              color: 'rgb(255, 139, 45)',\r\n              strokeWidth: 1,\r\n            },\r\n            color: 'rgba(255, 139, 45, 0.15)',\r\n          },\r\n          encoding: {\r\n            y: {\r\n              field: 'hitPoints',\r\n              type: 'quantitative' as const,\r\n              title: null,\r\n              axis: {\r\n                grid: false,\r\n                format: '~s',\r\n              },\r\n            },\r\n          },\r\n        },\r\n        {\r\n          mark: {\r\n            type: 'rule' as const,\r\n            color: 'grey',\r\n          },\r\n          selection: {\r\n            hover: {\r\n              type: 'single' as const,\r\n              empty: 'none' as const,\r\n              on: 'mouseover',\r\n              nearest: true,\r\n            },\r\n          },\r\n          encoding: {\r\n            color: {\r\n              condition: {\r\n                selection: {\r\n                  not: 'hover',\r\n                },\r\n                value: 'transparent',\r\n              },\r\n            },\r\n          },\r\n        },\r\n        {\r\n          data: {\r\n            name: 'purifies',\r\n          },\r\n          mark: {\r\n            type: 'point' as const,\r\n            color: '#00ff96',\r\n            filled: true,\r\n            size: 60,\r\n          },\r\n          transform: [\r\n            {\r\n              calculate: `datum.timestamp - ${this.owner.fight.start_time}`,\r\n              as: 'timestamp_shifted',\r\n            },\r\n            {\r\n              calculate: 'datum.newPooledDamage + datum.amount',\r\n              as: 'oldPooledDamage',\r\n            },\r\n          ],\r\n          encoding: {\r\n            x: xAxis,\r\n            y: {\r\n              field: 'oldPooledDamage',\r\n              type: 'quantitative' as const,\r\n              title: null,\r\n            },\r\n            tooltip: [\r\n              { field: 'amount', title: 'Amount Purified', format: '.3~s' },\r\n              { field: 'oldPooledDamage', type: 'quantitative' as const, title: 'Staggered Damage', format: '.3~s' },\r\n            ],\r\n          },\r\n        },\r\n        {\r\n          data: {\r\n            name: 'deaths',\r\n          },\r\n          mark: {\r\n            type: 'rule' as const,\r\n            color: 'red',\r\n          },\r\n          transform: [\r\n            {\r\n              calculate: `datum.timestamp - ${this.owner.fight.start_time}`,\r\n              as: 'timestamp_shifted',\r\n            },\r\n          ],\r\n          encoding: {\r\n            x: xAxis,\r\n          },\r\n        },\r\n      ],\r\n    };\r\n\r\n    if (this._staggerEvents.length > 0) {\r\n      const combined = [\r\n        {\r\n          timestamp: this.owner.fight.start_time,\r\n          newPooledDamage: 0,\r\n          hitPoints: this._hpEvents[0].maxHitPoints,\r\n        },\r\n        ...this._staggerEvents,\r\n        ...this._hpEvents,\r\n      ];\r\n\r\n      return (\r\n        <div\r\n          className=\"graph-container\" style={{\r\n          width: '100%',\r\n          minHeight: 200,\r\n        }}\r\n        >\r\n          <AutoSizer>\r\n            {({ width, height }) => (\r\n              <BaseChart\r\n                spec={spec}\r\n                data={{\r\n                  combined,\r\n                  purifies: this._purifyEvents,\r\n                  deaths: this._deathEvents,\r\n                }}\r\n                width={width}\r\n                height={height}\r\n              />\r\n            )}\r\n          </AutoSizer>\r\n        </div>\r\n      );\r\n    } else {\r\n      return null;\r\n    }\r\n  }\r\n\r\n  _addstagger(event: AddStaggerEvent) {\r\n    this._staggerEvents.push({ ...event, hitPoints: this._lastHp, maxHitPoints: this._lastMaxHp });\r\n  }\r\n\r\n  _removestagger(event: RemoveStaggerEvent) {\r\n    if (event.trigger!.ability && event.trigger!.ability.guid === SPELLS.PURIFYING_BREW.id) {\r\n      // record the *previous* timestamp for purification. this will\r\n      // make the purifies line up with peaks in the plot, instead of\r\n      // showing up *after* peaks\r\n      this._purifyEvents.push({ ...event, previousTimestamp: this._staggerEvents[this._staggerEvents.length - 1].timestamp });\r\n    }\r\n\r\n    this._staggerEvents.push({ ...event, hitPoints: this._lastHp, maxHitPoints: this._lastMaxHp });\r\n  }\r\n\r\n  _death(event: DeathEvent) {\r\n    this._deathEvents.push(event);\r\n  }\r\n\r\n  _damage(event: DamageEvent) {\r\n    this._hpEvents.push(event);\r\n    this._lastHp = event.hitPoints ? event.hitPoints : this._lastHp;\r\n    this._lastMaxHp = event.maxHitPoints ? event.maxHitPoints : this._lastMaxHp;\r\n  }\r\n\r\n  _heal(event: HealEvent) {\r\n    this._hpEvents.push(event);\r\n    this._lastHp = event.hitPoints ? event.hitPoints : this._lastHp;\r\n    this._lastMaxHp = event.maxHitPoints ? event.maxHitPoints : this._lastMaxHp;\r\n  }\r\n\r\n  tab() {\r\n    return {\r\n      title: 'Stagger',\r\n      url: 'stagger',\r\n      render: () => (\r\n        <Panel\r\n          title=\"Stagger\"\r\n          explanation={(\r\n            <>\r\n              Damage you take is placed into a <em>pool</em> by <SpellLink id={SPELLS.STAGGER.id} />. This damage is then removed by the damage-over-time component of <SpellLink id={SPELLS.STAGGER.id} /> or by <SpellLink id={SPELLS.PURIFYING_BREW.id} /> (or other sources of purification). This plot shows the amount of damage pooled over the course of the fight.\r\n            </>\r\n          )}\r\n        >\r\n          {this.plot}\r\n        </Panel>\r\n      ),\r\n    };\r\n  }\r\n}\r\n\r\nexport default StaggerPoolGraph;\r\n","import EventsNormalizer from 'parser/core/EventsNormalizer';\r\nimport SPELLS from 'common/SPELLS';\r\nimport { EventType } from 'parser/core/Events';\r\n\r\nimport { GIFT_OF_THE_OX_SPELL_IDS } from '../constants';\r\n\r\nfunction isGotOxHeal(event) {\r\n  return event.type === EventType.Heal && GIFT_OF_THE_OX_SPELL_IDS.includes(event.ability.guid);\r\n}\r\n\r\nfunction isCFHeal(event) {\r\n  return event.type === EventType.Heal && event.ability.guid === SPELLS.CELESTIAL_FORTUNE_HEAL.id;\r\n}\r\n\r\nconst BUFFER_WINDOW = 50; // don't allow any larger gaps than this\r\n\r\n/**\r\n * Expel Harm comes after all the orbs are consumed, and honestly its a\r\n * huge pain in the ass. This normalizer puts it first instead.\r\n */\r\nexport default class ExpelHarm extends EventsNormalizer {\r\n  normalize(events) {\r\n    // forEach is supposed to be safe for mutation\r\n    //\r\n    // inb4 this introduces tons of bugs\r\n    events.forEach((event, idx) => {\r\n      if (event.type !== EventType.Cast || event.ability.guid !== SPELLS.EXPEL_HARM.id) {\r\n        return;\r\n      }\r\n\r\n      // quick check that EH is after ALL orbs\r\n      if (events[idx + 1].timestamp === event.timestamp && isGotOxHeal(events[idx + 1])) {\r\n        console.error('gotox orb after eh');\r\n      }\r\n      // find the start of run of orbs consumed\r\n      // safe --- game won't let you cast EH with 0 orbs\r\n      //\r\n      // Celestial Fortune heals can occur between orb heals.\r\n      let i = idx;\r\n      while (events[i - 1].timestamp > event.timestamp - BUFFER_WINDOW && (isGotOxHeal(events[i - 1]) || isCFHeal(events[i - 1]))) {\r\n        i -= 1;\r\n      }\r\n      const target = i;\r\n      // move everything down\r\n      for (i = idx; i > target; i -= 1) {\r\n        events[i] = events[i - 1];\r\n      }\r\n      // put EH at the start\r\n      events[target] = event;\r\n    });\r\n    return events;\r\n  }\r\n}\r\n","import CoreCombatLogParser from 'parser/core/CombatLogParser';\r\nimport ArcaneTorrent from 'parser/shared/modules/racials/bloodelf/ArcaneTorrent';\r\n\r\n// Core\r\nimport HealingDone from './modules/core/HealingDone';\r\nimport DamageTaken from './modules/core/DamageTaken';\r\nimport HealingReceived from './modules/core/HealingReceived';\r\nimport Stagger from './modules/core/Stagger';\r\nimport BrewCDR from './modules/core/BrewCDR';\r\nimport SharedBrews from './modules/core/SharedBrews';\r\nimport StaggerFabricator from './modules/core/StaggerFabricator';\r\nimport GlobalCooldown from './modules/core/GlobalCooldown';\r\nimport Channeling from './modules/core/Channeling';\r\nimport Checklist from './modules/core/Checklist/Module';\r\n// Spells\r\nimport PurifyingBrew from './modules/spells/PurifyingBrew';\r\nimport CelestialBrew from './modules/spells/CelestialBrew';\r\nimport BlackoutCombo from './modules/spells/BlackoutCombo';\r\nimport KegSmash from './modules/spells/KegSmash';\r\nimport TigerPalm from './modules/spells/TigerPalm';\r\nimport RushingJadeWind from './modules/spells/RushingJadeWind';\r\nimport BreathOfFire from './modules/spells/BreathOfFire';\r\nimport BlackOxBrew from './modules/spells/BlackOxBrew';\r\nimport HighTolerance from './modules/spells/HighTolerance';\r\nimport CelestialFortune from './modules/spells/CelestialFortune';\r\nimport GiftOfTheOxStat from './modules/spells/GiftOfTheOx';\r\nimport Shuffle from './modules/spells/Shuffle';\r\nimport TouchOfDeath from '../shared/modules/spells/TouchOfDeath';\r\n// Features\r\nimport Abilities from './modules/Abilities';\r\nimport AlwaysBeCasting from './modules/features/AlwaysBeCasting';\r\nimport StaggerPoolGraph from './modules/features/StaggerPoolGraph';\r\n\r\n// Items\r\n// normalizers\r\nimport GiftOfTheOx from './normalizers/GiftOfTheOx';\r\nimport ExpelHarmNorm from './normalizers/ExpelHarm';\r\n\r\n// Covenants\r\nimport FallenOrder from '../shared/modules/covenants/FallenOrder';\r\n\r\nclass CombatLogParser extends CoreCombatLogParser {\r\n  static specModules = {\r\n    // Core\r\n    healingDone: HealingDone,\r\n    healingReceived: HealingReceived,\r\n    damageTaken: DamageTaken,\r\n    stagger: Stagger,\r\n    staggerFabricator: StaggerFabricator,\r\n    brewCdr: BrewCDR,\r\n    brews: SharedBrews,\r\n    channeling: Channeling,\r\n    globalCooldown: GlobalCooldown,\r\n    // There's no throughput benefit from casting Arcane Torrent on cooldown\r\n    arcaneTorrent: [ArcaneTorrent, { castEfficiency: null }] as const,\r\n    checklist: Checklist,\r\n\r\n    // Features\r\n    alwaysBeCasting: AlwaysBeCasting,\r\n    abilities: Abilities,\r\n    staggerPoolGraph: StaggerPoolGraph,\r\n\r\n    // Spells\r\n    purifyingBrew: PurifyingBrew,\r\n    celestialBrew: CelestialBrew,\r\n    blackoutCombo: BlackoutCombo,\r\n    kegSmash: KegSmash,\r\n    tigerPalm: TigerPalm,\r\n    rjw: RushingJadeWind,\r\n    bof: BreathOfFire,\r\n    bob: BlackOxBrew,\r\n    highTolerance: HighTolerance,\r\n    cf: CelestialFortune,\r\n    gotox: GiftOfTheOxStat,\r\n    shuffle: Shuffle,\r\n    touchOfDeath: TouchOfDeath,\r\n\r\n    // Items\r\n\r\n    // normalizers\r\n    gotoxNorm: GiftOfTheOx,\r\n    ehNorm: ExpelHarmNorm,\r\n\r\n    // Covenants\r\n    fallenOrder: FallenOrder,\r\n  };\r\n}\r\n\r\nexport default CombatLogParser;\r\n","/**\r\n * A simple component that shows the spell value in the most plain way possible.\r\n * Use this only as the very last resort.\r\n */\r\nimport React from 'react';\r\n\r\nimport SpellIcon from 'common/SpellIcon';\r\nimport SpellLink from 'common/SpellLink';\r\nimport Spell from 'common/SPELLS/Spell';\r\n\r\ntype Props = {\r\n  spell: Spell;\r\n  children: React.ReactNode;\r\n  className?: string;\r\n}\r\n\r\nconst BoringSpellValueText = ({ spell, children, className }: Props) => (\r\n  <div className={`pad boring-text ${className || ''}`}>\r\n    <label>\r\n      <SpellIcon id={spell.id} /> <SpellLink id={spell.id} icon={false} />\r\n    </label>\r\n    <div className=\"value\">\r\n      {children}\r\n    </div>\r\n  </div>\r\n);\r\n\r\nexport default BoringSpellValueText;\r\n","export default function calculateEffectiveDamage(event, increase) {\r\n  const raw = (event.amount || 0) + (event.absorbed || 0);\r\n  return raw - (raw / (1 + increase));\r\n}\r\n","/**\r\n * A simple component that shows a value in the most plain way possible.\r\n * Use this only as the very last resort.\r\n */\r\nimport React from 'react';\r\n\r\ntype Props = {\r\n  label: React.ReactNode;\r\n  children: React.ReactNode;\r\n  className?: string;\r\n}\r\n\r\nconst BoringValue = ({ label, children, className }: Props) => (\r\n  <div className={`pad boring-text ${className || ''}`}>\r\n    <label>\r\n      {label}\r\n    </label>\r\n    <div className=\"value\">\r\n      {children}\r\n    </div>\r\n  </div>\r\n);\r\n\r\nexport default BoringValue;\r\n","export default function calculateMedian(values) {\r\n  const arr = [...values];\r\n  arr.sort((a, b) => a - b);\r\n\r\n  const half = Math.floor(arr.length / 2);\r\n\r\n  if (arr.length % 2) {\r\n    return arr[half];\r\n  } else {\r\n    return (arr[half - 1] + arr[half]) / 2.0;\r\n  }\r\n}\r\n","export default function average(values) {\r\n  return values.reduce((c, p) => c + p, 0) / values.length;\r\n}\r\n","export default function harmonic(values) {\r\n  return values.length / values.reduce((cum, val) => cum + 1/val, 0);\r\n}\r\n","import React, {useCallback, useState} from 'react';\r\n\r\nimport DropdownIcon from 'interface/icons/Dropdown';\r\nimport InformationIcon from 'interface/icons/Information';\r\nimport { ControlledExpandable } from 'interface/common/Expandable';\r\nimport colorForPerformance from 'common/colorForPerformance';\r\n\r\nimport calculateMedian from './helpers/calculateMedian';\r\nimport average from './helpers/average';\r\nimport harmonic from './helpers/harmonic';\r\n\r\nexport const RuleContext = React.createContext((value: number) => {/**/});\r\n\r\n\r\nexport enum PERFORMANCE_METHOD {\r\n  DEFAULT = 'DEFAULT',\r\n  MEDIAN = 'MEDIAN',\r\n  AVERAGE = 'AVERAGE',\r\n  LOWEST = 'LOWEST',\r\n  FIRST = 'FIRST',\r\n  HARMONIC = 'HARMONIC',\r\n};\r\n\r\ninterface Props {\r\n  name: React.ReactNode;\r\n  children: React.ReactNode;\r\n  description?: React.ReactNode;\r\n  performanceMethod?: PERFORMANCE_METHOD;\r\n}\r\n\r\ninterface State {\r\n  requirementPerformances: number[],\r\n  performance: number;\r\n  passed: boolean;\r\n  expanded: boolean;\r\n}\r\n\r\nconst Rule = (props: Props) => {\r\n\r\n  const [state, setState] = useState<State>({requirementPerformances: [], performance: 1, passed: true, expanded: false});\r\n\r\n\r\n  const calculateRulePerformance = useCallback((values: number[], style = PERFORMANCE_METHOD.DEFAULT) => {\r\n    // Lowest would generally be too punishing for small mistakes, if you want to have a single value tank the rule consider making it its own rule.\r\n    // Average would mark things as OK when one thing was OK and 3 things were \"average\", I think this is wrong and it should mark the rule as average. Median achieves this.\r\n    // Actual Median could mark a rule as 100% ok when there are still some things being neglected, so instead I opted for the best of both worlds and using the lowest of the median or average by default.\r\n\r\n    switch (style) {\r\n      case PERFORMANCE_METHOD.DEFAULT:\r\n        return Math.min(calculateMedian(values), average(values));\r\n      case PERFORMANCE_METHOD.MEDIAN:\r\n        return calculateMedian(values);\r\n      case PERFORMANCE_METHOD.AVERAGE:\r\n        return average(values);\r\n      case PERFORMANCE_METHOD.LOWEST:\r\n        return Math.min(...values);\r\n      case PERFORMANCE_METHOD.FIRST:\r\n        return values[0];\r\n      case PERFORMANCE_METHOD.HARMONIC:\r\n        return harmonic(values);\r\n      default:\r\n        throw new Error(`Unknown style: ${style}`);\r\n    }\r\n  }, [])\r\n\r\n \r\n\r\n  const checkEmptyRule = (child: React.ReactNode) => {\r\n    if (React.isValidElement(child) && child?.props) {\r\n      return true;\r\n    } else {\r\n      return false;\r\n    }\r\n  }\r\n\r\n  const setRequirementPerformance = (p: number) => {\r\n    // We don't have to worry about adding the same Requirement's performance multiple times here because it's only called in the Requirement's constructor, which is only called once.\r\n    setState((prevState: State) => {\r\n      const requirementPerformances: State['requirementPerformances'] = [...prevState.requirementPerformances, p];\r\n      const performance = requirementPerformances.length > 0 ? calculateRulePerformance(requirementPerformances, props.performanceMethod) : 1\r\n      const passed = performance > 0.666;\r\n      const expanded = !passed;\r\n      return {requirementPerformances, performance: performance, passed, expanded}\r\n    })\r\n  }\r\n\r\n  const { name, children: requirements, description } = props;\r\n\r\n  if (!requirements || (Array.isArray(requirements) && !requirements.some(checkEmptyRule))) {\r\n    return null;\r\n  }\r\n\r\n  const inverseExpanded = () => {\r\n    setState(prevState => ({...prevState, expanded: !prevState.expanded}))\r\n  }\r\n\r\n  return (\r\n    <RuleContext.Provider value={setRequirementPerformance}>\r\n      <ControlledExpandable\r\n        element=\"li\"\r\n        className={state.passed ? 'passed' : 'failed'}\r\n        inverseExpanded={inverseExpanded}\r\n        expanded={state.expanded}\r\n        header={(\r\n          <div className=\"flex wrapable\">\r\n            <div className=\"flex-main name\">\r\n              {name}\r\n            </div>\r\n            <div className=\"flex-sub perf\">\r\n              <div className=\"perf-container\">\r\n                <div\r\n                  className=\"perf-bar\"\r\n                  style={{\r\n                    width: `${state.performance * 100}%`,\r\n                    backgroundColor: colorForPerformance(state.performance),\r\n                  }}\r\n                />\r\n              </div>\r\n            </div>\r\n            <div className=\"flex-sub chevron\">\r\n              <div>\r\n                <DropdownIcon />\r\n              </div>\r\n            </div>\r\n          </div>\r\n        )}\r\n      >\r\n        {description && (\r\n          <div className=\"row text-muted description\">\r\n            <InformationIcon />\r\n            <div className=\"col-md-12\">\r\n              {description}\r\n            </div>\r\n          </div>\r\n        )}\r\n        <div className=\"row\">\r\n          {requirements}\r\n        </div>\r\n      </ControlledExpandable>\r\n    </RuleContext.Provider>\r\n  );\r\n}\r\n\r\nexport default Rule;\r\n","import React from 'react';\r\n\r\nimport InformationIcon from 'interface/icons/Information';\r\nimport { formatNumber, formatPercentage, formatThousands } from 'common/format';\r\nimport Tooltip, { TooltipElement } from 'common/Tooltip';\r\nimport colorForPerformance from 'common/colorForPerformance';\r\nimport { BoolThreshold, NumberThreshold, Threshold, ThresholdStyle } from 'parser/core/ParseResults';\r\nimport { Trans } from '@lingui/macro';\r\n\r\nimport performanceForThresholds from './helpers/performanceForThresholds';\r\nimport { RuleContext } from './Rule';\r\n\r\n\r\nexport type RequirementThresholds = NumberThreshold | BoolThreshold;\r\n\r\ninterface Props {\r\n  name: React.ReactNode,\r\n  thresholds: RequirementThresholds,\r\n  tooltip?: React.ReactNode,\r\n  valueTooltip?: React.ReactNode,\r\n  setPerformance: (performance: number) => void,\r\n  prefix?: React.ReactNode,\r\n  suffix?: React.ReactNode,\r\n}\r\nclass Requirement extends React.PureComponent<Props> {\r\n\r\n  constructor(props: Props) {\r\n    super(props);\r\n    props.setPerformance(this.performance);\r\n  }\r\n\r\n  get performance() {\r\n    return performanceForThresholds(this.props.thresholds);\r\n  }\r\n\r\n  formatThresholdsActual(thresholds: Threshold<any>) {\r\n    switch (thresholds.style) {\r\n      case ThresholdStyle.PERCENTAGE:\r\n        return `${formatPercentage(thresholds.actual)}%`;\r\n      case ThresholdStyle.NUMBER:\r\n        return `${formatNumber(thresholds.actual)}`;\r\n      case ThresholdStyle.THOUSANDS:\r\n        return `${formatThousands(thresholds.actual)}`;\r\n      case ThresholdStyle.DECIMAL:\r\n        return `${thresholds.actual.toFixed(2)}`;\r\n      case ThresholdStyle.BOOLEAN:\r\n        return thresholds.actual ? <Trans id=\"common.yes\">Yes</Trans> : <Trans id=\"common.no\">No</Trans>;\r\n      case ThresholdStyle.SECONDS:\r\n        return `${thresholds.actual.toFixed(2)}s`;\r\n      default:\r\n        throw new Error(`Unknown style: ${thresholds.style}`);\r\n    }\r\n  }\r\n\r\n  render() {\r\n    const { name, thresholds, tooltip, valueTooltip, prefix, suffix } = this.props;\r\n\r\n    const performance = this.performance;\r\n    let max = undefined;\r\n    const thresholdsN = thresholds as NumberThreshold;\r\n    if(thresholdsN.max !== undefined) {\r\n      max = `/ ${thresholdsN.max}`;\r\n    }\r\n    const actual = (\r\n      <>\r\n        {prefix} {this.formatThresholdsActual(thresholds)} {max} {suffix}\r\n      </>\r\n    );\r\n\r\n    return (\r\n      <div className=\"col-md-6\">\r\n        <div className=\"flex\">\r\n          <div className=\"flex-main\">\r\n            {name}\r\n          </div>\r\n          {tooltip && (\r\n            <div\r\n              className=\"flex-sub\"\r\n              style={{ marginLeft: 10 }}\r\n            >\r\n              <Tooltip content={tooltip}>\r\n                <div>\r\n                  <InformationIcon />\r\n                </div>\r\n              </Tooltip>\r\n            </div>\r\n          )}\r\n          <div className=\"flex-sub content-middle text-muted\" style={{ minWidth: 55, marginLeft: 5, marginRight: 10 }}>\r\n            <div className=\"text-right\" style={{ width: '100%' }}>\r\n              {valueTooltip ? <TooltipElement content={valueTooltip}>{actual}</TooltipElement> : actual}\r\n            </div>\r\n          </div>\r\n          <div className=\"flex-sub content-middle\" style={{ width: 50 }}>\r\n            <div className=\"performance-bar-container\">\r\n              <div\r\n                className=\"performance-bar small\"\r\n                style={{\r\n                  width: `${performance * 100}%`,\r\n                  transition: 'background-color 800ms',\r\n                  backgroundColor: colorForPerformance(performance),\r\n                }}\r\n              />\r\n            </div>\r\n          </div>\r\n        </div>\r\n      </div>\r\n    );\r\n  }\r\n}\r\n\r\nexport default (props: Omit<Props, 'setPerformance'>) => (\r\n  <RuleContext.Consumer>\r\n    {(setPerformance: (performance: number) => void) => (\r\n      <Requirement\r\n        {...props}\r\n        setPerformance={setPerformance}\r\n      />\r\n    )}\r\n  </RuleContext.Consumer>\r\n);\r\n","/**\r\n *   0 - 33% major This is different from the *minor* threshold which is at 100% instead of 66%. The reason for this is that the minor threshold being at 75% and then 75%-100% being minor - max is that this would suggest going for max is best while this is not always the case. Something like Crusader Strike (with the Crusader's Might talent) has a recommended cast efficiency of 35% *because* you should only cast it enough to benefit you, more than that would be good but not 100% cast efficiency as then you're losing healing.\r\n * 33% - 66% average\r\n * 66% - 99% minor\r\n * 100% good (no issue)\r\n * @param actual\r\n * @param minor\r\n * @param average\r\n * @param major\r\n * @returns {number}\r\n */\r\nfunction performanceForLessThanThresholds(actual, { minor, average, major }) {\r\n  if (actual < major) {\r\n    // major issue\r\n    return 0.333 * actual / major;\r\n  } else if (actual < average) {\r\n    // average issue (between major and average issue)\r\n    return 0.333 + 0.333 * ((actual - major) / (average - major));\r\n  } else if (actual < minor) {\r\n    // minor issue (between average and minor issue)\r\n    return 0.666 + 0.333 * ((actual - average) / (minor - average));\r\n  } else {\r\n    // no issue\r\n    return 1;\r\n  }\r\n}\r\nfunction performanceForGreaterThanThresholds(actual, { minor, average, major }) {\r\n  if (actual > major) {\r\n    // major issue\r\n    return 0.333 * major / actual;\r\n  } else if (actual > average) {\r\n    // average issue (between major and average issue)\r\n    return 0.666 - 0.333 * ((actual - average) / (major - average));\r\n  } else if (actual > minor) {\r\n    // minor issue (between average and minor issue)\r\n    return 1 - 0.333 * ((actual - minor) / (average - minor));\r\n  } else {\r\n    // no issue\r\n    return 1;\r\n  }\r\n}\r\nexport default function performanceForThresholds(thresholds) {\r\n  if (thresholds.isGreaterThan) {\r\n    if (typeof thresholds.isGreaterThan === 'object') {\r\n      return performanceForGreaterThanThresholds(thresholds.actual, thresholds.isGreaterThan);\r\n    } else {\r\n      return thresholds.isGreaterThan / thresholds.actual;\r\n    }\r\n  } else if (thresholds.isLessThan) {\r\n    if (typeof thresholds.isLessThan === 'object') {\r\n      return performanceForLessThanThresholds(thresholds.actual, thresholds.isLessThan);\r\n    } else {\r\n      return thresholds.actual / thresholds.isLessThan;\r\n    }\r\n  } else if (thresholds.isEqual !== undefined) {\r\n    return thresholds.actual !== thresholds.isEqual ? 1 : 0;\r\n  } else {\r\n    throw new Error('Failed to recognize threshold type');\r\n  }\r\n}\r\n","import React from 'react';\r\nimport PropTypes from 'prop-types';\r\nimport { Trans } from '@lingui/macro';\r\n\r\nimport './Checklist.scss';\r\n\r\nconst Checklist = props => {\r\n  const { children } = props;\r\n\r\n  return (\r\n    <ul className=\"checklist\">\r\n      {!children && (\r\n        <li>\r\n          <div className=\"alert alert-danger\">\r\n            <Trans id=\"shared.checklist.missingChecklist\">The checklist is not yet available for this spec. See <a href=\"https://github.com/WoWAnalyzer/WoWAnalyzer\">GitHub</a> or join us on <a href=\"https://discord.gg/AxphPxU\">Discord</a> if you're interested in contributing this.</Trans>\r\n          </div>\r\n        </li>\r\n      )}\r\n\r\n      {children}\r\n    </ul>\r\n  );\r\n};\r\n\r\nChecklist.propTypes = {\r\n  children: PropTypes.node,\r\n};\r\n\r\nexport default Checklist;\r\n","import React from 'react';\r\nimport PropTypes from 'prop-types';\r\nimport { Trans } from '@lingui/macro';\r\n\r\nimport Rule from './Rule';\r\nimport Requirement from './Requirement';\r\n\r\nclass PreparationRule extends React.PureComponent {\r\n\r\n  static propTypes = {\r\n    children: PropTypes.node,\r\n    thresholds: PropTypes.object.isRequired,\r\n  };\r\n\r\n  renderPotionRequirements() {\r\n    const { thresholds } = this.props;\r\n\r\n    return (\r\n      <>\r\n        <Requirement\r\n          name={<Trans id=\"shared.modules.features.checklist.combatPotionsUsed\">Combat potions used</Trans>}\r\n          thresholds={thresholds.potionsUsed}\r\n        />\r\n        <Requirement\r\n          name={<Trans id=\"shared.modules.features.checklist.highQualityCombatPotionsUsed\">High quality combat potions used</Trans>}\r\n          thresholds={thresholds.bestPotionUsed}\r\n        />\r\n      </>\r\n    );\r\n  }\r\n  renderEnchantRequirements() {\r\n    const { thresholds } = this.props;\r\n\r\n    return (\r\n      <>\r\n        <Requirement\r\n          name={<Trans id=\"shared.modules.features.checklist.enchanted\">All items enchanted</Trans>}\r\n          thresholds={thresholds.itemsEnchanted}\r\n        />\r\n        <Requirement\r\n          name={<Trans id=\"shared.modules.features.checklist.enchantedHigh\">Using high quality enchants</Trans>}\r\n          thresholds={thresholds.itemsBestEnchanted}\r\n        />\r\n      </>\r\n    );\r\n  }\r\n  renderWeaponEnhancementRequirements() {\r\n    const { thresholds } = this.props;\r\n\r\n    return (\r\n      <>\r\n        <Requirement\r\n          name={<Trans>All weapons enhanced (oils/stones)</Trans>}\r\n          thresholds={thresholds.weaponsEnhanced}\r\n        />\r\n        <Requirement\r\n          name={<Trans>Using high quality weapon enhancements</Trans>}\r\n          thresholds={thresholds.bestWeaponEnhancements}\r\n        />\r\n      </>\r\n    );\r\n  }\r\n  renderFlaskRequirements() {\r\n    const { thresholds } = this.props;\r\n    return (\r\n      <>\r\n        <Requirement\r\n          name={<Trans id=\"shared.modules.features.checklist.flaskHigh\">High quality flask used</Trans>}\r\n          thresholds={thresholds.higherFlaskPresent}\r\n        />\r\n        <Requirement\r\n          name={<Trans id=\"shared.modules.features.checklist.flask\">Flask used</Trans>}\r\n          thresholds={thresholds.flaskPresent}\r\n        />\r\n      </>\r\n    );\r\n  }\r\n  renderFoodRequirements() {\r\n    const { thresholds } = this.props;\r\n    return (\r\n      <>\r\n        <Requirement\r\n          name={<Trans id=\"shared.modules.features.checklist.foodHigh\">High quality food used</Trans>}\r\n          thresholds={thresholds.higherFoodPresent}\r\n        />\r\n        <Requirement\r\n          name={<Trans id=\"shared.modules.features.checklist.food\">Food used</Trans>}\r\n          thresholds={thresholds.foodPresent}\r\n        />\r\n      </>\r\n    );\r\n  }\r\n\r\n  render() {\r\n    const { children } = this.props;\r\n\r\n    return (\r\n      <Rule\r\n        name={<Trans id=\"shared.modules.features.checklist.wellPrepared\">Be well prepared</Trans>}\r\n        description={<Trans id=\"shared.modules.features.checklist.wellPreparedDetails\">Being well prepared with food, flasks, potions and enchants is an easy way to improve your performance.</Trans>}\r\n      >\r\n        {this.renderEnchantRequirements()}\r\n        {this.renderWeaponEnhancementRequirements()}\r\n        {this.renderPotionRequirements()}\r\n        {this.renderFlaskRequirements()}\r\n        {this.renderFoodRequirements()}\r\n        {children}\r\n      </Rule>\r\n    );\r\n  }\r\n}\r\n\r\nexport default PreparationRule;\r\n","import React from 'react';\r\nimport PropTypes from 'prop-types';\r\n\r\nimport SpellLink from 'common/SpellLink';\r\nimport { captureException } from 'common/errorLogger';\r\n\r\nimport Requirement from './Requirement';\r\n\r\n/**\r\n * This is a common requirement for all checklists that uses settings for CastEfficiency to create a Requirement. It shows the spell and your efficiency as performance depending on the configured cast efficiency efficiency thresholds.\r\n *\r\n * This requirement is automatically disabled if the ability's CastEfficiency suggestion is disabled (i.e. if the ability's castEfficiency: { suggestion } is unset or false), or the ability is disabled completely. If you set `onlyWithSuggestion` to `false` in the object when creating this requirement you can change this behavior to always show if the ability is enabled, regardless of the CastEfficiency suggestion property being set.\r\n */\r\nclass GenericCastEfficiencyRequirement extends React.PureComponent {\r\n  static propTypes = {\r\n    spell: PropTypes.number.isRequired,\r\n    name: PropTypes.node,\r\n    castEfficiency: PropTypes.shape({\r\n      efficiency: PropTypes.number.isRequired,\r\n      gotMaxCasts: PropTypes.bool.isRequired,\r\n      recommendedEfficiency: PropTypes.number.isRequired,\r\n      averageIssueEfficiency: PropTypes.number.isRequired,\r\n      majorIssueEfficiency: PropTypes.number.isRequired,\r\n      casts: PropTypes.any,\r\n      maxCasts: PropTypes.any,\r\n    }).isRequired,\r\n    isMaxCasts: PropTypes.bool,\r\n  };\r\n\r\n  get thresholds() {\r\n    if (!this.props.castEfficiency) {\r\n      captureException(new Error(`GenericCastEfficiencyRequirement requires that you pass the castEfficiency object yourself. Spell: ${this.props.spell}`));\r\n      return null;\r\n    }\r\n\r\n    if(this.props.isMaxCasts) {\r\n      const {\r\n        casts,\r\n        maxCasts,\r\n      } = this.props.castEfficiency;\r\n\r\n      return {\r\n        actual: casts,\r\n        max: maxCasts,\r\n        isLessThan: {\r\n          minor: maxCasts,\r\n          average: maxCasts - 1,\r\n          major: maxCasts - 2,\r\n        },\r\n        style: 'number',\r\n      };\r\n    } else {\r\n      const {\r\n        efficiency,\r\n        gotMaxCasts,\r\n        recommendedEfficiency: minor,\r\n        averageIssueEfficiency: average,\r\n        majorIssueEfficiency: major,\r\n      } = this.props.castEfficiency;\r\n\r\n      return {\r\n        actual: gotMaxCasts ? 1 : efficiency,\r\n        isLessThan: {\r\n          minor,\r\n          average,\r\n          major,\r\n        },\r\n        style: 'percentage',\r\n      };\r\n    }\r\n  }\r\n\r\n  render() {\r\n    const { spell, name, ...others } = this.props;\r\n\r\n    const thresholds = this.thresholds;\r\n    if (!thresholds) {\r\n      return null;\r\n    }\r\n\r\n    return (\r\n      <Requirement\r\n        name={name || <SpellLink id={spell} />}\r\n        thresholds={thresholds}\r\n        {...others}\r\n      />\r\n    );\r\n  }\r\n}\r\n\r\nexport default GenericCastEfficiencyRequirement;\r\n","export default function colorForPerformance(performance: number) {\r\n  if (performance >= 1) {\r\n    return '#4ec04e';\r\n  } else if (performance > 0.666) {\r\n    return '#a6c34c';\r\n  } else if (performance > 0.5) {\r\n    return '#ffc84a';\r\n  } else if (performance > 0.333) {\r\n    return '#df7102';\r\n  } else {\r\n    return '#ac1f39';\r\n  }\r\n}\r\n","'use strict';\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\n\nvar _typeof = typeof Symbol === \"function\" && typeof Symbol.iterator === \"symbol\" ? function (obj) { return typeof obj; } : function (obj) { return obj && typeof Symbol === \"function\" && obj.constructor === Symbol && obj !== Symbol.prototype ? \"symbol\" : typeof obj; };\n\nvar _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; };\n\nvar _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if (\"value\" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();\n\nvar _react = require('react');\n\nvar _react2 = _interopRequireDefault(_react);\n\nvar _propTypes = require('prop-types');\n\nvar _propTypes2 = _interopRequireDefault(_propTypes);\n\nvar _classnames = require('classnames');\n\nvar _classnames2 = _interopRequireDefault(_classnames);\n\nfunction _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }\n\nfunction _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }\n\nfunction _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError(\"Cannot call a class as a function\"); } }\n\nfunction _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError(\"this hasn't been initialised - super() hasn't been called\"); } return call && (typeof call === \"object\" || typeof call === \"function\") ? call : self; }\n\nfunction _inherits(subClass, superClass) { if (typeof superClass !== \"function\" && superClass !== null) { throw new TypeError(\"Super expression must either be null or a function, not \" + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }\n\nvar ANIMATION_STATE_CLASSES = {\n  animating: 'rah-animating',\n  animatingUp: 'rah-animating--up',\n  animatingDown: 'rah-animating--down',\n  animatingToHeightZero: 'rah-animating--to-height-zero',\n  animatingToHeightAuto: 'rah-animating--to-height-auto',\n  animatingToHeightSpecific: 'rah-animating--to-height-specific',\n  static: 'rah-static',\n  staticHeightZero: 'rah-static--height-zero',\n  staticHeightAuto: 'rah-static--height-auto',\n  staticHeightSpecific: 'rah-static--height-specific'\n};\n\nvar PROPS_TO_OMIT = ['animateOpacity', 'animationStateClasses', 'applyInlineTransitions', 'children', 'contentClassName', 'delay', 'duration', 'easing', 'height', 'onAnimationEnd', 'onAnimationStart'];\n\nfunction omit(obj) {\n  for (var _len = arguments.length, keys = Array(_len > 1 ? _len - 1 : 0), _key = 1; _key < _len; _key++) {\n    keys[_key - 1] = arguments[_key];\n  }\n\n  if (!keys.length) {\n    return obj;\n  }\n\n  var res = {};\n  var objectKeys = Object.keys(obj);\n\n  for (var i = 0; i < objectKeys.length; i++) {\n    var key = objectKeys[i];\n\n    if (keys.indexOf(key) === -1) {\n      res[key] = obj[key];\n    }\n  }\n\n  return res;\n}\n\n// Start animation helper using nested requestAnimationFrames\nfunction startAnimationHelper(callback) {\n  var requestAnimationFrameIDs = [];\n\n  requestAnimationFrameIDs[0] = requestAnimationFrame(function () {\n    requestAnimationFrameIDs[1] = requestAnimationFrame(function () {\n      callback();\n    });\n  });\n\n  return requestAnimationFrameIDs;\n}\n\nfunction cancelAnimationFrames(requestAnimationFrameIDs) {\n  requestAnimationFrameIDs.forEach(function (id) {\n    return cancelAnimationFrame(id);\n  });\n}\n\nfunction isNumber(n) {\n  return !isNaN(parseFloat(n)) && isFinite(n);\n}\n\nfunction isPercentage(height) {\n  // Percentage height\n  return typeof height === 'string' && height.search('%') === height.length - 1 && isNumber(height.substr(0, height.length - 1));\n}\n\nfunction runCallback(callback, params) {\n  if (callback && typeof callback === 'function') {\n    callback(params);\n  }\n}\n\nvar AnimateHeight = function (_React$Component) {\n  _inherits(AnimateHeight, _React$Component);\n\n  function AnimateHeight(props) {\n    _classCallCheck(this, AnimateHeight);\n\n    var _this = _possibleConstructorReturn(this, (AnimateHeight.__proto__ || Object.getPrototypeOf(AnimateHeight)).call(this, props));\n\n    _this.animationFrameIDs = [];\n\n    var height = 'auto';\n    var overflow = 'visible';\n\n    if (isNumber(props.height)) {\n      // If value is string \"0\" make sure we convert it to number 0\n      height = props.height < 0 || props.height === '0' ? 0 : props.height;\n      overflow = 'hidden';\n    } else if (isPercentage(props.height)) {\n      // If value is string \"0%\" make sure we convert it to number 0\n      height = props.height === '0%' ? 0 : props.height;\n      overflow = 'hidden';\n    }\n\n    _this.animationStateClasses = _extends({}, ANIMATION_STATE_CLASSES, props.animationStateClasses);\n\n    var animationStateClasses = _this.getStaticStateClasses(height);\n\n    _this.state = {\n      animationStateClasses: animationStateClasses,\n      height: height,\n      overflow: overflow,\n      shouldUseTransitions: false\n    };\n    return _this;\n  }\n\n  _createClass(AnimateHeight, [{\n    key: 'componentDidMount',\n    value: function componentDidMount() {\n      var height = this.state.height;\n\n      // Hide content if height is 0 (to prevent tabbing into it)\n      // Check for contentElement is added cause this would fail in tests (react-test-renderer)\n      // Read more here: https://github.com/Stanko/react-animate-height/issues/17\n\n      if (this.contentElement && this.contentElement.style) {\n        this.hideContent(height);\n      }\n    }\n  }, {\n    key: 'componentDidUpdate',\n    value: function componentDidUpdate(prevProps, prevState) {\n      var _this2 = this;\n\n      var _props = this.props,\n          delay = _props.delay,\n          duration = _props.duration,\n          height = _props.height,\n          onAnimationEnd = _props.onAnimationEnd,\n          onAnimationStart = _props.onAnimationStart;\n\n      // Check if 'height' prop has changed\n\n      if (this.contentElement && height !== prevProps.height) {\n        var _cx;\n\n        // Remove display: none from the content div\n        // if it was hidden to prevent tabbing into it\n        this.showContent(prevState.height);\n\n        // Cache content height\n        this.contentElement.style.overflow = 'hidden';\n        var contentHeight = this.contentElement.offsetHeight;\n        this.contentElement.style.overflow = '';\n\n        // set total animation time\n        var totalDuration = duration + delay;\n\n        var newHeight = null;\n        var timeoutState = {\n          height: null, // it will be always set to either 'auto' or specific number\n          overflow: 'hidden'\n        };\n        var isCurrentHeightAuto = prevState.height === 'auto';\n\n        if (isNumber(height)) {\n          // If value is string \"0\" make sure we convert it to number 0\n          newHeight = height < 0 || height === '0' ? 0 : height;\n          timeoutState.height = newHeight;\n        } else if (isPercentage(height)) {\n          // If value is string \"0%\" make sure we convert it to number 0\n          newHeight = height === '0%' ? 0 : height;\n          timeoutState.height = newHeight;\n        } else {\n          // If not, animate to content height\n          // and then reset to auto\n          newHeight = contentHeight; // TODO solve contentHeight = 0\n          timeoutState.height = 'auto';\n          timeoutState.overflow = null;\n        }\n\n        if (isCurrentHeightAuto) {\n          // This is the height to be animated to\n          timeoutState.height = newHeight;\n\n          // If previous height was 'auto'\n          // set starting height explicitly to be able to use transition\n          newHeight = contentHeight;\n        }\n\n        // Animation classes\n        var animationStateClasses = (0, _classnames2.default)((_cx = {}, _defineProperty(_cx, this.animationStateClasses.animating, true), _defineProperty(_cx, this.animationStateClasses.animatingUp, prevProps.height === 'auto' || height < prevProps.height), _defineProperty(_cx, this.animationStateClasses.animatingDown, height === 'auto' || height > prevProps.height), _defineProperty(_cx, this.animationStateClasses.animatingToHeightZero, timeoutState.height === 0), _defineProperty(_cx, this.animationStateClasses.animatingToHeightAuto, timeoutState.height === 'auto'), _defineProperty(_cx, this.animationStateClasses.animatingToHeightSpecific, timeoutState.height > 0), _cx));\n\n        // Animation classes to be put after animation is complete\n        var timeoutAnimationStateClasses = this.getStaticStateClasses(timeoutState.height);\n\n        // Set starting height and animating classes\n        // We are safe to call set state as it will not trigger infinite loop\n        // because of the \"height !== prevProps.height\" check\n        this.setState({ // eslint-disable-line react/no-did-update-set-state\n          animationStateClasses: animationStateClasses,\n          height: newHeight,\n          overflow: 'hidden',\n          // When animating from 'auto' we first need to set fixed height\n          // that change should be animated\n          shouldUseTransitions: !isCurrentHeightAuto\n        });\n\n        // Clear timeouts\n        clearTimeout(this.timeoutID);\n        clearTimeout(this.animationClassesTimeoutID);\n\n        if (isCurrentHeightAuto) {\n          // When animating from 'auto' we use a short timeout to start animation\n          // after setting fixed height above\n          timeoutState.shouldUseTransitions = true;\n\n          cancelAnimationFrames(this.animationFrameIDs);\n          this.animationFrameIDs = startAnimationHelper(function () {\n            _this2.setState(timeoutState);\n\n            // ANIMATION STARTS, run a callback if it exists\n            runCallback(onAnimationStart, { newHeight: timeoutState.height });\n          });\n\n          // Set static classes and remove transitions when animation ends\n          this.animationClassesTimeoutID = setTimeout(function () {\n            _this2.setState({\n              animationStateClasses: timeoutAnimationStateClasses,\n              shouldUseTransitions: false\n            });\n\n            // ANIMATION ENDS\n            // Hide content if height is 0 (to prevent tabbing into it)\n            _this2.hideContent(timeoutState.height);\n            // Run a callback if it exists\n            runCallback(onAnimationEnd, { newHeight: timeoutState.height });\n          }, totalDuration);\n        } else {\n          // ANIMATION STARTS, run a callback if it exists\n          runCallback(onAnimationStart, { newHeight: newHeight });\n\n          // Set end height, classes and remove transitions when animation is complete\n          this.timeoutID = setTimeout(function () {\n            timeoutState.animationStateClasses = timeoutAnimationStateClasses;\n            timeoutState.shouldUseTransitions = false;\n\n            _this2.setState(timeoutState);\n\n            // ANIMATION ENDS\n            // If height is auto, don't hide the content\n            // (case when element is empty, therefore height is 0)\n            if (height !== 'auto') {\n              // Hide content if height is 0 (to prevent tabbing into it)\n              _this2.hideContent(newHeight); // TODO solve newHeight = 0\n            }\n            // Run a callback if it exists\n            runCallback(onAnimationEnd, { newHeight: newHeight });\n          }, totalDuration);\n        }\n      }\n    }\n  }, {\n    key: 'componentWillUnmount',\n    value: function componentWillUnmount() {\n      cancelAnimationFrames(this.animationFrameIDs);\n\n      clearTimeout(this.timeoutID);\n      clearTimeout(this.animationClassesTimeoutID);\n\n      this.timeoutID = null;\n      this.animationClassesTimeoutID = null;\n      this.animationStateClasses = null;\n    }\n  }, {\n    key: 'showContent',\n    value: function showContent(height) {\n      if (height === 0) {\n        this.contentElement.style.display = '';\n      }\n    }\n  }, {\n    key: 'hideContent',\n    value: function hideContent(newHeight) {\n      if (newHeight === 0) {\n        this.contentElement.style.display = 'none';\n      }\n    }\n  }, {\n    key: 'getStaticStateClasses',\n    value: function getStaticStateClasses(height) {\n      var _cx2;\n\n      return (0, _classnames2.default)((_cx2 = {}, _defineProperty(_cx2, this.animationStateClasses.static, true), _defineProperty(_cx2, this.animationStateClasses.staticHeightZero, height === 0), _defineProperty(_cx2, this.animationStateClasses.staticHeightSpecific, height > 0), _defineProperty(_cx2, this.animationStateClasses.staticHeightAuto, height === 'auto'), _cx2));\n    }\n  }, {\n    key: 'render',\n    value: function render() {\n      var _cx3,\n          _this3 = this;\n\n      var _props2 = this.props,\n          animateOpacity = _props2.animateOpacity,\n          applyInlineTransitions = _props2.applyInlineTransitions,\n          children = _props2.children,\n          className = _props2.className,\n          contentClassName = _props2.contentClassName,\n          delay = _props2.delay,\n          duration = _props2.duration,\n          easing = _props2.easing,\n          id = _props2.id,\n          style = _props2.style;\n      var _state = this.state,\n          height = _state.height,\n          overflow = _state.overflow,\n          animationStateClasses = _state.animationStateClasses,\n          shouldUseTransitions = _state.shouldUseTransitions;\n\n\n      var componentStyle = _extends({}, style, {\n        height: height,\n        overflow: overflow || style.overflow\n      });\n\n      if (shouldUseTransitions && applyInlineTransitions) {\n        componentStyle.transition = 'height ' + duration + 'ms ' + easing + ' ' + delay + 'ms';\n\n        // Include transition passed through styles\n        if (style.transition) {\n          componentStyle.transition = style.transition + ', ' + componentStyle.transition;\n        }\n\n        // Add webkit vendor prefix still used by opera, blackberry...\n        componentStyle.WebkitTransition = componentStyle.transition;\n      }\n\n      var contentStyle = {};\n\n      if (animateOpacity) {\n        contentStyle.transition = 'opacity ' + duration + 'ms ' + easing + ' ' + delay + 'ms';\n        // Add webkit vendor prefix still used by opera, blackberry...\n        contentStyle.WebkitTransition = contentStyle.transition;\n\n        if (height === 0) {\n          contentStyle.opacity = 0;\n        }\n      }\n\n      var componentClasses = (0, _classnames2.default)((_cx3 = {}, _defineProperty(_cx3, animationStateClasses, true), _defineProperty(_cx3, className, className), _cx3));\n\n      // Check if user passed aria-hidden prop\n      var hasAriaHiddenProp = typeof this.props['aria-hidden'] !== 'undefined';\n      var ariaHidden = hasAriaHiddenProp ? this.props['aria-hidden'] : height === 0;\n\n      return _react2.default.createElement(\n        'div',\n        _extends({}, omit.apply(undefined, [this.props].concat(PROPS_TO_OMIT)), {\n          'aria-hidden': ariaHidden,\n          className: componentClasses,\n          id: id,\n          style: componentStyle\n        }),\n        _react2.default.createElement(\n          'div',\n          {\n            className: contentClassName,\n            style: contentStyle,\n            ref: function ref(el) {\n              return _this3.contentElement = el;\n            }\n          },\n          children\n        )\n      );\n    }\n  }]);\n\n  return AnimateHeight;\n}(_react2.default.Component);\n\nvar heightPropType = function heightPropType(props, propName, componentName) {\n  var value = props[propName];\n\n  if (typeof value === 'number' && value >= 0 || isPercentage(value) || value === 'auto') {\n    return null;\n  }\n\n  return new TypeError('value \"' + value + '\" of type \"' + (typeof value === 'undefined' ? 'undefined' : _typeof(value)) + '\" is invalid type for ' + propName + ' in ' + componentName + '. ' + 'It needs to be a positive number, string \"auto\" or percentage string (e.g. \"15%\").');\n};\n\nAnimateHeight.propTypes = {\n  'aria-hidden': _propTypes2.default.bool,\n  animateOpacity: _propTypes2.default.bool,\n  animationStateClasses: _propTypes2.default.object,\n  applyInlineTransitions: _propTypes2.default.bool,\n  children: _propTypes2.default.any.isRequired,\n  className: _propTypes2.default.string,\n  contentClassName: _propTypes2.default.string,\n  delay: _propTypes2.default.number,\n  duration: _propTypes2.default.number,\n  easing: _propTypes2.default.string,\n  height: heightPropType,\n  id: _propTypes2.default.string,\n  onAnimationEnd: _propTypes2.default.func,\n  onAnimationStart: _propTypes2.default.func,\n  style: _propTypes2.default.object\n};\n\nAnimateHeight.defaultProps = {\n  animateOpacity: false,\n  animationStateClasses: ANIMATION_STATE_CLASSES,\n  applyInlineTransitions: true,\n  duration: 250,\n  delay: 0,\n  easing: 'ease',\n  style: {}\n};\n\nexports.default = AnimateHeight;","import Events, { ApplyBuffEvent, DamageEvent, FightEndEvent, RemoveBuffEvent } from 'parser/core/Events';\r\nimport Analyzer, { Options } from 'parser/core/Analyzer';\r\nimport { formatDuration } from 'common/format';\r\nimport calculateEffectiveDamage from 'parser/core/calculateEffectiveDamage';\r\nimport Spell from 'common/SPELLS/Spell';\r\nimport SpellUsable from 'parser/shared/modules/SpellUsable';\r\n\r\nconst debug = false;\r\n\r\nconst MS_BUFFER = 500;\r\n\r\nclass ExecuteHelper extends Analyzer {\r\n  static dependencies = {\r\n    spellUsable: SpellUsable,\r\n  };\r\n\r\n  protected spellUsable!: SpellUsable;\r\n\r\n  //region IMPLEMENTME statics\r\n  /**\r\n   * Array of objects from common/SPELLS\r\n   * This should contain any execute spells such as Kill Shot, Execute etc.\r\n   */\r\n  static executeSpells: Spell[] = [];\r\n\r\n  /**\r\n   * SELECTED_PLAYER or SELECTED_PLAYER_PET for usage in the eventfilter\r\n   */\r\n  static executeSources: number;\r\n\r\n  /**\r\n   * Array of objects from common/SPELLS\r\n   * This should contain any SPELLS object that allows execute to be used outside normal execute range\r\n   */\r\n  static executeOutsideRangeEnablers: Spell[] = [];\r\n\r\n  /**\r\n   * The lower threshold where execute is enabled, shown in decimals.\r\n   */\r\n  static lowerThreshold: number;\r\n\r\n  /**\r\n   * The upper threshold where an execute can be enabled immediately at a pull, shown in decimals.\r\n   */\r\n  static upperThreshold: number;\r\n\r\n  /**\r\n   * A boolean representing if the given execute modifies the damage of an existing spell.\r\n   * An execute spell should be labelled as false, whereas a talent that modifies an existing spell should be labelled as true.\r\n   */\r\n  static modifiesDamage: boolean;\r\n\r\n  /**\r\n   * represents the modifier of of a talent (or some other effect) that modifies the damage done by an existing spell\r\n   */\r\n  static damageModifier: number;\r\n  //endregion\r\n\r\n  //region Generic Variables\r\n  /**\r\n   * Is true if we're in an execute window either because of a buff giving access to execute spells or because of health windows\r\n   */\r\n  inExecuteWindow: boolean = false;\r\n\r\n  /**\r\n   * Is true if we're in an execute window due to health on a target, so a buff granting access to execute is pointless at this point\r\n   */\r\n  inHealthExecuteWindow: boolean = false;\r\n\r\n  /**\r\n   * A variable marking the timestamp of the start of the current execute window\r\n   */\r\n  executeWindowStart: number = 0;\r\n\r\n  /**\r\n   * A variable marking the timestamp of the last damage event within the execute window\r\n   */\r\n  lastExecuteHitTimestamp: number = 0;\r\n\r\n  /**\r\n   * The amount of time spent inside executewindows, either caused by health or by buffs giving access to execute\r\n   */\r\n  totalExecuteWindowDuration: number = 0;\r\n\r\n  /**\r\n   * Amount of damage done by the spells defined in executeSpells\r\n   */\r\n  damage: number = 0;\r\n\r\n  /**\r\n   * returns the total amount of casts of the executes listed in executeSpells\r\n   */\r\n  casts: number = 0;\r\n\r\n  /**\r\n   * returns the amount of casts of the executes listed in executeSpells that were cast whilst being in an execute window\r\n   */\r\n  castsWithExecute: number = 0;\r\n  //endregion\r\n\r\n  //region Execute helpers\r\n  /**\r\n   * Returns true if the event has less HP than the threshold.\r\n   * This is useful for any generic execute.\r\n   * @param event\r\n   */\r\n  isTargetInExecuteRange(event: DamageEvent) {\r\n    if (!event.hitPoints || !event.maxHitPoints) {\r\n      return false;\r\n    }\r\n    return (event.hitPoints / event.maxHitPoints) < this.lowerThreshold;\r\n  }\r\n\r\n  /**\r\n   * Returns true if the event has more HP than the threshold.\r\n   * This is useful for things like Firestarter and Flashpoint.\r\n   * @param event\r\n   */\r\n  isTargetInReverseExecuteRange(event: DamageEvent) {\r\n    if (!event.hitPoints || !event.maxHitPoints) {\r\n      return false;\r\n    }\r\n    return (event.hitPoints / event.maxHitPoints) > this.upperThreshold;\r\n  }\r\n\r\n  /**\r\n   * Returns true if either isTargetInExecuteRange() or isTargetInReverseExecuteRange() is true.\r\n   * @param event\r\n   */\r\n  isTargetInHealthExecuteWindow(event: DamageEvent) {\r\n    if (!event.hitPoints || !event.maxHitPoints) {\r\n      return false;\r\n    }\r\n    return (this.isTargetInExecuteRange(event) || this.isTargetInReverseExecuteRange(event));\r\n  }\r\n\r\n  /**\r\n   * Returns true if the combatant has one of the buffs that enable execute to be used outside of the regular execute windows\r\n   */\r\n  get isExecuteUsableOutsideExecuteRange() {\r\n    let usable: boolean = false;\r\n    this.executeOutsideRangeEnablers.forEach(spell => {\r\n      if (this.selectedCombatant.hasBuff(spell.id)) {\r\n        usable = true;\r\n      }\r\n    });\r\n    return usable;\r\n  }\r\n\r\n  /**\r\n   * If all execute spells are on cooldown, then we should count the entire period of cooldown as \"inside execute\" to properly calculate maxCasts\r\n   */\r\n  get areExecuteSpellsOnCD() {\r\n    let allOnCD: boolean = true;\r\n    this.executeSpells.forEach(spell => {\r\n      if (!this.spellUsable.isOnCooldown(spell.id)) {\r\n        allOnCD = false;\r\n      }\r\n    });\r\n    return allOnCD;\r\n  }\r\n\r\n  //endregion\r\n\r\n  constructor(options: Options) {\r\n    super(options);\r\n    this.addEventListener(Events.damage.by(this.executeSources), this.onGeneralDamage);\r\n    this.addEventListener(Events.cast.by(this.executeSources).spell(this.executeSpells), this.onExecuteCast);\r\n    this.addEventListener(Events.damage.by(this.executeSources).spell(this.executeSpells), this.onExecuteDamage);\r\n    this.addEventListener(Events.applybuff.to(this.executeSources).spell(this.executeOutsideRangeEnablers), this.applyExecuteEnablerBuff);\r\n    this.addEventListener(Events.removebuff.to(this.executeSources).spell(this.executeOutsideRangeEnablers), this.removeExecuteEnablerBuff);\r\n    this.addEventListener(Events.fightend, this.onFightEnd);\r\n  }\r\n\r\n  //region Static Getters\r\n  get executeSources() {\r\n    const ctor = this.constructor as typeof ExecuteHelper;\r\n    return ctor.executeSources;\r\n  }\r\n\r\n  get executeSpells() {\r\n    const ctor = this.constructor as typeof ExecuteHelper;\r\n    return ctor.executeSpells;\r\n  }\r\n\r\n  get executeOutsideRangeEnablers() {\r\n    const ctor = this.constructor as typeof ExecuteHelper;\r\n    return ctor.executeOutsideRangeEnablers;\r\n  }\r\n\r\n  get lowerThreshold() {\r\n    const ctor = this.constructor as typeof ExecuteHelper;\r\n    return ctor.lowerThreshold;\r\n  }\r\n\r\n  get upperThreshold() {\r\n    const ctor = this.constructor as typeof ExecuteHelper;\r\n    return ctor.upperThreshold;\r\n  }\r\n\r\n  get modifiesDamage() {\r\n    const ctor = this.constructor as typeof ExecuteHelper;\r\n    return ctor.modifiesDamage;\r\n  }\r\n\r\n  get damageModifier() {\r\n    const ctor = this.constructor as typeof ExecuteHelper;\r\n    return ctor.damageModifier;\r\n  }\r\n\r\n  //endregion\r\n\r\n  //region Generic Getters\r\n  get executeDamage() {\r\n    return this.damage;\r\n  }\r\n\r\n  get totalExecuteDuration() {\r\n    return this.totalExecuteWindowDuration;\r\n  }\r\n\r\n  get totalCasts() {\r\n    return this.casts;\r\n  }\r\n\r\n  get totalExecuteCasts() {\r\n    return this.castsWithExecute;\r\n  }\r\n\r\n  //endregion\r\n\r\n  //region Event Listener functions\r\n  onGeneralDamage(event: DamageEvent) {\r\n    if (event.targetIsFriendly) {\r\n      return;\r\n    }\r\n    if (this.areExecuteSpellsOnCD || this.isExecuteUsableOutsideExecuteRange || this.isTargetInHealthExecuteWindow(event)) {\r\n      this.lastExecuteHitTimestamp = event.timestamp;\r\n      if (!this.inExecuteWindow) {\r\n        this.inExecuteWindow = true;\r\n        this.inHealthExecuteWindow = true;\r\n        this.executeWindowStart = event.timestamp;\r\n        debug && console.log('Execute window started');\r\n      }\r\n    } else {\r\n      if (this.inExecuteWindow && event.timestamp > this.lastExecuteHitTimestamp + MS_BUFFER) {\r\n        this.inExecuteWindow = false;\r\n        this.inHealthExecuteWindow = false;\r\n        this.totalExecuteWindowDuration += event.timestamp - this.executeWindowStart;\r\n        debug && console.log('Execute window ended, current total: ', this.totalExecuteDuration);\r\n      }\r\n    }\r\n  }\r\n\r\n  onExecuteCast() {\r\n    this.casts += 1;\r\n    if (this.inExecuteWindow || this.inHealthExecuteWindow) {\r\n      this.castsWithExecute += 1;\r\n    }\r\n  }\r\n\r\n  onExecuteDamage(event: DamageEvent) {\r\n    if (this.inExecuteWindow || this.inHealthExecuteWindow) {\r\n      if (this.modifiesDamage) {\r\n        this.damage += calculateEffectiveDamage(event, this.damageModifier);\r\n      } else {\r\n        this.damage += event.amount + (event.absorbed || 0);\r\n      }\r\n    }\r\n  }\r\n\r\n  applyExecuteEnablerBuff(event: ApplyBuffEvent) {\r\n    if (!this.inExecuteWindow && !this.inHealthExecuteWindow) {\r\n      this.executeWindowStart = event.timestamp;\r\n    }\r\n    this.inExecuteWindow = true;\r\n    this.lastExecuteHitTimestamp = event.timestamp;\r\n    debug && console.log(event.ability.name, ' was applied starting the execute window');\r\n  }\r\n\r\n  removeExecuteEnablerBuff(event: RemoveBuffEvent) {\r\n    if (!this.inHealthExecuteWindow) {\r\n      this.inExecuteWindow = false;\r\n      this.totalExecuteWindowDuration += event.timestamp - this.executeWindowStart;\r\n      debug && console.log(event.ability.name, ' was removed ending the execute window, current total: ', this.totalExecuteDuration);\r\n    } else {\r\n      debug && console.log('Execute enabler buff ended, but inside execute health window so window still ongoing.');\r\n    }\r\n  }\r\n\r\n  onFightEnd(event: FightEndEvent) {\r\n    if (this.inExecuteWindow) {\r\n      this.totalExecuteWindowDuration += event.timestamp - this.executeWindowStart;\r\n      this.inExecuteWindow = false;\r\n    }\r\n    debug && console.log('Fight ended, total duration of execute: ' + this.totalExecuteDuration + ' | ' + formatDuration(this.totalExecuteDuration));\r\n  }\r\n\r\n  //endregion\r\n}\r\n\r\nexport default ExecuteHelper;\r\n","import React from 'react';\r\n\r\n// https://thenounproject.com/search/?q=dropdown&i=1871189\r\n// Dropdown by zalhan from the Noun Project\r\nconst Icon = ({ ...other }) => (\r\n  <svg xmlns=\"http://www.w3.org/2000/svg\" viewBox=\"0 0 16 9\" className=\"icon\" {...other}>\r\n      <path d=\"M14.0059397,2.26485497e-14 C15.1072288,2.26485497e-14 15.3722573,0.627746582 14.5881847,1.41182411 L8.70999225,7.29005337 C8.317902,7.68214607 7.67653023,7.6764822 7.29009898,7.29005337 L1.41183294,1.41182411 C0.632099139,0.632095183 0.894513756,2.26485497e-14 1.99406028,2.26485497e-14 L14.0059397,2.26485497e-14 Z\" />\r\n  </svg>\r\n);\r\n\r\nexport default Icon;\r\n","import React, {useState} from 'react';\r\nimport AnimateHeight from 'react-animate-height';\r\n\r\nimport './Expandable.scss';\r\n\r\ninterface Props {\r\n  header: React.ReactNode;\r\n  children: React.ReactNode;\r\n  element: React.ElementType;\r\n  className?: string;\r\n  expanded?: boolean;\r\n  inverseExpanded: () => void;\r\n}\r\n\r\nexport const Expandable = (props: Omit<Props, 'expanded'|'inverseExpanded'>) => {\r\n  const [expanded, setExpanded] = useState<boolean>(false);\r\n  const handleToggle = () => {\r\n    setExpanded((prevExpanded: boolean) => !prevExpanded)\r\n  }\r\n\r\n  const { header, children, element: Element, className } = props;\r\n  \r\n  return (\r\n    <Element className={`expandable ${expanded ? 'expanded' : ''} ${className || ''}`}>\r\n      <div className=\"meta\" onClick={handleToggle}>\r\n        {header}\r\n      </div>\r\n      <AnimateHeight className=\"details\" height={expanded ? 'auto' : 0}>\r\n        {children}\r\n      </AnimateHeight>\r\n    </Element>\r\n  );\r\n}\r\n\r\nexport const ControlledExpandable = (props: Props) =>  {\r\n  const { header, children, element: Element, className } = props;\r\n\r\n  return (\r\n    <Element className={`expandable ${props.expanded ? 'expanded' : ''} ${className || ''}`}>\r\n      <div className=\"meta\" onClick={props.inverseExpanded}>\r\n        {header}\r\n      </div>\r\n      <AnimateHeight className=\"details\" height={props.expanded ? 'auto' : 0}>\r\n        {children}\r\n      </AnimateHeight>\r\n    </Element>\r\n  );\r\n}\r\n","import { SELECTED_PLAYER } from 'parser/core/Analyzer';\r\nimport Abilities from 'parser/core/modules/Abilities';\r\nimport SPELLS from 'common/SPELLS';\r\nimport Events from 'parser/core/Events';\r\nimport ExecuteHelper from 'parser/shared/ExecuteHelper';\r\n\r\nconst MINUTE = 600000;\r\n\r\nclass TouchOfDeath extends ExecuteHelper {\r\n  static executeSpells = [\r\n    SPELLS.TOUCH_OF_DEATH,\r\n  ];\r\n  static executeSources = SELECTED_PLAYER;\r\n  static lowerThreshold = 0.15;\r\n  static executeOutsideRangeEnablers = [];\r\n  static modifiesDamage = false;\r\n\r\n  static dependencies = {\r\n    ...ExecuteHelper.dependencies,\r\n    abilities: Abilities,\r\n  };\r\n\r\n  maxCasts = 0;\r\n\r\n  cooldown = MINUTE * 3;\r\n\r\n  constructor(options) {\r\n    super(options);\r\n    this.addEventListener(Events.fightend, this.adjustMaxCasts);\r\n\r\n    //FIXME added reduction from legendary when we can get that info\r\n\r\n    //if(hasLego) {\r\n    //  this.cooldown = this.cooldown - MINUTE;\r\n    // }\r\n\r\n    options.abilities.add({\r\n      spell: SPELLS.TOUCH_OF_DEATH,\r\n      category: Abilities.SPELL_CATEGORIES.COOLDOWNS,\r\n      cooldown: 180,\r\n      gcd: {\r\n        static: 1000,\r\n      },\r\n      castEfficiency: {\r\n        suggestion: true,\r\n        recommendedEfficiency: 0.85,\r\n        maxCasts: () => this.maxCasts || 0,\r\n      },\r\n    });\r\n  }\r\n\r\n  adjustMaxCasts(event) {\r\n    super.onFightEnd(event);\r\n    this.maxCasts += Math.ceil(this.totalExecuteDuration / this.cooldown);\r\n  }\r\n}\r\n\r\nexport default TouchOfDeath;\r\n","import Analyzer, { Options, SELECTED_PLAYER, SELECTED_PLAYER_PET } from 'parser/core/Analyzer';\r\nimport Abilities from 'parser/core/modules/Abilities';\r\nimport SPELLS from 'common/SPELLS';\r\nimport Events, { DamageEvent, HealEvent, SummonEvent } from 'parser/core/Events';\r\nimport Statistic from 'interface/statistics/Statistic';\r\nimport STATISTIC_ORDER from 'interface/others/STATISTIC_ORDER';\r\nimport STATISTIC_CATEGORY from 'interface/others/STATISTIC_CATEGORY';\r\nimport ItemDamageDone from 'interface/ItemDamageDone';\r\nimport ItemHealingDone from 'interface/ItemHealingDone';\r\nimport React from 'react';\r\nimport BoringSpellValueText from 'interface/statistics/components/BoringSpellValueText';\r\nimport { formatNumber } from 'common/format';\r\nimport COVENANTS from 'game/shadowlands/COVENANTS';\r\n\r\nclass FallenOrder extends Analyzer {\r\n  static dependencies = {\r\n    abilities: Abilities,\r\n  };\r\n  windDamage: number = 0;\r\n  brewDamage: number = 0;\r\n  mistDamage: number = 0;\r\n  mistHealing: number = 0;\r\n  mistOverhealing: number = 0;\r\n  cloneMap: Map<number, number> = new Map<number, number>();\r\n  protected abilities!: Abilities;\r\n\r\n  constructor(options: Options) {\r\n    super(options);\r\n\r\n    // In my testing this line always returns false but its what putput uses so I have faith\r\n    // it will work in the future. (might just be a bad log too)\r\n    this.active = this.selectedCombatant.hasCovenant(COVENANTS.VENTHYR.id);\r\n\r\n    if (!this.active) {\r\n      return;\r\n    }\r\n\r\n    this.abilities.add({\r\n      spell: SPELLS.FALLEN_ORDER_CAST,\r\n      category: Abilities.SPELL_CATEGORIES.COOLDOWNS,\r\n      cooldown: 180,\r\n      gcd: {\r\n        base: 1500,\r\n      },\r\n      castEfficiency: {\r\n        suggestion: true,\r\n        recommendedEfficiency: 0.8,\r\n      },\r\n    });\r\n\r\n    //summon events (need to track this to get melees)\r\n    this.addEventListener(Events.summon.by(SELECTED_PLAYER).spell([SPELLS.FALLEN_ORDER_OX_CLONE, SPELLS.FALLEN_ORDER_TIGER_CLONE, SPELLS.FALLEN_ORDER_CRANE_CLONE]), this.trackSummons);\r\n\r\n    //mistweaver spells\r\n    this.addEventListener(Events.heal.by(SELECTED_PLAYER_PET).spell([SPELLS.FALLEN_ORDER_ENVELOPING_MIST, SPELLS.FALLEN_ORDER_SOOTHING_MIST]), this.mistHealingTracker);\r\n    //brewmaster spells\r\n    this.addEventListener(Events.damage.by(SELECTED_PLAYER_PET).spell([SPELLS.FALLEN_ORDER_KEG_SMASH, SPELLS.FALLEN_ORDER_BREATH_OF_FIRE, SPELLS.BREATH_OF_FIRE_DEBUFF]), this.brewDamageTracker);\r\n    //windwalker spells\r\n    this.addEventListener(Events.damage.by(SELECTED_PLAYER_PET).spell([SPELLS.FALLEN_ORDER_SPINNING_CRANE_KICK, SPELLS.FISTS_OF_FURY_DAMAGE]), this.windDamageTracker);\r\n    //shared\r\n    this.addEventListener(Events.damage.by(SELECTED_PLAYER_PET).spell(SPELLS.MELEE), this.handleMelee);\r\n  }\r\n\r\n  trackSummons(event: SummonEvent) {\r\n    this.cloneMap.set(event.targetID, event.ability.guid);\r\n  }\r\n\r\n  mistHealingTracker(event: HealEvent) {\r\n    this.mistHealing += (event.amount || 0) + (event.absorbed || 0);\r\n    this.mistOverhealing += event.overheal || 0;\r\n  }\r\n\r\n  brewDamageTracker(event: DamageEvent) {\r\n    this.brewDamage += event.amount || 0;\r\n  }\r\n\r\n  windDamageTracker(event: DamageEvent) {\r\n    this.windDamage += event.amount || 0;\r\n  }\r\n\r\n  mistDamageTracker(event: DamageEvent) {\r\n    this.mistDamage += event.amount || 0;\r\n  }\r\n\r\n  handleMelee(event: DamageEvent) {\r\n    //if we don't know who its from then we can't add it\r\n    if (!event.sourceID) {\r\n      return;\r\n    }\r\n\r\n    const id: number = event.sourceID;\r\n\r\n    const cloneType: number | undefined = this.cloneMap.get(id);\r\n    //because typescript won't let me just do this.cloneMap.get(id) i might as well add a null check too\r\n    if (cloneType === undefined) {\r\n      return;\r\n    }\r\n\r\n    if (cloneType === SPELLS.FALLEN_ORDER_OX_CLONE.id) {\r\n      this.brewDamageTracker(event);\r\n    } else if (cloneType === SPELLS.FALLEN_ORDER_TIGER_CLONE.id) {\r\n      this.windDamageTracker(event);\r\n    } else {\r\n      this.mistDamageTracker(event);\r\n    }\r\n\r\n  }\r\n\r\n  statistic() {\r\n    const totalDamage: number = this.brewDamage + this.mistDamage + this.windDamage;\r\n\r\n    return (\r\n      <Statistic\r\n        position={STATISTIC_ORDER.CORE()}\r\n        size=\"flexible\"\r\n        category={STATISTIC_CATEGORY.COVENANTS}\r\n        tooltip={(\r\n          <>\r\n            <ul>\r\n              <li>Damage from Brewmaster clones: {formatNumber(this.brewDamage)}</li>\r\n              <li>Damage from Mistweaver clones: {formatNumber(this.mistDamage)}</li>\r\n              <li>Damage from Windwalker clones: {formatNumber(this.windDamage)}</li>\r\n            </ul>\r\n          </>\r\n        )}\r\n      >\r\n        <BoringSpellValueText spell={SPELLS.FALLEN_ORDER_CAST}>\r\n          <ItemHealingDone amount={this.mistHealing} /><br />\r\n          <ItemDamageDone amount={totalDamage} />\r\n        </BoringSpellValueText>\r\n      </Statistic>\r\n    );\r\n  }\r\n}\r\n\r\nexport default FallenOrder;\r\n","/**\r\n * This list is used to skip abilities for the purposes of *hit\r\n * counting*. These abilities produce many hits but generally aren't\r\n * worth mitigating, skewing the results of tracking.\r\n */\r\n\r\nconst IGNORED: number[] = [\r\n\r\n];\r\n\r\nexport default IGNORED;\r\n","import Enemies from 'parser/shared/modules/Enemies';\r\nimport { DamageEvent } from 'parser/core/Events';\r\nimport MAGIC_SCHOOLS from 'game/MAGIC_SCHOOLS';\r\n\r\nimport IgnoredAbilities from './IgnoredAbilities';\r\n\r\nexport function notableEnemy(enemies: Enemies, event: DamageEvent): boolean {\r\n    return !event.sourceIsFriendly && event.sourceID !== undefined && enemies.getEntities()[event.sourceID] !== undefined;\r\n}\r\n\r\nexport function magic(event: DamageEvent): boolean {\r\n    return event.ability.type !== MAGIC_SCHOOLS.ids.PHYSICAL;\r\n}\r\n\r\nexport function shouldIgnore(enemies: Enemies, event: DamageEvent): boolean {\r\n    return !notableEnemy(enemies, event) || IgnoredAbilities.includes(event.ability.guid);\r\n}\r\n"],"sourceRoot":""}