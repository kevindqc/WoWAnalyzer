{"version":3,"sources":["parser/druid/guardian/modules/Ability.js","parser/druid/guardian/modules/Abilities.js","parser/druid/guardian/modules/features/ActiveTargets.js","parser/druid/guardian/modules/features/Gore.js","parser/druid/guardian/modules/features/GalacticGuardian.js","parser/druid/guardian/modules/features/GuardianOfElune.js","parser/druid/guardian/modules/features/IronFurGoEProcs.js","parser/druid/guardian/modules/features/FrenziedRegenGoEProcs.js","parser/druid/guardian/modules/features/RageWasted.js","parser/druid/guardian/modules/features/AntiFillerSpam.js","parser/druid/guardian/modules/features/MitigationCheck.js","parser/druid/guardian/modules/spells/IronFur.js","parser/druid/guardian/modules/spells/Thrash.js","parser/druid/guardian/modules/spells/Moonfire.js","parser/druid/guardian/modules/spells/Pulverize.js","parser/druid/guardian/modules/talents/Earthwarden.js","parser/druid/guardian/modules/talents/Incarnation.js","parser/druid/guardian/modules/spells/FrenziedRegeneration.js","parser/druid/guardian/CombatLogParser.js","parser/shared/modules/MitigationCheck.js"],"names":["Ability","owner","options","antiFillerSpam","_owner","_setProps","CoreAbility","propTypes","PropTypes","shape","isFiller","oneOfType","func","number","isHighPriority","hastedCooldown","baseCD","haste","Abilities","combatant","this","selectedCombatant","spell","SPELLS","MANGLE_BEAR","category","SPELL_CATEGORIES","ROTATIONAL","cooldown","hasBuff","INCARNATION_GUARDIAN_OF_URSOC_TALENT","id","gcd","base","castEfficiency","suggestion","recommendedEfficiency","averageIssueEfficiency","majorIssueEfficiency","timelineSortIndex","THRASH_BEAR","MOONFIRE","event","targets","hasTalent","GALACTIC_GUARDIAN_TALENT","GALACTIC_GUARDIAN","enemies","getEntity","MOONFIRE_BEAR","timestamp","SWIPE_BEAR","length","MAUL","SHRED","enabled","FERAL_AFFINITY_TALENT_GUARDIAN","static","RAKE","RIP","FEROCIOUS_BITE","BARKSKIN","buffSpellId","DEFENSIVE","SURVIVAL_OF_THE_FITTEST_TALENT","SURVIVAL_INSTINCTS","charges","SEMI_DEFENSIVE","BRISTLING_FUR_TALENT","isDefensive","COOLDOWNS","IRONFUR","FRENZIED_REGENERATION","PULVERIZE_TALENT","targetID","pulverizeTalented","target","find","t","targetHasThrashStacks","THRASH_BEAR_DOT","stacks","STAMPEDING_ROAR_BEAR","UTILITY","GROWL","SKULL_BASH","BEAR_FORM","CAT_FORM","TRAVEL_FORM","MOONKIN_FORM","REBIRTH","INCAPACITATING_ROAR","INTIMIDATING_ROAR_TALENT","TYPHOON","TYPHOON_TALENT","MASS_ENTANGLEMENT_TALENT","MIGHTY_BASH_TALENT","WILD_CHARGE_TALENT","WILD_CHARGE_MOONKIN","WILD_CHARGE_CAT","WILD_CHARGE_BEAR","WILD_CHARGE_TRAVEL","DASH","TIGER_DASH_TALENT","HIBERNATE","SOOTHE","CoreAbilities","ABILITY_CLASS","dependencies","Enemies","ActiveTargets","_targetActivity","addEventListener","Events","damage","by","SELECTED_PLAYER","onDamage","targetIsFriendly","undefined","enemyInstanceID","encodeTargetString","targetInstance","registerEnemyActivity","currentTimestamp","enemyID","enemyTimeline","lastEvent","end","push","start","findIndex","activity","Object","keys","filter","isTargetActive","Analyzer","Gore","totalProcs","lastGoreProcTime","consumedGoreProc","overwrittenGoreProc","nonGoreMangle","statisticOrder","STATISTIC_ORDER","CORE","applybuff","GORE_BEAR","onApplyBuff","refreshbuff","onRefreshBuff","cast","onCast","spellUsable","isOnCooldown","endCooldown","goreTimeframe","when","unusedGoreProcs","isGreaterThan","addSuggestion","suggest","actual","recommended","formatPercentage","SpellLink","icon","i18n","_","Math","round","regular","major","StatisticBox","SpellIcon","value","label","tooltip","SpellUsable","GalacticGuardian","args","GGProcsTotal","lastGGProcTime","consumedGGProc","overwrittenGGProc","nonGGMoonFire","active","GGTimeframe","unusedGGProcs","GuardianOfElune","GoEProcsTotal","lastGoEProcTime","consumedGoEProc","overwrittenGoEProc","nonGoEIronFur","GoEIronFur","nonGoEFRegen","GoEFRegen","GUARDIAN_OF_ELUNE_TALENT","GUARDIAN_OF_ELUNE","onCastIronfur","onCastFrenziedRegen","GoETimeframe","unusedGoEProcs","IronFurGoEProcs","guardianOfElune","name","FrenziedRegenGoEProcs","RAGE_GENERATORS","MELEE","BLOOD_FRENZY_TICK","BRISTLING_FUR","OAKHEARTS_PUNY_QUODS_BUFF","PURE_RAGE_POTION","RageWasted","rageWastedBySpell","totalRageGained","_currentRawRage","_currentMaxRage","energize","onEnergize","map","key","reduce","total","waste","totalWastedRage","spellID","console","warn","sort","a","b","str","classResources","rageResource","resource","type","RESOURCE_TYPES","RAGE","amount","max","log","abilityID","synchronizeRage","resourceChangeType","registerRageWaste","ability","guid","resourceChange","realRageWasted","floor","RAW_RAGE_GAINED_FROM_MELEE","wastedRageRatio","wastedRageBreakdown","resolveValue","maybeFunction","AntiFillerSpam","_totalGCDSpells","_totalFillerSpells","_unnecessaryFillerSpells","spellId","abilities","getAbility","activeTargets","getActiveTargets","enemyInstances","enemy","Boolean","availableSpells","forEach","gcdSpell","gcdSpellId","primarySpell","isOffCooldown","isAvailable","text","i","meta","isInefficientCast","inefficientCastReason","fillerSpamPercentage","EnemyInstances","MitigationCheck","buffCheckPhysical","buffCheckPhysAndMag","CoreMitigationCheck","IronFur","_hitsPerStack","to","onDamageTaken","fightend","onFightend","slice","sum","x","totalHitsTaken","ironfurStacksApplied","hitsMitigated","stackCount","SCHOOLS","ids","PHYSICAL","ironfur","getBuff","registerHit","hits","percentOfHitsMitigated","isLessThan","totalIronFurTime","getBuffUptime","uptimes","computeIronfurUptimeArray","uptime","position","overallIronfurUptime","toFixed","hitsUnmitigated","fightDuration","Thrash","thrashUptimePercentage","REND_AND_TEAR_TALENT","Moonfire","moonfireUptimePercentage","Pulverize","pulverizeUptimePercentage","PULVERIZE_BUFF","ABILITIES_THAT_CONSUME_EW","MAGIC_MELEE","RECURSIVE_STRIKES_ENEMY","Earthwarden","damageFromMelees","swingsMitigated","totalSwings","lv45Talent","EARTHWARDEN_TALENT","EARTHWARDEN_BUFF","onAbsorbed","abilityTracker","healingEffective","totalDamageTaken","damageTaken","effective","percentOfSwingsMitigated","meleeDamageContribution","absorbed","hitType","HIT_TYPES","DODGE","totalMitigation","formatNumber","hps","AbilityTracker","DamageTaken","Incarnation","FrenziedRegeneration","_healModifier","castData","damageEventsInWindow","player","wildfleshRank","traitsBySpellId","WILDFLESH_TRAIT","versModifier","statTracker","currentVersatilityPercentage","_charges","percentHeal","percentHP","shift","hitPoints","maxHitPoints","pruneDamageEvents","damageTakenInWindow","goeModifier","healAmount","healModifier","healAsPercentHP","actualHeal","inefficientCasts","StatTracker","CombatLogParser","CoreCombatLogParser","specModules","mitigationCheck","goreProcs","galacticGuardianProcs","guardianOfEluneProcs","ironFurGoEProcs","frenziedRegenGoEProcs","rageWasted","ironFur","thrash","moonfire","pulverize","frenziedRegeneration","earthwarden","incarnation","checksPassedMap","Map","checksFailedMap","checksPhysical","checksMagical","buffCheckMagical","debuffCheckPhysical","debuffCheckMagical","debuffCheckPhysAndMag","boss","findByBossId","fight","softMitigationChecks","physical","magical","e","set","checks","buffCheck","debuffCheck","MAGIC_SCHOOLS","includes","tick","some","IMMUNE","get","getEntities","sourceID","failSum","Array","from","values","val","passSum","spellIconId","SHIELD_BLOCK_BUFF","physicalTable","physicalChecks","scope","style","height","borderless","borderTop","magicalTable","magicalChecks","className","fontWeight"],"mappings":"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","file":"static/js/GuardianDruid.7ce09c21.chunk.js","sourcesContent":["import PropTypes from 'prop-types';\r\n\r\nimport CoreAbility from 'parser/core/modules/Ability';\r\n\r\nclass Ability extends CoreAbility {\r\n  static propTypes = {\r\n    ...CoreAbility.propTypes, // eslint-disable-line react/forbid-foreign-prop-types\r\n    antiFillerSpam: PropTypes.shape({\r\n      isFiller: PropTypes.oneOfType([\r\n        PropTypes.func,\r\n        PropTypes.number,\r\n      ]),\r\n      isHighPriority: PropTypes.oneOfType([\r\n        PropTypes.func,\r\n        PropTypes.number,\r\n      ]),\r\n    }),\r\n  };\r\n\r\n  antiFillerSpam = null;\r\n\r\n  /**\r\n   * When extending this class you MUST copy-paste this function into the new class. Otherwise your new props will not be set properly.\r\n   * @param owner\r\n   * @param options\r\n   */\r\n  constructor(owner, options) {\r\n    super(owner, options);\r\n    this._owner = owner;\r\n    this._setProps(options);\r\n  }\r\n}\r\n\r\nexport default Ability;\r\n","import SPELLS from 'common/SPELLS';\r\nimport CoreAbilities from 'parser/core/modules/Abilities';\r\nimport Enemies from 'parser/shared/modules/Enemies';\r\n\r\nimport Ability from './Ability';\r\n\r\n// The amount of time after a proc has occurred when casting a filler is no longer acceptable\r\nconst REACTION_TIME_THRESHOLD = 500;\r\n\r\nconst hastedCooldown = (baseCD, haste) => (baseCD / (1 + haste));\r\n\r\nclass Abilities extends CoreAbilities {\r\n  static ABILITY_CLASS = Ability;\r\n  static dependencies = {\r\n    ...CoreAbilities.dependencies,\r\n    enemies: Enemies,\r\n  };\r\n\r\n  spellbook() {\r\n    const combatant = this.selectedCombatant;\r\n    return [\r\n      // Rotational Spells\r\n      {\r\n        spell: SPELLS.MANGLE_BEAR,\r\n        category: Abilities.SPELL_CATEGORIES.ROTATIONAL,\r\n        cooldown: haste => {\r\n          if (combatant.hasBuff(SPELLS.INCARNATION_GUARDIAN_OF_URSOC_TALENT.id)) {\r\n            return hastedCooldown(1.5, haste);\r\n          }\r\n          return hastedCooldown(6, haste);\r\n        },\r\n        gcd: {\r\n          base: 1500,\r\n        },\r\n        antiFillerSpam: {\r\n          isHighPriority: true,\r\n        },\r\n        castEfficiency: {\r\n          suggestion: true,\r\n          recommendedEfficiency: 0.7,\r\n          averageIssueEfficiency: 0.6,\r\n          majorIssueEfficiency: 0.5,\r\n        },\r\n        timelineSortIndex: 1,\r\n      },\r\n      {\r\n        spell: SPELLS.THRASH_BEAR,\r\n        category: Abilities.SPELL_CATEGORIES.ROTATIONAL,\r\n        cooldown: haste => {\r\n          if (combatant.hasBuff(SPELLS.INCARNATION_GUARDIAN_OF_URSOC_TALENT.id)) {\r\n            return hastedCooldown(1.5, haste);\r\n          }\r\n          return hastedCooldown(6, haste);\r\n        },\r\n        gcd: {\r\n          base: 1500,\r\n        },\r\n        antiFillerSpam: {\r\n          isHighPriority: true,\r\n        },\r\n        castEfficiency: {\r\n          suggestion: true,\r\n        },\r\n        timelineSortIndex: 2,\r\n      },\r\n      {\r\n        spell: SPELLS.MOONFIRE,\r\n        category: Abilities.SPELL_CATEGORIES.ROTATIONAL,\r\n        gcd: {\r\n          base: 1500,\r\n        },\r\n        antiFillerSpam: {\r\n          isFiller: (event, selectedCombatant, targets) => {\r\n            if (combatant.hasTalent(SPELLS.GALACTIC_GUARDIAN_TALENT.id) && selectedCombatant.hasBuff(SPELLS.GALACTIC_GUARDIAN.id)) {\r\n              return false;\r\n            }\r\n            // Check if moonfire is present on the current target\r\n            // Note that if the current target has no enemy data we can't track whether the dot\r\n            // is ticking or not, in that case we consider it non-filler as a concession.\r\n            if (!this.enemies.getEntity(event) || !this.enemies.getEntity(event).hasBuff(SPELLS.MOONFIRE_BEAR.id, event.timestamp)) {\r\n              return false;\r\n            }\r\n            return true;\r\n          },\r\n          isHighPriority: ({ timestamp }, selectedCombatant) =>\r\n            // Account for reaction time; the player must have had the proc for at least this long\r\n            selectedCombatant.hasBuff(SPELLS.GALACTIC_GUARDIAN.id, timestamp - REACTION_TIME_THRESHOLD)\r\n          ,\r\n        },\r\n        timelineSortIndex: 3,\r\n      },\r\n      {\r\n        spell: SPELLS.SWIPE_BEAR,\r\n        category: Abilities.SPELL_CATEGORIES.ROTATIONAL,\r\n        gcd: {\r\n          base: 1500,\r\n        },\r\n        antiFillerSpam: {\r\n          isFiller: (event, selectedCombatant, targets) => targets.length < 4,\r\n        },\r\n        timelineSortIndex: 4,\r\n      },\r\n      {\r\n        spell: SPELLS.MAUL,\r\n        category: Abilities.SPELL_CATEGORIES.ROTATIONAL,\r\n        gcd: {\r\n          base: 1500,\r\n        },\r\n        timelineSortIndex: 5,\r\n      },\r\n      // Cat Form abilities\r\n      {\r\n        spell: SPELLS.SHRED,\r\n        // Technically available baseline, but it is never used without FA\r\n        enabled: combatant.hasTalent(SPELLS.FERAL_AFFINITY_TALENT_GUARDIAN.id),\r\n        category: Abilities.SPELL_CATEGORIES.ROTATIONAL,\r\n        gcd: {\r\n          static: 1000,\r\n        },\r\n      },\r\n      {\r\n        spell: SPELLS.RAKE,\r\n        enabled: combatant.hasTalent(SPELLS.FERAL_AFFINITY_TALENT_GUARDIAN.id),\r\n        category: Abilities.SPELL_CATEGORIES.ROTATIONAL,\r\n        gcd: {\r\n          static: 1000,\r\n        },\r\n      },\r\n      {\r\n        spell: SPELLS.RIP,\r\n        enabled: combatant.hasTalent(SPELLS.FERAL_AFFINITY_TALENT_GUARDIAN.id),\r\n        category: Abilities.SPELL_CATEGORIES.ROTATIONAL,\r\n        gcd: {\r\n          static: 1000,\r\n        },\r\n      },\r\n      {\r\n        spell: SPELLS.FEROCIOUS_BITE,\r\n        enabled: combatant.hasTalent(SPELLS.FERAL_AFFINITY_TALENT_GUARDIAN.id),\r\n        category: Abilities.SPELL_CATEGORIES.ROTATIONAL,\r\n        gcd: {\r\n          static: 1000,\r\n        },\r\n      },\r\n      // Cooldowns\r\n      {\r\n        spell: SPELLS.BARKSKIN,\r\n        buffSpellId: SPELLS.BARKSKIN.id,\r\n        category: Abilities.SPELL_CATEGORIES.DEFENSIVE,\r\n        cooldown: combatant.hasTalent(SPELLS.SURVIVAL_OF_THE_FITTEST_TALENT.id) ? 90 - (90 / 3) : 90,\r\n        timelineSortIndex: 9,\r\n      },\r\n      {\r\n        spell: SPELLS.SURVIVAL_INSTINCTS,\r\n        buffSpellId: SPELLS.SURVIVAL_INSTINCTS.id,\r\n        category: Abilities.SPELL_CATEGORIES.DEFENSIVE,\r\n        cooldown: combatant.hasTalent(SPELLS.SURVIVAL_OF_THE_FITTEST_TALENT.id) ? 240 - (240 / 3) : 240,\r\n        charges: 2,\r\n        timelineSortIndex: 9,\r\n      },\r\n      {\r\n        spell: SPELLS.INCARNATION_GUARDIAN_OF_URSOC_TALENT,\r\n        category: Abilities.SPELL_CATEGORIES.SEMI_DEFENSIVE,\r\n        gcd: {\r\n          base: 1500,\r\n        },\r\n        cooldown: 180,\r\n        enabled: combatant.hasTalent(SPELLS.INCARNATION_GUARDIAN_OF_URSOC_TALENT.id),\r\n        timelineSortIndex: 9,\r\n      },\r\n      {\r\n        spell: SPELLS.BRISTLING_FUR_TALENT,\r\n        buffSpellId: SPELLS.BRISTLING_FUR_TALENT.id,\r\n        isDefensive: true,\r\n        category: Abilities.SPELL_CATEGORIES.COOLDOWNS,\r\n        gcd: {\r\n          base: 1500,\r\n        },\r\n        cooldown: 40,\r\n        enabled: combatant.hasTalent(SPELLS.BRISTLING_FUR_TALENT.id),\r\n        timelineSortIndex: 9,\r\n      },\r\n      {\r\n        spell: SPELLS.IRONFUR,\r\n        buffSpellId: SPELLS.IRONFUR.id,\r\n        category: Abilities.SPELL_CATEGORIES.DEFENSIVE,\r\n        timelineSortIndex: 7,\r\n      },\r\n      {\r\n        spell: SPELLS.FRENZIED_REGENERATION,\r\n        buffSpellId: SPELLS.FRENZIED_REGENERATION.id,\r\n        category: Abilities.SPELL_CATEGORIES.DEFENSIVE,\r\n        gcd: {\r\n          base: 1500,\r\n        },\r\n        cooldown: haste => hastedCooldown(36, haste),\r\n        charges: 2,\r\n        timelineSortIndex: 8,\r\n      },\r\n      {\r\n        spell: SPELLS.PULVERIZE_TALENT,\r\n        category: Abilities.SPELL_CATEGORIES.DEFENSIVE,\r\n        enabled: combatant.hasTalent(SPELLS.PULVERIZE_TALENT.id),\r\n        gcd: {\r\n          base: 1500,\r\n        },\r\n        antiFillerSpam: {\r\n          // A spell must meet these conditions to be castable\r\n          isHighPriority: ({ timestamp, targetID }, selectedCombatant, targets) => {\r\n            const pulverizeTalented = combatant.hasTalent(SPELLS.PULVERIZE_TALENT.id);\r\n            const target = targets.find(t => t.id === targetID);\r\n            if (!target) {\r\n              return false;\r\n            }\r\n            const targetHasThrashStacks = target.hasBuff(SPELLS.THRASH_BEAR_DOT.id, timestamp).stacks >= 2;\r\n            return pulverizeTalented && targetHasThrashStacks;\r\n          },\r\n        },\r\n        timelineSortIndex: 6,\r\n      },\r\n      // Raid utility\r\n      {\r\n        spell: SPELLS.STAMPEDING_ROAR_BEAR,\r\n        category: Abilities.SPELL_CATEGORIES.UTILITY,\r\n        cooldown: 120,\r\n        gcd: {\r\n          base: 1500,\r\n        },\r\n      },\r\n      {\r\n        spell: SPELLS.GROWL,\r\n        category: Abilities.SPELL_CATEGORIES.UTILITY,\r\n      },\r\n      {\r\n        spell: SPELLS.SKULL_BASH,\r\n        category: Abilities.SPELL_CATEGORIES.UTILITY,\r\n      },\r\n      {\r\n        spell: SPELLS.BEAR_FORM,\r\n        category: Abilities.SPELL_CATEGORIES.UTILITY,\r\n        gcd: {\r\n          base: 1500,\r\n        },\r\n      },\r\n      {\r\n        spell: SPELLS.CAT_FORM,\r\n        category: Abilities.SPELL_CATEGORIES.UTILITY,\r\n        gcd: {\r\n          base: 1500,\r\n        },\r\n      },\r\n      {\r\n        spell: SPELLS.TRAVEL_FORM,\r\n        category: Abilities.SPELL_CATEGORIES.UTILITY,\r\n        gcd: {\r\n          base: 1500,\r\n        },\r\n      },\r\n      {\r\n        spell: SPELLS.MOONKIN_FORM,\r\n        category: Abilities.SPELL_CATEGORIES.UTILITY,\r\n        gcd: {\r\n          base: 1500,\r\n        },\r\n      },\r\n      {\r\n        spell: SPELLS.REBIRTH,\r\n        category: Abilities.SPELL_CATEGORIES.UTILITY,\r\n        gcd: {\r\n          base: 1500,\r\n        },\r\n      },\r\n      {\r\n        spell: SPELLS.INCAPACITATING_ROAR,\r\n        category: Abilities.SPELL_CATEGORIES.UTILITY,\r\n        enabled: !combatant.hasTalent(SPELLS.INTIMIDATING_ROAR_TALENT.id),\r\n        cooldown: 30,\r\n        gcd: {\r\n          base: 1500,\r\n        },\r\n      },\r\n      {\r\n        spell: SPELLS.INTIMIDATING_ROAR_TALENT,\r\n        category: Abilities.SPELL_CATEGORIES.UTILITY,\r\n        enabled: combatant.hasTalent(SPELLS.INTIMIDATING_ROAR_TALENT.id),\r\n        cooldown: 30,\r\n        gcd: {\r\n          base: 1500,\r\n        },\r\n      },\r\n      {\r\n        spell: SPELLS.TYPHOON,\r\n        category: Abilities.SPELL_CATEGORIES.UTILITY,\r\n        enabled: combatant.hasTalent(SPELLS.TYPHOON_TALENT.id),\r\n        cooldown: 30,\r\n        gcd: {\r\n          base: 1500,\r\n        },\r\n      },\r\n      {\r\n        spell: SPELLS.MASS_ENTANGLEMENT_TALENT,\r\n        category: Abilities.SPELL_CATEGORIES.UTILITY,\r\n        enabled: combatant.hasTalent(SPELLS.MASS_ENTANGLEMENT_TALENT.id),\r\n        cooldown: 30,\r\n        gcd: {\r\n          base: 1500,\r\n        },\r\n      },\r\n      {\r\n        spell: SPELLS.MIGHTY_BASH_TALENT,\r\n        category: Abilities.SPELL_CATEGORIES.UTILITY,\r\n        enabled: combatant.hasTalent(SPELLS.MIGHTY_BASH_TALENT.id),\r\n        cooldown: 50,\r\n        gcd: {\r\n          base: 1500,\r\n        },\r\n      },\r\n      {\r\n        spell: [SPELLS.WILD_CHARGE_TALENT, SPELLS.WILD_CHARGE_MOONKIN, SPELLS.WILD_CHARGE_CAT, SPELLS.WILD_CHARGE_BEAR, SPELLS.WILD_CHARGE_TRAVEL],\r\n        category: Abilities.SPELL_CATEGORIES.UTILITY,\r\n        cooldown: 15,\r\n        gcd: null,\r\n        enabled: combatant.hasTalent(SPELLS.WILD_CHARGE_TALENT.id),\r\n      },\r\n      {\r\n        spell: SPELLS.DASH,\r\n        buffSpellId: SPELLS.DASH.id,\r\n        category: Abilities.SPELL_CATEGORIES.UTILITY,\r\n        enabled: !combatant.hasTalent(SPELLS.TIGER_DASH_TALENT.id),\r\n        cooldown: 180,\r\n        gcd: {\r\n          base: 1500,\r\n        },\r\n      },\r\n      {\r\n        spell: SPELLS.TIGER_DASH_TALENT,\r\n        buffSpellId: SPELLS.TIGER_DASH_TALENT.id,\r\n        category: Abilities.SPELL_CATEGORIES.UTILITY,\r\n        cooldown: 45,\r\n        enabled: combatant.hasTalent(SPELLS.TIGER_DASH_TALENT.id),\r\n        gcd: {\r\n          base: 1500,\r\n        },\r\n      },\r\n      {\r\n        spell: SPELLS.HIBERNATE,\r\n        category: Abilities.SPELL_CATEGORIES.UTILITY,\r\n        gcd: {\r\n          base: 1500,\r\n        },\r\n      },\r\n      {\r\n        spell: SPELLS.SOOTHE,\r\n        category: Abilities.SPELL_CATEGORIES.UTILITY,\r\n        cooldown: 10,\r\n        gcd: {\r\n          base: 1500,\r\n        },\r\n      },\r\n    ];\r\n  }\r\n}\r\n\r\nexport default Abilities;\r\n","import Analyzer, { SELECTED_PLAYER } from 'parser/core/Analyzer';\r\n\r\nimport { encodeTargetString } from 'parser/shared/modules/EnemyInstances';\r\nimport Events from 'parser/core/Events';\r\n\r\n/*\r\n * The amount of time elapsed without a combat event before a target is considered inactive.\r\n * The ideal size of this window will vary; specs that produce a lot of combat events can\r\n * have a lower threshold value.\r\n */\r\nconst ACTIVITY_THRESHOLD = 3000;\r\n\r\nclass ActiveTargets extends Analyzer {\r\n  /* Targets are considered inactive by default.  Once they are part of a damage event,\r\n   * they become active.  If they are not part of another damage event before a certain\r\n   * amount of time has passed, they are considered inactive again.\r\n  */\r\n  _targetActivity = {};\r\n\r\n  constructor(options) {\r\n    super(options);\r\n    this.addEventListener(Events.damage.by(SELECTED_PLAYER), this.onDamage);\r\n  }\r\n\r\n  /* Only player damage to the target is reliable for detecting enemy activity\r\n   * (mechanics like Shadow Shot on Sisters can trigger enemy damage to the player events\r\n   * even though the enemy is not targetable).  Pet damage may be reliable too, if\r\n   * you were a pet class.\r\n   */\r\n  onDamage(event) {\r\n    if (event.targetIsFriendly === false && event.targetID !== undefined) {\r\n      const enemyInstanceID = encodeTargetString(event.targetID, event.targetInstance);\r\n      this.registerEnemyActivity(enemyInstanceID, this.owner.currentTimestamp);\r\n    }\r\n  }\r\n\r\n  registerEnemyActivity(enemyID, timestamp) {\r\n    if (!this._targetActivity[enemyID]) {\r\n      this._targetActivity[enemyID] = [];\r\n    }\r\n\r\n    const enemyTimeline = this._targetActivity[enemyID];\r\n\r\n    if (enemyTimeline.length === 0) {\r\n      enemyTimeline.push({ start: timestamp, end: timestamp + ACTIVITY_THRESHOLD });\r\n      return;\r\n    }\r\n\r\n    const lastEvent = enemyTimeline[enemyTimeline.length - 1];\r\n\r\n    if (lastEvent.end > timestamp) {\r\n      // Extend the current activity window\r\n      lastEvent.end = timestamp + ACTIVITY_THRESHOLD;\r\n    } else {\r\n      // Start a new activity window\r\n      enemyTimeline.push({ start: timestamp, end: timestamp + ACTIVITY_THRESHOLD });\r\n    }\r\n  }\r\n\r\n  isTargetActive(enemyID, timestamp) {\r\n    if (!this._targetActivity[enemyID]) {\r\n      return false;\r\n    }\r\n\r\n    return this._targetActivity[enemyID].findIndex(activity => activity.start < timestamp && activity.end > timestamp) >= 0;\r\n  }\r\n\r\n  getActiveTargets(timestamp) {\r\n    return Object.keys(this._targetActivity).filter(enemyID => this.isTargetActive(enemyID, timestamp));\r\n  }\r\n}\r\n\r\nexport default ActiveTargets;\r\n","// Based on Clearcasting Implementation done by @Blazyb\r\nimport React from 'react';\r\nimport { formatPercentage } from 'common/format';\r\nimport SpellIcon from 'common/SpellIcon';\r\nimport SpellLink from 'common/SpellLink';\r\nimport StatisticBox, { STATISTIC_ORDER } from 'interface/others/StatisticBox';\r\nimport Analyzer, { SELECTED_PLAYER } from 'parser/core/Analyzer';\r\nimport SpellUsable from 'parser/shared/modules/SpellUsable';\r\nimport SPELLS from 'common/SPELLS';\r\nimport Events from 'parser/core/Events';\r\nimport { i18n } from '@lingui/core';\r\nimport { t } from '@lingui/macro';\r\n\r\nconst GORE_DURATION = 10000;\r\nconst debug = false;\r\n\r\nclass Gore extends Analyzer {\r\n  static dependencies = {\r\n    spellUsable: SpellUsable,\r\n  };\r\n\r\n  totalProcs = 0;\r\n  lastGoreProcTime = 0;\r\n  consumedGoreProc = 0;\r\n  overwrittenGoreProc = 0;\r\n  nonGoreMangle = 0;\r\n  statisticOrder = STATISTIC_ORDER.CORE(5);\r\n\r\n  constructor(options) {\r\n    super(options);\r\n    this.addEventListener(Events.applybuff.by(SELECTED_PLAYER).spell(SPELLS.GORE_BEAR), this.onApplyBuff);\r\n    this.addEventListener(Events.refreshbuff.by(SELECTED_PLAYER).spell(SPELLS.GORE_BEAR), this.onRefreshBuff);\r\n    this.addEventListener(Events.cast.by(SELECTED_PLAYER).spell(SPELLS.MANGLE_BEAR), this.onCast);\r\n  }\r\n\r\n  onApplyBuff(event) {\r\n    if (this.spellUsable.isOnCooldown(SPELLS.MANGLE_BEAR.id)) {\r\n      this.spellUsable.endCooldown(SPELLS.MANGLE_BEAR.id);\r\n    }\r\n    this.lastGoreProcTime = event.timestamp;\r\n    debug && console.log('Gore applied');\r\n    this.totalProcs += 1;\r\n  }\r\n\r\n  onRefreshBuff(event) {\r\n    // Captured Overwritten Gore Buffs for use in wasted buff calculations\r\n    if (this.spellUsable.isOnCooldown(SPELLS.MANGLE_BEAR.id)) {\r\n      this.spellUsable.endCooldown(SPELLS.MANGLE_BEAR.id);\r\n    }\r\n    this.lastGoreProcTime = event.timestamp;\r\n    debug && console.log('Gore Overwritten');\r\n    this.totalProcs += 1;\r\n    this.overwrittenGoreProc += 1;\r\n  }\r\n\r\n  onCast(event) {\r\n    if (this.lastGoreProcTime !== event.timestamp) {\r\n      if (this.lastGoreProcTime === 0) {\r\n        this.nonGoreMangle += 1;\r\n        return;\r\n      }\r\n      const goreTimeframe = this.lastGoreProcTime + GORE_DURATION;\r\n      if (event.timestamp > goreTimeframe) {\r\n        this.nonGoreMangle += 1;\r\n      } else {\r\n        this.consumedGoreProc += 1;\r\n        debug && console.log(`Gore Proc Consumed / Timestamp: ${event.timestamp}`);\r\n        this.lastGoreProcTime = 0;\r\n      }\r\n    }\r\n  }\r\n\r\n  suggestions(when) {\r\n    const unusedGoreProcs = 1 - (this.consumedGoreProc / this.totalProcs);\r\n\r\n    when(unusedGoreProcs).isGreaterThan(0.3)\r\n      .addSuggestion((suggest, actual, recommended) => suggest(<span>You wasted {formatPercentage(unusedGoreProcs)}% of your <SpellLink id={SPELLS.GORE_BEAR.id} /> procs. Try to use the procs as soon as you get them so they are not overwritten.</span>)\r\n        .icon(SPELLS.GORE_BEAR.icon)\r\n        .actual(i18n._(t('druid.guardian.suggestions.gore.unused')`${formatPercentage(unusedGoreProcs)}% unused`))\r\n        .recommended(`${Math.round(formatPercentage(recommended))}% or less is recommended`)\r\n        .regular(recommended + 0.15).major(recommended + 0.3));\r\n  }\r\n\r\n  statistic() {\r\n    const unusedGoreProcs = 1 - (this.consumedGoreProc / this.totalProcs);\r\n\r\n    return (\r\n      <StatisticBox\r\n        icon={<SpellIcon id={SPELLS.GORE_BEAR.id} />}\r\n        value={`${formatPercentage(unusedGoreProcs)}%`}\r\n        label=\"Unused Gore Procs\"\r\n        tooltip={<>You got total <strong>{this.totalProcs}</strong> gore procs and <strong>used {this.consumedGoreProc}</strong> of them.</>}\r\n      />\r\n    );\r\n  }\r\n}\r\n\r\nexport default Gore;\r\n","import React from 'react';\r\nimport { formatPercentage } from 'common/format';\r\nimport SpellIcon from 'common/SpellIcon';\r\nimport SpellLink from 'common/SpellLink';\r\nimport StatisticBox, { STATISTIC_ORDER } from 'interface/others/StatisticBox';\r\nimport Analyzer, { SELECTED_PLAYER } from 'parser/core/Analyzer';\r\nimport SPELLS from 'common/SPELLS';\r\nimport Events from 'parser/core/Events';\r\nimport { i18n } from '@lingui/core';\r\nimport { t } from '@lingui/macro';\r\n\r\nconst GG_DURATION = 10000;\r\nconst debug = false;\r\n\r\nclass GalacticGuardian extends Analyzer {\r\n  GGProcsTotal = 0;\r\n  lastGGProcTime = 0;\r\n  consumedGGProc = 0;\r\n  overwrittenGGProc = 0;\r\n  nonGGMoonFire = 0;\r\n  statisticOrder = STATISTIC_ORDER.CORE(6);\r\n\r\n  constructor(...args) {\r\n    super(...args);\r\n    this.active = this.selectedCombatant.hasTalent(SPELLS.GALACTIC_GUARDIAN_TALENT.id);\r\n    this.addEventListener(Events.applybuff.by(SELECTED_PLAYER).spell(SPELLS.GALACTIC_GUARDIAN), this.onApplyBuff);\r\n    this.addEventListener(Events.refreshbuff.by(SELECTED_PLAYER).spell(SPELLS.GALACTIC_GUARDIAN), this.onRefreshBuff);\r\n    this.addEventListener(Events.cast.by(SELECTED_PLAYER).spell(SPELLS.MOONFIRE), this.onCast);\r\n  }\r\n\r\n  onApplyBuff(event) {\r\n    this.lastGGProcTime = event.timestamp;\r\n    debug && console.log('Galactic Guardian applied');\r\n    this.GGProcsTotal += 1;\r\n  }\r\n\r\n  onRefreshBuff(event) {\r\n    // Captured Overwritten GG Buffs for use in wasted buff calculations\r\n    this.lastGGProcTime = event.timestamp;\r\n    debug && console.log('Galactic Guardian Overwritten');\r\n    this.GGProcsTotal += 1;\r\n    this.overwrittenGGProc += 1;\r\n  }\r\n\r\n  onCast(event) {\r\n    if (this.lastGGProcTime !== event.timestamp) {\r\n      if (this.lastGGProcTime === null) {\r\n        this.nonGGMoonFire += 1;\r\n        return;\r\n      }\r\n      const GGTimeframe = this.lastGGProcTime + GG_DURATION;\r\n      if (event.timestamp > GGTimeframe) {\r\n        this.nonGGMoonFire += 1;\r\n      } else {\r\n        this.consumedGGProc += 1;\r\n        debug && console.log(`Galactic Guardian Proc Consumed / Timestamp: ${event.timestamp}`);\r\n        this.lastGGProcTime = null;\r\n      }\r\n    }\r\n  }\r\n\r\n  suggestions(when) {\r\n    const unusedGGProcs = 1 - (this.consumedGGProc / this.GGProcsTotal);\r\n    when(unusedGGProcs).isGreaterThan(0.3)\r\n      .addSuggestion((suggest, actual, recommended) => suggest(<span>You wasted {formatPercentage(unusedGGProcs)}% of your <SpellLink id={SPELLS.GALACTIC_GUARDIAN.id} /> procs. Try to use the procs as soon as you get them so they are not overwritten.</span>)\r\n        .icon(SPELLS.GALACTIC_GUARDIAN.icon)\r\n        .actual(i18n._(t('druid.guardian.suggestions.galacticGuardian.unused')`${formatPercentage(unusedGGProcs)}% unused`))\r\n        .recommended(`${Math.round(formatPercentage(recommended))}% or less is recommended`)\r\n        .regular(recommended + 0.15).major(recommended + 0.3));\r\n  }\r\n\r\n  statistic() {\r\n    const unusedGGProcs = 1 - (this.consumedGGProc / this.GGProcsTotal);\r\n\r\n    return (\r\n      <StatisticBox\r\n        icon={<SpellIcon id={SPELLS.GALACTIC_GUARDIAN.id} />}\r\n        value={`${formatPercentage(unusedGGProcs)}%`}\r\n        label=\"Unused Galactic Guardian\"\r\n        tooltip={<>You got total <strong>{this.GGProcsTotal}</strong> galactic guardian procs and <strong>used {this.consumedGGProc}</strong> of them.</>}\r\n      />\r\n    );\r\n  }\r\n}\r\n\r\nexport default GalacticGuardian;\r\n","import React from 'react';\r\nimport { formatPercentage } from 'common/format';\r\nimport SpellIcon from 'common/SpellIcon';\r\nimport SpellLink from 'common/SpellLink';\r\nimport StatisticBox, { STATISTIC_ORDER } from 'interface/others/StatisticBox';\r\nimport Analyzer, { SELECTED_PLAYER } from 'parser/core/Analyzer';\r\nimport SPELLS from 'common/SPELLS';\r\nimport Events from 'parser/core/Events';\r\nimport { i18n } from '@lingui/core';\r\nimport { t } from '@lingui/macro';\r\n\r\nconst GOE_DURATION = 15000;\r\nconst debug = false;\r\n\r\nclass GuardianOfElune extends Analyzer {\r\n  GoEProcsTotal = 0;\r\n  lastGoEProcTime = 0;\r\n  consumedGoEProc = 0;\r\n  overwrittenGoEProc = 0;\r\n  nonGoEIronFur = 0;\r\n  GoEIronFur = 0;\r\n  nonGoEFRegen = 0;\r\n  GoEFRegen = 0;\r\n  statisticOrder = STATISTIC_ORDER.CORE(7);\r\n\r\n  constructor(...args) {\r\n    super(...args);\r\n    this.active = this.selectedCombatant.hasTalent(SPELLS.GUARDIAN_OF_ELUNE_TALENT.id);\r\n    this.addEventListener(Events.applybuff.by(SELECTED_PLAYER).spell(SPELLS.GUARDIAN_OF_ELUNE), this.onApplyBuff);\r\n    this.addEventListener(Events.refreshbuff.by(SELECTED_PLAYER).spell(SPELLS.GUARDIAN_OF_ELUNE), this.onRefreshBuff);\r\n    this.addEventListener(Events.cast.by(SELECTED_PLAYER).spell(SPELLS.IRONFUR), this.onCastIronfur);\r\n    this.addEventListener(Events.cast.by(SELECTED_PLAYER).spell(SPELLS.FRENZIED_REGENERATION), this.onCastFrenziedRegen);\r\n  }\r\n\r\n  onApplyBuff(event) {\r\n    this.lastGoEProcTime = event.timestamp;\r\n    debug && console.log('Guardian of Elune applied');\r\n    this.GoEProcsTotal += 1;\r\n  }\r\n\r\n  onRefreshBuff(event) {\r\n    // Captured Overwritten GoE Buffs for use in wasted buff calculations\r\n    this.lastGoEProcTime = event.timestamp;\r\n    debug && console.log('Guardian of Elune Overwritten');\r\n    this.GoEProcsTotal += 1;\r\n    this.overwrittenGoEProc += 1;\r\n  }\r\n\r\n  onCastIronfur(event) {\r\n    if (this.lastGoEProcTime !== event.timestamp) {\r\n      if (this.lastGoEProcTime === null) {\r\n        this.nonGoEIronFur += 1;\r\n        return;\r\n      }\r\n      const GoETimeframe = this.lastGoEProcTime + GOE_DURATION;\r\n      if (event.timestamp > GoETimeframe) {\r\n        this.nonGoEIronFur += 1;\r\n      } else {\r\n        this.consumedGoEProc += 1;\r\n        this.GoEIronFur += 1;\r\n        debug && console.log(`Guardian of Elune Proc Consumed / Timestamp: ${event.timestamp}`);\r\n        this.lastGoEProcTime = null;\r\n      }\r\n    }\r\n  }\r\n\r\n  onCastFrenziedRegen(event) {\r\n    if (this.lastGoEProcTime !== event.timestamp) {\r\n      if (this.lastGoEProcTime === null) {\r\n        this.nonGoEFRegen += 1;\r\n        return;\r\n      }\r\n      const GoETimeframe = this.lastGoEProcTime + GOE_DURATION;\r\n      if (event.timestamp > GoETimeframe) {\r\n        this.nonGoEFRegen += 1;\r\n      } else {\r\n        this.consumedGoEProc += 1;\r\n        this.GoEFRegen += 1;\r\n        debug && console.log(`Guardian of Elune Proc Consumed / Timestamp: ${event.timestamp}`);\r\n        this.lastGoEProcTime = null;\r\n      }\r\n    }\r\n  }\r\n\r\n  suggestions(when) {\r\n    const unusedGoEProcs = 1 - (this.consumedGoEProc / this.GoEProcsTotal);\r\n\r\n    when(unusedGoEProcs).isGreaterThan(0.3)\r\n      .addSuggestion((suggest, actual, recommended) => suggest(<span>You wasted {formatPercentage(unusedGoEProcs)}% of your <SpellLink id={SPELLS.GUARDIAN_OF_ELUNE.id} /> procs. Try to use the procs as soon as you get them so they are not overwritten.</span>)\r\n        .icon(SPELLS.GUARDIAN_OF_ELUNE.icon)\r\n        .actual(i18n._(t('druid.guardian.suggestions.guardianOfElune.unused')`${formatPercentage(unusedGoEProcs)}% unused`))\r\n        .recommended(`${Math.round(formatPercentage(recommended))}% or less is recommended`)\r\n        .regular(recommended + 0.15).major(recommended + 0.3));\r\n  }\r\n\r\n  statistic() {\r\n    const unusedGoEProcs = 1 - (this.consumedGoEProc / this.GoEProcsTotal);\r\n\r\n    return (\r\n      <StatisticBox\r\n        icon={<SpellIcon id={SPELLS.GUARDIAN_OF_ELUNE.id} />}\r\n        value={`${formatPercentage(unusedGoEProcs)}%`}\r\n        label=\"Unused Guardian of Elune\"\r\n        tooltip={<>You got total <strong>{this.GoEProcsTotal}</strong> guardian of elune procs and <strong>used {this.consumedGoEProc}</strong> of them.</>}\r\n      />\r\n    );\r\n  }\r\n}\r\n\r\nexport default GuardianOfElune;\r\n","import React from 'react';\r\nimport { formatPercentage } from 'common/format';\r\nimport SpellIcon from 'common/SpellIcon';\r\nimport StatisticBox, { STATISTIC_ORDER } from 'interface/others/StatisticBox';\r\nimport SPELLS from 'common/SPELLS';\r\nimport Analyzer from 'parser/core/Analyzer';\r\n\r\nimport GuardianOfElune from './GuardianOfElune';\r\n\r\nclass IronFurGoEProcs extends Analyzer {\r\n  static dependencies = {\r\n    guardianOfElune: GuardianOfElune,\r\n  };\r\n  statisticOrder = STATISTIC_ORDER.CORE(9);\r\n\r\n  constructor(...args) {\r\n    super(...args);\r\n    this.active = this.selectedCombatant.hasTalent(SPELLS.GUARDIAN_OF_ELUNE_TALENT.id);\r\n  }\r\n\r\n  statistic() {\r\n    const nonGoEIronFur = this.guardianOfElune.nonGoEIronFur;\r\n    const GoEIronFur = this.guardianOfElune.GoEIronFur;\r\n    return (\r\n      <StatisticBox\r\n        icon={<SpellIcon id={SPELLS.IRONFUR.id} />}\r\n        value={`${formatPercentage(nonGoEIronFur / (nonGoEIronFur + GoEIronFur))}%`}\r\n        label=\"Unbuffed Ironfur\"\r\n        tooltip={<>You cast <strong>{nonGoEIronFur + GoEIronFur}</strong> total {SPELLS.IRONFUR.name} and <strong>{GoEIronFur}</strong> were buffed by 2s.</>}\r\n      />\r\n    );\r\n  }\r\n}\r\n\r\nexport default IronFurGoEProcs;\r\n","import React from 'react';\r\nimport { formatPercentage } from 'common/format';\r\nimport SpellIcon from 'common/SpellIcon';\r\nimport StatisticBox, { STATISTIC_ORDER } from 'interface/others/StatisticBox';\r\nimport SPELLS from 'common/SPELLS';\r\nimport Analyzer from 'parser/core/Analyzer';\r\n\r\nimport GuardianOfElune from './GuardianOfElune';\r\n\r\nclass FrenziedRegenGoEProcs extends Analyzer {\r\n  static dependencies = {\r\n    guardianOfElune: GuardianOfElune,\r\n  };\r\n  statisticOrder = STATISTIC_ORDER.CORE(8);\r\n\r\n  constructor(...args) {\r\n    super(...args);\r\n    this.active = this.selectedCombatant.hasTalent(SPELLS.GUARDIAN_OF_ELUNE_TALENT.id);\r\n  }\r\n\r\n  statistic() {\r\n    const nonGoEFRegen = this.guardianOfElune.nonGoEFRegen;\r\n    const GoEFRegen = this.guardianOfElune.GoEFRegen;\r\n    if ((nonGoEFRegen + GoEFRegen) === 0) {\r\n      return null;\r\n    }\r\n    return (\r\n      <StatisticBox\r\n        icon={<SpellIcon id={SPELLS.FRENZIED_REGENERATION.id} />}\r\n        value={`${formatPercentage(nonGoEFRegen / (nonGoEFRegen + GoEFRegen))}%`}\r\n        label=\"Unbuffed Frenzied Regen\"\r\n        tooltip={<>You cast <strong>{nonGoEFRegen + GoEFRegen}</strong> total {SPELLS.FRENZIED_REGENERATION.name} and <strong>{GoEFRegen}</strong> were buffed by 20%.</>}\r\n      />\r\n    );\r\n  }\r\n}\r\n\r\nexport default FrenziedRegenGoEProcs;\r\n","import React from 'react';\r\nimport { formatPercentage } from 'common/format';\r\nimport SPELLS from 'common/SPELLS';\r\nimport RESOURCE_TYPES from 'game/RESOURCE_TYPES';\r\nimport SpellLink from 'common/SpellLink';\r\nimport SpellIcon from 'common/SpellIcon';\r\nimport StatisticBox from 'interface/others/StatisticBox';\r\nimport Analyzer, { SELECTED_PLAYER } from 'parser/core/Analyzer';\r\nimport Events from 'parser/core/Events';\r\nimport { i18n } from '@lingui/core';\r\nimport { t } from '@lingui/macro';\r\n\r\n// NOTE: \"Raw\" rage is what shows up in combat log events (divided by 10 and rounded to get in-game rage).\r\n// We deal with raw rage here to prevent accuracy loss.\r\n\r\n// This is actually ~59.95, for some bizarre reason, meaning that occasionally you will gain 5 rage\r\n// instead of 6 from a melee.  We have no idea why this is. As long as we re-sync with the classResources\r\n// field with each event, this shouldn't be a problem.\r\nconst RAW_RAGE_GAINED_FROM_MELEE = 60;\r\n\r\nconst RAGE_GENERATORS = {\r\n  [SPELLS.MELEE.id]: 'Melee',\r\n  [SPELLS.MANGLE_BEAR.id]: 'Mangle',\r\n  [SPELLS.THRASH_BEAR.id]: 'Thrash',\r\n  [SPELLS.MOONFIRE.id]: 'Moonfire (Galactic Guardian)',\r\n  [SPELLS.BLOOD_FRENZY_TICK.id]: 'Blood Frenzy',\r\n  [SPELLS.BRISTLING_FUR.id]: 'Bristling Fur',\r\n  [SPELLS.OAKHEARTS_PUNY_QUODS_BUFF.id]: 'Oakheart\\'s Puny Quods',\r\n  [SPELLS.PURE_RAGE_POTION.id]: 'Pure Rage Potion',\r\n};\r\n\r\nclass RageWasted extends Analyzer {\r\n  get totalWastedRage() {\r\n    return Object.keys(this.rageWastedBySpell)\r\n      .map(key => this.rageWastedBySpell[key])\r\n      .reduce((total, waste) => total + waste, 0);\r\n  }\r\n\r\n  get wastedRageRatio() {\r\n    return this.totalWastedRage / this.totalRageGained;\r\n  }\r\n\r\n  get wastedRageBreakdown() {\r\n    return Object.keys(this.rageWastedBySpell)\r\n      .map((spellID) => {\r\n        if (!RAGE_GENERATORS[spellID]) {\r\n          console.warn('Unknown rage generator:', spellID);\r\n        }\r\n        return {\r\n          name: RAGE_GENERATORS[spellID],\r\n          waste: this.rageWastedBySpell[spellID],\r\n        };\r\n      })\r\n      .sort((a, b) => b.waste - a.waste)\r\n      .reduce((str, spell) => <>{str}<br />{spell.name}: {spell.waste}</>, 'Rage wasted per spell:');\r\n  }\r\n\r\n  rageWastedBySpell = {};\r\n  totalRageGained = 0;\r\n  _currentRawRage = 0;\r\n  // Currently always 1000, but in case a future tier set/talent/artifact trait increases this it should \"just work\"\r\n  _currentMaxRage = 0;\r\n\r\n  constructor(options) {\r\n    super(options);\r\n    this.addEventListener(Events.energize.by(SELECTED_PLAYER), this.onEnergize);\r\n    this.addEventListener(Events.cast.by(SELECTED_PLAYER), this.onCast);\r\n  }\r\n\r\n  synchronizeRage(event) {\r\n    if (!event.classResources) {\r\n      console.log('no classResources', event);\r\n      return;\r\n    }\r\n    const rageResource = event.classResources.find(resource => resource.type === RESOURCE_TYPES.RAGE.id);\r\n    if (rageResource) {\r\n      this._currentRawRage = rageResource.amount;\r\n      this._currentMaxRage = rageResource.max;\r\n    }\r\n  }\r\n\r\n  registerRageWaste(abilityID, waste) {\r\n    if (!this.rageWastedBySpell[abilityID]) {\r\n      this.rageWastedBySpell[abilityID] = waste;\r\n    } else {\r\n      this.rageWastedBySpell[abilityID] += waste;\r\n    }\r\n  }\r\n\r\n  onEnergize(event) {\r\n    this.synchronizeRage(event);\r\n    if (event.resourceChangeType !== RESOURCE_TYPES.RAGE.id) {\r\n      return;\r\n    }\r\n\r\n    if (event.waste > 0) {\r\n      this.registerRageWaste(event.ability.guid, event.waste);\r\n    }\r\n\r\n    this.totalRageGained += event.resourceChange + event.waste;\r\n  }\r\n\r\n  onCast(event) {\r\n    if (event.ability.guid === SPELLS.MELEE.id) {\r\n      if (this._currentRawRage + RAW_RAGE_GAINED_FROM_MELEE > this._currentMaxRage) {\r\n        const realRageWasted = Math.floor((this._currentRawRage + RAW_RAGE_GAINED_FROM_MELEE - this._currentMaxRage) / 10);\r\n        this.registerRageWaste(event.ability.guid, realRageWasted);\r\n      }\r\n      // Convert from raw rage to real rage\r\n      this.totalRageGained += RAW_RAGE_GAINED_FROM_MELEE / 10;\r\n    }\r\n    this.synchronizeRage(event);\r\n  }\r\n\r\n  suggestions(when) {\r\n    when(this.wastedRageRatio).isGreaterThan(0)\r\n      .addSuggestion((suggest, actual, recommended) => suggest(<span>You are wasting rage.  Try to spend rage before you reach the rage cap so you aren't losing out on potential <SpellLink id={SPELLS.IRONFUR.id} />s or <SpellLink id={SPELLS.MAUL.id} />s.</span>)\r\n        .icon(SPELLS.BRISTLING_FUR.icon)\r\n        .actual(i18n._(t('druid.guardian.suggestions.rage.wasted')`${formatPercentage(actual)}% wasted rage`))\r\n        .recommended(`${formatPercentage(recommended)}% is recommended`)\r\n        .regular(recommended + 0.02).major(recommended + 0.05));\r\n  }\r\n\r\n  statistic() {\r\n    return (\r\n      <StatisticBox\r\n        icon={<SpellIcon id={SPELLS.BRISTLING_FUR.id} />}\r\n        label=\"Wasted Rage\"\r\n        value={`${formatPercentage(this.wastedRageRatio)}%`}\r\n        tooltip={(\r\n          <>\r\n            You wasted <strong>{this.totalWastedRage}</strong> rage out of <strong>{this.totalRageGained}</strong> total rage gained. (<strong>{formatPercentage(this.wastedRageRatio)}%</strong> of total)<br /><br />\r\n\r\n            {this.wastedRageBreakdown}\r\n          </>\r\n        )}\r\n      />\r\n    );\r\n  }\r\n}\r\n\r\nexport default RageWasted;\r\n","import React from 'react';\r\n\r\nimport SPELLS from 'common/SPELLS';\r\nimport { formatPercentage, formatDuration } from 'common/format';\r\nimport SpellIcon from 'common/SpellIcon';\r\nimport SpellLink from 'common/SpellLink';\r\nimport Analyzer, { SELECTED_PLAYER } from 'parser/core/Analyzer';\r\nimport EnemyInstances from 'parser/shared/modules/EnemyInstances';\r\nimport SpellUsable from 'parser/shared/modules/SpellUsable';\r\nimport StatisticBox from 'interface/others/StatisticBox';\r\nimport { i18n } from '@lingui/core';\r\nimport { t } from '@lingui/macro';\r\n\r\nimport Events from 'parser/core/Events';\r\n\r\nimport Abilities from '../Abilities';\r\nimport ActiveTargets from './ActiveTargets';\r\n\r\nconst debug = false;\r\n\r\n// Determines whether a variable is a function or not, and returns its value\r\nfunction resolveValue(maybeFunction, ...args) {\r\n  if (typeof maybeFunction === 'function') {\r\n    return maybeFunction(...args);\r\n  }\r\n\r\n  return maybeFunction;\r\n}\r\n\r\nclass AntiFillerSpam extends Analyzer {\r\n  get fillerSpamPercentage() {\r\n    return this._unnecessaryFillerSpells / this._totalGCDSpells;\r\n  }\r\n\r\n  static dependencies = {\r\n    enemyInstances: EnemyInstances,\r\n    activeTargets: ActiveTargets,\r\n    spellUsable: SpellUsable,\r\n    abilities: Abilities,\r\n  };\r\n  _totalGCDSpells = 0;\r\n  _totalFillerSpells = 0;\r\n  _unnecessaryFillerSpells = 0;\r\n\r\n  constructor(options) {\r\n    super(options);\r\n    this.addEventListener(Events.cast.by(SELECTED_PLAYER), this.onCast);\r\n  }\r\n\r\n  onCast(event) {\r\n    const spellId = event.ability.guid;\r\n    const ability = this.abilities.getAbility(spellId);\r\n    if (!ability || !ability.gcd) {\r\n      return;\r\n    }\r\n\r\n    this._totalGCDSpells += 1;\r\n    const targets = this.activeTargets.getActiveTargets(event.timestamp).map(enemyID => this.enemyInstances.enemies[enemyID]).filter(enemy => Boolean(enemy));\r\n    const combatant = this.selectedCombatant;\r\n\r\n    let isFiller = false;\r\n    if (ability.antiFillerSpam) {\r\n      if (typeof ability.antiFillerSpam.isFiller === 'function') {\r\n        isFiller = ability.antiFillerSpam.isFiller(event, combatant, targets);\r\n      } else {\r\n        isFiller = ability.antiFillerSpam.isFiller;\r\n      }\r\n    }\r\n\r\n    if (!isFiller) {\r\n      return;\r\n    }\r\n\r\n    debug && console.group(`[FILLER SPELL] - ${spellId} ${SPELLS[spellId].name} - ${formatDuration((event.timestamp - this.owner.fight.start_time) / 1000)}`);\r\n\r\n    this._totalFillerSpells += 1;\r\n    const availableSpells = [];\r\n\r\n    this.abilities.abilities\r\n      .filter(ability => ability.antiFillerSpam)\r\n      .forEach(gcdSpell => {\r\n        const gcdSpellId = gcdSpell.primarySpell.id;\r\n        if (ability.primarySpell.id === gcdSpellId) {\r\n          return;\r\n        }\r\n\r\n        const isOffCooldown = this.spellUsable.isAvailable(gcdSpellId);\r\n        const args = [event, combatant, targets];\r\n        const isHighPriority = (gcdSpell.antiFillerSpam.isHighPriority !== undefined) ? resolveValue(gcdSpell.antiFillerSpam.isHighPriority, ...args) : false;\r\n\r\n        if (!isOffCooldown || !isHighPriority) {\r\n          return;\r\n        }\r\n\r\n        debug && console.warn(`\r\n          [Available non-filler]\r\n          - ${gcdSpellId} ${SPELLS[gcdSpellId].name}\r\n          - offCD: ${isOffCooldown}\r\n          - isHighPriority: ${isHighPriority}\r\n        `);\r\n        availableSpells.push(gcdSpell);\r\n      });\r\n\r\n    if (availableSpells.length > 0) {\r\n      this._unnecessaryFillerSpells += 1;\r\n      let text = '';\r\n      for (let i = 0; i < availableSpells.length; i += 1) {\r\n        if (availableSpells[i].primarySpell.id === SPELLS.MOONFIRE.id) {\r\n          text += 'a Galactic Guardian proc';\r\n        } else {\r\n          text += availableSpells[i].name;\r\n        }\r\n        if (i + 2 < availableSpells.length) {\r\n          text += ', ';\r\n        } else if (i + 1 < availableSpells.length) {\r\n          text += ' and ';\r\n        }\r\n      }\r\n      event.meta = event.meta || {};\r\n      event.meta.isInefficientCast = true;\r\n      event.meta.inefficientCastReason = `This spell was cast while ${text} was available.`;\r\n    }\r\n    debug && console.groupEnd();\r\n  }\r\n\r\n  statistic() {\r\n    return (\r\n      <StatisticBox\r\n        icon={<SpellIcon id={SPELLS.SWIPE_BEAR.id} />}\r\n        value={`${formatPercentage(this.fillerSpamPercentage)}%`}\r\n        label=\"Unnecessary Fillers\"\r\n        tooltip={<>You cast <strong>{this._unnecessaryFillerSpells}</strong> unnecessary filler spells out of <strong>{this._totalGCDSpells}</strong> total GCDs. Filler spells (Swipe, Moonfire without a GG proc, or Moonfire outside of pandemic if talented into Incarnation) do far less damage than your main rotational spells, and should be minimized whenever possible.</>}\r\n      />\r\n    );\r\n  }\r\n\r\n  suggestions(when) {\r\n    when(this.fillerSpamPercentage).isGreaterThan(0.1)\r\n      .addSuggestion((suggest, actual, recommended) => suggest(\r\n        <>\r\n          You are casting too many unnecessary filler spells. Try to plan your casts two or three GCDs ahead of time to anticipate your main rotational spells coming off cooldown, and to give yourself time to react to <SpellLink id={SPELLS.GORE_BEAR.id} /> and <SpellLink id={SPELLS.GALACTIC_GUARDIAN_TALENT.id} /> procs.\r\n        </>,\r\n      )\r\n        .icon(SPELLS.SWIPE_BEAR.icon)\r\n        .actual(i18n._(t('druid.guardian.suggestions.fillerSpells.efficiency')`${formatPercentage(actual)}% unnecessary filler spells cast`))\r\n        .recommended(`${formatPercentage(recommended, 0)}% or less is recommended`)\r\n        .regular(recommended + 0.05).major(recommended + 0.1));\r\n  }\r\n}\r\n\r\nexport default AntiFillerSpam;\r\n","import CoreMitigationCheck from 'parser/shared/modules/MitigationCheck';\r\nimport SPELLS from 'common/SPELLS';\r\n\r\nclass MitigationCheck extends CoreMitigationCheck {\r\n  constructor(...args) {\r\n    super(...args);\r\n    this.buffCheckPhysical = [SPELLS.IRONFUR.id];\r\n\r\n    this.buffCheckPhysAndMag = [\r\n      SPELLS.FRENZIED_REGENERATION.id,\r\n      SPELLS.BARKSKIN.id,\r\n      SPELLS.SURVIVAL_INSTINCTS.id,\r\n    ];\r\n  }\r\n}\r\n\r\nexport default MitigationCheck;\r\n","import React from 'react';\r\nimport { formatPercentage } from 'common/format';\r\nimport SCHOOLS from 'game/MAGIC_SCHOOLS';\r\nimport SpellIcon from 'common/SpellIcon';\r\nimport SpellLink from 'common/SpellLink';\r\nimport StatisticBox, { STATISTIC_ORDER } from 'interface/others/StatisticBox';\r\nimport Analyzer, { SELECTED_PLAYER } from 'parser/core/Analyzer';\r\nimport SPELLS from 'common/SPELLS';\r\nimport Events from 'parser/core/Events';\r\nimport { i18n } from '@lingui/core';\r\nimport { t } from '@lingui/macro';\r\n\r\nconst debug = false;\r\n\r\nclass IronFur extends Analyzer {\r\n  get hitsMitigated() {\r\n    return this._hitsPerStack.slice(1).reduce((sum, x) => sum + x, 0);\r\n  }\r\n\r\n  get hitsUnmitigated() {\r\n    return this._hitsPerStack[0] || 0;\r\n  }\r\n\r\n  get ironfurStacksApplied() {\r\n    return this._hitsPerStack.reduce((sum, x, i) => sum + (x * i), 0);\r\n  }\r\n\r\n  get totalHitsTaken() {\r\n    return this._hitsPerStack.reduce((sum, x) => sum + x, 0);\r\n  }\r\n\r\n  get overallIronfurUptime() {\r\n    // Avoid NaN display errors\r\n    if (this.totalHitsTaken === 0) {\r\n      return 0;\r\n    }\r\n\r\n    return this.ironfurStacksApplied / this.totalHitsTaken;\r\n  }\r\n\r\n  get percentOfHitsMitigated() {\r\n    if (this.totalHitsTaken === 0) {\r\n      return 0;\r\n    }\r\n    return this.hitsMitigated / this.totalHitsTaken;\r\n  }\r\n\r\n  _hitsPerStack = [];\r\n\r\n  constructor(options) {\r\n    super(options);\r\n    this.addEventListener(Events.damage.to(SELECTED_PLAYER), this.onDamageTaken);\r\n    this.addEventListener(Events.fightend, this.onFightend);\r\n  }\r\n\r\n  registerHit(stackCount) {\r\n    if (!this._hitsPerStack[stackCount]) {\r\n      this._hitsPerStack[stackCount] = 0;\r\n    }\r\n\r\n    this._hitsPerStack[stackCount] += 1;\r\n  }\r\n\r\n  onDamageTaken(event) {\r\n    // Physical\r\n    if (event.ability.type === SCHOOLS.ids.PHYSICAL) {\r\n      const ironfur = this.selectedCombatant.getBuff(SPELLS.IRONFUR.id);\r\n      this.registerHit(ironfur ? ironfur.stacks : 0);\r\n    }\r\n  }\r\n\r\n  computeIronfurUptimeArray() {\r\n    return this._hitsPerStack.map(hits => hits / this.totalHitsTaken);\r\n  }\r\n\r\n  onFightend() {\r\n    if (debug) {\r\n      console.log(`Hits with ironfur ${this.hitsMitigated}`);\r\n      console.log(`Hits without ironfur ${this.hitsUnmitigated}`);\r\n      console.log('Ironfur uptimes:', this.computeIronfurUptimeArray());\r\n    }\r\n  }\r\n\r\n  suggestions(when) {\r\n\r\n    when(this.percentOfHitsMitigated).isLessThan(0.90)\r\n      .addSuggestion((suggest, actual, recommended) => suggest(<span>You only had the <SpellLink id={SPELLS.IRONFUR.id} /> buff for {formatPercentage(actual)}% of physical damage taken. You should have the Ironfur buff up to mitigate as much physical damage as possible.</span>)\r\n        .icon(SPELLS.IRONFUR.icon)\r\n        .actual(i18n._(t('druid.guardian.suggestions.ironfur.uptime')`${formatPercentage(actual)}% was mitigated by Ironfur`))\r\n        .recommended(`${Math.round(formatPercentage(recommended))}% or more is recommended`)\r\n        .regular(recommended - 0.10).major(recommended - 0.2));\r\n  }\r\n\r\n  statistic() {\r\n    const totalIronFurTime = this.selectedCombatant.getBuffUptime(SPELLS.IRONFUR.id);\r\n    const uptimes = this.computeIronfurUptimeArray().reduce((str, uptime, stackCount) => (\r\n      <>{str}\r\n        <li>{stackCount} stack{stackCount !== 1 ? 's' : ''}: {formatPercentage(uptime)}%</li>\r\n      </>\r\n    ), null);\r\n\r\n    return (\r\n      <StatisticBox\r\n        position={STATISTIC_ORDER.CORE(10)}\r\n        icon={<SpellIcon id={SPELLS.IRONFUR.id} />}\r\n        value={`${formatPercentage(this.percentOfHitsMitigated)}% / ${this.overallIronfurUptime.toFixed(2)}`}\r\n        label=\"Hits mitigated with Ironfur / Average Stacks\"\r\n        tooltip={(\r\n          <>\r\n            Ironfur usage breakdown:\r\n            <ul>\r\n              <li>You were hit <strong>{this.hitsMitigated}</strong> times with your Ironfur buff.</li>\r\n              <li>You were hit <strong>{this.hitsUnmitigated}</strong> times <strong><em>without</em></strong> your Ironfur buff.</li>\r\n            </ul>\r\n            <strong>Uptimes per stack: </strong>\r\n            <ul>\r\n              {uptimes}\r\n            </ul>\r\n            <strong>{formatPercentage(this.percentOfHitsMitigated)}%</strong> of physical attacks were mitigated with Ironfur, and your overall uptime was <strong>{formatPercentage(totalIronFurTime / this.owner.fightDuration)}%</strong>.\r\n          </>\r\n        )}\r\n      />\r\n    );\r\n  }\r\n}\r\n\r\nexport default IronFur;\r\n","import React from 'react';\r\nimport { formatPercentage } from 'common/format';\r\nimport SpellIcon from 'common/SpellIcon';\r\nimport SpellLink from 'common/SpellLink';\r\nimport StatisticBox, { STATISTIC_ORDER } from 'interface/others/StatisticBox';\r\nimport Analyzer from 'parser/core/Analyzer';\r\nimport Enemies from 'parser/shared/modules/Enemies';\r\nimport SPELLS from 'common/SPELLS';\r\nimport { i18n } from '@lingui/core';\r\nimport { t } from '@lingui/macro';\r\n\r\nclass Thrash extends Analyzer {\r\n  static dependencies = {\r\n    enemies: Enemies,\r\n  };\r\n  statisticOrder = STATISTIC_ORDER.CORE(11);\r\n\r\n  suggestions(when) {\r\n    const thrashUptimePercentage = this.enemies.getBuffUptime(SPELLS.THRASH_BEAR_DOT.id) / this.owner.fightDuration;\r\n\r\n    when(thrashUptimePercentage).isLessThan(0.95)\r\n      .addSuggestion((suggest, actual, recommended) => suggest(<span> Your <SpellLink id={SPELLS.THRASH_BEAR_DOT.id} /> uptime was {formatPercentage(thrashUptimePercentage)}%, unless you have extended periods of downtime it should be near 100%. <br />Thrash applies a bleed which buffs the damage of <SpellLink id={SPELLS.MANGLE_BEAR.id} /> by 20%.  Thrash uptime is especially important if you are talented into <SpellLink id={SPELLS.REND_AND_TEAR_TALENT.id} />, since it buffs the rest of your damage and gives you extra damage reduction.</span>)\r\n        .icon(SPELLS.THRASH_BEAR.icon)\r\n        .actual(i18n._(t('druid.guardian.suggestions.thrash.uptime')`${formatPercentage(thrashUptimePercentage)}% uptime`))\r\n        .recommended(`${Math.round(formatPercentage(recommended))}% is recommended`)\r\n        .regular(recommended - 0.05).major(recommended - 0.15));\r\n  }\r\n\r\n  statistic() {\r\n    const thrashUptimePercentage = this.enemies.getBuffUptime(SPELLS.THRASH_BEAR_DOT.id) / this.owner.fightDuration;\r\n\r\n    return (\r\n      <StatisticBox\r\n        icon={<SpellIcon id={SPELLS.THRASH_BEAR.id} />}\r\n        value={`${formatPercentage(thrashUptimePercentage)}%`}\r\n        label=\"Thrash uptime\"\r\n      />\r\n    );\r\n  }\r\n}\r\n\r\nexport default Thrash;\r\n","import React from 'react';\r\nimport { formatPercentage } from 'common/format';\r\nimport SpellIcon from 'common/SpellIcon';\r\nimport SpellLink from 'common/SpellLink';\r\nimport StatisticBox, { STATISTIC_ORDER } from 'interface/others/StatisticBox';\r\nimport Analyzer from 'parser/core/Analyzer';\r\nimport Enemies from 'parser/shared/modules/Enemies';\r\nimport SPELLS from 'common/SPELLS';\r\nimport { i18n } from '@lingui/core';\r\nimport { t } from '@lingui/macro';\r\n\r\nclass Moonfire extends Analyzer {\r\n  static dependencies = {\r\n    enemies: Enemies,\r\n  };\r\n  statisticOrder = STATISTIC_ORDER.CORE(12);\r\n\r\n  suggestions(when) {\r\n    const moonfireUptimePercentage = this.enemies.getBuffUptime(SPELLS.MOONFIRE_BEAR.id) / this.owner.fightDuration;\r\n\r\n    when(moonfireUptimePercentage).isLessThan(0.95)\r\n      .addSuggestion((suggest, actual, recommended) => suggest(<span> Your <SpellLink id={SPELLS.MOONFIRE_BEAR.id} /> uptime was {formatPercentage(moonfireUptimePercentage)}%, unless you have extended periods of downtime it should be near 100%.</span>)\r\n        .icon(SPELLS.MOONFIRE_BEAR.icon)\r\n        .actual(i18n._(t('druid.guardian.suggestions.moonfire.uptime')`${formatPercentage(moonfireUptimePercentage)}% uptime`))\r\n        .recommended(`${Math.round(formatPercentage(recommended))}% is recommended`)\r\n        .regular(recommended - 0.05).major(recommended - 0.15));\r\n  }\r\n\r\n  statistic() {\r\n    const moonfireUptimePercentage = this.enemies.getBuffUptime(SPELLS.MOONFIRE_BEAR.id) / this.owner.fightDuration;\r\n\r\n    return (\r\n      <StatisticBox\r\n        icon={<SpellIcon id={SPELLS.MOONFIRE_BEAR.id} />}\r\n        value={`${formatPercentage(moonfireUptimePercentage)}%`}\r\n        label=\"Moonfire uptime\"\r\n      />\r\n    );\r\n  }\r\n}\r\n\r\nexport default Moonfire;\r\n","import React from 'react';\r\nimport { formatPercentage } from 'common/format';\r\nimport SpellIcon from 'common/SpellIcon';\r\nimport SpellLink from 'common/SpellLink';\r\nimport StatisticBox, { STATISTIC_ORDER } from 'interface/others/StatisticBox';\r\nimport Analyzer from 'parser/core/Analyzer';\r\nimport SPELLS from 'common/SPELLS';\r\nimport { i18n } from '@lingui/core';\r\nimport { t } from '@lingui/macro';\r\n\r\nclass Pulverize extends Analyzer {\r\n\r\n  statisticOrder = STATISTIC_ORDER.CORE(13);\r\n\r\n  constructor(...args) {\r\n    super(...args);\r\n    this.active = this.selectedCombatant.hasTalent(SPELLS.PULVERIZE_TALENT.id);\r\n  }\r\n\r\n  suggestions(when) {\r\n    const pulverizeUptimePercentage = this.selectedCombatant.getBuffUptime(SPELLS.PULVERIZE_BUFF.id) / this.owner.fightDuration;\r\n\r\n    this.selectedCombatant.hasTalent(SPELLS.PULVERIZE_TALENT.id) &&\r\n    when(pulverizeUptimePercentage).isLessThan(0.9)\r\n      .addSuggestion((suggest, actual, recommended) => suggest(<span> Your <SpellLink id={SPELLS.PULVERIZE_TALENT.id} /> uptime was {formatPercentage(pulverizeUptimePercentage)}%, unless there are extended periods of downtime it should be over should be near 100%. <br />All targets deal less damage to you due to the <SpellLink id={SPELLS.PULVERIZE_BUFF.id} /> buff.</span>)\r\n        .icon(SPELLS.PULVERIZE_TALENT.icon)\r\n        .actual(i18n._(t('druid.guardian.suggestions.pulverize.uptime')`${formatPercentage(pulverizeUptimePercentage)}% uptime`))\r\n        .recommended(`${Math.round(formatPercentage(recommended))}% is recommended`)\r\n        .regular(recommended - 0.1).major(recommended - 0.2));\r\n  }\r\n\r\n  statistic() {\r\n    const pulverizeUptimePercentage = this.selectedCombatant.getBuffUptime(SPELLS.PULVERIZE_BUFF.id) / this.owner.fightDuration;\r\n\r\n    return (\r\n      <StatisticBox\r\n        icon={<SpellIcon id={SPELLS.PULVERIZE_TALENT.id} />}\r\n        value={`${formatPercentage(pulverizeUptimePercentage)}%`}\r\n        label=\"Pulverize uptime\"\r\n      />\r\n    );\r\n  }\r\n}\r\n\r\nexport default Pulverize;\r\n","import React from 'react';\r\n\r\nimport SPELLS from 'common/SPELLS';\r\nimport HIT_TYPES from 'game/HIT_TYPES';\r\nimport Analyzer, { SELECTED_PLAYER } from 'parser/core/Analyzer';\r\nimport AbilityTracker from 'parser/shared/modules/AbilityTracker';\r\nimport DamageTaken from 'parser/shared/modules/throughput/DamageTaken';\r\n\r\nimport StatisticBox from 'interface/others/StatisticBox';\r\nimport SpellIcon from 'common/SpellIcon';\r\nimport SpellLink from 'common/SpellLink';\r\nimport { i18n } from '@lingui/core';\r\nimport { t } from '@lingui/macro';\r\n\r\nimport { formatNumber, formatPercentage } from 'common/format';\r\nimport Events from 'parser/core/Events';\r\n\r\nconst EARTHWARDEN_REDUCTION_MODIFIER = 0.3;\r\n\r\nconst ABILITIES_THAT_CONSUME_EW = [\r\n  SPELLS.MELEE,\r\n  SPELLS.MAGIC_MELEE,\r\n  SPELLS.RECURSIVE_STRIKES_ENEMY,\r\n];\r\n\r\nclass Earthwarden extends Analyzer {\r\n  get hps() {\r\n    const healingDone = this.abilityTracker.getAbility(SPELLS.EARTHWARDEN_BUFF.id).healingEffective;\r\n    const fightLengthSec = this.owner.fightDuration / 1000;\r\n    return healingDone / fightLengthSec;\r\n  }\r\n\r\n  get percentOfSwingsMitigated() {\r\n    return this.swingsMitigated / this.totalSwings;\r\n  }\r\n\r\n  get meleeDamageContribution() {\r\n    const totalDamageTaken = this.damageTaken.total.effective;\r\n    return this.damageFromMelees / totalDamageTaken;\r\n  }\r\n\r\n  get totalMitigation() {\r\n    return this.percentOfSwingsMitigated * this.meleeDamageContribution * EARTHWARDEN_REDUCTION_MODIFIER;\r\n  }\r\n\r\n  static dependencies = {\r\n    abilityTracker: AbilityTracker,\r\n    damageTaken: DamageTaken,\r\n  };\r\n  damageFromMelees = 0;\r\n  swingsMitigated = 0;\r\n  totalSwings = 0;\r\n\r\n  constructor(...args) {\r\n    super(...args);\r\n    this.active = this.selectedCombatant.lv45Talent === SPELLS.EARTHWARDEN_TALENT.id;\r\n    this.addEventListener(Events.damage.to(SELECTED_PLAYER).spell(ABILITIES_THAT_CONSUME_EW), this.onDamage);\r\n    this.addEventListener(Events.damage.by(SELECTED_PLAYER).spell(SPELLS.EARTHWARDEN_BUFF), this.onAbsorbed);\r\n  }\r\n\r\n  onDamage(event) {\r\n    this.damageFromMelees += event.amount + event.absorbed;\r\n\r\n    // Dodged swings and fully absorbed swings should not count towards total swings,\r\n    // since we only care about attacks that EW would have mitigated\r\n    if (event.hitType !== HIT_TYPES.DODGE || event.amount > 0) {\r\n      this.totalSwings += 1;\r\n    }\r\n  }\r\n\r\n  onAbsorbed(event) {\r\n    this.swingsMitigated += 1;\r\n  }\r\n\r\n  statistic() {\r\n    return (\r\n      <StatisticBox\r\n        icon={<SpellIcon id={SPELLS.EARTHWARDEN_BUFF.id} />}\r\n        label=\"Hits mitigated by Earthwarden\"\r\n        value={`${formatPercentage(this.percentOfSwingsMitigated)}%`}\r\n        tooltip={(\r\n          <>\r\n            You mitigated {this.swingsMitigated} out of a possible {this.totalSwings} attacks ({formatPercentage(this.percentOfSwingsMitigated)}%) with Earthwarden. <br /><br />\r\n\r\n            ({formatPercentage(this.totalMitigation)}% of total damage, {formatNumber(this.hps)} HPS)\r\n          </>\r\n        )}\r\n      />\r\n    );\r\n  }\r\n\r\n  suggestions(when) {\r\n    // Suggestion 1: EW stacks are not being generated fast enough\r\n    when(this.percentOfSwingsMitigated).isLessThan(0.6)\r\n      .addSuggestion((suggest, actual, recommended) => suggest(<span><SpellLink id={SPELLS.EARTHWARDEN_TALENT.id} /> is not mitigating enough potential damage to be effective.  This is often caused by stacks being consumed too quickly due to tanking multiple mobs and/or low <SpellLink id={SPELLS.THRASH_BEAR.id} /> casts.  Consider using a different talent if you cannot get better usage from Earthwarden.</span>)\r\n        .icon(SPELLS.EARTHWARDEN_TALENT.icon)\r\n        .actual(i18n._(t('druid.guardian.suggestions.earthwarden.efficiency')`${formatPercentage(actual)}% of potential damage was mitigated by Earthwarden`))\r\n        .recommended(`${formatPercentage(recommended, 0)}% or more is recommended`)\r\n        .regular(recommended - 0.1).major(recommended - 0.2));\r\n\r\n    // Suggestion 2: Melee damage is not relevant enough for EW to be effective\r\n    when(this.meleeDamageContribution).isLessThan(0.4)\r\n      .addSuggestion((suggest, actual, recommended) => suggest(<span>The damage pattern of this encounter makes <SpellLink id={SPELLS.EARTHWARDEN_TALENT.id} /> less effective. Consider using a different talent that will provide more value against non-melee damage.</span>)\r\n        .icon(SPELLS.EARTHWARDEN_TALENT.icon)\r\n        .actual(i18n._(t('druid.guardian.suggestions.earthwarden.notOptimal')`${formatPercentage(actual)}% of total damage is melee attacks`))\r\n        .recommended(`${formatPercentage(recommended, 0)}% or more is recommended`)\r\n        .regular(recommended - 0.05).major(recommended - 0.1));\r\n  }\r\n}\r\n\r\nexport default Earthwarden;\r\n","import Analyzer, { SELECTED_PLAYER } from 'parser/core/Analyzer';\r\nimport SpellUsable from 'parser/shared/modules/SpellUsable';\r\nimport SPELLS from 'common/SPELLS';\r\nimport Events from 'parser/core/Events';\r\n\r\nclass Incarnation extends Analyzer {\r\n  static dependencies = {\r\n    spellUsable: SpellUsable,\r\n  };\r\n\r\n  constructor(options) {\r\n    super(options);\r\n    this.addEventListener(Events.applybuff.by(SELECTED_PLAYER).spell(SPELLS.INCARNATION_GUARDIAN_OF_URSOC_TALENT), this.onApplyBuff);\r\n  }\r\n\r\n  onApplyBuff(event) {\r\n    if (this.spellUsable.isOnCooldown(SPELLS.MANGLE_BEAR.id)) {\r\n      this.spellUsable.endCooldown(SPELLS.MANGLE_BEAR.id);\r\n    }\r\n    if (this.spellUsable.isOnCooldown(SPELLS.THRASH_BEAR.id)) {\r\n      this.spellUsable.endCooldown(SPELLS.THRASH_BEAR.id);\r\n    }\r\n  }\r\n}\r\n\r\nexport default Incarnation;\r\n","import React from 'react';\r\n\r\nimport SPELLS from 'common/SPELLS';\r\nimport { formatPercentage } from 'common/format';\r\nimport SpellLink from 'common/SpellLink';\r\nimport Analyzer, { SELECTED_PLAYER } from 'parser/core/Analyzer';\r\nimport StatTracker from 'parser/shared/modules/StatTracker';\r\nimport Events from 'parser/core/Events';\r\nimport { i18n } from '@lingui/core';\r\nimport { t } from '@lingui/macro';\r\n\r\nconst WILDFLESH_MODIFIER_PER_RANK = 0.05;\r\nconst FR_WINDOW_MS = 5000;\r\nconst FR_MINIMUM_HP_HEAL = 0.05;\r\n\r\nconst HEAL_THRESHOLD = 0.2;\r\nconst HP_THRESHOLD = 0.7;\r\n\r\nclass FrenziedRegeneration extends Analyzer {\r\n  _healModifier = 0.5;\r\n\r\n  get healModifier() {\r\n    return this._healModifier;\r\n  }\r\n\r\n  get charges() {\r\n    return this._charges;\r\n  }\r\n\r\n  // and the target is above 70% HP at the time of the cast.\r\n  get inefficientCasts() {\r\n    return this.castData.filter(cast => cast.percentHeal <= HEAL_THRESHOLD && cast.percentHP >= HP_THRESHOLD);\r\n  }\r\n\r\n  static dependencies = {\r\n    statTracker: StatTracker,\r\n  };\r\n  castData = [];\r\n  damageEventsInWindow = [];\r\n\r\n  constructor(...args) {\r\n    super(...args);\r\n    const player = this.selectedCombatant;\r\n    const wildfleshRank = player.traitsBySpellId[SPELLS.WILDFLESH_TRAIT.id];\r\n    const versModifier = this.statTracker.currentVersatilityPercentage;\r\n\r\n    this._healModifier += (wildfleshRank * WILDFLESH_MODIFIER_PER_RANK);\r\n    this._healModifier += versModifier; // TODO: Account for Haste buffs by asking the actual value on each event instead of in here\r\n    this.addEventListener(Events.cast.by(SELECTED_PLAYER).spell(SPELLS.FRENZIED_REGENERATION), this.onCast);\r\n    this.addEventListener(Events.cast.to(SELECTED_PLAYER), this.onDamage);\r\n  }\r\n\r\n  pruneDamageEvents(currentTimestamp) {\r\n    // Remove old damage events that occurred outside the FR window\r\n    while (this.damageEventsInWindow.length && this.damageEventsInWindow[0].timestamp + FR_WINDOW_MS < currentTimestamp) {\r\n      this.damageEventsInWindow.shift();\r\n    }\r\n  }\r\n\r\n  onCast(event) {\r\n    const percentHP = event.hitPoints / event.maxHitPoints;\r\n    // Minimum heal\r\n    let percentHeal = FR_MINIMUM_HP_HEAL;\r\n\r\n    this.pruneDamageEvents(event.timestamp);\r\n    const damageTakenInWindow = this.damageEventsInWindow.reduce((total, event) => total + event.damage, 0);\r\n\r\n    // TODO: is event ordering consistent here? (this cast event needs to happen before GoE removebuff)\r\n    const goeModifier = this.selectedCombatant.hasBuff(SPELLS.GUARDIAN_OF_ELUNE.id) ? 1.2 : 1;\r\n\r\n    const healAmount = damageTakenInWindow * this.healModifier * goeModifier;\r\n    const healAsPercentHP = healAmount / event.maxHitPoints;\r\n\r\n    if (healAsPercentHP > percentHeal) {\r\n      percentHeal = healAsPercentHP;\r\n    }\r\n\r\n    this.castData.push({\r\n      percentHP,\r\n      percentHeal,\r\n      actualHeal: healAmount,\r\n    });\r\n  }\r\n\r\n  // A cast is considered inefficient if the expected heal is less than 20% of max HP,\r\n\r\n  onDamage(event) {\r\n    this.damageEventsInWindow.push({\r\n      timestamp: event.timestamp,\r\n      damage: event.amount + event.absorbed,\r\n    });\r\n  }\r\n\r\n  suggestions(when) {\r\n    const inefficiency = this.inefficientCasts.length / this.castData.length;\r\n    when(inefficiency).isGreaterThan(0)\r\n      .addSuggestion((suggest, actual, recommended) => suggest(\r\n        <>\r\n          You are casting <SpellLink id={SPELLS.FRENZIED_REGENERATION.id} /> inefficiently (at high HP and after low damage intake). It is almost always better to wait until after you have taken a big hit to cast it, even if that means spending extended periods of time at maximum charges. If you don't already have one, consider getting an FR prediction weakaura to assist you in casting it more effectively.\r\n        </>,\r\n      )\r\n        .icon(SPELLS.FRENZIED_REGENERATION.icon)\r\n        .actual(i18n._(t('druid.guardian.suggestions.frenziedRegeneration.efficiency')`${formatPercentage(actual, 0)}% of casts had a predicted heal of less than ${formatPercentage(HEAL_THRESHOLD, 0)}% and were cast above ${formatPercentage(HP_THRESHOLD, 0)}% HP`))\r\n        .recommended(`${recommended}% is recommended`)\r\n        .regular(recommended + 0.05).major(recommended + 0.1));\r\n  }\r\n}\r\n\r\nexport default FrenziedRegeneration;\r\n","import CoreCombatLogParser from 'parser/core/CombatLogParser';\r\nimport AbilityTracker from 'parser/shared/modules/AbilityTracker';\r\n\r\nimport Abilities from './modules/Abilities';\r\nimport ActiveTargets from './modules/features/ActiveTargets';\r\nimport Gore from './modules/features/Gore';\r\nimport GalacticGuardian from './modules/features/GalacticGuardian';\r\nimport GuardianOfElune from './modules/features/GuardianOfElune';\r\nimport IronFurGoEProcs from './modules/features/IronFurGoEProcs';\r\nimport FrenziedRegenGoEProcs from './modules/features/FrenziedRegenGoEProcs';\r\nimport RageWasted from './modules/features/RageWasted';\r\nimport AntiFillerSpam from './modules/features/AntiFillerSpam';\r\nimport MitigationCheck from './modules/features/MitigationCheck';\r\n\r\nimport IronFur from './modules/spells/IronFur';\r\nimport Thrash from './modules/spells/Thrash';\r\nimport Moonfire from './modules/spells/Moonfire';\r\nimport Pulverize from './modules/spells/Pulverize';\r\nimport Earthwarden from './modules/talents/Earthwarden';\r\nimport Incarnation from './modules/talents/Incarnation';\r\nimport FrenziedRegeneration from './modules/spells/FrenziedRegeneration';\r\n\r\nclass CombatLogParser extends CoreCombatLogParser {\r\n  static specModules = {\r\n    // Core\r\n    abilityTracker: AbilityTracker,\r\n    abilities: Abilities,\r\n    mitigationCheck: MitigationCheck,\r\n\r\n    // Features\r\n    activeTargets: ActiveTargets,\r\n    goreProcs: Gore,\r\n    galacticGuardianProcs: GalacticGuardian,\r\n    guardianOfEluneProcs: GuardianOfElune,\r\n    ironFurGoEProcs: IronFurGoEProcs,\r\n    frenziedRegenGoEProcs: FrenziedRegenGoEProcs,\r\n    rageWasted: RageWasted,\r\n    antiFillerSpam: AntiFillerSpam,\r\n\r\n    ironFur: IronFur,\r\n    thrash: Thrash,\r\n    moonfire: Moonfire,\r\n    pulverize: Pulverize,\r\n    frenziedRegeneration: FrenziedRegeneration,\r\n\r\n    // Talents:\r\n    earthwarden: Earthwarden,\r\n    incarnation: Incarnation,\r\n  };\r\n}\r\n\r\nexport default CombatLogParser;\r\n","import React from 'react';\r\n\r\nimport Analyzer, { SELECTED_PLAYER } from 'parser/core/Analyzer';\r\nimport SPELLS from 'common/SPELLS/index';\r\nimport SpellIcon from 'common/SpellIcon';\r\nimport { formatNumber, formatPercentage } from 'common/format';\r\n\r\nimport SpellLink from 'common/SpellLink';\r\nimport Enemies from 'parser/shared/modules/Enemies';\r\n\r\nimport { findByBossId } from 'raids';\r\nimport StatisticBox from 'interface/others/StatisticBox';\r\nimport HIT_TYPES from 'game/HIT_TYPES';\r\nimport MAGIC_SCHOOLS from 'game/MAGIC_SCHOOLS';\r\nimport Events from 'parser/core/Events';\r\n\r\nconst debug = false;\r\n\r\nclass MitigationCheck extends Analyzer {\r\n  static dependencies = {\r\n    enemies: Enemies,\r\n  };\r\n\r\n  checksPassedMap = new Map();\r\n  checksFailedMap = new Map();\r\n\r\n  checksPhysical = [];\r\n  checksMagical = [];\r\n\r\n  buffCheckPhysical = [];\r\n  buffCheckMagical = [];\r\n  buffCheckPhysAndMag = [];\r\n\r\n  debuffCheckPhysical = [];\r\n  debuffCheckMagical = [];\r\n  debuffCheckPhysAndMag = [];\r\n\r\n  constructor(...args) {\r\n    super(...args);\r\n    if (this.owner.boss == null) {\r\n      this.active = false;\r\n      return;\r\n    }\r\n    const boss = findByBossId(this.owner.boss.id);\r\n    if (\r\n      boss.fight.softMitigationChecks &&\r\n      boss.fight.softMitigationChecks.physical &&\r\n      boss.fight.softMitigationChecks.magical\r\n    ) {\r\n      this.checksPhysical = boss.fight.softMitigationChecks.physical;\r\n      this.checksMagical = boss.fight.softMitigationChecks.magical;\r\n      if (this.checksPhysical === undefined || this.checksMagical === undefined) {\r\n        this.checksPhysical = [];\r\n        this.checksMagical = [];\r\n      }\r\n    } else {\r\n      this.checksPhysical = [];\r\n      this.checksMagical = [];\r\n\r\n      this.buffCheckPhysical = [];\r\n      this.buffCheckMagical = [];\r\n      this.buffCheckPhysAndMag = [];\r\n\r\n      this.debuffCheckPhysical = [];\r\n      this.debuffCheckMagical = [];\r\n      this.debuffCheckPhysAndMag = [];\r\n    }\r\n    [...this.checksPhysical, ...this.checksMagical].forEach((e) => {\r\n      this.checksPassedMap.set(e, 0);\r\n      this.checksFailedMap.set(e, 0);\r\n    });\r\n    this.addEventListener(Events.damage.to(SELECTED_PLAYER), this.onDamageTaken);\r\n  }\r\n\r\n  onDamageTaken(event) {\r\n    const spell = event.ability.guid;\r\n    const hitType = event.ability.type;\r\n    let checks = [];\r\n    let buffCheck = [];\r\n    let debuffCheck = [];\r\n    if (hitType === MAGIC_SCHOOLS.ids.PHYSICAL) {\r\n      checks = this.checksPhysical;\r\n      buffCheck = [...this.buffCheckPhysical, ...this.buffCheckPhysAndMag];\r\n      debuffCheck = [...this.debuffCheckPhysical, ...this.debuffCheckPhysAndMag];\r\n    } else {\r\n      checks = this.checksMagical;\r\n      buffCheck = [...this.buffCheckMagical, ...this.buffCheckPhysAndMag];\r\n      debuffCheck = [...this.debuffCheckMagical, ...this.debuffCheckPhysAndMag];\r\n    }\r\n    if (checks.includes(spell) && !event.tick) {\r\n      debug && console.log(buffCheck);\r\n      debug && console.log(debuffCheck);\r\n      if (\r\n        buffCheck.some((e) => this.selectedCombatant.hasBuff(e)) ||\r\n        event.hitType === HIT_TYPES.IMMUNE\r\n      ) {\r\n        // pass checked if buff was up or the damage missed\r\n        this.checksPassedMap.set(spell, this.checksPassedMap.get(spell) + 1);\r\n      } else {\r\n        const enemy = this.enemies.getEntities()[event.sourceID];\r\n        //We want to get the source rather than the player's target, so no getEntity().\r\n        if (enemy && debuffCheck.some((e) => enemy.hasBuff(e, event.timestamp))) {\r\n          this.checksPassedMap.set(spell, this.checksPassedMap.get(spell) + 1);\r\n        } else {\r\n          this.checksFailedMap.set(spell, this.checksFailedMap.get(spell) + 1);\r\n        }\r\n      }\r\n    }\r\n  }\r\n\r\n  get tooltip() {\r\n    return [\r\n      ...this.buffCheckPhysical,\r\n      ...this.buffCheckMagical,\r\n      ...this.buffCheckPhysAndMag,\r\n      ...this.debuffCheckPhysical,\r\n      ...this.debuffCheckMagical,\r\n      ...this.debuffCheckPhysAndMag,\r\n    ].map((id) => <li key={id}>{SPELLS[id].name}</li>);\r\n  }\r\n\r\n  get physicalChecks() {\r\n    return this.checksPhysical.filter(\r\n      (spell) => this.checksPassedMap.get(spell) + this.checksFailedMap.get(spell) > 0,\r\n    );\r\n  }\r\n\r\n  get magicalChecks() {\r\n    return this.checksMagical.filter(\r\n      (spell) => this.checksPassedMap.get(spell) + this.checksFailedMap.get(spell) > 0,\r\n    );\r\n  }\r\n\r\n  statistic() {\r\n    const failSum = Array.from(this.checksFailedMap.values()).reduce(\r\n      (total, val) => total + val,\r\n      0,\r\n    );\r\n    const passSum = Array.from(this.checksPassedMap.values()).reduce(\r\n      (total, val) => total + val,\r\n      0,\r\n    );\r\n    if (failSum + passSum === 0) {\r\n      return null;\r\n    }\r\n    const buffCheck = [\r\n      ...this.buffCheckPhysical,\r\n      ...this.buffCheckMagical,\r\n      ...this.buffCheckPhysAndMag,\r\n    ];\r\n    let spellIconId;\r\n    if (buffCheck.length > 0) {\r\n      spellIconId = buffCheck[0];\r\n    } else {\r\n      spellIconId = SPELLS.SHIELD_BLOCK_BUFF.id;\r\n    }\r\n\r\n    const physicalTable =\r\n      this.physicalChecks.length > 0 ? (\r\n        <>\r\n          <thead>\r\n            <tr>\r\n              <th>Physical</th>\r\n              <th>Ability</th>\r\n              <th>Passed</th>\r\n              <th>Failed</th>\r\n            </tr>\r\n          </thead>\r\n          <tbody>\r\n            {this.physicalChecks.map((spell) => (\r\n              <tr key={spell}>\r\n                <td />\r\n                <th scope=\"row\">\r\n                  <SpellLink id={spell} style={{ height: '2.5em' }} />\r\n                </th>\r\n                <td>{formatNumber(this.checksPassedMap.get(spell))}</td>\r\n                <td>{formatNumber(this.checksFailedMap.get(spell))}</td>\r\n              </tr>\r\n            ))}\r\n          </tbody>\r\n        </>\r\n      ) : null;\r\n\r\n    const borderless = { borderTop: 'none' };\r\n    const magicalTable =\r\n      this.magicalChecks.length > 0 ? (\r\n        <>\r\n          <thead>\r\n            <tr>\r\n              <th style={borderless}>Magical</th>\r\n              <th style={borderless}>Ability</th>\r\n              <th style={borderless}>Passed</th>\r\n              <th style={borderless}>Failed</th>\r\n            </tr>\r\n          </thead>\r\n          <tbody>\r\n            {this.magicalChecks.map((spell) => (\r\n              <tr key={spell}>\r\n                <td />\r\n                <th scope=\"row\">\r\n                  <SpellLink id={spell} style={{ height: '2.5em' }} />\r\n                </th>\r\n                <td>{formatNumber(this.checksPassedMap.get(spell))}</td>\r\n                <td>{formatNumber(this.checksFailedMap.get(spell))}</td>\r\n              </tr>\r\n            ))}\r\n          </tbody>\r\n        </>\r\n      ) : null;\r\n\r\n    return (\r\n      <StatisticBox\r\n        icon={<SpellIcon id={spellIconId} />}\r\n        value={`${formatPercentage(passSum / (passSum + failSum))} %`}\r\n        label=\"Soft mitigation checks passed.\"\r\n        tooltip={\r\n          <>\r\n            Checks if one of the following buffs or debuffs were up during the mechanic:\r\n            <ul>{this.tooltip}</ul>\r\n          </>\r\n        }\r\n      >\r\n        <table className=\"table table-condensed\" style={{ fontWeight: 'bold' }}>\r\n          {physicalTable}\r\n          {magicalTable}\r\n        </table>\r\n      </StatisticBox>\r\n    );\r\n  }\r\n}\r\n\r\nexport default MitigationCheck;\r\n"],"sourceRoot":""}