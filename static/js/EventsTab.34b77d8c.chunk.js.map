{"version":3,"sources":["interface/others/EventsTab.js","game/HIT_TYPES.ts"],"names":["FILTERABLE_TYPES","damage","name","heal","healabsorbed","explanation","absorbed","begincast","cast","applybuff","removebuff","applybuffstack","removebuffstack","refreshbuff","applydebuff","removedebuff","applydebuffstack","removedebuffstack","refreshdebuff","summon","combatantinfo","energize","interrupt","death","resurrect","dispel","EventsTab","state","Object","keys","reduce","obj","type","rawNames","showFabricated","search","handleRowClick","bind","toggleAllOff","id","friendly","this","props","parser","report","friendlies","find","enemy","enemies","pet","playerPets","entity","className","ability","spellId","guid","icon","abilityIcon","eventTypeName","undefined","renderToggle","prop","label","key","htmlFor","style","padding","content","fontSize","checked","icons","onChange","event","setState","target","rowData","defaultTableRowRenderer","__modified","__fabricated","console","log","value","trim","toLowerCase","placeholder","autoCorrect","autoCapitalize","spellCheck","regex","searchTerms","match","map","m","replace","events","eventHistory","filter","length","source","findEntity","sourceID","targetID","some","searchTerm","includes","renderSearchBox","renderEventTypeToggle","paddingLeft","onClick","toggleAllFiltersOff","width","background","paddingTop","disableHeight","height","headerHeight","rowCount","rowGetter","index","rowHeight","rowRenderer","renderRow","onRowClick","dataKey","cellRenderer","cellData","formatDuration","fight","start_time","offset_time","disableSort","flexGrow","renderEntity","renderAbility","EventType","Damage","hitType","HIT_TYPES","CRIT","BLOCKED_CRIT","formatThousands","amount","src","alt","Heal","Absorbed","ApplyBuff","absorb","Energize","resource","RESOURCE_TYPES","resourceChangeType","url","resourceChange","waste","blocked","overheal","React","Component","MISS","NORMAL","ABSORB","BLOCKED_NORMAL","DODGE","PARRY","IMMUNE"],"mappings":"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","file":"static/js/EventsTab.34b77d8c.chunk.js","sourcesContent":["import React from 'react';\r\nimport PropTypes from 'prop-types';\r\nimport AutoSizer from 'react-virtualized/dist/commonjs/AutoSizer';\r\nimport Table, { defaultRowRenderer as defaultTableRowRenderer, Column } from 'react-virtualized/dist/commonjs/Table';\r\nimport Toggle from 'react-toggle';\r\nimport 'react-toggle/style.css';\r\n\r\nimport InformationIcon from 'interface/icons/Information';\r\n\r\nimport { formatDuration, formatThousands } from 'common/format';\r\nimport Icon from 'common/Icon';\r\nimport SpellLink from 'common/SpellLink';\r\nimport RESOURCE_TYPES from 'game/RESOURCE_TYPES';\r\nimport HIT_TYPES from 'game/HIT_TYPES';\r\nimport Tooltip, { TooltipElement } from 'common/Tooltip';\r\nimport { EventType } from 'parser/core/Events';\r\n\r\nimport 'react-virtualized/styles.css';\r\nimport './EventsTab.css';\r\n\r\nconst FILTERABLE_TYPES = {\r\n  damage: {\r\n    name: 'Damage',\r\n  },\r\n  heal: {\r\n    name: 'Heal',\r\n  },\r\n  healabsorbed: {\r\n    name: 'Heal Absorbed',\r\n    explanation: 'Triggered in addition to the regular heal event whenever a heal is absorbed. Can be used to determine what buff or debuff was absorbing the healing. This should only be used if you need to know which ability soaked the healing.',\r\n  },\r\n  absorbed: {\r\n    name: 'Absorb',\r\n    explanation: 'Triggered whenever an absorb effect absorbs damage. These are friendly shields to avoid damage and NOT healing absorption shields.',\r\n  },\r\n  begincast: {\r\n    name: 'Begin Cast',\r\n  },\r\n  cast: {\r\n    name: 'Cast Success',\r\n    explanation: 'Triggered whenever a cast was successful. Blizzard also sometimes uses this event type for mechanics and spell ticks or bolts.',\r\n  },\r\n  applybuff: {\r\n    name: 'Buff Apply',\r\n  },\r\n  removebuff: {\r\n    name: 'Buff Remove',\r\n  },\r\n  applybuffstack: {\r\n    name: 'Buff Stack Gained',\r\n  },\r\n  removebuffstack: {\r\n    name: 'Buff Stack Lost',\r\n  },\r\n  refreshbuff: {\r\n    name: 'Buff Refresh',\r\n  },\r\n  applydebuff: {\r\n    name: 'Debuff Apply',\r\n  },\r\n  removedebuff: {\r\n    name: 'Debuff Remove',\r\n  },\r\n  applydebuffstack: {\r\n    name: 'Debuff Stack Gained',\r\n  },\r\n  removedebuffstack: {\r\n    name: 'Debuff Stack Lost',\r\n  },\r\n  refreshdebuff: {\r\n    name: 'Debuff Refresh',\r\n  },\r\n  summon: {\r\n    name: 'Summon',\r\n  },\r\n  combatantinfo: {\r\n    name: 'Player Info',\r\n    explanation: 'Triggered at the start of the fight with advanced combat logging on. This includes gear, talents, etc.',\r\n  },\r\n  energize: {\r\n    name: 'Energize',\r\n  },\r\n  interrupt: {\r\n    name: 'Interrupt',\r\n  },\r\n  death: {\r\n    name: 'Death',\r\n  },\r\n  resurrect: {\r\n    name: 'Resurrect',\r\n  },\r\n  dispel: {\r\n    name: 'Dispel',\r\n  },\r\n};\r\n\r\nclass EventsTab extends React.Component {\r\n  static propTypes = {\r\n    parser: PropTypes.object.isRequired,\r\n  };\r\n\r\n  constructor() {\r\n    super();\r\n    this.state = {\r\n      ...Object.keys(FILTERABLE_TYPES).reduce((obj, type) => {\r\n        obj[type] = true;\r\n        return obj;\r\n      }, {}),\r\n      rawNames: false,\r\n      showFabricated: false,\r\n      search: '',\r\n    };\r\n    this.handleRowClick = this.handleRowClick.bind(this);\r\n    this.toggleAllOff = Object.keys(FILTERABLE_TYPES).reduce((obj, type) => {\r\n      obj[type] = false;\r\n      return obj;\r\n    }, {});\r\n  }\r\n\r\n  findEntity(id) {\r\n    const friendly = this.props.parser.report.friendlies.find(friendly => friendly.id === id);\r\n    if (friendly) {\r\n      return friendly;\r\n    }\r\n    const enemy = this.props.parser.report.enemies.find(enemy => enemy.id === id);\r\n    if (enemy) {\r\n      return enemy;\r\n    }\r\n    const pet = this.props.parser.playerPets.find(pet => pet.id === id);\r\n    if (pet) {\r\n      return pet;\r\n    }\r\n    return null;\r\n  }\r\n\r\n  renderEntity(entity) {\r\n    if (!entity) {\r\n      return null;\r\n    }\r\n    return <span className={entity.type}>{entity.name}</span>;\r\n  }\r\n\r\n  renderAbility(ability) {\r\n    if (!ability) {\r\n      return null;\r\n    }\r\n    const spellId = ability.guid;\r\n\r\n    return (\r\n      <SpellLink id={spellId} icon={false}>\r\n        {ability.abilityIcon && <Icon icon={ability.abilityIcon} />} {ability.name}\r\n      </SpellLink>\r\n    );\r\n  }\r\n\r\n  eventTypeName(type) {\r\n    return this.state.rawNames ? type : (FILTERABLE_TYPES[type] ? FILTERABLE_TYPES[type].name : type);\r\n  }\r\n\r\n  renderEventTypeToggle(type) {\r\n    const name = this.eventTypeName(type);\r\n    const explanation = FILTERABLE_TYPES[type] ? FILTERABLE_TYPES[type].explanation : undefined;\r\n    return this.renderToggle(type, name, explanation);\r\n  }\r\n\r\n  renderToggle(prop, label, explanation = null) {\r\n    return (\r\n      <div key={prop} className=\"flex toggle-control\">\r\n        <label className=\"flex-main\" htmlFor={`${prop}-toggle`}>\r\n          {label}\r\n        </label>\r\n        {explanation && (\r\n          <div className=\"flex-sub\" style={{ padding: '0 10px' }}>\r\n            <Tooltip content={explanation}>\r\n              <div>\r\n                <InformationIcon style={{ fontSize: '1.4em' }} />\r\n              </div>\r\n            </Tooltip>\r\n          </div>\r\n        )}\r\n        <Toggle\r\n          checked={this.state[prop]}\r\n          icons={false}\r\n          onChange={event => this.setState({ [prop]: event.target.checked })}\r\n          id={`${prop}-toggle`}\r\n          className=\"flex-sub\"\r\n        />\r\n      </div>\r\n    );\r\n  }\r\n\r\n  renderRow(props) {\r\n    const event = props.rowData;\r\n    return defaultTableRowRenderer({\r\n      ...props,\r\n      className: `${props.className} ${event.__modified ? 'modified' : ''} ${event.__fabricated ? 'fabricated' : ''}`,\r\n    });\r\n  }\r\n\r\n  handleRowClick({ rowData }) {\r\n    console.log(rowData);\r\n  }\r\n\r\n  toggleAllFiltersOff() {\r\n    this.setState(this.toggleAllOff);\r\n  }\r\n\r\n  renderSearchBox() {\r\n    return (\r\n      <input\r\n        type=\"text\"\r\n        name=\"search\"\r\n        className=\"form-control\"\r\n        onChange={event => this.setState({ search: event.target.value.trim().toLowerCase() })}\r\n        placeholder=\"Search events\"\r\n        autoCorrect=\"off\"\r\n        autoCapitalize=\"off\"\r\n        spellCheck=\"false\"\r\n      />\r\n    );\r\n  }\r\n\r\n  render() {\r\n    const { parser } = this.props;\r\n\r\n    const regex = /\"([^\"]*)\"|(\\S+)/g;\r\n    const searchTerms = (this.state.search.match(regex) || []).map(m => m.replace(regex, '$1$2'));\r\n\r\n    const events = parser.eventHistory\r\n      .filter(event => {\r\n        if (this.state[event.type] === false) {\r\n          return false;\r\n        }\r\n        if (!this.state.showFabricated && event.__fabricated === true) {\r\n          return false;\r\n        }\r\n\r\n        // Search Logic\r\n        if (searchTerms.length === 0) {\r\n          return true;\r\n        }\r\n\r\n        const source = this.findEntity(event.sourceID);\r\n        const target = this.findEntity(event.targetID);\r\n\r\n        return searchTerms.some(searchTerm => {\r\n          if (event.ability !== undefined) {\r\n            // noinspection EqualityComparisonWithCoercionJS\r\n            if (event.ability.guid == searchTerm) { // eslint-disable-line eqeqeq\r\n              return true;\r\n            } else if (event.ability.name && event.ability.name.toLowerCase().includes(searchTerm)) {\r\n              return true;\r\n            }\r\n          }\r\n          if (source !== null && source.name.toLowerCase().includes(searchTerm)) {\r\n            return true;\r\n          }\r\n          if (target !== null && target.name.toLowerCase().includes(searchTerm)) {\r\n            return true;\r\n          }\r\n          if (event.type !== null && event.type.toLowerCase().includes(searchTerm)) {\r\n            return true;\r\n          }\r\n          return false;\r\n        });\r\n      });\r\n\r\n    // TODO: Show active buffs like WCL\r\n\r\n    return (\r\n      <div className=\"panel\">\r\n        <div className=\"panel-heading\">\r\n          <h1>Events</h1>\r\n          <small>\r\n            This only includes events involving the selected player.\r\n          </small>\r\n        </div>\r\n        <div className=\"panel-body events-tab flex\">\r\n          <div className=\"flex-sub config\" style={{ padding: '0 15px' }}>\r\n            {this.renderSearchBox()}\r\n            <br />\r\n            {Object.keys(FILTERABLE_TYPES).map(type => this.renderEventTypeToggle(type))}\r\n            <br />\r\n            <div className=\"flex\" style={{ paddingLeft: 5 }}>\r\n              <button className=\"btn btn-link\" onClick={() => this.toggleAllFiltersOff()}>\r\n                Toggle off all filters\r\n              </button>\r\n            </div>\r\n            <br />\r\n            {this.renderToggle('showFabricated', 'Fabricated events', 'These events were not originally found in the combatlog. They were created by us to fix bugs, inconsistencies, or to provide new functionality. You can recognize these events by their green background.')}\r\n            {this.renderToggle('rawNames', 'Raw names')}\r\n            <br />\r\n            <div className=\"modified-legend\" style={{ width: 240, padding: 10 }}>\r\n              Events with an orange background were <TooltipElement content=\"This generally means their order was changed from the original combatlog to fix inconsistencies or bugs, but it may include other modifications.\">modified</TooltipElement>.\r\n            </div>\r\n          </div>\r\n          <div className=\"flex-main\" style={{ background: 'hsla(44, 1%, 8%, 0.5)', paddingTop: 10 }}>\r\n            <AutoSizer disableHeight>\r\n              {({ height, width }) => (\r\n                <Table\r\n                  headerHeight={30}\r\n                  height={780}\r\n                  rowCount={events.length}\r\n                  rowGetter={({ index }) => events[index]}\r\n                  rowHeight={25}\r\n                  rowRenderer={this.renderRow}\r\n                  onRowClick={this.handleRowClick}\r\n                  width={width}\r\n                >\r\n                  <Column\r\n                    dataKey=\"timestamp\"\r\n                    label=\"Time\"\r\n                    cellRenderer={({ cellData }) => formatDuration((cellData - parser.fight.start_time + parser.fight.offset_time) / 1000, 3)}\r\n                    disableSort\r\n                    width={30}\r\n                    flexGrow={1}\r\n                  />\r\n                  <Column\r\n                    dataKey=\"type\"\r\n                    label=\"Event\"\r\n                    cellRenderer={({ cellData }) => <div className={cellData}>{this.eventTypeName(cellData)}</div>}\r\n                    disableSort\r\n                    width={50}\r\n                    flexGrow={1}\r\n                  />\r\n                  <Column\r\n                    dataKey=\"sourceID\"\r\n                    label=\"Source\"\r\n                    cellRenderer={({ cellData }) => this.renderEntity(this.findEntity(cellData))}\r\n                    disableSort\r\n                    width={50}\r\n                    flexGrow={1}\r\n                  />\r\n                  <Column\r\n                    dataKey=\"targetID\"\r\n                    label=\"Target\"\r\n                    cellRenderer={({ cellData }) => this.renderEntity(this.findEntity(cellData))}\r\n                    disableSort\r\n                    width={50}\r\n                    flexGrow={1}\r\n                  />\r\n                  <Column\r\n                    dataKey=\"ability\"\r\n                    label=\"Ability\"\r\n                    cellRenderer={({ cellData }) => this.renderAbility(cellData)}\r\n                    disableSort\r\n                    width={90}\r\n                    flexGrow={1}\r\n                  />\r\n                  <Column\r\n                    dataKey=\"effective\"\r\n                    label=\"Effective\"\r\n                    className=\"effect\"\r\n                    cellRenderer={({ rowData }) => {\r\n                      if (rowData.type === EventType.Damage) {\r\n                        return (\r\n                          <>\r\n                            <span className={`${rowData.type} ${rowData.hitType === HIT_TYPES.CRIT || rowData.hitType === HIT_TYPES.BLOCKED_CRIT ? 'crit' : ''}`}>\r\n                              {formatThousands(rowData.amount)}\r\n                            </span>{' '}\r\n                            {rowData.absorbed ? <span className=\"absorbed\">A: {formatThousands(rowData.absorbed)}</span> : null}{' '}\r\n                            <img\r\n                              src=\"/img/sword.png\"\r\n                              alt=\"Damage\"\r\n                              className=\"icon\"\r\n                            />\r\n                          </>\r\n                        );\r\n                      }\r\n                      if (rowData.type === EventType.Heal) {\r\n                        return (\r\n                          <>\r\n                            <span className={`${rowData.type} ${rowData.hitType === HIT_TYPES.CRIT || rowData.hitType === HIT_TYPES.BLOCKED_CRIT ? 'crit' : ''}`}>\r\n                              {formatThousands(rowData.amount)}\r\n                            </span>{' '}\r\n                            {rowData.absorbed ? <span className=\"absorbed\">A: {formatThousands(rowData.absorbed)}</span> : null}{' '}\r\n                            <img\r\n                              src=\"/img/healing.png\"\r\n                              alt=\"Healing\"\r\n                              className=\"icon\"\r\n                            />\r\n                          </>\r\n                        );\r\n                      }\r\n                      if (rowData.type === EventType.Absorbed) {\r\n                        return (\r\n                          <>\r\n                            <span className={rowData.type}>\r\n                              {formatThousands(rowData.amount)}\r\n                            </span>{' '}\r\n                            <img\r\n                              src=\"/img/absorbed.png\"\r\n                              alt=\"Absorbed\"\r\n                              className=\"icon\"\r\n                            />\r\n                          </>\r\n                        );\r\n                      }\r\n                      if (rowData.type === EventType.ApplyBuff && rowData.absorb !== undefined) {\r\n                        return (\r\n                          <>\r\n                            Applied an absorb of{' '}\r\n                            <span className=\"absorbed\">\r\n                              {formatThousands(rowData.absorb)}\r\n                            </span>{' '}\r\n                            <img\r\n                              src=\"/img/absorbed.png\"\r\n                              alt=\"Absorbed\"\r\n                              className=\"icon\"\r\n                            />\r\n                          </>\r\n                        );\r\n                      }\r\n                      if (rowData.type === EventType.Energize) {\r\n                        const resource = RESOURCE_TYPES[rowData.resourceChangeType];\r\n                        if (resource) {\r\n                          return (\r\n                            <>\r\n                              <span className={resource.url}>\r\n                                {formatThousands(rowData.resourceChange - rowData.waste)} {resource.name}\r\n                              </span>{' '}\r\n                              {resource.icon && <Icon icon={resource.icon} alt={resource.name} />}\r\n                            </>\r\n                          );\r\n                        }\r\n                      }\r\n                      return null;\r\n                    }}\r\n                    disableSort\r\n                    width={60}\r\n                    flexGrow={1}\r\n                  />\r\n                  <Column\r\n                    dataKey=\"rest\"\r\n                    label=\"Rest\"\r\n                    className=\"effect\"\r\n                    cellRenderer={({ rowData }) => {\r\n                      if (rowData.type === EventType.Damage) {\r\n                        return (\r\n                          <span className={rowData.type}>\r\n                            {rowData.blocked ? <span className=\"overheal\">B: {formatThousands(rowData.blocked)}</span> : null}\r\n                          </span>\r\n                        );\r\n                      }\r\n                      if (rowData.type === EventType.Heal) {\r\n                        return (\r\n                          <span className={rowData.type}>\r\n                            {rowData.overheal ? <span className=\"overheal\">O: {formatThousands(rowData.overheal)}</span> : null}\r\n                          </span>\r\n                        );\r\n                      }\r\n                      if (rowData.type === EventType.Energize) {\r\n                        const resource = RESOURCE_TYPES[rowData.resourceChangeType];\r\n                        if (resource) {\r\n                          return (\r\n                            <>\r\n                              <span className={resource.url}>\r\n                                {rowData.waste > 0 ? `${formatThousands(rowData.waste)} wasted` : ''}\r\n                              </span>\r\n                            </>\r\n                          );\r\n                        }\r\n                      }\r\n                      return null;\r\n                    }}\r\n                    disableSort\r\n                    width={35}\r\n                    flexGrow={1}\r\n                  />\r\n                </Table>\r\n              )}\r\n            </AutoSizer>\r\n          </div>\r\n        </div>\r\n      </div>\r\n    );\r\n  }\r\n}\r\n\r\nexport default EventsTab;\r\n","const HIT_TYPES: {\r\n  [key: string]: number;\r\n} = {\r\n  MISS: 0,\r\n  NORMAL: 1,\r\n  CRIT: 2,\r\n  ABSORB: 3, // seen at Aura of Sacrifice + Absorbed hits that cause atonement\r\n  BLOCKED_NORMAL: 4,\r\n  BLOCKED_CRIT: 5,\r\n  DODGE: 7,\r\n  PARRY: 8,\r\n  IMMUNE: 10,\r\n};\r\nexport default HIT_TYPES;\r\n"],"sourceRoot":""}