{"version":3,"sources":["parser/mage/fire/normalizers/Flamestrike.ts","parser/mage/fire/normalizers/Combustion.ts","parser/mage/fire/normalizers/Scorch.ts","parser/mage/fire/normalizers/PyroclasmBuff.ts","parser/mage/fire/modules/features/CombustionCharges.tsx","parser/mage/fire/modules/features/CombustionFirestarter.tsx","parser/mage/fire/modules/features/CombustionSpellUsage.tsx","parser/mage/fire/modules/features/HeatingUp.tsx","parser/mage/fire/modules/features/HotStreakPreCasts.tsx","parser/mage/fire/modules/features/HotStreak.tsx","parser/mage/fire/modules/features/HotStreakWastedCrits.tsx","parser/mage/fire/modules/features/Pyroclasm.tsx","parser/mage/fire/modules/talents/SearingTouch.tsx","parser/mage/fire/modules/talents/MeteorRune.tsx","parser/mage/fire/modules/talents/MeteorCombustion.tsx","parser/mage/fire/modules/talents/Meteor.tsx","parser/mage/fire/modules/features/AlwaysBeCasting.tsx","parser/mage/fire/modules/Checklist/Component.tsx","parser/mage/fire/modules/Checklist/Module.tsx","parser/mage/fire/modules/features/Buffs.tsx","parser/mage/fire/modules/features/Abilities.tsx","parser/mage/fire/modules/features/CooldownThroughputTracker.js","parser/mage/fire/modules/talents/Kindling.tsx","parser/mage/fire/modules/items/FeveredIncantation.tsx","parser/mage/fire/modules/items/Firestorm.tsx","parser/mage/shared/modules/features/MirrorsOfTorment.tsx","parser/mage/fire/modules/items/MasterFlame.tsx","parser/mage/fire/modules/items/ControlledDestruction.tsx","parser/mage/fire/modules/items/InfernalCascade.tsx","parser/mage/fire/modules/talents/FromTheAshes.tsx","parser/mage/fire/CombatLogParser.ts"],"names":["Flamestrike","events","fixedEvents","forEach","event","eventIndex","push","type","EventType","Cast","ability","guid","SPELLS","FLAMESTRIKE","id","castTimestamp","timestamp","previousEventIndex","previousEvent","RemoveBuff","HOT_STREAK","sourceID","splice","__modified","EventsNormalizer","Combustion","COMBUSTION","ApplyBuff","Scorch","Damage","SCORCH","PyroclasmBuff","PYROBLAST","RefreshBuff","ApplyBuffStack","RemoveBuffStack","PYROCLASM_BUFF","CombustionCharges","options","spellUsable","abilityTracker","hasFlameOn","lowPhoenixFlamesCharges","lowFireBlastCharges","badCast","selectedCombatant","hasTalent","FLAME_ON_TALENT","addEventListener","Events","cast","by","SELECTED_PLAYER","spell","onCombustion","fireBlastCharges","this","chargesAvailable","FIRE_BLAST","phoenixFlamesCharges","PHOENIX_FLAMES","FIRE_BLAST_THRESHOLD","PHOENIX_FLAMES_MAX_CHARGES","flagTimeline","meta","isInefficientCast","inefficientCastReason","when","phoenixFlamesThresholds","addSuggestion","suggest","actual","recommended","SpellLink","icon","i18n","_","formatPercentage","phoenixFlamesChargeUtil","fireBlastThresholds","fireBlastChargeUtil","getAbility","casts","isLessThan","minor","average","major","style","ThresholdStyle","PERCENTAGE","Analyzer","dependencies","SpellUsable","AbilityTracker","CombustionFirestarter","combustionCast","combustionDuringFirestarter","healthPercent","active","FIRESTARTER_TALENT","applybuff","damage","FIRE_DIRECT_DAMAGE_SPELLS","onDamage","hasBuff","hitPoints","maxHitPoints","FIRESTARTER_THRESHOLD","SuggestionThresholds","staticImportance","SUGGESTION_IMPORTANCE","MAJOR","isEqual","BOOLEAN","CombustionSpellUsage","scorchCastsStarted","scorchCastsCompleted","fireballCastsStarted","fireballCastsCompleted","FIREBALL","fireballCasts","begincast","scorchCasts","BeginCast","hasCombustion","scorchDuringCombustionThresholds","badScorchesPerCombustion","toFixed","formatNumber","fireballDuringCombustionThresholds","fireballCastsPerCombustion","combustionCasts","isGreaterThan","NUMBER","HeatingUp","enemies","eventHistory","hasFirestarter","hasSearingTouch","phoenixFlamesCastEvent","fireBlastWithoutHeatingUp","fireBlastWithHotStreak","phoenixFlamesWithHotStreak","SEARING_TOUCH_TALENT","onPhoenixFlamesDamage","onFireBlastDamage","hasHotStreak","hasHeatingUp","HEATING_UP","last","castTarget","encodeTargetString","targetID","targetInstance","damageTarget","SEARING_TOUCH_THRESHOLD","lastCast","length","MIRRORS_OF_TORMENT","fireBlastUtilSuggestionThresholds","fireBlastUtil","phoenixFlamesUtilSuggestionThresholds","phoenixFlamesUtil","Statistic","position","STATISTIC_ORDER","CORE","size","tooltip","BoringSpellValueText","SpellIcon","fireBlastWasted","fireBlastMissedPercent","phoenixFlamesMissedPercent","EnemyInstances","EventHistory","HotStreakPreCasts","hasPyroclasm","pyroclasmProcRemoved","castedBeforeHotStreak","noCastBeforeHotStreak","combustionEnded","PYROCLASM_TALENT","checkHealthPercent","removebuff","to","onPyroclasmRemoved","removebuffstack","checkForHotStreakPreCasts","onCombustionEnd","COMBUSTION_END_BUFFER","castBeforeHotStreakThresholds","castBeforeHotStreakUtil","HotStreak","hotStreakPreCasts","totalHotStreakProcs","expiredProcs","hotStreakRemoved","onHotStreakApplied","checkForExpiredProcs","MS_BUFFER_250","hotStreakUtilizationThresholds","expiredProcsPercent","hotStreakUtil","usedProcs","HotStreakWastedCrits","hasPyromaniac","lastCastEvent","wastedCrits","hasPyromaniacProc","pyromaniacProc","PYROMANIAC_TALENT","onCast","checkForPyromaniacProc","onHotStreakRemoved","spellId","hitType","HIT_TYPES","CRIT","undefined","wastedCritsThresholds","wastedCritsPerMinute","owner","fightDuration","Pyroclasm","totalProcs","unusedProcs","overwrittenProcs","buffAppliedEvent","onPyroclasmApplied","applybuffstack","refreshbuff","onPyroclasmRefresh","fightend","onFinished","lastPyroblastCast","lastPyroblastBeginCast","channel","start","hasPyroclasmBuff","adjustedFightEnding","currentTimestamp","procUtilizationThresholds","wastedProcs","procUtilization","category","STATISTIC_CATEGORY","TALENTS","procsPerMinute","SearingTouch","fireballExecuteCasts","totalNonExecuteCasts","totalExecuteCasts","nonExecuteScorchCasts","executeSuggestionThreshold","executeUtil","nonExecuteSuggestionThreshold","BLINK","SHIMMER_TALENT","nonExecuteUtil","MeteorRune","lastRuneCast","badMeteor","hasMeteor","METEOR_TALENT","hasRuneOfPower","RUNE_OF_POWER_TALENT","onMeteor","onRune","RUNE_OF_POWER_BUFF","MS_BUFFER_100","meteorUtilSuggestionThresholds","meteorUtilization","totalMeteorCasts","MeteorCombustion","meteorCast","meteorDuringCombustion","meteorInCombustion","combustionActive","METEOR_DAMAGE","onMeteorDamage","onCombustionStart","meteorCombustionSuggestionThresholds","combustionWithoutMeteor","IGNITE","combustionUtilization","totalCombustionCasts","Math","round","console","log","meteorMaxCasts","Meteor","meteorRune","meteorCombustion","meteorEfficiencySuggestionThresholds","meteorCastEfficiency","AlwaysBeCasting","statisticOrder","deadTimePercentage","totalTimeWasted","boss","fight","disableDowntimeSuggestion","regular","CoreAlwaysBeCasting","FireMageChecklist","combatant","castEfficiency","thresholds","AbilityRequirement","props","GenericCastEfficiencyRequirement","getCastEfficiencyForSpellId","Rule","name","description","BLAST_WAVE_TALENT","LIVING_BOMB_TALENT","Requirement","meteorEfficiency","fireBlastCombustionCharges","phoenixFlamesCombustionCharges","firestarterCombustionUsage","scorchSpellUsageDuringCombustion","fireballSpellUsageDuringCombustion","hotStreakUtilization","hotStreakWastedCrits","phoenixFlamesHeatingUpUsage","fireBlastHeatingUpUsage","pyroclasmUtilization","searingTouchUtilization","runeOfPowerBuffUptime","meteorCombustionUtilization","downtimeSuggestionThresholds","cancelledCasts","PreparationRule","arcaneIntellectUptime","Checklist","combatants","combustionCharges","combustionFirestarter","combustionSpellUsage","heatingUp","hotStreak","pyroclasm","searingTouch","meteor","arcaneIntellect","runeOfPower","alwaysBeCasting","preparationRuleAnalyzer","Component","selected","suggestionThresholds","roundedSecondsSuggestionThresholds","BaseChecklist","Combatants","CastEfficiency","ArcaneIntellect","CancelledCasts","RuneOfPower","PreparationRuleAnalyzer","Buffs","timelineHighlight","triggeredBySpellId","enabled","BLAZING_BARRIER","ICE_BLOCK","MIRROR_IMAGE","Object","keys","BLOODLUST_BUFFS","map","item","Number","CoreBuffs","Abilities","SPELL_CATEGORIES","ROTATIONAL","gcd","base","damageSpellIds","FROSTBOLT","FROSTBOLT_DAMAGE","ARCANE_EXPLOSION","ROTATIONAL_AOE","cooldown","charges","suggestion","recommendedEfficiency","haste","DRAGONS_BREATH","TIME_WARP","buffSpellId","COOLDOWNS","RADIANT_SPARK","hasCovenant","COVENANTS","KYRIAN","DEATHBORNE","NECROLORD","VENTHYR","SHIFTING_POWER","NIGHT_FAE","DEFENSIVE","hasConduitBySpellID","WINTERS_PROTECTION","WINTERS_PROTECTION_REDUCTION_SEC","conduitRankBySpellID","ARCANE_INTELLECT","UTILITY","FROST_NOVA","ICE_WARD_TALENT","FLOW_OF_TIME","FLOW_OF_TIME_REDUCTION_SEC","COUNTERSPELL","REMOVE_CURSE","SLOW_FALL","SPELL_STEAL","FOCUS_MAGIC_TALENT","ALTER_TIME","ALTER_TIME_BUFF","INVISIBILITY","INVISIBILITY_BUFF","POLYMORPH_SHEEP","POLYMORPH_PIG","POLYMORPH_BLACK_CAT","POLYMORPH_MONKEY","POLYMORPH_RABBIT","POLYMORPH_POLAR_BEAR_CUB","POLYMORPH_PORCUPINE","POLYMORPH_TURTLE","POLYMORPH_TURKEY","POLYMORPH_PENGUIN","POLYMORPH_BUMBLEBEE","POLYMORPH_PEACOCK","POLYMORPH_DIREHORN","POLYMORPH_MAWRAT","CoreAbilities","CooldownThroughputTracker","CoreCooldownThroughputTracker","cooldownSpells","startBufferMS","summary","BUILT_IN_SUMMARY_TYPES","DAMAGE","castCooldowns","duration","COMBUST_REDUCTION_SPELLS","Kindling","cooldownReduction","KINDLING_TALENT","onCritDamage","combustionOnCD","isOnCooldown","reduceCooldown","cooldownReductionSeconds","FeveredIncantation","bonusDamage","hasLegendaryByBonusID","FEVERED_INCANTATION","bonusID","buff","getBuff","FEVERED_INCANTATION_BUFF","stacks","calculateEffectiveDamage","ITEMS","ItemDamageDone","amount","Uptime","buffUptime","getBuffUptime","Firestorm","castsDuringFirestorm","firestormProcs","FIRESTORM","FIRESTORM_BUFF","onFirestormApplied","castsPerProc","MirrorsOfTorment","removedebuffstack","onDebuffRemoved","removedebuff","DAMAGE_BONUS","MasterFlame","conduitRank","MASTER_FLAME","onFlameStrikeDamage","ControlledDestruction","CONTROLLED_DESTRUCTION","onPyroDamage","InfernalCascade","buffStack","totalBuffs","combustionCount","INFERNAL_CASCADE","INFERNAL_CASCADE_BUFF","onBuffStack","averageBuffStack","FromTheAshes","FROM_THE_ASHES_TALENT","CombatLogParser","CoreCombatLogParser","specModules","FlameStrikeNormalizer","FlamestrikeNormalizer","scorchNormalizer","ScorchNormalizer","pyroclasmBuffNormalizer","PyroclasmBuffNormalizer","combustionNormalizer","CombustionNormalizer","shiftingPowerNormalizer","ShiftingPowerNormalizer","checklist","buffs","abilities","cooldownThroughputTracker","mirrorImage","MirrorImage","elementalBarrier","ElementalBarrier","showStatistic","showSuggestion","kindling","fromTheAshes","feveredIncantation","firestorm","shiftingPower","ShiftingPower","mirrorsOfTorment","masterFlame","controlledDestruction","infernalCascade","divertedEnergy","DivertedEnergy","groundingSurge","GroundingSurge","ireOfTheAscended","IreOfTheAscended","tempestBarrier","TempestBarrier","siphonedMalice","SiphonedMalice","arcaneTorrent","ArcaneTorrent"],"mappings":"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","file":"static/js/FireMage.0ce80166.chunk.js","sourcesContent":["import SPELLS from 'common/SPELLS';\r\n\r\nimport EventsNormalizer from 'parser/core/EventsNormalizer';\r\nimport { AnyEvent, EventType } from 'parser/core/Events';\r\n\r\nclass Flamestrike extends EventsNormalizer {\r\n\r\n  normalize(events: AnyEvent[]) {\r\n    const fixedEvents: AnyEvent[] = [];\r\n    events.forEach((event, eventIndex) => {\r\n      fixedEvents.push(event);\r\n\r\n      if (event.type === EventType.Cast && event.ability.guid === SPELLS.FLAMESTRIKE.id) {\r\n        const castTimestamp = event.timestamp;\r\n\r\n        for (let previousEventIndex = eventIndex; previousEventIndex >= 0; previousEventIndex -= 1) {\r\n          const previousEvent = fixedEvents[previousEventIndex];\r\n          if ((castTimestamp - previousEvent.timestamp) > 50) {\r\n            break;\r\n          }\r\n          if (previousEvent.type === EventType.RemoveBuff && previousEvent.ability.guid === SPELLS.HOT_STREAK.id && previousEvent.sourceID === event.sourceID) {\r\n            fixedEvents.splice(previousEventIndex, 1);\r\n            fixedEvents.push(previousEvent);\r\n            previousEvent.__modified = true;\r\n            break;\r\n          }\r\n        }\r\n      }\r\n    });\r\n\r\n    return fixedEvents;\r\n  }\r\n}\r\n\r\nexport default Flamestrike;\r\n","import SPELLS from 'common/SPELLS';\r\n\r\nimport EventsNormalizer from 'parser/core/EventsNormalizer';\r\nimport { AnyEvent, EventType } from 'parser/core/Events';\r\n\r\nclass Combustion extends EventsNormalizer {\r\n  normalize(events: AnyEvent[]) {\r\n    const fixedEvents: AnyEvent[] = [];\r\n    events.forEach((event, eventIndex) => {\r\n      fixedEvents.push(event);\r\n\r\n      if (event.type === EventType.Cast && event.ability.guid === SPELLS.COMBUSTION.id) {\r\n        const castTimestamp = event.timestamp;\r\n\r\n        for (let previousEventIndex = eventIndex; previousEventIndex >= 0; previousEventIndex -= 1) {\r\n          const previousEvent = fixedEvents[previousEventIndex];\r\n          if ((castTimestamp - previousEvent.timestamp) > 50) {\r\n            break;\r\n          }\r\n          if (previousEvent.type === EventType.ApplyBuff && previousEvent.ability.guid === SPELLS.COMBUSTION.id && previousEvent.sourceID === event.sourceID) {\r\n            fixedEvents.splice(previousEventIndex, 1);\r\n            fixedEvents.push(previousEvent);\r\n            previousEvent.__modified = true;\r\n            break;\r\n          }\r\n        }\r\n      }\r\n    });\r\n\r\n    return fixedEvents;\r\n  }\r\n}\r\n\r\nexport default Combustion;\r\n","import SPELLS from 'common/SPELLS';\r\n\r\nimport EventsNormalizer from 'parser/core/EventsNormalizer';\r\nimport { AnyEvent, EventType } from 'parser/core/Events';\r\n\r\nclass Scorch extends EventsNormalizer {\r\n\r\n  //Because Scorch has no travel time, ensures that the Scorch Damage event happens after Hot Streak is removed so the Scorch doesnt count as a direct damage crit during Hot Streak\r\n  normalize(events: AnyEvent[]) {\r\n    const fixedEvents: AnyEvent[] = [];\r\n    events.forEach((event, eventIndex) => {\r\n      fixedEvents.push(event);\r\n\r\n      if (event.type === EventType.RemoveBuff && event.ability.guid === SPELLS.HOT_STREAK.id) {\r\n        const castTimestamp = event.timestamp;\r\n\r\n        for (let previousEventIndex = eventIndex; previousEventIndex >= 0; previousEventIndex -= 1) {\r\n          const previousEvent = fixedEvents[previousEventIndex];\r\n          if ((castTimestamp - previousEvent.timestamp) > 50) {\r\n            break;\r\n          }\r\n          if (previousEvent.type === EventType.Damage && previousEvent.ability.guid === SPELLS.SCORCH.id && previousEvent.sourceID === event.sourceID) {\r\n            fixedEvents.splice(previousEventIndex, 1);\r\n            fixedEvents.push(previousEvent);\r\n            previousEvent.__modified = true;\r\n            break;\r\n          }\r\n        }\r\n      }\r\n    });\r\n\r\n    return fixedEvents;\r\n  }\r\n}\r\n\r\nexport default Scorch;\r\n","import SPELLS from 'common/SPELLS';\r\n\r\nimport EventsNormalizer from 'parser/core/EventsNormalizer';\r\nimport { AnyEvent, EventType } from 'parser/core/Events';\r\n\r\nclass PyroclasmBuff extends EventsNormalizer {\r\n\r\n  //Ensures that the  ApplyBuff, RefreshBuff, and RemoveBuff events are not occuring before the pyroblast events... so the buff doesnt get applied, removed, or refreshed before the pyroblast actually casts\r\n  normalize(events: AnyEvent[]) {\r\n    const fixedEvents: AnyEvent[] = [];\r\n    events.forEach((event, eventIndex) => {\r\n      fixedEvents.push(event);\r\n\r\n      if (event.type === EventType.Cast && event.ability.guid === SPELLS.PYROBLAST.id) {\r\n        const castTimestamp = event.timestamp;\r\n\r\n        for (let previousEventIndex = eventIndex; previousEventIndex >= 0; previousEventIndex -= 1) {\r\n          const previousEvent = fixedEvents[previousEventIndex];\r\n          if ((castTimestamp - previousEvent.timestamp) > 50) {\r\n            break;\r\n          }\r\n          if ((previousEvent.type === EventType.RemoveBuff || previousEvent.type === EventType.ApplyBuff || previousEvent.type === EventType.RefreshBuff || previousEvent.type === EventType.ApplyBuffStack || previousEvent.type === EventType.RemoveBuffStack) && previousEvent.ability.guid === SPELLS.PYROCLASM_BUFF.id && previousEvent.sourceID === event.sourceID) {\r\n            fixedEvents.splice(previousEventIndex, 1);\r\n            fixedEvents.push(previousEvent);\r\n            previousEvent.__modified = true;\r\n            break;\r\n          }\r\n        }\r\n      }\r\n    });\r\n\r\n    return fixedEvents;\r\n  }\r\n}\r\n\r\nexport default PyroclasmBuff;\r\n","import React from 'react';\r\n\r\nimport SPELLS from 'common/SPELLS';\r\nimport SpellLink from 'common/SpellLink';\r\nimport { formatPercentage } from 'common/format';\r\nimport Analyzer, { SELECTED_PLAYER, Options } from 'parser/core/Analyzer';\r\nimport { When, ThresholdStyle } from 'parser/core/ParseResults';\r\nimport Events, { CastEvent } from 'parser/core/Events';\r\nimport SpellUsable from 'parser/shared/modules/SpellUsable';\r\nimport AbilityTracker from 'parser/shared/modules/AbilityTracker';\r\nimport { PHOENIX_FLAMES_MAX_CHARGES } from 'parser/mage/shared/constants';\r\nimport { i18n } from '@lingui/core';\r\nimport { t } from '@lingui/macro';\r\n\r\nconst debug = false;\r\n\r\nclass CombustionCharges extends Analyzer {\r\n  static dependencies = {\r\n    spellUsable: SpellUsable,\r\n    abilityTracker: AbilityTracker,\r\n  };\r\n  protected spellUsable!: SpellUsable;\r\n  protected abilityTracker!: AbilityTracker;\r\n\r\n  hasFlameOn: boolean;\r\n  lowPhoenixFlamesCharges = 0;\r\n  lowFireBlastCharges = 0;\r\n  badCast = false;\r\n\r\n  constructor(options: Options) {\r\n    super(options);\r\n    this.hasFlameOn = this.selectedCombatant.hasTalent(SPELLS.FLAME_ON_TALENT.id);\r\n    this.addEventListener(Events.cast.by(SELECTED_PLAYER).spell(SPELLS.COMBUSTION), this.onCombustion);\r\n  }\r\n\r\n  //When Combustion is cast, check to see how many charges of Fire Blast and Phoenix Flames are available. If there is less than (Max Charges - 1) then its a bad Combustion cast.\r\n  onCombustion(event: CastEvent) {\r\n    const fireBlastCharges = this.spellUsable.chargesAvailable(SPELLS.FIRE_BLAST.id);\r\n    const phoenixFlamesCharges = (this.spellUsable.chargesAvailable(SPELLS.PHOENIX_FLAMES.id) || 0);\r\n    const FIRE_BLAST_THRESHOLD = this.hasFlameOn ? 2 : 1;\r\n    this.badCast = false;\r\n\r\n    if (fireBlastCharges < FIRE_BLAST_THRESHOLD) {\r\n      this.lowFireBlastCharges += 1;\r\n      this.badCast = true;\r\n      debug && this.log(\"Fire Blast Charges: \" + fireBlastCharges + \" Target: \" + FIRE_BLAST_THRESHOLD);\r\n    }\r\n\r\n    if (phoenixFlamesCharges < PHOENIX_FLAMES_MAX_CHARGES) {\r\n      this.lowPhoenixFlamesCharges += 1;\r\n      this.badCast = true;\r\n      debug && this.log(\"Phoenix Flames Charges: \" + phoenixFlamesCharges);\r\n    }\r\n\r\n    if (this.badCast) {\r\n      this.flagTimeline(event);\r\n    }\r\n  }\r\n\r\n  flagTimeline(event: CastEvent) {\r\n    event.meta = event.meta || {};\r\n    event.meta.isInefficientCast = true;\r\n    event.meta.inefficientCastReason = `This Combustion was cast with a low amount of Fire Blast and/or Phoenix Flames charges. In order to get the most out of your Combustion casts, ensure that you have at least ${this.hasFlameOn ? '2' : '1' } Fire Blast charges and 2 Phoenix Flames charges. `;\r\n  }\r\n\r\n  get phoenixFlamesChargeUtil() {\r\n    return 1 - (this.lowPhoenixFlamesCharges / this.abilityTracker.getAbility(SPELLS.COMBUSTION.id).casts);\r\n  }\r\n\r\n  get fireBlastChargeUtil() {\r\n    return 1 - (this.lowFireBlastCharges / this.abilityTracker.getAbility(SPELLS.COMBUSTION.id).casts);\r\n  }\r\n\r\n  get phoenixFlamesThresholds() {\r\n    return {\r\n      actual: this.phoenixFlamesChargeUtil,\r\n      isLessThan: {\r\n        minor: 1,\r\n        average: .65,\r\n        major: .45,\r\n      },\r\n      style: ThresholdStyle.PERCENTAGE,\r\n    };\r\n  }\r\n\r\n  get fireBlastThresholds() {\r\n    return {\r\n      actual: this.fireBlastChargeUtil,\r\n      isLessThan: {\r\n        minor: 1,\r\n        average: .65,\r\n        major: .45,\r\n      },\r\n      style: ThresholdStyle.PERCENTAGE,\r\n    };\r\n  }\r\n\r\n  suggestions(when: When) {\r\n    when(this.phoenixFlamesThresholds)\r\n    .addSuggestion((suggest, actual, recommended) => suggest(<>You cast <SpellLink id={SPELLS.COMBUSTION.id} /> {this.lowPhoenixFlamesCharges} times with less than 2 charges of <SpellLink id={SPELLS.PHOENIX_FLAMES.id} />. Make sure you are saving at least 2 charges while Combustion is on cooldown so you can get as many <SpellLink id={SPELLS.HOT_STREAK.id} /> procs as possible before Combustion ends.</>)\r\n        .icon(SPELLS.COMBUSTION.icon)\r\n        .actual(i18n._(t('mage.fire.suggestions.combustionCharges.phoenixFlames.utilization')`${formatPercentage(this.phoenixFlamesChargeUtil)}% Utilization`))\r\n        .recommended(`${formatPercentage(recommended)} is recommended`));\r\n    when(this.fireBlastThresholds)\r\n      .addSuggestion((suggest, actual, recommended) => suggest(<>You cast <SpellLink id={SPELLS.COMBUSTION.id} /> {this.lowFireBlastCharges} times with less than {this.selectedCombatant.hasTalent(SPELLS.FLAME_ON_TALENT.id) ? '2' : '1' } charges of <SpellLink id={SPELLS.FIRE_BLAST.id} />. Make sure you are saving at least {this.selectedCombatant.hasTalent(SPELLS.FLAME_ON_TALENT.id) ? '2' : '1' } charges while Combustion is on cooldown so you can get as many <SpellLink id={SPELLS.HOT_STREAK.id} /> procs as possible before Combustion ends.</>)\r\n          .icon(SPELLS.COMBUSTION.icon)\r\n          .actual(i18n._(t('mage.fire.suggestions.combustionCharges.flameOn.utilization')`${formatPercentage(this.fireBlastChargeUtil)}% Utilization`))\r\n          .recommended(`${formatPercentage(recommended)} is recommended`));\r\n  }\r\n}\r\nexport default CombustionCharges;\r\n","import React from 'react';\r\n\r\nimport SPELLS from 'common/SPELLS';\r\nimport SpellLink from 'common/SpellLink';\r\nimport Analyzer, { SELECTED_PLAYER, Options } from 'parser/core/Analyzer';\r\nimport { When, ThresholdStyle } from 'parser/core/ParseResults';\r\nimport Events, { ApplyBuffEvent, DamageEvent } from 'parser/core/Events';\r\nimport SUGGESTION_IMPORTANCE from 'parser/core/ISSUE_IMPORTANCE';\r\nimport { FIRESTARTER_THRESHOLD, FIRE_DIRECT_DAMAGE_SPELLS } from 'parser/mage/shared/constants';\r\n\r\nconst debug = false;\r\n\r\nclass CombustionFirestarter extends Analyzer {\r\n\r\n  combustionCast = false;\r\n  combustionDuringFirestarter = false;\r\n  healthPercent = 1;\r\n\r\n  constructor(options: Options) {\r\n    super(options);\r\n    this.active = this.selectedCombatant.hasTalent(SPELLS.FIRESTARTER_TALENT.id);\r\n    this.addEventListener(Events.applybuff.by(SELECTED_PLAYER).spell(SPELLS.COMBUSTION), this.onCombustion);\r\n    this.addEventListener(Events.damage.by(SELECTED_PLAYER).spell(FIRE_DIRECT_DAMAGE_SPELLS), this.onDamage);\r\n  }\r\n\r\n  //Checks to see if a new Combustion was cast. This variable is marked false once a damage event is triggered since we only want the first damage event in the Combustion (to get the health percentage)\r\n  onCombustion(event: ApplyBuffEvent) {\r\n    this.combustionCast = true;\r\n  }\r\n\r\n  //The Combustion Cast/Apply Buff event uses the Players Health/Max Health instead of the target, so we need to check the first direct damage event during combustion to get the target's health. If above 90% then Combustion was cast during Firestarter, which is a waste.\r\n  onDamage(event: DamageEvent) {\r\n    const hasCombustion = this.selectedCombatant.hasBuff(SPELLS.COMBUSTION.id);\r\n    if (!hasCombustion || !this.combustionCast) {\r\n      return;\r\n    }\r\n\r\n    this.combustionCast = false;\r\n    if (event.hitPoints && event.maxHitPoints && event.hitPoints > 0) {\r\n      this.healthPercent = event.hitPoints / event.maxHitPoints;\r\n    }\r\n    if (this.healthPercent > FIRESTARTER_THRESHOLD) {\r\n      this.combustionDuringFirestarter = true;\r\n      debug && this.log(\"Combustion Used During Firestarter\");\r\n    }\r\n  }\r\n\r\n  get SuggestionThresholds() {\r\n    return {\r\n      actual: this.combustionDuringFirestarter,\r\n      isEqual: true,\r\n      style: ThresholdStyle.BOOLEAN,\r\n    };\r\n  }\r\n\r\n  suggestions(when: When) {\r\n    when(this.SuggestionThresholds)\r\n      .addSuggestion((suggest) => suggest(<>You used <SpellLink id={SPELLS.COMBUSTION.id} /> while <SpellLink id={SPELLS.FIRESTARTER_TALENT.id} /> was active (While the boss was at 90% health or higher). Since Firestarter makes your spells a guaranteed crit anyway, you should wait until the boss is at 89% to use your Combustion.</>)\r\n          .icon(SPELLS.COMBUSTION.icon)\r\n          .staticImportance(SUGGESTION_IMPORTANCE.MAJOR));\r\n  }\r\n}\r\nexport default CombustionFirestarter;\r\n","import React from 'react';\r\nimport SPELLS from 'common/SPELLS';\r\nimport SpellLink from 'common/SpellLink';\r\nimport { formatNumber } from 'common/format';\r\nimport AbilityTracker from 'parser/shared/modules/AbilityTracker';\r\nimport Analyzer, { SELECTED_PLAYER, Options } from 'parser/core/Analyzer';\r\nimport { When, ThresholdStyle } from 'parser/core/ParseResults';\r\nimport Events, { BeginCastEvent, CastEvent, EventType } from 'parser/core/Events';\r\nimport SpellUsable from 'parser/shared/modules/SpellUsable';\r\nimport { i18n } from '@lingui/core';\r\nimport { t } from '@lingui/macro';\r\n\r\nconst debug = false;\r\n\r\nclass CombustionSpellUsage extends Analyzer {\r\n  static dependencies = {\r\n    spellUsable: SpellUsable,\r\n    abilityTracker: AbilityTracker,\r\n  };\r\n  protected spellUsable!: SpellUsable;\r\n  protected abilityTracker!: AbilityTracker;\r\n\r\n  scorchCastsStarted = 0;\r\n  scorchCastsCompleted = 0;\r\n  fireballCastsStarted = 0;\r\n  fireballCastsCompleted = 0;\r\n\r\n  constructor(options: Options) {\r\n    super(options);\r\n    this.addEventListener(Events.cast.by(SELECTED_PLAYER).spell(SPELLS.FIREBALL), this.fireballCasts);\r\n    this.addEventListener(Events.begincast.by(SELECTED_PLAYER).spell(SPELLS.FIREBALL), this.fireballCasts);\r\n    this.addEventListener(Events.cast.by(SELECTED_PLAYER).spell(SPELLS.SCORCH), this.scorchCasts);\r\n    this.addEventListener(Events.begincast.by(SELECTED_PLAYER).spell(SPELLS.SCORCH), this.scorchCasts);\r\n  }\r\n\r\n  //Because Fireball has a longer cast time than Scorch, the player should never cast Fireball during Combustion.\r\n  fireballCasts(event: CastEvent | BeginCastEvent) {\r\n    const hasCombustion = this.selectedCombatant.hasBuff(SPELLS.COMBUSTION.id);\r\n\r\n    if (!hasCombustion) {\r\n      return;\r\n    }\r\n\r\n    if (event.type === EventType.Cast) {\r\n      this.fireballCastsCompleted += 1;\r\n      event.meta = event.meta || {};\r\n      event.meta.isInefficientCast = true;\r\n      event.meta.inefficientCastReason = `This Fireball was cast during Combustion. Since Combustion has a short duration, you are better off using your instant abilities to get as many instant/free Pyroblasts as possible. If you run out of instant abilities, cast Scorch instead since it has a shorter cast time.`;\r\n    }\r\n\r\n    if (event.type === EventType.BeginCast) {\r\n      this.fireballCastsStarted += 1;\r\n    }\r\n  }\r\n\r\n  scorchCasts(event: CastEvent | BeginCastEvent) {\r\n    const hasCombustion = this.selectedCombatant.hasBuff(SPELLS.COMBUSTION.id);\r\n    const fireBlastCharges = this.spellUsable.chargesAvailable(SPELLS.FIRE_BLAST.id);\r\n    const phoenixFlamesCharges = (this.spellUsable.chargesAvailable(SPELLS.PHOENIX_FLAMES.id) || 0);\r\n\r\n    //If the player has the Blaster Master trait, it is acceptable to cast Scorch during Combustion\r\n    if (!hasCombustion) {\r\n      return;\r\n    }\r\n\r\n    if (event.type === EventType.Cast && (fireBlastCharges > 0 || phoenixFlamesCharges > 0)) {\r\n      this.scorchCastsCompleted += 1;\r\n      event.meta = event.meta || {};\r\n      event.meta.isInefficientCast = true;\r\n      event.meta.inefficientCastReason = `This Scorch was cast during Combustion while an instant cast ability like Fire Blast or Phoenix Flames was available. Unless you have the Blaster Master trait, make sure you are using your instant abilities first before hard casting Scorch. `;\r\n      debug && this.log(\"Cast completed with instants available\");\r\n    }\r\n\r\n    if (event.type === EventType.BeginCast && (fireBlastCharges > 0 || phoenixFlamesCharges > 0)) {\r\n      this.scorchCastsStarted += 1;\r\n      debug && this.log(\"Cast started with instants available\");\r\n    }\r\n  }\r\n\r\n  get badScorchesPerCombustion() {\r\n    return this.scorchCastsStarted / this.combustionCasts;\r\n  }\r\n\r\n  get fireballCastsPerCombustion() {\r\n    return this.fireballCastsStarted / this.combustionCasts;\r\n  }\r\n\r\n  get combustionCasts() {\r\n    return this.abilityTracker.getAbility(SPELLS.COMBUSTION.id).casts;\r\n  }\r\n\r\n  get scorchDuringCombustionThresholds() {\r\n    return {\r\n      actual: this.badScorchesPerCombustion,\r\n      isGreaterThan: {\r\n        minor: 0,\r\n        average: 1,\r\n        major: 2,\r\n      },\r\n      style: ThresholdStyle.NUMBER,\r\n    };\r\n  }\r\n\r\n  get fireballDuringCombustionThresholds() {\r\n    return {\r\n      actual: this.fireballCastsPerCombustion,\r\n      isGreaterThan: {\r\n        minor: 0,\r\n        average: 0.5,\r\n        major: 1,\r\n      },\r\n      style: ThresholdStyle.NUMBER,\r\n    };\r\n  }\r\n\r\n  suggestions(when: When) {\r\n    when(this.scorchDuringCombustionThresholds)\r\n      .addSuggestion((suggest, actual, recommended) => suggest(<>You started to cast <SpellLink id={SPELLS.SCORCH.id} /> {this.scorchCastsStarted} times ({this.badScorchesPerCombustion.toFixed(2)} per Combustion), and completed {this.scorchCastsCompleted} casts, while you had charges of <SpellLink id={SPELLS.FIRE_BLAST.id} />  or <SpellLink id={SPELLS.PHOENIX_FLAMES.id} /> available. Make sure you are using up all of your charges of Fire Blast and Phoenix Flames before using Scorch during Combustion.</>)\r\n          .icon(SPELLS.COMBUSTION.icon)\r\n          .actual(i18n._(t('mage.fire.suggestions.combustion.charge.utilization')`${this.badScorchesPerCombustion.toFixed(2)} Casts Per Combustion`))\r\n          .recommended(`${formatNumber(recommended)} is recommended`));\r\n    when(this.fireballDuringCombustionThresholds)\r\n    .addSuggestion((suggest, actual, recommended) => suggest(<>You started to cast <SpellLink id={SPELLS.FIREBALL.id} /> {this.fireballCastsStarted} times ({this.fireballCastsPerCombustion.toFixed(2)} per Combustion), and completed {this.fireballCastsCompleted} casts, during <SpellLink id={SPELLS.COMBUSTION.id} />. Combustion has a short duration, so you are better off using instant abilities like <SpellLink id={SPELLS.FIRE_BLAST.id} /> or <SpellLink id={SPELLS.PHOENIX_FLAMES.id} />. If you run out of instant cast abilities, use <SpellLink id={SPELLS.SCORCH.id} /> instead of Fireball since it has a shorter cast time.</>)\r\n        .icon(SPELLS.COMBUSTION.icon)\r\n        .actual(i18n._(t('mage.fire.suggestions.combustion.castsPerCombustion')`${this.fireballCastsPerCombustion.toFixed(2)} Casts Per Combustion`))\r\n        .recommended(`${formatNumber(recommended)} is recommended`));\r\n  }\r\n}\r\nexport default CombustionSpellUsage;\r\n","import React from 'react';\r\nimport SPELLS from 'common/SPELLS';\r\nimport SpellLink from 'common/SpellLink';\r\nimport SpellIcon from 'common/SpellIcon';\r\nimport { formatPercentage } from 'common/format';\r\nimport Statistic from 'interface/statistics/Statistic';\r\nimport STATISTIC_ORDER from 'interface/others/STATISTIC_ORDER';\r\nimport BoringSpellValueText from 'interface/statistics/components/BoringSpellValueText';\r\nimport Analyzer, { SELECTED_PLAYER, Options } from 'parser/core/Analyzer';\r\nimport { When, ThresholdStyle } from 'parser/core/ParseResults';\r\nimport Events, { EventType, CastEvent, DamageEvent } from 'parser/core/Events';\r\nimport AbilityTracker from 'parser/shared/modules/AbilityTracker';\r\nimport EnemyInstances, { encodeTargetString } from 'parser/shared/modules/EnemyInstances';\r\nimport EventHistory from 'parser/shared/modules/EventHistory';\r\nimport SpellUsable from 'parser/shared/modules/SpellUsable';\r\nimport { FIRESTARTER_THRESHOLD, SEARING_TOUCH_THRESHOLD } from 'parser/mage/shared/constants';\r\nimport { i18n } from '@lingui/core';\r\nimport { t } from '@lingui/macro';\r\n\r\nconst debug = false;\r\n\r\nclass HeatingUp extends Analyzer {\r\n  static dependencies = {\r\n    abilityTracker: AbilityTracker,\r\n    enemies: EnemyInstances,\r\n    eventHistory: EventHistory,\r\n    spellUsable: SpellUsable,\r\n  };\r\n  protected abilityTracker!: AbilityTracker;\r\n  protected enemies!: EnemyInstances;\r\n  protected eventHistory!: EventHistory;\r\n  protected spellUsable!: SpellUsable;\r\n\r\n  hasFirestarter: boolean;\r\n  hasSearingTouch: boolean;\r\n  hasFlameOn: boolean;\r\n  phoenixFlamesCastEvent?: CastEvent;\r\n  fireBlastWithoutHeatingUp = 0;\r\n  fireBlastWithHotStreak = 0;\r\n  phoenixFlamesWithHotStreak = 0;\r\n  healthPercent = 1;\r\n\r\n  constructor(options: Options) {\r\n    super(options);\r\n    this.hasFirestarter = this.selectedCombatant.hasTalent(SPELLS.FIRESTARTER_TALENT.id);\r\n    this.hasSearingTouch = this.selectedCombatant.hasTalent(SPELLS.SEARING_TOUCH_TALENT.id);\r\n    this.hasFlameOn = this.selectedCombatant.hasTalent(SPELLS.FLAME_ON_TALENT.id);\r\n    this.addEventListener(Events.damage.by(SELECTED_PLAYER).spell(SPELLS.PHOENIX_FLAMES), this.onPhoenixFlamesDamage);\r\n    this.addEventListener(Events.damage.by(SELECTED_PLAYER).spell(SPELLS.FIRE_BLAST), this.onFireBlastDamage);\r\n  }\r\n\r\n  onPhoenixFlamesDamage(event: DamageEvent) {\r\n    const hasCombustion = this.selectedCombatant.hasBuff(SPELLS.COMBUSTION.id);\r\n    const hasHotStreak = this.selectedCombatant.hasBuff(SPELLS.HOT_STREAK.id);\r\n    const hasHeatingUp = this.selectedCombatant.hasBuff(SPELLS.HEATING_UP.id);\r\n    const phoenixFlamesCastEvent = this.eventHistory.last(1, 500, Events.cast.by(SELECTED_PLAYER).spell(SPELLS.PHOENIX_FLAMES))[0];\r\n    const castTarget = phoenixFlamesCastEvent ? encodeTargetString(phoenixFlamesCastEvent.targetID, event.targetInstance) : null;\r\n    const damageTarget = encodeTargetString(event.targetID, event.targetInstance);\r\n    if (event.hitPoints && event.maxHitPoints && event.hitPoints > 0) {\r\n      this.healthPercent = event.hitPoints / event.maxHitPoints;\r\n    }\r\n    if (castTarget !== damageTarget || hasHeatingUp) {\r\n      return;\r\n    }\r\n\r\n    //If Combustion is active, the player is within the Firestarter execute window, or the player is in the Searing Touch execute window, then ignore the event\r\n    //If the player had Hot Streak though, then its a mistake regardless\r\n    if (!hasHotStreak && (hasCombustion || (this.hasFirestarter && this.healthPercent > FIRESTARTER_THRESHOLD) || (this.hasSearingTouch && this.healthPercent < SEARING_TOUCH_THRESHOLD))) {\r\n      debug && this.log(\"Event Ignored\");\r\n      return;\r\n    }\r\n\r\n    //If the player cast Phoenix Flames with Hot Streak, then count it as a mistake\r\n    if (hasHotStreak) {\r\n      this.phoenixFlamesWithHotStreak += 1;\r\n      debug && this.log(\"Phoenix Flames with Hot Streak\");\r\n    }\r\n  }\r\n\r\n  onFireBlastDamage(event: any) {\r\n    const hasCombustion = this.selectedCombatant.hasBuff(SPELLS.COMBUSTION.id);\r\n    const hasHotStreak = this.selectedCombatant.hasBuff(SPELLS.HOT_STREAK.id);\r\n    const hasHeatingUp = this.selectedCombatant.hasBuff(SPELLS.HEATING_UP.id);\r\n    if (event.hitPoints > 0) {\r\n      this.healthPercent = event.hitPoints / event.maxHitPoints;\r\n    }\r\n    if (hasHeatingUp) {\r\n      return;\r\n    }\r\n\r\n    //If the player is Venthyr and uses a Fire Blast without Heating Up during their Mirrors of Torment cast, that is acceptable\r\n    const lastCast = this.eventHistory.last(1, 1000)\r\n    if (lastCast.length > 0 && lastCast[0].type === EventType.BeginCast && lastCast[0].ability.guid === SPELLS.MIRRORS_OF_TORMENT.id) {\r\n      return;\r\n    }\r\n\r\n    //If Combustion is active, the player is within the Firestarter execute window, or the player is in the Searing Touch execute window, then ignore the event\r\n    //If the player had Hot Streak though, then its a mistake regardless\r\n    if (!hasHotStreak && (hasCombustion || (this.hasFirestarter && this.healthPercent > FIRESTARTER_THRESHOLD) || (this.hasSearingTouch && this.healthPercent < SEARING_TOUCH_THRESHOLD))) {\r\n      debug && this.log(\"Event Ignored\");\r\n      return;\r\n    }\r\n\r\n    //If the player cast Fire Blast with Hot Streak or if they cast it without Heating Up, then count it as a mistake\r\n    if (hasHotStreak) {\r\n      this.fireBlastWithHotStreak += 1;\r\n      debug && this.log(\"Fire Blast with Hot Streak\");\r\n    } else {\r\n      this.fireBlastWithoutHeatingUp += 1;\r\n      debug && this.log(\"Fire Blast without Heating Up\");\r\n    }\r\n  }\r\n\r\n  get fireBlastWasted() {\r\n    return this.fireBlastWithoutHeatingUp + this.fireBlastWithHotStreak;\r\n  }\r\n\r\n  get totalWasted() {\r\n    return this.fireBlastWasted + this.phoenixFlamesWithHotStreak;\r\n  }\r\n\r\n  get fireBlastUtil() {\r\n    return 1 - this.fireBlastMissedPercent;\r\n  }\r\n\r\n  get phoenixFlamesUtil() {\r\n    return 1 - this.phoenixFlamesMissedPercent;\r\n  }\r\n\r\n  get fireBlastMissedPercent() {\r\n    return this.fireBlastWasted / this.abilityTracker.getAbility(SPELLS.FIRE_BLAST.id).casts;\r\n  }\r\n\r\n  get phoenixFlamesMissedPercent() {\r\n    return this.phoenixFlamesWithHotStreak / this.abilityTracker.getAbility(SPELLS.PHOENIX_FLAMES.id).casts;\r\n  }\r\n\r\n  get fireBlastUtilSuggestionThresholds() {\r\n    return {\r\n      actual: this.fireBlastUtil,\r\n      isLessThan: {\r\n        minor: 0.95,\r\n        average: 0.90,\r\n        major: 0.85,\r\n      },\r\n      style: ThresholdStyle.PERCENTAGE,\r\n    };\r\n  }\r\n\r\n  get phoenixFlamesUtilSuggestionThresholds() {\r\n    return {\r\n      actual: this.phoenixFlamesUtil,\r\n      isLessThan: {\r\n        minor: 0.95,\r\n        average: 0.90,\r\n        major: 0.85,\r\n      },\r\n      style: ThresholdStyle.PERCENTAGE,\r\n    };\r\n  }\r\n\r\n  suggestions(when: When) {\r\n\t\twhen(this.fireBlastUtilSuggestionThresholds)\r\n\t\t\t.addSuggestion((suggest, actual, recommended) => suggest(<>You cast <SpellLink id={SPELLS.FIRE_BLAST.id} /> {this.fireBlastWithHotStreak} times while <SpellLink id={SPELLS.HOT_STREAK.id} /> was active and {this.fireBlastWithoutHeatingUp} times while you didnt have <SpellLink id={SPELLS.HEATING_UP.id} />. Make sure that you are only using Fire Blast to convert Heating Up into Hot Streak or if you are going to cap on charges.</>)\r\n\t\t\t\t\t.icon(SPELLS.FIRE_BLAST.icon)\r\n\t\t\t\t\t.actual(i18n._(t('mage.fire.suggestions.heatingUp.fireBlastUtilization')`${formatPercentage(this.fireBlastUtil)}% Utilization`))\r\n\t\t\t\t\t.recommended(`<${formatPercentage(recommended)}% is recommended`));\r\n    when(this.phoenixFlamesUtilSuggestionThresholds)\r\n\t\t\t.addSuggestion((suggest, actual, recommended) => suggest(<>You cast <SpellLink id={SPELLS.PHOENIX_FLAMES.id} /> {this.phoenixFlamesWithHotStreak} times while <SpellLink id={SPELLS.HOT_STREAK.id} /> was active. This is a waste as the <SpellLink id={SPELLS.PHOENIX_FLAMES.id} /> could have contributed towards the next <SpellLink id={SPELLS.HEATING_UP.id} /> or <SpellLink id={SPELLS.HOT_STREAK.id} />.</>)\r\n\t\t\t\t\t.icon(SPELLS.PHOENIX_FLAMES.icon)\r\n\t\t\t\t\t.actual(i18n._(t('mage.fire.suggestions.heatingUp.phoenixFlames.utilization')`${formatPercentage(this.phoenixFlamesUtil)}% Utilization`))\r\n\t\t\t\t\t.recommended(`<${formatPercentage(recommended)}% is recommended`));\r\n\t}\r\n\r\nstatistic() {\r\n  return (\r\n    <Statistic\r\n      position={STATISTIC_ORDER.CORE(14)}\r\n      size=\"flexible\"\r\n      tooltip={(\r\n        <>\r\n          Spells that are guaranteed to crit like Fire Blast and Phoenix Flames should only be used to convert Heating Up to Hot Streak. While there are minor exceptions to this (like if you are about to cap on charges or using Fireball & Phoenix Flames to bait Heating Up/Hot Streak just before Combustion), the goal should be to waste as few of these as possible.\r\n          <ul>\r\n            <li>Fireblast Used with no procs: {this.fireBlastWithoutHeatingUp}</li>\r\n            <li>Fireblast used during Hot Streak: {this.fireBlastWithHotStreak}</li>\r\n            <li>Phoenix Flames used during Hot Streak: {this.phoenixFlamesWithHotStreak}</li>\r\n          </ul>\r\n        </>\r\n      )}\r\n    >\r\n      <BoringSpellValueText spell={SPELLS.HEATING_UP}>\r\n        <>\r\n          <SpellIcon id={SPELLS.FIRE_BLAST.id} /> {formatPercentage(this.fireBlastUtil,0)}% <small>Fire Blast Utilization</small><br />\r\n          <SpellIcon id={SPELLS.PHOENIX_FLAMES.id} /> {formatPercentage(this.phoenixFlamesUtil,0)}% <small>Phoenix Flames Utilization</small>\r\n        </>\r\n      </BoringSpellValueText>\r\n    </Statistic>\r\n  );\r\n  }\r\n}\r\n\r\nexport default HeatingUp;\r\n","import React from 'react';\r\nimport SPELLS from 'common/SPELLS';\r\nimport SpellLink from 'common/SpellLink';\r\nimport { formatPercentage } from 'common/format';\r\nimport Analyzer, { SELECTED_PLAYER, Options } from 'parser/core/Analyzer';\r\nimport { When, ThresholdStyle } from 'parser/core/ParseResults';\r\nimport Events, { DamageEvent, RemoveBuffEvent, RemoveBuffStackEvent } from 'parser/core/Events';\r\nimport EventHistory from 'parser/shared/modules/EventHistory';\r\nimport { COMBUSTION_END_BUFFER, FIRESTARTER_THRESHOLD, SEARING_TOUCH_THRESHOLD, FIRE_DIRECT_DAMAGE_SPELLS } from 'parser/mage/shared/constants';\r\nimport { i18n } from '@lingui/core';\r\nimport { t } from '@lingui/macro';\r\n\r\nconst PROC_BUFFER = 200;\r\n\r\nconst debug = false;\r\n\r\nclass HotStreakPreCasts extends Analyzer {\r\n  static dependencies = {\r\n    eventHistory: EventHistory,\r\n  }\r\n  protected eventHistory!: EventHistory;\r\n\r\n  hasPyroclasm: boolean;\r\n  hasFirestarter: boolean;\r\n  hasSearingTouch: boolean;\r\n  pyroclasmProcRemoved = 0;\r\n  castedBeforeHotStreak = 0;\r\n  noCastBeforeHotStreak = 0;\r\n  healthPercent = 1;\r\n  combustionEnded = 0;\r\n\r\n  constructor(options: Options) {\r\n    super(options);\r\n    this.hasPyroclasm = this.selectedCombatant.hasTalent(SPELLS.PYROCLASM_TALENT.id);\r\n    this.hasFirestarter = this.selectedCombatant.hasTalent(SPELLS.FIRESTARTER_TALENT.id);\r\n    this.hasSearingTouch = this.selectedCombatant.hasTalent(SPELLS.SEARING_TOUCH_TALENT.id);\r\n    if (this.hasFirestarter || this.hasSearingTouch) {this.addEventListener(Events.damage.by(SELECTED_PLAYER).spell(FIRE_DIRECT_DAMAGE_SPELLS), this.checkHealthPercent);}\r\n    this.addEventListener(Events.removebuff.to(SELECTED_PLAYER).spell(SPELLS.PYROCLASM_BUFF), this.onPyroclasmRemoved);\r\n    this.addEventListener(Events.removebuffstack.to(SELECTED_PLAYER).spell(SPELLS.PYROCLASM_BUFF), this.onPyroclasmRemoved);\r\n    this.addEventListener(Events.removebuff.to(SELECTED_PLAYER).spell(SPELLS.HOT_STREAK), this.checkForHotStreakPreCasts);\r\n    this.addEventListener(Events.removebuff.by(SELECTED_PLAYER).spell(SPELLS.COMBUSTION), this.onCombustionEnd);\r\n\r\n  }\r\n\r\n  //If the player has the Searing Touch or Firestarter talents, then we need to get the health percentage on damage events so we can know whether we are in the Firestarter or Searing Touch execute windows\r\n  checkHealthPercent(event: DamageEvent) {\r\n    if (event.hitPoints && event.maxHitPoints && event.hitPoints > 0) {\r\n      this.healthPercent = event.hitPoints / event.maxHitPoints;\r\n    }\r\n  }\r\n\r\n  onCombustionEnd(event: RemoveBuffEvent) {\r\n    this.combustionEnded = event.timestamp;\r\n  }\r\n\r\n  //Get the timestamp that Pyroclasm was removed. Because using Hot Streak involves casting Pyroblast, it isnt possible to tell if they hard casted Pyroblast immediately before using their Hot Streak Pyroblast.\r\n  //So this is to check to see if the Pyroclasm proc was removed right before Hot Streak was removed.\r\n  onPyroclasmRemoved(event: RemoveBuffEvent | RemoveBuffStackEvent) {\r\n    this.pyroclasmProcRemoved = event.timestamp;\r\n  }\r\n\r\n  //Compares timestamps to determine if an ability was hard casted immediately before using Hot Streak.\r\n  //If Combustion is active or they are in the Firestarter or Searing Touch execute windows, then this check is ignored.\r\n  checkForHotStreakPreCasts(event: RemoveBuffEvent) {\r\n    if (this.selectedCombatant.hasBuff(SPELLS.COMBUSTION.id) || event.timestamp < this.combustionEnded + COMBUSTION_END_BUFFER || (this.hasFirestarter && this.healthPercent > FIRESTARTER_THRESHOLD) || (this.hasSearingTouch && this.healthPercent < SEARING_TOUCH_THRESHOLD)) {\r\n      debug && this.log('Pre Cast Ignored');\r\n      return;\r\n    }\r\n\r\n    const lastFireballCast = this.eventHistory.last(1, PROC_BUFFER, Events.cast.by(SELECTED_PLAYER).spell(SPELLS.FIREBALL));\r\n    if (lastFireballCast.length > 0 || event.timestamp - PROC_BUFFER < this.pyroclasmProcRemoved) {\r\n      this.castedBeforeHotStreak += 1;\r\n    } else {\r\n      this.noCastBeforeHotStreak += 1;\r\n      debug && this.log(\"No hard cast before Hot Streak\");\r\n    }\r\n  }\r\n\r\n  get castBeforeHotStreakUtil() {\r\n    return 1 - (this.noCastBeforeHotStreak / (this.castedBeforeHotStreak + this.noCastBeforeHotStreak));\r\n  }\r\n\r\n  get castBeforeHotStreakThresholds() {\r\n    return {\r\n      actual: this.castBeforeHotStreakUtil,\r\n      isLessThan: {\r\n        minor: .85,\r\n        average: .75,\r\n        major:.65,\r\n      },\r\n      style: ThresholdStyle.PERCENTAGE,\r\n    };\r\n  }\r\n\r\n  suggestions(when: When) {\r\n      when(this.castBeforeHotStreakThresholds)\r\n        .addSuggestion((suggest, actual, recommended) => suggest(<>When <SpellLink id={SPELLS.COMBUSTION.id} /> is not active{this.hasFirestarter ? ' and the target is below 90% health' : ''} {this.hasSearingTouch ? ' and the target is over 30% health' : ''}, <SpellLink id={SPELLS.HOT_STREAK.id} /> procs should be used immediately after casting <SpellLink id={SPELLS.FIREBALL.id} /> {this.hasPyroclasm ? <> or after using a <SpellLink id={SPELLS.PYROCLASM_TALENT.id} /> proc </> : ''}. This way, if one of the two abilities crit you will gain a new <SpellLink id={SPELLS.HEATING_UP.id} /> proc, and if both crit you will get a new <SpellLink id={SPELLS.HOT_STREAK.id} /> proc. You failed to do this {this.noCastBeforeHotStreak} times. If you have a <SpellLink id={SPELLS.HOT_STREAK.id} /> proc and need to move, you can hold the proc and cast <SpellLink id={SPELLS.SCORCH.id} /> once or twice until you are able to stop and cast <SpellLink id={SPELLS.FIREBALL.id} /> or you can use your procs while you move.</>)\r\n            .icon(SPELLS.HOT_STREAK.icon)\r\n            .actual(i18n._(t('mage.fire.suggestions.hostStreak.precasts.utilization')`${formatPercentage(this.castBeforeHotStreakUtil)}% Utilization`))\r\n            .recommended(`${formatPercentage(recommended)}% is recommended`));\r\n  }\r\n}\r\n\r\nexport default HotStreakPreCasts;\r\n","import React from 'react';\r\nimport SPELLS from 'common/SPELLS';\r\nimport SpellLink from 'common/SpellLink';\r\nimport { formatPercentage } from 'common/format';\r\nimport Statistic from 'interface/statistics/Statistic';\r\nimport STATISTIC_ORDER from 'interface/others/STATISTIC_ORDER';\r\nimport BoringSpellValueText from 'interface/statistics/components/BoringSpellValueText';\r\nimport Analyzer, { SELECTED_PLAYER, Options } from 'parser/core/Analyzer';\r\nimport { When, ThresholdStyle } from 'parser/core/ParseResults';\r\nimport Events, { ApplyBuffEvent, RemoveBuffEvent } from 'parser/core/Events';\r\nimport EventHistory from 'parser/shared/modules/EventHistory';\r\nimport { MS_BUFFER_250 } from 'parser/mage/shared/constants';\r\nimport { i18n } from '@lingui/core';\r\nimport { t } from '@lingui/macro';\r\n\r\nimport HotStreakPreCasts from './HotStreakPreCasts';\r\n\r\n\r\nconst debug = false;\r\n\r\nclass HotStreak extends Analyzer {\r\n  static dependencies = {\r\n    hotStreakPreCasts: HotStreakPreCasts,\r\n    eventHistory: EventHistory,\r\n  };\r\n  protected hotStreakPreCasts!: HotStreakPreCasts;\r\n  protected eventHistory!: EventHistory;\r\n\r\n  hasPyroclasm: boolean;\r\n  totalHotStreakProcs = 0;\r\n  expiredProcs = 0;\r\n  hotStreakRemoved = 0;\r\n\r\n  constructor(options: Options) {\r\n    super(options);\r\n    this.hasPyroclasm = this.selectedCombatant.hasTalent(SPELLS.PYROCLASM_TALENT.id);\r\n    this.addEventListener(Events.applybuff.to(SELECTED_PLAYER).spell(SPELLS.HOT_STREAK), this.onHotStreakApplied);\r\n    this.addEventListener(Events.removebuff.to(SELECTED_PLAYER).spell(SPELLS.HOT_STREAK), this.checkForExpiredProcs);\r\n\r\n  }\r\n\r\n  //Count the number of times Hot Streak was applied\r\n  onHotStreakApplied(event: ApplyBuffEvent) {\r\n    this.totalHotStreakProcs += 1;\r\n  }\r\n\r\n  //Checks to see if there was a Hot Streak spender cast immediately before Hot Streak was removed. If there was not, then it must have expired.\r\n  checkForExpiredProcs(event: RemoveBuffEvent) {\r\n    const lastCastEvent = this.eventHistory.last(1, MS_BUFFER_250, Events.cast.by(SELECTED_PLAYER).spell([SPELLS.PYROBLAST,SPELLS.FLAMESTRIKE]))\r\n    if (lastCastEvent.length === 0) {\r\n      debug && this.log(\"Hot Streak proc expired\");\r\n      this.expiredProcs += 1;\r\n    }\r\n  }\r\n\r\n  get usedProcs() {\r\n    return this.totalHotStreakProcs - this.expiredProcs;\r\n  }\r\n\r\n  get expiredProcsPercent() {\r\n    return (this.expiredProcs / this.totalHotStreakProcs) || 0;\r\n  }\r\n\r\n  get hotStreakUtil() {\r\n    return 1 - (this.expiredProcs / this.totalHotStreakProcs) || 0;\r\n  }\r\n\r\n  get hotStreakUtilizationThresholds() {\r\n    return {\r\n      actual: this.hotStreakUtil,\r\n      isLessThan: {\r\n        minor: 0.95,\r\n        average: 0.90,\r\n        major: 0.80,\r\n      },\r\n      style: ThresholdStyle.PERCENTAGE,\r\n    };\r\n  }\r\n\r\n  suggestions(when: When) {\r\n    when(this.hotStreakUtilizationThresholds)\r\n      .addSuggestion((suggest, actual, recommended) => suggest(<>You allowed {formatPercentage(this.expiredProcsPercent)}% of your <SpellLink id={SPELLS.HOT_STREAK.id} /> procs to expire. Try to use your procs as soon as possible to avoid this.</>)\r\n          .icon(SPELLS.HOT_STREAK.icon)\r\n          .actual(i18n._(t('mage.fire.suggestions.hotStreak.expired')`${formatPercentage(this.hotStreakUtil)}% expired`))\r\n          .recommended(`<${formatPercentage(recommended)}% is recommended`));\r\n  }\r\n\r\n  statistic() {\r\n    return (\r\n      <Statistic\r\n        position={STATISTIC_ORDER.CORE(15)}\r\n        size=\"flexible\"\r\n        tooltip={(\r\n          <>\r\n            Hot Streak is a big part of your rotation and therefore it is important that you use all the procs that you get and avoid letting them expire. <br /><br />\r\n            Additionally, to maximize your chance of getting Heating Up/Hot Streak procs, you should hard cast Fireball{this.hasPyroclasm ? ' (or Pyroblast if you have a Pyroclasm proc)' : ''} just before using your Hot Streak proc unless you are guaranteed to crit via Firestarter, Searing Touch, or Combustion. This way if one of the two spells crit you will get a new Heating Up proc, and if both spells crit then you will get a new Hot Streak proc.\r\n            <br />\r\n            <ul>\r\n              <li>Total procs - {this.totalHotStreakProcs}</li>\r\n              <li>Used procs - {this.usedProcs}</li>\r\n              <li>Expired procs - {this.expiredProcs}</li>\r\n              <li>Procs used without a Fireball - {this.hotStreakPreCasts.noCastBeforeHotStreak}</li>\r\n            </ul>\r\n          </>\r\n        )}\r\n      >\r\n        <BoringSpellValueText spell={SPELLS.HOT_STREAK}>\r\n          <>\r\n            {formatPercentage(this.hotStreakUtil,0)}% <small>Proc Utilization</small><br />\r\n            {formatPercentage(this.hotStreakPreCasts.castBeforeHotStreakUtil,0)}% <small>Procs used alongside Fireball</small>\r\n          </>\r\n        </BoringSpellValueText>\r\n      </Statistic>\r\n    );\r\n  }\r\n}\r\n\r\nexport default HotStreak;\r\n","import React from 'react';\r\nimport SPELLS from 'common/SPELLS';\r\nimport SpellLink from 'common/SpellLink';\r\nimport { formatNumber } from 'common/format';\r\nimport Analyzer, { SELECTED_PLAYER, Options } from 'parser/core/Analyzer';\r\nimport { When, ThresholdStyle } from 'parser/core/ParseResults';\r\nimport Events, { CastEvent, DamageEvent, ApplyBuffEvent, RemoveBuffEvent } from 'parser/core/Events';\r\nimport HIT_TYPES from 'game/HIT_TYPES';\r\nimport EnemyInstances, { encodeTargetString } from 'parser/shared/modules/EnemyInstances';\r\nimport { MS_BUFFER_250, FIRE_DIRECT_DAMAGE_SPELLS } from 'parser/mage/shared/constants';\r\nimport { i18n } from '@lingui/core';\r\nimport { t } from '@lingui/macro';\r\n\r\nconst debug = false;\r\n\r\nclass HotStreakWastedCrits extends Analyzer {\r\n  static dependencies = {\r\n    enemies: EnemyInstances,\r\n  };\r\n  protected enemies!: EnemyInstances;\r\n\r\n  hasPyromaniac: boolean;\r\n  lastCastEvent?: CastEvent;\r\n  wastedCrits = 0;\r\n  hasPyromaniacProc = false;\r\n  pyromaniacProc = false;\r\n  hotStreakRemoved = 0;\r\n\r\n  constructor(options: Options) {\r\n    super(options);\r\n    this.hasPyromaniac = this.selectedCombatant.hasTalent(SPELLS.PYROMANIAC_TALENT.id);\r\n    this.addEventListener(Events.cast.by(SELECTED_PLAYER).spell(FIRE_DIRECT_DAMAGE_SPELLS), this.onCast);\r\n    this.addEventListener(Events.damage.by(SELECTED_PLAYER).spell(FIRE_DIRECT_DAMAGE_SPELLS), this.onDamage);\r\n    this.addEventListener(Events.applybuff.to(SELECTED_PLAYER).spell(SPELLS.HOT_STREAK), this.checkForPyromaniacProc);\r\n    this.addEventListener(Events.removebuff.to(SELECTED_PLAYER).spell(SPELLS.HOT_STREAK), this.onHotStreakRemoved);\r\n\r\n  }\r\n\r\n  //When a spell that contributes towards Hot Streak is cast, get the event info to use for excluding the cleaves from Phoenix Flames on the damage event.\r\n  onCast(event: CastEvent) {\r\n    this.lastCastEvent = event;\r\n  }\r\n\r\n  //When a spell that contributes towards Hot Streak crits the target while Hot Streak is active, count it as a wasted crit.\r\n  //Excludes the cleave from Phoenix Flames (the cleave doesnt contribute towards Hot Streak) and excludes crits immediately after Pyromaniac procs, cause the player cant do anything to prevent that.\r\n  onDamage(event: DamageEvent) {\r\n    if (!this.lastCastEvent) {\r\n      return;\r\n    }\r\n    const spellId = event.ability.guid;\r\n    const castTarget = encodeTargetString(this.lastCastEvent.targetID, event.targetInstance);\r\n    const damageTarget = encodeTargetString(event.targetID, event.targetInstance);\r\n    if (event.hitType !== HIT_TYPES.CRIT || !this.selectedCombatant.hasBuff(SPELLS.HOT_STREAK.id,undefined,-50) || (spellId === SPELLS.PHOENIX_FLAMES.id && castTarget !== damageTarget)) {\r\n      return;\r\n    }\r\n\r\n    if (this.hasPyromaniacProc) {\r\n      debug && this.log(\"Wasted Crit Ignored\");\r\n    } else {\r\n      this.wastedCrits += 1;\r\n      this.lastCastEvent.meta = this.lastCastEvent.meta || {};\r\n      this.lastCastEvent.meta.isInefficientCast = true;\r\n      this.lastCastEvent.meta.inefficientCastReason = \"This cast crit while you already had Hot Streak and could have contributed towards your next Heating Up or Hot Streak. To avoid this, make sure you use your Hot Streak procs as soon as possible.\";\r\n      debug && this.log(\"Wasted Crit\");\r\n    }\r\n  }\r\n\r\n  //Pyromaniac doesnt trigger an event, so we need to check to see if the player immediately got a new Hot Streak immediately after using a Hot Streak\r\n  checkForPyromaniacProc(event: ApplyBuffEvent) {\r\n    if (this.hasPyromaniac && event.timestamp - this.hotStreakRemoved < MS_BUFFER_250) {\r\n      this.hasPyromaniacProc = true;\r\n    }\r\n  }\r\n\r\n  onHotStreakRemoved(event: RemoveBuffEvent) {\r\n    this.hotStreakRemoved = event.timestamp;\r\n    this.hasPyromaniacProc = false;\r\n  }\r\n\r\n  get wastedCritsPerMinute() {\r\n    return this.wastedCrits / (this.owner.fightDuration / 60000);\r\n  }\r\n\r\n  get wastedCritsThresholds() {\r\n    return {\r\n      actual: this.wastedCritsPerMinute,\r\n      isGreaterThan: {\r\n        minor: 0,\r\n        average: 1,\r\n        major: 3,\r\n      },\r\n      style: ThresholdStyle.NUMBER,\r\n    };\r\n  }\r\n\r\n  suggestions(when: When) {\r\n      when(this.wastedCritsThresholds)\r\n        .addSuggestion((suggest, actual, recommended) => suggest(<>You crit with {formatNumber(this.wastedCrits)} ({formatNumber(this.wastedCritsPerMinute)} Per Minute) direct damage abilities while <SpellLink id={SPELLS.HOT_STREAK.id} /> was active. This is a waste since those crits could have contibuted towards your next Hot Streak. Try to use your procs as soon as possible to avoid this.</>)\r\n            .icon(SPELLS.HOT_STREAK.icon)\r\n            .actual(i18n._(t('mage.fire.suggestions.hotStreak.wastedCrits')`${formatNumber(this.wastedCrits)} crits wasted`))\r\n            .recommended(`${formatNumber(recommended)} is recommended`));\r\n  }\r\n}\r\n\r\nexport default HotStreakWastedCrits;\r\n","import React from 'react';\r\nimport SPELLS from 'common/SPELLS';\r\nimport SpellLink from 'common/SpellLink';\r\nimport Analyzer, { SELECTED_PLAYER, Options } from 'parser/core/Analyzer';\r\nimport { When, ThresholdStyle } from 'parser/core/ParseResults';\r\nimport Events, { ApplyBuffEvent, ApplyBuffStackEvent, RemoveBuffEvent, RemoveBuffStackEvent } from 'parser/core/Events';\r\nimport EventHistory from 'parser/shared/modules/EventHistory';\r\nimport Statistic from 'interface/statistics/Statistic';\r\nimport STATISTIC_CATEGORY from 'interface/others/STATISTIC_CATEGORY';\r\nimport BoringSpellValueText from 'interface/statistics/components/BoringSpellValueText';\r\nimport { MS_BUFFER_250 } from 'parser/mage/shared/constants';\r\nimport { formatNumber, formatPercentage } from 'common/format';\r\nimport { i18n } from '@lingui/core';\r\nimport { t } from '@lingui/macro';\r\n\r\nconst DAMAGE_MODIFIER = 240;\r\nconst FIGHT_END_BUFFER = 5000;\r\n\r\nconst debug = false;\r\n\r\nclass Pyroclasm extends Analyzer {\r\n  static dependencies = {\r\n    eventHistory: EventHistory,\r\n  }\r\n  protected eventHistory!: EventHistory;\r\n\r\n  totalProcs = 0;\r\n  usedProcs = 0;\r\n  unusedProcs = 0;\r\n  overwrittenProcs = 0;\r\n  buffAppliedEvent?: ApplyBuffEvent | ApplyBuffStackEvent;\r\n\r\n  constructor(options: Options) {\r\n    super(options);\r\n    this.active = this.selectedCombatant.hasTalent(SPELLS.PYROCLASM_TALENT.id);\r\n    this.addEventListener(Events.applybuff.to(SELECTED_PLAYER).spell(SPELLS.PYROCLASM_BUFF), this.onPyroclasmApplied);\r\n    this.addEventListener(Events.applybuffstack.to(SELECTED_PLAYER).spell(SPELLS.PYROCLASM_BUFF), this.onPyroclasmApplied);\r\n    this.addEventListener(Events.removebuff.to(SELECTED_PLAYER).spell(SPELLS.PYROCLASM_BUFF), this.onPyroclasmRemoved);\r\n    this.addEventListener(Events.removebuffstack.to(SELECTED_PLAYER).spell(SPELLS.PYROCLASM_BUFF), this.onPyroclasmRemoved);\r\n    this.addEventListener(Events.refreshbuff.to(SELECTED_PLAYER).spell(SPELLS.PYROCLASM_BUFF), this.onPyroclasmRefresh);\r\n    this.addEventListener(Events.fightend, this.onFinished);\r\n  }\r\n\r\n  //Counts the number of times Pyroclasm was applied\r\n  onPyroclasmApplied(event: ApplyBuffEvent | ApplyBuffStackEvent) {\r\n    this.totalProcs += 1;\r\n    this.buffAppliedEvent = event;\r\n    debug && this.log(\"Buff Applied\");\r\n  }\r\n\r\n  //Checks to see if Pyroclasm was removed because it was used (there was a non instant pyroblast within 250ms) or because it expired.\r\n  onPyroclasmRemoved(event: RemoveBuffEvent | RemoveBuffStackEvent) {\r\n\r\n    //If the player hard casts Pyroblast into an instant Pyroblast there will be multiple pyroblast cast events within 250ms. So we need to grab the first one\r\n    const lastPyroblastCast = this.eventHistory.last(undefined , MS_BUFFER_250, Events.cast.by(SELECTED_PLAYER).spell(SPELLS.PYROBLAST))[0];\r\n    const lastPyroblastBeginCast = lastPyroblastCast.channel ? lastPyroblastCast.channel.start : 0;\r\n\r\n    if (lastPyroblastCast.timestamp - lastPyroblastBeginCast <= MS_BUFFER_250) {\r\n      this.unusedProcs += 1;\r\n      debug && this.log(\"Buff Expired\");\r\n    } else {\r\n      this.usedProcs += 1;\r\n      debug && this.log(\"Buff Used\");\r\n    }\r\n  }\r\n\r\n  //Counts the number of procs that were refreshed. This means that they had 2 procs available and gained another one. Therefore the gained proc is wasted.\r\n  onPyroclasmRefresh() {\r\n    this.overwrittenProcs += 1;\r\n    this.totalProcs += 1;\r\n    debug && this.log(\"Buff Refreshed\");\r\n  }\r\n\r\n  //If the player has a Pyroclasm proc when the fight ends and they got the proc within the last 5 seconds of the fight, then ignore it. Otherwise, it was wasted.\r\n  onFinished() {\r\n    if (!this.buffAppliedEvent) {\r\n      return;\r\n    }\r\n    const hasPyroclasmBuff = this.selectedCombatant.hasBuff(SPELLS.PYROCLASM_BUFF.id);\r\n    const adjustedFightEnding = this.owner.currentTimestamp - FIGHT_END_BUFFER;\r\n    if (hasPyroclasmBuff && this.buffAppliedEvent.timestamp < adjustedFightEnding) {\r\n      this.unusedProcs += 1;\r\n      debug && this.log(\"Fight ended with an unused proc\");\r\n    } else if (hasPyroclasmBuff) {\r\n      this.totalProcs -= 1;\r\n    }\r\n    debug && this.log(\"Total Procs: \" + this.totalProcs);\r\n    debug && this.log(\"Used Procs: \" + this.usedProcs);\r\n    debug && this.log(\"Unused Procs: \" + this.unusedProcs);\r\n    debug && this.log(\"Refreshed Procs: \" + this.overwrittenProcs);\r\n  }\r\n\r\n  get wastedProcs() {\r\n    return this.unusedProcs + this.overwrittenProcs;\r\n  }\r\n\r\n  get procsPerMinute() {\r\n    return this.totalProcs / (this.owner.fightDuration / 60000);\r\n  }\r\n\r\n  get procUtilization() {\r\n    return 1 - (this.wastedProcs / this.totalProcs);\r\n  }\r\n\r\n  get procUtilizationThresholds() {\r\n    return {\r\n      actual: this.procUtilization,\r\n      isLessThan: {\r\n        minor: 0.95,\r\n        average: 0.90,\r\n        major: 0.80,\r\n      },\r\n      style: ThresholdStyle.PERCENTAGE,\r\n    };\r\n  }\r\n\r\n  suggestions(when: When) {\r\n    when(this.procUtilizationThresholds)\r\n      .addSuggestion((suggest, actual, recommended) => suggest(<>You wasted {formatNumber(this.wastedProcs)} of your <SpellLink id={SPELLS.PYROCLASM_TALENT.id} /> procs. These procs make your hard cast (non instant) <SpellLink id={SPELLS.PYROBLAST.id} /> casts deal {DAMAGE_MODIFIER}% extra damage, so try and use them as quickly as possible so they do not expire or get overwritten.</>)\r\n          .icon(SPELLS.PYROCLASM_TALENT.icon)\r\n          .actual(i18n._(t('mage.fire.suggestions.pyroclasm.wastedProcs')`${formatPercentage(this.procUtilization)}% utilization`))\r\n          .recommended(`<${formatPercentage(recommended)}% is recommended`));\r\n  }\r\n\r\n  statistic() {\r\n    return (\r\n      <Statistic\r\n        size=\"flexible\"\r\n        category={STATISTIC_CATEGORY.TALENTS}\r\n        tooltip={(\r\n          <>\r\n            This is a measure of how well you utilized your Pyroclasm procs.\r\n            <ul>\r\n              <li>{this.procsPerMinute.toFixed(2)} Procs Per Minute ({this.totalProcs} Total)</li>\r\n              <li>{formatNumber(this.usedProcs)} Procs used</li>\r\n              <li>{formatNumber(this.unusedProcs)} Procs unused/expired</li>\r\n              <li>{formatNumber(this.overwrittenProcs)} Procs overwritten</li>\r\n            </ul>\r\n          </>\r\n        )}\r\n      >\r\n        <BoringSpellValueText spell={SPELLS.PYROCLASM_TALENT}>\r\n          <>\r\n            {formatPercentage(this.procUtilization,0)}% <small>Proc Utilization</small>\r\n          </>\r\n        </BoringSpellValueText>\r\n      </Statistic>\r\n    );\r\n  }\r\n}\r\n\r\nexport default Pyroclasm;\r\n","import React from 'react';\r\nimport SPELLS from 'common/SPELLS';\r\nimport SpellLink from 'common/SpellLink';\r\nimport { formatPercentage } from 'common/format';\r\nimport Statistic from 'interface/statistics/Statistic';\r\nimport STATISTIC_CATEGORY from 'interface/others/STATISTIC_CATEGORY';\r\nimport BoringSpellValueText from 'interface/statistics/components/BoringSpellValueText';\r\nimport Analyzer, { SELECTED_PLAYER, Options } from 'parser/core/Analyzer';\r\nimport { When, ThresholdStyle } from 'parser/core/ParseResults';\r\nimport Events, { CastEvent, DamageEvent, RemoveBuffEvent } from 'parser/core/Events';\r\nimport AbilityTracker from 'parser/shared/modules/AbilityTracker';\r\nimport { SEARING_TOUCH_THRESHOLD, COMBUSTION_END_BUFFER } from 'parser/mage/shared/constants';\r\nimport { i18n } from '@lingui/core';\r\nimport { t } from '@lingui/macro';\r\n\r\nexport const DAMAGE_MODIFIER = 1.50;\r\n\r\nconst debug = false;\r\n\r\nclass SearingTouch extends Analyzer {\r\n  static dependencies = {\r\n    abilityTracker: AbilityTracker,\r\n  };\r\n  protected abilityTracker!: AbilityTracker;\r\n  lastCastEvent?: CastEvent;\r\n\r\n  fireballExecuteCasts = 0;\r\n  totalNonExecuteCasts = 0;\r\n  totalExecuteCasts = 0;\r\n  healthPercent = 1;\r\n  nonExecuteScorchCasts = 0;\r\n  combustionEnded = 0;\r\n\r\n  constructor(options: Options) {\r\n    super(options);\r\n    this.active = this.selectedCombatant.hasTalent(SPELLS.SEARING_TOUCH_TALENT.id);\r\n    this.addEventListener(Events.cast.by(SELECTED_PLAYER).spell([SPELLS.FIREBALL,SPELLS.SCORCH]), this.onCast);\r\n    this.addEventListener(Events.damage.by(SELECTED_PLAYER).spell([SPELLS.FIREBALL,SPELLS.SCORCH,SPELLS.PYROBLAST,SPELLS.FIRE_BLAST]), this.onDamage);\r\n    this.addEventListener(Events.removebuff.by(SELECTED_PLAYER).spell(SPELLS.COMBUSTION), this.onCombustionEnd);\r\n  }\r\n\r\n  onCast(event: CastEvent) {\r\n    this.lastCastEvent = event;\r\n  }\r\n\r\n  onCombustionEnd(event: RemoveBuffEvent) {\r\n    this.combustionEnded = event.timestamp;\r\n  }\r\n\r\n  //When the target is under 30% health, check to see if the player cast Fireball. If they do, count it as a mistake.\r\n  onDamage(event: DamageEvent) {\r\n    const spellId = event.ability.guid;\r\n    if (event.hitPoints && event.maxHitPoints && (event.hitPoints > 0)) {\r\n      this.healthPercent = event.hitPoints / event.maxHitPoints;\r\n      this.healthPercent < SEARING_TOUCH_THRESHOLD ? this.totalExecuteCasts += 1 : this.totalNonExecuteCasts += 1;\r\n    }\r\n\r\n    if (spellId === SPELLS.SCORCH.id && this.healthPercent > SEARING_TOUCH_THRESHOLD && !this.selectedCombatant.hasBuff(SPELLS.COMBUSTION.id) && event.timestamp > this.combustionEnded + COMBUSTION_END_BUFFER) {\r\n      this.nonExecuteScorchCasts += 1;\r\n    } else if (spellId === SPELLS.FIREBALL.id && this.healthPercent < SEARING_TOUCH_THRESHOLD) {\r\n      this.fireballExecuteCasts += 1;\r\n      if (this.lastCastEvent) {\r\n        this.lastCastEvent.meta = this.lastCastEvent.meta || {};\r\n        this.lastCastEvent.meta.isInefficientCast = true;\r\n        this.lastCastEvent.meta.inefficientCastReason = `This Fireball was cast while the target was under ${formatPercentage(SEARING_TOUCH_THRESHOLD)}% health. While talented into Searing Touch, ensure that you are casting Scorch instead of Fireball while the target is under 30% health since Scorch does ${formatPercentage(DAMAGE_MODIFIER)}% additional damage.`;\r\n        debug && this.log(\"Cast Fireball under 30% Health\");\r\n      }\r\n    }\r\n  }\r\n\r\n  get executeUtil() {\r\n    return 1 - (this.fireballExecuteCasts / this.totalExecuteCasts);\r\n  }\r\n\r\n  get nonExecuteUtil() {\r\n    return 1 - (this.nonExecuteScorchCasts / this.totalNonExecuteCasts);\r\n  }\r\n\r\n  get executeSuggestionThreshold() {\r\n    return {\r\n      actual: this.executeUtil,\r\n      isLessThan: {\r\n        minor: 0.95,\r\n        average: 0.85,\r\n        major: 0.70,\r\n      },\r\n      style: ThresholdStyle.PERCENTAGE,\r\n    };\r\n  }\r\n\r\n  get nonExecuteSuggestionThreshold() {\r\n    return {\r\n      actual: this.nonExecuteUtil,\r\n      isLessThan: {\r\n        minor: 0.90,\r\n        average: 0.85,\r\n        major: 0.80,\r\n      },\r\n      style: ThresholdStyle.PERCENTAGE,\r\n    };\r\n  }\r\n\r\n  suggestions(when: When) {\r\n\t\twhen(this.executeSuggestionThreshold)\r\n\t\t\t.addSuggestion((suggest, actual, recommended) => suggest(<>You cast <SpellLink id={SPELLS.FIREBALL.id} /> instead of <SpellLink id={SPELLS.SCORCH.id} /> while the target was under 30% health {this.fireballExecuteCasts} times. When using <SpellLink id={SPELLS.SEARING_TOUCH_TALENT.id} /> always use Scorch instead of Fireball when the target is under 30% health since Scorch does 150% damage and is guaranteed to crit.</>)\r\n\t\t\t\t\t.icon(SPELLS.SEARING_TOUCH_TALENT.icon)\r\n\t\t\t\t\t.actual(i18n._(t('mage.fire.suggestions.searingTouch.executeCasts')`${formatPercentage(this.executeUtil)}% Utilization`))\r\n\t\t\t\t\t.recommended(`${formatPercentage(recommended)} is recommended`));\r\n    when(this.nonExecuteSuggestionThreshold)\r\n\t\t\t.addSuggestion((suggest, actual, recommended) => suggest(<>You cast <SpellLink id={SPELLS.SCORCH.id} /> while the target was over 30% health {this.nonExecuteScorchCasts} times. While this is acceptable when you need to move, you should aim to minimize this by limiting your movement and using spells like <SpellLink id={SPELLS.BLINK.id} /> (or <SpellLink id={SPELLS.SHIMMER_TALENT.id} />) when possible or by using your instant abilities and procs.</>)\r\n\t\t\t\t\t.icon(SPELLS.SEARING_TOUCH_TALENT.icon)\r\n\t\t\t\t\t.actual(i18n._(t('mage.fire.suggestions.searingTouch.nonExecuteScorchCasts')`${formatPercentage(this.nonExecuteUtil)}% Utilization`))\r\n\t\t\t\t\t.recommended(`${formatPercentage(recommended)} is recommended`));\r\n  }\r\n\r\n  statistic() {\r\n    return (\r\n      <Statistic\r\n        size=\"flexible\"\r\n        category={STATISTIC_CATEGORY.TALENTS}\r\n        tooltip={(\r\n          <>\r\n            When the target is under 30% health, you should cast Scorch as your filler ability instead of Fireball so that you can take advantage of the damage buff that gets applied to Scorch. You cast Fireball instead of Scorch {this.fireballExecuteCasts} times.\r\n          </>\r\n        )}\r\n      >\r\n        <BoringSpellValueText spell={SPELLS.SEARING_TOUCH_TALENT}>\r\n          <>\r\n            {formatPercentage(this.executeUtil,0)}% <small>Execute Utilization</small>\r\n          </>\r\n        </BoringSpellValueText>\r\n      </Statistic>\r\n    );\r\n  }\r\n}\r\n\r\nexport default SearingTouch;\r\n","import React from 'react';\r\nimport SPELLS from 'common/SPELLS';\r\nimport SpellLink from 'common/SpellLink';\r\nimport { formatPercentage } from 'common/format';\r\nimport Analyzer, { SELECTED_PLAYER, Options } from 'parser/core/Analyzer';\r\nimport { When, ThresholdStyle } from 'parser/core/ParseResults';\r\nimport Events, { CastEvent } from 'parser/core/Events';\r\nimport AbilityTracker from 'parser/shared/modules/AbilityTracker';\r\nimport EnemyInstances from 'parser/shared/modules/EnemyInstances';\r\nimport { MS_BUFFER_100 } from 'parser/mage/shared/constants';\r\nimport { i18n } from '@lingui/core';\r\nimport { t } from '@lingui/macro';\r\n\r\nclass MeteorRune extends Analyzer {\r\n  static dependencies = {\r\n    abilityTracker: AbilityTracker,\r\n    enemies: EnemyInstances,\r\n  };\r\n  protected abilityTracker!: AbilityTracker;\r\n  protected enemies!: EnemyInstances;\r\n\r\n  lastRuneCast = 0\r\n  badMeteor = 0\r\n\r\n  constructor(options: Options) {\r\n    super(options);\r\n    const hasMeteor = this.selectedCombatant.hasTalent(SPELLS.METEOR_TALENT.id);\r\n    const hasRuneOfPower = this.selectedCombatant.hasTalent(SPELLS.RUNE_OF_POWER_TALENT.id);\r\n    this.active = hasMeteor && hasRuneOfPower;\r\n    if (!this.active) {\r\n      return;\r\n    }\r\n    this.addEventListener(Events.cast.by(SELECTED_PLAYER).spell(SPELLS.METEOR_TALENT), this.onMeteor);\r\n    this.addEventListener(Events.cast.by(SELECTED_PLAYER).spell(SPELLS.RUNE_OF_POWER_TALENT), this.onRune);\r\n  }\r\n\r\n  onRune(event: CastEvent) {\r\n    this.lastRuneCast = event.timestamp;\r\n  }\r\n\r\n  onMeteor(event: CastEvent) {\r\n    if (!this.selectedCombatant.hasBuff(SPELLS.RUNE_OF_POWER_BUFF.id) && event.timestamp - this.lastRuneCast > MS_BUFFER_100) {\r\n      this.badMeteor += 1;\r\n    }\r\n  }\r\n\r\n  get totalMeteorCasts() {\r\n    return this.abilityTracker.getAbility(SPELLS.METEOR_TALENT.id).casts;\r\n  }\r\n\r\n  get meteorUtilization() {\r\n    return 1 - (this.badMeteor / this.totalMeteorCasts);\r\n  }\r\n\r\n  get meteorUtilSuggestionThresholds() {\r\n    return {\r\n      actual: this.meteorUtilization,\r\n      isLessThan: {\r\n        minor: 0.95,\r\n        average: 0.90,\r\n        major: 0.85,\r\n      },\r\n      style: ThresholdStyle.PERCENTAGE,\r\n    };\r\n  }\r\n\r\n  suggestions(when: When) {\r\n\t\twhen(this.meteorUtilSuggestionThresholds)\r\n\t\t\t.addSuggestion((suggest, actual, recommended) => suggest(<>You cast <SpellLink id={SPELLS.METEOR_TALENT.id} /> without <SpellLink id={SPELLS.RUNE_OF_POWER_TALENT.id} /> {this.badMeteor} times. In order to get the most out of <SpellLink id={SPELLS.METEOR_TALENT.id} /> you should always cast it while being buffed by <SpellLink id={SPELLS.RUNE_OF_POWER_TALENT.id} />.</>)\r\n\t\t\t\t\t.icon(SPELLS.METEOR_TALENT.icon)\r\n\t\t\t\t\t.actual(i18n._(t('mage.fire.suggestions.meteor.runeOfPower.utilization')`${formatPercentage(this.meteorUtilization)}% Utilization`))\r\n\t\t\t\t\t.recommended(`<${formatPercentage(recommended)}% is recommended`));\r\n\t}\r\n}\r\n\r\nexport default MeteorRune;\r\n","import React from 'react';\r\nimport SPELLS from 'common/SPELLS';\r\nimport SpellLink from 'common/SpellLink';\r\nimport { formatPercentage } from 'common/format';\r\nimport Analyzer, { SELECTED_PLAYER, Options } from 'parser/core/Analyzer';\r\nimport { When, ThresholdStyle } from 'parser/core/ParseResults';\r\nimport Events, { DamageEvent, ApplyBuffEvent, RemoveBuffEvent } from 'parser/core/Events';\r\nimport AbilityTracker from 'parser/shared/modules/AbilityTracker';\r\nimport EnemyInstances from 'parser/shared/modules/EnemyInstances';\r\nimport EventHistory from 'parser/shared/modules/EventHistory';\r\nimport { i18n } from '@lingui/core';\r\nimport { t } from '@lingui/macro';\r\n\r\nclass MeteorCombustion extends Analyzer {\r\n  static dependencies = {\r\n    abilityTracker: AbilityTracker,\r\n    enemies: EnemyInstances,\r\n    eventHistory: EventHistory,\r\n  };\r\n  protected abilityTracker!: AbilityTracker;\r\n  protected enemies!: EnemyInstances;\r\n  protected eventHistory!: EventHistory;\r\n\r\n  lastRuneCast = 0\r\n  badMeteor = 0\r\n  meteorCast = false;\r\n  meteorDuringCombustion = false;\r\n  meteorInCombustion = 0;\r\n  combustionActive = false;\r\n\r\n  constructor(options: Options) {\r\n    super(options);\r\n    this.active = this.selectedCombatant.hasTalent(SPELLS.METEOR_TALENT.id);\r\n    if (!this.active) {\r\n      return;\r\n    }\r\n    this.addEventListener(Events.damage.by(SELECTED_PLAYER).spell(SPELLS.METEOR_DAMAGE), this.onMeteorDamage);\r\n    this.addEventListener(Events.applybuff.to(SELECTED_PLAYER).spell(SPELLS.COMBUSTION), this.onCombustionStart);\r\n    this.addEventListener(Events.removebuff.to(SELECTED_PLAYER).spell(SPELLS.COMBUSTION), this.onCombustionEnd);\r\n  }\r\n\r\n  onMeteorDamage(event: DamageEvent) {\r\n    if (this.combustionActive) {\r\n      this.meteorCast = true;\r\n    }\r\n  }\r\n\r\n  onCombustionStart(event: ApplyBuffEvent) {\r\n    //The Sun King's Blessing Legendary effect has a chance to trigger a 6sec Combust which was throwing this stat off, so we are just checking to see if Combustion was cast within 100ms of the buff being applied.\r\n    const lastCast = this.eventHistory.last(1, 100, Events.cast.by(SELECTED_PLAYER).spell(SPELLS.COMBUSTION));\r\n    if (lastCast.length !== 0) {\r\n      this.combustionActive = true;\r\n    }\r\n  }\r\n\r\n  onCombustionEnd(event: RemoveBuffEvent) {\r\n    if (!this.combustionActive) {\r\n      return;\r\n    }\r\n\r\n    if (this.meteorCast) {\r\n      this.meteorInCombustion += 1;\r\n    }\r\n    this.combustionActive = false;\r\n    this.meteorDuringCombustion = false;\r\n  }\r\n\r\n  get totalMeteorCasts() {\r\n    return this.abilityTracker.getAbility(SPELLS.METEOR_TALENT.id).casts;\r\n  }\r\n\r\n  get totalCombustionCasts() {\r\n    return this.abilityTracker.getAbility(SPELLS.COMBUSTION.id).casts;\r\n  }\r\n\r\n  get combustionWithoutMeteor() {\r\n    return this.totalCombustionCasts - this.meteorInCombustion;\r\n  }\r\n\r\n  get combustionUtilization() {\r\n    return 1 - (this.combustionWithoutMeteor / this.totalCombustionCasts);\r\n  }\r\n\r\n  get meteorMaxCasts() {\r\n    return Math.round(this.owner.fightDuration / 60000 - 0.3);\r\n  }\r\n\r\n  get meteorCastEfficiency() {\r\n    console.log(Math.round(this.owner.fightDuration / 60000 - 0.25));\r\n    return this.totalMeteorCasts / this.meteorMaxCasts;\r\n  }\r\n\r\n  get meteorCombustionSuggestionThresholds() {\r\n    return {\r\n      actual: this.combustionUtilization,\r\n      isLessThan: {\r\n        minor: 1,\r\n        average: 1,\r\n        major: 1,\r\n      },\r\n      style: ThresholdStyle.PERCENTAGE,\r\n    };\r\n  }\r\n\r\n  suggestions(when: When) {\r\n    when(this.meteorCombustionSuggestionThresholds)\r\n\t\t\t.addSuggestion((suggest, actual, recommended) => suggest(<>You failed to cast <SpellLink id={SPELLS.METEOR_TALENT.id} /> during <SpellLink id={SPELLS.COMBUSTION.id} /> {this.combustionWithoutMeteor} times. In order to make the most of Combustion and <SpellLink id={SPELLS.IGNITE.id} />, you should always cast Meteor during Combustion. If Meteor will not come off cooldown before Combustion is available, then you should hold Meteor for Combustion.</>)\r\n\t\t\t\t\t.icon(SPELLS.METEOR_TALENT.icon)\r\n\t\t\t\t\t.actual(i18n._(t('mage.fire.suggestions.meteor.combustion.utilization')`${formatPercentage(this.combustionUtilization)}% Utilization`))\r\n\t\t\t\t\t.recommended(`<${formatPercentage(recommended)}% is recommended`));\r\n\t}\r\n}\r\n\r\nexport default MeteorCombustion;\r\n","import React from 'react';\r\nimport SPELLS from 'common/SPELLS';\r\nimport SpellLink from 'common/SpellLink';\r\nimport { formatPercentage } from 'common/format';\r\nimport Analyzer, { Options } from 'parser/core/Analyzer';\r\nimport { When, ThresholdStyle } from 'parser/core/ParseResults';\r\nimport Statistic from 'interface/statistics/Statistic';\r\nimport STATISTIC_CATEGORY from 'interface/others/STATISTIC_CATEGORY';\r\nimport BoringSpellValueText from 'interface/statistics/components/BoringSpellValueText';\r\nimport AbilityTracker from 'parser/shared/modules/AbilityTracker';\r\nimport EnemyInstances from 'parser/shared/modules/EnemyInstances';\r\nimport { i18n } from '@lingui/core';\r\nimport { t } from '@lingui/macro';\r\n\r\nimport MeteorRune from './MeteorRune';\r\nimport MeteorCombustion from './MeteorCombustion';\r\n\r\nclass Meteor extends Analyzer {\r\n  static dependencies = {\r\n    abilityTracker: AbilityTracker,\r\n    enemies: EnemyInstances,\r\n    meteorRune: MeteorRune,\r\n    meteorCombustion: MeteorCombustion,\r\n  };\r\n  protected abilityTracker!: AbilityTracker;\r\n  protected enemies!: EnemyInstances;\r\n  protected meteorRune!: MeteorRune;\r\n  protected meteorCombustion!: MeteorCombustion;\r\n\r\n  constructor(options: Options) {\r\n    super(options);\r\n    this.active = this.selectedCombatant.hasTalent(SPELLS.METEOR_TALENT.id);\r\n  }\r\n\r\n  get totalMeteorCasts() {\r\n    return this.abilityTracker.getAbility(SPELLS.METEOR_TALENT.id).casts;\r\n  }\r\n\r\n  get meteorMaxCasts() {\r\n    return Math.round(this.owner.fightDuration / 60000 - 0.3) + 1;\r\n  }\r\n\r\n  get meteorCastEfficiency() {\r\n    return this.totalMeteorCasts / this.meteorMaxCasts;\r\n  }\r\n\r\n  get meteorEfficiencySuggestionThresholds() {\r\n    return {\r\n      actual: this.meteorCastEfficiency,\r\n      isLessThan: {\r\n        minor: 1,\r\n        average: 1,\r\n        major: 1,\r\n      },\r\n      style: ThresholdStyle.PERCENTAGE,\r\n    };\r\n  }\r\n\r\n  suggestions(when: When) {\r\n    when(this.meteorEfficiencySuggestionThresholds)\r\n\t\t\t.addSuggestion((suggest, actual, recommended) => suggest(<>You could have cast <SpellLink id={SPELLS.METEOR_TALENT.id} /> {this.meteorMaxCasts} times during this fight, but you only cast it {this.totalMeteorCasts} times. While you should not cast Meteor on cooldown (since you need to have it available for <SpellLink id={SPELLS.COMBUSTION.id} />), you should be casting it at least once per minute.</>)\r\n\t\t\t\t\t.icon(SPELLS.METEOR_TALENT.icon)\r\n\t\t\t\t\t.actual(i18n._(t('mage.fire.suggestions.meteor.efficiency')`${formatPercentage(this.meteorCastEfficiency)}% Utilization`))\r\n\t\t\t\t\t.recommended(`<${formatPercentage(recommended)}% is recommended`));\r\n\t}\r\n\r\n  statistic() {\r\n    return (\r\n      <Statistic\r\n        size=\"flexible\"\r\n        category={STATISTIC_CATEGORY.TALENTS}\r\n        tooltip={(\r\n          <>\r\n            This is a measure of how well you utilized your Meteor casts.\r\n            <ul>\r\n              <li>{this.totalMeteorCasts} Total Meteor casts</li>\r\n              <li>{this.meteorMaxCasts} Adjusted max casts</li>\r\n              <li>{this.meteorRune.totalMeteorCasts - this.meteorRune.badMeteor} Meteor casts during Rune of Power</li>\r\n              <li>{this.meteorRune.badMeteor} Meteor casts without Rune of Power</li>\r\n              <li>{this.meteorCombustion.combustionWithoutMeteor} Combustion casts without Meteor</li>\r\n            </ul>\r\n          </>\r\n        )}\r\n      >\r\n        <BoringSpellValueText spell={SPELLS.METEOR_TALENT}>\r\n          <>\r\n            {formatPercentage(this.meteorCastEfficiency,0)}% <small>Adjusted Cast Efficiency</small><br />\r\n            {formatPercentage(this.meteorRune.meteorUtilization,0)}% <small>Overall Utilization</small><br />\r\n            {formatPercentage(this.meteorCombustion.combustionUtilization,0)}% <small>Utilization during Combustion</small>\r\n          </>\r\n        </BoringSpellValueText>\r\n      </Statistic>\r\n    );\r\n  }\r\n}\r\n\r\nexport default Meteor;\r\n","import React from 'react';\r\n\r\nimport CoreAlwaysBeCasting from 'parser/shared/modules/AlwaysBeCasting';\r\nimport { When } from 'parser/core/ParseResults';\r\nimport SPELLS from 'common/SPELLS';\r\nimport { formatPercentage } from 'common/format';\r\nimport { STATISTIC_ORDER } from 'interface/others/StatisticBox';\r\nimport SpellLink from 'common/SpellLink';\r\nimport { i18n } from '@lingui/core';\r\nimport { t } from '@lingui/macro';\r\n\r\nclass AlwaysBeCasting extends CoreAlwaysBeCasting {\r\n  suggestions(when: When) {\r\n    const deadTimePercentage = this.totalTimeWasted / this.owner.fightDuration;\r\n    const boss = this.owner.boss;\r\n\r\n    if (!boss || !boss.fight.disableDowntimeSuggestion) {\r\n      when(deadTimePercentage).isGreaterThan(0.2)\r\n        .addSuggestion((suggest, actual, recommended) => suggest(<span>Your downtime can be improved. Try to Always Be Casting (ABC), try to reduce the delay between casting spells. If you have to move, try casting <SpellLink id={SPELLS.SCORCH.id} />.</span>)\r\n            .icon('spell_mage_altertime')\r\n            .actual(i18n._(t('mage.fire.suggestions.alwaysBeCasting.downtime')`${formatPercentage(actual)}% downtime`))\r\n            .recommended(`<${formatPercentage(recommended)}% is recommended`)\r\n            .regular(recommended + 0.15).major(recommended + 0.2));\r\n    }\r\n  }\r\n\r\n  statisticOrder: any = STATISTIC_ORDER.CORE(1);\r\n}\r\n\r\nexport default AlwaysBeCasting;\r\n","import React from 'react';\r\nimport PropTypes from 'prop-types';\r\nimport SPELLS from 'common/SPELLS';\r\nimport SpellLink from 'common/SpellLink';\r\nimport Checklist from 'parser/shared/modules/features/Checklist';\r\nimport Rule from 'parser/shared/modules/features/Checklist/Rule';\r\nimport Requirement from 'parser/shared/modules/features/Checklist/Requirement';\r\nimport PreparationRule from 'parser/shared/modules/features/Checklist/PreparationRule';\r\nimport GenericCastEfficiencyRequirement from 'parser/shared/modules/features/Checklist/GenericCastEfficiencyRequirement';\r\n\r\nconst FireMageChecklist = ({ combatant, castEfficiency, thresholds }: any) => {\r\n  const AbilityRequirement = (props: any) => (\r\n    <GenericCastEfficiencyRequirement\r\n      castEfficiency={castEfficiency.getCastEfficiencyForSpellId(props.spell)}\r\n      {...props}\r\n    />\r\n  );\r\n  AbilityRequirement.propTypes = {\r\n    spell: PropTypes.number.isRequired,\r\n  };\r\n\r\n  return (\r\n    <Checklist>\r\n      <Rule\r\n        name=\"Use your cooldowns\"\r\n        description={(\r\n          <>\r\n            Using your cooldown abilities as often as possible can help raise your dps significantly. Some help more than others, but as a general rule of thumb you should be looking to use most of your damaging abilities and damage cooldowns as often as possible unless you need to save them for a priority burst phase that is coming up soon.\r\n          </>\r\n        )}\r\n      >\r\n        <AbilityRequirement spell={SPELLS.COMBUSTION.id} />\r\n        <AbilityRequirement spell={SPELLS.FIRE_BLAST.id} />\r\n        <AbilityRequirement spell={SPELLS.PHOENIX_FLAMES.id} />\r\n        {combatant.hasTalent(SPELLS.BLAST_WAVE_TALENT.id) && <AbilityRequirement spell={SPELLS.BLAST_WAVE_TALENT.id} />}\r\n        {combatant.hasTalent(SPELLS.RUNE_OF_POWER_TALENT.id) && <AbilityRequirement spell={SPELLS.RUNE_OF_POWER_TALENT.id} />}\r\n        {combatant.hasTalent(SPELLS.LIVING_BOMB_TALENT.id) && <AbilityRequirement spell={SPELLS.LIVING_BOMB_TALENT.id} />}\r\n        {combatant.hasTalent(SPELLS.METEOR_TALENT.id) && (\r\n          <Requirement\r\n            name={<><SpellLink id={SPELLS.METEOR_TALENT.id} /></>}\r\n            thresholds={thresholds.meteorEfficiency}\r\n          />\r\n        )}\r\n      </Rule>\r\n      <Rule\r\n        name=\"Use Combustion effectively\"\r\n        description={(\r\n          <>\r\n            Using <SpellLink id={SPELLS.COMBUSTION.id} /> properly is one of the most important aspects of playing Fire well. Therefore it is critical that you make the most of the time that you have while Combustion is active. This include things such as not wasting time or GCDs while Combustion is active and ensuring that you properly setup for your \"Combustion Window\".\r\n          </>\r\n        )}\r\n      >\r\n        <Requirement\r\n          name=\"Fire Blast Charges\"\r\n          thresholds={thresholds.fireBlastCombustionCharges}\r\n          tooltip=\"When Combustion is getting close to becomming available, it is important to save a couple Fire Blast charges to be used during the Combustion Window. This will help ensure that you can get as many Hot Streak procs as possible during Combustion.\"\r\n        />\r\n        <Requirement\r\n          name=\"Phoenix Flames Charges\"\r\n          thresholds={thresholds.phoenixFlamesCombustionCharges}\r\n          tooltip=\"When outside of Combustion, you should avoid using your Phoenix Flames charges so that they have time to come off cooldown before Combustion is available again. This will ensure that you have a couple charges so you can get as many Hot Streak procs as possible before Combustion ends. If you are about to cap on Phoenix Flames charges, then it is acceptable to use one.\"\r\n        />\r\n        {combatant.hasTalent(SPELLS.FIRESTARTER_TALENT.id) && (\r\n          <Requirement\r\n            name=\"Combustion during Firestarter\"\r\n            thresholds={thresholds.firestarterCombustionUsage}\r\n            tooltip=\"If you are talented into Firestarter, you should ensure that you do not cast Combustion while the boss is above 90% Health. This would be a waste considering every spell is guaranteed to crit while the boss is above 90% Health, which defeats the purpose of using Combustion. Instead, you should use Combustion when the boss gets to 89% so you can continue the streak of guaranteed crits once Firestarter finishes.\"\r\n          />\r\n        )}\r\n        <Requirement\r\n          name=\"Bad Scorch Uses\"\r\n          thresholds={thresholds.scorchSpellUsageDuringCombustion}\r\n          tooltip=\"It is very important to use your time during Combustion wisely to get as many Hot Streak procs as possible before Combustion ends. To accomplish this, you should be stringing your guaranteed crit spells (Fireblast and Phoenix Flames) together to perpetually convert Heating Up to Hot Streak as many times as possible. If you run out of instant spells, cast Scorch instead.\"\r\n        />\r\n        <Requirement\r\n          name=\"Bad Fireball Uses\"\r\n          thresholds={thresholds.fireballSpellUsageDuringCombustion}\r\n          tooltip=\"Due to Combustion's short duration, you should never cast Fireball during Combustion. Instead, you should use your instant cast abilities like Fireblast and Phoenix Flames. If you run out of instant abilities, cast Scorch instead since it's cast time is shorter.\"\r\n        />\r\n      </Rule>\r\n      <Rule\r\n        name=\"Use your procs effectively\"\r\n        description={(\r\n          <>\r\n            Fire Mage revolves almost entirely around utilizing your procs effectively. Therefore it is very important that you manage your procs correctly to ensure that you get the most out of them.\r\n          </>\r\n        )}\r\n      >\r\n        <Requirement\r\n          name=\"Hot Streak Proc Utilization\"\r\n          thresholds={thresholds.hotStreakUtilization}\r\n          tooltip=\"Your Hot Streak Utilization. The bulk of your rotation revolves around successfully converting Heating Up procs into Hot Streak and using those Hot Streak procs effectively. Unless it is unavoidable, you should never let your Hot Streak procs expire without using them.\"\r\n        />\r\n        <Requirement\r\n          name=\"Wasted Crits Per Minute\"\r\n          thresholds={thresholds.hotStreakWastedCrits}\r\n          tooltip=\"In addition to converting Heating Up to Hot Streak, it is also very important to use your Hot Streak procs as quickly as possible. This is primarily because you are unable to get a Heating Up proc if you already have Hot Streak. Therefore, casting abilities that can give you Heating Up while you have Hot Streak would be a big waste.\"\r\n        />\r\n        <Requirement\r\n          name=\"Hardcast into Hot Streak\"\r\n          thresholds={thresholds.hotStreakPreCasts}\r\n          tooltip=\"Unless you are in Combustion and have Fire Blast/Phoenix Flames charges, you should always cast an ability that can generate Heating Up before using your Hot Streak proc. As an example, if you have Hot Streak and you cast Fireball > Pyroblast to use your Hot Streak, and one of those spells crit, then you will get Heating Up. If both spells crit, then you will instantly get a new Hot Streak proc.\"\r\n        />\r\n        <Requirement\r\n          name=\"Phoenix Flames Usage\"\r\n          thresholds={thresholds.phoenixFlamesHeatingUpUsage}\r\n          tooltip=\"Because Phoenix Flames is guaranteed to crit, you should only use it to convert Heating Up into Hot Streak.\"\r\n        />\r\n        <Requirement\r\n          name=\"Fire Blast Usage\"\r\n          thresholds={thresholds.fireBlastHeatingUpUsage}\r\n          tooltip=\"Because Fire Blast is guaranteed to crit, you should only use it to convert Heating Up into Hot Streak.\"\r\n        />\r\n      </Rule>\r\n      <Rule\r\n        name=\"Use your talents effectively\"\r\n        description=\"Regardless of which talents you select, you should ensure that you are utilizing them properly. If you are having trouble effectively using a particular talent, you should consider taking a different talent that you can utilize properly or focus on effectively using the talents that you have selected.\"\r\n      >\r\n        {combatant.hasTalent(SPELLS.PYROCLASM_TALENT.id) && (\r\n          <Requirement\r\n            name=\"Pyroclasm Utilization\"\r\n            thresholds={thresholds.pyroclasmUtilization}\r\n            tooltip=\"Pyroclasm has a chance to give you a buff that makes your next non instant Pyroblast deal 225% additional damage. You should ensure that you are using these procs (especially during Combustion) somewhat quickly to ensure you dont waste or overwrite any of these procs.\"\r\n          />\r\n        )}\r\n        {combatant.hasTalent(SPELLS.SEARING_TOUCH_TALENT.id) && (\r\n          <Requirement\r\n            name=\"Searing Touch Utilization\"\r\n            thresholds={thresholds.searingTouchUtilization}\r\n            tooltip=\"Searing Touch causes your Scorch ability to deal 150% additional damage and be guaranteed to crit when the target is under 30% health. Therefore it is important that when the target is under 30% health, you cast Scorch instead of Fireball.\"\r\n          />\r\n        )}\r\n        {combatant.hasTalent(SPELLS.RUNE_OF_POWER_TALENT.id) && (\r\n          <Requirement\r\n            name=\"Rune of Power Uptime\"\r\n            thresholds={thresholds.runeOfPowerBuffUptime}\r\n            tooltip=\"Using Rune of Power effectively means being able to stay within the range of it for it's entire duration. If you are unable to do so or if you frequently have to move out of the range of the buff, consider taking a different talent instead.\"\r\n          />\r\n        )}\r\n        {combatant.hasTalent(SPELLS.RUNE_OF_POWER_TALENT.id) && combatant.hasTalent(SPELLS.METEOR_TALENT.id) && (\r\n          <Requirement\r\n            name=\"Meteor Overall Utilization\"\r\n            thresholds={thresholds.meteorUtilization}\r\n            tooltip=\"In order to get the most out of your Meteor casts, you should only cast Meteor while you are buffed by Rune of Power.\"\r\n          />\r\n        )}\r\n        {combatant.hasTalent(SPELLS.METEOR_TALENT.id) && (\r\n          <Requirement\r\n            name=\"Meteor Utilization During Combustion\"\r\n            thresholds={thresholds.meteorCombustionUtilization}\r\n            tooltip=\"In order to get the most out of your Combustion, you should always cast Meteor during Combustion. If Meteor will not come off cooldown before Combustion, then you should save Meteor for Combustion.\"\r\n          />\r\n        )}\r\n      </Rule>\r\n      <Rule\r\n        name=\"Avoid downtime\"\r\n        description={(\r\n          <>\r\n            As a DPS, it is important to spend as much time casting as possible as if you are not casting then you are not doing damage. Therefore it is important to minimize your movements, stay within range of the target, and avoid cancelling casts if you can avoid it. While some fights will have an amount of time that is unavoidable downtime; the more you can minimize that downtime, the better.\r\n          </>\r\n        )}\r\n      >\r\n        <Requirement name=\"Downtime\" thresholds={thresholds.downtimeSuggestionThresholds} />\r\n        <Requirement name=\"Cancelled Casts\" thresholds={thresholds.cancelledCasts} />\r\n      </Rule>\r\n\r\n      <PreparationRule thresholds={thresholds}>\r\n        <Requirement name=\"Arcane Intellect active\" thresholds={thresholds.arcaneIntellectUptime} />\r\n      </PreparationRule>\r\n    </Checklist>\r\n  );\r\n};\r\n\r\nFireMageChecklist.propTypes = {\r\n  castEfficiency: PropTypes.object.isRequired,\r\n  combatant: PropTypes.shape({\r\n    hasTalent: PropTypes.func.isRequired,\r\n  }).isRequired,\r\n  thresholds: PropTypes.object.isRequired,\r\n};\r\n\r\nexport default FireMageChecklist;\r\n","import React from 'react';\r\n\r\nimport BaseChecklist from 'parser/shared/modules/features/Checklist/Module';\r\nimport CastEfficiency from 'parser/shared/modules/CastEfficiency';\r\nimport Combatants from 'parser/shared/modules/Combatants';\r\nimport PreparationRuleAnalyzer from 'parser/shared/modules/features/Checklist/PreparationRuleAnalyzer';\r\n\r\nimport CombustionCharges from '../features/CombustionCharges';\r\nimport CombustionFirestarter from '../features/CombustionFirestarter';\r\nimport CombustionSpellUsage from '../features/CombustionSpellUsage';\r\nimport HeatingUp from '../features/HeatingUp';\r\nimport HotStreak from '../features/HotStreak';\r\nimport HotStreakWastedCrits from '../features/HotStreakWastedCrits';\r\nimport HotStreakPreCasts from '../features/HotStreakPreCasts';\r\nimport Pyroclasm from '../features/Pyroclasm';\r\nimport SearingTouch from '../talents/SearingTouch';\r\nimport Meteor from '../talents/Meteor';\r\nimport MeteorRune from '../talents/MeteorRune';\r\nimport MeteorCombustion from '../talents/MeteorCombustion';\r\nimport AlwaysBeCasting from '../features/AlwaysBeCasting';\r\nimport ArcaneIntellect from '../../../shared/modules/features/ArcaneIntellect';\r\nimport CancelledCasts from '../../../shared/modules/features/CancelledCasts';\r\nimport RuneOfPower from '../../../shared/modules/features/RuneOfPower';\r\n\r\nimport Component from './Component';\r\n\r\nclass Checklist extends BaseChecklist {\r\n  static dependencies = {\r\n    combatants: Combatants,\r\n    combustionCharges: CombustionCharges,\r\n    combustionFirestarter: CombustionFirestarter,\r\n    combustionSpellUsage: CombustionSpellUsage,\r\n    heatingUp: HeatingUp,\r\n    hotStreak: HotStreak,\r\n    hotStreakWastedCrits: HotStreakWastedCrits,\r\n    hotStreakPreCasts: HotStreakPreCasts,\r\n    pyroclasm: Pyroclasm,\r\n    searingTouch: SearingTouch,\r\n    meteor: Meteor,\r\n    meteorRune: MeteorRune,\r\n    meteorCombustion: MeteorCombustion,\r\n    castEfficiency: CastEfficiency,\r\n    arcaneIntellect: ArcaneIntellect,\r\n    cancelledCasts: CancelledCasts,\r\n    runeOfPower: RuneOfPower,\r\n    alwaysBeCasting: AlwaysBeCasting,\r\n    preparationRuleAnalyzer: PreparationRuleAnalyzer,\r\n  };\r\n  protected combatants!: Combatants;\r\n  protected combustionCharges!: CombustionCharges;\r\n  protected combustionFirestarter!: CombustionFirestarter;\r\n  protected combustionSpellUsage!: CombustionSpellUsage;\r\n  protected heatingUp!: HeatingUp;\r\n  protected hotStreak!: HotStreak;\r\n  protected hotStreakWastedCrits!: HotStreakWastedCrits;\r\n  protected hotStreakPreCasts!: HotStreakPreCasts;\r\n  protected pyroclasm!: Pyroclasm;\r\n  protected searingTouch!: SearingTouch;\r\n  protected meteor!: Meteor;\r\n  protected meteorRune!: MeteorRune;\r\n  protected meteorCombustion!: MeteorCombustion;\r\n  protected castEfficiency!: CastEfficiency;\r\n  protected arcaneIntellect!: ArcaneIntellect;\r\n  protected cancelledCasts!: CancelledCasts;\r\n  protected runeOfPower!: RuneOfPower;\r\n  protected alwaysBeCasting!: AlwaysBeCasting;\r\n  protected preparationRuleAnalyzer!: PreparationRuleAnalyzer;\r\n\r\n\r\n  render() {\r\n    return (\r\n      <Component\r\n        combatant={this.combatants.selected}\r\n        castEfficiency={this.castEfficiency}\r\n        thresholds={{\r\n          ...this.preparationRuleAnalyzer.thresholds,\r\n\r\n          downtimeSuggestionThresholds: this.alwaysBeCasting.downtimeSuggestionThresholds,\r\n          phoenixFlamesCombustionCharges: this.combustionCharges.phoenixFlamesThresholds,\r\n          fireBlastCombustionCharges: this.combustionCharges.fireBlastThresholds,\r\n          firestarterCombustionUsage: this.combustionFirestarter.SuggestionThresholds,\r\n          scorchSpellUsageDuringCombustion: this.combustionSpellUsage.scorchDuringCombustionThresholds,\r\n          fireballSpellUsageDuringCombustion: this.combustionSpellUsage.fireballDuringCombustionThresholds,\r\n          fireBlastHeatingUpUsage: this.heatingUp.fireBlastUtilSuggestionThresholds,\r\n          phoenixFlamesHeatingUpUsage: this.heatingUp.phoenixFlamesUtilSuggestionThresholds,\r\n          hotStreakUtilization: this.hotStreak.hotStreakUtilizationThresholds,\r\n          hotStreakWastedCrits: this.hotStreakWastedCrits.wastedCritsThresholds,\r\n          hotStreakPreCasts: this.hotStreakPreCasts.castBeforeHotStreakThresholds,\r\n          pyroclasmUtilization: this.pyroclasm.procUtilizationThresholds,\r\n          searingTouchUtilization: this.searingTouch.executeSuggestionThreshold,\r\n          meteorEfficiency: this.meteor.meteorEfficiencySuggestionThresholds,\r\n          meteorUtilization: this.meteorRune.meteorUtilSuggestionThresholds,\r\n          meteorCombustionUtilization: this.meteorCombustion.meteorCombustionSuggestionThresholds,\r\n          arcaneIntellectUptime: this.arcaneIntellect.suggestionThresholds,\r\n          cancelledCasts: this.cancelledCasts.suggestionThresholds,\r\n          runeOfPowerBuffUptime: this.runeOfPower.roundedSecondsSuggestionThresholds,\r\n        }}\r\n      />\r\n    );\r\n  }\r\n}\r\n\r\nexport default Checklist;\r\n","import SPELLS from 'common/SPELLS';\r\nimport CoreBuffs from 'parser/core/modules/Buffs';\r\nimport BLOODLUST_BUFFS from 'game/BLOODLUST_BUFFS';\r\n\r\nclass Buffs extends CoreBuffs {\r\n  buffs() {\r\n    const combatant = this.selectedCombatant;\r\n\r\n    // This should include ALL buffs that can be applied by your spec.\r\n    // This data can be used by various kinds of modules to improve their results, and modules added in the future may rely on buffs that aren't used today.\r\n    return [\r\n      {\r\n        spellId: SPELLS.HEATING_UP.id,\r\n        timelineHighlight: true,\r\n      },\r\n      {\r\n        spellId: SPELLS.HOT_STREAK.id,\r\n        timelineHighlight: true,\r\n      },\r\n      {\r\n        spellId: SPELLS.COMBUSTION.id,\r\n        triggeredBySpellId: SPELLS.COMBUSTION.id,\r\n        timelineHighlight: true,\r\n      },\r\n      {\r\n        spellId: SPELLS.RUNE_OF_POWER_BUFF.id,\r\n        enabled: combatant.hasTalent(SPELLS.RUNE_OF_POWER_TALENT),\r\n        timelineHighlight: true,\r\n      },\r\n      {\r\n        spellId: SPELLS.BLAZING_BARRIER.id,\r\n        triggeredBySpellId: SPELLS.BLAZING_BARRIER.id,\r\n        timelineHighlight: true,\r\n      },\r\n      {\r\n        spellId: SPELLS.ICE_BLOCK.id,\r\n        triggeredBySpellId: SPELLS.ICE_BLOCK.id,\r\n        timelineHighlight: true,\r\n      },\r\n      {\r\n        spellId: SPELLS.MIRROR_IMAGE.id,\r\n        triggeredBySpellId: SPELLS.MIRROR_IMAGE.id,\r\n        timelineHighlight: true,\r\n      },\r\n      {\r\n        spellId: Object.keys(BLOODLUST_BUFFS).map(item => Number(item)),\r\n        timelineHighlight: true,\r\n      },\r\n    ];\r\n  }\r\n}\r\n\r\nexport default Buffs;\r\n","import SPELLS from 'common/SPELLS';\r\nimport COVENANTS from 'game/shadowlands/COVENANTS';\r\n\r\nimport CoreAbilities from 'parser/core/modules/Abilities';\r\nimport { WINTERS_PROTECTION_REDUCTION_SEC, FLOW_OF_TIME_REDUCTION_SEC } from 'parser/mage/shared/constants';\r\n\r\nclass Abilities extends CoreAbilities {\r\n  spellbook() {\r\n    const combatant = this.selectedCombatant;\r\n    return [\r\n      // Rotational spells\r\n      {\r\n        spell: SPELLS.FIREBALL,\r\n        category: Abilities.SPELL_CATEGORIES.ROTATIONAL,\r\n        gcd: {\r\n          base: 1500,\r\n        },\r\n        damageSpellIds: [SPELLS.FIREBALL.id],\r\n      },\r\n      {\r\n        spell: SPELLS.FROSTBOLT,\r\n        category: Abilities.SPELL_CATEGORIES.ROTATIONAL,\r\n        gcd: {\r\n          base: 1500,\r\n        },\r\n        damageSpellIds: [SPELLS.FROSTBOLT_DAMAGE.id],\r\n      },\r\n      {\r\n        spell: SPELLS.ARCANE_EXPLOSION,\r\n        category: Abilities.SPELL_CATEGORIES.ROTATIONAL_AOE,\r\n        gcd: {\r\n          base: 1500,\r\n        },\r\n        damageSpellIds: [SPELLS.ARCANE_EXPLOSION.id],\r\n      },\r\n      {\r\n        spell: SPELLS.PYROBLAST,\r\n        category: Abilities.SPELL_CATEGORIES.ROTATIONAL,\r\n        gcd: {\r\n          base: 1500,\r\n        },\r\n        damageSpellIds: [SPELLS.PYROBLAST.id],\r\n      },\r\n      {\r\n        spell: SPELLS.SCORCH,\r\n        category: Abilities.SPELL_CATEGORIES.ROTATIONAL,\r\n        gcd: {\r\n          base: 1500,\r\n        },\r\n      },\r\n      {\r\n        spell: SPELLS.PHOENIX_FLAMES,\r\n        category: Abilities.SPELL_CATEGORIES.ROTATIONAL,\r\n        gcd: {\r\n          base: 1500,\r\n        },\r\n        cooldown: 25,\r\n        charges: 3,\r\n        castEfficiency: {\r\n          suggestion: true,\r\n          recommendedEfficiency: 0.90,\r\n        },\r\n      },\r\n      {\r\n        spell: SPELLS.FIRE_BLAST,\r\n        category: Abilities.SPELL_CATEGORIES.ROTATIONAL,\r\n        gcd: null,\r\n        cooldown: (haste: any) => (combatant.hasTalent(SPELLS.FLAME_ON_TALENT.id) ? 10 : 12) / (1 + haste),\r\n        charges: combatant.hasTalent(SPELLS.FLAME_ON_TALENT.id) ? 3 : 2,\r\n        castEfficiency: {\r\n          suggestion: true,\r\n          recommendedEfficiency: 0.90,\r\n        },\r\n      },\r\n      {\r\n        spell: SPELLS.METEOR_TALENT,\r\n        category: Abilities.SPELL_CATEGORIES.ROTATIONAL,\r\n        gcd: {\r\n          base: 1500,\r\n        },\r\n        cooldown: 45,\r\n        enabled: combatant.hasTalent(SPELLS.METEOR_TALENT.id),\r\n        castEfficiency: {\r\n          suggestion: false,\r\n        },\r\n        damageSpellIds: [SPELLS.METEOR_DAMAGE.id],\r\n      },\r\n      {\r\n        spell: SPELLS.DRAGONS_BREATH,\r\n        category: Abilities.SPELL_CATEGORIES.ROTATIONAL_AOE,\r\n        gcd: {\r\n          base: 1500,\r\n        },\r\n        cooldown: 18,\r\n      },\r\n      {\r\n        spell: SPELLS.FLAMESTRIKE,\r\n        category: Abilities.SPELL_CATEGORIES.ROTATIONAL_AOE,\r\n        gcd: {\r\n          base: 1500,\r\n        },\r\n      },\r\n      {\r\n        spell: SPELLS.LIVING_BOMB_TALENT,\r\n        category: Abilities.SPELL_CATEGORIES.ROTATIONAL_AOE,\r\n        gcd: {\r\n          base: 1500,\r\n        },\r\n        cooldown: (haste: any) => 12 / (1 + haste),\r\n        enabled: combatant.hasTalent(SPELLS.LIVING_BOMB_TALENT.id),\r\n      },\r\n      {\r\n        spell: SPELLS.BLAST_WAVE_TALENT,\r\n        category: Abilities.SPELL_CATEGORIES.ROTATIONAL_AOE,\r\n        gcd: {\r\n          base: 1500,\r\n        },\r\n        cooldown: 25,\r\n        enabled: combatant.hasTalent(SPELLS.BLAST_WAVE_TALENT.id),\r\n        castEfficiency: {\r\n          suggestion: true,\r\n          recommendedEfficiency: 0.90,\r\n        },\r\n      },\r\n\r\n      // Cooldowns\r\n      {\r\n        spell: SPELLS.TIME_WARP,\r\n        buffSpellId: SPELLS.TIME_WARP.id,\r\n        category: Abilities.SPELL_CATEGORIES.COOLDOWNS,\r\n        gcd: null,\r\n        cooldown: 300,\r\n      },\r\n      {\r\n        spell: SPELLS.COMBUSTION,\r\n        buffSpellId: SPELLS.COMBUSTION.id,\r\n        category: Abilities.SPELL_CATEGORIES.COOLDOWNS,\r\n        gcd: null,\r\n        cooldown: 120,\r\n        castEfficiency: {\r\n          suggestion: true,\r\n          recommendedEfficiency: 0.90,\r\n        },\r\n      },\r\n      {\r\n        spell: SPELLS.RUNE_OF_POWER_TALENT,\r\n        buffSpellId: SPELLS.RUNE_OF_POWER_BUFF.id,\r\n        category: Abilities.SPELL_CATEGORIES.COOLDOWNS,\r\n        gcd: {\r\n          base: 1500,\r\n        },\r\n        cooldown: 45,\r\n        enabled: combatant.hasTalent(SPELLS.RUNE_OF_POWER_TALENT.id),\r\n        castEfficiency: {\r\n          suggestion: true,\r\n          recommendedEfficiency: 0.90,\r\n        },\r\n      },\r\n      {\r\n        spell: SPELLS.RADIANT_SPARK,\r\n        category: Abilities.SPELL_CATEGORIES.COOLDOWNS,\r\n        gcd: {\r\n          base: 1500,\r\n        },\r\n        cooldown: 30,\r\n        enabled: combatant.hasCovenant(COVENANTS.KYRIAN.id),\r\n        castEfficiency: {\r\n          suggestion: true,\r\n          recommendedEfficiency: 0.90,\r\n        },\r\n      },\r\n      {\r\n        spell: SPELLS.DEATHBORNE,\r\n        category: Abilities.SPELL_CATEGORIES.COOLDOWNS,\r\n        gcd: {\r\n          base: 1500,\r\n        },\r\n        cooldown: 180,\r\n        enabled: combatant.hasCovenant(COVENANTS.NECROLORD.id),\r\n        castEfficiency: {\r\n          suggestion: true,\r\n          recommendedEfficiency: 0.90,\r\n        },\r\n      },\r\n      {\r\n        spell: SPELLS.MIRRORS_OF_TORMENT,\r\n        category: Abilities.SPELL_CATEGORIES.COOLDOWNS,\r\n        gcd: {\r\n          base: 1500,\r\n        },\r\n        cooldown: 90,\r\n        enabled: combatant.hasCovenant(COVENANTS.VENTHYR.id),\r\n        castEfficiency: {\r\n          suggestion: true,\r\n          recommendedEfficiency: 0.90,\r\n        },\r\n      },\r\n      {\r\n        spell: SPELLS.SHIFTING_POWER,\r\n        category: Abilities.SPELL_CATEGORIES.COOLDOWNS,\r\n        gcd: {\r\n          base: 1500,\r\n        },\r\n        cooldown: 60,\r\n        enabled: combatant.hasCovenant(COVENANTS.NIGHT_FAE.id),\r\n        castEfficiency: {\r\n          suggestion: true,\r\n          recommendedEfficiency: 0.90,\r\n        },\r\n      },\r\n\r\n      //Defensives\r\n      {\r\n        spell: SPELLS.BLAZING_BARRIER,\r\n        buffSpellId: SPELLS.BLAZING_BARRIER.id,\r\n        category: Abilities.SPELL_CATEGORIES.DEFENSIVE,\r\n        gcd: {\r\n          base: 1500,\r\n        },\r\n        cooldown: 25,\r\n      },\r\n      {\r\n        spell: SPELLS.ICE_BLOCK,\r\n        buffSpellId: SPELLS.ICE_BLOCK.id,\r\n        cooldown: combatant.hasConduitBySpellID(SPELLS.WINTERS_PROTECTION.id) ? 240 - WINTERS_PROTECTION_REDUCTION_SEC[combatant.conduitRankBySpellID(SPELLS.WINTERS_PROTECTION.id)] : 240,\r\n        category: Abilities.SPELL_CATEGORIES.DEFENSIVE,\r\n        gcd: {\r\n          base: 1500,\r\n        },\r\n      },\r\n      {\r\n        spell: SPELLS.MIRROR_IMAGE,\r\n        category: Abilities.SPELL_CATEGORIES.DEFENSIVE,\r\n        gcd: {\r\n          base: 1500,\r\n        },\r\n        cooldown: 120,\r\n      },\r\n\r\n      //Utility\r\n      {\r\n        spell: SPELLS.ARCANE_INTELLECT,\r\n        category: Abilities.SPELL_CATEGORIES.UTILITY,\r\n        gcd: {\r\n          base: 1500,\r\n        },\r\n      },\r\n      {\r\n        spell: SPELLS.FROST_NOVA,\r\n        category: Abilities.SPELL_CATEGORIES.UTILITY,\r\n        gcd: {\r\n          base: 1500,\r\n        },\r\n        cooldown: 30,\r\n        charges: combatant.hasTalent(SPELLS.ICE_WARD_TALENT.id) ? 2 : 1,\r\n      },\r\n      {\r\n        spell: SPELLS.BLINK,\r\n        category: Abilities.SPELL_CATEGORIES.UTILITY,\r\n        gcd: {\r\n          base: 1500,\r\n        },\r\n        enabled: !combatant.hasTalent(SPELLS.SHIMMER_TALENT.id),\r\n        cooldown: combatant.hasConduitBySpellID(SPELLS.FLOW_OF_TIME.id) ? 15 - FLOW_OF_TIME_REDUCTION_SEC[combatant.conduitRankBySpellID(SPELLS.FLOW_OF_TIME.id)] : 15,\r\n      },\r\n      {\r\n        spell: SPELLS.SHIMMER_TALENT,\r\n        category: Abilities.SPELL_CATEGORIES.UTILITY,\r\n        gcd: null,\r\n        cooldown: combatant.hasConduitBySpellID(SPELLS.FLOW_OF_TIME.id) ? 25 - FLOW_OF_TIME_REDUCTION_SEC[combatant.conduitRankBySpellID(SPELLS.FLOW_OF_TIME.id)] : 25,\r\n        charges: 2,\r\n        enabled: combatant.hasTalent(SPELLS.SHIMMER_TALENT.id),\r\n      },\r\n      {\r\n        spell: SPELLS.COUNTERSPELL,\r\n        category: Abilities.SPELL_CATEGORIES.UTILITY,\r\n        gcd: null,\r\n        cooldown: 24,\r\n      },\r\n      {\r\n        spell: SPELLS.REMOVE_CURSE,\r\n        category: Abilities.SPELL_CATEGORIES.UTILITY,\r\n        gcd: {\r\n          base: 1500,\r\n        },\r\n        cooldown: 8,\r\n      },\r\n      {\r\n        spell: SPELLS.SLOW_FALL,\r\n        buffSpellId: SPELLS.SLOW_FALL.id,\r\n        category: Abilities.SPELL_CATEGORIES.UTILITY,\r\n        gcd: {\r\n          base: 1500,\r\n        },\r\n      },\r\n      {\r\n        spell: SPELLS.SPELL_STEAL,\r\n        category: Abilities.SPELL_CATEGORIES.UTILITY,\r\n        gcd: {\r\n          base: 1500,\r\n        },\r\n      },\r\n      {\r\n        spell: SPELLS.FOCUS_MAGIC_TALENT,\r\n        category: Abilities.SPELL_CATEGORIES.UTILITY,\r\n        gcd: {\r\n          base: 1500,\r\n        },\r\n      },\r\n      {\r\n        spell: SPELLS.ALTER_TIME,\r\n        buffSpellId: SPELLS.ALTER_TIME_BUFF.id,\r\n        category: Abilities.SPELL_CATEGORIES.UTILITY,\r\n        gcd: {\r\n          base: 1500,\r\n        },\r\n      },\r\n      {\r\n        spell: SPELLS.INVISIBILITY,\r\n        buffSpellId: SPELLS.INVISIBILITY_BUFF.id,\r\n        category: Abilities.SPELL_CATEGORIES.UTILITY,\r\n        gcd: {\r\n          base: 1500,\r\n        },\r\n        cooldown: 300,\r\n      },\r\n      {\r\n        spell: [SPELLS.POLYMORPH_SHEEP, SPELLS.POLYMORPH_PIG,\r\n          SPELLS.POLYMORPH_BLACK_CAT, SPELLS.POLYMORPH_MONKEY,\r\n          SPELLS.POLYMORPH_RABBIT, SPELLS.POLYMORPH_POLAR_BEAR_CUB,\r\n          SPELLS.POLYMORPH_PORCUPINE, SPELLS.POLYMORPH_TURTLE,\r\n          SPELLS.POLYMORPH_TURKEY, SPELLS.POLYMORPH_PENGUIN,\r\n          SPELLS.POLYMORPH_BUMBLEBEE, SPELLS.POLYMORPH_PEACOCK,\r\n          SPELLS.POLYMORPH_DIREHORN, SPELLS.POLYMORPH_MAWRAT],\r\n        category: Abilities.SPELL_CATEGORIES.UTILITY,\r\n        gcd: {\r\n          base: 1500,\r\n        },\r\n      },\r\n    ];\r\n  }\r\n}\r\n\r\nexport default Abilities;\r\n","import CoreCooldownThroughputTracker, { BUILT_IN_SUMMARY_TYPES } from 'parser/shared/modules/CooldownThroughputTracker';\r\n\r\nimport SPELLS from 'common/SPELLS';\r\n\r\nclass CooldownThroughputTracker extends CoreCooldownThroughputTracker {\r\n  static cooldownSpells = [\r\n    ...CoreCooldownThroughputTracker.cooldownSpells,\r\n    {\r\n      spell: SPELLS.COMBUSTION,\r\n      startBufferMS: 4000,\r\n      summary: [\r\n        BUILT_IN_SUMMARY_TYPES.DAMAGE,\r\n      ],\r\n    },\r\n    {\r\n      spell: SPELLS.RUNE_OF_POWER_TALENT,\r\n      summary: [\r\n        BUILT_IN_SUMMARY_TYPES.DAMAGE,\r\n      ],\r\n    },\r\n  ];\r\n\r\n  static castCooldowns = [\r\n    ...CoreCooldownThroughputTracker.castCooldowns,\r\n    {\r\n      spell: SPELLS.MIRROR_IMAGE,\r\n      duration: 40,\r\n      summary: [\r\n        BUILT_IN_SUMMARY_TYPES.DAMAGE,\r\n      ],\r\n    },\r\n  ];\r\n}\r\n\r\nexport default CooldownThroughputTracker;\r\n","import React from 'react';\r\nimport SPELLS from 'common/SPELLS';\r\nimport Analyzer, { SELECTED_PLAYER, Options } from 'parser/core/Analyzer';\r\nimport Events, { DamageEvent } from 'parser/core/Events';\r\nimport { formatNumber } from 'common/format';\r\nimport Statistic from 'interface/statistics/Statistic';\r\nimport STATISTIC_CATEGORY from 'interface/others/STATISTIC_CATEGORY';\r\nimport BoringSpellValueText from 'interface/statistics/components/BoringSpellValueText';\r\nimport HIT_TYPES from 'game/HIT_TYPES';\r\nimport SpellUsable from 'parser/shared/modules/SpellUsable';\r\n\r\nconst REDUCTION_MS = 1500;\r\nconst COMBUST_REDUCTION_SPELLS = [\r\n  SPELLS.FIREBALL,\r\n  SPELLS.PYROBLAST,\r\n  SPELLS.FIRE_BLAST,\r\n];\r\n\r\nclass Kindling extends Analyzer {\r\n  static dependencies = {\r\n    spellUsable: SpellUsable,\r\n  };\r\n  protected spellUsable!: SpellUsable;\r\n\r\n  cooldownReduction = 0;\r\n\r\n  constructor(options: Options) {\r\n    super(options);\r\n    this.active = this.selectedCombatant.hasTalent(SPELLS.KINDLING_TALENT.id);\r\n    this.addEventListener(Events.damage.by(SELECTED_PLAYER).spell(COMBUST_REDUCTION_SPELLS), this.onCritDamage);\r\n  }\r\n\r\n  //Look for crit damage events to reduce the cooldown on Kindling\r\n  onCritDamage(event: DamageEvent) {\r\n    const combustionOnCD = this.spellUsable.isOnCooldown(SPELLS.COMBUSTION.id);\r\n    if (event.hitType !== HIT_TYPES.CRIT) {\r\n      return;\r\n    }\r\n    if (combustionOnCD) {\r\n      this.cooldownReduction += this.spellUsable.reduceCooldown(SPELLS.COMBUSTION.id, (REDUCTION_MS));\r\n    }\r\n  }\r\n\r\n  get cooldownReductionSeconds() {\r\n    return this.cooldownReduction / 1000;\r\n  }\r\n\r\n  statistic() {\r\n    return (\r\n      <Statistic\r\n        size=\"flexible\"\r\n        category={STATISTIC_CATEGORY.TALENTS}\r\n      >\r\n        <BoringSpellValueText spell={SPELLS.KINDLING_TALENT}>\r\n          <>\r\n            {formatNumber(this.cooldownReductionSeconds)}s <small>Combustion Cooldown Reduction</small>\r\n          </>\r\n        </BoringSpellValueText>\r\n      </Statistic>\r\n    );\r\n  }\r\n}\r\n\r\nexport default Kindling;\r\n","import React from 'react';\r\nimport SPELLS from 'common/SPELLS';\r\nimport Analyzer, { Options } from 'parser/core/Analyzer';\r\nimport Events, { DamageEvent } from 'parser/core/Events';\r\nimport Statistic from 'interface/statistics/Statistic';\r\nimport BoringSpellValueText from 'interface/statistics/components/BoringSpellValueText';\r\nimport STATISTIC_CATEGORY from 'interface/others/STATISTIC_CATEGORY';\r\nimport ItemDamageDone from 'interface/ItemDamageDone';\r\nimport UptimeIcon from 'interface/icons/Uptime';\r\nimport { SELECTED_PLAYER } from 'parser/core/EventFilter';\r\nimport calculateEffectiveDamage from 'parser/core/calculateEffectiveDamage';\r\nimport { formatPercentage } from 'common/format';\r\nimport HIT_TYPES from 'game/HIT_TYPES';\r\n\r\nconst DAMAGE_BONUS_PER_STACK = 0.02;\r\n\r\nclass FeveredIncantation extends Analyzer {\r\n\r\n  bonusDamage = 0;\r\n\r\n  constructor(props: Options) {\r\n    super(props);\r\n    this.active = this.selectedCombatant.hasLegendaryByBonusID(SPELLS.FEVERED_INCANTATION.bonusID);\r\n    this.addEventListener(Events.damage.by(SELECTED_PLAYER), this.onDamage);\r\n  }\r\n\r\n  onDamage(event: DamageEvent) {\r\n    if (event.hitType !== HIT_TYPES.CRIT) {\r\n      return;\r\n    }\r\n    const buff = this.selectedCombatant.getBuff(SPELLS.FEVERED_INCANTATION_BUFF.id);\r\n    if (buff && buff.stacks) {\r\n      this.bonusDamage += calculateEffectiveDamage(event, DAMAGE_BONUS_PER_STACK * buff.stacks);\r\n    }\r\n  }\r\n\r\n  get buffUptime() {\r\n    return this.selectedCombatant.getBuffUptime(SPELLS.FEVERED_INCANTATION_BUFF.id) / this.owner.fightDuration;\r\n  }\r\n\r\n  statistic() {\r\n    return (\r\n      <Statistic\r\n        category={STATISTIC_CATEGORY.ITEMS}\r\n        size=\"flexible\"\r\n      >\r\n        <BoringSpellValueText spell={SPELLS.FEVERED_INCANTATION}>\r\n          <ItemDamageDone amount={this.bonusDamage} /><br />\r\n          <UptimeIcon /> {formatPercentage(this.buffUptime)}% <small>Buff uptime</small>\r\n        </BoringSpellValueText>\r\n      </Statistic>\r\n    );\r\n  }\r\n}\r\n\r\nexport default FeveredIncantation;\r\n","import React from 'react';\r\nimport SPELLS from 'common/SPELLS';\r\nimport Analyzer, { Options } from 'parser/core/Analyzer';\r\nimport Events, { CastEvent, ApplyBuffEvent } from 'parser/core/Events';\r\nimport Statistic from 'interface/statistics/Statistic';\r\nimport BoringSpellValueText from 'interface/statistics/components/BoringSpellValueText';\r\nimport STATISTIC_CATEGORY from 'interface/others/STATISTIC_CATEGORY';\r\nimport { SELECTED_PLAYER } from 'parser/core/EventFilter';\r\nimport { formatNumber } from 'common/format';\r\n\r\nclass Firestorm extends Analyzer {\r\n\r\n  castsDuringFirestorm = 0;\r\n  firestormProcs = 0;\r\n\r\n  constructor(props: Options) {\r\n    super(props);\r\n    this.active = this.selectedCombatant.hasLegendaryByBonusID(SPELLS.FIRESTORM.bonusID);\r\n    this.addEventListener(Events.cast.by(SELECTED_PLAYER).spell([SPELLS.PYROBLAST,SPELLS.FLAMESTRIKE]), this.onCast);\r\n    this.addEventListener(Events.applybuff.by(SELECTED_PLAYER).spell(SPELLS.FIRESTORM_BUFF), this.onFirestormApplied);\r\n  }\r\n\r\n  onCast(event: CastEvent) {\r\n    if (!this.selectedCombatant.hasBuff(SPELLS.FIRESTORM_BUFF.id)) {\r\n      return;\r\n    }\r\n    this.castsDuringFirestorm += 1;\r\n  }\r\n\r\n  onFirestormApplied(event: ApplyBuffEvent) {\r\n    this.firestormProcs += 1;\r\n  }\r\n\r\n  get castsPerProc() {\r\n    return this.castsDuringFirestorm / this.firestormProcs;\r\n  }\r\n\r\n  get buffUptime() {\r\n    return this.selectedCombatant.getBuffUptime(SPELLS.FEVERED_INCANTATION_BUFF.id) / this.owner.fightDuration;\r\n  }\r\n\r\n  statistic() {\r\n    return (\r\n      <Statistic\r\n        category={STATISTIC_CATEGORY.ITEMS}\r\n        size=\"flexible\"\r\n      >\r\n        <BoringSpellValueText spell={SPELLS.FIRESTORM}>\r\n          {formatNumber(this.firestormProcs)} <small>Total Procs</small><br />\r\n          {formatNumber(this.castsPerProc)} <small>Avg. Casts per Proc</small><br />\r\n        </BoringSpellValueText>\r\n      </Statistic>\r\n    );\r\n  }\r\n}\r\n\r\nexport default Firestorm;\r\n","import Analyzer, { SELECTED_PLAYER, Options } from 'parser/core/Analyzer';\r\nimport Events, { RemoveDebuffEvent, RemoveDebuffStackEvent } from 'parser/core/Events';\r\nimport SpellUsable from 'parser/shared/modules/SpellUsable';\r\nimport SPELLS from 'common/SPELLS';\r\nimport COVENANTS from 'game/shadowlands/COVENANTS';\r\n\r\nconst FIRE_BLAST_REDUCTION_MS = 4000;\r\n\r\nclass MirrorsOfTorment extends Analyzer {\r\n  static dependencies = {\r\n    spellUsable: SpellUsable,\r\n  }\r\n  protected spellUsable!: SpellUsable;\r\n\r\n  //Currently only added to Fire Mage CombatLogParser, but leaving module in Shared in case i add to it for other specs\r\n  constructor(options: Options) {\r\n    super(options);\r\n    this.active = this.selectedCombatant.hasCovenant(COVENANTS.VENTHYR.id);\r\n    this.addEventListener(Events.removedebuffstack.by(SELECTED_PLAYER).spell(SPELLS.MIRRORS_OF_TORMENT), this.onDebuffRemoved);\r\n    this.addEventListener(Events.removedebuff.by(SELECTED_PLAYER).spell(SPELLS.MIRRORS_OF_TORMENT), this.onDebuffRemoved);\r\n  }\r\n\r\n  onDebuffRemoved(event: RemoveDebuffEvent | RemoveDebuffStackEvent) {\r\n    if (this.spellUsable.isOnCooldown(SPELLS.FIRE_BLAST.id)) {\r\n      this.spellUsable.reduceCooldown(SPELLS.FIRE_BLAST.id, FIRE_BLAST_REDUCTION_MS);\r\n    }\r\n  }\r\n}\r\n\r\nexport default MirrorsOfTorment;\r\n","import React from 'react';\r\nimport SPELLS from 'common/SPELLS';\r\nimport Analyzer, { Options } from 'parser/core/Analyzer';\r\nimport Events, { DamageEvent } from 'parser/core/Events';\r\nimport Statistic from 'interface/statistics/Statistic';\r\nimport BoringSpellValueText from 'interface/statistics/components/BoringSpellValueText';\r\nimport STATISTIC_CATEGORY from 'interface/others/STATISTIC_CATEGORY';\r\nimport ItemDamageDone from 'interface/ItemDamageDone';\r\nimport { SELECTED_PLAYER } from 'parser/core/EventFilter';\r\nimport calculateEffectiveDamage from 'parser/core/calculateEffectiveDamage';\r\n\r\nconst DAMAGE_BONUS = [0, .08, .09, .10, .10, .11, .12, .13, .14, .14, .15, .16, .17, .18, .18, .19];\r\n\r\nclass MasterFlame extends Analyzer {\r\n  \r\n  conduitRank = 0;\r\n  bonusDamage = 0;\r\n\r\n  constructor(props: Options) {\r\n    super(props);\r\n    this.active = this.selectedCombatant.hasConduitBySpellID(SPELLS.MASTER_FLAME.id);\r\n    if (!this.active) {\r\n      return;\r\n    }\r\n    this.conduitRank = this.selectedCombatant.conduitRankBySpellID(SPELLS.MASTER_FLAME.id);\r\n    this.addEventListener(Events.damage.by(SELECTED_PLAYER).spell(SPELLS.FLAMESTRIKE), this.onFlameStrikeDamage);\r\n  }\r\n\r\n  onFlameStrikeDamage(event: DamageEvent) {\r\n    this.bonusDamage += calculateEffectiveDamage(event,DAMAGE_BONUS[this.conduitRank]);\r\n  }\r\n\r\n  statistic() {\r\n    return (\r\n      <Statistic\r\n        category={STATISTIC_CATEGORY.ITEMS}\r\n        size=\"flexible\"\r\n      >\r\n        <BoringSpellValueText spell={SPELLS.MASTER_FLAME}>\r\n          <ItemDamageDone amount={this.bonusDamage} />\r\n        </BoringSpellValueText>\r\n      </Statistic>\r\n    );\r\n  }\r\n}\r\n\r\nexport default MasterFlame;\r\n","import React from 'react';\r\nimport SPELLS from 'common/SPELLS';\r\nimport Analyzer, { Options } from 'parser/core/Analyzer';\r\nimport Events, { DamageEvent } from 'parser/core/Events';\r\nimport Statistic from 'interface/statistics/Statistic';\r\nimport BoringSpellValueText from 'interface/statistics/components/BoringSpellValueText';\r\nimport STATISTIC_CATEGORY from 'interface/others/STATISTIC_CATEGORY';\r\nimport ItemDamageDone from 'interface/ItemDamageDone';\r\nimport { SELECTED_PLAYER } from 'parser/core/EventFilter';\r\nimport calculateEffectiveDamage from 'parser/core/calculateEffectiveDamage';\r\n\r\nconst DAMAGE_BONUS = [0, .04, .04, .05, .05, .06, .06, .06, .07, .07, .08, .08, .08, .09, .09, .10];\r\n\r\nclass ControlledDestruction extends Analyzer {\r\n\r\n  conduitRank = 0;\r\n  bonusDamage = 0;\r\n\r\n  constructor(props: Options) {\r\n    super(props);\r\n    this.active = this.selectedCombatant.hasConduitBySpellID(SPELLS.CONTROLLED_DESTRUCTION.id);\r\n    if (!this.active) {\r\n      return;\r\n    }\r\n    this.conduitRank = this.selectedCombatant.conduitRankBySpellID(SPELLS.CONTROLLED_DESTRUCTION.id);\r\n    this.addEventListener(Events.damage.by(SELECTED_PLAYER).spell(SPELLS.PYROBLAST), this.onPyroDamage);\r\n  }\r\n\r\n  onPyroDamage(event: DamageEvent) {\r\n    this.bonusDamage += calculateEffectiveDamage(event,DAMAGE_BONUS[this.conduitRank]);\r\n  }\r\n\r\n  statistic() {\r\n    return (\r\n      <Statistic\r\n        category={STATISTIC_CATEGORY.ITEMS}\r\n        size=\"flexible\"\r\n      >\r\n        <BoringSpellValueText spell={SPELLS.CONTROLLED_DESTRUCTION}>\r\n          <ItemDamageDone amount={this.bonusDamage} />\r\n        </BoringSpellValueText>\r\n      </Statistic>\r\n    );\r\n  }\r\n}\r\n\r\nexport default ControlledDestruction;\r\n","import React from 'react';\r\nimport SPELLS from 'common/SPELLS';\r\nimport Analyzer, { Options } from 'parser/core/Analyzer';\r\nimport Events, { DamageEvent } from 'parser/core/Events';\r\nimport Statistic from 'interface/statistics/Statistic';\r\nimport BoringSpellValueText from 'interface/statistics/components/BoringSpellValueText';\r\nimport STATISTIC_CATEGORY from 'interface/others/STATISTIC_CATEGORY';\r\nimport ItemDamageDone from 'interface/ItemDamageDone';\r\nimport { SELECTED_PLAYER } from 'parser/core/EventFilter';\r\nimport calculateEffectiveDamage from 'parser/core/calculateEffectiveDamage';\r\n\r\nconst DAMAGE_BONUS = [0, .09, .099, .108, .117, .126, .135, .144, .153, .162, .171, .18, .189, .198, .207, .216];\r\n\r\nclass InfernalCascade extends Analyzer {\r\n  \r\n  conduitRank = 0;\r\n  bonusDamage = 0;\r\n  buffStack = 0;\r\n  totalBuffs = 0;\r\n  combustionCount = 0;\r\n\r\n  constructor(props: Options) {\r\n    super(props);\r\n    this.active = this.selectedCombatant.hasConduitBySpellID(SPELLS.INFERNAL_CASCADE.id);\r\n    if (!this.active) {\r\n      return;\r\n    }\r\n    this.conduitRank = this.selectedCombatant.conduitRankBySpellID(SPELLS.INFERNAL_CASCADE.id);\r\n    this.addEventListener(Events.damage.by(SELECTED_PLAYER), this.onDamage);\r\n    this.addEventListener(Events.applybuff.by(SELECTED_PLAYER).spell(SPELLS.INFERNAL_CASCADE_BUFF), this.onBuffStack);\r\n    this.addEventListener(Events.applybuffstack.by(SELECTED_PLAYER).spell(SPELLS.INFERNAL_CASCADE_BUFF), this.onBuffStack);\r\n    this.addEventListener(Events.applybuff.by(SELECTED_PLAYER).spell(SPELLS.COMBUSTION), this.onCombustionStart);\r\n    this.addEventListener(Events.removebuff.by(SELECTED_PLAYER).spell(SPELLS.COMBUSTION), this.onCombustionEnd);\r\n  }\r\n\r\n  onDamage(event: DamageEvent) {\r\n    const buff = this.selectedCombatant.getBuff(SPELLS.INFERNAL_CASCADE_BUFF.id);\r\n    if (!buff || !this.selectedCombatant.hasBuff(SPELLS.COMBUSTION.id)) {\r\n      return;\r\n    }\r\n    this.bonusDamage += calculateEffectiveDamage(event,DAMAGE_BONUS[this.conduitRank] * buff.stacks);\r\n  }\r\n  onBuffStack() {\r\n    const buff = this.selectedCombatant.getBuff(SPELLS.INFERNAL_CASCADE_BUFF.id);\r\n    if (buff && buff.stacks > this.buffStack) {\r\n      this.buffStack = buff.stacks;\r\n    }\r\n  }\r\n  onCombustionStart() {\r\n    this.combustionCount += 1;\r\n  }\r\n  onCombustionEnd() {\r\n    this.totalBuffs += this.buffStack;\r\n    this.buffStack = 0;\r\n  }\r\n\r\n  get averageBuffStack() {\r\n    return this.totalBuffs / this.combustionCount;\r\n  }\r\n\r\n  statistic() {\r\n    return (\r\n      <Statistic\r\n        category={STATISTIC_CATEGORY.ITEMS}\r\n        size=\"flexible\"\r\n      >\r\n        <BoringSpellValueText spell={SPELLS.INFERNAL_CASCADE}>\r\n          <ItemDamageDone amount={this.bonusDamage} /><br />\r\n          {this.averageBuffStack} <small>Avg. stacks per Combustion</small>\r\n        </BoringSpellValueText>\r\n      </Statistic>\r\n    );\r\n  }\r\n}\r\n\r\nexport default InfernalCascade;\r\n","import React from 'react';\r\nimport SPELLS from 'common/SPELLS';\r\nimport Analyzer, { SELECTED_PLAYER, Options } from 'parser/core/Analyzer';\r\nimport Events, { DamageEvent } from 'parser/core/Events';\r\nimport { formatNumber } from 'common/format';\r\nimport Statistic from 'interface/statistics/Statistic';\r\nimport STATISTIC_CATEGORY from 'interface/others/STATISTIC_CATEGORY';\r\nimport BoringSpellValueText from 'interface/statistics/components/BoringSpellValueText';\r\nimport HIT_TYPES from 'game/HIT_TYPES';\r\nimport SpellUsable from 'parser/shared/modules/SpellUsable';\r\nimport { FIRE_DIRECT_DAMAGE_SPELLS } from 'parser/mage/shared/constants';\r\n\r\nconst MS_REDUCTION = 1000;\r\n\r\nclass FromTheAshes extends Analyzer {\r\n  static dependencies = {\r\n    spellUsable: SpellUsable,\r\n  };\r\n  protected spellUsable!: SpellUsable;\r\n\r\n  cooldownReduction = 0;\r\n\r\n  constructor(options: Options) {\r\n    super(options);\r\n    this.active = this.selectedCombatant.hasTalent(SPELLS.FROM_THE_ASHES_TALENT.id);\r\n    this.addEventListener(Events.damage.by(SELECTED_PLAYER).spell(FIRE_DIRECT_DAMAGE_SPELLS), this.onCritDamage);\r\n  }\r\n\r\n  //Look for crit damage events to reduce the cooldown on Kindling\r\n  onCritDamage(event: DamageEvent) {\r\n    if (!this.spellUsable.isOnCooldown(SPELLS.PHOENIX_FLAMES.id) || event.hitType !== HIT_TYPES.CRIT) {\r\n      return;\r\n    }\r\n    this.cooldownReduction += this.spellUsable.reduceCooldown(SPELLS.PHOENIX_FLAMES.id, MS_REDUCTION);\r\n  }\r\n\r\n  get cooldownReductionSeconds() {\r\n    return this.cooldownReduction / 1000;\r\n  }\r\n\r\n  statistic() {\r\n    return (\r\n      <Statistic\r\n        size=\"flexible\"\r\n        category={STATISTIC_CATEGORY.TALENTS}\r\n      >\r\n        <BoringSpellValueText spell={SPELLS.FROM_THE_ASHES_TALENT}>\r\n          <>\r\n            {formatNumber(this.cooldownReductionSeconds)}s <small>Phoenix Flames Cooldown Reduction</small>\r\n          </>\r\n        </BoringSpellValueText>\r\n      </Statistic>\r\n    );\r\n  }\r\n}\r\n\r\nexport default FromTheAshes;\r\n","import CoreCombatLogParser from 'parser/core/CombatLogParser';\r\nimport ArcaneTorrent from 'parser/shared/modules/racials/bloodelf/ArcaneTorrent';\r\n\r\nimport FlamestrikeNormalizer from './normalizers/Flamestrike';\r\nimport CombustionNormalizer from './normalizers/Combustion';\r\nimport ScorchNormalizer from './normalizers/Scorch';\r\nimport PyroclasmBuffNormalizer from './normalizers/PyroclasmBuff';\r\nimport ShiftingPowerNormalizer from '../shared/normalizers/ShiftingPower'\r\n\r\nimport Checklist from './modules/Checklist/Module';\r\nimport Buffs from './modules/features/Buffs';\r\n\r\nimport AlwaysBeCasting from './modules/features/AlwaysBeCasting';\r\nimport Abilities from './modules/features/Abilities';\r\nimport CooldownThroughputTracker from './modules/features/CooldownThroughputTracker';\r\nimport CancelledCasts from '../shared/modules/features/CancelledCasts';\r\n\r\nimport MirrorImage from '../shared/modules/features/MirrorImage';\r\nimport ArcaneIntellect from '../shared/modules/features/ArcaneIntellect';\r\nimport RuneOfPower from '../shared/modules/features/RuneOfPower';\r\nimport ElementalBarrier from '../shared/modules/features/ElementalBarrier';\r\n\r\nimport HotStreak from './modules/features/HotStreak';\r\nimport HotStreakPreCasts from './modules/features/HotStreakPreCasts';\r\nimport HotStreakWastedCrits from './modules/features/HotStreakWastedCrits';\r\nimport CombustionFirestarter from './modules/features/CombustionFirestarter';\r\nimport CombustionCharges from './modules/features/CombustionCharges';\r\nimport CombustionSpellUsage from './modules/features/CombustionSpellUsage';\r\nimport HeatingUp from './modules/features/HeatingUp';\r\nimport Pyroclasm from './modules/features/Pyroclasm';\r\n\r\n//Talents\r\nimport SearingTouch from './modules/talents/SearingTouch';\r\nimport Meteor from './modules/talents/Meteor';\r\nimport MeteorRune from './modules/talents/MeteorRune';\r\nimport MeteorCombustion from './modules/talents/MeteorCombustion';\r\nimport Kindling from './modules/talents/Kindling';\r\n\r\n//Legendaries\r\nimport FeveredIncantation from './modules/items/FeveredIncantation';\r\nimport Firestorm from './modules/items/Firestorm';\r\n\r\n//Covenants\r\nimport ShiftingPower from '../shared/modules/features/ShiftingPower';\r\nimport MirrorsOfTorment from '../shared/modules/features/MirrorsOfTorment';\r\n\r\n//Conduits\r\nimport MasterFlame from './modules/items/MasterFlame';\r\nimport ControlledDestruction from './modules/items/ControlledDestruction';\r\nimport InfernalCascade from './modules/items/InfernalCascade';\r\nimport DivertedEnergy from '../shared/modules/items/DivertedEnergy';\r\nimport GroundingSurge from '../shared/modules/items/GroundingSurge';\r\nimport IreOfTheAscended from '../shared/modules/items/IreOfTheAscended';\r\nimport TempestBarrier from '../shared/modules/items/TempestBarrier';\r\nimport SiphonedMalice from '../shared/modules/items/SiphonedMalice';\r\nimport FromTheAshes from './modules/talents/FromTheAshes';\r\n\r\nclass CombatLogParser extends CoreCombatLogParser {\r\n  static specModules = {\r\n    //Normalizers\r\n    FlameStrikeNormalizer: FlamestrikeNormalizer,\r\n    scorchNormalizer: ScorchNormalizer,\r\n    pyroclasmBuffNormalizer: PyroclasmBuffNormalizer,\r\n    combustionNormalizer: CombustionNormalizer,\r\n    shiftingPowerNormalizer: ShiftingPowerNormalizer,\r\n\r\n    //Checklist\r\n    checklist: Checklist,\r\n    buffs: Buffs,\r\n\r\n    // Features\r\n    alwaysBeCasting: AlwaysBeCasting,\r\n    abilities: Abilities,\r\n    cooldownThroughputTracker: CooldownThroughputTracker,\r\n    cancelledCasts: CancelledCasts,\r\n    hotStreak: HotStreak,\r\n    hotStreakPreCasts: HotStreakPreCasts,\r\n    hotStreakWastedCrits: HotStreakWastedCrits,\r\n    combustionFirestarter: CombustionFirestarter,\r\n    combustionCharges: CombustionCharges,\r\n    combustionSpellUsage: CombustionSpellUsage,\r\n    heatingUp: HeatingUp,\r\n    mirrorImage: MirrorImage,\r\n    elementalBarrier: ElementalBarrier,\r\n\r\n    // Talents\r\n    arcaneIntellect: ArcaneIntellect,\r\n    runeOfPower: [RuneOfPower, { showStatistic: false, showSuggestion: false }] as const,\r\n    kindling: Kindling,\r\n    meteor: Meteor,\r\n    meteorRune: MeteorRune,\r\n    meteorCombustion: MeteorCombustion,\r\n    pyroclasm: Pyroclasm,\r\n    searingTouch: SearingTouch,\r\n    fromTheAshes: FromTheAshes,\r\n\r\n    //Legendaries\r\n    feveredIncantation: FeveredIncantation,\r\n    firestorm: Firestorm,\r\n\r\n    //Covenants\r\n    shiftingPower: ShiftingPower,\r\n    mirrorsOfTorment: MirrorsOfTorment,\r\n\r\n    //Conduits\r\n    masterFlame: MasterFlame,\r\n    controlledDestruction: ControlledDestruction,\r\n    infernalCascade: InfernalCascade,\r\n    divertedEnergy: DivertedEnergy,\r\n    groundingSurge: GroundingSurge,\r\n    ireOfTheAscended: IreOfTheAscended,\r\n    tempestBarrier: TempestBarrier,\r\n    siphonedMalice: SiphonedMalice,\r\n\r\n    // There's no throughput benefit from casting Arcane Torrent on cooldown\r\n    arcaneTorrent: [ArcaneTorrent, { castEfficiency: null }] as const,\r\n  };\r\n}\r\n\r\nexport default CombatLogParser;\r\n"],"sourceRoot":""}