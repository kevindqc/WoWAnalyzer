{"version":3,"sources":["parser/demonhunter/havoc/normalizers/EyeBeam.js","parser/demonhunter/havoc/modules/core/Channeling.js","parser/demonhunter/havoc/modules/core/GlobalCooldown.js","parser/demonhunter/havoc/modules/features/AlwaysBeCasting.js","parser/demonhunter/havoc/modules/Abilities.js","parser/demonhunter/havoc/modules/features/CooldownThroughputTracker.js","parser/demonhunter/havoc/modules/talents/ImmolationAura.js","parser/demonhunter/havoc/modules/talents/Felblade.js","parser/demonhunter/havoc/modules/talents/BlindFury.js","parser/demonhunter/havoc/modules/talents/Demonic.js","parser/demonhunter/havoc/modules/talents/FelBarrage.js","parser/demonhunter/havoc/modules/talents/FelEruption.js","parser/demonhunter/havoc/modules/talents/Momentum.js","parser/demonhunter/havoc/modules/resourcetracker/FuryTracker.js","parser/demonhunter/havoc/modules/resourcetracker/FuryDetails.js","parser/demonhunter/havoc/modules/spells/DemonBite.js","parser/demonhunter/havoc/modules/talents/DemonicAppetite.js","parser/demonhunter/havoc/modules/talents/DemonBlades.js","parser/demonhunter/havoc/modules/features/Checklist/Component.js","parser/demonhunter/havoc/modules/features/Checklist/Module.js","parser/demonhunter/havoc/modules/spells/MetaBuffUptime.js","parser/demonhunter/havoc/modules/talents/TrailofRuin.js","parser/demonhunter/havoc/modules/talents/FelMastery.js","parser/demonhunter/havoc/modules/talents/Netherwalk.js","parser/demonhunter/havoc/modules/talents/MasterOfTheGlaives.js","parser/demonhunter/havoc/modules/talents/DarkSlash.js","parser/demonhunter/havoc/modules/talents/CycleOfHatred.js","parser/demonhunter/havoc/CombatLogParser.ts","parser/core/calculateEffectiveDamage.js","interface/icons/Uptime.js","interface/others/TalentStatisticBox.js"],"names":["EyeBeam","events","fixedEvents","forEach","event","eventIndex","push","type","EventType","ApplyBuff","ability","guid","SPELLS","EYE_BEAM","id","castTimestamp","timestamp","previousEventIndex","previousEvent","METAMORPHOSIS_HAVOC_BUFF","sourceID","splice","__modified","EventsNormalizer","Channeling","options","addEventListener","Events","applybuff","by","SELECTED_PLAYER","onApplyBuff","removebuff","onRemoveBuff","this","isChannelingSpell","endChannel","selectedCombatant","hasBuff","beginChannel","CoreChanneling","GlobalCooldown","CoreGlobalCooldown","AlwaysBeCasting","when","boss","owner","fight","disableDowntimeSuggestion","suggestionThresholds","addSuggestion","suggest","actual","recommended","SpellLink","FEL_RUSH_CAST","FELBLADE_TALENT","icon","VENGEFUL_RETREAT","i18n","_","formatPercentage","downtimePercentage","isGreaterThan","minor","average","major","style","CoreAlwaysBeCasting","Abilities","combatant","spell","DEMONS_BITE","enabled","hasTalent","DEMON_BLADES_TALENT","category","SPELL_CATEGORIES","ROTATIONAL","gcd","base","CHAOS_STRIKE","ANNIHILATION","BLADE_DANCE","DEATH_SWEEP","FIRST_BLOOD_TALENT","ROTATIONAL_AOE","cooldown","haste","castEfficiency","suggestion","recommendedEfficiency","extraSuggestion","IMMOLATION_AURA","buffSpellId","DARK_SLASH_TALENT","COOLDOWNS","THROW_GLAIVE_HAVOC","charges","MASTER_OF_THE_GLAIVE_TALENT","MOMENTUM_TALENT","UTILITY","static","GLIDE","FEL_ERUPTION_TALENT","CHAOS_NOVA","UNLEASHED_POWER_TALENT","DISRUPT","CONSUME_MAGIC","TORMENT","IMPRISON","SPECTRAL_SIGHT","FEL_BARRAGE_TALENT","METAMORPHOSIS_HAVOC","NEMESIS_TALENT","BLUR","DEFENSIVE","DARKNESS","NETHERWALK_TALENT","CoreAbilities","CooldownThroughputTracker","CoreCooldownThroughputTracker","cooldownSpells","summary","BUILT_IN_SUMMARY_TYPES","DAMAGE","IMMOLATION_AURA_FIRST_STRIKE_DPS","IMMOLATION_AURA_BUFF_DPS","ImmolationAura","args","furyGain","furyWaste","damage","active","energize","onEnergizeEvent","onDamageEvent","fightDuration","toFixed","resourceChange","waste","amount","effectiveFuryGain","TalentStatisticBox","talent","position","STATISTIC_ORDER","OPTIONAL","value","furyPerMin","formatItemDamageDone","tooltip","formatThousands","Analyzer","Felblade","FELBLADE_PAIN_GENERATION","BlindFury","gained","badCast","BLIND_FURY_TALENT","cast","onEyeBeamsCast","classResources","resource","RESOURCE_TYPES","FURY","cost","Demonic","eyeBeamCasts","goodDeathSweep","eyeBeamTimeStamp","undefined","deathsweepsInMetaCounter","badCasts","DEMONIC_TALENT","onEyeBeamCast","onDeathSweepCast","FelBarrage","casts","FEL_BARRAGE_DAMAGE","felBarrage","felBarrageCasts","FelEruption","stuns","countingCasts","applydebuff","countingStuns","Momentum","getBuffUptime","MOMENTUM_BUFF","buffUptime","isLessThan","Statistic","CORE","size","formatDuration","buffDuration","BoringSpellValueText","Uptime","FuryTracker","blindFuryWaste","spellId","blindFuryId","AMOUNT","max","processInvisibleEnergize","ResourceTracker","dependencies","spellUsable","SpellUsable","FuryDetails","formatNumber","furyTracker","wasted","wastedFuryPercent","BoringResourceValue","label","title","url","render","Panel","ResourceBreakdown","tracker","showSpenders","generated","DemonBite","DemonicAppetite","DEMONIC_APPETITE_TALENT","DEMONIC_APPETITE_FURY","DemonBlades","DEMON_BLADES_FURY","HavocDemonHunterChecklist","thresholds","AbilityRequirement","props","GenericCastEfficiencyRequirement","getCastEfficiencyForSpellId","Rule","name","description","href","target","rel","Requirement","blindFuryBadCasts","demonicBadCasts","felEruptionBadCasts","felBarrageBadCasts","momentumBuffUptime","totalFuryWasted","demonBiteFury","immolationAuraEfficiency","felbladeEfficiency","demonicAppetiteEfficiency","demonBladesEfficiency","PreparationRule","Checklist","Component","combatants","selected","preparationRuleAnalyzer","downtimeSuggestionThresholds","alwaysBeCasting","felblade","immolationAura","blindFury","demonic","felEruption","momentum","demonBite","demonicAppetite","demonBlades","furyDetails","BaseModule","Combatants","CastEfficiency","manaValues","ManaValues","PreparationRuleAnalyzer","MetaBuffUptime","TrailofRuin","TRAIL_OF_RUIN_TALENT","TRAIL_OF_RUIN_DAMAGE","trailOfRuinDot","FelMastery","FEL_MASTERY_TALENT","FEL_RUSH_DAMAGE","felRushExtraDamage","Netherwalk","damageImmuned","to","onNetherwalkCast","dropdown","length","className","Object","values","map","e","i","key","MasterOfTheGlaives","slows","MASTER_OF_THE_GLAIVE_DEBUFF","countingSlows","DAMAGE_SPELLS","CHAOS_STRIKE_MH_DAMAGE","CHAOS_STRIKE_OH_DAMAGE","ANNIHILATION_MH_DAMAGE","ANNIHILATION_OH_DAMAGE","DarkSlash","extraDamage","enemies","getEntity","calculateEffectiveDamage","Enemies","CycleOfHatred","totalCooldownReduction","CYCLE_OF_HATRED_TALENT","CHAOS_STRIKE_ENERGIZE","isOnCooldown","effectiveReduction","reduceCooldown","SpellIcon","CombatLogParser","CoreCombatLogParser","specModules","channeling","globalCooldown","eyeBeamNormalizer","EyeBeamNormalizer","abilities","cooldownThroughputTracker","checklist","metaBuffUptime","trailofRuin","felMastery","netherwalk","masterOfTheGlaives","darkSlash","cycleOfHatred","arcaneTorrent","ArcaneTorrent","increase","raw","absorbed","Icon","other","xmlns","viewBox","d","others","defaultProps","STATISTIC_CATEGORY","TALENTS"],"mappings":"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","file":"static/js/HavocDemonHunter.5d6787ac.chunk.js","sourcesContent":["import SPELLS from 'common/SPELLS';\r\n\r\nimport EventsNormalizer from 'parser/core/EventsNormalizer';\r\nimport { EventType } from 'parser/core/Events';\r\n\r\nclass EyeBeam extends EventsNormalizer {\r\n  /**\r\n   * The applybuff from demonic is logged before the cast of Eye Beam.\r\n   * This normalizes events so that the Eye Beam applybuff always comes before the Meta Havoc buff\r\n   * @param {Array} events\r\n   * @returns {Array}\r\n   **/\r\n\r\n  normalize(events) {\r\n    const fixedEvents = [];\r\n    events.forEach((event, eventIndex) => {\r\n      fixedEvents.push(event);\r\n\r\n      if (event.type === EventType.ApplyBuff && event.ability.guid === SPELLS.EYE_BEAM.id) {\r\n        const castTimestamp = event.timestamp;\r\n\r\n        for (let previousEventIndex = eventIndex; previousEventIndex >= 0; previousEventIndex -= 1) {\r\n          const previousEvent = fixedEvents[previousEventIndex];\r\n          if ((castTimestamp - previousEvent.timestamp) > 50) { // the max delay between the applybff events never looks to be more than this.\r\n            break;\r\n          }\r\n          if (previousEvent.type === EventType.ApplyBuff && previousEvent.ability.guid === SPELLS.METAMORPHOSIS_HAVOC_BUFF.id && previousEvent.sourceID === event.sourceID) {\r\n            fixedEvents.splice(previousEventIndex, 1);\r\n            fixedEvents.push(previousEvent);\r\n            previousEvent.__modified = true;\r\n            break;\r\n          }\r\n        }\r\n      }\r\n    });\r\n\r\n    return fixedEvents;\r\n  }\r\n}\r\n\r\nexport default EyeBeam;\r\n","import SPELLS from 'common/SPELLS';\r\nimport CoreChanneling from 'parser/shared/modules/Channeling';\r\nimport Events from 'parser/core/Events';\r\nimport { SELECTED_PLAYER } from 'parser/core/Analyzer';\r\n\r\nclass Channeling extends CoreChanneling {\r\n\r\n  constructor(options) {\r\n    super(options);\r\n    this.addEventListener(Events.applybuff.by(SELECTED_PLAYER), this.onApplyBuff);\r\n    this.addEventListener(Events.removebuff.by(SELECTED_PLAYER), this.onRemoveBuff);\r\n  }\r\n\r\n  cancelChannel(event, ability) {\r\n    if (this.isChannelingSpell(SPELLS.EYE_BEAM.id)) {\r\n      this.endChannel(event);\r\n    } else {\r\n      super.cancelChannel(event, ability);\r\n    }\r\n  }\r\n\r\n  //Eye beam with the Meta buff doesn't get caught by applybuff for some reason so we also include the on cast\r\n\r\n  //Eye Beam w/o the meta buff\r\n  onApplyBuff(event) {\r\n    if (!this.selectedCombatant.hasBuff(SPELLS.METAMORPHOSIS_HAVOC_BUFF.id)) {\r\n      return;\r\n    }\r\n    const spellId = event.ability.guid;\r\n    if (spellId === SPELLS.EYE_BEAM.id) {\r\n      this.beginChannel(event);\r\n      return;\r\n    }\r\n    super.onCast(event);\r\n  }\r\n\r\n  //Eye beam with the meta buff\r\n  onCast(event) {\r\n    if (this.selectedCombatant.hasBuff(SPELLS.METAMORPHOSIS_HAVOC_BUFF.id)) {\r\n      return;\r\n    }\r\n    const spellId = event.ability.guid;\r\n    if (spellId === SPELLS.EYE_BEAM.id) {\r\n      this.beginChannel(event);\r\n      return;\r\n    }\r\n    super.onCast(event);\r\n  }\r\n\r\n  onRemoveBuff(event) {\r\n    const spellId = event.ability.guid;\r\n    if (spellId !== SPELLS.EYE_BEAM.id) {\r\n      return;\r\n    }\r\n    if (!this.isChannelingSpell(SPELLS.EYE_BEAM.id)) {\r\n      // This may be true if we did the event-order fix in begincast/cast and it was already ended there.\r\n      return;\r\n    }\r\n    this.endChannel(event);\r\n  }\r\n}\r\n\r\nexport default Channeling;\r\n","import SPELLS from 'common/SPELLS';\r\nimport CoreGlobalCooldown from 'parser/shared/modules/GlobalCooldown';\r\n\r\n/**\r\n * Eye Beam's cast event is actually a beginchannel event, so it shouldn't add the GCD as active time.\r\n */\r\nclass GlobalCooldown extends CoreGlobalCooldown {\r\n  onCast(event) {\r\n    if (event.ability.guid === SPELLS.EYE_BEAM.id) {\r\n      // This GCD gets handled by the `beginchannel` event\r\n      return;\r\n    }\r\n    super.onCast(event);\r\n  }\r\n}\r\n\r\nexport default GlobalCooldown;\r\n","import React from 'react';\r\n\r\nimport SPELLS from 'common/SPELLS';\r\nimport SpellLink from 'common/SpellLink';\r\n\r\nimport { formatPercentage } from 'common/format';\r\n\r\nimport CoreAlwaysBeCasting from 'parser/shared/modules/AlwaysBeCasting';\r\n\r\nimport { i18n } from '@lingui/core';\r\nimport { t } from '@lingui/macro';\r\n\r\nclass AlwaysBeCasting extends CoreAlwaysBeCasting {\r\n  get suggestionThresholds() {\r\n    return {\r\n      actual: this.downtimePercentage,\r\n      isGreaterThan: {\r\n        minor: 0.15,\r\n        average: 0.25,\r\n        major: 0.35,\r\n      },\r\n      style: 'percentage',\r\n    };\r\n  }\r\n\r\n  suggestions(when) {\r\n    const boss = this.owner.boss;\r\n\r\n    if (!boss || !boss.fight.disableDowntimeSuggestion) {\r\n      when(this.suggestionThresholds).addSuggestion((suggest, actual, recommended) => suggest(<>Your downtime can be improved. Try to Always Be Casting (ABC), try to reduce the delay between casting spells. Even if you have to move, use your movement spells like <SpellLink id={SPELLS.FEL_RUSH_CAST.id} />, <SpellLink id={SPELLS.FELBLADE_TALENT.id} icon />, or <SpellLink id={SPELLS.VENGEFUL_RETREAT.id} icon /> to quickly get back to the boss.</>)\r\n        .icon('spell_mage_altertime')\r\n        .actual(i18n._(t('demonhunter.havoc.suggestions.alwaysBeCasting.downtime')`${formatPercentage(actual)}% downtime`))\r\n        .recommended(`<${formatPercentage(recommended)}% is recommended`));\r\n    }\r\n  }\r\n}\r\n\r\nexport default AlwaysBeCasting;\r\n","import React from 'react';\r\n\r\nimport SPELLS from 'common/SPELLS';\r\nimport SpellLink from 'common/SpellLink';\r\nimport CoreAbilities from 'parser/core/modules/Abilities';\r\n\r\nclass Abilities extends CoreAbilities {\r\n  spellbook() {\r\n    const combatant = this.selectedCombatant;\r\n    return [\r\n      //Rotation Spells\r\n      {\r\n        spell: SPELLS.DEMONS_BITE,\r\n        enabled: !combatant.hasTalent(SPELLS.DEMON_BLADES_TALENT.id),\r\n        category: Abilities.SPELL_CATEGORIES.ROTATIONAL,\r\n        gcd: {\r\n          base: 1500,\r\n        },\r\n      },\r\n      {\r\n        spell: SPELLS.CHAOS_STRIKE,\r\n        category: Abilities.SPELL_CATEGORIES.ROTATIONAL,\r\n        gcd: {\r\n          base: 1500,\r\n        },\r\n      },\r\n      {\r\n        spell: SPELLS.ANNIHILATION, //During meta chaos strike becomes this.\r\n        category: Abilities.SPELL_CATEGORIES.ROTATIONAL,\r\n        gcd: {\r\n          base: 1500,\r\n        },\r\n      },\r\n      {\r\n        spell: [SPELLS.BLADE_DANCE, SPELLS.DEATH_SWEEP],\r\n        category: combatant.hasTalent(SPELLS.FIRST_BLOOD_TALENT.id) ? Abilities.SPELL_CATEGORIES.ROTATIONAL : Abilities.SPELL_CATEGORIES.ROTATIONAL_AOE,\r\n        cooldown: haste => 9 / (1 + haste),\r\n        gcd: {\r\n          base: 1500,\r\n        },\r\n        castEfficiency: {\r\n          suggestion: combatant.hasTalent(SPELLS.FIRST_BLOOD_TALENT.id),\r\n          recommendedEfficiency: 0.95,\r\n          extraSuggestion: <>This should be part of your single target rotation due to the <SpellLink id={SPELLS.FIRST_BLOOD_TALENT.id} /> talent. This includes the <SpellLink id={SPELLS.DEATH_SWEEP.id} /> casts since they are the same ability and share their cooldowns.</>,\r\n        },\r\n      },\r\n      {\r\n        spell: SPELLS.FELBLADE_TALENT,\r\n        enabled: combatant.hasTalent(SPELLS.FELBLADE_TALENT.id),\r\n        category: Abilities.SPELL_CATEGORIES.ROTATIONAL,\r\n        // Felblade cooldown can be reset by Shear or Demon Blades (when talented). But it's CD reset is not any event, so can't track if it resets or not.\r\n        cooldown: haste => 15 / (1 + haste),\r\n        gcd: {\r\n          base: 1500,\r\n        },\r\n        castEfficiency: {\r\n          suggestion: true,\r\n          recommendedEfficiency: 0.95,\r\n          extraSuggestion: 'This is an important Fury generator spell. Try to always cast on cooldown, but beware to not waste the Fury generation it provides. And also it can be used to charge to the desired target, making it very strong movement spell.',\r\n        },\r\n      },\r\n      {\r\n        spell: SPELLS.IMMOLATION_AURA,\r\n        // IMMOLATION_AURA is the ID for cast and the buff. But damage is done from IMMOLATION_AURA_FIRST_STRIKE_DPS and IMMOLATION_AURA_BUFF_DPS\r\n        buffSpellId: SPELLS.IMMOLATION_AURA.id,\r\n        enabled: combatant.hasTalent(SPELLS.IMMOLATION_AURA.id),\r\n        category: Abilities.SPELL_CATEGORIES.ROTATIONAL,\r\n        cooldown: haste => 30 / (1 + haste),\r\n        gcd: {\r\n          base: 1500,\r\n        },\r\n        castEfficiency: {\r\n          suggestion: true,\r\n          recommendedEfficiency: 0.95,\r\n          extraSuggestion: 'This is an important Fury generator spell. Try to always cast on cooldown, but beware to not waste the Fury generation it provides.',\r\n        },\r\n      },\r\n      {\r\n        spell: SPELLS.DARK_SLASH_TALENT,\r\n        enabled: combatant.hasTalent(SPELLS.DARK_SLASH_TALENT.id),\r\n        category: Abilities.SPELL_CATEGORIES.COOLDOWNS,\r\n        cooldown: 20,\r\n        gcd: {\r\n          base: 1500,\r\n        },\r\n        castEfficiency: {\r\n          suggestion: true,\r\n          recommendedEfficiency: 0.95,\r\n          extraSuggestion: <>Pool your Fury before hand to maximizing casting <SpellLink id={SPELLS.CHAOS_STRIKE.id} /> / <SpellLink id={SPELLS.ANNIHILATION.id} /> during its buff window.</>,\r\n        },\r\n      },\r\n      {\r\n        spell: SPELLS.THROW_GLAIVE_HAVOC,\r\n        category: Abilities.SPELL_CATEGORIES.ROTATIONAL,\r\n        charges: combatant.hasTalent(SPELLS.MASTER_OF_THE_GLAIVE_TALENT.id) ? 2 : 1,\r\n        cooldown: haste => 10 / (1 + haste),\r\n        gcd: {\r\n          base: 1500,\r\n        },\r\n      },\r\n\r\n      //Movement\r\n      {\r\n        spell: SPELLS.FEL_RUSH_CAST, //Becomes a rotational ability with the Momentum talent\r\n        category: combatant.hasTalent(SPELLS.MOMENTUM_TALENT.id) ? Abilities.SPELL_CATEGORIES.ROTATIONAL : Abilities.SPELL_CATEGORIES.UTILITY,\r\n        charges: 2,\r\n        cooldown: 10,\r\n        gcd: {\r\n          static: 250,\r\n        },\r\n        castEfficiency: {\r\n          suggestion: combatant.hasTalent(SPELLS.MOMENTUM_TALENT.id),\r\n          recommendedEfficiency: 0.95,\r\n          extraSuggestion: <>Use it to keep your <SpellLink id={SPELLS.MOMENTUM_TALENT.id} /> buff going.</>,\r\n        },\r\n      },\r\n      {\r\n        spell: SPELLS.VENGEFUL_RETREAT, //Becomes a rotational ability with the Momentum talent\r\n        category: combatant.hasTalent(SPELLS.MOMENTUM_TALENT.id) ? Abilities.SPELL_CATEGORIES.ROTATIONAL : Abilities.SPELL_CATEGORIES.UTILITY,\r\n        cooldown: combatant.hasTalent(SPELLS.MOMENTUM_TALENT.id) ? 20 : 25,\r\n        // Not actually on the GCD but blocks all spells during its animation for 1 second. The issue is you can follow up any ability on the GCD with Vengeful Retreat, so it can still cause overlap.\r\n        gcd: null,\r\n        castEfficiency: {\r\n          suggestion: combatant.hasTalent(SPELLS.MOMENTUM_TALENT.id),\r\n          recommendedEfficiency: 0.95,\r\n          extraSuggestion: <>Use it to generate Fury due to the <SpellLink id={SPELLS.MOMENTUM_TALENT.id} /> talent.</>,\r\n        },\r\n      },\r\n      {\r\n        spell: SPELLS.GLIDE,\r\n        category: Abilities.SPELL_CATEGORIES.UTILITY,\r\n        cooldown: 1.5,\r\n        gcd: null,\r\n      },\r\n\r\n      // CC, interupts, and utility\r\n      {\r\n        spell: SPELLS.FEL_ERUPTION_TALENT,\r\n        enabled: combatant.hasTalent(SPELLS.FEL_ERUPTION_TALENT.id),\r\n        category: Abilities.SPELL_CATEGORIES.UTILITY,\r\n        cooldown: 30,\r\n        gcd: {\r\n          base: 1500,\r\n        },\r\n      },\r\n      {\r\n        spell: SPELLS.CHAOS_NOVA,\r\n        category: Abilities.SPELL_CATEGORIES.UTILITY,\r\n        cooldown: combatant.hasTalent(SPELLS.UNLEASHED_POWER_TALENT.id) ? 40 : 60,\r\n        gcd: {\r\n          base: 1500,\r\n        },\r\n      },\r\n      {\r\n        spell: SPELLS.DISRUPT,\r\n        category: Abilities.SPELL_CATEGORIES.UTILITY,\r\n        cooldown: 15,\r\n        gcd: null,\r\n      },\r\n      {\r\n        spell: SPELLS.CONSUME_MAGIC,\r\n        category: Abilities.SPELL_CATEGORIES.UTILITY,\r\n        cooldown: 10,\r\n        gcd: {\r\n          base: 1500,\r\n        },\r\n      },\r\n      {\r\n        spell: SPELLS.TORMENT,\r\n        category: Abilities.SPELL_CATEGORIES.UTILITY,\r\n        cooldown: 8,\r\n        gcd: null,\r\n      },\r\n      {\r\n        spell: SPELLS.IMPRISON,\r\n        category: Abilities.SPELL_CATEGORIES.UTILITY,\r\n        cooldown: 45,\r\n        gcd: {\r\n          base: 1500,\r\n        },\r\n      },\r\n      {\r\n        spell: SPELLS.SPECTRAL_SIGHT,\r\n        category: Abilities.SPELL_CATEGORIES.UTILITY,\r\n        cooldown: 30,\r\n        gcd: {\r\n          base: 1500,\r\n        },\r\n      },\r\n\r\n      // DPS Cooldowns\r\n      {\r\n        spell: SPELLS.EYE_BEAM,\r\n        category: Abilities.SPELL_CATEGORIES.COOLDOWNS,\r\n        cooldown: 30,\r\n        gcd: {\r\n          base: 1500,\r\n        },\r\n      },\r\n      {\r\n        spell: SPELLS.FEL_BARRAGE_TALENT,\r\n        enabled: combatant.hasTalent(SPELLS.FEL_BARRAGE_TALENT.id),\r\n        category: Abilities.SPELL_CATEGORIES.COOLDOWNS,\r\n        cooldown: 60,\r\n        gcd: {\r\n          base: 1500,\r\n        },\r\n        castEfficiency: {\r\n          suggestion: true,\r\n          recommendedEfficiency: 0.95,\r\n          extraSuggestion: `This is a great AoE damage spell, but also does a great damage on single target. You should cast it as soon as it gets off cooldown. The only moment you can delay it's cast is if you already expect an add wave to maximize it's efficiency and damage output.`,\r\n        },\r\n      },\r\n\r\n      // Big DPS Cooldowns\r\n      {\r\n        spell: SPELLS.METAMORPHOSIS_HAVOC,\r\n        category: Abilities.SPELL_CATEGORIES.COOLDOWNS,\r\n        buffSpellId: SPELLS.METAMORPHOSIS_HAVOC_BUFF.id,\r\n        cooldown: 240,\r\n        gcd: null, // Logs track the \"landing\" spell which is not on GCD\r\n        castEfficiency: {\r\n          suggestion: true,\r\n          recommendedEfficiency: 0.80, //4 minute cd. You want some leeway in when to burn it.\r\n        },\r\n      },\r\n      {\r\n        spell: SPELLS.NEMESIS_TALENT,\r\n        enabled: combatant.hasTalent(SPELLS.NEMESIS_TALENT.id),\r\n        category: Abilities.SPELL_CATEGORIES.COOLDOWNS,\r\n        cooldown: 120,\r\n        castEfficiency: {\r\n          suggestion: true,\r\n          recommendedEfficiency: 0.95,\r\n          extraSuggestion: 'This is your main damage increase buff. You should use it as much as you can to maximize your damage output.',\r\n        },\r\n      },\r\n\r\n      // Defensives\r\n      {\r\n        spell: SPELLS.BLUR,\r\n        buffSpellId: SPELLS.BLUR.id,\r\n        category: Abilities.SPELL_CATEGORIES.DEFENSIVE,\r\n        cooldown: 60,\r\n      },\r\n      {\r\n        spell: SPELLS.DARKNESS,\r\n        buffSpellId: SPELLS.DARKNESS.id,\r\n        category: Abilities.SPELL_CATEGORIES.DEFENSIVE,\r\n        cooldown: 180,\r\n      },\r\n      {\r\n        spell: SPELLS.NETHERWALK_TALENT,\r\n        enabled: combatant.hasTalent(SPELLS.NETHERWALK_TALENT.id),\r\n        category: Abilities.SPELL_CATEGORIES.DEFENSIVE,\r\n        cooldown: 120,\r\n      },\r\n    ];\r\n  }\r\n}\r\n\r\nexport default Abilities;\r\n","import SPELLS from 'common/SPELLS';\r\nimport CoreCooldownThroughputTracker, { BUILT_IN_SUMMARY_TYPES } from 'parser/shared/modules/CooldownThroughputTracker';\r\n\r\nclass CooldownThroughputTracker extends CoreCooldownThroughputTracker {\r\n  static cooldownSpells = [\r\n    ...CoreCooldownThroughputTracker.cooldownSpells,\r\n    {\r\n      spell: SPELLS.METAMORPHOSIS_HAVOC_BUFF,\r\n      summary: [\r\n        BUILT_IN_SUMMARY_TYPES.DAMAGE,\r\n      ],\r\n    },\r\n  ];\r\n}\r\n\r\nexport default CooldownThroughputTracker;\r\n","import React from 'react';\r\nimport SPELLS from 'common/SPELLS';\r\nimport SpellLink from 'common/SpellLink';\r\nimport TalentStatisticBox from 'interface/others/TalentStatisticBox';\r\nimport STATISTIC_ORDER from 'interface/others/STATISTIC_ORDER';\r\nimport Events from 'parser/core/Events';\r\nimport Analyzer, { SELECTED_PLAYER } from 'parser/core/Analyzer';\r\nimport { formatThousands, formatPercentage } from 'common/format';\r\nimport { i18n } from '@lingui/core';\r\nimport { t } from '@lingui/macro';\r\n\r\n/**\r\n * Example Report: https://www.warcraftlogs.com/reports/KGJgZPxanBX82LzV/#fight=4&source=20\r\n */\r\n\r\nconst IMMOLATION_AURA = [SPELLS.IMMOLATION_AURA_FIRST_STRIKE_DPS, SPELLS.IMMOLATION_AURA_BUFF_DPS];\r\n\r\nclass ImmolationAura extends Analyzer {\r\n\r\n  get furyPerMin() {\r\n    return ((this.furyGain - this.furyWaste) / (this.owner.fightDuration / 60000)).toFixed(2);\r\n  }\r\n\r\n  get suggestionThresholds() {\r\n    return {\r\n      actual: this.furyWaste / this.furyGain,\r\n      isGreaterThan: {\r\n        minor: 0.03,\r\n        average: 0.07,\r\n        major: 0.1,\r\n      },\r\n      style: 'percentage',\r\n    };\r\n  }\r\n\r\n  furyGain = 0;\r\n  furyWaste = 0;\r\n  damage = 0;\r\n\r\n  constructor(...args) {\r\n    super(...args);\r\n    this.active = this.selectedCombatant.hasTalent(SPELLS.IMMOLATION_AURA.id);\r\n    if (!this.active) {\r\n      return;\r\n    }\r\n    this.addEventListener(Events.energize.by(SELECTED_PLAYER).spell(SPELLS.IMMOLATION_AURA_BUFF_DPS), this.onEnergizeEvent);\r\n    this.addEventListener(Events.damage.by(SELECTED_PLAYER).spell(IMMOLATION_AURA), this.onDamageEvent);\r\n  }\r\n\r\n  onEnergizeEvent(event) {\r\n    this.furyGain += event.resourceChange;\r\n    this.furyWaste += event.waste;\r\n  }\r\n\r\n  onDamageEvent(event) {\r\n    this.damage += event.amount;\r\n  }\r\n\r\n  suggestions(when) {\r\n    when(this.suggestionThresholds)\r\n      .addSuggestion((suggest, actual, recommended) => suggest(<> Avoid casting <SpellLink id={SPELLS.IMMOLATION_AURA.id} /> when close to max Fury.</>)\r\n        .icon(SPELLS.IMMOLATION_AURA.icon)\r\n        .actual(i18n._(t('demonhunter.havoc.suggestions.immolationAura.furyWasted')`${formatPercentage(actual)}% Fury wasted`))\r\n        .recommended(`${formatPercentage(recommended)}% is recommended.`));\r\n  }\r\n\r\n  statistic() {\r\n    const effectiveFuryGain = this.furyGain - this.furyWaste;\r\n    return (\r\n      <TalentStatisticBox\r\n        talent={SPELLS.IMMOLATION_AURA.id}\r\n        position={STATISTIC_ORDER.OPTIONAL(6)}\r\n        value={(\r\n          <>\r\n            {this.furyPerMin} <small>Fury per min </small><br />\r\n            {this.owner.formatItemDamageDone(this.damage)}\r\n          </>\r\n        )}\r\n        tooltip={(\r\n          <>\r\n            {formatThousands(this.damage)} Total damage<br />\r\n            {effectiveFuryGain} Effective Fury gained<br />\r\n            {this.furyGain} Total Fury gained<br />\r\n            {this.furyWaste} Fury wasted\r\n          </>\r\n        )}\r\n      />\r\n    );\r\n  }\r\n}\r\n\r\nexport default ImmolationAura;\r\n","import React from 'react';\r\nimport SPELLS from 'common/SPELLS';\r\nimport TalentStatisticBox from 'interface/others/TalentStatisticBox';\r\nimport STATISTIC_ORDER from 'interface/others/STATISTIC_ORDER';\r\nimport Events from 'parser/core/Events';\r\nimport Analyzer, { SELECTED_PLAYER } from 'parser/core/Analyzer';\r\nimport { formatPercentage } from 'common/format';\r\nimport SpellLink from 'common/SpellLink';\r\nimport { i18n } from '@lingui/core';\r\nimport { t } from '@lingui/macro';\r\n\r\n/**\r\n * Example Report: https://www.warcraftlogs.com/reports/1HRhNZa2cCkgK9AV#fight=48&type=summary&source=10\r\n */\r\nclass Felblade extends Analyzer {\r\n\r\n  get furyPerMin() {\r\n    return ((this.furyGain - this.furyWaste) / (this.owner.fightDuration / 60000)).toFixed(2);\r\n  }\r\n\r\n  get suggestionThresholds() {\r\n    return {\r\n      actual: this.furyWaste / this.furyGain,\r\n      isGreaterThan: {\r\n        minor: 0.03,\r\n        average: 0.07,\r\n        major: 0.1,\r\n      },\r\n      style: 'percentage',\r\n    };\r\n  }\r\n\r\n  furyGain = 0;\r\n  furyWaste = 0;\r\n\r\n  constructor(...args) {\r\n    super(...args);\r\n    this.active = this.selectedCombatant.hasTalent(SPELLS.FELBLADE_TALENT.id);\r\n    if (!this.active) {\r\n      return;\r\n    }\r\n    this.addEventListener(Events.energize.by(SELECTED_PLAYER).spell(SPELLS.FELBLADE_PAIN_GENERATION), this.onEnergizeEvent);\r\n  }\r\n\r\n  onEnergizeEvent(event) {\r\n    this.furyGain += event.resourceChange;\r\n    this.furyWaste += event.waste;\r\n  }\r\n\r\n  suggestions(when) {\r\n    when(this.suggestionThresholds)\r\n      .addSuggestion((suggest, actual, recommended) => suggest(<> Avoid casting <SpellLink id={SPELLS.FELBLADE_TALENT.id} /> close to Fury cap and cast abilities regularly to avoid accidently capping your fury.</>)\r\n        .icon(SPELLS.FELBLADE_TALENT.icon)\r\n        .actual(i18n._(t('demonhunter.havoc.suggestions.felBlade.furyWasted')`${formatPercentage(actual)}% Fury wasted`))\r\n        .recommended(`${formatPercentage(recommended)}% is recommended.`));\r\n  }\r\n\r\n  statistic() {\r\n    const effectiveFuryGain = this.furyGain - this.furyWaste;\r\n    return (\r\n      <TalentStatisticBox\r\n        talent={SPELLS.FELBLADE_TALENT.id}\r\n        position={STATISTIC_ORDER.OPTIONAL(6)}\r\n        value={<>{this.furyPerMin} <small>Fury per min </small></>}\r\n        tooltip={(\r\n          <>\r\n            {effectiveFuryGain} Effective Fury gained<br />\r\n            {this.furyGain} Total Fury gained<br />\r\n            {this.furyWaste} Fury wasted\r\n          </>\r\n        )}\r\n      />\r\n    );\r\n  }\r\n}\r\n\r\nexport default Felblade;\r\n","import React from 'react';\r\nimport SPELLS from 'common/SPELLS';\r\nimport TalentStatisticBox from 'interface/others/TalentStatisticBox';\r\nimport STATISTIC_ORDER from 'interface/others/STATISTIC_ORDER';\r\nimport Events from 'parser/core/Events';\r\nimport Analyzer, { SELECTED_PLAYER } from 'parser/core/Analyzer';\r\nimport SpellLink from 'common/SpellLink';\r\nimport { formatPercentage } from 'common/format';\r\nimport RESOURCE_TYPES from 'game/RESOURCE_TYPES';\r\n\r\n/**\r\n * Example Report: https://www.warcraftlogs.com/reports/KGJgZPxanBX82LzV/#fight=4&source=20\r\n */\r\nconst MAX_FURY = 120;\r\n\r\nclass BlindFury extends Analyzer {\r\n\r\n  get furyPerMin() {\r\n    return (this.gained / (this.owner.fightDuration / 60000)).toFixed(2);\r\n  }\r\n\r\n  get suggestionThresholds() {\r\n    return {\r\n      actual: this.badCast,\r\n      isGreaterThan: {\r\n        minor: 0,\r\n        average: 0,\r\n        major: 1,\r\n      },\r\n      style: 'number',\r\n    };\r\n  }\r\n\r\n  gained = 0;\r\n  badCast = 0;\r\n\r\n  constructor(...args) {\r\n    super(...args);\r\n    this.active = this.selectedCombatant.hasTalent(SPELLS.BLIND_FURY_TALENT.id);\r\n    if (!this.active) {\r\n      return;\r\n    }\r\n    this.addEventListener(Events.cast.by(SELECTED_PLAYER).spell(SPELLS.EYE_BEAM), this.onEyeBeamsCast);\r\n  }\r\n\r\n  onEyeBeamsCast(event) {\r\n    event.classResources && event.classResources.forEach(resource => {\r\n      if (resource.type !== RESOURCE_TYPES.FURY.id) {\r\n        return;\r\n      }\r\n      this.gained += (MAX_FURY - (resource.amount - resource.cost));\r\n      if (resource.amount >= 50) {\r\n        this.badCast += 1;\r\n      }\r\n    });\r\n  }\r\n\r\n  suggestions(when) {\r\n    when(this.suggestionThresholds)\r\n      .addSuggestion((suggest, actual, recommended) => suggest(<>Cast <SpellLink id={SPELLS.EYE_BEAM.id} /> with 50 or less Fury when you take the <SpellLink id={SPELLS.BLIND_FURY_TALENT.id} /> talent to minimize Fury waste and maximize DPS.</>)\r\n        .icon(SPELLS.BLIND_FURY_TALENT.icon)\r\n        .actual(<>{actual} bad <SpellLink id={SPELLS.EYE_BEAM.id} /> casts above 50 Fury. </>)\r\n        .recommended(`${formatPercentage(recommended)}% is recommended.`));\r\n  }\r\n\r\n  statistic() {\r\n    return (\r\n      <TalentStatisticBox\r\n        talent={SPELLS.BLIND_FURY_TALENT.id}\r\n        position={STATISTIC_ORDER.OPTIONAL(6)}\r\n        value={(\r\n          <>\r\n            {this.badCast} <small>bad <SpellLink id={SPELLS.EYE_BEAM.id} /> casts</small><br />\r\n            {this.furyPerMin} <small>Fury per min</small>\r\n          </>\r\n        )}\r\n        tooltip={(\r\n          <>\r\n            Since this will always max out your Fury on cast, wasted and totals do not matter. Only the amount effectively gained. <br />\r\n            A bad cast is when you cast Eye Beam with more than 50 Fury. At that point you are wasting enough fury gained for it to be a DPS loss. <br /><br />\r\n            {this.gained} Effective Fury gained<br />\r\n          </>\r\n        )}\r\n      />\r\n    );\r\n  }\r\n}\r\n\r\nexport default BlindFury;\r\n","import React from 'react';\r\nimport SPELLS from 'common/SPELLS';\r\nimport TalentStatisticBox from 'interface/others/TalentStatisticBox';\r\nimport STATISTIC_ORDER from 'interface/others/STATISTIC_ORDER';\r\nimport Events from 'parser/core/Events';\r\nimport Analyzer, { SELECTED_PLAYER } from 'parser/core/Analyzer';\r\nimport SpellLink from 'common/SpellLink';\r\n\r\n/**\r\n * Example Report: https://www.warcraftlogs.com/reports/23dHWCrT18qhaJbz/#fight=1&source=16\r\n */\r\n\r\nconst META_BUFF_DURATION_EYEBEAM = 10000;\r\n\r\nclass Demonic extends Analyzer {\r\n\r\n  get suggestionThresholds() {\r\n    return {\r\n      actual: this.badCasts,\r\n      isGreaterThan: {\r\n        minor: 0,\r\n        average: 0,\r\n        major: 1,\r\n      },\r\n      style: 'number',\r\n    };\r\n  }\r\n\r\n  eyeBeamCasts = 0;\r\n  goodDeathSweep = 0;\r\n  eyeBeamTimeStamp = undefined;\r\n  deathsweepsInMetaCounter = undefined;\r\n  badCasts = 0;\r\n\r\n  constructor(...args) {\r\n    super(...args);\r\n    this.active = this.selectedCombatant.hasTalent(SPELLS.DEMONIC_TALENT.id);\r\n    if (!this.active) {\r\n      return;\r\n    }\r\n    this.addEventListener(Events.cast.by(SELECTED_PLAYER).spell(SPELLS.EYE_BEAM), this.onEyeBeamCast);\r\n    this.addEventListener(Events.cast.by(SELECTED_PLAYER).spell(SPELLS.DEATH_SWEEP), this.onDeathSweepCast);\r\n  }\r\n\r\n  onEyeBeamCast(event) {\r\n    const hasMetaBuff = this.selectedCombatant.hasBuff(SPELLS.METAMORPHOSIS_HAVOC_BUFF.id, event.timestamp - 1000);\r\n\r\n    if (hasMetaBuff) {\r\n      return;\r\n    }\r\n    this.eyeBeamCasts += 1;\r\n    this.eyeBeamTimeStamp = event.timestamp;\r\n\r\n    if (this.deathsweepsInMetaCounter === undefined) {\r\n      this.deathsweepsInMetaCounter = 0;\r\n      return;\r\n    }\r\n\r\n    if (this.deathsweepsInMetaCounter < 2) {\r\n      this.badCasts += 1;\r\n    }\r\n\r\n    this.deathsweepsInMetaCounter = 0;\r\n  }\r\n\r\n  onDeathSweepCast(event) {\r\n    if (this.eyeBeamTimeStamp !== undefined && (event.timestamp - this.eyeBeamTimeStamp) < META_BUFF_DURATION_EYEBEAM) {\r\n      this.goodDeathSweep += 1;\r\n      this.deathsweepsInMetaCounter += 1;\r\n    }\r\n  }\r\n\r\n  suggestions(when) {\r\n    when(this.suggestionThresholds)\r\n      .addSuggestion((suggest, actual, recommended) => suggest(<>Try to have <SpellLink id={SPELLS.BLADE_DANCE.id} /> almost off cooldown before casting <SpellLink id={SPELLS.EYE_BEAM.id} />. This will allow for two casts of <SpellLink id={SPELLS.DEATH_SWEEP.id} /> during the <SpellLink id={SPELLS.METAMORPHOSIS_HAVOC.id} /> buff you get from the <SpellLink id={SPELLS.DEMONIC_TALENT.id} /> talent.</>)\r\n        .icon(SPELLS.DEMONIC_TALENT.icon)\r\n        .actual(<>{actual} time(s) during <SpellLink id={SPELLS.METAMORPHOSIS_HAVOC.id} /> <SpellLink id={SPELLS.DEATH_SWEEP.id} /> wasn't casted twice.</>)\r\n        .recommended(`No bad casts is recommended.`));\r\n  }\r\n\r\n  statistic() {\r\n    return (\r\n      <TalentStatisticBox\r\n        talent={SPELLS.DEMONIC_TALENT.id}\r\n        position={STATISTIC_ORDER.OPTIONAL(6)}\r\n        value={(\r\n          <>\r\n            {this.badCasts} <small>Bad casts</small><br />\r\n          </>\r\n        )}\r\n        tooltip={`A bad cast is triggered when you don't do atleast 2 Death Sweep casts inside\r\n                  the Metamorphosis window you get from Eye Beam due to the Demonic talent.`}\r\n      />\r\n    );\r\n  }\r\n}\r\n\r\nexport default Demonic;\r\n","import React from 'react';\r\nimport SPELLS from 'common/SPELLS';\r\nimport TalentStatisticBox from 'interface/others/TalentStatisticBox';\r\nimport STATISTIC_ORDER from 'interface/others/STATISTIC_ORDER';\r\nimport Events from 'parser/core/Events';\r\nimport Analyzer, { SELECTED_PLAYER } from 'parser/core/Analyzer';\r\nimport { formatThousands } from 'common/format';\r\nimport SpellLink from 'common/SpellLink';\r\n\r\n/**\r\n * Example Report: https://www.warcraftlogs.com/reports/Mz8cTFgNkxXaJt3j/#fight=4&source=18\r\n */\r\n\r\nclass FelBarrage extends Analyzer {\r\n\r\n  get suggestionThresholds() {\r\n    return {\r\n      actual: this.badCasts,\r\n      isGreaterThan: {\r\n        minor: 0,\r\n        average: 0,\r\n        major: 1,\r\n      },\r\n      style: 'number',\r\n    };\r\n  }\r\n\r\n  damage = 0;\r\n  casts = 0;\r\n  badCasts = 0;\r\n\r\n  constructor(...args) {\r\n    super(...args);\r\n    this.active = this.selectedCombatant.hasTalent(SPELLS.FEL_BARRAGE_TALENT.id);\r\n    if (!this.active) {\r\n      return;\r\n    }\r\n    this.addEventListener(Events.damage.by(SELECTED_PLAYER).spell(SPELLS.FEL_BARRAGE_DAMAGE), this.felBarrage);\r\n    this.addEventListener(Events.cast.by(SELECTED_PLAYER).spell(SPELLS.FEL_BARRAGE_TALENT), this.felBarrageCasts);\r\n  }\r\n\r\n  felBarrage(event) {\r\n    this.damage += event.amount;\r\n  }\r\n\r\n  felBarrageCasts(event) {\r\n    this.casts += 1;\r\n\r\n    const hasMetaBuff = this.selectedCombatant.hasBuff(SPELLS.METAMORPHOSIS_HAVOC_BUFF.id, event.timestamp);\r\n\r\n    if (!hasMetaBuff) {\r\n      this.badCasts += 1;\r\n    }\r\n  }\r\n\r\n  suggestions(when) {\r\n    when(this.suggestionThresholds)\r\n      .addSuggestion((suggest, actual, recommended) => suggest(<>Try to cast <SpellLink id={SPELLS.FEL_BARRAGE_TALENT.id} /> during <SpellLink id={SPELLS.METAMORPHOSIS_HAVOC.id} />.</>)\r\n        .icon(SPELLS.FEL_BARRAGE_TALENT.icon)\r\n        .actual(<>{actual} bad <SpellLink id={SPELLS.FEL_BARRAGE_TALENT.id} /> casts without <SpellLink id={SPELLS.METAMORPHOSIS_HAVOC.id} />.</>)\r\n        .recommended(`No bad casts is recommended.`));\r\n  }\r\n\r\n  statistic() {\r\n    return (\r\n      <TalentStatisticBox\r\n        talent={SPELLS.FEL_BARRAGE_TALENT.id}\r\n        position={STATISTIC_ORDER.OPTIONAL(6)}\r\n        value={(\r\n          <>\r\n            {this.badCasts} <small>casts without <SpellLink id={SPELLS.METAMORPHOSIS_HAVOC.id} /> </small> <br />\r\n            {this.owner.formatItemDamageDone(this.damage)}\r\n          </>\r\n        )}\r\n        tooltip={(\r\n          <>\r\n            A bad cast is casting Fel Barage without Metamorphosis up.<br /><br />\r\n\r\n            {formatThousands(this.damage)} total damage\r\n          </>\r\n        )}\r\n      />\r\n    );\r\n  }\r\n}\r\n\r\nexport default FelBarrage;\r\n","import React from 'react';\r\nimport SPELLS from 'common/SPELLS';\r\nimport TalentStatisticBox from 'interface/others/TalentStatisticBox';\r\nimport STATISTIC_ORDER from 'interface/others/STATISTIC_ORDER';\r\nimport Events from 'parser/core/Events';\r\nimport Analyzer, { SELECTED_PLAYER } from 'parser/core/Analyzer';\r\nimport SpellLink from 'common/SpellLink';\r\n\r\n/**\r\n * Example Report: https://www.warcraftlogs.com/reports/9tAcN6PLwjMF4vm1/#fight=1&source=1\r\n */\r\n\r\nclass FelEruption extends Analyzer {\r\n\r\n  get badCasts() {\r\n    return this.casts - this.stuns;\r\n  }\r\n\r\n  get suggestionThresholds() {\r\n    return {\r\n      actual: this.badCasts,\r\n      isGreaterThan: {\r\n        minor: 0,\r\n        average: 0,\r\n        major: 1,\r\n      },\r\n      style: 'number',\r\n    };\r\n  }\r\n\r\n  casts = 0;\r\n  stuns = 0;\r\n\r\n  constructor(...args) {\r\n    super(...args);\r\n    this.active = this.selectedCombatant.hasTalent(SPELLS.FEL_ERUPTION_TALENT.id);\r\n    if (!this.active) {\r\n      return;\r\n    }\r\n    this.addEventListener(Events.cast.by(SELECTED_PLAYER).spell(SPELLS.FEL_ERUPTION_TALENT), this.countingCasts);\r\n    this.addEventListener(Events.applydebuff.by(SELECTED_PLAYER).spell(SPELLS.FEL_ERUPTION_TALENT), this.countingStuns);\r\n  }\r\n\r\n  countingCasts(event) {\r\n    this.casts += 1;\r\n  }\r\n\r\n  countingStuns(event) {\r\n    this.stuns += 1;\r\n  }\r\n\r\n  suggestions(when) {\r\n    when(this.suggestionThresholds)\r\n      .addSuggestion((suggest, actual, recommended) => suggest(<>Try to cast <SpellLink id={SPELLS.FEL_ERUPTION_TALENT.id} /> only for its stun. It's not worth casting for its damage since it's a DPS loss.</>)\r\n        .icon(SPELLS.FEL_ERUPTION_TALENT.icon)\r\n        .actual(<>{actual} bad <SpellLink id={SPELLS.FEL_ERUPTION_TALENT.id} /> casts that didn't stun the target </>)\r\n        .recommended('No bad casts are recommended.'));\r\n  }\r\n\r\n  statistic() {\r\n    return (\r\n      <TalentStatisticBox\r\n        talent={SPELLS.FEL_ERUPTION_TALENT.id}\r\n        position={STATISTIC_ORDER.OPTIONAL(6)}\r\n        value={<>{this.badCasts} <small>bad casts that didn't stun the target</small> </>}\r\n        tooltip={(\r\n          <>\r\n            This ability should only be used for its stun. Its a DPS loss. <br /> <br />\r\n            You casted this ability a total of {this.casts} time(s). <br />\r\n            It stunned a target {this.stuns} time(s).\r\n          </>\r\n        )}\r\n      />\r\n    );\r\n  }\r\n}\r\n\r\nexport default FelEruption;\r\n","import React from 'react';\r\n\r\nimport Analyzer from 'parser/core/Analyzer';\r\n\r\nimport SPELLS from 'common/SPELLS/index';\r\nimport SpellLink from 'common/SpellLink';\r\n\r\nimport { formatPercentage, formatDuration } from 'common/format';\r\n\r\nimport BoringSpellValueText from 'interface/statistics/components/BoringSpellValueText';\r\nimport Statistic from 'interface/statistics/Statistic';\r\nimport STATISTIC_ORDER from 'interface/others/STATISTIC_ORDER';\r\nimport UptimeIcon from 'interface/icons/Uptime';\r\n\r\nimport { i18n } from '@lingui/core';\r\nimport { t } from '@lingui/macro';\r\n\r\n/*\r\nexample report: https://www.warcraftlogs.com/reports/1HRhNZa2cCkgK9AV/#fight=48&source=10\r\n* */\r\n\r\nclass Momentum extends Analyzer {\r\n\r\n  get buffUptime() {\r\n    return this.selectedCombatant.getBuffUptime(SPELLS.MOMENTUM_BUFF.id) / this.owner.fightDuration;\r\n  }\r\n\r\n  get buffDuration() {\r\n    return this.selectedCombatant.getBuffUptime(SPELLS.MOMENTUM_BUFF.id);\r\n  }\r\n\r\n  get suggestionThresholds() {\r\n    return {\r\n      actual: this.buffUptime,\r\n      isLessThan: {\r\n        minor: 0.55,\r\n        average: 0.45,\r\n        major: 0.40,\r\n      },\r\n      style: 'percentage',\r\n    };\r\n  }\r\n\r\n  constructor(...args) {\r\n    super(...args);\r\n    this.active = this.selectedCombatant.hasTalent(SPELLS.MOMENTUM_TALENT.id);\r\n  }\r\n\r\n  suggestions(when) {\r\n    when(this.suggestionThresholds)\r\n      .addSuggestion((suggest, actual, recommended) => suggest(<> Maintain the <SpellLink id={SPELLS.MOMENTUM_TALENT.id} /> buff to maximize damage.</>)\r\n        .icon(SPELLS.MOMENTUM_TALENT.icon)\r\n        .actual(i18n._(t('demonhunter.havoc.suggestions.momentum.uptime')`${formatPercentage(actual)}% buff uptime`))\r\n        .recommended(`${formatPercentage(recommended)}% is recommended.`));\r\n  }\r\n\r\n  statistic() {\r\n    return (\r\n      <Statistic\r\n        position={STATISTIC_ORDER.CORE(3)}\r\n        size=\"flexible\"\r\n        tooltip={`The Momentum buff total uptime was ${formatDuration(this.buffDuration / 1000)}.`}\r\n      >\r\n        <BoringSpellValueText spell={SPELLS.MOMENTUM_TALENT}>\r\n          <>\r\n            <UptimeIcon /> {formatPercentage(this.buffUptime)}% <small>uptime</small>\r\n          </>\r\n        </BoringSpellValueText>\r\n      </Statistic>\r\n    );\r\n  }\r\n}\r\n\r\nexport default Momentum;\r\n","import RESOURCE_TYPES from 'game/RESOURCE_TYPES';\r\nimport ResourceTracker from 'parser/shared/modules/resources/resourcetracker/ResourceTracker';\r\nimport SPELLS from 'common/SPELLS';\r\nimport SpellUsable from 'parser/shared/modules/SpellUsable';\r\n\r\n// Casting Eye Beam at over 50 when you have the Blind Fury talent is considered a waste.\r\nconst BLIND_FURY_WASTE_CUTOFF = 50;\r\n\r\nclass FuryTracker extends ResourceTracker {\r\n  static dependencies = {\r\n    ...ResourceTracker.dependencies,\r\n    spellUsable: SpellUsable,\r\n  };\r\n\r\n  blindFuryWaste = 0;\r\n\r\n  constructor(...args) {\r\n    super(...args);\r\n    this.resource = RESOURCE_TYPES.FURY;\r\n  }\r\n\r\n  onCast(event) {\r\n    const spellId = event.ability.guid;\r\n    const blindFuryId = SPELLS.BLIND_FURY_TALENT.id;\r\n    //TODO: Account for Eye Beam clipping\r\n    // Blind Fury resource gain does not have an energize event so it is handled here\r\n    if (spellId === SPELLS.EYE_BEAM.id && this.selectedCombatant.hasTalent(blindFuryId)) {\r\n      this.waste = event.classResources[0].amount - BLIND_FURY_WASTE_CUTOFF;\r\n      if (this.waste <= 0) {\r\n        this.waste = 0;\r\n      }\r\n      const AMOUNT = (event.classResources[0].max - event.classResources[0].amount) + this.waste;\r\n      this.processInvisibleEnergize(blindFuryId, AMOUNT);\r\n    }\r\n    super.onCast(event);\r\n  }\r\n}\r\n\r\nexport default FuryTracker;\r\n","import React from 'react';\r\n\r\nimport Analyzer from 'parser/core/Analyzer';\r\nimport Panel from 'interface/others/Panel';\r\nimport { STATISTIC_ORDER } from 'interface/others/StatisticBox';\r\nimport { formatPercentage, formatNumber } from 'common/format';\r\nimport RESOURCE_TYPES from 'game/RESOURCE_TYPES';\r\nimport BoringResourceValue from 'interface/statistics/components/BoringResourceValue/index';\r\nimport Statistic from 'interface/statistics/Statistic';\r\nimport ResourceBreakdown from 'parser/shared/modules/resources/resourcetracker/ResourceBreakdown';\r\nimport { i18n } from '@lingui/core';\r\nimport { t } from '@lingui/macro';\r\n\r\nimport FuryTracker from './FuryTracker';\r\n\r\nconst furyIcon = 'ability_demonhunter_eyebeam';\r\n\r\nclass FuryDetails extends Analyzer {\r\n  get wastedFuryPercent() {\r\n    return this.furyTracker.wasted / (this.furyTracker.wasted + this.furyTracker.generated);\r\n  }\r\n\r\n  get suggestionThresholds() {\r\n    return {\r\n      actual: this.wastedFuryPercent,\r\n      isGreaterThan: {\r\n        minor: 0.03,\r\n        average: 0.07,\r\n        major: 0.1,\r\n      },\r\n      style: 'percentage',\r\n    };\r\n  }\r\n\r\n  static dependencies = {\r\n    furyTracker: FuryTracker,\r\n  };\r\n\r\n  suggestions(when) {\r\n    when(this.suggestionThresholds).addSuggestion((suggest, actual, recommended) => suggest(`You wasted ${formatNumber(this.furyTracker.wasted)} Fury.`)\r\n      .icon(furyIcon)\r\n      .actual(i18n._(t('demonhunter.havoc.suggestions.fury.wasted')`${formatPercentage(actual)}% Fury wasted`))\r\n      .recommended(`<${formatPercentage(recommended)}% is recommended.`));\r\n  }\r\n\r\n  statistic() {\r\n    return (\r\n      <Statistic\r\n        size=\"small\"\r\n        position={STATISTIC_ORDER.CORE(4)}\r\n        tooltip={`${formatPercentage(this.wastedFuryPercent)}% wasted`}\r\n      >\r\n        <BoringResourceValue\r\n          resource={RESOURCE_TYPES.FURY}\r\n          value={formatNumber(this.furyTracker.wasted)}\r\n          label=\"Fury Wasted\"\r\n        />\r\n      </Statistic>\r\n    );\r\n  }\r\n\r\n  tab() {\r\n    return {\r\n      title: 'Fury Usage',\r\n      url: 'fury-usage',\r\n      render: () => (\r\n        <Panel>\r\n          <ResourceBreakdown\r\n            tracker={this.furyTracker}\r\n            showSpenders\r\n          />\r\n        </Panel>\r\n      ),\r\n    };\r\n  }\r\n}\r\n\r\nexport default FuryDetails;\r\n","import React from 'react';\r\nimport SPELLS from 'common/SPELLS/index';\r\nimport SpellLink from 'common/SpellLink';\r\nimport Events from 'parser/core/Events';\r\nimport Analyzer, { SELECTED_PLAYER } from 'parser/core/Analyzer';\r\nimport { formatThousands, formatPercentage } from 'common/format';\r\nimport { i18n } from '@lingui/core';\r\nimport { t } from '@lingui/macro';\r\nimport BoringSpellValueText from 'interface/statistics/components/BoringSpellValueText';\r\nimport Statistic from 'interface/statistics/Statistic';\r\nimport STATISTIC_ORDER from 'interface/others/STATISTIC_ORDER';\r\n\r\n/**\r\n * Example Report: https://www.warcraftlogs.com/reports/KGJgZPxanBX82LzV/#fight=4&source=20\r\n */\r\nclass DemonBite extends Analyzer {\r\n\r\n  get furyPerMin() {\r\n    return ((this.furyGain - this.furyWaste) / (this.owner.fightDuration / 60000)).toFixed(2);\r\n  }\r\n\r\n  get suggestionThresholds() {\r\n    return {\r\n      actual: this.furyWaste / this.furyGain,\r\n      isGreaterThan: {\r\n        minor: 0.03,\r\n        average: 0.07,\r\n        major: 0.1,\r\n      },\r\n      style: 'percentage',\r\n    };\r\n  }\r\n\r\n  furyGain = 0;\r\n  furyWaste = 0;\r\n  damage = 0;\r\n\r\n  constructor(...args) {\r\n    super(...args);\r\n    //The Demon Blades talent replaces the ability Demon Bite if picked\r\n    this.active = !this.selectedCombatant.hasTalent(SPELLS.DEMON_BLADES_TALENT.id);\r\n\r\n    this.addEventListener(Events.energize.by(SELECTED_PLAYER).spell(SPELLS.DEMONS_BITE), this.onEnergizeEvent);\r\n    this.addEventListener(Events.damage.by(SELECTED_PLAYER).spell(SPELLS.DEMONS_BITE), this.onDamageEvent);\r\n  }\r\n\r\n  onEnergizeEvent(event) {\r\n    this.furyGain += event.resourceChange;\r\n    this.furyWaste += event.waste;\r\n  }\r\n\r\n  onDamageEvent(event) {\r\n    this.damage += event.amount;\r\n  }\r\n\r\n  suggestions(when) {\r\n    when(this.suggestionThresholds)\r\n      .addSuggestion((suggest, actual, recommended) => suggest(<> Try not to cast <SpellLink id={SPELLS.DEMONS_BITE.id} /> when close to max Fury.</>)\r\n        .icon(SPELLS.DEMONS_BITE.icon)\r\n        .actual(i18n._(t('demonhunter.havoc.suggestions.demonsBite.furyWasted')`${formatPercentage(actual)}% Fury wasted`))\r\n        .recommended(`${formatPercentage(recommended)}% is recommended.`));\r\n  }\r\n\r\n  statistic() {\r\n    const effectiveFuryGain = this.furyGain - this.furyWaste;\r\n    return (\r\n      <Statistic\r\n        position={STATISTIC_ORDER.OPTIONAL(6)}\r\n        size=\"flexible\"\r\n        tooltip={(\r\n          <>\r\n            {formatThousands(this.damage)} Total damage<br />\r\n            {effectiveFuryGain} Effective Fury gained<br />\r\n            {this.furyGain} Total Fury gained<br />\r\n            {this.furyWaste} Fury wasted\r\n          </>\r\n        )}\r\n      >\r\n        <BoringSpellValueText spell={SPELLS.DEMONS_BITE}>\r\n          <>\r\n            {this.furyPerMin} <small>Fury per min</small> <br />\r\n            {this.owner.formatItemDamageDone(this.damage)}\r\n          </>\r\n        </BoringSpellValueText>\r\n      </Statistic>\r\n    );\r\n  }\r\n}\r\n\r\nexport default DemonBite;\r\n","import React from 'react';\r\nimport SPELLS from 'common/SPELLS';\r\nimport TalentStatisticBox from 'interface/others/TalentStatisticBox';\r\nimport STATISTIC_ORDER from 'interface/others/STATISTIC_ORDER';\r\nimport Events from 'parser/core/Events';\r\nimport Analyzer, { SELECTED_PLAYER } from 'parser/core/Analyzer';\r\nimport { formatPercentage } from 'common/format';\r\nimport SpellLink from 'common/SpellLink';\r\nimport { i18n } from '@lingui/core';\r\nimport { t } from '@lingui/macro';\r\n\r\n/**\r\n * Example Report: https://www.warcraftlogs.com/reports/3Fx8Dbzt7fpaLkn4#fight=2&type=summary&source=14\r\n */\r\nclass DemonicAppetite extends Analyzer {\r\n\r\n  get furyPerMin() {\r\n    return ((this.furyGain - this.furyWaste) / (this.owner.fightDuration / 60000)).toFixed(2);\r\n  }\r\n\r\n  get suggestionThresholds() {\r\n    return {\r\n      actual: this.furyWaste / this.furyGain,\r\n      isGreaterThan: {\r\n        minor: 0.03,\r\n        average: 0.07,\r\n        major: 0.1,\r\n      },\r\n      style: 'percentage',\r\n    };\r\n  }\r\n\r\n  furyGain = 0;\r\n  furyWaste = 0;\r\n\r\n  constructor(...args) {\r\n    super(...args);\r\n    this.active = this.selectedCombatant.hasTalent(SPELLS.DEMONIC_APPETITE_TALENT.id);\r\n    if (!this.active) {\r\n      return;\r\n    }\r\n    this.addEventListener(Events.energize.by(SELECTED_PLAYER).spell(SPELLS.DEMONIC_APPETITE_FURY), this.onEnergizeEvent);\r\n  }\r\n\r\n  onEnergizeEvent(event) {\r\n    this.furyGain += event.resourceChange;\r\n    this.furyWaste += event.waste;\r\n  }\r\n\r\n  suggestions(when) {\r\n    when(this.suggestionThresholds)\r\n      .addSuggestion((suggest, actual, recommended) => suggest(<> Avoid picking up souls generated by the <SpellLink id={SPELLS.DEMONIC_APPETITE_TALENT.id} /> talent when close to Fury cap and cast abilities regularly to avoid accidently capping.</>)\r\n        .icon(SPELLS.DEMONIC_APPETITE_TALENT.icon)\r\n        .actual(i18n._(t('demonhunter.havoc.suggestions.demonicAppetite.furyWasted')`${formatPercentage(actual)}% Fury wasted`))\r\n        .recommended(`${formatPercentage(recommended)}% is recommended.`));\r\n  }\r\n\r\n  statistic() {\r\n    const effectiveFuryGain = this.furyGain - this.furyWaste;\r\n    return (\r\n      <TalentStatisticBox\r\n        talent={SPELLS.DEMONIC_APPETITE_TALENT.id}\r\n        position={STATISTIC_ORDER.OPTIONAL(6)}\r\n        value={<>{this.furyPerMin} <small>Fury per min</small></>}\r\n        tooltip={(\r\n          <>\r\n            {effectiveFuryGain} Effective Fury gained<br />\r\n            {this.furyGain} Total Fury gained<br />\r\n            {this.furyWaste} Fury wasted\r\n          </>\r\n        )}\r\n      />\r\n    );\r\n  }\r\n}\r\n\r\nexport default DemonicAppetite;\r\n","import React from 'react';\r\nimport SPELLS from 'common/SPELLS';\r\nimport SpellLink from 'common/SpellLink';\r\nimport TalentStatisticBox from 'interface/others/TalentStatisticBox';\r\nimport STATISTIC_ORDER from 'interface/others/STATISTIC_ORDER';\r\nimport Events from 'parser/core/Events';\r\nimport Analyzer, { SELECTED_PLAYER } from 'parser/core/Analyzer';\r\nimport { formatThousands, formatPercentage } from 'common/format';\r\nimport { i18n } from '@lingui/core';\r\nimport { t } from '@lingui/macro';\r\n\r\n/**\r\n * Example Report: https://www.warcraftlogs.com/reports/4GR2pwAYW8KtgFJn/#fight=6&source=18\r\n */\r\nclass DemonBlades extends Analyzer {\r\n\r\n  get furyPerMin() {\r\n    return ((this.furyGain - this.furyWaste) / (this.owner.fightDuration / 60000)).toFixed(2);\r\n  }\r\n\r\n  get suggestionThresholds() {\r\n    return {\r\n      actual: this.furyWaste / this.furyGain,\r\n      isGreaterThan: {\r\n        minor: 0.03,\r\n        average: 0.07,\r\n        major: 0.1,\r\n      },\r\n      style: 'percentage',\r\n    };\r\n  }\r\n\r\n  furyGain = 0;\r\n  furyWaste = 0;\r\n  damage = 0;\r\n\r\n  constructor(...args) {\r\n    super(...args);\r\n    this.active = this.selectedCombatant.hasTalent(SPELLS.DEMON_BLADES_TALENT.id);\r\n    if (!this.active) {\r\n      return;\r\n    }\r\n    this.addEventListener(Events.energize.by(SELECTED_PLAYER).spell(SPELLS.DEMON_BLADES_FURY), this.onEnergizeEvent);\r\n    this.addEventListener(Events.damage.by(SELECTED_PLAYER).spell(SPELLS.DEMON_BLADES_FURY), this.onDamageEvent);\r\n  }\r\n\r\n  onEnergizeEvent(event) {\r\n    this.furyGain += event.resourceChange;\r\n    this.furyWaste += event.waste;\r\n  }\r\n\r\n  onDamageEvent(event) {\r\n    this.damage += event.amount;\r\n  }\r\n\r\n  suggestions(when) {\r\n    when(this.suggestionThresholds)\r\n      .addSuggestion((suggest, actual, recommended) => suggest(<> Be mindful of your Fury levels and spend it before capping your Fury due to <SpellLink id={SPELLS.DEMON_BLADES_TALENT.id} />.</>)\r\n        .icon(SPELLS.DEMON_BLADES_TALENT.icon)\r\n        .actual(i18n._(t('demonhunter.havoc.suggestions.demonBlades.furyWasted')`${formatPercentage(actual)}% Fury wasted`))\r\n        .recommended(`${formatPercentage(recommended)}% is recommended.`));\r\n  }\r\n\r\n  statistic() {\r\n    const effectiveFuryGain = this.furyGain - this.furyWaste;\r\n    return (\r\n      <TalentStatisticBox\r\n        talent={SPELLS.DEMON_BLADES_TALENT.id}\r\n        position={STATISTIC_ORDER.OPTIONAL(6)}\r\n        value={(\r\n          <>\r\n            {this.furyPerMin} <small>Fury per min</small> <br />\r\n            {this.owner.formatItemDamageDone(this.damage)}\r\n          </>\r\n        )}\r\n        tooltip={(\r\n          <>\r\n            {formatThousands(this.damage)} Total damage<br />\r\n            {effectiveFuryGain} Effective Fury gained<br />\r\n            {this.furyGain} Total Fury gained<br />\r\n            {this.furyWaste} Fury wasted\r\n          </>\r\n        )}\r\n      />\r\n    );\r\n  }\r\n}\r\n\r\nexport default DemonBlades;\r\n","import React from 'react';\r\nimport PropTypes from 'prop-types';\r\n\r\nimport SPELLS from 'common/SPELLS';\r\nimport SpellLink from 'common/SpellLink';\r\nimport Checklist from 'parser/shared/modules/features/Checklist';\r\nimport Rule from 'parser/shared/modules/features/Checklist/Rule';\r\nimport GenericCastEfficiencyRequirement from 'parser/shared/modules/features/Checklist/GenericCastEfficiencyRequirement';\r\nimport PreparationRule from 'parser/shared/modules/features/Checklist/PreparationRule';\r\nimport Requirement from 'parser/shared/modules/features/Checklist/Requirement';\r\n\r\nconst HavocDemonHunterChecklist = ({ combatant, castEfficiency, thresholds }) => {\r\n  const AbilityRequirement = props => (\r\n    <GenericCastEfficiencyRequirement\r\n      castEfficiency={castEfficiency.getCastEfficiencyForSpellId(props.spell)}\r\n      {...props}\r\n    />\r\n  );\r\n  AbilityRequirement.propTypes = {\r\n    spell: PropTypes.number.isRequired,\r\n  };\r\n\r\n  return (\r\n    <Checklist>\r\n\r\n      <Rule\r\n        name=\"Use your short cooldowns\"\r\n        description={(\r\n          <>\r\n            These should generally always be on recharge to maximize DPS and efficiency.\r\n            <a href=\"http://www.wowhead.com/havoc-demon-hunter-rotation-guide#rotation-priority-list\" target=\"_blank\" rel=\"noopener noreferrer\">More info.</a>\r\n          </>\r\n        )}\r\n      >\r\n        {combatant.hasTalent(SPELLS.IMMOLATION_AURA.id) && <AbilityRequirement spell={SPELLS.IMMOLATION_AURA.id} />}\r\n        {combatant.hasTalent(SPELLS.FELBLADE_TALENT.id) && <AbilityRequirement spell={SPELLS.FELBLADE_TALENT.id} />}\r\n        {combatant.hasTalent(SPELLS.FIRST_BLOOD_TALENT.id) && <AbilityRequirement spell={SPELLS.BLADE_DANCE.id} />}\r\n        {combatant.hasTalent(SPELLS.MOMENTUM_TALENT.id) && <AbilityRequirement spell={SPELLS.FEL_RUSH_CAST.id} />}\r\n        {combatant.hasTalent(SPELLS.MOMENTUM_TALENT.id) && <AbilityRequirement spell={SPELLS.VENGEFUL_RETREAT.id} />}\r\n      </Rule>\r\n\r\n      <Rule\r\n        name=\"Don't waste casts\"\r\n        description={(\r\n          <>\r\n            Ineffectively or improperly casting these spells will lead to DPS loss.\r\n            <a href=\"http://www.wowhead.com/havoc-demon-hunter-rotation-guide#rotation-priority-list\" target=\"_blank\" rel=\"noopener noreferrer\">More info.</a>\r\n          </>\r\n        )}\r\n      >\r\n        {combatant.hasTalent(SPELLS.BLIND_FURY_TALENT.id) && (\r\n          <Requirement\r\n            name={(\r\n              <>\r\n                <SpellLink id={SPELLS.BLIND_FURY_TALENT.id} /> bad casts\r\n              </>\r\n            )}\r\n            thresholds={thresholds.blindFuryBadCasts}\r\n          />\r\n        )}\r\n        {combatant.hasTalent(SPELLS.DEMONIC_TALENT.id) && (\r\n          <Requirement\r\n            name={(\r\n              <>\r\n                <SpellLink id={SPELLS.DEMONIC_TALENT.id} /> bad casts\r\n              </>\r\n            )}\r\n            thresholds={thresholds.demonicBadCasts}\r\n          />\r\n        )}\r\n        {combatant.hasTalent(SPELLS.FEL_ERUPTION_TALENT.id) && (\r\n          <Requirement\r\n            name={(\r\n              <>\r\n                <SpellLink id={SPELLS.FEL_ERUPTION_TALENT.id} /> bad casts\r\n              </>\r\n            )}\r\n            thresholds={thresholds.felEruptionBadCasts}\r\n          />\r\n        )}\r\n        {combatant.hasTalent(SPELLS.FEL_BARRAGE_TALENT.id) && (\r\n          <Requirement\r\n            name={(\r\n              <>\r\n                <SpellLink id={SPELLS.FEL_BARRAGE_TALENT.id} /> bad casts\r\n              </>\r\n            )}\r\n            thresholds={thresholds.felBarrageBadCasts}\r\n          />\r\n        )}\r\n      </Rule>\r\n\r\n      <Rule\r\n        name=\"Maintain your buffs and debuffs\"\r\n        description={(\r\n          <>\r\n            It is important to maintain these as they contribute a large amount to your DPS and HPS.\r\n            <a href=\"http://www.wowhead.com/havoc-demon-hunter-rotation-guide#rotation-priority-list\" target=\"_blank\" rel=\"noopener noreferrer\">More info.</a>\r\n          </>\r\n        )}\r\n      >\r\n        {combatant.hasTalent(SPELLS.NEMESIS_TALENT.id) && <AbilityRequirement spell={SPELLS.NEMESIS_TALENT.id} />}\r\n        {combatant.hasTalent(SPELLS.MOMENTUM_TALENT.id) && (\r\n          <Requirement\r\n            name={(\r\n              <>\r\n                <SpellLink id={SPELLS.MOMENTUM_TALENT.id} /> buff uptime\r\n              </>\r\n            )}\r\n            thresholds={thresholds.momentumBuffUptime}\r\n          />\r\n        )}\r\n      </Rule>\r\n\r\n      <Rule\r\n        name=\"Use your offensive cooldowns\"\r\n        description={(\r\n          <>\r\n            You should aim to use these cooldowns as often as you can to maximize your damage output unless you are saving them for their defensive value.\r\n            <a href=\"http://www.wowhead.com/havoc-demon-hunter-rotation-guide#rotation-priority-list\" target=\"_blank\" rel=\"noopener noreferrer\">More info.</a>\r\n          </>\r\n        )}\r\n      >\r\n        <AbilityRequirement spell={SPELLS.METAMORPHOSIS_HAVOC.id} />\r\n        <AbilityRequirement spell={SPELLS.EYE_BEAM.id} />\r\n        {combatant.hasTalent(SPELLS.FEL_BARRAGE_TALENT.id) && <AbilityRequirement spell={SPELLS.FEL_BARRAGE_TALENT.id} />}\r\n        {combatant.hasTalent(SPELLS.DARK_SLASH_TALENT.id) && <AbilityRequirement spell={SPELLS.DARK_SLASH_TALENT.id} />}\r\n      </Rule>\r\n\r\n      <Rule\r\n        name=\"Manage your Fury properly\"\r\n        description={(\r\n          <>\r\n            You should always avoid capping your Fury and spend it regularly.\r\n            <a href=\"https://www.wowhead.com/guides/havoc-demon-hunter-get-good-how-to-improve#major-pitfalls\" target=\"_blank\" rel=\"noopener noreferrer\">More info.</a>\r\n          </>\r\n        )}\r\n      >\r\n        <Requirement\r\n          name=\"Total Fury Efficiency\"\r\n          thresholds={thresholds.totalFuryWasted}\r\n        />\r\n\r\n        <Requirement\r\n          name={(\r\n            <>\r\n              <SpellLink id={SPELLS.DEMONS_BITE.id} /> wasted Fury\r\n            </>\r\n          )}\r\n          thresholds={thresholds.demonBiteFury}\r\n        />\r\n        {combatant.hasTalent(SPELLS.IMMOLATION_AURA.id) && (\r\n          <Requirement\r\n            name={(\r\n              <>\r\n                <SpellLink id={SPELLS.IMMOLATION_AURA.id} /> Fury wasted\r\n              </>\r\n            )}\r\n            thresholds={thresholds.immolationAuraEfficiency}\r\n          />\r\n        )}\r\n        {combatant.hasTalent(SPELLS.FELBLADE_TALENT.id) && (\r\n          <Requirement\r\n            name={(\r\n              <>\r\n                <SpellLink id={SPELLS.FELBLADE_TALENT.id} /> Fury wasted\r\n              </>\r\n            )}\r\n            thresholds={thresholds.felbladeEfficiency}\r\n          />\r\n        )}\r\n        {combatant.hasTalent(SPELLS.DEMONIC_APPETITE_TALENT.id) && (\r\n          <Requirement\r\n            name={(\r\n              <>\r\n                <SpellLink id={SPELLS.DEMONIC_APPETITE_TALENT.id} /> Fury wasted\r\n              </>\r\n            )}\r\n            thresholds={thresholds.demonicAppetiteEfficiency}\r\n          />\r\n        )}\r\n        {combatant.hasTalent(SPELLS.DEMON_BLADES_TALENT.id) && (\r\n          <Requirement\r\n            name={(\r\n              <>\r\n                <SpellLink id={SPELLS.DEMON_BLADES_TALENT.id} /> Fury wasted\r\n              </>\r\n            )}\r\n            thresholds={thresholds.demonBladesEfficiency}\r\n          />\r\n        )}\r\n      </Rule>\r\n\r\n      <PreparationRule thresholds={thresholds} />\r\n\r\n    </Checklist>\r\n  );\r\n};\r\n\r\nHavocDemonHunterChecklist.propTypes = {\r\n  castEfficiency: PropTypes.object.isRequired,\r\n  combatant: PropTypes.shape({\r\n    hasTalent: PropTypes.func.isRequired,\r\n  }).isRequired,\r\n  thresholds: PropTypes.object.isRequired,\r\n};\r\n\r\nexport default HavocDemonHunterChecklist;\r\n","import React from 'react';\r\n\r\nimport BaseModule from 'parser/shared/modules/features/Checklist/Module';\r\nimport CastEfficiency from 'parser/shared/modules/CastEfficiency';\r\nimport Combatants from 'parser/shared/modules/Combatants';\r\nimport ManaValues from 'parser/shared/modules/ManaValues';\r\nimport PreparationRuleAnalyzer from 'parser/shared/modules/features/Checklist/PreparationRuleAnalyzer';\r\n\r\nimport AlwaysBeCasting from '../AlwaysBeCasting';\r\n\r\n// Short CDs\r\nimport ImmolationAura from '../../talents/ImmolationAura';\r\nimport Felblade from '../../talents/Felblade';\r\n\r\n// Don't waste casts\r\nimport BlindFury from '../../talents/BlindFury';\r\nimport Demonic from '../../talents/Demonic';\r\nimport FelBarrage from '../../talents/FelBarrage';\r\nimport FelEruption from '../../talents/FelEruption';\r\n\r\n// Maintain buffs/debuffs\r\nimport Momentum from '../../talents/Momentum';\r\n\r\n// Use your offensive cool downs\r\n// Manage your fury properly\r\nimport FuryDetails from '../../resourcetracker/FuryDetails';\r\nimport DemonBite from '../../spells/DemonBite';\r\nimport DemonicAppetite from '../../talents/DemonicAppetite';\r\nimport DemonBlades from '../../talents/DemonBlades';\r\n\r\nimport Component from './Component';\r\n\r\nclass Checklist extends BaseModule {\r\n  static dependencies = {\r\n    combatants: Combatants,\r\n    castEfficiency: CastEfficiency,\r\n    alwaysBeCasting: AlwaysBeCasting,\r\n    manaValues: ManaValues,\r\n    preparationRuleAnalyzer: PreparationRuleAnalyzer,\r\n\r\n    // Short CDs\r\n    felblade: Felblade,\r\n    immolationAura: ImmolationAura,\r\n\r\n    // Don't waste casts\r\n    blindFury: BlindFury,\r\n    demonic: Demonic,\r\n    felBarrage: FelBarrage,\r\n    felEruption: FelEruption,\r\n\r\n    // Maintain buffs/debuffs\r\n    momentum: Momentum,\r\n\r\n    // Use your offensive cool downs\r\n\r\n    // Manage your fury properly\r\n    demonBite: DemonBite,\r\n    demonicAppetite: DemonicAppetite,\r\n    demonBlades: DemonBlades,\r\n    furyDetails: FuryDetails,\r\n  };\r\n\r\n  render() {\r\n    return (\r\n      <Component\r\n        combatant={this.combatants.selected}\r\n        castEfficiency={this.castEfficiency}\r\n        thresholds={{\r\n          ...this.preparationRuleAnalyzer.thresholds,\r\n\r\n          downtimeSuggestionThresholds: this.alwaysBeCasting.downtimeSuggestionThresholds,\r\n\r\n          // Short CDs\r\n          felbladeEfficiency: this.felblade.suggestionThresholds,\r\n          immolationAuraEfficiency: this.immolationAura.suggestionThresholds,\r\n\r\n          // Don't waste casts\r\n          blindFuryBadCasts: this.blindFury.suggestionThresholds,\r\n          demonicBadCasts: this.demonic.suggestionThresholds,\r\n          felBarrageBadCasts: this.felBarrage.suggestionThresholds,\r\n          felEruptionBadCasts: this.felEruption.suggestionThresholds,\r\n\r\n          // Maintain buffs/debuffs\r\n          momentumBuffUptime: this.momentum.suggestionThresholds,\r\n\r\n          // Use your offensive cool downs\r\n\r\n          // Manage your fury properly\r\n          demonBiteFury: this.demonBite.suggestionThresholds,\r\n          demonicAppetiteEfficiency: this.demonicAppetite.suggestionThresholds,\r\n          demonBladesEfficiency: this.demonBlades.suggestionThresholds,\r\n          totalFuryWasted: this.furyDetails.suggestionThresholds,\r\n        }}\r\n      />\r\n    );\r\n  }\r\n}\r\n\r\nexport default Checklist;\r\n","import React from 'react';\r\n\r\nimport Analyzer from 'parser/core/Analyzer';\r\n\r\nimport SPELLS from 'common/SPELLS/index';\r\n\r\nimport { formatPercentage, formatDuration } from 'common/format';\r\nimport BoringSpellValueText from 'interface/statistics/components/BoringSpellValueText';\r\nimport Statistic from 'interface/statistics/Statistic';\r\nimport STATISTIC_ORDER from 'interface/others/STATISTIC_ORDER';\r\nimport UptimeIcon from 'interface/icons/Uptime';\r\n\r\n/*\r\nexample report: https://www.warcraftlogs.com/reports/KGJgZPxanBX82LzV/#fight=4&source=20\r\n* */\r\n\r\nclass MetaBuffUptime extends Analyzer {\r\n\r\n  get buffUptime() {\r\n    return this.selectedCombatant.getBuffUptime(SPELLS.METAMORPHOSIS_HAVOC_BUFF.id) / this.owner.fightDuration;\r\n  }\r\n\r\n  get buffDuration() {\r\n    return this.selectedCombatant.getBuffUptime(SPELLS.METAMORPHOSIS_HAVOC_BUFF.id);\r\n  }\r\n\r\n  statistic() {\r\n    return (\r\n      <Statistic\r\n        position={STATISTIC_ORDER.CORE(3)}\r\n        size=\"flexible\"\r\n        tooltip={`The Metamorphosis buff total uptime was ${formatDuration(this.buffDuration / 1000)}.`}\r\n      >\r\n        <BoringSpellValueText spell={SPELLS.METAMORPHOSIS_HAVOC_BUFF}>\r\n          <>\r\n            <UptimeIcon /> {formatPercentage(this.buffUptime)}% <small>uptime</small>\r\n          </>\r\n        </BoringSpellValueText>\r\n      </Statistic>\r\n    );\r\n  }\r\n}\r\n\r\nexport default MetaBuffUptime;\r\n","import React from 'react';\r\nimport SPELLS from 'common/SPELLS';\r\nimport TalentStatisticBox from 'interface/others/TalentStatisticBox';\r\nimport STATISTIC_ORDER from 'interface/others/STATISTIC_ORDER';\r\nimport Events from 'parser/core/Events';\r\nimport Analyzer, { SELECTED_PLAYER } from 'parser/core/Analyzer';\r\nimport { formatThousands } from 'common/format';\r\n\r\n/**\r\n * Example Report: https://www.warcraftlogs.com/reports/RMPgqbz1BxpG9X8H/#fight=2&source=10\r\n */\r\n\r\nclass TrailofRuin extends Analyzer {\r\n\r\n  damage = 0;\r\n\r\n  constructor(...args) {\r\n    super(...args);\r\n    this.active = this.selectedCombatant.hasTalent(SPELLS.TRAIL_OF_RUIN_TALENT.id);\r\n    if (!this.active) {\r\n      return;\r\n    }\r\n    this.addEventListener(Events.damage.by(SELECTED_PLAYER).spell(SPELLS.TRAIL_OF_RUIN_DAMAGE), this.trailOfRuinDot);\r\n  }\r\n\r\n  trailOfRuinDot(event) {\r\n    this.damage += event.amount;\r\n  }\r\n\r\n  statistic() {\r\n    return (\r\n      <TalentStatisticBox\r\n        talent={SPELLS.TRAIL_OF_RUIN_TALENT.id}\r\n        position={STATISTIC_ORDER.OPTIONAL(6)}\r\n        value={this.owner.formatItemDamageDone(this.damage)}\r\n        tooltip={`${formatThousands(this.damage)} Total damage`}\r\n      />\r\n    );\r\n  }\r\n}\r\n\r\nexport default TrailofRuin;\r\n","import React from 'react';\r\nimport SPELLS from 'common/SPELLS';\r\nimport TalentStatisticBox from 'interface/others/TalentStatisticBox';\r\nimport STATISTIC_ORDER from 'interface/others/STATISTIC_ORDER';\r\nimport Events from 'parser/core/Events';\r\nimport Analyzer, { SELECTED_PLAYER } from 'parser/core/Analyzer';\r\nimport { formatThousands } from 'common/format';\r\n\r\n/**\r\n * Example Report: https://www.warcraftlogs.com/reports/AZMDnzrG48KJLgP6/#fight=1&source=1\r\n */\r\n\r\nclass FelMastery extends Analyzer {\r\n\r\n  damage = 0;\r\n\r\n  constructor(...args) {\r\n    super(...args);\r\n    this.active = this.selectedCombatant.hasTalent(SPELLS.FEL_MASTERY_TALENT.id);\r\n    if (!this.active) {\r\n      return;\r\n    }\r\n    this.addEventListener(Events.damage.by(SELECTED_PLAYER).spell(SPELLS.FEL_RUSH_DAMAGE), this.felRushExtraDamage);\r\n  }\r\n\r\n  //Since fel mastery doubles the damage of fel rush, halfing the damage to get the talent damage part.\r\n  felRushExtraDamage(event) {\r\n    this.damage += event.amount / 2;\r\n  }\r\n\r\n  statistic() {\r\n    return (\r\n      <TalentStatisticBox\r\n        talent={SPELLS.FEL_MASTERY_TALENT.id}\r\n        position={STATISTIC_ORDER.OPTIONAL(6)}\r\n        value={this.owner.formatItemDamageDone(this.damage)}\r\n        tooltip={(\r\n          <>\r\n            {formatThousands(this.damage)} Total damage <br /> <br />\r\n            This shows the extra damage done by Fel Rush due to the Fel Mastery talent.\r\n          </>\r\n        )}\r\n\r\n      />\r\n    );\r\n  }\r\n}\r\n\r\nexport default FelMastery;\r\n","import React from 'react';\r\nimport SPELLS from 'common/SPELLS/index';\r\nimport Events from 'parser/core/Events';\r\nimport Analyzer, { SELECTED_PLAYER } from 'parser/core/Analyzer';\r\nimport BoringSpellValueText from 'interface/statistics/components/BoringSpellValueText';\r\nimport Statistic from 'interface/statistics/Statistic';\r\nimport STATISTIC_ORDER from 'interface/others/STATISTIC_ORDER';\r\n\r\n/**\r\n * Example Report: https://www.warcraftlogs.com/reports/PGMqmyH1b86fW7F2/#fight=55&source=10\r\n */\r\n\r\nclass Netherwalk extends Analyzer {\r\n\r\n  damageImmuned = [];\r\n\r\n  constructor(...args) {\r\n    super(...args);\r\n    this.active = this.selectedCombatant.hasTalent(SPELLS.NETHERWALK_TALENT.id);\r\n    if (!this.active) {\r\n      return;\r\n    }\r\n    this.addEventListener(Events.damage.to(SELECTED_PLAYER), this.onNetherwalkCast);\r\n  }\r\n\r\n  onNetherwalkCast(event) {\r\n    if (!this.selectedCombatant.hasBuff(SPELLS.NETHERWALK_TALENT.id)) {\r\n      return;\r\n    }\r\n    this.damageImmuned.push({\r\n      name: event.ability.name,\r\n    });\r\n  }\r\n\r\n  statistic() {\r\n    return (\r\n      <Statistic\r\n        position={STATISTIC_ORDER.CORE(6)}\r\n        size=\"flexible\"\r\n        dropdown={(\r\n          this.damageImmuned.length !== 0 ? <>\r\n            <table className=\"table table-condensed\">\r\n              <thead>\r\n                <tr>\r\n                  <th>Name</th>\r\n                </tr>\r\n              </thead>\r\n              <tbody>\r\n                {Object.values(this.damageImmuned).map((e, i) => (\r\n                  <tr key={i}>\r\n                    <th>{this.damageImmuned[i].name}</th>\r\n                  </tr>\r\n                ))}\r\n              </tbody>\r\n            </table>\r\n          </> : ''\r\n        )}\r\n      >\r\n        <BoringSpellValueText spell={SPELLS.NETHERWALK_TALENT}>\r\n          <>\r\n            {this.damageImmuned.length} <small>spells immuned</small>\r\n          </>\r\n        </BoringSpellValueText>\r\n      </Statistic>\r\n\r\n    );\r\n  }\r\n}\r\n\r\nexport default Netherwalk;\r\n","import React from 'react';\r\nimport SPELLS from 'common/SPELLS';\r\nimport TalentStatisticBox from 'interface/others/TalentStatisticBox';\r\nimport STATISTIC_ORDER from 'interface/others/STATISTIC_ORDER';\r\nimport Events from 'parser/core/Events';\r\nimport Analyzer, { SELECTED_PLAYER } from 'parser/core/Analyzer';\r\n\r\n/**\r\n * Example Report: https://www.warcraftlogs.com/reports/QDMVJtvnBz43NZLk/#fight=2&source=1\r\n */\r\n\r\nclass MasterOfTheGlaives extends Analyzer {\r\n\r\n  slows = 0;\r\n\r\n  constructor(...args) {\r\n    super(...args);\r\n    this.active = this.selectedCombatant.hasTalent(SPELLS.MASTER_OF_THE_GLAIVE_TALENT.id);\r\n    if (!this.active) {\r\n      return;\r\n    }\r\n    this.addEventListener(Events.applydebuff.by(SELECTED_PLAYER).spell(SPELLS.MASTER_OF_THE_GLAIVE_DEBUFF), this.countingSlows);\r\n  }\r\n\r\n  countingSlows(event) {\r\n    this.slows += 1;\r\n  }\r\n\r\n  statistic() {\r\n    return (\r\n      <TalentStatisticBox\r\n        talent={SPELLS.MASTER_OF_THE_GLAIVE_TALENT.id}\r\n        position={STATISTIC_ORDER.OPTIONAL(6)}\r\n        value={<>{this.slows} <small>slows provided</small></>}\r\n      />\r\n    );\r\n  }\r\n}\r\n\r\nexport default MasterOfTheGlaives;\r\n","import React from 'react';\r\nimport Analyzer, { SELECTED_PLAYER } from 'parser/core/Analyzer';\r\nimport Events from 'parser/core/Events';\r\nimport Enemies from 'parser/shared/modules/Enemies';\r\nimport calculateEffectiveDamage from 'parser/core/calculateEffectiveDamage';\r\nimport SPELLS from 'common/SPELLS';\r\nimport { formatThousands } from 'common/format';\r\nimport TalentStatisticBox from 'interface/others/TalentStatisticBox';\r\nimport STATISTIC_ORDER from 'interface/others/STATISTIC_ORDER';\r\n\r\n/*\r\n  example report: https://www.warcraftlogs.com/reports/3DFqkLhgRMB9wHQ7/#fight=33&source=16\r\n */\r\n\r\nconst DAMAGE_SPELLS = [\r\n  SPELLS.CHAOS_STRIKE_MH_DAMAGE,\r\n  SPELLS.CHAOS_STRIKE_OH_DAMAGE,\r\n  SPELLS.ANNIHILATION_MH_DAMAGE,\r\n  SPELLS.ANNIHILATION_OH_DAMAGE,\r\n];\r\nconst DAMAGE_INCREASE = 0.4;\r\n\r\nclass DarkSlash extends Analyzer {\r\n  static dependencies = {\r\n    enemies: Enemies,\r\n  };\r\n\r\n  extraDamage = 0;\r\n\r\n  constructor(...args) {\r\n    super(...args);\r\n    this.active = this.selectedCombatant.hasTalent(SPELLS.DARK_SLASH_TALENT.id);\r\n    this.addEventListener(Events.damage.by(SELECTED_PLAYER).spell(DAMAGE_SPELLS), this.damage);\r\n  }\r\n\r\n  damage(event) {\r\n    const target = this.enemies.getEntity(event);\r\n    if (!target) {\r\n      return;\r\n    }\r\n    const hasDarkSlashDebuff = target.hasBuff(SPELLS.DARK_SLASH_TALENT.id, event.timestamp);\r\n\r\n    if (hasDarkSlashDebuff) {\r\n      this.extraDamage += calculateEffectiveDamage(event, DAMAGE_INCREASE);\r\n    }\r\n  }\r\n\r\n  statistic() {\r\n    return (\r\n      <TalentStatisticBox\r\n        talent={SPELLS.DARK_SLASH_TALENT.id}\r\n        position={STATISTIC_ORDER.OPTIONAL(6)}\r\n        value={this.owner.formatItemDamageDone(this.extraDamage)}\r\n        tooltip={`${formatThousands(this.extraDamage)} total damage`}\r\n      />\r\n    );\r\n  }\r\n}\r\n\r\nexport default DarkSlash;\r\n","import React from 'react';\r\nimport SPELLS from 'common/SPELLS';\r\nimport TalentStatisticBox from 'interface/others/TalentStatisticBox';\r\nimport STATISTIC_ORDER from 'interface/others/STATISTIC_ORDER';\r\nimport Events from 'parser/core/Events';\r\nimport Analyzer, { SELECTED_PLAYER } from 'parser/core/Analyzer';\r\nimport { formatNumber } from 'common/format';\r\nimport SpellUsable from 'parser/shared/modules/SpellUsable';\r\nimport SpellIcon from 'common/SpellIcon';\r\n\r\n/*\r\n  example report: https://www.warcraftlogs.com/reports/QxHJ9MTtmVYNXPLd/#fight=1&source=2\r\n */\r\n\r\nconst COOLDOWN_REDUCTION_MS = 3000;\r\n\r\nclass CycleOfHatred extends Analyzer {\r\n  static dependencies = {\r\n    spellUsable: SpellUsable,\r\n  };\r\n\r\n  totalCooldownReduction = 0;\r\n\r\n  constructor(...args) {\r\n    super(...args);\r\n    this.active = this.selectedCombatant.hasTalent(SPELLS.CYCLE_OF_HATRED_TALENT.id);\r\n    if (!this.active) {\r\n      return;\r\n    }\r\n    this.addEventListener(Events.energize.by(SELECTED_PLAYER).spell(SPELLS.CHAOS_STRIKE_ENERGIZE), this.onEnergizeEvent);\r\n  }\r\n\r\n  onEnergizeEvent(event) {\r\n    if (!this.spellUsable.isOnCooldown(SPELLS.METAMORPHOSIS_HAVOC.id)) {\r\n      return;\r\n    }\r\n    const effectiveReduction = this.spellUsable.reduceCooldown(SPELLS.METAMORPHOSIS_HAVOC.id, COOLDOWN_REDUCTION_MS);\r\n    this.totalCooldownReduction += effectiveReduction;\r\n  }\r\n\r\n  statistic() {\r\n    return (\r\n      <TalentStatisticBox\r\n        talent={SPELLS.CYCLE_OF_HATRED_TALENT.id}\r\n        position={STATISTIC_ORDER.OPTIONAL(7)}\r\n        value={<>{formatNumber(this.totalCooldownReduction / 1000)} sec <small>total <SpellIcon id={SPELLS.METAMORPHOSIS_HAVOC.id} />Meta cooldown reduction</small></>}\r\n      />\r\n    );\r\n  }\r\n}\r\n\r\nexport default CycleOfHatred;\r\n","import CoreCombatLogParser from 'parser/core/CombatLogParser';\r\nimport ArcaneTorrent from 'parser/shared/modules/racials/bloodelf/ArcaneTorrent';\r\n\r\nimport EyeBeamNormalizer from './normalizers/EyeBeam';\r\nimport Channeling from './modules/core/Channeling';\r\nimport GlobalCooldown from './modules/core/GlobalCooldown';\r\n\r\nimport AlwaysBeCasting from './modules/features/AlwaysBeCasting';\r\nimport Abilities from './modules/Abilities';\r\nimport CooldownThroughputTracker from './modules/features/CooldownThroughputTracker';\r\n\r\nimport Checklist from './modules/features/Checklist/Module';\r\n\r\n// Spells\r\nimport DemonBite from './modules/spells/DemonBite';\r\nimport MetaBuffUptime from './modules/spells/MetaBuffUptime';\r\n\r\n// Talents\r\nimport Momentum from './modules/talents/Momentum';\r\nimport Felblade from './modules/talents/Felblade';\r\nimport DemonicAppetite from './modules/talents/DemonicAppetite';\r\nimport BlindFury from './modules/talents/BlindFury';\r\nimport DemonBlades from './modules/talents/DemonBlades';\r\nimport ImmolationAura from './modules/talents/ImmolationAura';\r\nimport TrailofRuin from './modules/talents/TrailofRuin';\r\nimport FelBarrage from './modules/talents/FelBarrage';\r\nimport FelMastery from './modules/talents/FelMastery';\r\nimport Netherwalk from './modules/talents/Netherwalk';\r\nimport FelEruption from './modules/talents/FelEruption';\r\nimport MasterOfTheGlaives from './modules/talents/MasterOfTheGlaives';\r\nimport DarkSlash from './modules/talents/DarkSlash';\r\nimport CycleOfHatred from './modules/talents/CycleOfHatred';\r\nimport Demonic from './modules/talents/Demonic';\r\n\r\n//Resources\r\nimport FuryDetails from './modules/resourcetracker/FuryDetails';\r\nimport FuryTracker from './modules/resourcetracker/FuryTracker';\r\n\r\nclass CombatLogParser extends CoreCombatLogParser {\r\n  static specModules = {\r\n    // Core Statistics\r\n    channeling: Channeling,\r\n\r\n    globalCooldown: GlobalCooldown,\r\n\r\n    //Normalizer\r\n    eyeBeamNormalizer: EyeBeamNormalizer,\r\n\r\n    // Features\r\n    alwaysBeCasting: AlwaysBeCasting,\r\n    abilities: Abilities,\r\n    cooldownThroughputTracker: CooldownThroughputTracker,\r\n    checklist: Checklist,\r\n\r\n    // Spells\r\n    demonBite: DemonBite,\r\n    metaBuffUptime: MetaBuffUptime,\r\n\r\n    //Talents\r\n    felblade: Felblade,\r\n    demonicAppetite: DemonicAppetite,\r\n    blindFury: BlindFury,\r\n    demonBlades: DemonBlades,\r\n    immolationAura: ImmolationAura,\r\n    trailofRuin: TrailofRuin,\r\n    felBarrage: FelBarrage,\r\n    felMastery: FelMastery,\r\n    momentum: Momentum,\r\n    netherwalk: Netherwalk,\r\n    felEruption: FelEruption,\r\n    masterOfTheGlaives: MasterOfTheGlaives,\r\n    darkSlash: DarkSlash,\r\n    cycleOfHatred: CycleOfHatred,\r\n    demonic: Demonic,\r\n\r\n    //Resources\r\n    furyTracker: FuryTracker,\r\n    furyDetails: FuryDetails,\r\n\r\n    // There's no throughput benefit from casting Arcane Torrent on cooldown\r\n    arcaneTorrent: [ArcaneTorrent, { castEfficiency: null }] as const,\r\n  };\r\n}\r\n\r\nexport default CombatLogParser;\r\n","export default function calculateEffectiveDamage(event, increase) {\r\n  const raw = (event.amount || 0) + (event.absorbed || 0);\r\n  return raw - (raw / (1 + increase));\r\n}\r\n","import React from 'react';\r\n\r\n// https://thenounproject.com/term/duration/370713/\r\n// duration by Bohdan Burmich from the Noun Project\r\nconst Icon = ({ ...other }) => (\r\n  <svg xmlns=\"http://www.w3.org/2000/svg\" viewBox=\"10 10 80 80\" className=\"icon\" {...other}>\r\n    <path d=\"M50,86.4865c17.4361,0,31.6216-14.1855,31.6216-31.6216c0-16.6168-12.8865-30.2714-29.1892-31.5189v-4.9677h7.2973v-4.8649  H40.2703v4.8649h7.2973v4.9677c-16.3027,1.2475-29.1892,14.902-29.1892,31.5189C18.3784,72.3009,32.5639,86.4865,50,86.4865z M52.4324,28.2236c3.1101,0.2817,6.0664,1.0982,8.7798,2.356l-8.7798,15.2073V28.2236z M47.5676,28.2236v26.6412 c0,1.1008,0.7393,2.0647,1.8029,2.3497c0.209,0.0561,0.4205,0.0827,0.6295,0.0827c0.8533,0,1.6642-0.4504,2.1065-1.2162 l13.3146-23.0616c6.8507,4.8503,11.3357,12.8315,11.3357,21.8454c0,14.7537-12.0031,26.7567-26.7568,26.7567 s-26.7568-12.003-26.7568-26.7567C23.2432,40.9315,33.9501,29.4573,47.5676,28.2236z\" />\r\n  </svg>\r\n);\r\n\r\nexport default Icon;\r\n","import React from 'react';\r\nimport PropTypes from 'prop-types';\r\n\r\nimport SpellLink from 'common/SpellLink';\r\nimport SpellIcon from 'common/SpellIcon';\r\n\r\nimport STATISTIC_CATEGORY from './STATISTIC_CATEGORY';\r\nimport StatisticBox from './StatisticBox';\r\n\r\nexport { default as STATISTIC_ORDER } from './STATISTIC_ORDER';\r\n\r\n/**\r\n * @deprecated Use `interface/statistic/Statistic` instead.\r\n */\r\nconst TalentStatisticBox = ({ talent, icon, label, ...others }) => (\r\n  <StatisticBox\r\n    {...others}\r\n    icon={icon || <SpellIcon id={talent} />}\r\n    label={label || <SpellLink id={talent} icon={false} />}\r\n  />\r\n);\r\nTalentStatisticBox.propTypes = {\r\n  talent: PropTypes.number.isRequired,\r\n  /**\r\n   * Override the trait's icon.\r\n   */\r\n  icon: PropTypes.node,\r\n  /**\r\n   * Override the trait's label.\r\n   */\r\n  label: PropTypes.node,\r\n};\r\nTalentStatisticBox.defaultProps = {\r\n  category: STATISTIC_CATEGORY.TALENTS,\r\n};\r\n\r\nexport default TalentStatisticBox;\r\n"],"sourceRoot":""}