{"version":3,"sources":["parser/rogue/subtlety/modules/Abilities.js","parser/rogue/subtlety/modules/features/AlwaysBeCasting.ts","parser/rogue/subtlety/modules/core/ComboPoints.tsx","parser/rogue/subtlety/modules/core/Energy.tsx","parser/rogue/subtlety/modules/core/CastsInStealthBase.tsx","parser/rogue/subtlety/modules/core/DanceDamageTracker.ts","parser/rogue/subtlety/modules/core/CastsInShadowDance.tsx","parser/rogue/shared/casttracker/StealthDamageTracker.ts","parser/rogue/subtlety/modules/core/CastsInStealth.ts","parser/rogue/subtlety/modules/features/checklist/Component.tsx","parser/rogue/subtlety/modules/features/checklist/Module.tsx","parser/rogue/subtlety/normalizers/ShurikenStormNormalizer.ts","parser/rogue/subtlety/modules/features/ShadowBladesUptime.tsx","parser/rogue/subtlety/modules/features/SymbolsOfDeathUptime.tsx","parser/rogue/subtlety/modules/core/DeepeningShadows.ts","parser/rogue/subtlety/modules/core/SymbolsDamageTracker.ts","parser/rogue/subtlety/modules/talents/DarkShadow/DarkShadow.ts","parser/rogue/subtlety/modules/talents/DarkShadow/DarkShadowContribution.tsx","parser/rogue/subtlety/modules/spells/FindWeakness.tsx","parser/rogue/subtlety/modules/core/BlackPowder.tsx","parser/rogue/subtlety/modules/spells/shadowlands/legendaries/AkaarisSoulFragment.tsx","parser/rogue/subtlety/modules/spells/shadowlands/legendaries/TheRotten.tsx","parser/rogue/shared/shadowlands/conduits/DeeperDaggers.tsx","parser/rogue/subtlety/CombatLogParser.tsx","interface/statistics/components/BoringValueText/index.tsx","parser/shared/modules/features/Checklist/helpers/calculateMedian.js","parser/shared/modules/features/Checklist/helpers/average.js","parser/shared/modules/features/Checklist/helpers/harmonic.js","parser/shared/modules/features/Checklist/Rule.tsx","parser/shared/modules/features/Checklist/Requirement.tsx","parser/shared/modules/features/Checklist/helpers/performanceForThresholds.js","parser/shared/modules/features/Checklist/index.js","parser/shared/modules/features/Checklist/PreparationRule.js","parser/shared/modules/features/Checklist/GenericCastEfficiencyRequirement.js","common/colorForPerformance.ts","interface/icons/Dropdown.js","interface/common/Expandable.tsx","parser/rogue/shared/casttracker/FilteredDamageTracker.ts"],"names":["Abilities","combatant","this","selectedCombatant","spell","SPELLS","BACKSTAB","category","SPELL_CATEGORIES","ROTATIONAL","gcd","static","enabled","hasTalent","GLOOMBLADE_TALENT","id","EVISCERATE","BLACK_POWDER","ROTATIONAL_AOE","base","SHADOWSTRIKE","SHURIKEN_TOSS","SYMBOLS_OF_DEATH","buffSpellId","cooldown","castEfficiency","suggestion","recommendedEfficiency","extraSuggestion","SHURIKEN_STORM","SHADOW_BLADES","COOLDOWNS","SHADOW_DANCE","SHADOW_DANCE_BUFF","charges","ENVELOPING_SHADOWS_TALENT","VANISH","VANISH_BUFF","MARKED_FOR_DEATH_TALENT","SECRET_TECHNIQUE_TALENT","SHURIKEN_TORNADO_TALENT","CLOAK_OF_SHADOWS","DEFENSIVE","CRIMSON_VIAL","EVASION","FEINT","NIGHTBLADE","SHADOWSTEP","UTILITY","SPRINT","TRICKS_OF_THE_TRADE","STEALTH","BLIND","CHEAP_SHOT","DISTRACT","KICK","KIDNEY_SHOT","SHROUD_OF_CONCEALMENT","SAP","PICK_LOCK","PICK_POCKET","PREMEDITATION_TALENT","CoreAbilities","AlwaysBeCasting","actual","downtimePercentage","isGreaterThan","minor","average","major","style","ThresholdStyle","PERCENTAGE","CoreAlwaysBeCasting","ComboPoints","comboPointTracker","SpellLink","when","resourceSuggest","avg","makeExtraSuggestion","SHADOW_TECHNIQUES","wasted","generated","Analyzer","dependencies","ComboPointTracker","Energy","energyTracker","energyCapTracker","RELENTLESS_STRIKES","missedRegen","naturalRegen","EnergyTracker","EnergyCapTracker","CastsInStealthBase","options","backstabSpell","badStealthSpells","stealthCondition","maxCastsPerStealth","validStealthSpellIds","tracker","getAbility","casts","thresholds","addSuggestion","suggest","recommended","icon","i18n","_","name","castsInStealthThresholds","stealthActualCasts","stealthMaxCasts","isLessThan","DanceDamageTracker","event","hasBuff","FilteredDamageTracker","CastsInShadowDance","damageTracker","danceDamageTracker","SUBTERFUGE_TALENT","subscribeInefficientCast","s","suggestWrongCast","danceBackstabThresholds","suggestAvgCasts","shadowDanceUptime","getBuffUptime","owner","fightDuration","Statistic","size","STATISTIC_CATEGORY","GENERAL","BoringValueText","label","SpellIcon","formatPercentage","createWrongCastThresholds","map","reduce","p","c","DamageTracker","StealthDamageTracker","delayWindow","isStealth","CastsInStealth","stealthDamageTracker","stealthBackstabThresholds","SubRogueChecklist","AbilityRequirement","props","GenericCastEfficiencyRequirement","getCastEfficiencyForSpellId","Rule","description","Requirement","comboPoints","energy","Tooltip","content","castsInStealth","castsInShadowDance","backstabInShadowDance","backstabInStealth","PreparationRule","Checklist","combatants","alwaysBeCasting","preparationRuleAnalyzer","Component","selected","comboPointThresholds","energyThresholds","BaseChecklist","Combatants","CastEfficiency","PreparationRuleAnalyzer","ShurikenStormNormalizer","minCPs","events","fixedEvents","cpPool","DEEPER_STRATAGEM_TALENT","forEach","eventIndex","push","type","EventType","Energize","ability","guid","SHURIKEN_STORM_CP","waste","resourceChange","newWaste","Math","min","EventsNormalizer","ShadowBladesUptime","enemies","shadowBladesUptime","Enemies","SymbolsOfDeathUptime","symbolsOfDeathUptime","DeepeningShadows","cdrPerComboPoint","spellUsable","addEventListener","Events","SpendResource","by","SELECTED_PLAYER","onSpendResource","comboPointsSpent","resourceChangeType","RESOURCE_TYPES","COMBO_POINTS","isOnCooldown","reduceCooldown","SpellUsable","SymbolsDamageTracker","DarkShadow","active","DARK_SHADOW_TALENT","DarkShadowContribution","danceDamage","Object","keys","abilities","abilityId","get","parseInt","damageEffective","a","b","darkShadowDamageFactor","BoringSpellValueText","ItemDamageDone","amount","FindWeakness","badVanishCasts","latestTs","cast","handleVanish","refreshdebuff","FIND_WEAKNESS","onRefreshDebuff","timestamp","entities","getEntities","hasDebuff","values","filter","enemy","getBuff","max","meta","isInefficientCast","inefficientCastReason","vanishThresholds","uptime","NUMBER","BlackPowder","damage","onDamage","absorbed","AkaarisSoulFragment","hasLegendaryByBonusID","AKAARIS_SOUL_FRAGMENT","bonusID","AKAARIS_SOUL_FRAGMENT_SHADOWSTRIKE","ITEMS","tooltip","formatNumber","TheRotten","cpGained","cpWasted","THE_ROTTEN","energize","ResourceIcon","noLink","DeeperDaggers","hasConduitBySpellID","DEEPER_DAGGERS","className","percentUptime","DEEPER_DAGGERS_BUFF","CombatLogParser","CoreCombatLogParser","specModules","checklist","shurikenStormNormalizer","comboPointDetails","ComboPointDetails","energyDetails","EnergyDetails","spellEnergyCost","SpellEnergyCost","symbolsDamageTracker","blackPowder","danceCooldownReduction","findWeakness","darkShadowContribution","serratedBoneSpike","SerratedBoneSpike","echoingReprimand","EchoingReprimand","flagellation","Flagellation","sepsis","Sepsis","akaarisSoulFragment","theRotten","essenceOfBloodfang","EssenceOfBloodfang","invigoratingShadowdust","InvigoratingShadowdust","deeperDaggers","arcaneTorrent","ArcaneTorrent","BoringValue","children","calculateMedian","arr","sort","half","floor","length","harmonic","cum","val","PERFORMANCE_METHOD","RuleContext","React","createContext","value","useState","requirementPerformances","performance","passed","expanded","state","setState","calculateRulePerformance","useCallback","DEFAULT","MEDIAN","AVERAGE","LOWEST","FIRST","HARMONIC","Error","requirements","Array","isArray","some","child","isValidElement","Provider","prevState","performanceMethod","element","inverseExpanded","header","width","backgroundColor","colorForPerformance","Dropdown","Information","setPerformance","THOUSANDS","formatThousands","DECIMAL","toFixed","BOOLEAN","SECONDS","valueTooltip","prefix","suffix","undefined","thresholdsN","formatThresholdsActual","marginLeft","minWidth","marginRight","transition","performanceForGreaterThanThresholds","performanceForLessThanThresholds","isEqual","performanceForThresholds","PureComponent","Consumer","href","potionsUsed","bestPotionUsed","itemsEnchanted","itemsBestEnchanted","weaponsEnhanced","bestWeaponEnhancements","higherFlaskPresent","flaskPresent","higherFoodPresent","foodPresent","renderEnchantRequirements","renderWeaponEnhancementRequirements","renderPotionRequirements","renderFlaskRequirements","renderFoodRequirements","others","captureException","isMaxCasts","maxCasts","efficiency","gotMaxCasts","averageIssueEfficiency","majorIssueEfficiency","Icon","other","xmlns","viewBox","d","Expandable","setExpanded","Element","onClick","prevExpanded","height","ControlledExpandable","castObservers","shouldProcessEvent","broadcastCastEvent","fn","spells","messageFunction","subscribeToCastEvent","find","subscriber"],"mappings":"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","file":"static/js/SubtletyRogue.fbc2b42e.chunk.js","sourcesContent":["import SPELLS from 'common/SPELLS';\r\nimport CoreAbilities from 'parser/core/modules/Abilities';\r\n\r\nclass Abilities extends CoreAbilities {\r\n  spellbook() {\r\n    const combatant = this.selectedCombatant;\r\n    return [\r\n      // Rotational\r\n      {\r\n        spell: SPELLS.BACKSTAB,\r\n        category: Abilities.SPELL_CATEGORIES.ROTATIONAL,\r\n        gcd: {\r\n          static: 1000,\r\n        },\r\n        enabled: !combatant.hasTalent(SPELLS.GLOOMBLADE_TALENT.id),\r\n      },\r\n      {\r\n        spell: SPELLS.GLOOMBLADE_TALENT,\r\n        category: Abilities.SPELL_CATEGORIES.ROTATIONAL,\r\n        gcd: {\r\n          static: 1000,\r\n        },\r\n        enabled: combatant.hasTalent(SPELLS.GLOOMBLADE_TALENT.id),\r\n      },\r\n      {\r\n        spell: SPELLS.EVISCERATE,\r\n        category: Abilities.SPELL_CATEGORIES.ROTATIONAL,\r\n        gcd: {\r\n          static: 1000,\r\n        },\r\n      },\r\n      {\r\n        spell: SPELLS.BLACK_POWDER,\r\n        category: Abilities.SPELL_CATEGORIES.ROTATIONAL_AOE,\r\n        gcd: {\r\n          base: 1000,\r\n        },\r\n      },\r\n      {\r\n        // Requires Stealth\r\n        spell: SPELLS.SHADOWSTRIKE,\r\n        category: Abilities.SPELL_CATEGORIES.ROTATIONAL,\r\n        gcd: {\r\n          static: 1000,\r\n        },\r\n      },\r\n      {\r\n        spell: SPELLS.SHURIKEN_TOSS,\r\n        category: Abilities.SPELL_CATEGORIES.ROTATIONAL,\r\n        gcd: {\r\n          static: 1000,\r\n        },\r\n      },\r\n      {\r\n        spell: SPELLS.SYMBOLS_OF_DEATH,\r\n        category: Abilities.SPELL_CATEGORIES.ROTATIONAL,\r\n        buffSpellId: SPELLS.SYMBOLS_OF_DEATH.id,\r\n        cooldown: 30,\r\n        castEfficiency: {\r\n          suggestion: true,\r\n          recommendedEfficiency: 0.95,\r\n          extraSuggestion:\r\n            'This is the most important rotational ability, try to always use it on cooldown.',\r\n        },\r\n      },\r\n      // Rotational AOE\r\n      {\r\n        spell: SPELLS.SHURIKEN_STORM,\r\n        category: Abilities.SPELL_CATEGORIES.ROTATIONAL_AOE,\r\n        gcd: {\r\n          static: 1000,\r\n        },\r\n      },\r\n      // Cooldowns\r\n      {\r\n        spell: SPELLS.SHADOW_BLADES,\r\n        category: Abilities.SPELL_CATEGORIES.COOLDOWNS,\r\n        buffSpellId: SPELLS.SHADOW_BLADES.id,\r\n        cooldown: 180,\r\n        gcd: {\r\n          base: 1000,\r\n        },\r\n        castEfficiency: {\r\n          suggestion: true,\r\n          extraSuggestion: 'In most cases should be used on cooldown.',\r\n        },\r\n      },\r\n      {\r\n        spell: SPELLS.SHADOW_DANCE,\r\n        category: Abilities.SPELL_CATEGORIES.COOLDOWNS,\r\n        buffSpellId: SPELLS.SHADOW_DANCE_BUFF.id,\r\n        cooldown: 60,\r\n        charges: 2 + (combatant.hasTalent(SPELLS.ENVELOPING_SHADOWS_TALENT.id) ? 1 : 0),\r\n        gcd: null,\r\n        castEfficiency: {\r\n          suggestion: true,\r\n          recommendedEfficiency: 0.95,\r\n          extraSuggestion: 'Use Shadow Dance before it reaches maximum charges.',\r\n        },\r\n      },\r\n      {\r\n        spell: SPELLS.VANISH,\r\n        category: Abilities.SPELL_CATEGORIES.COOLDOWNS,\r\n        buffSpellId: SPELLS.VANISH_BUFF.id,\r\n        cooldown: 120,\r\n        gcd: null,\r\n        castEfficiency: {\r\n          suggestion: true,\r\n          recommendedEfficiency: 0.8,\r\n        },\r\n      },\r\n      {\r\n        spell: SPELLS.MARKED_FOR_DEATH_TALENT,\r\n        category: Abilities.SPELL_CATEGORIES.COOLDOWNS,\r\n        cooldown: 30,\r\n        gcd: null,\r\n        enabled: combatant.hasTalent(SPELLS.MARKED_FOR_DEATH_TALENT.id),\r\n      },\r\n      {\r\n        spell: SPELLS.SECRET_TECHNIQUE_TALENT,\r\n        category: Abilities.SPELL_CATEGORIES.COOLDOWNS,\r\n        cooldown: 45,\r\n        gcd: {\r\n          static: 1000,\r\n        },\r\n        castEfficiency: {\r\n          suggestion: true,\r\n        },\r\n        enabled: combatant.hasTalent(SPELLS.SECRET_TECHNIQUE_TALENT.id),\r\n      },\r\n      {\r\n        spell: SPELLS.SHURIKEN_TORNADO_TALENT,\r\n        category: Abilities.SPELL_CATEGORIES.COOLDOWNS,\r\n        cooldown: 60,\r\n        gcd: {\r\n          static: 1000,\r\n        },\r\n        castEfficiency: {\r\n          suggestion: true,\r\n        },\r\n        enabled: combatant.hasTalent(SPELLS.SHURIKEN_TORNADO_TALENT.id),\r\n      },\r\n      // Defensive\r\n      {\r\n        spell: SPELLS.CLOAK_OF_SHADOWS,\r\n        category: Abilities.SPELL_CATEGORIES.DEFENSIVE,\r\n        buffSpellId: SPELLS.CLOAK_OF_SHADOWS.id,\r\n        cooldown: 120,\r\n        gcd: null,\r\n      },\r\n      {\r\n        spell: SPELLS.CRIMSON_VIAL,\r\n        category: Abilities.SPELL_CATEGORIES.DEFENSIVE,\r\n        cooldown: 30,\r\n        gcd: {\r\n          base: 1000,\r\n        },\r\n      },\r\n      {\r\n        spell: SPELLS.EVASION,\r\n        category: Abilities.SPELL_CATEGORIES.DEFENSIVE,\r\n        buffSpellId: SPELLS.EVASION.id,\r\n        cooldown: 120,\r\n      },\r\n      {\r\n        spell: SPELLS.FEINT,\r\n        category: Abilities.SPELL_CATEGORIES.DEFENSIVE,\r\n        buffSpellId: SPELLS.FEINT.id,\r\n        cooldown: 15,\r\n        gcd: {\r\n          static: 1000,\r\n        },\r\n      },\r\n      {\r\n        spell: SPELLS.NIGHTBLADE,\r\n        category: Abilities.SPELL_CATEGORIES.ROTATIONAL,\r\n        gcd: {\r\n          static: 1000,\r\n        },\r\n      },\r\n      // Utility\r\n      {\r\n        spell: SPELLS.SHADOWSTEP,\r\n        category: Abilities.SPELL_CATEGORIES.UTILITY,\r\n        cooldown: 30,\r\n        charges: 2,\r\n        gcd: null,\r\n      },\r\n      {\r\n        spell: SPELLS.SPRINT,\r\n        category: Abilities.SPELL_CATEGORIES.UTILITY,\r\n        cooldown: 60,\r\n        gcd: null,\r\n      },\r\n      {\r\n        spell: SPELLS.TRICKS_OF_THE_TRADE,\r\n        category: Abilities.SPELL_CATEGORIES.UTILITY,\r\n        cooldown: 30,\r\n        gcd: null,\r\n      },\r\n      {\r\n        spell: SPELLS.STEALTH,\r\n        category: Abilities.SPELL_CATEGORIES.UTILITY,\r\n        cooldown: 2,\r\n        gcd: null,\r\n      },\r\n      {\r\n        spell: SPELLS.BLIND,\r\n        category: Abilities.SPELL_CATEGORIES.UTILITY,\r\n        cooldown: 120,\r\n        gcd: {\r\n          static: 1000,\r\n        },\r\n      },\r\n      {\r\n        spell: SPELLS.CHEAP_SHOT,\r\n        category: Abilities.SPELL_CATEGORIES.UTILITY,\r\n        gcd: {\r\n          static: 1000,\r\n        },\r\n      },\r\n      {\r\n        spell: SPELLS.DISTRACT,\r\n        category: Abilities.SPELL_CATEGORIES.UTILITY,\r\n        cooldown: 30,\r\n        gcd: {\r\n          static: 1000,\r\n        },\r\n      },\r\n      {\r\n        spell: SPELLS.KICK,\r\n        category: Abilities.SPELL_CATEGORIES.UTILITY,\r\n        cooldown: 15,\r\n        gcd: null,\r\n      },\r\n      {\r\n        spell: SPELLS.KIDNEY_SHOT,\r\n        category: Abilities.SPELL_CATEGORIES.UTILITY,\r\n        cooldown: 20,\r\n        gcd: {\r\n          static: 1000,\r\n        },\r\n      },\r\n      {\r\n        spell: SPELLS.SHROUD_OF_CONCEALMENT,\r\n        category: Abilities.SPELL_CATEGORIES.UTILITY,\r\n        cooldown: 6 * 60,\r\n        gcd: {\r\n          base: 1000,\r\n        },\r\n      },\r\n      {\r\n        spell: SPELLS.SAP,\r\n        category: Abilities.SPELL_CATEGORIES.UTILITY,\r\n      },\r\n      {\r\n        spell: SPELLS.PICK_LOCK,\r\n        category: Abilities.SPELL_CATEGORIES.UTILITY,\r\n      },\r\n      {\r\n        spell: SPELLS.PICK_POCKET,\r\n        category: Abilities.SPELL_CATEGORIES.UTILITY,\r\n        // While this actually has a 0.5s CD, it shows up weird in the Abilities tab if we set that\r\n      },\r\n      {\r\n        spell: SPELLS.PREMEDITATION_TALENT,\r\n        category: Abilities.SPELL_CATEGORIES.UTILITY,\r\n      },\r\n    ];\r\n  }\r\n}\r\n\r\nexport default Abilities;\r\n","import { ThresholdStyle } from 'parser/core/ParseResults';\r\nimport CoreAlwaysBeCasting from 'parser/shared/modules/AlwaysBeCasting';\r\n\r\nclass AlwaysBeCasting extends CoreAlwaysBeCasting {\r\n  get downtimeSuggestionThresholds() {\r\n    return {\r\n      actual: this.downtimePercentage,\r\n      isGreaterThan: {\r\n        minor: 0.25,\r\n        average: 0.30,\r\n        major: 0.35,\r\n      },\r\n      style: ThresholdStyle.PERCENTAGE,\r\n    };\r\n  }\r\n}\r\n\r\nexport default AlwaysBeCasting;\r\n","import React from 'react';\r\nimport Analyzer from 'parser/core/Analyzer';\r\nimport { When } from 'parser/core/ParseResults';\r\nimport SPELLS from 'common/SPELLS/index';\r\nimport Spell from 'common/SPELLS/Spell';\r\nimport SpellLink from 'common/SpellLink';\r\nimport resourceSuggest from 'parser/shared/modules/resources/resourcetracker/ResourceSuggest';\r\n\r\nimport ComboPointTracker from '../../../shared/resources/ComboPointTracker';\r\n\r\nclass ComboPoints extends Analyzer {\r\n  static dependencies = {\r\n    comboPointTracker: ComboPointTracker,\r\n  };\r\n\r\n  protected comboPointTracker!: ComboPointTracker;\r\n\r\n  get comboPointThresholds() {\r\n    return {\r\n      actual: this.comboPointTracker.wasted / this.comboPointTracker.generated,\r\n      isGreaterThan: {\r\n        minor: 0.05,\r\n        average: 0.1,\r\n        major: 0.15,\r\n      },\r\n      style: 'percentage',\r\n    };\r\n  }\r\n\r\n  makeExtraSuggestion(spell: Spell) {\r\n    return <>Avoid wasting combo points when casting <SpellLink id={spell.id} /> </>;\r\n  }\r\n\r\n  suggestions(when: When) {\r\n    resourceSuggest(when, this.comboPointTracker, {\r\n      spell: SPELLS.MARKED_FOR_DEATH_TALENT, // 5 CP\r\n      minor: 0,\r\n      avg: 0.05,\r\n      major: 0.1,\r\n      extraSuggestion: this.makeExtraSuggestion(SPELLS.MARKED_FOR_DEATH_TALENT),\r\n    });\r\n    resourceSuggest(when, this.comboPointTracker, {\r\n      spell: SPELLS.BACKSTAB, // 1 CP\r\n      minor: 0.05,\r\n      avg: 0.10,\r\n      major: 0.15,\r\n      extraSuggestion: this.makeExtraSuggestion(SPELLS.BACKSTAB),\r\n    });\r\n    resourceSuggest(when, this.comboPointTracker, {\r\n      spell: SPELLS.GLOOMBLADE_TALENT, // 1 CP\r\n      minor: 0.05,\r\n      avg: 0.10,\r\n      major: 0.15,\r\n      extraSuggestion: this.makeExtraSuggestion(SPELLS.GLOOMBLADE_TALENT),\r\n    });\r\n    resourceSuggest(when, this.comboPointTracker, {\r\n      spell: SPELLS.SHADOWSTRIKE, // 2 CP\r\n      minor: 0.05,\r\n      avg: 0.10,\r\n      major: 0.15,\r\n      extraSuggestion: this.makeExtraSuggestion(SPELLS.SHADOWSTRIKE),\r\n    });\r\n    resourceSuggest(when, this.comboPointTracker, {\r\n      spell: SPELLS.SHURIKEN_STORM, // 1 CP per target hit\r\n      minor: 0.1,\r\n      avg: 0.2,\r\n      major: 0.3,\r\n      extraSuggestion: this.makeExtraSuggestion(SPELLS.SHURIKEN_STORM),\r\n    });\r\n    resourceSuggest(when, this.comboPointTracker, {\r\n      spell: SPELLS.SHURIKEN_TOSS, // 1 CP\r\n      minor: 0.05,\r\n      avg: 0.10,\r\n      major: 0.15,\r\n      extraSuggestion: this.makeExtraSuggestion(SPELLS.SHURIKEN_TOSS),\r\n    });\r\n    resourceSuggest(when, this.comboPointTracker, {\r\n      spell: SPELLS.SHADOW_TECHNIQUES,\r\n      minor: 0.1,\r\n      avg: 0.2,\r\n      major: 0.3,\r\n      extraSuggestion: <span> Use a weak Aura to track <SpellLink id={SPELLS.SHADOW_TECHNIQUES.id} />. This is an advanced suggestion and should not be addressed first. </span>,\r\n    });\r\n    resourceSuggest(when, this.comboPointTracker, {\r\n      spell: SPELLS.CHEAP_SHOT, // 2 CP\r\n      minor: 0,\r\n      avg: 0.1,\r\n      major: 0.2,\r\n      extraSuggestion: this.makeExtraSuggestion(SPELLS.CHEAP_SHOT),\r\n    });\r\n  }\r\n}\r\n\r\nexport default ComboPoints;\r\n","import React from 'react';\r\nimport Analyzer from 'parser/core/Analyzer';\r\nimport { When } from 'parser/core/ParseResults';\r\nimport SPELLS from 'common/SPELLS/index';\r\nimport SpellLink from 'common/SpellLink';\r\nimport resourceSuggest from 'parser/shared/modules/resources/resourcetracker/ResourceSuggest';\r\n\r\nimport EnergyTracker from '../../../shared/resources/EnergyTracker';\r\nimport EnergyCapTracker from '../../../shared/resources/EnergyCapTracker';\r\n\r\nclass Energy extends Analyzer {\r\n  static dependencies = {\r\n    energyTracker: EnergyTracker,\r\n    energyCapTracker: EnergyCapTracker,\r\n  };\r\n\r\n  protected energyTracker!: EnergyTracker;\r\n  protected energyCapTracker!: EnergyCapTracker;\r\n\r\n  get energyThresholds() {\r\n    return {\r\n      actual: (this.energyTracker.wasted + this.energyCapTracker.missedRegen) / (this.energyTracker.generated + this.energyCapTracker.naturalRegen),\r\n      isGreaterThan: {\r\n        minor: 0.033,\r\n        average: 0.066,\r\n        major: 0.1,\r\n      },\r\n      style: 'percentage',\r\n    };\r\n  }\r\n\r\n  suggestions(when: When) {\r\n    resourceSuggest(when, this.energyTracker, {\r\n      spell: SPELLS.SYMBOLS_OF_DEATH,\r\n      minor: 0.10,\r\n      avg: 0.20,\r\n      major: 0.50,\r\n      extraSuggestion: <>Try to spend energy before using <SpellLink id={SPELLS.SYMBOLS_OF_DEATH.id} />, but do not delay it to avoid waste! </>,\r\n    });\r\n\r\n    resourceSuggest(when, this.energyTracker, {\r\n      spell: SPELLS.RELENTLESS_STRIKES,\r\n      minor: 0.15,\r\n      avg: 0.25,\r\n      major: 0.40,\r\n      extraSuggestion: <> You are wasting more energy then normal. You may be pooling too much energy or not casting enough spenders. </>,\r\n    });\r\n  }\r\n}\r\n\r\nexport default Energy;\r\n","import React from 'react';\r\nimport SPELLS from 'common/SPELLS';\r\nimport SpellLink from 'common/SpellLink';\r\nimport { i18n } from '@lingui/core';\r\nimport { t } from '@lingui/macro';\r\nimport Analyzer, { Options } from 'parser/core/Analyzer';\r\nimport Spell from 'common/SPELLS/Spell';\r\nimport { SuggestionFactory, ThresholdStyle, When } from 'parser/core/ParseResults';\r\n\r\nclass CastsInStealthBase extends Analyzer {\r\n  backstabSpell: Spell;\r\n  badStealthSpells: Spell[] = [];\r\n  stealthCondition = '';\r\n  maxCastsPerStealth = 0;\r\n  validStealthSpellIds = [\r\n    SPELLS.BACKSTAB.id,\r\n    SPELLS.GLOOMBLADE_TALENT.id,\r\n    SPELLS.SHURIKEN_STORM.id,\r\n    SPELLS.SHADOWSTRIKE.id,\r\n    SPELLS.NIGHTBLADE.id,\r\n    SPELLS.EVISCERATE.id,\r\n    SPELLS.SHURIKEN_TORNADO_TALENT.id,\r\n    SPELLS.SECRET_TECHNIQUE_TALENT.id,\r\n  ];\r\n\r\n  constructor(options: Options) {\r\n    super(options);\r\n    this.backstabSpell = this.selectedCombatant.hasTalent(SPELLS.GLOOMBLADE_TALENT.id)\r\n      ? SPELLS.GLOOMBLADE_TALENT\r\n      : SPELLS.BACKSTAB;\r\n    this.badStealthSpells = [this.backstabSpell];\r\n  }\r\n\r\n  get stealthMaxCasts() {\r\n    return 0;\r\n  }\r\n\r\n  get stealthActualCasts() {\r\n    return 0;\r\n  }\r\n\r\n  get castsInStealthThresholds() {\r\n    return {\r\n      actual: this.stealthActualCasts / this.stealthMaxCasts,\r\n      isLessThan: {\r\n        minor: 1,\r\n        average: 0.9,\r\n        major: 0.8,\r\n      },\r\n      style: ThresholdStyle.PERCENTAGE,\r\n    };\r\n  }\r\n\r\n  createWrongCastThresholds(spell: Spell, tracker: any) {\r\n    return {\r\n      actual: tracker.getAbility(spell.id).casts,\r\n      isGreaterThan: {\r\n        minor: 0,\r\n        average: 0,\r\n        major: 0,\r\n      },\r\n      style: 'number',\r\n    };\r\n  }\r\n\r\n  suggestWrongCast(when: When, spell: Spell, thresholds: any) {\r\n    when(thresholds)\r\n      .addSuggestion((suggest: SuggestionFactory, actual: number | boolean, recommended: number | boolean) => suggest(<>Use <SpellLink id={SPELLS.SHADOWSTRIKE.id} /> instead of <SpellLink id={spell.id} /> during {this.stealthCondition}. </>)\r\n        .icon(spell.icon)\r\n        .actual(i18n._(t('rogue.subtlety.suggestions.castsInStealth.casts')`${actual} ${spell.name} casts`))\r\n        .recommended(`${recommended} is recommended`));\r\n  }\r\n\r\n  suggestAvgCasts(when: When, spell: Spell) {\r\n    when(this.castsInStealthThresholds)\r\n      .addSuggestion((suggest: SuggestionFactory) => suggest(<>Try to cast {this.maxCastsPerStealth} spells during {this.stealthCondition}</>)\r\n        .icon(spell.icon)\r\n        .actual(i18n._(t('rogue.subtlety.suggestions.castsInStealth.efficiency')`${this.stealthActualCasts} casts out of ${this.stealthMaxCasts} possible.`))\r\n        .recommended(`${this.maxCastsPerStealth} in each ${this.stealthCondition} window`));\r\n  }\r\n}\r\n\r\nexport default CastsInStealthBase;\r\n","import SPELLS from 'common/SPELLS/index';\r\n\r\nimport FilteredDamageTracker from '../../../shared/casttracker/FilteredDamageTracker';\r\n\r\nclass DanceDamageTracker extends FilteredDamageTracker {\r\n  shouldProcessEvent(event: any) {\r\n    return this.selectedCombatant.hasBuff(SPELLS.SHADOW_DANCE_BUFF.id);\r\n  }\r\n}\r\n\r\nexport default DanceDamageTracker;\r\n","import React from 'react';\r\nimport SPELLS from 'common/SPELLS';\r\nimport SpellIcon from 'common/SpellIcon';\r\nimport { formatPercentage } from 'common/format';\r\nimport STATISTIC_CATEGORY from 'interface/others/STATISTIC_CATEGORY';\r\nimport Statistic from 'interface/statistics/Statistic';\r\nimport BoringValueText from 'interface/statistics/components/BoringValueText';\r\nimport { Options } from 'parser/core/Analyzer';\r\nimport Spell from 'common/SPELLS/Spell';\r\nimport { When } from 'parser/core/ParseResults';\r\n\r\nimport DamageTracker from 'parser/shared/modules/AbilityTracker';\r\n\r\nimport CastsInStealthBase from './CastsInStealthBase';\r\nimport DanceDamageTracker from './DanceDamageTracker';\r\n\r\nclass CastsInShadowDance extends CastsInStealthBase {\r\n  static dependencies = {\r\n    damageTracker: DamageTracker,\r\n    danceDamageTracker: DanceDamageTracker,\r\n  };\r\n\r\n  protected damageTracker!: DamageTracker;\r\n  protected danceDamageTracker!: DanceDamageTracker;\r\n\r\n  constructor(options: Options & { danceDamageTracker: DanceDamageTracker }) {\r\n    super(options);\r\n\r\n    this.maxCastsPerStealth = 5 + (this.selectedCombatant.hasTalent(SPELLS.SUBTERFUGE_TALENT.id) ? 1 : 0);\r\n\r\n    this.stealthCondition = 'Shadow Dance';\r\n\r\n    options.danceDamageTracker.subscribeInefficientCast(\r\n      this.badStealthSpells,\r\n      (s: Spell) => `Cast Shadowstrike instead of ${s.name} when you are in ${this.stealthCondition} window`,\r\n    );\r\n  }\r\n\r\n  get danceBackstabThresholds() {\r\n    return this.createWrongCastThresholds(this.backstabSpell, this.danceDamageTracker);\r\n  }\r\n\r\n  get stealthMaxCasts() {\r\n    return this.maxCastsPerStealth * this.damageTracker.getAbility(SPELLS.SHADOW_DANCE.id).casts || 0;\r\n  }\r\n\r\n  get stealthActualCasts() {\r\n    return this.validStealthSpellIds.map(s => this.danceDamageTracker.getAbility(s).casts || 0).reduce((p, c) => p + c);\r\n  }\r\n\r\n  suggestions(when: When) {\r\n    this.suggestWrongCast(when, this.backstabSpell, this.danceBackstabThresholds);\r\n    this.suggestAvgCasts(when, SPELLS.SHADOW_DANCE);\r\n  }\r\n\r\n  statistic() {\r\n    const shadowDanceUptime = this.selectedCombatant.getBuffUptime(SPELLS.SHADOW_DANCE_BUFF.id) / this.owner.fightDuration;\r\n    return (\r\n      <Statistic\r\n        size=\"flexible\"\r\n        category={STATISTIC_CATEGORY.GENERAL}\r\n      >\r\n        <BoringValueText label={<><SpellIcon id={SPELLS.SHADOW_DANCE_BUFF.id} /> Shadow Dance Uptime </>}>\r\n          {formatPercentage(shadowDanceUptime)} %\r\n        </BoringValueText>\r\n      </Statistic>\r\n    );\r\n  }\r\n}\r\n\r\nexport default CastsInShadowDance;\r\n","import SPELLS from 'common/SPELLS';\r\nimport { Options } from 'parser/core/Analyzer';\r\n\r\nimport FilteredDamageTracker from './FilteredDamageTracker';\r\nimport { isStealth } from '../stealth/IsStealth';\r\n\r\nclass StealthDamageTracker extends FilteredDamageTracker {\r\n  // Workaround for stealth getting removed \"before\" the cast.\r\n  delayWindow: number = 100;\r\n\r\n  constructor(options: Options) {\r\n    super(options);\r\n\r\n    if (this.selectedCombatant.hasTalent(SPELLS.SUBTERFUGE_TALENT.id)) {\r\n      //Subterfuge allows use of stealth abilities for 3 seconds after stealth fades\r\n      this.delayWindow += 3000;\r\n    }\r\n  }\r\n\r\n  shouldProcessEvent(event: any) {\r\n    return isStealth(this.selectedCombatant, this.delayWindow);\r\n  }\r\n}\r\n\r\nexport default StealthDamageTracker;\r\n","import SPELLS from 'common/SPELLS';\r\nimport DamageTracker from 'parser/shared/modules/AbilityTracker';\r\nimport { Options } from 'parser/core/Analyzer';\r\nimport Spell from 'common/SPELLS/Spell';\r\nimport { When } from 'parser/core/ParseResults';\r\n\r\nimport CastsInStealthBase from './CastsInStealthBase';\r\nimport StealthDamageTracker from '../../../shared/casttracker/StealthDamageTracker';\r\n\r\nclass CastsInStealth extends CastsInStealthBase {\r\n  static dependencies = {\r\n    damageTracker: DamageTracker,\r\n    stealthDamageTracker: StealthDamageTracker,\r\n  };\r\n\r\n  protected damageTracker!: DamageTracker;\r\n  protected stealthDamageTracker!: StealthDamageTracker;\r\n\r\n  constructor(options: Options & { stealthDamageTracker: StealthDamageTracker }) {\r\n    super(options);\r\n\r\n    this.maxCastsPerStealth = 1 + (this.selectedCombatant.hasTalent(SPELLS.SUBTERFUGE_TALENT.id) ? 2 : 0);\r\n\r\n    this.stealthCondition = this.selectedCombatant.hasTalent(SPELLS.SUBTERFUGE_TALENT.id)\r\n      ? 'Stealth or Vanish with Subterfuge'\r\n      : 'Stealth or Vanish';\r\n\r\n    options.stealthDamageTracker.subscribeInefficientCast(\r\n      this.badStealthSpells,\r\n      (s: Spell) => `Cast Shadowstrike instead of ${s.name} when you are in ${this.stealthCondition} window`,\r\n    );\r\n  }\r\n\r\n  get stealthBackstabThresholds() {\r\n    return this.createWrongCastThresholds(this.backstabSpell, this.stealthDamageTracker);\r\n  }\r\n\r\n  get stealthMaxCasts() {\r\n    return this.maxCastsPerStealth * (this.damageTracker.getAbility(SPELLS.VANISH.id).casts + 1);\r\n  }\r\n\r\n  get stealthActualCasts() {\r\n    return this.validStealthSpellIds.map(s => this.stealthDamageTracker.getAbility(s).casts || 0).reduce((p, c) => p + c);\r\n  }\r\n\r\n  suggestions(when: When) {\r\n    this.suggestWrongCast(when, this.backstabSpell, this.stealthBackstabThresholds);\r\n    this.suggestAvgCasts(when, SPELLS.STEALTH);\r\n  }\r\n}\r\n\r\nexport default CastsInStealth;\r\n","import React from 'react';\r\nimport PropTypes from 'prop-types';\r\n\r\nimport SPELLS from 'common/SPELLS';\r\nimport SpellLink from 'common/SpellLink';\r\nimport { TooltipElement } from 'common/Tooltip';\r\nimport Checklist from 'parser/shared/modules/features/Checklist';\r\nimport Rule from 'parser/shared/modules/features/Checklist/Rule';\r\nimport Requirement from 'parser/shared/modules/features/Checklist/Requirement';\r\nimport PreparationRule from 'parser/shared/modules/features/Checklist/PreparationRule';\r\nimport GenericCastEfficiencyRequirement from 'parser/shared/modules/features/Checklist/GenericCastEfficiencyRequirement';\r\n\r\nconst SubRogueChecklist = ({ combatant, castEfficiency, thresholds }: any) => {\r\n  const AbilityRequirement = (props: any) => (\r\n    <GenericCastEfficiencyRequirement\r\n      castEfficiency={castEfficiency.getCastEfficiencyForSpellId(props.spell)}\r\n      {...props}\r\n    />\r\n  );\r\n  AbilityRequirement.propTypes = {\r\n    spell: PropTypes.number.isRequired,\r\n  };\r\n\r\n  return (\r\n    <Checklist>\r\n      <Rule\r\n        name=\"Use your offensive cooldowns\"\r\n        description={(\r\n          <>\r\n            Subtlety rotation revolves around using your cooldowns effectively. To maximize your damage, you need to stack your cooldowns. Your cooldowns dictate your rotation. A base rule of thumb is: use <SpellLink id={SPELLS.SYMBOLS_OF_DEATH.id} /> on cooldown, and use <SpellLink id={SPELLS.SHADOW_DANCE.id} /> when symbols are active. However you should never cap on <SpellLink id={SPELLS.SHADOW_DANCE.id} /> charges.\r\n          </>\r\n        )}\r\n      >\r\n        <AbilityRequirement spell={SPELLS.SHADOW_DANCE.id} />\r\n        <AbilityRequirement spell={SPELLS.SYMBOLS_OF_DEATH.id} />\r\n        <AbilityRequirement spell={SPELLS.VANISH.id} />\r\n        <AbilityRequirement spell={SPELLS.SHADOW_BLADES.id} />\r\n        {combatant.hasTalent(SPELLS.SECRET_TECHNIQUE_TALENT.id) && (\r\n          <AbilityRequirement spell={SPELLS.SECRET_TECHNIQUE_TALENT.id} />\r\n        )}\r\n      </Rule>\r\n      <Rule\r\n        name=\"Don't waste resources\"\r\n        description={(\r\n          <>\r\n            Since all of Subtlety's damage is tied to resources, it is important to waste as little of them as possible. You should make sure you do not find yourself being Energy capped or casting Combo Point generating abilities when at maximum Combo Points.\r\n          </>\r\n        )}\r\n      >\r\n        <Requirement\r\n          name={(\r\n            <>\r\n              Wasted combo points\r\n            </>\r\n          )}\r\n          thresholds={thresholds.comboPoints}\r\n        />\r\n        <Requirement\r\n          name={(\r\n            <>\r\n              Wasted energy\r\n            </>\r\n          )}\r\n          thresholds={thresholds.energy}\r\n        />\r\n      </Rule>\r\n      <Rule\r\n        name=\"Utilize Stealth and Shadow Dance to full potential\"\r\n        description={(\r\n          <>\r\n            Stealth is a core mechanic for Subtlety. When using <SpellLink id={SPELLS.SHADOW_DANCE.id} />, <SpellLink id={SPELLS.VANISH.id} /> or <SpellLink id={SPELLS.SUBTERFUGE_TALENT.id} /> you need to make the most of your stealth abilities, using up every GCD. To achieve this you might need to pool some energy. Depending on your talents, the amount of energy required differs between 60 and 90. Its also important to use correct spells in stealth, for example <SpellLink id={SPELLS.BACKSTAB.id} /> should be replaced by <SpellLink id={SPELLS.SHADOWSTRIKE.id} />\r\n          </>\r\n        )}\r\n      >\r\n        <Requirement\r\n          name={(\r\n            <>\r\n              <TooltipElement content=\"Includes Subterfuge if talented\">Casts in Stealth/Vanish*</TooltipElement>\r\n            </>\r\n          )}\r\n          thresholds={thresholds.castsInStealth}\r\n        />\r\n        <Requirement\r\n          name={(\r\n            <>\r\n              Casts in <SpellLink id={SPELLS.SHADOW_DANCE.id} />\r\n            </>\r\n          )}\r\n          thresholds={thresholds.castsInShadowDance}\r\n        />\r\n        <Requirement\r\n          name={(\r\n            <>\r\n              <SpellLink id={SPELLS.BACKSTAB.id} /> used from <SpellLink id={SPELLS.SHADOW_DANCE.id} />\r\n            </>\r\n          )}\r\n          thresholds={thresholds.backstabInShadowDance}\r\n        />\r\n        <Requirement\r\n          name={(\r\n            <>\r\n              <SpellLink id={SPELLS.BACKSTAB.id} /> <TooltipElement content=\"Includes Vanish and Subterfuge if talented\">used from Stealth*</TooltipElement>\r\n            </>\r\n          )}\r\n          thresholds={thresholds.backstabInStealth}\r\n        />\r\n      </Rule>\r\n      <PreparationRule thresholds={thresholds} />\r\n\r\n    </Checklist>\r\n  );\r\n};\r\n\r\nSubRogueChecklist.propTypes = {\r\n  castEfficiency: PropTypes.object.isRequired,\r\n  combatant: PropTypes.shape({\r\n    hasTalent: PropTypes.func.isRequired,\r\n  }).isRequired,\r\n  thresholds: PropTypes.object.isRequired,\r\n};\r\n\r\nexport default SubRogueChecklist;\r\n","import React from 'react';\r\n\r\nimport BaseChecklist from 'parser/shared/modules/features/Checklist/Module';\r\nimport CastEfficiency from 'parser/shared/modules/CastEfficiency';\r\nimport Combatants from 'parser/shared/modules/Combatants';\r\nimport PreparationRuleAnalyzer from 'parser/shared/modules/features/Checklist/PreparationRuleAnalyzer';\r\n\r\n//Core\r\nimport ComboPoints from '../../core/ComboPoints';\r\nimport Energy from '../../core/Energy';\r\nimport AlwaysBeCasting from '../AlwaysBeCasting';\r\n\r\n//Base\r\nimport CastsInShadowDance from '../../core/CastsInShadowDance';\r\nimport CastsInStealth from '../../core/CastsInStealth';\r\n\r\nimport Component from './Component';\r\n\r\nclass Checklist extends BaseChecklist {\r\n  static dependencies = {\r\n    combatants: Combatants,\r\n    castEfficiency: CastEfficiency,\r\n    alwaysBeCasting: AlwaysBeCasting,\r\n    preparationRuleAnalyzer: PreparationRuleAnalyzer,\r\n\r\n    //Core\r\n    comboPoints: ComboPoints,\r\n    energy: Energy,\r\n\r\n    //Base\r\n    castsInShadowDance: CastsInShadowDance,\r\n    castsInStealth: CastsInStealth,\r\n  };\r\n\r\n  //region Core\r\n  protected combatants!: Combatants;\r\n  protected castEfficiency!: CastEfficiency;\r\n  protected alwaysBeCasting!: AlwaysBeCasting;\r\n  protected preparationRuleAnalyzer!: PreparationRuleAnalyzer;\r\n  protected comboPoints!: ComboPoints;\r\n  protected energy!: Energy;\r\n  //endregion\r\n\r\n  //region Base\r\n  protected castsInShadowDance!: CastsInShadowDance;\r\n  protected castsInStealth!: CastsInStealth;\r\n\r\n  //endregion\r\n\r\n  render() {\r\n    return (\r\n      <Component\r\n        combatant={this.combatants.selected}\r\n        castEfficiency={this.castEfficiency}\r\n        thresholds={{\r\n          ...this.preparationRuleAnalyzer.thresholds,\r\n\r\n          //Core\r\n          comboPoints: this.comboPoints.comboPointThresholds,\r\n          energy: this.energy.energyThresholds,\r\n\r\n          //Base\r\n          castsInShadowDance: this.castsInShadowDance.castsInStealthThresholds,\r\n          backstabInShadowDance: this.castsInShadowDance.danceBackstabThresholds,\r\n          castsInStealth: this.castsInStealth.castsInStealthThresholds,\r\n          backstabInStealth: this.castsInStealth.stealthBackstabThresholds,\r\n        }}\r\n      />\r\n    );\r\n  }\r\n}\r\n\r\nexport default Checklist;\r\n","import SPELLS from 'common/SPELLS';\r\nimport EventsNormalizer from 'parser/core/EventsNormalizer';\r\nimport { EventType } from 'parser/core/Events';\r\n\r\n/**\r\n * Shuriken Storm Energize events reporting overcaping of CPs.\r\n *\r\n * @param {Array} events\r\n * @returns {Array} Events possibly with some reordered.\r\n */\r\nclass ShurikenStormNormalizer extends EventsNormalizer {\r\n\r\n  /**\r\n   * Shuriken Storm should never provide less then 3CP.\r\n   * If less then 3 CPs were generated, it most likely was a mistake to cast this spell.\r\n   * We will remove all waste from casts that generated at least 3 CPs, because under normal circumstances you never finish with 3CP deficit.\r\n   * In some cases it may be better to use a different builder, but even if it is a damage or proc loss to Shuriken Storm in these situations, its still not a CP waste.\r\n   *\r\n   * If less the 3CPs were generated, we can consider anything up to the Max CP cap as waste.\r\n   * Logic behind this: If finisher was used instead, next Shuriken Storm would generate CPs up to the max CP pool.\r\n   */\r\n  minCPs = 3;\r\n\r\n  normalize(events: any) {\r\n    const fixedEvents: any[] = [];\r\n\r\n    //Player CP Pool\r\n    let cpPool = 5;\r\n    if (this.selectedCombatant.hasTalent(SPELLS.DEEPER_STRATAGEM_TALENT.id)) {\r\n      cpPool += 1;\r\n    }\r\n\r\n    events.forEach((event: any, eventIndex: number) => {\r\n      fixedEvents.push(event);\r\n\r\n      // Find Shuriken Storm CP Events\r\n      if (event.type === EventType.Energize && event.ability.guid === SPELLS.SHURIKEN_STORM_CP.id) {\r\n        //Remove excess waste from Shuriken Storm.\r\n        if (event.waste > 0) {\r\n          if (event.resourceChange - event.waste >= this.minCPs) {\r\n            //Consider the event as having no waste\r\n            event.resourceChange = event.resourceChange - event.waste;\r\n            event.waste = 0;\r\n          } else {\r\n            //Clear off extra waste that would go over the max CP\r\n            const newWaste = Math.min(event.waste, cpPool);\r\n            event.resourceChange = event.resourceChange - event.waste + newWaste;\r\n            event.waste = newWaste;\r\n          }\r\n        }\r\n      }\r\n    });\r\n\r\n    return fixedEvents;\r\n  }\r\n}\r\n\r\nexport default ShurikenStormNormalizer;\r\n","import React from 'react';\r\n\r\nimport SPELLS from 'common/SPELLS';\r\nimport SpellIcon from 'common/SpellIcon';\r\nimport { formatPercentage } from 'common/format';\r\nimport Statistic from 'interface/statistics/Statistic';\r\nimport STATISTIC_CATEGORY from 'interface/others/STATISTIC_CATEGORY';\r\n\r\nimport Analyzer from 'parser/core/Analyzer';\r\nimport Enemies from 'parser/shared/modules/Enemies';\r\n\r\nimport BoringValueText from 'interface/statistics/components/BoringValueText';\r\n\r\nclass ShadowBladesUptime extends Analyzer {\r\n  static dependencies = {\r\n    enemies: Enemies,\r\n  };\r\n\r\n  protected enemies!: Enemies;\r\n\r\n  statistic() {\r\n    const shadowBladesUptime = this.selectedCombatant.getBuffUptime(SPELLS.SHADOW_BLADES.id) / this.owner.fightDuration;\r\n    return (\r\n      <Statistic\r\n        size=\"flexible\"\r\n        category={STATISTIC_CATEGORY.GENERAL}\r\n      >\r\n        <BoringValueText label={<><SpellIcon id={SPELLS.SHADOW_BLADES.id} /> Shadow Blades Uptime</>}>\r\n          {formatPercentage(shadowBladesUptime)} %\r\n        </BoringValueText>\r\n      </Statistic>\r\n    );\r\n  }\r\n}\r\n\r\nexport default ShadowBladesUptime;\r\n","import React from 'react';\r\n\r\nimport SPELLS from 'common/SPELLS';\r\nimport SpellIcon from 'common/SpellIcon';\r\nimport { formatPercentage } from 'common/format';\r\nimport STATISTIC_CATEGORY from 'interface/others/STATISTIC_CATEGORY';\r\nimport Statistic from 'interface/statistics/Statistic';\r\nimport BoringValueText from 'interface/statistics/components/BoringValueText';\r\n\r\nimport Analyzer from 'parser/core/Analyzer';\r\nimport Enemies from 'parser/shared/modules/Enemies';\r\n\r\nclass SymbolsOfDeathUptime extends Analyzer {\r\n  static dependencies = {\r\n    enemies: Enemies,\r\n  };\r\n\r\n  protected enemies!: Enemies;\r\n\r\n  statistic() {\r\n    const symbolsOfDeathUptime = this.selectedCombatant.getBuffUptime(SPELLS.SYMBOLS_OF_DEATH.id) / this.owner.fightDuration;\r\n    return (\r\n      <Statistic\r\n        size=\"flexible\"\r\n        category={STATISTIC_CATEGORY.GENERAL}\r\n      >\r\n        <BoringValueText label={<><SpellIcon id={SPELLS.SYMBOLS_OF_DEATH.id} /> Symbols of Death Uptime</>}>\r\n          {formatPercentage(symbolsOfDeathUptime)} %\r\n        </BoringValueText>\r\n      </Statistic>\r\n    );\r\n  }\r\n}\r\n\r\nexport default SymbolsOfDeathUptime;\r\n","import SPELLS from 'common/SPELLS/index';\r\nimport RESOURCE_TYPES from 'game/RESOURCE_TYPES';\r\nimport SpellUsable from 'parser/shared/modules/SpellUsable';\r\nimport Analyzer, { Options, SELECTED_PLAYER } from 'parser/core/Analyzer';\r\nimport Events, { SpendResourceEvent } from 'parser/core/Events';\r\n\r\n/**\r\n * Deepening Shadows\r\n * Your finishing moves reduce the remaining cooldown on Shadow Dance by 1.5 sec per combo point spent.\r\n */\r\nclass DeepeningShadows extends Analyzer {\r\n  static dependencies = {\r\n    spellUsable: SpellUsable,\r\n  };\r\n  cdrPerComboPoint: number = 0;\r\n  protected spellUsable!: SpellUsable;\r\n\r\n  constructor(options: Options) {\r\n    super(options);\r\n    this.cdrPerComboPoint = 1500 + (this.selectedCombatant.hasTalent(SPELLS.ENVELOPING_SHADOWS_TALENT.id) ? 1000 : 0);\r\n    this.addEventListener(Events.SpendResource.by(SELECTED_PLAYER), this.onSpendResource);\r\n  }\r\n\r\n  onSpendResource(event: SpendResourceEvent) {\r\n    const comboPointsSpent = event.resourceChange;\r\n    if (event.resourceChangeType !== RESOURCE_TYPES.COMBO_POINTS.id) {\r\n      return;\r\n    }\r\n\r\n    if (this.spellUsable.isOnCooldown(SPELLS.SHADOW_DANCE.id)) {\r\n      this.spellUsable.reduceCooldown(SPELLS.SHADOW_DANCE.id, comboPointsSpent * this.cdrPerComboPoint);\r\n    }\r\n  }\r\n}\r\n\r\nexport default DeepeningShadows;\r\n","import SPELLS from 'common/SPELLS/index';\r\n\r\nimport FilteredDamageTracker from '../../../shared/casttracker/FilteredDamageTracker';\r\n\r\nclass SymbolsDamageTracker extends FilteredDamageTracker {\r\n  shouldProcessEvent(event: any) {\r\n    return this.selectedCombatant.hasBuff(SPELLS.SYMBOLS_OF_DEATH.id);\r\n  }\r\n}\r\n\r\nexport default SymbolsDamageTracker;\r\n","import Analyzer, { Options } from 'parser/core/Analyzer';\r\nimport DamageTracker from 'parser/shared/modules/AbilityTracker';\r\nimport SPELLS from 'common/SPELLS';\r\n\r\n/**\r\n * Dark Shadow\r\n * While Shadow Dance is active, all damage you deal is increased by 25%.\r\n * -----\r\n * When this talent is active, rotation may change to put high damage abilities in to the Dance window.\r\n */\r\nclass DarkShadow extends Analyzer {\r\n  static dependencies = {\r\n    damageTracker: DamageTracker,\r\n  };\r\n\r\n  protected damageTracker!: DamageTracker;\r\n\r\n  constructor(options: Options) {\r\n    super(options);\r\n    this.active = this.selectedCombatant.hasTalent(SPELLS.DARK_SHADOW_TALENT.id);\r\n  }\r\n\r\n  get totalShadowDanceCast() {\r\n    return this.damageTracker.getAbility(SPELLS.SHADOW_DANCE.id).casts;\r\n  }\r\n}\r\n\r\nexport default DarkShadow;\r\n","import React from 'react';\r\nimport SPELLS from 'common/SPELLS';\r\nimport STATISTIC_CATEGORY from 'interface/others/STATISTIC_CATEGORY';\r\nimport Statistic from 'interface/statistics/Statistic';\r\nimport ItemDamageDone from 'interface/ItemDamageDone';\r\nimport BoringSpellValueText from 'interface/statistics/components/BoringSpellValueText';\r\n\r\nimport DarkShadow from './DarkShadow';\r\nimport DanceDamageTracker from '../../core/DanceDamageTracker';\r\n\r\nclass DarkShadowContribution extends DarkShadow {\r\n  static dependencies = {\r\n    ...DarkShadow.dependencies,\r\n    danceDamageTracker: DanceDamageTracker,\r\n  };\r\n\r\n  protected danceDamageTracker!: DanceDamageTracker;\r\n\r\n  get darkShadowDamageFactor() {\r\n    return 0.25;\r\n  }\r\n\r\n  statistic() {\r\n    const danceDamage = Object.keys(this.danceDamageTracker.abilities)\r\n      .map(abilityId => this.danceDamageTracker.abilities.get(parseInt(abilityId))?.damageEffective || 0)\r\n      .reduce((a, b) => a + b, 0) * this.darkShadowDamageFactor / (1 + this.darkShadowDamageFactor);\r\n\r\n    return (\r\n      <Statistic\r\n        size=\"flexible\"\r\n        category={STATISTIC_CATEGORY.GENERAL}\r\n      >\r\n        <BoringSpellValueText spell={SPELLS.DARK_SHADOW_TALENT}>\r\n          <ItemDamageDone amount={danceDamage} />\r\n        </BoringSpellValueText>\r\n      </Statistic>\r\n    );\r\n  }\r\n}\r\n\r\nexport default DarkShadowContribution;\r\n","import React from 'react';\r\n\r\nimport Analyzer, { Options, SELECTED_PLAYER } from 'parser/core/Analyzer';\r\nimport SPELLS from 'common/SPELLS';\r\nimport SpellLink from 'common/SpellLink';\r\nimport SpellIcon from 'common/SpellIcon';\r\nimport { formatPercentage } from 'common/format';\r\nimport Statistic from 'interface/statistics/Statistic';\r\nimport STATISTIC_CATEGORY from 'interface/others/STATISTIC_CATEGORY';\r\nimport BoringValueText from 'interface/statistics/components/BoringValueText';\r\nimport Enemies from 'parser/shared/modules/Enemies';\r\nimport { i18n } from '@lingui/core';\r\nimport { t } from '@lingui/macro';\r\nimport Events, { CastEvent, RefreshDebuffEvent } from 'parser/core/Events';\r\nimport { ThresholdStyle, When } from 'parser/core/ParseResults';\r\n\r\n/**\r\n * Find Weakness\r\n * Your Shadowstrike and Cheap Shot abilities reveal a flaw in your target's defenses, causing all your attacks to bypass 30%  of that enemy's armor for 18 sec.\r\n */\r\nclass FindWeakness extends Analyzer {\r\n  static dependencies = {\r\n    enemies: Enemies,\r\n  };\r\n  badVanishCasts = 0;\r\n  latestTs = 0;\r\n  protected enemies!: Enemies;\r\n\r\n  constructor(options: Options) {\r\n    super(options);\r\n    this.addEventListener(Events.cast.by(SELECTED_PLAYER).spell(SPELLS.VANISH), this.handleVanish);\r\n    this.addEventListener(Events.refreshdebuff.by(SELECTED_PLAYER).spell(SPELLS.FIND_WEAKNESS), this.onRefreshDebuff);\r\n  }\r\n\r\n  get vanishThresholds() {\r\n    return {\r\n      actual: this.badVanishCasts,\r\n      isGreaterThan: {\r\n        minor: 0,\r\n        average: 0,\r\n        major: 0,\r\n      },\r\n      style: ThresholdStyle.NUMBER,\r\n    };\r\n  }\r\n\r\n  onRefreshDebuff(event: RefreshDebuffEvent) {\r\n    this.latestTs = event.timestamp;\r\n  }\r\n\r\n  handleVanish(event: CastEvent) {\r\n    const entities = this.enemies.getEntities();\r\n    const hasDebuff = Object.values(entities)\r\n      .filter(enemy => enemy.hasBuff(SPELLS.FIND_WEAKNESS.id))\r\n      .map(enemy => enemy.getBuff(SPELLS.FIND_WEAKNESS.id)?.timestamp || 0);\r\n\r\n    //For now does not support target switching, just makes sure that enough time has passed since the last application\r\n    if (Math.max(...hasDebuff, this.latestTs) > event.timestamp - 8000) {\r\n      this.badVanishCasts += 1;\r\n      event.meta = event.meta || {};\r\n      event.meta.isInefficientCast = true;\r\n      event.meta.inefficientCastReason = `Use Vanish only when Find Weakness is not up or is about to run out.`;\r\n    }\r\n  }\r\n\r\n  suggestions(when: When) {\r\n    when(this.vanishThresholds)\r\n      .addSuggestion((suggest, actual, recommended) => suggest(<>Use <SpellLink id={SPELLS.VANISH.id} /> only when you do not have <SpellLink id={SPELLS.FIND_WEAKNESS.id} /> applied to your target </>)\r\n        .icon(SPELLS.VANISH.icon)\r\n        .actual(i18n._(t('rogue.subtlety.suggestions.findWeakness.alreadyApplied')`You used Vanish ${this.badVanishCasts} times when Find Weakness was already applied`))\r\n        .recommended(`${recommended} is recommended`));\r\n  }\r\n\r\n  statistic() {\r\n    const uptime = this.enemies.getBuffUptime(SPELLS.FIND_WEAKNESS.id) / this.owner.fightDuration;\r\n    return (\r\n      <Statistic\r\n        size=\"flexible\"\r\n        category={STATISTIC_CATEGORY.GENERAL}\r\n      >\r\n        <BoringValueText label={<><SpellIcon id={SPELLS.FIND_WEAKNESS.id} /> Find Weakness Uptime</>}>\r\n          {formatPercentage(uptime)} %\r\n        </BoringValueText>\r\n      </Statistic>\r\n    );\r\n  }\r\n}\r\n\r\nexport default FindWeakness;\r\n","import React from 'react';\r\nimport Analyzer, { Options, SELECTED_PLAYER } from 'parser/core/Analyzer';\r\nimport SPELLS from 'common/SPELLS';\r\nimport Events, { DamageEvent } from 'parser/core/Events';\r\nimport Statistic from 'interface/statistics/Statistic';\r\nimport STATISTIC_CATEGORY from 'interface/others/STATISTIC_CATEGORY';\r\nimport ItemDamageDone from 'interface/ItemDamageDone';\r\nimport BoringSpellValueText from 'interface/statistics/components/BoringSpellValueText';\r\n\r\nclass BlackPowder extends Analyzer {\r\n  damage: number = 0;\r\n\r\n  constructor(options: Options) {\r\n    super(options);\r\n    this.addEventListener(Events.damage.by(SELECTED_PLAYER).spell(SPELLS.BLACK_POWDER), this.onDamage);\r\n  }\r\n\r\n  onDamage(event: DamageEvent) {\r\n    this.damage += event.amount + (event.absorbed || 0);\r\n  }\r\n\r\n  statistic() {\r\n    return (\r\n      <Statistic\r\n        size=\"flexible\"\r\n        category={STATISTIC_CATEGORY.GENERAL}\r\n      >\r\n        <BoringSpellValueText spell={SPELLS.BLACK_POWDER}>\r\n          <ItemDamageDone amount={this.damage} />\r\n        </BoringSpellValueText>\r\n      </Statistic>\r\n    );\r\n  }\r\n}\r\n\r\nexport default BlackPowder;\r\n","import React from 'react';\r\nimport Analyzer, { Options, SELECTED_PLAYER } from 'parser/core/Analyzer';\r\nimport Abilities from 'parser/core/modules/Abilities';\r\nimport SPELLS from 'common/SPELLS';\r\nimport Events, { DamageEvent } from 'parser/core/Events';\r\nimport { formatNumber } from 'common/format';\r\nimport Statistic from 'interface/statistics/Statistic';\r\nimport STATISTIC_CATEGORY from 'interface/others/STATISTIC_CATEGORY';\r\nimport ItemDamageDone from 'interface/ItemDamageDone';\r\nimport BoringSpellValueText from 'interface/statistics/components/BoringSpellValueText';\r\n\r\nclass AkaarisSoulFragment extends Analyzer {\r\n  static dependencies = {\r\n    abilities: Abilities,\r\n  };\r\n\r\n  damage: number = 0;\r\n  protected abilities!: Abilities;\r\n\r\n  constructor(options: Options) {\r\n    super(options);\r\n    this.active = this.selectedCombatant.hasLegendaryByBonusID(SPELLS.AKAARIS_SOUL_FRAGMENT.bonusID);\r\n    this.addEventListener(Events.damage.by(SELECTED_PLAYER).spell(SPELLS.AKAARIS_SOUL_FRAGMENT_SHADOWSTRIKE), this.onDamage);\r\n  }\r\n\r\n  onDamage(event: DamageEvent) {\r\n    this.damage += event.amount + (event.absorbed || 0);\r\n  }\r\n\r\n  statistic() {\r\n    return (\r\n      <Statistic\r\n        size=\"flexible\"\r\n        category={STATISTIC_CATEGORY.ITEMS}\r\n        tooltip={(\r\n          <>\r\n            Akaari's Soul Fragment contributed {formatNumber(this.damage)} total damage done with a secondary Shadowstrike.\r\n          </>\r\n        )}\r\n      >\r\n        <BoringSpellValueText spell={SPELLS.AKAARIS_SOUL_FRAGMENT}>\r\n          <>\r\n            <ItemDamageDone amount={this.damage} />\r\n          </>\r\n        </BoringSpellValueText>\r\n      </Statistic>\r\n    );\r\n  }\r\n}\r\n\r\nexport default AkaarisSoulFragment;\r\n","import React from 'react';\r\nimport Analyzer, { Options, SELECTED_PLAYER } from 'parser/core/Analyzer';\r\nimport Abilities from 'parser/core/modules/Abilities';\r\nimport SPELLS from 'common/SPELLS';\r\nimport Events, { EnergizeEvent } from 'parser/core/Events';\r\nimport Statistic from 'interface/statistics/Statistic';\r\nimport STATISTIC_CATEGORY from 'interface/others/STATISTIC_CATEGORY';\r\nimport BoringSpellValueText from 'interface/statistics/components/BoringSpellValueText';\r\nimport RESOURCE_TYPES from 'game/RESOURCE_TYPES';\r\nimport ResourceIcon from 'common/ResourceIcon';\r\n\r\nclass TheRotten extends Analyzer {\r\n  static dependencies = {\r\n    abilities: Abilities,\r\n  };\r\n\r\n  cpGained: number = 0;\r\n  cpWasted: number = 0;\r\n  protected abilities!: Abilities;\r\n\r\n  constructor(options: Options) {\r\n    super(options);\r\n    this.active = this.selectedCombatant.hasLegendaryByBonusID(SPELLS.THE_ROTTEN.bonusID);\r\n    this.addEventListener(Events.energize.by(SELECTED_PLAYER).spell([SPELLS.SHADOWSTRIKE, SPELLS.BACKSTAB, SPELLS.GLOOMBLADE_TALENT]), this.onDamage);\r\n  }\r\n\r\n  onDamage(event: EnergizeEvent) {\r\n    if (this.selectedCombatant.hasBuff(SPELLS.SYMBOLS_OF_DEATH.id)) {\r\n      this.cpGained += event.resourceChange;\r\n      this.cpWasted += event.waste;\r\n    }\r\n  }\r\n\r\n  statistic() {\r\n    return (\r\n      <Statistic\r\n        category={STATISTIC_CATEGORY.ITEMS}\r\n        tooltip={\r\n          <>\r\n            The Rotten helped you gain {this.cpGained + this.cpWasted} extra Combo Points with {this.cpWasted} Combo Points being wasted.\r\n          </>\r\n        }\r\n      >\r\n        <BoringSpellValueText spell={SPELLS.THE_ROTTEN}>\r\n          <ResourceIcon id={RESOURCE_TYPES.COMBO_POINTS.id} noLink />\r\n          {this.cpGained}/{this.cpWasted + this.cpGained}\r\n          <small> extra Combo Points gained.</small>\r\n        </BoringSpellValueText>\r\n      </Statistic>\r\n    );\r\n  }\r\n}\r\n\r\nexport default TheRotten;\r\n","import React from 'react';\r\nimport Analyzer, { Options } from 'parser/core/Analyzer';\r\nimport Abilities from 'parser/core/modules/Abilities';\r\nimport SPELLS from 'common/SPELLS';\r\nimport Statistic from 'interface/statistics/Statistic';\r\nimport { formatPercentage } from 'common/format';\r\nimport SpellLink from 'common/SpellLink';\r\n\r\nclass DeeperDaggers extends Analyzer {\r\n  static dependencies = {\r\n    abilities: Abilities,\r\n  };\r\n\r\n  constructor(options: Options) {\r\n    super(options);\r\n    this.active = this.selectedCombatant.hasConduitBySpellID(SPELLS.DEEPER_DAGGERS.id);\r\n  }\r\n\r\n  get percentUptime() {\r\n    return (\r\n      this.selectedCombatant.getBuffUptime(SPELLS.DEEPER_DAGGERS_BUFF.id) / this.owner.fightDuration\r\n    );\r\n  }\r\n\r\n  statistic() {\r\n    return (\r\n      <Statistic size=\"flexible\">\r\n        <div className=\"pad\">\r\n          <label><SpellLink id={SPELLS.DEEPER_DAGGERS.id} /> Uptime</label>\r\n          <div className=\"value\">{formatPercentage(this.percentUptime)}%</div>\r\n        </div>\r\n      </Statistic>\r\n    );\r\n  }\r\n}\r\n\r\nexport default DeeperDaggers;","import CoreCombatLogParser from 'parser/core/CombatLogParser';\r\n\r\nimport ArcaneTorrent from 'parser/shared/modules/racials/bloodelf/ArcaneTorrent';\r\n\r\nimport Abilities from './modules/Abilities';\r\nimport AlwaysBeCasting from './modules/features/AlwaysBeCasting';\r\nimport Checklist from './modules/features/checklist/Module';\r\nimport SpellUsable from '../shared/SpellUsable';\r\n\r\n//Normalizers\r\nimport ShurikenStormNormalizer from './normalizers/ShurikenStormNormalizer';\r\n\r\nimport ComboPointDetails from '../shared/resources/ComboPointDetails';\r\nimport ComboPointTracker from '../shared/resources/ComboPointTracker';\r\nimport EnergyDetails from '../shared/resources/EnergyDetails';\r\nimport EnergyTracker from '../shared/resources/EnergyTracker';\r\nimport StealthDamageTracker from '../shared/casttracker/StealthDamageTracker';\r\nimport EnergyCapTracker from '../shared/resources/EnergyCapTracker';\r\nimport SpellEnergyCost from '../shared/resources/SpellEnergyCost';\r\n\r\nimport CastsInShadowDance from './modules/core/CastsInShadowDance';\r\nimport CastsInStealth from './modules/core/CastsInStealth';\r\nimport ShadowBladesUptime from './modules/features/ShadowBladesUptime';\r\nimport SymbolsOfDeathUptime from './modules/features/SymbolsOfDeathUptime';\r\nimport DeepeningShadows from './modules/core/DeepeningShadows';\r\nimport ComboPoints from './modules/core/ComboPoints';\r\nimport Energy from './modules/core/Energy';\r\nimport SymbolsDamageTracker from './modules/core/SymbolsDamageTracker';\r\nimport DanceDamageTracker from './modules/core/DanceDamageTracker';\r\nimport DarkShadowContribution from './modules/talents/DarkShadow/DarkShadowContribution';\r\nimport FindWeakness from './modules/spells/FindWeakness';\r\nimport BlackPowder from './modules/core/BlackPowder';\r\n\r\nimport SerratedBoneSpike from '../shared/shadowlands/covenants/necrolord/SerratedBoneSpike';\r\nimport EchoingReprimand from '../shared/shadowlands/covenants/kyrian/EchoingReprimand';\r\nimport Sepsis from '../shared/shadowlands/covenants/nightfae/Sepsis';\r\nimport Flagellation from '../shared/shadowlands/covenants/venthyr/Flagellation';\r\n\r\nimport AkaarisSoulFragment from './modules/spells/shadowlands/legendaries/AkaarisSoulFragment';\r\nimport TheRotten from './modules/spells/shadowlands/legendaries/TheRotten';\r\nimport DeeperDaggers from '../shared/shadowlands/conduits/DeeperDaggers';\r\nimport EssenceOfBloodfang from '../shared/shadowlands/legendaries/EssenceOfBloodfang';\r\nimport InvigoratingShadowdust from '../shared/shadowlands/legendaries/InvigoratingShadowdust';\r\n\r\nclass CombatLogParser extends CoreCombatLogParser {\r\n  static specModules = {\r\n    //Core\r\n    abilities: Abilities,\r\n    checklist: Checklist,\r\n    alwaysBeCasting: AlwaysBeCasting,\r\n    spellUsable: SpellUsable,\r\n\r\n    //Normalizers\r\n    shurikenStormNormalizer: ShurikenStormNormalizer,\r\n\r\n    //Resource\r\n    comboPointTracker: ComboPointTracker,\r\n    comboPointDetails: ComboPointDetails,\r\n    comboPoints: ComboPoints,\r\n    energyTracker: EnergyTracker,\r\n    energyCapTracker: EnergyCapTracker,\r\n    energyDetails: EnergyDetails,\r\n    energy: Energy,\r\n    spellEnergyCost: SpellEnergyCost,\r\n\r\n    //Trackers\r\n    symbolsDamageTracker: SymbolsDamageTracker,\r\n    danceDamageTracker: DanceDamageTracker,\r\n    stealthDamageTracker: StealthDamageTracker,\r\n    blackPowder: BlackPowder,\r\n\r\n    //Core\r\n    danceCooldownReduction: DeepeningShadows,\r\n    findWeakness: FindWeakness,\r\n\r\n    //Casts\r\n    symbolsOfDeathUptime: SymbolsOfDeathUptime,\r\n    shadowBladesUptime: ShadowBladesUptime,\r\n    castsInShadowDance: CastsInShadowDance,\r\n    castsInStealth: CastsInStealth,\r\n\r\n    //Talents\r\n    darkShadowContribution: DarkShadowContribution,\r\n\r\n    // Covenants\r\n    serratedBoneSpike: SerratedBoneSpike,\r\n    echoingReprimand: EchoingReprimand,\r\n    flagellation: Flagellation,\r\n    sepsis: Sepsis,\r\n\r\n    // Legendaries\r\n    akaarisSoulFragment: AkaarisSoulFragment,\r\n    theRotten: TheRotten,\r\n    essenceOfBloodfang: EssenceOfBloodfang,\r\n    invigoratingShadowdust: InvigoratingShadowdust,\r\n\r\n    // Conduits\r\n    deeperDaggers: DeeperDaggers,\r\n\r\n    // Racials\r\n    arcaneTorrent: [ArcaneTorrent, { gcd: 1000 }] as const,\r\n  };\r\n}\r\n\r\nexport default CombatLogParser;\r\n","/**\r\n * A simple component that shows a value in the most plain way possible.\r\n * Use this only as the very last resort.\r\n */\r\nimport React from 'react';\r\n\r\ntype Props = {\r\n  label: React.ReactNode;\r\n  children: React.ReactNode;\r\n  className?: string;\r\n}\r\n\r\nconst BoringValue = ({ label, children, className }: Props) => (\r\n  <div className={`pad boring-text ${className || ''}`}>\r\n    <label>\r\n      {label}\r\n    </label>\r\n    <div className=\"value\">\r\n      {children}\r\n    </div>\r\n  </div>\r\n);\r\n\r\nexport default BoringValue;\r\n","export default function calculateMedian(values) {\r\n  const arr = [...values];\r\n  arr.sort((a, b) => a - b);\r\n\r\n  const half = Math.floor(arr.length / 2);\r\n\r\n  if (arr.length % 2) {\r\n    return arr[half];\r\n  } else {\r\n    return (arr[half - 1] + arr[half]) / 2.0;\r\n  }\r\n}\r\n","export default function average(values) {\r\n  return values.reduce((c, p) => c + p, 0) / values.length;\r\n}\r\n","export default function harmonic(values) {\r\n  return values.length / values.reduce((cum, val) => cum + 1/val, 0);\r\n}\r\n","import React, {useCallback, useState} from 'react';\r\n\r\nimport DropdownIcon from 'interface/icons/Dropdown';\r\nimport InformationIcon from 'interface/icons/Information';\r\nimport { ControlledExpandable } from 'interface/common/Expandable';\r\nimport colorForPerformance from 'common/colorForPerformance';\r\n\r\nimport calculateMedian from './helpers/calculateMedian';\r\nimport average from './helpers/average';\r\nimport harmonic from './helpers/harmonic';\r\n\r\nexport const RuleContext = React.createContext((value: number) => {/**/});\r\n\r\n\r\nexport enum PERFORMANCE_METHOD {\r\n  DEFAULT = 'DEFAULT',\r\n  MEDIAN = 'MEDIAN',\r\n  AVERAGE = 'AVERAGE',\r\n  LOWEST = 'LOWEST',\r\n  FIRST = 'FIRST',\r\n  HARMONIC = 'HARMONIC',\r\n};\r\n\r\ninterface Props {\r\n  name: React.ReactNode;\r\n  children: React.ReactNode;\r\n  description?: React.ReactNode;\r\n  performanceMethod?: PERFORMANCE_METHOD;\r\n}\r\n\r\ninterface State {\r\n  requirementPerformances: number[],\r\n  performance: number;\r\n  passed: boolean;\r\n  expanded: boolean;\r\n}\r\n\r\nconst Rule = (props: Props) => {\r\n\r\n  const [state, setState] = useState<State>({requirementPerformances: [], performance: 1, passed: true, expanded: false});\r\n\r\n\r\n  const calculateRulePerformance = useCallback((values: number[], style = PERFORMANCE_METHOD.DEFAULT) => {\r\n    // Lowest would generally be too punishing for small mistakes, if you want to have a single value tank the rule consider making it its own rule.\r\n    // Average would mark things as OK when one thing was OK and 3 things were \"average\", I think this is wrong and it should mark the rule as average. Median achieves this.\r\n    // Actual Median could mark a rule as 100% ok when there are still some things being neglected, so instead I opted for the best of both worlds and using the lowest of the median or average by default.\r\n\r\n    switch (style) {\r\n      case PERFORMANCE_METHOD.DEFAULT:\r\n        return Math.min(calculateMedian(values), average(values));\r\n      case PERFORMANCE_METHOD.MEDIAN:\r\n        return calculateMedian(values);\r\n      case PERFORMANCE_METHOD.AVERAGE:\r\n        return average(values);\r\n      case PERFORMANCE_METHOD.LOWEST:\r\n        return Math.min(...values);\r\n      case PERFORMANCE_METHOD.FIRST:\r\n        return values[0];\r\n      case PERFORMANCE_METHOD.HARMONIC:\r\n        return harmonic(values);\r\n      default:\r\n        throw new Error(`Unknown style: ${style}`);\r\n    }\r\n  }, [])\r\n\r\n \r\n\r\n  const checkEmptyRule = (child: React.ReactNode) => {\r\n    if (React.isValidElement(child) && child?.props) {\r\n      return true;\r\n    } else {\r\n      return false;\r\n    }\r\n  }\r\n\r\n  const setRequirementPerformance = (p: number) => {\r\n    // We don't have to worry about adding the same Requirement's performance multiple times here because it's only called in the Requirement's constructor, which is only called once.\r\n    setState((prevState: State) => {\r\n      const requirementPerformances: State['requirementPerformances'] = [...prevState.requirementPerformances, p];\r\n      const performance = requirementPerformances.length > 0 ? calculateRulePerformance(requirementPerformances, props.performanceMethod) : 1\r\n      const passed = performance > 0.666;\r\n      const expanded = !passed;\r\n      return {requirementPerformances, performance: performance, passed, expanded}\r\n    })\r\n  }\r\n\r\n  const { name, children: requirements, description } = props;\r\n\r\n  if (!requirements || (Array.isArray(requirements) && !requirements.some(checkEmptyRule))) {\r\n    return null;\r\n  }\r\n\r\n  const inverseExpanded = () => {\r\n    setState(prevState => ({...prevState, expanded: !prevState.expanded}))\r\n  }\r\n\r\n  return (\r\n    <RuleContext.Provider value={setRequirementPerformance}>\r\n      <ControlledExpandable\r\n        element=\"li\"\r\n        className={state.passed ? 'passed' : 'failed'}\r\n        inverseExpanded={inverseExpanded}\r\n        expanded={state.expanded}\r\n        header={(\r\n          <div className=\"flex wrapable\">\r\n            <div className=\"flex-main name\">\r\n              {name}\r\n            </div>\r\n            <div className=\"flex-sub perf\">\r\n              <div className=\"perf-container\">\r\n                <div\r\n                  className=\"perf-bar\"\r\n                  style={{\r\n                    width: `${state.performance * 100}%`,\r\n                    backgroundColor: colorForPerformance(state.performance),\r\n                  }}\r\n                />\r\n              </div>\r\n            </div>\r\n            <div className=\"flex-sub chevron\">\r\n              <div>\r\n                <DropdownIcon />\r\n              </div>\r\n            </div>\r\n          </div>\r\n        )}\r\n      >\r\n        {description && (\r\n          <div className=\"row text-muted description\">\r\n            <InformationIcon />\r\n            <div className=\"col-md-12\">\r\n              {description}\r\n            </div>\r\n          </div>\r\n        )}\r\n        <div className=\"row\">\r\n          {requirements}\r\n        </div>\r\n      </ControlledExpandable>\r\n    </RuleContext.Provider>\r\n  );\r\n}\r\n\r\nexport default Rule;\r\n","import React from 'react';\r\n\r\nimport InformationIcon from 'interface/icons/Information';\r\nimport { formatNumber, formatPercentage, formatThousands } from 'common/format';\r\nimport Tooltip, { TooltipElement } from 'common/Tooltip';\r\nimport colorForPerformance from 'common/colorForPerformance';\r\nimport { BoolThreshold, NumberThreshold, Threshold, ThresholdStyle } from 'parser/core/ParseResults';\r\nimport { Trans } from '@lingui/macro';\r\n\r\nimport performanceForThresholds from './helpers/performanceForThresholds';\r\nimport { RuleContext } from './Rule';\r\n\r\n\r\nexport type RequirementThresholds = NumberThreshold | BoolThreshold;\r\n\r\ninterface Props {\r\n  name: React.ReactNode,\r\n  thresholds: RequirementThresholds,\r\n  tooltip?: React.ReactNode,\r\n  valueTooltip?: React.ReactNode,\r\n  setPerformance: (performance: number) => void,\r\n  prefix?: React.ReactNode,\r\n  suffix?: React.ReactNode,\r\n}\r\nclass Requirement extends React.PureComponent<Props> {\r\n\r\n  constructor(props: Props) {\r\n    super(props);\r\n    props.setPerformance(this.performance);\r\n  }\r\n\r\n  get performance() {\r\n    return performanceForThresholds(this.props.thresholds);\r\n  }\r\n\r\n  formatThresholdsActual(thresholds: Threshold<any>) {\r\n    switch (thresholds.style) {\r\n      case ThresholdStyle.PERCENTAGE:\r\n        return `${formatPercentage(thresholds.actual)}%`;\r\n      case ThresholdStyle.NUMBER:\r\n        return `${formatNumber(thresholds.actual)}`;\r\n      case ThresholdStyle.THOUSANDS:\r\n        return `${formatThousands(thresholds.actual)}`;\r\n      case ThresholdStyle.DECIMAL:\r\n        return `${thresholds.actual.toFixed(2)}`;\r\n      case ThresholdStyle.BOOLEAN:\r\n        return thresholds.actual ? <Trans id=\"common.yes\">Yes</Trans> : <Trans id=\"common.no\">No</Trans>;\r\n      case ThresholdStyle.SECONDS:\r\n        return `${thresholds.actual.toFixed(2)}s`;\r\n      default:\r\n        throw new Error(`Unknown style: ${thresholds.style}`);\r\n    }\r\n  }\r\n\r\n  render() {\r\n    const { name, thresholds, tooltip, valueTooltip, prefix, suffix } = this.props;\r\n\r\n    const performance = this.performance;\r\n    let max = undefined;\r\n    const thresholdsN = thresholds as NumberThreshold;\r\n    if(thresholdsN.max !== undefined) {\r\n      max = `/ ${thresholdsN.max}`;\r\n    }\r\n    const actual = (\r\n      <>\r\n        {prefix} {this.formatThresholdsActual(thresholds)} {max} {suffix}\r\n      </>\r\n    );\r\n\r\n    return (\r\n      <div className=\"col-md-6\">\r\n        <div className=\"flex\">\r\n          <div className=\"flex-main\">\r\n            {name}\r\n          </div>\r\n          {tooltip && (\r\n            <div\r\n              className=\"flex-sub\"\r\n              style={{ marginLeft: 10 }}\r\n            >\r\n              <Tooltip content={tooltip}>\r\n                <div>\r\n                  <InformationIcon />\r\n                </div>\r\n              </Tooltip>\r\n            </div>\r\n          )}\r\n          <div className=\"flex-sub content-middle text-muted\" style={{ minWidth: 55, marginLeft: 5, marginRight: 10 }}>\r\n            <div className=\"text-right\" style={{ width: '100%' }}>\r\n              {valueTooltip ? <TooltipElement content={valueTooltip}>{actual}</TooltipElement> : actual}\r\n            </div>\r\n          </div>\r\n          <div className=\"flex-sub content-middle\" style={{ width: 50 }}>\r\n            <div className=\"performance-bar-container\">\r\n              <div\r\n                className=\"performance-bar small\"\r\n                style={{\r\n                  width: `${performance * 100}%`,\r\n                  transition: 'background-color 800ms',\r\n                  backgroundColor: colorForPerformance(performance),\r\n                }}\r\n              />\r\n            </div>\r\n          </div>\r\n        </div>\r\n      </div>\r\n    );\r\n  }\r\n}\r\n\r\nexport default (props: Omit<Props, 'setPerformance'>) => (\r\n  <RuleContext.Consumer>\r\n    {(setPerformance: (performance: number) => void) => (\r\n      <Requirement\r\n        {...props}\r\n        setPerformance={setPerformance}\r\n      />\r\n    )}\r\n  </RuleContext.Consumer>\r\n);\r\n","/**\r\n *   0 - 33% major This is different from the *minor* threshold which is at 100% instead of 66%. The reason for this is that the minor threshold being at 75% and then 75%-100% being minor - max is that this would suggest going for max is best while this is not always the case. Something like Crusader Strike (with the Crusader's Might talent) has a recommended cast efficiency of 35% *because* you should only cast it enough to benefit you, more than that would be good but not 100% cast efficiency as then you're losing healing.\r\n * 33% - 66% average\r\n * 66% - 99% minor\r\n * 100% good (no issue)\r\n * @param actual\r\n * @param minor\r\n * @param average\r\n * @param major\r\n * @returns {number}\r\n */\r\nfunction performanceForLessThanThresholds(actual, { minor, average, major }) {\r\n  if (actual < major) {\r\n    // major issue\r\n    return 0.333 * actual / major;\r\n  } else if (actual < average) {\r\n    // average issue (between major and average issue)\r\n    return 0.333 + 0.333 * ((actual - major) / (average - major));\r\n  } else if (actual < minor) {\r\n    // minor issue (between average and minor issue)\r\n    return 0.666 + 0.333 * ((actual - average) / (minor - average));\r\n  } else {\r\n    // no issue\r\n    return 1;\r\n  }\r\n}\r\nfunction performanceForGreaterThanThresholds(actual, { minor, average, major }) {\r\n  if (actual > major) {\r\n    // major issue\r\n    return 0.333 * major / actual;\r\n  } else if (actual > average) {\r\n    // average issue (between major and average issue)\r\n    return 0.666 - 0.333 * ((actual - average) / (major - average));\r\n  } else if (actual > minor) {\r\n    // minor issue (between average and minor issue)\r\n    return 1 - 0.333 * ((actual - minor) / (average - minor));\r\n  } else {\r\n    // no issue\r\n    return 1;\r\n  }\r\n}\r\nexport default function performanceForThresholds(thresholds) {\r\n  if (thresholds.isGreaterThan) {\r\n    if (typeof thresholds.isGreaterThan === 'object') {\r\n      return performanceForGreaterThanThresholds(thresholds.actual, thresholds.isGreaterThan);\r\n    } else {\r\n      return thresholds.isGreaterThan / thresholds.actual;\r\n    }\r\n  } else if (thresholds.isLessThan) {\r\n    if (typeof thresholds.isLessThan === 'object') {\r\n      return performanceForLessThanThresholds(thresholds.actual, thresholds.isLessThan);\r\n    } else {\r\n      return thresholds.actual / thresholds.isLessThan;\r\n    }\r\n  } else if (thresholds.isEqual !== undefined) {\r\n    return thresholds.actual !== thresholds.isEqual ? 1 : 0;\r\n  } else {\r\n    throw new Error('Failed to recognize threshold type');\r\n  }\r\n}\r\n","import React from 'react';\r\nimport PropTypes from 'prop-types';\r\nimport { Trans } from '@lingui/macro';\r\n\r\nimport './Checklist.scss';\r\n\r\nconst Checklist = props => {\r\n  const { children } = props;\r\n\r\n  return (\r\n    <ul className=\"checklist\">\r\n      {!children && (\r\n        <li>\r\n          <div className=\"alert alert-danger\">\r\n            <Trans id=\"shared.checklist.missingChecklist\">The checklist is not yet available for this spec. See <a href=\"https://github.com/WoWAnalyzer/WoWAnalyzer\">GitHub</a> or join us on <a href=\"https://discord.gg/AxphPxU\">Discord</a> if you're interested in contributing this.</Trans>\r\n          </div>\r\n        </li>\r\n      )}\r\n\r\n      {children}\r\n    </ul>\r\n  );\r\n};\r\n\r\nChecklist.propTypes = {\r\n  children: PropTypes.node,\r\n};\r\n\r\nexport default Checklist;\r\n","import React from 'react';\r\nimport PropTypes from 'prop-types';\r\nimport { Trans } from '@lingui/macro';\r\n\r\nimport Rule from './Rule';\r\nimport Requirement from './Requirement';\r\n\r\nclass PreparationRule extends React.PureComponent {\r\n\r\n  static propTypes = {\r\n    children: PropTypes.node,\r\n    thresholds: PropTypes.object.isRequired,\r\n  };\r\n\r\n  renderPotionRequirements() {\r\n    const { thresholds } = this.props;\r\n\r\n    return (\r\n      <>\r\n        <Requirement\r\n          name={<Trans id=\"shared.modules.features.checklist.combatPotionsUsed\">Combat potions used</Trans>}\r\n          thresholds={thresholds.potionsUsed}\r\n        />\r\n        <Requirement\r\n          name={<Trans id=\"shared.modules.features.checklist.highQualityCombatPotionsUsed\">High quality combat potions used</Trans>}\r\n          thresholds={thresholds.bestPotionUsed}\r\n        />\r\n      </>\r\n    );\r\n  }\r\n  renderEnchantRequirements() {\r\n    const { thresholds } = this.props;\r\n\r\n    return (\r\n      <>\r\n        <Requirement\r\n          name={<Trans id=\"shared.modules.features.checklist.enchanted\">All items enchanted</Trans>}\r\n          thresholds={thresholds.itemsEnchanted}\r\n        />\r\n        <Requirement\r\n          name={<Trans id=\"shared.modules.features.checklist.enchantedHigh\">Using high quality enchants</Trans>}\r\n          thresholds={thresholds.itemsBestEnchanted}\r\n        />\r\n      </>\r\n    );\r\n  }\r\n  renderWeaponEnhancementRequirements() {\r\n    const { thresholds } = this.props;\r\n\r\n    return (\r\n      <>\r\n        <Requirement\r\n          name={<Trans>All weapons enhanced (oils/stones)</Trans>}\r\n          thresholds={thresholds.weaponsEnhanced}\r\n        />\r\n        <Requirement\r\n          name={<Trans>Using high quality weapon enhancements</Trans>}\r\n          thresholds={thresholds.bestWeaponEnhancements}\r\n        />\r\n      </>\r\n    );\r\n  }\r\n  renderFlaskRequirements() {\r\n    const { thresholds } = this.props;\r\n    return (\r\n      <>\r\n        <Requirement\r\n          name={<Trans id=\"shared.modules.features.checklist.flaskHigh\">High quality flask used</Trans>}\r\n          thresholds={thresholds.higherFlaskPresent}\r\n        />\r\n        <Requirement\r\n          name={<Trans id=\"shared.modules.features.checklist.flask\">Flask used</Trans>}\r\n          thresholds={thresholds.flaskPresent}\r\n        />\r\n      </>\r\n    );\r\n  }\r\n  renderFoodRequirements() {\r\n    const { thresholds } = this.props;\r\n    return (\r\n      <>\r\n        <Requirement\r\n          name={<Trans id=\"shared.modules.features.checklist.foodHigh\">High quality food used</Trans>}\r\n          thresholds={thresholds.higherFoodPresent}\r\n        />\r\n        <Requirement\r\n          name={<Trans id=\"shared.modules.features.checklist.food\">Food used</Trans>}\r\n          thresholds={thresholds.foodPresent}\r\n        />\r\n      </>\r\n    );\r\n  }\r\n\r\n  render() {\r\n    const { children } = this.props;\r\n\r\n    return (\r\n      <Rule\r\n        name={<Trans id=\"shared.modules.features.checklist.wellPrepared\">Be well prepared</Trans>}\r\n        description={<Trans id=\"shared.modules.features.checklist.wellPreparedDetails\">Being well prepared with food, flasks, potions and enchants is an easy way to improve your performance.</Trans>}\r\n      >\r\n        {this.renderEnchantRequirements()}\r\n        {this.renderWeaponEnhancementRequirements()}\r\n        {this.renderPotionRequirements()}\r\n        {this.renderFlaskRequirements()}\r\n        {this.renderFoodRequirements()}\r\n        {children}\r\n      </Rule>\r\n    );\r\n  }\r\n}\r\n\r\nexport default PreparationRule;\r\n","import React from 'react';\r\nimport PropTypes from 'prop-types';\r\n\r\nimport SpellLink from 'common/SpellLink';\r\nimport { captureException } from 'common/errorLogger';\r\n\r\nimport Requirement from './Requirement';\r\n\r\n/**\r\n * This is a common requirement for all checklists that uses settings for CastEfficiency to create a Requirement. It shows the spell and your efficiency as performance depending on the configured cast efficiency efficiency thresholds.\r\n *\r\n * This requirement is automatically disabled if the ability's CastEfficiency suggestion is disabled (i.e. if the ability's castEfficiency: { suggestion } is unset or false), or the ability is disabled completely. If you set `onlyWithSuggestion` to `false` in the object when creating this requirement you can change this behavior to always show if the ability is enabled, regardless of the CastEfficiency suggestion property being set.\r\n */\r\nclass GenericCastEfficiencyRequirement extends React.PureComponent {\r\n  static propTypes = {\r\n    spell: PropTypes.number.isRequired,\r\n    name: PropTypes.node,\r\n    castEfficiency: PropTypes.shape({\r\n      efficiency: PropTypes.number.isRequired,\r\n      gotMaxCasts: PropTypes.bool.isRequired,\r\n      recommendedEfficiency: PropTypes.number.isRequired,\r\n      averageIssueEfficiency: PropTypes.number.isRequired,\r\n      majorIssueEfficiency: PropTypes.number.isRequired,\r\n      casts: PropTypes.any,\r\n      maxCasts: PropTypes.any,\r\n    }).isRequired,\r\n    isMaxCasts: PropTypes.bool,\r\n  };\r\n\r\n  get thresholds() {\r\n    if (!this.props.castEfficiency) {\r\n      captureException(new Error(`GenericCastEfficiencyRequirement requires that you pass the castEfficiency object yourself. Spell: ${this.props.spell}`));\r\n      return null;\r\n    }\r\n\r\n    if(this.props.isMaxCasts) {\r\n      const {\r\n        casts,\r\n        maxCasts,\r\n      } = this.props.castEfficiency;\r\n\r\n      return {\r\n        actual: casts,\r\n        max: maxCasts,\r\n        isLessThan: {\r\n          minor: maxCasts,\r\n          average: maxCasts - 1,\r\n          major: maxCasts - 2,\r\n        },\r\n        style: 'number',\r\n      };\r\n    } else {\r\n      const {\r\n        efficiency,\r\n        gotMaxCasts,\r\n        recommendedEfficiency: minor,\r\n        averageIssueEfficiency: average,\r\n        majorIssueEfficiency: major,\r\n      } = this.props.castEfficiency;\r\n\r\n      return {\r\n        actual: gotMaxCasts ? 1 : efficiency,\r\n        isLessThan: {\r\n          minor,\r\n          average,\r\n          major,\r\n        },\r\n        style: 'percentage',\r\n      };\r\n    }\r\n  }\r\n\r\n  render() {\r\n    const { spell, name, ...others } = this.props;\r\n\r\n    const thresholds = this.thresholds;\r\n    if (!thresholds) {\r\n      return null;\r\n    }\r\n\r\n    return (\r\n      <Requirement\r\n        name={name || <SpellLink id={spell} />}\r\n        thresholds={thresholds}\r\n        {...others}\r\n      />\r\n    );\r\n  }\r\n}\r\n\r\nexport default GenericCastEfficiencyRequirement;\r\n","export default function colorForPerformance(performance: number) {\r\n  if (performance >= 1) {\r\n    return '#4ec04e';\r\n  } else if (performance > 0.666) {\r\n    return '#a6c34c';\r\n  } else if (performance > 0.5) {\r\n    return '#ffc84a';\r\n  } else if (performance > 0.333) {\r\n    return '#df7102';\r\n  } else {\r\n    return '#ac1f39';\r\n  }\r\n}\r\n","import React from 'react';\r\n\r\n// https://thenounproject.com/search/?q=dropdown&i=1871189\r\n// Dropdown by zalhan from the Noun Project\r\nconst Icon = ({ ...other }) => (\r\n  <svg xmlns=\"http://www.w3.org/2000/svg\" viewBox=\"0 0 16 9\" className=\"icon\" {...other}>\r\n      <path d=\"M14.0059397,2.26485497e-14 C15.1072288,2.26485497e-14 15.3722573,0.627746582 14.5881847,1.41182411 L8.70999225,7.29005337 C8.317902,7.68214607 7.67653023,7.6764822 7.29009898,7.29005337 L1.41183294,1.41182411 C0.632099139,0.632095183 0.894513756,2.26485497e-14 1.99406028,2.26485497e-14 L14.0059397,2.26485497e-14 Z\" />\r\n  </svg>\r\n);\r\n\r\nexport default Icon;\r\n","import React, {useState} from 'react';\r\nimport AnimateHeight from 'react-animate-height';\r\n\r\nimport './Expandable.scss';\r\n\r\ninterface Props {\r\n  header: React.ReactNode;\r\n  children: React.ReactNode;\r\n  element: React.ElementType;\r\n  className?: string;\r\n  expanded?: boolean;\r\n  inverseExpanded: () => void;\r\n}\r\n\r\nexport const Expandable = (props: Omit<Props, 'expanded'|'inverseExpanded'>) => {\r\n  const [expanded, setExpanded] = useState<boolean>(false);\r\n  const handleToggle = () => {\r\n    setExpanded((prevExpanded: boolean) => !prevExpanded)\r\n  }\r\n\r\n  const { header, children, element: Element, className } = props;\r\n  \r\n  return (\r\n    <Element className={`expandable ${expanded ? 'expanded' : ''} ${className || ''}`}>\r\n      <div className=\"meta\" onClick={handleToggle}>\r\n        {header}\r\n      </div>\r\n      <AnimateHeight className=\"details\" height={expanded ? 'auto' : 0}>\r\n        {children}\r\n      </AnimateHeight>\r\n    </Element>\r\n  );\r\n}\r\n\r\nexport const ControlledExpandable = (props: Props) =>  {\r\n  const { header, children, element: Element, className } = props;\r\n\r\n  return (\r\n    <Element className={`expandable ${props.expanded ? 'expanded' : ''} ${className || ''}`}>\r\n      <div className=\"meta\" onClick={props.inverseExpanded}>\r\n        {header}\r\n      </div>\r\n      <AnimateHeight className=\"details\" height={props.expanded ? 'auto' : 0}>\r\n        {children}\r\n      </AnimateHeight>\r\n    </Element>\r\n  );\r\n}\r\n","import Spell from 'common/SPELLS/Spell';\r\nimport { CastEvent, DamageEvent, HealEvent } from 'parser/core/Events';\r\nimport DamageTracker from 'parser/shared/modules/AbilityTracker';\r\n\r\nclass FilteredDamageTracker extends DamageTracker {\r\n  castObservers: any[] = [];\r\n\r\n  onDamage(event: DamageEvent) {\r\n    if (!this.shouldProcessEvent(event)) {\r\n      return;\r\n    }\r\n    super.onDamage(event);\r\n  }\r\n\r\n  onHeal(event: HealEvent) {\r\n    if (!this.shouldProcessEvent(event)) {\r\n      return;\r\n    }\r\n    super.onHeal(event);\r\n  }\r\n\r\n  onCast(event: CastEvent) {\r\n    if (!this.shouldProcessEvent(event)) {\r\n      return;\r\n    }\r\n    this.broadcastCastEvent(event);\r\n    super.onCast(event);\r\n  }\r\n\r\n  shouldProcessEvent(event: any) {\r\n    return false;\r\n  }\r\n\r\n  subscribeToCastEvent(fn: any) {\r\n    this.castObservers.push(fn);\r\n  }\r\n\r\n  subscribeInefficientCast(spells: Spell[], messageFunction: any) {\r\n    this.subscribeToCastEvent((event: any) => {\r\n      const spell = spells.find(s => event.ability.guid === s.id);\r\n      if (spell) {\r\n        event.meta = event.meta || {};\r\n        event.meta.isInefficientCast = true;\r\n        event.meta.inefficientCastReason = messageFunction(spell);\r\n      }\r\n    });\r\n  }\r\n\r\n  broadcastCastEvent(event: CastEvent) {\r\n    this.castObservers.forEach((subscriber) => subscriber(event));\r\n  }\r\n}\r\n\r\nexport default FilteredDamageTracker;\r\n"],"sourceRoot":""}