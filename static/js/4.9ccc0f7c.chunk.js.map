{"version":3,"sources":["interface/statistics/components/Gauge.js","parser/shared/modules/AlwaysBeCastingHealing.js","parser/shared/modules/resources/mana/ManaUsageGraph.js","parser/shared/modules/resources/mana/ManaUsageChartComponent.js","parser/shared/modules/resources/mana/ManaUsageChart.js","parser/shared/modules/features/LowHealthHealing/Component.js","parser/shared/modules/features/LowHealthHealing/index.js","parser/shared/modules/resources/mana/ManaLevelChartComponent.js","parser/shared/modules/resources/mana/ManaLevelChart.js","interface/others/charts/ManaLevelGraph.js"],"names":["Gauge","value","className","style","textAlign","marginTop","id","render","paddingTop","paddingRight","fontSize","position","width","height","viewBox","fill","xmlns","d","stroke","strokeWidth","strokeLinecap","fillRule","clipRule","top","left","transform","margin","transformOrigin","formatPercentage","paddingLeft","AlwaysBeCastingHealing","healingTime","_lastHealingCastFinishedTimestamp","showStatistic","event","this","countsAsHealingAbility","duration","constructor","HEALING_ABILITIES_ON_GCD","includes","ability","guid","activeTimePercentage","healingTimePercentage","downtimePercentage","STATISTIC_ORDER","CORE","tooltip","drilldown","when","nonHealingTimeSuggestionThresholds","addSuggestion","suggest","actual","recommended","icon","i18n","_","downtimeSuggestionThresholds","owner","fightDuration","nonHealingTimePercentage","isGreaterThan","minor","average","major","CoreAlwaysBeCasting","icons","activeTime","downtime","COLORS","background","border","ManaUsageGraph","props","mana","healing","manaUsed","baseEncoding","x","field","type","axis","labelExpr","formatTime","grid","title","scale","zero","nice","y","spec","data","name","mark","line","encoding","color","scheme","legend","orient","combined","map","e","kind","disableHeight","BaseChart","React","Component","HealingDoneGraph","healingBySecond","interval","Object","keys","reduce","obj","second","index","Math","floor","add","regular","absorbed","overheal","start","end","offset","manaUpdates","healingPerFrame","groupHealingBySeconds","max","k","forEach","healingDone","current","effective","manaUsagePerFrame","0","manaLevelPerFrame","item","frame","timestamp","used","fightDurationSec","ceil","labels","i","push","undefined","lastKnown","values","marginBottom","PureComponent","ManaUsageChart","reportCode","report","code","actorId","playerId","fight","start_time","end_time","offset_time","Panel","explanation","ManaUsageChartComponent","manaValues","bySecond","Analyzer","dependencies","ManaValues","HealingDone","LowHealthHealing","state","maxPlayerHealthPercentage","minHealOfMaxHealthPercentage","fightStart","combatants","healEvents","total","count","totalBigHealing","bigHealCount","sliderProps","min","step","marks","0.1","0.2","0.3","0.4","0.5","0.6","0.7","0.8","0.9","1","padding","defaultValue","onChange","setState","colSpan","effectiveHealing","amount","hitPointsBeforeHeal","hitPoints","healthPercentage","maxHitPoints","combatant","getEntity","console","error","SPECS","specId","specClassName","replace","key","formatDuration","SpellLink","Icon","abilityIcon","alt","SpecIcon","formatNumber","Tooltip","content","opacity","round","url","pad","eventHistory","filter","EventType","Heal","byPlayer","byPlayerPet","Combatants","ManaLevelChartComponent","bossHealth","load","prevProps","fetchWcl","sourceclass","hostility","abilityid","then","json","initial","bossData","series","health","deaths","death","Boolean","targetIsFriendly","targetID","killingAbility","players","ManaLevelGraph","ManaLevelChart","colors","tickCount","layer","flatten","calculate","as","interpolate","bosses","defaultProps"],"mappings":"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","file":"static/js/4.9ccc0f7c.chunk.js","sourcesContent":["import React from 'react';\r\nimport PropTypes from 'prop-types';\r\n\r\nimport { formatPercentage } from 'common/format';\r\nimport { Trans } from '@lingui/macro';\r\n\r\nconst Gauge = ({ value }) => (\r\n  <div className=\"flex\" style={{ textAlign: 'center', marginTop: 12 }}>\r\n    <Trans id=\"interface.statistics.components.gauge.low\" render=\"div\" className=\"flex-main text-right text-muted\" style={{ paddingTop: 23, paddingRight: 8, fontSize: 12 }}>\r\n      Low\r\n    </Trans>\r\n    <div className=\"flex-sub\" style={{ position: 'relative' }}>\r\n      <svg width=\"98\" height=\"85\" viewBox=\"19 19 101 88\" fill=\"none\" xmlns=\"http://www.w3.org/2000/svg\" style={{ fill: 'none' }}>\r\n          <path d=\"M101.459 101.459C119.033 83.8858 119.033 55.3934 101.459 37.8198C83.8859 20.2462 55.3934 20.2462 37.8198 37.8198C20.2463 55.3934 20.2463 83.8858 37.8198 101.459\" stroke=\"#f8b700\" strokeWidth=\"8\" strokeLinecap=\"round\" />\r\n          <path fillRule=\"evenodd\" clipRule=\"evenodd\" d=\"M68.6396 28.6396H70.6396V32.6396H68.6396V28.6396Z\" fill=\"#f8b700\" />\r\n          <path fillRule=\"evenodd\" clipRule=\"evenodd\" d=\"M87.7656 32.8389L89.5485 33.7451L87.7368 37.3097L85.9539 36.4035L87.7656 32.8389Z\" fill=\"#f8b700\" />\r\n          <path fillRule=\"evenodd\" clipRule=\"evenodd\" d=\"M101.207 50.1829L100.077 48.5324L103.378 46.2732L104.508 47.9236L101.207 50.1829Z\" fill=\"#f8b700\" />\r\n          <path fillRule=\"evenodd\" clipRule=\"evenodd\" d=\"M106.622 67.3762L106.417 65.3868L110.398 64.9765L110.603 66.966L106.622 67.3762Z\" fill=\"#f8b700\" />\r\n          <path fillRule=\"evenodd\" clipRule=\"evenodd\" d=\"M103.658 84.4276L104.376 82.5609L108.11 83.9969L107.392 85.8635L103.658 84.4276Z\" fill=\"#f8b700\" />\r\n          <path fillRule=\"evenodd\" clipRule=\"evenodd\" d=\"M52.0547 32.5298L50.2627 33.4179L52.039 37.0019L53.831 36.1137L52.0547 32.5298Z\" fill=\"#f8b700\" />\r\n          <path fillRule=\"evenodd\" clipRule=\"evenodd\" d=\"M36.1157 45.9784L34.965 47.6142L38.2354 49.9147L39.3861 48.2789L36.1157 45.9784Z\" fill=\"#f8b700\" />\r\n          <path fillRule=\"evenodd\" clipRule=\"evenodd\" d=\"M28.8926 64.968L28.6883 66.9576L32.6626 67.3657L32.8669 65.3761L28.8926 64.968Z\" fill=\"#f8b700\" />\r\n          <path fillRule=\"evenodd\" clipRule=\"evenodd\" d=\"M31.3486 84.3921L32.0806 86.2533L35.8031 84.7895L35.0711 82.9282L31.3486 84.3921Z\" fill=\"#f8b700\" />\r\n      </svg>\r\n\r\n      <div\r\n        style={{\r\n          position: 'absolute',\r\n          top: 49,\r\n          left: '50%',\r\n          width: 32,\r\n          height: 32,\r\n          transform: 'translate(-50%, -50%)',\r\n          marginTop: -13,\r\n        }}\r\n      >\r\n        <svg\r\n          width=\"10\"\r\n          height=\"32\"\r\n          viewBox=\"0 0 10 32\"\r\n          fill=\"none\"\r\n          xmlns=\"http://www.w3.org/2000/svg\"\r\n          style={{\r\n            fill: 'none',\r\n            margin: 0,\r\n            transformOrigin: '5px 27px',\r\n            transform: `rotate(${-140 + 280 * value}deg)`,\r\n          }}\r\n        >\r\n          <path d=\"M9 27C9 29.2091 7.20914 31 5 31C2.79086 31 1 29.2091 1 27C1 24.7909 2.79086 23 5 23C7.20914 23 9 24.7909 9 27Z\" stroke=\"#f8b700\" strokeWidth=\"2\" />\r\n          <path fillRule=\"evenodd\" clipRule=\"evenodd\" d=\"M6 0L6 23H4L4 0L6 0Z\" fill=\"#f8b700\" />\r\n        </svg>\r\n      </div>\r\n\r\n      <div className=\"value\" style={{ marginTop: -18, fontSize: '1.25em' }}>\r\n        {formatPercentage(value, 0)}%\r\n      </div>\r\n    </div>\r\n    <Trans id=\"interface.statistics.components.gauge.high\" render=\"div\" className=\"flex-main text-left text-muted\" style={{ paddingTop: 23, paddingLeft: 8, fontSize: 12 }}>\r\n      High\r\n    </Trans>\r\n  </div>\r\n);\r\nGauge.propTypes = {\r\n  value: PropTypes.number.isRequired,\r\n};\r\n\r\nexport default Gauge;\r\n","import React from 'react';\r\n\r\nimport { formatPercentage } from 'common/format';\r\nimport CoreAlwaysBeCasting from 'parser/shared/modules/AlwaysBeCasting';\r\nimport { STATISTIC_ORDER } from 'interface/others/StatisticBox';\r\nimport Statistic from 'interface/statistics/Statistic';\r\nimport Gauge from 'interface/statistics/components/Gauge';\r\nimport { i18n } from '@lingui/core';\r\nimport { t, Trans } from '@lingui/macro';\r\n\r\nclass AlwaysBeCastingHealing extends CoreAlwaysBeCasting {\r\n  static HEALING_ABILITIES_ON_GCD = [\r\n    // Extend this class and override this property in your spec class to implement this module.\r\n  ];\r\n\r\n  healingTime = 0;\r\n  get healingTimePercentage() {\r\n    return this.healingTime / this.owner.fightDuration;\r\n  }\r\n  get nonHealingTimePercentage() {\r\n    return 1 - this.healingTimePercentage;\r\n  }\r\n\r\n  _lastHealingCastFinishedTimestamp = null;\r\n\r\n  onGCD(event) {\r\n    if (!super.onGCD(event)) {\r\n      return false;\r\n    }\r\n    if (this.countsAsHealingAbility(event)) {\r\n      this.healingTime += event.duration;\r\n    }\r\n    return true;\r\n  }\r\n  onEndChannel(event) {\r\n    if (!super.onEndChannel(event)) {\r\n      return false;\r\n    }\r\n    if (this.countsAsHealingAbility(event)) {\r\n      this.healingTime += event.duration;\r\n    }\r\n    return true;\r\n  }\r\n  countsAsHealingAbility(event) {\r\n    return this.constructor.HEALING_ABILITIES_ON_GCD.includes(event.ability.guid);\r\n  }\r\n\r\n  showStatistic = true;\r\n  static icons = {\r\n    healingTime: '/img/healing.png',\r\n    activeTime: '/img/sword.png',\r\n    downtime: '/img/afk.png',\r\n  };\r\n  statistic() {\r\n    if (!this.showStatistic) {\r\n      return null;\r\n    }\r\n\r\n    const activeTimePercentage = this.activeTimePercentage;\r\n    const healingTimePercentage = this.healingTimePercentage;\r\n    const downtimePercentage = this.downtimePercentage;\r\n\r\n    return (\r\n      <Statistic\r\n        position={STATISTIC_ORDER.CORE(10)}\r\n        tooltip={(\r\n          <Trans id=\"shared.alwaysBeCastingHealing.statistic.tooltip\">\r\n            This is the precise amount of time you were actively casting something or waiting for a Global Cooldown. The remaining time was downtime; you cast nothing and wasn't waiting for a global cooldown (i.e. \"AFK time\").<br /><br />\r\n\r\n            You were active for <strong>{formatPercentage(activeTimePercentage)}%</strong> of the fight. You spent <strong>{formatPercentage(healingTimePercentage)}%</strong> of your time casting supportive spells, <strong>{formatPercentage(activeTimePercentage - healingTimePercentage)}%</strong> of the time casting offensive spells and <strong>{formatPercentage(downtimePercentage)}%</strong> of the time doing nothing.<br /><br />\r\n\r\n            See the timeline for details.\r\n          </Trans>\r\n        )}\r\n        drilldown=\"timeline\"\r\n      >\r\n        <div className=\"pad\">\r\n          <Trans id=\"shared.alwaysBeCastingHealing.statistic\" render=\"label\">Active time</Trans>\r\n\r\n          <Gauge value={activeTimePercentage} />\r\n        </div>\r\n      </Statistic>\r\n    );\r\n  }\r\n\r\n  get nonHealingTimeSuggestionThresholds() {\r\n    return {\r\n      actual: this.nonHealingTimePercentage,\r\n      isGreaterThan: {\r\n        minor: 0.3,\r\n        average: 0.4,\r\n        major: 0.45,\r\n      },\r\n      style: 'percentage',\r\n    };\r\n  }\r\n  // Override these suggestion thresholds for healers: it's much less important to DPS so allow for considerable slack.\r\n  get downtimeSuggestionThresholds() {\r\n    return {\r\n      actual: this.downtimePercentage,\r\n      isGreaterThan: {\r\n        minor: 0.2,\r\n        average: 0.35,\r\n        major: 1,\r\n      },\r\n      style: 'percentage',\r\n    };\r\n  }\r\n  suggestions(when) {\r\n    when(this.nonHealingTimeSuggestionThresholds)\r\n      .addSuggestion((suggest, actual, recommended) => suggest('Your time spent healing can be improved. Try to reduce the amount of time you\\'re not healing, for example by reducing the delay between casting spells, moving during the GCD and if you have to move try to continue healing with instant spells.')\r\n          .icon('petbattle_health-down')\r\n          .actual(i18n._(t('shared.suggestions.alwaysBeCastingHealing.timeSpentHealing')`${1 - formatPercentage(actual)}% time spent healing`))\r\n          .recommended(`>${formatPercentage(1 - recommended)}% is recommended`));\r\n    when(this.downtimeSuggestionThresholds)\r\n      .addSuggestion((suggest, actual, recommended) => suggest('Your active time can be improved. Try to reduce your downtime, for example by reducing the delay between casting spells and when you\\'re not healing try to contribute some damage.')\r\n          .icon('spell_mage_altertime')\r\n          .actual(i18n._(t('shared.suggestions.alwaysBeCasting.activeTime')`${formatPercentage(1 - actual)}% active time`))\r\n          .recommended(`>${formatPercentage(1 - recommended)}% is recommended`));\r\n  }\r\n}\r\n\r\nexport default AlwaysBeCastingHealing;\r\n","import React from 'react';\r\nimport { AutoSizer } from 'react-virtualized';\r\nimport PropTypes from 'prop-types';\r\nimport BaseChart, { formatTime } from 'interface/others/BaseChart';\r\n\r\nconst COLORS = {\r\n  MANA: {\r\n    background: 'rgba(2, 109, 215, 0.25)',\r\n    border: 'rgba(2, 109, 215, 0.6)',\r\n  },\r\n  HEALING: {\r\n    background: 'rgba(2, 217, 110, 0.2)',\r\n    border: 'rgba(2, 217, 110, 0.6)',\r\n  },\r\n  MANA_USED: {\r\n    background: 'rgba(215, 2, 6, 0.4)',\r\n    border: 'rgba(215, 2, 6, 0.6)',\r\n  },\r\n};\r\n\r\nclass ManaUsageGraph extends React.Component {\r\n  static propTypes = {\r\n    mana: PropTypes.arrayOf(PropTypes.shape({\r\n      x: PropTypes.number.isRequired,\r\n      y: PropTypes.number.isRequired,\r\n    })).isRequired,\r\n    healing: PropTypes.arrayOf(PropTypes.shape({\r\n      x: PropTypes.number.isRequired,\r\n      y: PropTypes.number.isRequired,\r\n    })).isRequired,\r\n    manaUsed: PropTypes.arrayOf(PropTypes.shape({\r\n      x: PropTypes.number.isRequired,\r\n      y: PropTypes.number.isRequired,\r\n    })).isRequired,\r\n  };\r\n\r\n  render() {\r\n    const { mana, healing, manaUsed } = this.props;\r\n\r\n    const baseEncoding = {\r\n        x: {\r\n          field: 'x',\r\n          type: 'quantitative',\r\n          axis: {\r\n            labelExpr: formatTime('datum.value * 1000'),\r\n            grid: false,\r\n          },\r\n          title: null,\r\n          scale: { zero: true, nice: false },\r\n        },\r\n        y: {\r\n          field: 'y',\r\n          type: 'quantitative',\r\n          title: null,\r\n        },\r\n      };\r\n\r\n    const spec = {\r\n      data: {\r\n        name: 'combined',\r\n      },\r\n      mark: {\r\n        type: 'area',\r\n        line: {\r\n          strokeWidth: 1,\r\n        },\r\n      },\r\n      encoding: {\r\n        ...baseEncoding,\r\n        color: {\r\n          field: 'kind',\r\n          scale: {\r\n            scheme: [COLORS.HEALING.border, COLORS.MANA.border, COLORS.MANA_USED.border],\r\n          },\r\n          title: null,\r\n          legend: {\r\n            orient: 'top',\r\n          },\r\n        },\r\n      },\r\n    };\r\n    const data = {\r\n      combined: [\r\n        ...mana.map(e => ({...e, kind: 'Mana'})),\r\n        ...healing.map(e => ({...e, kind: 'HPS'})),\r\n        ...manaUsed.map(e => ({...e, kind: 'Mana Used'})),\r\n      ],\r\n    };\r\n\r\n    return (\r\n      <AutoSizer disableHeight>\r\n        {({ width }) => (\r\n        <BaseChart\r\n          height={400}\r\n          width={width}\r\n          spec={spec}\r\n          data={data}\r\n          />\r\n        )}\r\n      </AutoSizer>\r\n    );\r\n  }\r\n}\r\n\r\nexport default ManaUsageGraph;\r\n","import React from 'react';\r\nimport PropTypes from 'prop-types';\r\n\r\nimport ManaUsageGraph from './ManaUsageGraph';\r\n\r\nclass HealingDoneGraph extends React.PureComponent {\r\n  static propTypes = {\r\n    start: PropTypes.number.isRequired,\r\n    end: PropTypes.number.isRequired,\r\n    offset: PropTypes.number.isRequired,\r\n    healingBySecond: PropTypes.object.isRequired,\r\n    manaUpdates: PropTypes.array.isRequired,\r\n  };\r\n\r\n  groupHealingBySeconds(healingBySecond, interval) {\r\n    return Object.keys(healingBySecond)\r\n      .reduce((obj, second) => {\r\n        const healing = healingBySecond[second];\r\n\r\n        const index = Math.floor(second / interval);\r\n\r\n        if (obj[index]) {\r\n          obj[index] = obj[index].add(healing.regular, healing.absorbed, healing.overheal);\r\n        } else {\r\n          obj[index] = healing;\r\n        }\r\n        return obj;\r\n      }, {});\r\n  }\r\n\r\n  render() {\r\n    const { start, end, offset, healingBySecond, manaUpdates } = this.props;\r\n\r\n    // TODO: move this to vega-lite window transform\r\n    // e.g. { window: [{op: 'mean', field: 'hps', as: 'hps'}], frame: [-2, 2] }\r\n    const interval = 5;\r\n    const healingPerFrame = this.groupHealingBySeconds(healingBySecond, interval);\r\n\r\n    let max = 0;\r\n    Object.keys(healingPerFrame)\r\n      .map(k => healingPerFrame[k])\r\n      .forEach((healingDone) => {\r\n        const current = healingDone.effective;\r\n        if (current > max) {\r\n          max = current;\r\n        }\r\n      });\r\n    max /= interval;\r\n\r\n    const manaUsagePerFrame = {\r\n      0: 0,\r\n    };\r\n    const manaLevelPerFrame = {\r\n      0: 1,\r\n    };\r\n    manaUpdates.forEach((item) => {\r\n      const frame = Math.floor((item.timestamp - start) / 1000 / interval);\r\n\r\n      manaUsagePerFrame[frame] = (manaUsagePerFrame[frame] || 0) + item.used / item.max;\r\n      manaLevelPerFrame[frame] = item.current / item.max; // use the lowest value of the frame; likely to be more accurate\r\n    });\r\n    const fightDurationSec = Math.ceil((end - start) / 1000);\r\n    const labels = [];\r\n    for (let i = 0; i <= fightDurationSec / interval; i += 1) {\r\n      labels.push(Math.ceil(offset/1000) + i * interval);\r\n\r\n      healingPerFrame[i] = healingPerFrame[i] !== undefined ? healingPerFrame[i].effective : 0;\r\n      manaUsagePerFrame[i] = manaUsagePerFrame[i] !== undefined ? manaUsagePerFrame[i] : 0;\r\n      manaLevelPerFrame[i] = manaLevelPerFrame[i] !== undefined ? manaLevelPerFrame[i] : null;\r\n    }\r\n\r\n    let lastKnown = null;\r\n    const mana = Object.values(manaLevelPerFrame).map((value, i) => {\r\n      if (value !== null) {\r\n        lastKnown = value;\r\n      }\r\n      return {\r\n        x: labels[i],\r\n        y: lastKnown * max,\r\n      };\r\n    });\r\n    const healing = Object.values(healingPerFrame).map((value, i) => ({ x: labels[i], y: value / interval }));\r\n    const manaUsed = Object.values(manaUsagePerFrame).map((value, i) => ({ x: labels[i], y: value * max }));\r\n\r\n    return (\r\n      <div className=\"graph-container\" style={{ marginBottom: 20 }}>\r\n        <ManaUsageGraph\r\n          mana={mana}\r\n          healing={healing}\r\n          manaUsed={manaUsed}\r\n        />\r\n      </div>\r\n    );\r\n  }\r\n}\r\n\r\nexport default HealingDoneGraph;\r\n","import React from 'react';\r\n\r\nimport Panel from 'interface/statistics/Panel';\r\nimport Analyzer from 'parser/core/Analyzer';\r\nimport ManaValues from 'parser/shared/modules/ManaValues';\r\nimport HealingDone from 'parser/shared/modules/throughput/HealingDone';\r\nimport { Trans } from '@lingui/macro';\r\n\r\nimport ManaUsageChartComponent from './ManaUsageChartComponent';\r\n\r\n/**\r\n * @property {ManaValues} manaValues\r\n * @property {HealingDone} healingDone\r\n */\r\nclass ManaUsageChart extends Analyzer {\r\n  static dependencies = {\r\n    manaValues: ManaValues,\r\n    healingDone: HealingDone,\r\n  };\r\n\r\n  statistic() {\r\n    const reportCode = this.owner.report.code;\r\n    const actorId = this.owner.playerId;\r\n    const start = this.owner.fight.start_time;\r\n    const end = this.owner.fight.end_time;\r\n    const offset = this.owner.fight.offset_time;\r\n\r\n    return (\r\n      <Panel\r\n        title={<Trans id=\"shared.manaUsageChart.statistic.title\">Mana usage</Trans>}\r\n        explanation={<Trans id=\"shared.manaUsageChart.statistic.explanation\">This shows you your mana usage in correlation with your throughput. Big spikes in mana usage without increases in throughput may indicate poor mana usage. The scale for both mana lines is 0-100% where 100% is aligned with the max HPS throughput.</Trans>}\r\n        position={110}\r\n      >\r\n        <ManaUsageChartComponent\r\n          reportCode={reportCode}\r\n          actorId={actorId}\r\n          start={start}\r\n          end={end}\r\n          offset={offset}\r\n          manaUpdates={this.manaValues.manaUpdates}\r\n          healingBySecond={this.healingDone.bySecond}\r\n        />\r\n      </Panel>\r\n    );\r\n  }\r\n}\r\n\r\nexport default ManaUsageChart;\r\n","import React from 'react';\r\nimport PropTypes from 'prop-types';\r\nimport Slider from 'rc-slider';\r\nimport 'rc-slider/assets/index.css';\r\n\r\nimport SPECS from 'game/SPECS';\r\nimport SpellLink from 'common/SpellLink';\r\nimport Icon from 'common/Icon';\r\n\r\nimport { formatNumber, formatPercentage, formatDuration } from 'common/format';\r\nimport SpecIcon from 'common/SpecIcon';\r\nimport { TooltipElement } from 'common/Tooltip';\r\nimport { Trans } from '@lingui/macro';\r\n\r\nclass LowHealthHealing extends React.Component {\r\n  static propTypes = {\r\n    healEvents: PropTypes.array.isRequired,\r\n    fightStart: PropTypes.number.isRequired,\r\n    combatants: PropTypes.object.isRequired,\r\n  };\r\n  state = {\r\n    maxPlayerHealthPercentage: 0.35,\r\n    minHealOfMaxHealthPercentage: 0.1,\r\n  };\r\n\r\n  render() {\r\n    const { fightStart, combatants, healEvents } = this.props;\r\n\r\n    let total = 0;\r\n    let count = 0;\r\n    let totalBigHealing = 0;\r\n    let bigHealCount = 0;\r\n\r\n    const sliderProps = {\r\n      min: 0,\r\n      max: 1,\r\n      step: 0.05,\r\n      marks: {\r\n        0: '0%',\r\n        0.1: '10%',\r\n        0.2: '20%',\r\n        0.3: '30%',\r\n        0.4: '40%',\r\n        0.5: '50%',\r\n        0.6: '60%',\r\n        0.7: '70%',\r\n        0.8: '80%',\r\n        0.9: '90%',\r\n        1: '100%',\r\n      },\r\n      style: { marginBottom: '2em' },\r\n    };\r\n\r\n    return (\r\n      <div>\r\n        <div style={{ padding: '15px 30px' }}>\r\n          <Trans id=\"shared.lowHealthHealing.slider.maxHealth\">Max health of target:</Trans> <Slider\r\n            {...sliderProps}\r\n            defaultValue={this.state.maxPlayerHealthPercentage}\r\n            onChange={(value) => {\r\n              this.setState({\r\n                maxPlayerHealthPercentage: value,\r\n              });\r\n            }}\r\n          /><br />\r\n          <Trans id=\"shared.lowHealthHealing.slider.minEffective\">Min effective healing (percentage of target's health):</Trans> <Slider\r\n            {...sliderProps}\r\n            defaultValue={this.state.minHealOfMaxHealthPercentage}\r\n            onChange={(value) => {\r\n              this.setState({\r\n                minHealOfMaxHealthPercentage: value,\r\n              });\r\n            }}\r\n          />\r\n        </div>\r\n\r\n        <table className=\"data-table\">\r\n          <thead>\r\n            <tr>\r\n              <th><Trans id=\"common.time\">Time</Trans></th>\r\n              <th><Trans id=\"common.ability\">Ability</Trans></th>\r\n              <th><Trans id=\"common.target\">Target</Trans></th>\r\n              <th colSpan=\"2\"><Trans id=\"common.healingDone\">Healing done</Trans></th>\r\n            </tr>\r\n          </thead>\r\n          <tbody>\r\n            {\r\n              healEvents\r\n                .map(event => {\r\n                  const effectiveHealing = event.amount + (event.absorbed || 0);\r\n                  const hitPointsBeforeHeal = event.hitPoints - effectiveHealing;\r\n                  const healthPercentage = hitPointsBeforeHeal / event.maxHitPoints;\r\n\r\n                  if (healthPercentage > this.state.maxPlayerHealthPercentage) {\r\n                    return false;\r\n                  }\r\n                  total += effectiveHealing;\r\n                  count += 1;\r\n                  if ((effectiveHealing / event.maxHitPoints) < this.state.minHealOfMaxHealthPercentage) {\r\n                    return false;\r\n                  }\r\n                  bigHealCount += 1;\r\n                  totalBigHealing += effectiveHealing;\r\n\r\n                  const combatant = combatants.getEntity(event);\r\n                  if (!combatant) {\r\n                    console.error('Missing combatant for event:', event);\r\n                    return null; // pet or something\r\n                  }\r\n                  const spec = SPECS[combatant.specId];\r\n                  const specClassName = spec.className.replace(' ', '');\r\n\r\n                  return (\r\n                    <tr key={`${event.timestamp}${effectiveHealing}${hitPointsBeforeHeal}`}>\r\n                      <td style={{ width: '5%' }}>\r\n                        {formatDuration((event.timestamp - fightStart) / 1000)}\r\n                      </td>\r\n                      <td style={{ width: '25%' }}>\r\n                        <SpellLink id={event.ability.guid} icon={false}>\r\n                          <Icon icon={event.ability.abilityIcon} alt={event.ability.abilityIcon} /> {event.ability.name}\r\n                        </SpellLink>\r\n                      </td>\r\n                      <td style={{ width: '20%' }} className={specClassName}>\r\n                        <SpecIcon id={spec.id} />{' '}\r\n                        {combatant.name}\r\n                      </td>\r\n                      <td style={{ width: 170, paddingRight: 5, textAlign: 'right' }}>\r\n                        {formatNumber(effectiveHealing)} @{' '}\r\n                        {healthPercentage < 0 ? (\r\n                          <TooltipElement content={<Trans id=\"shared.lowHealthHealing.table.event.tooltip\">This number may be negative when the player had an absorb larger than his health pool.</Trans>}>\r\n                            <Trans id=\"shared.lowHealthHealing.table.event\">{formatPercentage(healthPercentage)}% health</Trans>\r\n                          </TooltipElement>\r\n                        ) : <Trans id=\"shared.lowHealthHealing.table.event\">{formatPercentage(healthPercentage)}% health</Trans>}\r\n                      </td>\r\n                      <td style={{ width: '35%' }}>\r\n                        <div className=\"flex performance-bar-container\">\r\n                          <div\r\n                            className={`flex-sub performance-bar ${specClassName}-bg`}\r\n                            style={{ width: `${healthPercentage * 100}%` }}\r\n                          />\r\n                          <div\r\n                            className=\"flex-sub performance-bar Hunter-bg\"\r\n                            style={{ width: `${effectiveHealing / event.maxHitPoints * 100}%`, opacity: 0.4 }}\r\n                          />\r\n                        </div>\r\n                      </td>\r\n                    </tr>\r\n                  );\r\n                })\r\n            }\r\n            <tr>\r\n              <td colSpan=\"7\">\r\n                <Trans id=\"shared.lowHealthHealing.table.total\">Total healing done on targets below {(this.state.maxPlayerHealthPercentage * 100)}% health: {formatNumber(total)} (spread over {count} seperate heals).<br />\r\n                Total healing done on targets below {(this.state.maxPlayerHealthPercentage * 100)}% health for more than {Math.round(this.state.minHealOfMaxHealthPercentage * 100)}% of target's max health: {formatNumber(totalBigHealing)} (spread over {bigHealCount} seperate heals).</Trans>\r\n              </td>\r\n            </tr>\r\n          </tbody>\r\n        </table>\r\n      </div>\r\n    );\r\n  }\r\n}\r\n\r\nexport default LowHealthHealing;\r\n","import React from 'react';\r\n\r\nimport Panel from 'interface/others/Panel';\r\nimport Analyzer from 'parser/core/Analyzer';\r\nimport { EventType } from 'parser/core/Events';\r\nimport Combatants from 'parser/shared/modules/Combatants';\r\nimport { Trans } from '@lingui/macro';\r\n\r\nimport LowHealthHealingComponent from './Component';\r\n\r\nclass LowHealthHealing extends Analyzer {\r\n  static dependencies = {\r\n    combatants: Combatants,\r\n  };\r\n\r\n  tab() {\r\n    return {\r\n      title: 'Triage',\r\n      url: 'triage',\r\n      render: () => (\r\n        <Panel\r\n          title={<Trans id=\"shared.lowHealthHealing.tab.title\">Triage healing</Trans>}\r\n          explanation={<Trans id=\"shared.lowHealthHealing.tab.explanation\">This shows all instances of healing people below a certain health threshold.</Trans>}\r\n          pad={false}\r\n        >\r\n          <LowHealthHealingComponent\r\n            healEvents={this.owner.eventHistory.filter(event => event.type === EventType.Heal && (this.owner.byPlayer(event) || this.owner.byPlayerPet(event)))}\r\n            fightStart={this.owner.fight.start_time - this.owner.fight.offset_time}\r\n            combatants={this.combatants}\r\n          />\r\n        </Panel>\r\n      ),\r\n    };\r\n  }\r\n}\r\n\r\nexport default LowHealthHealing;\r\n","import React from 'react';\r\nimport PropTypes from 'prop-types';\r\n\r\nimport fetchWcl from 'common/fetchWclApi';\r\n\r\nimport ManaLevelGraph from 'interface/others/charts/ManaLevelGraph';\r\n\r\nclass ManaLevelChartComponent extends React.PureComponent {\r\n  static propTypes = {\r\n    reportCode: PropTypes.string.isRequired,\r\n    start: PropTypes.number.isRequired,\r\n    end: PropTypes.number.isRequired,\r\n    offset: PropTypes.number.isRequired,\r\n    combatants: PropTypes.object.isRequired,\r\n    manaUpdates: PropTypes.array.isRequired,\r\n  };\r\n\r\n  constructor(props) {\r\n    super(props);\r\n    this.state = {\r\n      bossHealth: null,\r\n    };\r\n  }\r\n\r\n  componentDidMount() {\r\n    this.load();\r\n  }\r\n\r\n  componentDidUpdate(prevProps) {\r\n    if (prevProps.reportCode !== this.props.reportCode || prevProps.start !== this.props.start || prevProps.end !== this.props.end || prevProps.offset !== this.props.offset) {\r\n      this.load();\r\n    }\r\n  }\r\n\r\n  load() {\r\n    const { reportCode, start, end } = this.props;\r\n    fetchWcl(`report/tables/resources/${reportCode}`, {\r\n      start,\r\n      end,\r\n      sourceclass: 'Boss',\r\n      hostility: 1,\r\n      abilityid: 1000,\r\n    })\r\n      .then(json => {\r\n        this.setState({\r\n          bossHealth: json,\r\n        });\r\n      });\r\n  }\r\n\r\n  render() {\r\n    if (!this.state.bossHealth) {\r\n      return (\r\n        <div>\r\n          Loading...\r\n        </div>\r\n      );\r\n    }\r\n\r\n    const { start, offset, manaUpdates, combatants } = this.props;\r\n    const initial = manaUpdates[0] ? (manaUpdates[0].current / manaUpdates[0].max) : 1; // if first event is defined, use it to copy first value, otherwise use 100%\r\n    const mana = offset === 0 ?\r\n      [{ x: 0, y: 100 }] :\r\n      [{\r\n        x: 0,\r\n        y: 100 * initial,\r\n      }]; // start with full mana if we start at the beginning of the fight, otherwise copy first value\r\n    mana.push(...manaUpdates.map(({ timestamp, current, max }) => {\r\n      const x = Math.max(timestamp, start) - start;\r\n      return {\r\n        x,\r\n        y: (current / max) * 100,\r\n      };\r\n    }));\r\n\r\n    const bossData = this.state.bossHealth.series.map((series) => {\r\n      const data = series.data.map(([timestamp, health]) => ({ x: timestamp - start, y: health }));\r\n\r\n      return {\r\n        id: series.id,\r\n        title: `${series.name} Health`,\r\n        data,\r\n      };\r\n    });\r\n\r\n    let deaths = [];\r\n    if (this.state.bossHealth.deaths) {\r\n      deaths = this.state.bossHealth.deaths\r\n        .filter(death => Boolean(death.targetIsFriendly))\r\n        .map(({ timestamp, targetID, killingAbility }) => ({\r\n          x: timestamp - start,\r\n          name: combatants.players[targetID].name,\r\n          ability: killingAbility ? killingAbility.name : 'Unknown Ability',\r\n        }));\r\n    }\r\n\r\n    return (\r\n      <div className=\"graph-container\">\r\n        <ManaLevelGraph\r\n          mana={mana}\r\n          bossData={bossData}\r\n          deaths={deaths}\r\n        />\r\n      </div>\r\n    );\r\n  }\r\n}\r\n\r\nexport default ManaLevelChartComponent;\r\n","import React from 'react';\r\nimport { Trans } from '@lingui/macro';\r\n\r\nimport Panel from 'interface/statistics/Panel';\r\nimport Analyzer from 'parser/core/Analyzer';\r\nimport ManaValues from 'parser/shared/modules/ManaValues';\r\nimport Combatants from 'parser/shared/modules/Combatants';\r\n\r\nimport ManaLevelChartComponent from './ManaLevelChartComponent';\r\n\r\nclass ManaLevelChart extends Analyzer {\r\n  static dependencies = {\r\n    manaValues: ManaValues,\r\n    combatants: Combatants,\r\n  };\r\n\r\n  statistic() {\r\n    const reportCode = this.owner.report.code;\r\n    const actorId = this.owner.playerId;\r\n    const start = this.owner.fight.start_time;\r\n    const end = this.owner.fight.end_time;\r\n    const offset = this.owner.fight.offset_time;\r\n\r\n    return (\r\n      <Panel\r\n        title={<Trans id=\"shared.manaLevelChart.statistic.title\">Mana pool</Trans>}\r\n        explanation={<Trans id=\"shared.manaLevelChart.statistic.explanation\">Mana (blue) along with boss HP and deaths. As a rule of thumb aim to burn mana about as quickly as the boss is losing health. Some fights require specific mana management though.</Trans>}\r\n        position={100}\r\n      >\r\n        <ManaLevelChartComponent\r\n          reportCode={reportCode}\r\n          actorId={actorId}\r\n          start={start}\r\n          end={end}\r\n          offset={offset}\r\n          combatants={this.combatants}\r\n          manaUpdates={this.manaValues.manaUpdates}\r\n        />\r\n      </Panel>\r\n    );\r\n  }\r\n}\r\n\r\nexport default ManaLevelChart;\r\n","import React from 'react';\r\nimport { AutoSizer } from 'react-virtualized';\r\nimport PropTypes from 'prop-types';\r\nimport BaseChart, { formatTime } from 'interface/others/BaseChart';\r\n\r\nclass ManaLevelGraph extends React.PureComponent {\r\n  static propTypes = {\r\n    mana: PropTypes.arrayOf(PropTypes.shape({\r\n      x: PropTypes.number.isRequired,\r\n      y: PropTypes.number.isRequired,\r\n    })).isRequired,\r\n    deaths: PropTypes.arrayOf(PropTypes.shape({\r\n      x: PropTypes.number.isRequired,\r\n    })),\r\n    bossData: PropTypes.arrayOf(PropTypes.shape({\r\n      title: PropTypes.string.isRequired,\r\n      borderColor: PropTypes.string,\r\n      backgroundColor: PropTypes.string,\r\n      data: PropTypes.arrayOf(PropTypes.shape({\r\n        x: PropTypes.number.isRequired,\r\n        y: PropTypes.number.isRequired,\r\n      })).isRequired,\r\n    })).isRequired,\r\n  };\r\n\r\n  static defaultProps = {\r\n    deaths: [],\r\n  };\r\n\r\n  colors = {\r\n    mana: {\r\n      border: 'rgba(2, 109, 215, 0.6)',\r\n      background: 'rgba(2, 109, 215, 0.25)',\r\n    },\r\n    death: 'rgba(255, 0, 0, 0.8)',\r\n  };\r\n\r\n  render() {\r\n    const { mana, deaths, bossData } = this.props;\r\n\r\n    const baseEncoding = {\r\n            x: {\r\n              field: 'x',\r\n              type: 'quantitative',\r\n              axis: {\r\n                labelExpr: formatTime('datum.value'),\r\n                grid: false,\r\n              },\r\n              title: null,\r\n              scale: { zero: true, nice: false },\r\n            },\r\n            y: {\r\n              field: 'y',\r\n              type: 'quantitative',\r\n              axis: {\r\n                tickCount: 4,\r\n              },\r\n              title: null,\r\n            },\r\n          };\r\n\r\n    const spec = {\r\n      layer: [\r\n        {\r\n          data: {\r\n            name: 'bosses',\r\n          },\r\n          transform: [\r\n            { flatten: ['data'] },\r\n            { calculate: 'datum.data.x', as: 'x' },\r\n            { calculate: 'datum.data.y', as: 'y' },\r\n          ],\r\n          mark: {\r\n            type: 'area',\r\n            opacity: 0.6,\r\n            line: {\r\n              interpolate: 'linear',\r\n              strokeWidth: 1,\r\n            },\r\n          },\r\n          encoding: {\r\n            ...baseEncoding,\r\n            color: {\r\n              field: 'title',\r\n              type: 'nominal',\r\n              title: 'Enemy',\r\n              legend: {\r\n                orient: 'top',\r\n              },\r\n              scale: {\r\n                scheme: \"accent\",\r\n              },\r\n            },\r\n          },\r\n        },\r\n        {\r\n          data: {\r\n            name: 'mana',\r\n          },\r\n          mark: {\r\n            type: 'area',\r\n            line: {\r\n              interpolate: 'linear',\r\n              color: this.colors.mana.border,\r\n              strokeWidth: 1,\r\n            },\r\n            color: this.colors.mana.background,\r\n          },\r\n          encoding: baseEncoding,\r\n        },\r\n        {\r\n          data: {\r\n            name: 'deaths',\r\n          },\r\n          mark: {\r\n            type: 'rule',\r\n            color: 'red',\r\n            strokeWidth: 2,\r\n          },\r\n          encoding: {\r\n            x: baseEncoding.x,\r\n            tooltip: [\r\n              { field: 'name', type: 'nominal', title: 'Target' },\r\n              { field: 'ability', type: 'nominal', title: 'Killing Ability' },\r\n            ],\r\n          },\r\n        },\r\n      ],\r\n    };\r\n\r\n    const data = {\r\n      mana, deaths,\r\n      bosses: bossData,\r\n    };\r\n\r\n    return (\r\n      <AutoSizer disableHeight>\r\n        {({ width }) => (\r\n          <BaseChart\r\n            height={400}\r\n            width={width}\r\n            spec={spec}\r\n            data={data}\r\n          />\r\n        )}\r\n      </AutoSizer>\r\n    );\r\n  }\r\n}\r\nexport default ManaLevelGraph;\r\n"],"sourceRoot":""}