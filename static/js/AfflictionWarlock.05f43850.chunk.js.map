{"version":3,"sources":["parser/warlock/affliction/modules/features/Abilities.js","parser/warlock/affliction/modules/features/AlwaysBeCasting.js","parser/warlock/affliction/modules/features/CooldownThroughputTracker.js","parser/warlock/affliction/constants.js","parser/warlock/affliction/modules/features/Darkglare.js","parser/warlock/affliction/modules/features/DotUptimes/AgonyUptime.js","parser/warlock/affliction/modules/features/DotUptimes/CorruptionUptime.js","parser/warlock/affliction/modules/features/DotUptimes/UnstableAfflictionUptime.js","parser/warlock/affliction/modules/talents/SiphonLifeUptime.js","parser/warlock/affliction/modules/features/DotUptimes/index.js","parser/warlock/affliction/modules/features/ShadowEmbrace.js","parser/warlock/affliction/modules/soulshards/SoulShardTracker.js","parser/warlock/affliction/modules/soulshards/SoulShardDetails.js","parser/warlock/affliction/modules/core/Channeling.js","parser/warlock/affliction/modules/core/GlobalCooldown.js","parser/warlock/affliction/modules/talents/Nightfall.js","parser/warlock/affliction/modules/talents/DrainSoul.js","parser/warlock/affliction/modules/talents/AbsoluteCorruption.js","parser/warlock/affliction/modules/talents/PhantomSingularity.js","parser/warlock/affliction/modules/talents/VileTaint.js","parser/warlock/affliction/modules/talents/Haunt.js","parser/shared/normalizers/MissingDotApplyDebuffPrePull.ts","parser/warlock/shared/modules/normalizers/WarlockMissingDotApplyDebuffPrePull.ts","parser/warlock/affliction/modules/talents/SoulConduit.js","parser/warlock/affliction/modules/features/Checklist/Component.js","parser/warlock/affliction/modules/features/Checklist/Module.js","parser/warlock/affliction/CombatLogParser.ts","interface/others/StatisticsListBox.js"],"names":["FEL_CELERITY_REDUCTION_SEC","1","2","3","4","5","6","7","8","9","10","11","12","13","14","15","Abilities","combatant","this","selectedCombatant","spell","SPELLS","UNSTABLE_AFFLICTION","category","SPELL_CATEGORIES","ROTATIONAL","gcd","base","buffSpellId","id","HAUNT_TALENT","cooldown","enabled","hasTalent","castEfficiency","suggestion","recommendedEfficiency","extraSuggestion","AGONY","CORRUPTION_CAST","CORRUPTION_DEBUFF","MALEFIC_RAPTURE","SIPHON_LIFE_TALENT","SHADOW_BOLT_AFFLI","DRAIN_SOUL_TALENT","PHANTOM_SINGULARITY_TALENT","ROTATIONAL_AOE","SEED_OF_CORRUPTION_DEBUFF","VILE_TAINT_TALENT","SOUL_ROT","hasCovenant","COVENANTS","NIGHT_FAE","SUMMON_DARKGLARE","COOLDOWNS","DARK_CALLER_TALENT","DARK_SOUL_MISERY_TALENT","UNENDING_RESOLVE","DEFENSIVE","importance","ISSUE_IMPORTANCE","MINOR","averageIssueEfficiency","majorIssueEfficiency","DARK_PACT_TALENT","BURNING_RUSH_TALENT","UTILITY","DRAIN_LIFE","MORTAL_COIL_TALENT","DEMONIC_CIRCLE_SUMMON","DEMONIC_CIRCLE_TELEPORT","SOULSTONE","DEMONIC_GATEWAY_CAST","GRIMOIRE_OF_SACRIFICE_TALENT","SOULSHAPE","BANISH","CREATE_HEALTHSTONE","CREATE_SOULWELL","SUBJUGATE_DEMON","EYE_OF_KILROGG","FEAR_CAST","CURSE_OF_TONGUES","CURSE_OF_WEAKNESS","CURSE_OF_EXHAUSTION","HEALTH_FUNNEL_CAST","SUMMON_IMP","SUMMON_VOIDWALKER","SUMMON_SUCCUBUS","SUMMON_FELHUNTER","SHADOWFURY","DARKFURY_TALENT","UNENDING_BREATH","FEL_DOMINATION","hasConduitBySpellID","FEL_CELERITY","conduitRankBySpellID","HOWL_OF_TERROR_TALENT","CoreAbilities","AlwaysBeCasting","when","suggestionThresholds","addSuggestion","suggest","actual","recommended","SpellLink","DEMONIC_CIRCLE","icon","i18n","_","formatPercentage","Statistic","position","STATISTIC_ORDER","CORE","tooltip","activeTimePercentage","downtimePercentage","className","Gauge","value","isGreaterThan","minor","average","major","style","CoreAlwaysBeCasting","CooldownThroughputTracker","CoreCooldownThroughputTracker","cooldownSpells","summary","BUILT_IN_SUMMARY_TYPES","DAMAGE","castCooldowns","duration","getDotDurations","hasCreepingDeath","durations","Object","entries","forEach","key","DOT_DEBUFFS","Darkglare","args","_dotDurations","_hasAC","bonusDotDamage","darkglareDamage","casts","dots","CREEPING_DEATH_TALENT","ABSOLUTE_CORRUPTION_TALENT","addEventListener","Events","applydebuff","by","SELECTED_PLAYER","onDotApply","removedebuff","onDotRemove","cast","_processDarkglareCast","_processDotCast","damage","onDotDamage","SELECTED_PLAYER_PET","SUMMON_DARKGLARE_DAMAGE","onDarkglareDamage","event","_resetDotOnTarget","spellId","ability","guid","targetIsFriendly","encoded","encodeTargetString","targetID","targetInstance","values","length","dotInfo","isExtended","extendStart","isInExtendedWindow","expectedEnd","timestamp","extendExpectedEnd","amount","absorbed","dgCast","obj","dotIds","keys","map","stringId","Number","targetName","extended","push","some","enemy","enemies","getEntity","target","name","totalExtendedDots","filter","averageExtendedDots","totalDamage","formatDPS","formatNumber","owner","fightDuration","size","formatThousands","formatItemDamageDone","BoringSpellValueText","Tooltip","content","toFixed","Analyzer","dependencies","Enemies","AgonyUptime","text","WRITHE_IN_AGONY_TALENT","history","getDebuffHistory","SpellIcon","width","uptime","padding","UptimeBar","uptimeHistory","start","fight","start_time","end","end_time","height","getBuffUptime","isLessThan","CorruptionUptime","UnstableAfflictionUptime","getCombinedDebuffHistory","paddingRight","SiphonLifeUptime","active","DotUptimeStatisticBox","StatisticBar","wide","agonyUptime","subStatistic","corruptionUptime","unstableAfflictionUptime","siphonLifeUptime","ShadowEmbrace","_lastEventTimestamp","debuffs","0","count","onDamage","changedebuffstack","SHADOW_EMBRACE_DEBUFF","onChangeDebuffStack","shadowEmbrace","getBuff","calculateEffectiveDamage","stacks","oldStacks","newStacks","Math","max","uptimes","stackedUptime","STATISTIC_CATEGORY","GENERAL","SHADOW_EMBRACE","totalUptimePercentage","dps","getPercentageOfTotalDamageDone","SoulShardTracker","resource","RESOURCE_TYPES","SOUL_SHARDS","shouldProcessCastEvent","index","_getClassResourceIndex","classResources","cost","find","type","ResourceTracker","SoulShardDetails","shardsWasted","soulShardTracker","wasted","title","url","render","Panel","ResourceBreakdown","tracker","showSpenders","Channeling","options","onRemoveDebuff","beginChannel","isChannelingSpell","log","_currentChannel","endChannel","CoreChanneling","GlobalCooldown","CoreGlobalCooldown","Nightfall","wastedProcs","buffApplyTimestamp","NIGHTFALL_TALENT","applybuff","NIGHTFALL_BUFF","onNightfallApplyRefresh","refreshbuff","removebuff","onNightfallRemove","TALENTS","DrainSoul","_lastEnergize","_subtractBossShards","_lastEnergizeWasted","_shardsGained","totalNumOfAdds","mobsSniped","energize","DRAIN_SOUL_KILL_SHARD_GEN","onDrainSoulEnergize","onDrainSoulRemove","fightend","onFinished","waste","toLowerCase","allEnemies","getEntities","reduce","_baseInfo","fights","instances","getGeneratedBySpell","ds","abilityTracker","getAbility","damageEffective","damageAbsorbed","CriticalStrike","AbilityTracker","AbsoluteCorruption","bonusDmg","onCorruptionDamage","PhantomSingularity","VileTaint","_castTimestamp","_currentCastCount","onVileTaintCast","onVileTaintApplyDebuff","averageTargetsHit","total","current","Haunt","totalTicks","buffedTicks","hasBuff","MissingDotApplyDebuffPrePull","events","ctor","constructor","fightStartTimestamp","cutoff","dotStatusesMap","debuff","debuffId","handled","missingApplyDebuff","i","EventType","ApplyDebuff","dotStatus","Damage","damageEvent","missingApplyDebuffsEvents","_fabricateApplyDebuffEvent","sourceID","sourceIsFriendly","__fabricated","EventsNormalizer","DOTS","PHANTOM_SINGULARITY_DAMAGE_HEAL","IMMOLATE_DEBUFF","WarlockMissingDotApplyDebuffPrePull","SoulConduit","_totalTicks","_totalUAdamage","SOUL_CONDUIT_TALENT","onUnstableAfflictionDamage","avgDamage","shardsGained","SOUL_CONDUIT_SHARD_GEN","estimatedUAdamage","totalSpent","spent","findMax","k","n","binomialPMF","AfflictionWarlockChecklist","thresholds","shardTracker","DotUptime","props","Requirement","AbilityRequirement","GenericCastEfficiencyRequirement","getCastEfficiencyForSpellId","Rule","description","agony","corruption","unstableAffliction","siphonLife","haunt","soulShards","valueTooltip","downtime","PreparationRule","Checklist","Component","combatants","selected","preparationRuleAnalyzer","soulShardDetails","alwaysBeCasting","BaseChecklist","Combatants","CastEfficiency","PreparationRuleAnalyzer","CombatLogParser","CoreCombatLogParser","specModules","abilities","cooldownThroughputTracker","checklist","darkglare","grimoireOfSacrificeNormalizer","GrimoireOfSacrificeNormalizer","warlockMissingDotApplyDebuffPrePull","dotUptimes","DotUptimes","channeling","globalCooldown","nightfall","drainSoul","absoluteCorruption","phantomSingularity","vileTaint","grimoireOfSacrifice","GrimoireOfSacrifice","soulConduit","arcaneTorrent","ArcaneTorrent","StatisticsListBox","children","bodyStyle","others","defaultProps"],"mappings":"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","file":"static/js/AfflictionWarlock.05f43850.chunk.js","sourcesContent":["import CoreAbilities from 'parser/core/modules/Abilities';\r\nimport ISSUE_IMPORTANCE from 'parser/core/ISSUE_IMPORTANCE';\r\n\r\nimport SPELLS from 'common/SPELLS';\r\n\r\nimport COVENANTS from 'game/shadowlands/COVENANTS';\r\n\r\nconst FEL_CELERITY_REDUCTION_SEC = {\r\n  1: 48,\r\n  2: 51,\r\n  3: 54,\r\n  4: 57,\r\n  5: 60,\r\n  6: 63,\r\n  7: 66,\r\n  8: 69,\r\n  9: 72,\r\n  10: 75,\r\n  11: 78,\r\n  12: 81,\r\n  13: 84,\r\n  14: 87,\r\n  15: 90,\r\n};\r\n\r\nclass Abilities extends CoreAbilities {\r\n  spellbook() {\r\n    const combatant = this.selectedCombatant;\r\n    return [\r\n      // Rotational spells\r\n      {\r\n        spell: SPELLS.UNSTABLE_AFFLICTION,\r\n        category: Abilities.SPELL_CATEGORIES.ROTATIONAL,\r\n        gcd: {\r\n          base: 1500,\r\n        },\r\n        buffSpellId: SPELLS.UNSTABLE_AFFLICTION.id,\r\n      },\r\n      {\r\n        spell: SPELLS.HAUNT_TALENT,\r\n        category: Abilities.SPELL_CATEGORIES.ROTATIONAL,\r\n        cooldown: 15,\r\n        enabled: combatant.hasTalent(SPELLS.HAUNT_TALENT.id),\r\n        gcd: {\r\n          base: 1500,\r\n        },\r\n        castEfficiency: {\r\n          suggestion: true,\r\n          recommendedEfficiency: 0.95,\r\n          // TODO: possibly implement Haunt resets via SpellUsable?\r\n          extraSuggestion: 'This estimate may not be correct sometimes because of Haunt\\'s resets. The real amount of possible Haunts will be higher if there were adds on this fight.',\r\n        },\r\n        buffSpellId: SPELLS.HAUNT_TALENT.id,\r\n      },\r\n      {\r\n        spell: SPELLS.AGONY,\r\n        category: Abilities.SPELL_CATEGORIES.ROTATIONAL,\r\n        gcd: {\r\n          base: 1500,\r\n        },\r\n        buffSpellId: SPELLS.AGONY.id,\r\n      },\r\n      {\r\n        spell: SPELLS.CORRUPTION_CAST,\r\n        category: Abilities.SPELL_CATEGORIES.ROTATIONAL,\r\n        gcd: {\r\n          base: 1500,\r\n        },\r\n        buffSpellId: SPELLS.CORRUPTION_DEBUFF.id,\r\n      },\r\n      {\r\n        spell: SPELLS.MALEFIC_RAPTURE,\r\n        category: Abilities.SPELL_CATEGORIES.ROTATIONAL,\r\n        gcd: {\r\n          base: 1500,\r\n        },\r\n      },\r\n      {\r\n        spell: SPELLS.SIPHON_LIFE_TALENT,\r\n        category: Abilities.SPELL_CATEGORIES.ROTATIONAL,\r\n        enabled: combatant.hasTalent(SPELLS.SIPHON_LIFE_TALENT.id),\r\n        gcd: {\r\n          base: 1500,\r\n        },\r\n        buffSpellId: SPELLS.SIPHON_LIFE_TALENT.id,\r\n      },\r\n      {\r\n        spell: SPELLS.SHADOW_BOLT_AFFLI,\r\n        category: Abilities.SPELL_CATEGORIES.ROTATIONAL,\r\n        gcd: {\r\n          base: 1500,\r\n        },\r\n      },\r\n      {\r\n        spell: SPELLS.DRAIN_SOUL_TALENT,\r\n        category: Abilities.SPELL_CATEGORIES.ROTATIONAL,\r\n        enabled: combatant.hasTalent(SPELLS.DRAIN_SOUL_TALENT.id),\r\n        gcd: {\r\n          base: 1500,\r\n        },\r\n      },\r\n      {\r\n        spell: SPELLS.PHANTOM_SINGULARITY_TALENT,\r\n        category: Abilities.SPELL_CATEGORIES.ROTATIONAL_AOE,\r\n        cooldown: 45,\r\n        enabled: combatant.hasTalent(SPELLS.PHANTOM_SINGULARITY_TALENT.id),\r\n        gcd: {\r\n          base: 1500,\r\n        },\r\n        castEfficiency: {\r\n          suggestion: false,\r\n        },\r\n        buffSpellId: SPELLS.PHANTOM_SINGULARITY_TALENT.id,\r\n      },\r\n      {\r\n        spell: SPELLS.SEED_OF_CORRUPTION_DEBUFF,\r\n        category: Abilities.SPELL_CATEGORIES.ROTATIONAL_AOE,\r\n        gcd: {\r\n          base: 1500,\r\n        },\r\n      },\r\n      {\r\n        spell: SPELLS.VILE_TAINT_TALENT,\r\n        category: Abilities.SPELL_CATEGORIES.ROTATIONAL_AOE,\r\n        gcd: {\r\n          base: 1500,\r\n        },\r\n        enabled: combatant.hasTalent(SPELLS.VILE_TAINT_TALENT.id),\r\n        cooldown: 20,\r\n        castEfficiency: {\r\n          suggestion: false,\r\n        },\r\n        buffSpellId: SPELLS.VILE_TAINT_TALENT.id,\r\n      },\r\n      {\r\n        spell: SPELLS.SOUL_ROT,\r\n        category: Abilities.SPELL_CATEGORIES.ROTATIONAL_AOE,\r\n        gcd: {\r\n          base: 1500,\r\n        },\r\n        cooldown: 60,\r\n        enabled: combatant.hasCovenant(COVENANTS.NIGHT_FAE.id),\r\n        castEfficiency: {\r\n          suggestion: false,\r\n        },\r\n        buffSpellId: SPELLS.SOUL_ROT.id,\r\n      },\r\n\r\n      // Cooldowns\r\n      {\r\n        spell: SPELLS.SUMMON_DARKGLARE,\r\n        category: Abilities.SPELL_CATEGORIES.COOLDOWNS,\r\n        cooldown: combatant.hasTalent(SPELLS.DARK_CALLER_TALENT.id) ? 120 : 180,\r\n        gcd: {\r\n          base: 1500,\r\n        },\r\n        castEfficiency: {\r\n          suggestion: true,\r\n          recommendedEfficiency: 0.9,\r\n        },\r\n      },\r\n      {\r\n        spell: SPELLS.DARK_SOUL_MISERY_TALENT,\r\n        category: Abilities.SPELL_CATEGORIES.COOLDOWNS,\r\n        cooldown: 120,\r\n        gcd: null,\r\n        enabled: combatant.hasTalent(SPELLS.DARK_SOUL_MISERY_TALENT.id),\r\n        castEfficiency: {\r\n          suggestion: true,\r\n          recommendedEfficiency: 0.9,\r\n        },\r\n        buffSpellId: SPELLS.DARK_SOUL_MISERY_TALENT.id,\r\n      },\r\n\r\n      // Defensive\r\n      {\r\n        spell: SPELLS.UNENDING_RESOLVE,\r\n        buffSpellId: SPELLS.UNENDING_RESOLVE.id,\r\n        category: Abilities.SPELL_CATEGORIES.DEFENSIVE,\r\n        cooldown: 180,\r\n        gcd: null,\r\n        castEfficiency: {\r\n          suggestion: true,\r\n          importance: ISSUE_IMPORTANCE.MINOR,\r\n          recommendedEfficiency: 0.33,\r\n          averageIssueEfficiency: 0.20,\r\n          majorIssueEfficiency: 0.10,\r\n        },\r\n      },\r\n      {\r\n        spell: SPELLS.DARK_PACT_TALENT,\r\n        category: Abilities.SPELL_CATEGORIES.DEFENSIVE,\r\n        cooldown: 60,\r\n        gcd: null,\r\n        enabled: combatant.hasTalent(SPELLS.DARK_PACT_TALENT.id),\r\n        castEfficiency: {\r\n          suggestion: true,\r\n          importance: ISSUE_IMPORTANCE.MINOR,\r\n          recommendedEfficiency: 0.33,\r\n          averageIssueEfficiency: 0.20,\r\n          majorIssueEfficiency: 0.10,\r\n        },\r\n        buffSpellId: SPELLS.DARK_PACT_TALENT.id,\r\n      },\r\n\r\n      // Utility\r\n      {\r\n        spell: SPELLS.BURNING_RUSH_TALENT,\r\n        category: Abilities.SPELL_CATEGORIES.UTILITY,\r\n        enabled: combatant.hasTalent(SPELLS.BURNING_RUSH_TALENT.id),\r\n        gcd: {\r\n          base: 1500,\r\n        },\r\n        buffSpellId: SPELLS.BURNING_RUSH_TALENT.id,\r\n      },\r\n      {\r\n        spell: SPELLS.DRAIN_LIFE,\r\n        category: Abilities.SPELL_CATEGORIES.UTILITY,\r\n        gcd: {\r\n          base: 1500,\r\n        },\r\n      },\r\n      {\r\n        spell: SPELLS.MORTAL_COIL_TALENT,\r\n        category: Abilities.SPELL_CATEGORIES.UTILITY,\r\n        cooldown: 45,\r\n        enabled: combatant.hasTalent(SPELLS.MORTAL_COIL_TALENT.id),\r\n        gcd: {\r\n          base: 1500,\r\n        },\r\n      },\r\n      {\r\n        spell: SPELLS.DEMONIC_CIRCLE_SUMMON,\r\n        category: Abilities.SPELL_CATEGORIES.UTILITY,\r\n        gcd: {\r\n          base: 1500,\r\n        },\r\n        cooldown: 10,\r\n        castEfficiency: {\r\n          suggestion: false,\r\n        },\r\n      },\r\n      {\r\n        spell: SPELLS.DEMONIC_CIRCLE_TELEPORT,\r\n        category: Abilities.SPELL_CATEGORIES.UTILITY,\r\n        cooldown: 30,\r\n        gcd: {\r\n          base: 1500,\r\n        },\r\n        castEfficiency: {\r\n          suggestion: false,\r\n        },\r\n      },\r\n      {\r\n        spell: SPELLS.SOULSTONE,\r\n        category: Abilities.SPELL_CATEGORIES.UTILITY,\r\n        gcd: {\r\n          base: 1500,\r\n        },\r\n      },\r\n      {\r\n        spell: SPELLS.DEMONIC_GATEWAY_CAST,\r\n        category: Abilities.SPELL_CATEGORIES.UTILITY,\r\n        cooldown: 10,\r\n        gcd: {\r\n          base: 1500,\r\n        },\r\n      },\r\n      {\r\n        spell: SPELLS.GRIMOIRE_OF_SACRIFICE_TALENT,\r\n        category: Abilities.SPELL_CATEGORIES.UTILITY,\r\n        cooldown: 30,\r\n        enabled: combatant.hasTalent(SPELLS.GRIMOIRE_OF_SACRIFICE_TALENT.id),\r\n        gcd: {\r\n          base: 1500,\r\n        },\r\n      },\r\n      {\r\n        spell: SPELLS.SOULSHAPE,\r\n        category: Abilities.SPELL_CATEGORIES.UTILITY,\r\n        cooldown: 90,\r\n        enabled: combatant.hasCovenant(COVENANTS.NIGHT_FAE.id),\r\n        gcd: {\r\n          base: 1500,\r\n        },\r\n        buffSpellId: SPELLS.SOULSHAPE.id,\r\n      },\r\n      {\r\n        spell: SPELLS.BANISH,\r\n        category: Abilities.SPELL_CATEGORIES.UTILITY,\r\n        gcd: {\r\n          base: 1500,\r\n        },\r\n      },\r\n      {\r\n        spell: SPELLS.CREATE_HEALTHSTONE,\r\n        category: Abilities.SPELL_CATEGORIES.UTILITY,\r\n        gcd: {\r\n          base: 1500,\r\n        },\r\n      },\r\n      {\r\n        spell: SPELLS.CREATE_SOULWELL,\r\n        category: Abilities.SPELL_CATEGORIES.UTILITY,\r\n        cooldown: 120,\r\n        gcd: {\r\n          base: 1500,\r\n        },\r\n      },\r\n      {\r\n        spell: SPELLS.SUBJUGATE_DEMON,\r\n        category: Abilities.SPELL_CATEGORIES.UTILITY,\r\n        gcd: {\r\n          base: 1500,\r\n        },\r\n      },\r\n      {\r\n        spell: SPELLS.EYE_OF_KILROGG,\r\n        category: Abilities.SPELL_CATEGORIES.UTILITY,\r\n        gcd: {\r\n          base: 1500,\r\n        },\r\n      },\r\n      {\r\n        spell: SPELLS.FEAR_CAST,\r\n        category: Abilities.SPELL_CATEGORIES.UTILITY,\r\n        gcd: {\r\n          base: 1500,\r\n        },\r\n      },\r\n      {\r\n        spell: SPELLS.CURSE_OF_TONGUES,\r\n        category: Abilities.SPELL_CATEGORIES.UTILITY,\r\n        gcd: {\r\n          base: 1500,\r\n        },\r\n      },\r\n      {\r\n        spell: SPELLS.CURSE_OF_WEAKNESS,\r\n        category: Abilities.SPELL_CATEGORIES.UTILITY,\r\n        gcd: {\r\n          base: 1500,\r\n        },\r\n      },\r\n      {\r\n        spell: SPELLS.CURSE_OF_EXHAUSTION,\r\n        category: Abilities.SPELL_CATEGORIES.UTILITY,\r\n        gcd: {\r\n          base: 1500,\r\n        },\r\n      },\r\n      {\r\n        spell: SPELLS.HEALTH_FUNNEL_CAST,\r\n        category: Abilities.SPELL_CATEGORIES.UTILITY,\r\n        gcd: {\r\n          base: 1500,\r\n        },\r\n      },\r\n      {\r\n        spell: [\r\n          SPELLS.SUMMON_IMP,\r\n          SPELLS.SUMMON_VOIDWALKER,\r\n          SPELLS.SUMMON_SUCCUBUS,\r\n          SPELLS.SUMMON_FELHUNTER,\r\n        ],\r\n        category: Abilities.SPELL_CATEGORIES.UTILITY,\r\n        gcd: {\r\n          base: 1500,\r\n        },\r\n      },\r\n      {\r\n        spell: SPELLS.SHADOWFURY,\r\n        category: Abilities.SPELL_CATEGORIES.UTILITY,\r\n        gcd: {\r\n          base: 1500,\r\n        },\r\n        cooldown: combatant.hasTalent(SPELLS.DARKFURY_TALENT.id) ? 45 : 60,\r\n      },\r\n      {\r\n        spell: SPELLS.UNENDING_BREATH,\r\n        category: Abilities.SPELL_CATEGORIES.UTILITY,\r\n        gcd: {\r\n          base: 1500,\r\n        },\r\n      },\r\n      {\r\n        spell: SPELLS.FEL_DOMINATION,\r\n        category: Abilities.SPELL_CATEGORIES.UTILITY,\r\n        cooldown: combatant.hasConduitBySpellID(SPELLS.FEL_CELERITY.id) ? 180 - FEL_CELERITY_REDUCTION_SEC[combatant.conduitRankBySpellID(SPELLS.FEL_CELERITY.id)] : 180,\r\n        gcd: {\r\n          base: 1500,\r\n        },\r\n      },\r\n      {\r\n        spell: SPELLS.HOWL_OF_TERROR_TALENT,\r\n        category: Abilities.SPELL_CATEGORIES.UTILITY,\r\n        enabled: combatant.hasTalent(SPELLS.HOWL_OF_TERROR_TALENT.id),\r\n        cooldown: 40,\r\n        gcd: {\r\n          base: 1500,\r\n        },\r\n      },\r\n    ];\r\n  }\r\n}\r\n\r\nexport default Abilities;\r\n","import React from 'react';\r\n\r\nimport CoreAlwaysBeCasting from 'parser/shared/modules/AlwaysBeCasting';\r\n\r\nimport SPELLS from 'common/SPELLS';\r\nimport { formatPercentage } from 'common/format';\r\nimport SpellLink from 'common/SpellLink';\r\n\r\nimport Statistic from 'interface/statistics/Statistic';\r\nimport STATISTIC_ORDER from 'interface/others/STATISTIC_ORDER';\r\nimport Gauge from 'interface/statistics/components/Gauge';\r\n\r\nimport { i18n } from '@lingui/core';\r\nimport { t } from '@lingui/macro';\r\n\r\nclass AlwaysBeCasting extends CoreAlwaysBeCasting {\r\n  get suggestionThresholds() {\r\n    return {\r\n      actual: this.downtimePercentage,\r\n      isGreaterThan: {\r\n        minor: 0.1,\r\n        average: 0.15,\r\n        major: 0.2,\r\n      },\r\n      style: 'percentage',\r\n    };\r\n  }\r\n\r\n  suggestions(when) {\r\n    when(this.suggestionThresholds)\r\n      .addSuggestion((suggest, actual, recommended) => suggest(<>Your downtime can be improved. Try to Always Be Casting (ABC), try to reduce the delay between casting spells. Even if you have to move, try casting something instant - maybe refresh your dots. Make good use of your <SpellLink id={SPELLS.DEMONIC_CIRCLE.id} /> or <SpellLink id={SPELLS.BURNING_RUSH_TALENT.id} /> when you can.</>)\r\n        .icon('spell_mage_altertime')\r\n        .actual(i18n._(t('warlock.affliction.suggestions.alwaysBeCasting.downtime')`${formatPercentage(actual)}% downtime`))\r\n        .recommended(`<${formatPercentage(recommended)}% is recommended`));\r\n  }\r\n\r\n  statistic() {\r\n    return (\r\n      <Statistic\r\n        position={STATISTIC_ORDER.CORE(2)}\r\n        tooltip={(\r\n          <>\r\n            Downtime is available time not used to cast anything (including not having your GCD rolling). This can be caused by delays between casting spells, latency, cast interrupting or just simply not casting anything (e.g. due to movement/stunned).<br />\r\n            <ul>\r\n              <li>You spent <strong>{formatPercentage(this.activeTimePercentage)}%</strong> of your time casting something.</li>\r\n              <li>You spent <strong>{formatPercentage(this.downtimePercentage)}%</strong> of your time casting nothing at all.</li>\r\n            </ul>\r\n          </>\r\n        )}\r\n      >\r\n        <div className=\"pad\">\r\n          <label>Active time</label>\r\n\r\n          <Gauge value={this.activeTimePercentage} />\r\n        </div>\r\n      </Statistic>\r\n    );\r\n  }\r\n}\r\n\r\nexport default AlwaysBeCasting;\r\n","import CoreCooldownThroughputTracker, { BUILT_IN_SUMMARY_TYPES } from 'parser/shared/modules/CooldownThroughputTracker';\r\n\r\nimport SPELLS from 'common/SPELLS';\r\n\r\nclass CooldownThroughputTracker extends CoreCooldownThroughputTracker {\r\n  static cooldownSpells = [\r\n    ...CoreCooldownThroughputTracker.cooldownSpells,\r\n    {\r\n      spell: SPELLS.DARK_SOUL_MISERY_TALENT,\r\n      summary: [\r\n        BUILT_IN_SUMMARY_TYPES.DAMAGE,\r\n      ],\r\n    },\r\n  ];\r\n\r\n  static castCooldowns = [\r\n    ...CoreCooldownThroughputTracker.castCooldowns,\r\n    {\r\n      spell: SPELLS.SUMMON_DARKGLARE,\r\n      duration: 20,\r\n      summary: [\r\n        BUILT_IN_SUMMARY_TYPES.DAMAGE,\r\n      ],\r\n    },\r\n  ];\r\n}\r\n\r\nexport default CooldownThroughputTracker;\r\n","import SPELLS from 'common/SPELLS';\r\n\r\nexport const getDotDurations = (hasCreepingDeath) => {\r\n  const durations = {\r\n    [SPELLS.AGONY.id]: 18000,\r\n    [SPELLS.CORRUPTION_DEBUFF.id]: 14000,\r\n    [SPELLS.SIPHON_LIFE_TALENT.id]: 15000,\r\n    [SPELLS.UNSTABLE_AFFLICTION.id]: 16000,\r\n  };\r\n  if (hasCreepingDeath) {\r\n    Object.entries(durations).forEach(([key]) => {\r\n      durations[key] *= 0.85;\r\n    });\r\n  }\r\n  durations[SPELLS.PHANTOM_SINGULARITY_TALENT.id] = 16000;\r\n  return durations;\r\n};\r\n","import React from 'react';\r\n\r\nimport Analyzer, { SELECTED_PLAYER, SELECTED_PLAYER_PET } from 'parser/core/Analyzer';\r\nimport Enemies from 'parser/shared/modules/Enemies';\r\nimport { encodeTargetString } from 'parser/shared/modules/EnemyInstances';\r\nimport Events from 'parser/core/Events';\r\n\r\nimport SPELLS from 'common/SPELLS';\r\nimport { formatThousands, formatNumber } from 'common/format';\r\nimport { TooltipElement } from 'common/Tooltip';\r\nimport STATISTIC_ORDER from 'interface/others/STATISTIC_ORDER';\r\nimport Statistic from 'interface/statistics/Statistic';\r\nimport BoringSpellValueText from 'interface/statistics/components/BoringSpellValueText';\r\n\r\nimport { getDotDurations } from '../../constants';\r\n\r\nconst BONUS_DURATION = 8000;\r\nconst DOT_DEBUFFS = [\r\n  SPELLS.AGONY,\r\n  SPELLS.CORRUPTION_DEBUFF,\r\n  SPELLS.SIPHON_LIFE_TALENT,\r\n  SPELLS.UNSTABLE_AFFLICTION,\r\n  SPELLS.PHANTOM_SINGULARITY_TALENT,\r\n];\r\nconst debug = false;\r\n\r\nclass Darkglare extends Analyzer {\r\n  static dependencies = {\r\n    enemies: Enemies,\r\n  };\r\n\r\n  _dotDurations = {};\r\n  _hasAC = false;\r\n\r\n  bonusDotDamage = 0;\r\n  darkglareDamage = 0;\r\n  casts = [\r\n    /*\r\n      {\r\n        timestamp: number\r\n        [encoded target string]: {\r\n          targetName: name,\r\n          dots: [dot IDs],\r\n        }\r\n      },\r\n     */\r\n  ];\r\n  dots = {\r\n    /*[encoded target string]: {\r\n        targetName: name\r\n        dots: {\r\n          [dot ID]: {\r\n            cast: timestamp\r\n            expectedEnd: timestamp,\r\n            extendStart: timestamp | null,\r\n            extendExpectedEnd: timestamp | null\r\n          },\r\n        }\r\n      },\r\n    */\r\n  };\r\n\r\n  constructor(...args) {\r\n    super(...args);\r\n    this._dotDurations = getDotDurations(this.selectedCombatant.hasTalent(SPELLS.CREEPING_DEATH_TALENT.id));\r\n    // if player has Absolute Corruption, disregard the Corruption duration (it's permanent debuff then)\r\n    this._hasAC = this.selectedCombatant.hasTalent(SPELLS.ABSOLUTE_CORRUPTION_TALENT.id);\r\n    if (this._hasAC) {\r\n      delete this._dotDurations[SPELLS.CORRUPTION_DEBUFF.id];\r\n    }\r\n\r\n    // event listeners\r\n    this.addEventListener(Events.applydebuff.by(SELECTED_PLAYER).spell(DOT_DEBUFFS), this.onDotApply);\r\n    this.addEventListener(Events.removedebuff.by(SELECTED_PLAYER).spell(DOT_DEBUFFS), this.onDotRemove);\r\n    this.addEventListener(Events.cast.by(SELECTED_PLAYER).spell(SPELLS.SUMMON_DARKGLARE), this._processDarkglareCast);\r\n    this.addEventListener(Events.cast.by(SELECTED_PLAYER).spell(DOT_DEBUFFS), this._processDotCast);\r\n    this.addEventListener(Events.damage.by(SELECTED_PLAYER).spell(DOT_DEBUFFS), this.onDotDamage);\r\n    this.addEventListener(Events.damage.by(SELECTED_PLAYER_PET).spell(SPELLS.SUMMON_DARKGLARE_DAMAGE), this.onDarkglareDamage);\r\n  }\r\n\r\n  onDotApply(event) {\r\n    this._resetDotOnTarget(event);\r\n  }\r\n\r\n  onDotRemove(event) {\r\n    const spellId = event.ability.guid;\r\n    // possible Mythrax or other shenanigans with dotting Mind Controlled players\r\n    if (event.targetIsFriendly) {\r\n      return;\r\n    }\r\n    const encoded = encodeTargetString(event.targetID, event.targetInstance);\r\n    if (!this.dots[encoded] || !this.dots[encoded].dots[spellId]) {\r\n      debug && console.log(`Remove debuff on not-recorded mob - ${encoded}`, event);\r\n      return;\r\n    }\r\n    // remove dot from tracking\r\n    delete this.dots[encoded].dots[spellId];\r\n    // if it was the last dot on a mob, remove mob as well\r\n    if (Object.values(this.dots[encoded].dots).length === 0) {\r\n      delete this.dots[encoded];\r\n    }\r\n  }\r\n\r\n  onDotDamage(event) {\r\n    const spellId = event.ability.guid;\r\n    if (event.targetIsFriendly) {\r\n      return;\r\n    }\r\n    // check if it's an extended dot dmg\r\n    const encoded = encodeTargetString(event.targetID, event.targetInstance);\r\n    if (!this.dots[encoded] || !this.dots[encoded].dots[spellId]) {\r\n      debug && console.log(`Dot tick (${event.ability.name}) on unknown encoded target - ${encoded}, time: ${this.owner.formatTimestamp(event.timestamp, 3)} (${event.timestamp}), current this.dots:`, JSON.parse(JSON.stringify(this.dots)));\r\n      // I know this isn't entirely accurate, but it's better to be a little off than not track the dot altogether (until the first recast)\r\n      // for example Agony casted somehow \"prepull\" (no applybuff or cast in logs), and extended can tick for about 20 seconds without being \"recognized\"\r\n      this._resetDotOnTarget(event);\r\n      return;\r\n    }\r\n    const dotInfo = this.dots[encoded].dots[spellId];\r\n    // this also filters out Corruption damage if player has AC (extendExpectedEnd ends up NaN), which is correct (if it's permanent, it can't get extended - no actual bonus damage)\r\n    const isExtended = dotInfo.extendStart !== null;\r\n    const isInExtendedWindow = dotInfo.expectedEnd <= event.timestamp && event.timestamp <= dotInfo.extendExpectedEnd;\r\n    if (isExtended && isInExtendedWindow) {\r\n      this.bonusDotDamage += event.amount + (event.absorbed || 0);\r\n    }\r\n  }\r\n\r\n  onDarkglareDamage(event) {\r\n    this.darkglareDamage += event.amount + (event.absorbed || 0);\r\n  }\r\n\r\n  _processDarkglareCast(event) {\r\n    // get all current dots on targets from this.dots, record it into this.casts\r\n    const dgCast = {\r\n      timestamp: event.timestamp,\r\n    };\r\n    Object.entries(this.dots).forEach(([encoded, obj]) => {\r\n      // convert string ID keys to numbers\r\n      const dotIds = Object.keys(obj.dots).map(stringId => Number(stringId));\r\n      dgCast[encoded] = {\r\n        targetName: obj.targetName,\r\n        dots: dotIds,\r\n      };\r\n      // while already iterating through the collection, modify it, filling out extendStart and extendExpectedEnd\r\n      Object.values(obj.dots).forEach((dotInfo) => {\r\n        dotInfo.extendStart = event.timestamp;\r\n        // to calculate the extendExpectedEnd, we:\r\n        // take remaining duration at the time of the cast\r\n        const remaining = dotInfo.expectedEnd - event.timestamp;\r\n        // add extend duration to it\r\n        const extended = remaining + BONUS_DURATION;\r\n        // and add it to the time of the cast\r\n        dotInfo.extendExpectedEnd = event.timestamp + extended;\r\n      });\r\n    });\r\n    this.casts.push(dgCast);\r\n  }\r\n\r\n  _processDotCast(event) {\r\n    // if it's a dot, refresh its data in this.dots\r\n    const spellId = event.ability.guid;\r\n    // Corruption cast has different spell ID than the debuff (it's not in DOT_DEBUFF_IDS)\r\n    if (!DOT_DEBUFFS.some(spell => spell.id === spellId) && spellId !== SPELLS.CORRUPTION_CAST.id) {\r\n      return;\r\n    }\r\n    if (event.targetIsFriendly) {\r\n      return;\r\n    }\r\n    this._resetDotOnTarget(event);\r\n  }\r\n\r\n  _resetDotOnTarget(event) {\r\n    const enemy = this.enemies.getEntity(event);\r\n    if (!enemy) {\r\n      return;\r\n    }\r\n    const spellId = event.ability.guid;\r\n    const target = encodeTargetString(event.targetID, event.targetInstance);\r\n    this.dots[target] = this.dots[target] || { targetName: enemy.name, dots: {} };\r\n    this.dots[target].dots[spellId] = {\r\n      cast: event.timestamp,\r\n      expectedEnd: event.timestamp + this._dotDurations[spellId],\r\n      extendStart: null,\r\n      extendExpectedEnd: null,\r\n    };\r\n  }\r\n\r\n  statistic() {\r\n    let totalExtendedDots = 0;\r\n    // for each cast, and each enemy in that cast, count the amount of dots on the enemy (disregard Corruption if player has Absolute Corruption)\r\n    Object.values(this.casts).forEach(cast => {\r\n      Object.keys(cast).filter(key => key !== 'timestamp').forEach(target => {\r\n        if (this._hasAC) {\r\n          totalExtendedDots += cast[target].dots.filter(id => id !== SPELLS.CORRUPTION_DEBUFF.id).length;\r\n        } else {\r\n          totalExtendedDots += cast[target].dots.length;\r\n        }\r\n      });\r\n    });\r\n    const averageExtendedDots = (totalExtendedDots / this.casts.length) || 0;\r\n    const totalDamage = this.bonusDotDamage + this.darkglareDamage;\r\n\r\n    const formatDPS = (amount) => `${formatNumber(amount / this.owner.fightDuration * 1000)} DPS`;\r\n    return (\r\n      <Statistic\r\n        position={STATISTIC_ORDER.CORE(4)}\r\n        size=\"flexible\"\r\n        tooltip={(\r\n          <>\r\n            Damage from extended dots <sup>*</sup>: {formatThousands(this.bonusDotDamage)} ({this.owner.formatItemDamageDone(this.bonusDotDamage)})<br />\r\n            Pet damage: {formatThousands(this.darkglareDamage)} ({this.owner.formatItemDamageDone(this.darkglareDamage)})<br />\r\n            Combined damage: {formatThousands(totalDamage)} ({this.owner.formatItemDamageDone(totalDamage)})<br /><br />\r\n\r\n            <sup>*</sup> This only counts the damage that happened after the dot <u>should have fallen off</u> (but instead was extended with Darkglare).\r\n          </>\r\n        )}\r\n      >\r\n        <BoringSpellValueText spell={SPELLS.SUMMON_DARKGLARE}>\r\n          {formatDPS(this.bonusDotDamage)}<TooltipElement content={(<>damage from DoTs after they <u>should have fallen off</u>, but were extended instead</>)}> <small>bonus damage <sup>*</sup></small></TooltipElement><br />\r\n          {averageExtendedDots.toFixed(1)} <small>average DoTs extended</small><br />\r\n          {formatDPS(totalDamage)}<TooltipElement content=\"including pet damage\"> <small>total damage <sup>*</sup></small></TooltipElement>\r\n        </BoringSpellValueText>\r\n      </Statistic>\r\n    );\r\n  }\r\n}\r\n\r\nexport default Darkglare;\r\n","import React from 'react';\r\n\r\nimport SPELLS from 'common/SPELLS/index';\r\nimport { formatPercentage } from 'common/format';\r\nimport SpellLink from 'common/SpellLink';\r\nimport SpellIcon from 'common/SpellIcon';\r\n\r\nimport Analyzer from 'parser/core/Analyzer';\r\nimport Enemies from 'parser/shared/modules/Enemies';\r\n\r\nimport UptimeBar from 'interface/statistics/components/UptimeBar';\r\n\r\nimport { i18n } from '@lingui/core';\r\nimport { t } from '@lingui/macro';\r\n\r\nclass AgonyUptime extends Analyzer {\r\n  get uptime() {\r\n    return this.enemies.getBuffUptime(SPELLS.AGONY.id) / this.owner.fightDuration;\r\n  }\r\n\r\n  get suggestionThresholds() {\r\n    return {\r\n      actual: this.uptime,\r\n      isLessThan: {\r\n        minor: 0.95,\r\n        average: 0.9,\r\n        major: 0.8,\r\n      },\r\n      style: 'percentage',\r\n    };\r\n  }\r\n\r\n  static dependencies = {\r\n    enemies: Enemies,\r\n  };\r\n\r\n  suggestions(when) {\r\n    let text;\r\n    if (this.selectedCombatant.hasTalent(SPELLS.WRITHE_IN_AGONY_TALENT.id)) {\r\n      text = <>Your <SpellLink id={SPELLS.AGONY.id} /> uptime can be improved as it is your main source of Soul Shards. Try to pay more attention to your Agony on the boss, especially since you're using <SpellLink id={SPELLS.WRITHE_IN_AGONY_TALENT.id} /> talent.</>;\r\n    } else {\r\n      text = <>Your <SpellLink id={SPELLS.AGONY.id} /> uptime can be improved as it is your main source of Soul Shards. Try to pay more attention to your Agony on the boss, perhaps use some debuff tracker.</>;\r\n    }\r\n    when(this.suggestionThresholds)\r\n      .addSuggestion((suggest, actual, recommended) => suggest(text)\r\n        .icon(SPELLS.AGONY.icon)\r\n        .actual(i18n._(t('warlock.affliction.suggestions.agony.uptime')`${formatPercentage(actual)}% Agony uptime`))\r\n        .recommended(`> ${formatPercentage(recommended)}% is recommended`));\r\n  }\r\n\r\n  subStatistic() {\r\n    const history = this.enemies.getDebuffHistory(SPELLS.AGONY.id);\r\n    return (\r\n      <div className=\"flex\">\r\n        <div className=\"flex-sub icon\">\r\n          <SpellIcon id={SPELLS.AGONY.id} />\r\n        </div>\r\n        <div\r\n          className=\"flex-sub value\"\r\n          style={{ width: 140 }}\r\n        >\r\n          {formatPercentage(this.uptime, 0)} % <small>uptime</small>\r\n        </div>\r\n        <div className=\"flex-main chart\" style={{ padding: 15 }}>\r\n          <UptimeBar\r\n            uptimeHistory={history}\r\n            start={this.owner.fight.start_time}\r\n            end={this.owner.fight.end_time}\r\n            style={{ height: '100%' }}\r\n          />\r\n        </div>\r\n      </div>\r\n    );\r\n  }\r\n}\r\n\r\nexport default AgonyUptime;\r\n","import React from 'react';\r\n\r\nimport Analyzer from 'parser/core/Analyzer';\r\nimport Enemies from 'parser/shared/modules/Enemies';\r\n\r\nimport SPELLS from 'common/SPELLS';\r\nimport { formatPercentage } from 'common/format';\r\nimport SpellLink from 'common/SpellLink';\r\nimport SpellIcon from 'common/SpellIcon';\r\n\r\nimport UptimeBar from 'interface/statistics/components/UptimeBar';\r\n\r\nimport { i18n } from '@lingui/core';\r\nimport { t } from '@lingui/macro';\r\n\r\nclass CorruptionUptime extends Analyzer {\r\n  get uptime() {\r\n    return this.enemies.getBuffUptime(SPELLS.CORRUPTION_DEBUFF.id) / this.owner.fightDuration;\r\n  }\r\n\r\n  get suggestionThresholds() {\r\n    return {\r\n      actual: this.uptime,\r\n      isLessThan: {\r\n        minor: 0.95,\r\n        average: 0.9,\r\n        major: 0.8,\r\n      },\r\n      style: 'percentage',\r\n    };\r\n  }\r\n\r\n  static dependencies = {\r\n    enemies: Enemies,\r\n  };\r\n\r\n  suggestions(when) {\r\n    when(this.suggestionThresholds)\r\n      .addSuggestion((suggest, actual, recommended) => suggest(\r\n        <>\r\n          Your <SpellLink id={SPELLS.CORRUPTION_CAST.id} /> uptime can be improved. Try to pay more attention to your Corruption on the boss, perhaps use some debuff tracker.\r\n        </>,\r\n      )\r\n        .icon(SPELLS.CORRUPTION_CAST.icon)\r\n        .actual(i18n._(t('warlock.affliction.suggestions.corruption.uptime')`${formatPercentage(actual)}% Corruption uptime`))\r\n        .recommended(`>${formatPercentage(recommended)}% is recommended`));\r\n  }\r\n\r\n  subStatistic() {\r\n    const history = this.enemies.getDebuffHistory(SPELLS.CORRUPTION_DEBUFF.id);\r\n    return (\r\n      <div className=\"flex\">\r\n        <div className=\"flex-sub icon\">\r\n          <SpellIcon id={SPELLS.CORRUPTION_CAST.id} />\r\n        </div>\r\n        <div\r\n          className=\"flex-sub value\"\r\n          style={{ width: 140 }}\r\n        >\r\n          {formatPercentage(this.uptime, 0)} % <small>uptime</small>\r\n        </div>\r\n        <div className=\"flex-main chart\" style={{ padding: 15 }}>\r\n          <UptimeBar\r\n            uptimeHistory={history}\r\n            start={this.owner.fight.start_time}\r\n            end={this.owner.fight.end_time}\r\n            style={{ height: '100%' }}\r\n          />\r\n        </div>\r\n      </div>\r\n    );\r\n  }\r\n}\r\n\r\nexport default CorruptionUptime;\r\n","import React from 'react';\n\nimport Analyzer from 'parser/core/Analyzer';\nimport Enemies from 'parser/shared/modules/Enemies';\n\nimport { formatPercentage } from 'common/format';\nimport SPELLS from 'common/SPELLS';\nimport SpellLink from 'common/SpellLink';\nimport SpellIcon from 'common/SpellIcon';\n\nimport UptimeBar from 'interface/statistics/components/UptimeBar';\n\nimport { i18n } from '@lingui/core';\nimport { t } from '@lingui/macro';\n\nclass UnstableAfflictionUptime extends Analyzer {\n\n  static dependencies = {\n    enemies: Enemies,\n  };\n\n  get uptime() {\n    return this.enemies.getBuffUptime(SPELLS.UNSTABLE_AFFLICTION.id) / this.owner.fightDuration;\n  }\n\n  get suggestionThresholds() {\n    return {\n      actual: this.uptime,\n     isLessThan: {\n        minor: 0.95,\n        average: 0.9,\n        major: 0.8,\n      },\n      style: 'percentage',\n    };\n  }\n\n  suggestions(when) {\n    when(this.suggestionThresholds)\n      .addSuggestion((suggest, actual, recommended) => suggest(\n          <>\n            Your <SpellLink id={SPELLS.UNSTABLE_AFFLICTION.id} /> uptime can be improved. Try to pay more attention to your Unstable Affliction on the boss, perhaps use some debuff tracker.\n          </>,\n        )\n          .icon(SPELLS.UNSTABLE_AFFLICTION.icon)\n          .actual(i18n._(t('warlock.affliction.suggestions.unstableAffliction.uptime')`${formatPercentage(actual)}% Unstable Affliction uptime.`))\n          .recommended(`> ${formatPercentage(recommended)}% is recommended`));\n  }\n\n  subStatistic() {\n    const history = this.enemies.getCombinedDebuffHistory([SPELLS.UNSTABLE_AFFLICTION.id]);\n    return (\n      <div className=\"flex\">\n        <div className=\"flex-sub icon\">\n          <SpellIcon id={SPELLS.UNSTABLE_AFFLICTION.id} />\n        </div>\n        <div\n            className=\"flex-sub value\"\n            style={{\n              width: 140,\n              paddingRight: 8, // to compensate for the asterisk and align % values\n            }}\n          >\n            {formatPercentage(this.uptime, 0)} % <small>uptime</small>\n        </div>\n        <div className=\"flex-main chart\" style={{ padding: 15 }}>\n          <UptimeBar\n            uptimeHistory={history}\n            start={this.owner.fight.start_time}\n            end={this.owner.fight.end_time}\n            style={{ height: '100%' }}\n          />\n        </div>\n      </div>\n    );\n  }\n}\n\nexport default UnstableAfflictionUptime;\n","import React from 'react';\r\n\r\nimport Analyzer from 'parser/core/Analyzer';\r\nimport Enemies from 'parser/shared/modules/Enemies';\r\n\r\nimport SPELLS from 'common/SPELLS';\r\nimport { formatPercentage } from 'common/format';\r\nimport SpellLink from 'common/SpellLink';\r\nimport SpellIcon from 'common/SpellIcon';\r\n\r\nimport UptimeBar from 'interface/statistics/components/UptimeBar';\r\n\r\nimport { i18n } from '@lingui/core';\r\nimport { t } from '@lingui/macro';\r\n\r\nclass SiphonLifeUptime extends Analyzer {\r\n  get uptime() {\r\n    return this.enemies.getBuffUptime(SPELLS.SIPHON_LIFE_TALENT.id) / this.owner.fightDuration;\r\n  }\r\n\r\n  get suggestionThresholds() {\r\n    return {\r\n      actual: this.uptime,\r\n      isLessThan: {\r\n        minor: 0.95,\r\n        average: 0.9,\r\n        major: 0.8,\r\n      },\r\n      style: 'percentage',\r\n    };\r\n  }\r\n\r\n  static dependencies = {\r\n    enemies: Enemies,\r\n  };\r\n\r\n  constructor(...args) {\r\n    super(...args);\r\n    this.active = this.selectedCombatant.hasTalent(SPELLS.SIPHON_LIFE_TALENT.id);\r\n  }\r\n\r\n  suggestions(when) {\r\n    when(this.suggestionThresholds)\r\n      .addSuggestion((suggest, actual, recommended) => suggest(<>Your <SpellLink id={SPELLS.SIPHON_LIFE_TALENT.id} /> uptime can be improved. Try to pay more attention to your Siphon Life on the boss, perhaps use some debuff tracker.</>)\r\n        .icon(SPELLS.SIPHON_LIFE_TALENT.icon)\r\n        .actual(i18n._(t('warlock.affliction.suggestions.siphonLife.uptime')`${formatPercentage(actual)}% Siphon Life uptime`))\r\n        .recommended(`>${formatPercentage(recommended)}% is recommended`));\r\n  }\r\n\r\n  subStatistic() {\r\n    const history = this.enemies.getDebuffHistory(SPELLS.SIPHON_LIFE_TALENT.id);\r\n    return (\r\n      <div className=\"flex\">\r\n        <div className=\"flex-sub icon\">\r\n          <SpellIcon id={SPELLS.SIPHON_LIFE_TALENT.id} />\r\n        </div>\r\n        <div\r\n          className=\"flex-sub value\"\r\n          style={{ width: 140 }}\r\n        >\r\n          {formatPercentage(this.uptime, 0)} % <small>uptime</small>\r\n        </div>\r\n        <div\r\n          className=\"flex-main chart\"\r\n          style={{ padding: 15 }}\r\n        >\r\n          <UptimeBar\r\n            uptimeHistory={history}\r\n            start={this.owner.fight.start_time}\r\n            end={this.owner.fight.end_time}\r\n            style={{ height: '100%' }}\r\n          />\r\n        </div>\r\n      </div>\r\n    );\r\n  }\r\n}\r\n\r\nexport default SiphonLifeUptime;\r\n","import React from 'react';\r\n\r\nimport Analyzer from 'parser/core/Analyzer';\r\n\r\nimport { STATISTIC_ORDER } from 'interface/others/StatisticsListBox';\r\nimport StatisticBar from 'interface/statistics/StatisticBar';\r\n\r\nimport AgonyUptime from './AgonyUptime';\r\nimport CorruptionUptime from './CorruptionUptime';\r\nimport UnstableAfflictionUptime from './UnstableAfflictionUptime';\r\nimport SiphonLifeUptime from '../../talents/SiphonLifeUptime';\r\n\r\nclass DotUptimeStatisticBox extends Analyzer {\r\n  static dependencies = {\r\n    agonyUptime: AgonyUptime,\r\n    corruptionUptime: CorruptionUptime,\r\n    unstableAfflictionUptime: UnstableAfflictionUptime,\r\n    siphonLifeUptime: SiphonLifeUptime,\r\n  };\r\n\r\n  statistic() {\r\n    return (\r\n      <StatisticBar\r\n        wide\r\n        position={STATISTIC_ORDER.CORE(1)}\r\n      >\r\n        {this.agonyUptime.subStatistic()}\r\n        {this.corruptionUptime.subStatistic()}\r\n        {this.unstableAfflictionUptime.subStatistic()}\r\n        {this.siphonLifeUptime.active && this.siphonLifeUptime.subStatistic()}\r\n      </StatisticBar>\r\n    );\r\n  }\r\n}\r\n\r\nexport default DotUptimeStatisticBox;\r\n","import React from 'react';\n\nimport Analyzer, { SELECTED_PLAYER } from 'parser/core/Analyzer';\nimport Enemies from 'parser/shared/modules/Enemies';\nimport calculateEffectiveDamage from 'parser/core/calculateEffectiveDamage';\nimport { encodeTargetString } from 'parser/shared/modules/EnemyInstances';\nimport Events from 'parser/core/Events';\n\nimport SPELLS from 'common/SPELLS';\nimport SpellLink from 'common/SpellLink';\nimport SpellIcon from 'common/SpellIcon';\nimport { formatPercentage, formatThousands, formatNumber } from 'common/format';\nimport { TooltipElement } from 'common/Tooltip';\n\nimport STATISTIC_CATEGORY from 'interface/others/STATISTIC_CATEGORY';\nimport Statistic from 'interface/statistics/Statistic';\nimport BoringSpellValueText from 'interface/statistics/components/BoringSpellValueText';\nimport UptimeBar from 'interface/statistics/components/UptimeBar';\n\nimport { i18n } from '@lingui/core';\nimport { t } from '@lingui/macro';\n\nconst BONUS_PER_STACK = 0.03;\nconst BUFFER = 50; // for some reason, changedebuffstack triggers twice on the same timestamp for each event, ignore an event if it happened < BUFFER ms after another\nconst debug = false;\n\nclass ShadowEmbrace extends Analyzer {\n\n  static dependencies = {\n    enemies: Enemies,\n  };\n  damage = 0;\n  _lastEventTimestamp = null;\n  debuffs = {\n    0: {\n      // ignored, see comment in stackedUptime getter\n      start: null,\n      count: 1,\n      uptime: 0,\n    },\n    1: {\n      start: null,\n      count: 0,\n      uptime: 0,\n    },\n    2: {\n      start: null,\n      count: 0,\n      uptime: 0,\n    },\n    3: {\n      start: null,\n      count: 0,\n      uptime: 0,\n    },\n  };\n\n  constructor(...args) {\n    super(...args);\n    this.addEventListener(Events.damage.by(SELECTED_PLAYER), this.onDamage);\n    this.addEventListener(Events.changedebuffstack.by(SELECTED_PLAYER).spell(SPELLS.SHADOW_EMBRACE_DEBUFF), this.onChangeDebuffStack);\n  }\n\n  onDamage(event) {\n    const enemy = this.enemies.getEntity(event);\n    if (!enemy) {\n      return;\n    }\n    const shadowEmbrace = enemy.getBuff(SPELLS.SHADOW_EMBRACE_DEBUFF.id);\n    if (!shadowEmbrace) {\n      return;\n    }\n    this.damage += calculateEffectiveDamage(event, shadowEmbrace.stacks * BONUS_PER_STACK);\n  }\n\n  onChangeDebuffStack(event) {\n    if (event.targetIsFriendly) {\n      return;\n    }\n    if (this._lastEventTimestamp !== null && event.timestamp <= this._lastEventTimestamp + BUFFER) {\n      debug && console.log(`!! (${this.owner.formatTimestamp(event.timestamp, 3)}) ignoring duplicate event`);\n      return;\n    }\n    this._lastEventTimestamp = event.timestamp;\n    debug && console.log(`-- (${this.owner.formatTimestamp(event.timestamp, 3)}) changedebuffstack on ${encodeTargetString(event.targetID, event.targetInstance)}`);\n\n    const oldStacks = this.debuffs[event.oldStacks];\n    const newStacks = this.debuffs[event.newStacks];\n    oldStacks.count = Math.max(oldStacks.count - 1, 0);\n    debug && console.log(`OLD (${event.oldStacks}), count reduced to ${oldStacks.count}`);\n    if (oldStacks.count === 0) {\n      oldStacks.uptime += event.timestamp - oldStacks.start;\n      debug && console.log(`OLD (${event.oldStacks}) count 0, updated uptime to ${oldStacks.uptime}`);\n    }\n\n    if (newStacks.count === 0) {\n      newStacks.start = event.timestamp;\n      debug && console.log(`NEW (${event.newStacks}) count 0, started counting`);\n    }\n    newStacks.count += 1;\n    debug && console.log(`NEW (${event.newStacks}), count increased to ${newStacks.count}`);\n  }\n\n  get totalUptimePercentage() {\n    return this.enemies.getBuffUptime(SPELLS.SHADOW_EMBRACE_DEBUFF.id) / this.owner.fightDuration;\n  }\n\n  get suggestionThresholds() {\n    return {\n      actual: this.totalUptimePercentage,\n     isLessThan: {\n        minor: 0.95,\n        average: 0.9,\n        major: 0.8,\n      },\n      style: 'percentage',\n    };\n  }\n\n  get stackedUptime() {\n    const duration = this.owner.fightDuration;\n    // it's easier to calculate no stack uptime as 1 - anyStackUptimePercentage, that's why we ignore this.debuffs[0]\n    return {\n      0: 1 - this.totalUptimePercentage,\n      1: this.debuffs[1].uptime / duration,\n      2: this.debuffs[2].uptime / duration,\n      3: this.debuffs[3].uptime / duration,\n    };\n  }\n\n  get dps() {\n    return this.damage / this.owner.fightDuration * 1000;\n  }\n\n  suggestions(when) {\n    when(this.suggestionThresholds)\n      .addSuggestion((suggest, actual, recommended) => suggest(\n          <>\n            Your <SpellLink id={SPELLS.SHADOW_EMBRACE_DEBUFF.id} /> uptime can be improved. Try to pay more attention to your Shadow Embrace on the boss, perhaps use some debuff tracker.\n          </>,\n        )\n          .icon(SPELLS.SHADOW_EMBRACE_DEBUFF.icon)\n          .actual(i18n._(t('warlock.affliction.suggestions.shadowembrace.uptime')`${formatPercentage(actual)}% Shadow Embrace uptime`))\n          .recommended(`>${formatPercentage(recommended)}% is recommended`));\n  }\n\n  subStatistic() {\n    const history = this.enemies.getDebuffHistory(SPELLS.SHADOW_EMBRACE_DEBUFF.id);\n    return (\n      <div className=\"flex\">\n        <div className=\"flex-sub icon\">\n          <SpellIcon id={SPELLS.SHADOW_EMBRACE_DEBUFF.id} />\n        </div>\n        <div\n          className=\"flex-sub value\"\n          style={{ width: 140 }}\n        >\n          {formatPercentage(this.uptime, 0)} % <small>uptime</small>\n        </div>\n        <div className=\"flex-main chart\" style={{ padding: 15 }}>\n          <UptimeBar\n            uptimeHistory={history}\n            start={this.owner.fight.start_time}\n            end={this.owner.fight.end_time}\n            style={{ height: '100%' }}\n          />\n        </div>\n      </div>\n    );\n  }\n\n  statistic() {\n    const uptimes = this.stackedUptime;\n    return (\n      <Statistic\n        category={STATISTIC_CATEGORY.GENERAL}\n        size=\"flexible\"\n        tooltip={`${formatThousands(this.damage)} bonus damage`}\n      >\n        <BoringSpellValueText spell={SPELLS.SHADOW_EMBRACE}>\n          {formatPercentage(this.totalUptimePercentage)} %\n                <TooltipElement content={(\n                  <>\n                    No stacks: {formatPercentage(uptimes[0])} %<br />\n                    1 stack: {formatPercentage(uptimes[1])} %<br />\n                    2 stacks: {formatPercentage(uptimes[2])} %<br />\n                    3 stacks: {formatPercentage(uptimes[3])} %\n                  </>\n                )}>\n                  <small> uptime <sup>*</sup></small>\n                </TooltipElement><br />\n          {formatNumber(this.dps)} DPS <small>{formatPercentage(this.owner.getPercentageOfTotalDamageDone(this.damage))} % of total</small>\n        </BoringSpellValueText>\n      </Statistic>\n    );\n  }\n}\n\nexport default ShadowEmbrace;\n","import ResourceTracker from 'parser/shared/modules/resources/resourcetracker/ResourceTracker';\r\nimport RESOURCE_TYPES from 'game/RESOURCE_TYPES';\r\n\r\nclass SoulShardTracker extends ResourceTracker {\r\n  constructor(...args) {\r\n    super(...args);\r\n    this.resource = RESOURCE_TYPES.SOUL_SHARDS;\r\n  }\r\n\r\n  onCast(event) {\r\n    if (!this.shouldProcessCastEvent(event)) {\r\n      return;\r\n    }\r\n    // only processes events where there is a Soul Shard class resource info in the event\r\n    // intentionally lower the resources because we get energize events ranging in numbers 0 - 5, not 0 - 50\r\n    const index = this._getClassResourceIndex(event);\r\n    event.classResources[index].amount /= 10;\r\n    event.classResources[index].cost /= 10;\r\n    event.classResources[index].max /= 10;\r\n    super.onCast && super.onCast(event);\r\n  }\r\n\r\n  _getClassResourceIndex(event) {\r\n    return Object.keys(event.classResources).find(key => event.classResources[key].type === RESOURCE_TYPES.SOUL_SHARDS) || 0;\r\n    // \"technically incorrect\", if find() returns 0 as a valid index, it also gets evaluated as \"false\", but || 0 makes it 0 anyway so it's fine\r\n  }\r\n}\r\n\r\nexport default SoulShardTracker;\r\n","import React from 'react';\r\n\r\nimport Analyzer from 'parser/core/Analyzer';\r\nimport ResourceBreakdown from 'parser/shared/modules/resources/resourcetracker/ResourceBreakdown';\r\n\r\nimport SPELLS from 'common/SPELLS';\r\n\r\nimport Panel from 'interface/others/Panel';\r\nimport STATISTIC_ORDER from 'interface/others/STATISTIC_ORDER';\r\nimport Statistic from 'interface/statistics/Statistic';\r\nimport BoringSpellValueText from 'interface/statistics/components/BoringSpellValueText';\r\n\r\nimport { i18n } from '@lingui/core';\r\nimport { t } from '@lingui/macro';\r\n\r\nimport '../../../shared/modules/soulshards/SoulShardDetails.css';\r\nimport SoulShardTracker from './SoulShardTracker';\r\n\r\nclass SoulShardDetails extends Analyzer {\r\n  get suggestionThresholds() {\r\n    const shardsWasted = this.soulShardTracker.wasted;\r\n    const shardsWastedPerMinute = (shardsWasted / this.owner.fightDuration) * 1000 * 60;\r\n    return {\r\n      actual: shardsWastedPerMinute,\r\n      isGreaterThan: {\r\n        minor: 5 / 10, // 5 shards in 10 minute fight\r\n        average: 5 / 3, // 5 shards in 3 minute fight\r\n        major: 10 / 3, // 10 shards in 3 minute fight\r\n      },\r\n      style: 'decimal',\r\n    };\r\n  }\r\n\r\n  static dependencies = {\r\n    soulShardTracker: SoulShardTracker,\r\n  };\r\n\r\n  suggestions(when) {\r\n    const shardsWasted = this.soulShardTracker.wasted;\r\n    when(this.suggestionThresholds)\r\n      .addSuggestion((suggest, actual, recommended) => suggest('You are wasting Soul Shards. Try to use them and not let them cap and go to waste unless you\\'re preparing for bursting adds etc.')\r\n        .icon(SPELLS.SOUL_SHARDS.icon)\r\n        .actual(i18n._(t('warlock.affliction.suggestions.soulShards.wastedPerMinute')`${shardsWasted} Soul Shards wasted (${actual.toFixed(2)} per minute)`))\r\n        .recommended(`< ${recommended.toFixed(2)} Soul Shards per minute wasted are recommended`));\r\n  }\r\n\r\n  statistic() {\r\n    const shardsWasted = this.soulShardTracker.wasted;\r\n    return (\r\n      <Statistic\r\n        position={STATISTIC_ORDER.CORE(3)}\r\n        size=\"flexible\"\r\n        tooltip={(<>In order for Focus Magic to compete with the other talents on that row, you need to ensure you are getting as much uptime out of the buff as possible. Therefore, if you forget to put the buff on another player or if they player you gave it to is not getting crits very often, then you might need to consider giving the buff to someone else. Ideally, you should aim to trade buffs with another mage who has also taken Focus Magic so you both get the full benefit.</>)}\r\n      >\r\n        <BoringSpellValueText spell={SPELLS.SOUL_SHARDS}>\r\n          {shardsWasted} <small>Wasted Soul Shards</small>\r\n        </BoringSpellValueText>\r\n      </Statistic>\r\n    );\r\n  }\r\n\r\n  tab() {\r\n    return {\r\n      title: 'Soul Shard usage',\r\n      url: 'soul-shards',\r\n      render: () => (\r\n        <Panel>\r\n          <ResourceBreakdown\r\n            tracker={this.soulShardTracker}\r\n            showSpenders\r\n          />\r\n        </Panel>\r\n      ),\r\n    };\r\n  }\r\n}\r\n\r\nexport default SoulShardDetails;\r\n","import SPELLS from 'common/SPELLS';\r\nimport CoreChanneling from 'parser/shared/modules/Channeling';\r\nimport Events from 'parser/core/Events';\r\nimport { SELECTED_PLAYER } from 'parser/core/Analyzer';\r\n\r\n/**\r\n * Drain Soul don't reveal in the combatlog when channeling begins and ends, this fabricates the required events so that ABC can handle it properly.\r\n * Combatlog event order is messy, it often looks like:\r\n * 1. applydebuff Crackling Jade Lightning\r\n * 2. begincast/cast new spell\r\n * 3. removedebuff Crackling Jade Lightning\r\n * To avoid Drain Soul as being marked \"canceled\" when we start a new spell we mark it as ended instead on the begincast/cast.\r\n */\r\nclass Channeling extends CoreChanneling {\r\n  constructor(options) {\r\n    super(options);\r\n    this.addEventListener(Events.removedebuff.by(SELECTED_PLAYER).spell(SPELLS.DRAIN_SOUL_TALENT), this.onRemoveDebuff);\r\n  }\r\n\r\n  // TODO: add shared module tracking Drain Life similarly, make this class extend that one instead\r\n  onCast(event) {\r\n    if (event.ability.guid === SPELLS.DRAIN_SOUL_TALENT.id) {\r\n      this.beginChannel(event);\r\n      return;\r\n    }\r\n    super.onCast(event);\r\n  }\r\n\r\n  cancelChannel(event, ability) {\r\n    if (this.isChannelingSpell(SPELLS.DRAIN_SOUL_TALENT.id)) {\r\n      // If a channeling spell is \"canceled\" it was actually just ended, so if it looks canceled then instead just mark it as ended\r\n      this.log('Marking', this._currentChannel.ability.name, 'as ended since we started casting something else');\r\n      this.endChannel(event);\r\n    } else {\r\n      super.cancelChannel(event, ability);\r\n    }\r\n  }\r\n\r\n  // Looking at `removedebuff` will includes progress towards a tick that never happened. This progress could be considered downtime as it accounts for nothing.\r\n  // Except with Malefic Grasp you are still increasing your DoT DPS. So maybe it's still valuable? How far progress into a tick is it more DPS to hold for the next tick before interrupting and casting a next spell?\r\n  // If it's ever decided to consider the time between last tick and channel ending as downtime, just change the endchannel trigger.\r\n  onRemoveDebuff(event) {\r\n    if (!this.isChannelingSpell(SPELLS.DRAIN_SOUL_TALENT.id)) {\r\n      // This may be true if we did the event-order fix in begincast/cast and it was already ended there.\r\n      return;\r\n    }\r\n    this.endChannel(event);\r\n  }\r\n}\r\n\r\nexport default Channeling;\r\n","import CoreGlobalCooldown from 'parser/shared/modules/GlobalCooldown';\r\n\r\nimport SPELLS from 'common/SPELLS';\r\n\r\n/**\r\n * Drain Soul's cast event is actually a beginchannel event, so it shouldn't add the GCD as active time.\r\n */\r\nclass GlobalCooldown extends CoreGlobalCooldown {\r\n  onCast(event) {\r\n    if (event.ability.guid === SPELLS.DRAIN_SOUL_TALENT.id) {\r\n      // This GCD gets handled by the `beginchannel` event\r\n      return;\r\n    }\r\n    super.onCast(event);\r\n  }\r\n}\r\n\r\nexport default GlobalCooldown;\r\n","import React from 'react';\r\n\r\nimport Analyzer, { SELECTED_PLAYER } from 'parser/core/Analyzer';\r\nimport Events from 'parser/core/Events';\r\n\r\nimport SPELLS from 'common/SPELLS';\r\n\r\nimport STATISTIC_CATEGORY from 'interface/others/STATISTIC_CATEGORY';\r\nimport Statistic from 'interface/statistics/Statistic';\r\nimport BoringSpellValueText from 'interface/statistics/components/BoringSpellValueText';\r\n\r\nconst BUFF_DURATION = 12000;\r\nconst BUFFER = 100;\r\n\r\nclass Nightfall extends Analyzer {\r\n  wastedProcs = 0;\r\n  buffApplyTimestamp = null;\r\n\r\n  constructor(...args) {\r\n    super(...args);\r\n    this.active = this.selectedCombatant.hasTalent(SPELLS.NIGHTFALL_TALENT.id);\r\n    this.addEventListener(Events.applybuff.by(SELECTED_PLAYER).spell(SPELLS.NIGHTFALL_BUFF), this.onNightfallApplyRefresh);\r\n    this.addEventListener(Events.refreshbuff.by(SELECTED_PLAYER).spell(SPELLS.NIGHTFALL_BUFF), this.onNightfallApplyRefresh);\r\n    this.addEventListener(Events.removebuff.by(SELECTED_PLAYER).spell(SPELLS.NIGHTFALL_BUFF), this.onNightfallRemove);\r\n  }\r\n\r\n  onNightfallApplyRefresh(event) {\r\n    if (this.buffApplyTimestamp !== null) {\r\n      this.wastedProcs += 1;\r\n    }\r\n    this.buffApplyTimestamp = event.timestamp;\r\n  }\r\n\r\n  onNightfallRemove(event) {\r\n    const expectedEnd = this.buffApplyTimestamp + BUFF_DURATION;\r\n    if ((expectedEnd - BUFFER) <= event.timestamp && event.timestamp <= (expectedEnd + BUFFER)) {\r\n      // buff fell off naturally\r\n      this.wastedProcs += 1;\r\n    }\r\n    this.buffApplyTimestamp = null;\r\n  }\r\n\r\n  statistic() {\r\n    return (\r\n      <Statistic\r\n        category={STATISTIC_CATEGORY.TALENTS}\r\n        size=\"flexible\"\r\n      >\r\n        <BoringSpellValueText spell={SPELLS.NIGHTFALL_TALENT}>\r\n          {this.wastedProcs} <small>wasted procs</small>\r\n        </BoringSpellValueText>\r\n      </Statistic>\r\n    );\r\n  }\r\n}\r\n\r\nexport default Nightfall;\r\n","import React from 'react';\r\n\r\nimport Analyzer, { SELECTED_PLAYER } from 'parser/core/Analyzer';\r\nimport AbilityTracker from 'parser/shared/modules/AbilityTracker';\r\nimport Enemies from 'parser/shared/modules/Enemies';\r\nimport Events from 'parser/core/Events';\r\n\r\nimport SPELLS from 'common/SPELLS';\r\nimport { formatPercentage, formatThousands, formatNumber } from 'common/format';\r\nimport SpellLink from 'common/SpellLink';\r\n\r\nimport CriticalStrikeIcon from 'interface/icons/CriticalStrike';\r\nimport STATISTIC_CATEGORY from 'interface/others/STATISTIC_CATEGORY';\r\nimport Statistic from 'interface/statistics/Statistic';\r\nimport BoringSpellValueText from 'interface/statistics/components/BoringSpellValueText';\r\n\r\nimport { i18n } from '@lingui/core';\r\nimport { t } from '@lingui/macro';\r\n\r\nimport SoulShardTracker from '../soulshards/SoulShardTracker';\r\n// limit to filter out relevant removedebuffs (those what I'm interested in happen either at the same timestamp as energize, or about 20ms afterwards (tested on 2 logs, didn't surpass 30ms))\r\n// it's still possible that it can be a coincidence (mob dies and at the same time something falls off somewhere unrelated), but shouldn't happen too much\r\nconst ENERGIZE_REMOVEDEBUFF_THRESHOLD = 100;\r\n\r\nclass DrainSoul extends Analyzer {\r\n  get suggestionThresholds() {\r\n    return {\r\n      actual: this.mobsSniped / this.totalNumOfAdds,\r\n      isLessThan: {\r\n        minor: 0.9,\r\n        average: 0.75,\r\n        major: 0.5,\r\n      },\r\n      style: 'percentage',\r\n    };\r\n  }\r\n\r\n  static dependencies = {\r\n    enemies: Enemies,\r\n    soulShardTracker: SoulShardTracker,\r\n    abilityTracker: AbilityTracker,\r\n  };\r\n  _lastEnergize = null;\r\n  // this is to avoid counting soul shards from boss kill, the SoulShardTracker module tracks all shards gained and we're not interested in those we gained from boss kill\r\n  _subtractBossShards = 0;\r\n  _lastEnergizeWasted = false;\r\n  _shardsGained = 0;\r\n  totalNumOfAdds = 0;\r\n  mobsSniped = 0;\r\n\r\n  constructor(...args) {\r\n    super(...args);\r\n    this.active = this.selectedCombatant.hasTalent(SPELLS.DRAIN_SOUL_TALENT.id);\r\n    this.addEventListener(Events.energize.by(SELECTED_PLAYER).spell(SPELLS.DRAIN_SOUL_KILL_SHARD_GEN), this.onDrainSoulEnergize);\r\n    this.addEventListener(Events.removedebuff.by(SELECTED_PLAYER).spell(SPELLS.DRAIN_SOUL_TALENT), this.onDrainSoulRemove);\r\n    this.addEventListener(Events.fightend, this.onFinished);\r\n  }\r\n\r\n  onDrainSoulEnergize(event) {\r\n    this.mobsSniped += 1;\r\n    if (this._lastEnergize !== event.timestamp) {\r\n      this._lastEnergize = event.timestamp;\r\n      this._lastEnergizeWasted = event.waste > 0;\r\n    }\r\n  }\r\n\r\n  onDrainSoulRemove(event) {\r\n    if (event.timestamp < this._lastEnergize + ENERGIZE_REMOVEDEBUFF_THRESHOLD) {\r\n      const enemy = this.enemies.getEntity(event);\r\n      if (!enemy) {\r\n        return;\r\n      }\r\n      if (enemy.type.toLowerCase() === 'boss' && !this._lastEnergizeWasted) {\r\n        // it's a boss kill and we didn't waste the shard, subtract it\r\n        this._subtractBossShards += 1;\r\n      }\r\n    }\r\n  }\r\n\r\n  onFinished() {\r\n    const allEnemies = this.enemies.getEntities();\r\n    this.totalNumOfAdds = Object.values(allEnemies)\r\n      .filter(enemy => enemy.type === 'NPC')\r\n      .reduce((count, enemy) => count + enemy._baseInfo.fights[0].instances, 0);\r\n    this._shardsGained = this.soulShardTracker.getGeneratedBySpell(SPELLS.DRAIN_SOUL_KILL_SHARD_GEN.id) - this._subtractBossShards;\r\n  }\r\n\r\n  suggestions(when) {\r\n    when(this.suggestionThresholds)\r\n      .addSuggestion((suggest, actual, recommended) => suggest(\r\n        <>\r\n          You sniped {formatPercentage(actual)} % of mobs in this fight ({this.mobsSniped - this._subtractBossShards} / {this.totalNumOfAdds}) for total of {this._shardsGained} Soul Shards. You could get up to {this.totalNumOfAdds} Shards from them. Try to snipe shards from adds (cast <SpellLink id={SPELLS.DRAIN_SOUL_TALENT.id} /> on them before they die) as it is a great source of extra Soul Shards.<br /><br />\r\n          <small>Note that the number of adds <em>might be a bit higher than usual</em>, as there sometimes are adds that die too quickly, aren't meant to be killed or are not killed in the fight.</small>\r\n        </>,\r\n      )\r\n        .icon('ability_hunter_snipershot')\r\n        .actual(i18n._(t('warlock.affliction.suggestions.drainSoul.mobsSniped')`${formatPercentage(actual)} % of mobs sniped.`))\r\n        .recommended(`>= ${formatPercentage(recommended)} % is recommended`));\r\n  }\r\n\r\n  statistic() {\r\n    const ds = this.abilityTracker.getAbility(SPELLS.DRAIN_SOUL_TALENT.id);\r\n    const damage = ds.damageEffective + ds.damageAbsorbed;\r\n    const dps = damage / this.owner.fightDuration * 1000;\r\n    return (\r\n      <Statistic\r\n        category={STATISTIC_CATEGORY.TALENTS}\r\n        size=\"flexible\"\r\n        tooltip={`${formatThousands(damage)} total damage`}\r\n      >\r\n        <BoringSpellValueText spell={SPELLS.DRAIN_SOUL_TALENT}>\r\n          {formatNumber(dps)} DPS <small>{formatPercentage(this.owner.getPercentageOfTotalDamageDone(damage))} % of total</small><br />\r\n          <CriticalStrikeIcon /> {this._shardsGained} <small>shards sniped</small>\r\n        </BoringSpellValueText>\r\n      </Statistic>\r\n    );\r\n  }\r\n}\r\n\r\nexport default DrainSoul;\r\n","import React from 'react';\r\n\r\nimport Analyzer, { SELECTED_PLAYER } from 'parser/core/Analyzer';\r\nimport calculateEffectiveDamage from 'parser/core/calculateEffectiveDamage';\r\nimport Events from 'parser/core/Events';\r\n\r\nimport SPELLS from 'common/SPELLS';\r\nimport { formatThousands, formatNumber, formatPercentage } from 'common/format';\r\nimport Statistic from 'interface/statistics/Statistic';\r\nimport BoringSpellValueText from 'interface/statistics/components/BoringSpellValueText';\r\nimport STATISTIC_CATEGORY from 'interface/others/STATISTIC_CATEGORY';\r\n\r\nconst AC_DAMAGE_BONUS = 0.15;\r\n\r\nclass AbsoluteCorruption extends Analyzer {\r\n  get dps() {\r\n    return this.bonusDmg / this.owner.fightDuration * 1000;\r\n  }\r\n\r\n  bonusDmg = 0;\r\n\r\n  constructor(...args) {\r\n    super(...args);\r\n    this.active = this.selectedCombatant.hasTalent(SPELLS.ABSOLUTE_CORRUPTION_TALENT.id);\r\n    this.addEventListener(Events.damage.by(SELECTED_PLAYER).spell(SPELLS.CORRUPTION_DEBUFF), this.onCorruptionDamage);\r\n  }\r\n\r\n  onCorruptionDamage(event) {\r\n    this.bonusDmg += calculateEffectiveDamage(event, AC_DAMAGE_BONUS);\r\n  }\r\n\r\n  statistic() {\r\n    return (\r\n      <Statistic\r\n        category={STATISTIC_CATEGORY.TALENTS}\r\n        size=\"flexible\"\r\n        tooltip={(\r\n          <>\r\n            {formatThousands(this.bonusDmg)} bonus damage<br /><br />\r\n\r\n            Note: This only accounts for the passive 15% increased damage of Corruption. Actual bonus damage should be higher due to saved GCDs.\r\n          </>\r\n        )}\r\n      >\r\n        <BoringSpellValueText spell={SPELLS.ABSOLUTE_CORRUPTION_TALENT}>\r\n          {formatNumber(this.dps)} DPS <small>{formatPercentage(this.owner.getPercentageOfTotalDamageDone(this.bonusDmg))} % of total</small>\r\n        </BoringSpellValueText>\r\n      </Statistic>\r\n    );\r\n  }\r\n}\r\n\r\nexport default AbsoluteCorruption;\r\n","import React from 'react';\r\n\r\nimport Analyzer from 'parser/core/Analyzer';\r\nimport AbilityTracker from 'parser/shared/modules/AbilityTracker';\r\n\r\nimport SPELLS from 'common/SPELLS';\r\nimport { formatThousands, formatNumber, formatPercentage } from 'common/format';\r\nimport STATISTIC_CATEGORY from 'interface/others/STATISTIC_CATEGORY';\r\nimport Statistic from 'interface/statistics/Statistic';\r\nimport BoringSpellValueText from 'interface/statistics/components/BoringSpellValueText';\r\n\r\nclass PhantomSingularity extends Analyzer {\r\n  static dependencies = {\r\n    abilityTracker: AbilityTracker,\r\n  };\r\n\r\n  constructor(...args) {\r\n    super(...args);\r\n    this.active = this.selectedCombatant.hasTalent(SPELLS.PHANTOM_SINGULARITY_TALENT.id);\r\n  }\r\n\r\n  statistic() {\r\n    const spell = this.abilityTracker.getAbility(SPELLS.PHANTOM_SINGULARITY_TALENT.id);\r\n    const damage = spell.damageEffective + spell.damageAbsorbed;\r\n    const dps = damage / this.owner.fightDuration * 1000;\r\n    return (\r\n      <Statistic\r\n        category={STATISTIC_CATEGORY.TALENTS}\r\n        size=\"flexible\"\r\n        tooltip={`${formatThousands(damage)} damage`}\r\n      >\r\n        <BoringSpellValueText spell={SPELLS.PHANTOM_SINGULARITY_TALENT}>\r\n          {formatNumber(dps)} DPS <small>{formatPercentage(this.owner.getPercentageOfTotalDamageDone(damage))} % of total</small>\r\n        </BoringSpellValueText>\r\n      </Statistic>\r\n    );\r\n  }\r\n}\r\n\r\nexport default PhantomSingularity;\r\n","import React from 'react';\r\n\r\nimport Analyzer, { SELECTED_PLAYER } from 'parser/core/Analyzer';\r\nimport AbilityTracker from 'parser/shared/modules/AbilityTracker';\r\nimport Events from 'parser/core/Events';\r\n\r\nimport SPELLS from 'common/SPELLS';\r\nimport { formatThousands, formatPercentage, formatNumber } from 'common/format';\r\n\r\nimport STATISTIC_CATEGORY from 'interface/others/STATISTIC_CATEGORY';\r\nimport Statistic from 'interface/statistics/Statistic';\r\nimport BoringSpellValueText from 'interface/statistics/components/BoringSpellValueText';\r\n\r\n// the application of the debuff (and first tick of damage) is instant after the cast, but seems to have a little bit of leeway across multiple enemies\r\n// this example log: /report/mvK3PYrbcwfj9qTG/15-LFR+Zul+-+Kill+(3:49)/16-Residentevil shows around +15ms, so setting 100ms buffer to account for lags\r\nconst BUFFER = 100;\r\nconst debug = false;\r\n\r\nclass VileTaint extends Analyzer {\r\n  static dependencies = {\r\n    abilityTracker: AbilityTracker,\r\n  };\r\n\r\n  _castTimestamp = null;\r\n  _currentCastCount = 0;\r\n  casts = [];\r\n\r\n  constructor(...args) {\r\n    super(...args);\r\n    this.active = this.selectedCombatant.hasTalent(SPELLS.VILE_TAINT_TALENT.id);\r\n    this.addEventListener(Events.cast.by(SELECTED_PLAYER).spell(SPELLS.VILE_TAINT_TALENT), this.onVileTaintCast);\r\n    this.addEventListener(Events.applydebuff.by(SELECTED_PLAYER).spell(SPELLS.VILE_TAINT_TALENT), this.onVileTaintApplyDebuff);\r\n    this.addEventListener(Events.fightend, this.onFinished);\r\n  }\r\n\r\n  onVileTaintCast(event) {\r\n    if (this._castTimestamp !== null) {\r\n      // we've casted VT at least once, so we should add the current (at this time the previous) cast first before resetting the counter\r\n      this.casts.push(this._currentCastCount);\r\n    }\r\n    this._castTimestamp = event.timestamp;\r\n    this._currentCastCount = 0;\r\n  }\r\n\r\n  onVileTaintApplyDebuff(event) {\r\n    if (event.timestamp <= this._castTimestamp + BUFFER) {\r\n      this._currentCastCount += 1;\r\n    } else {\r\n      debug && console.log('Vile Taint debuff applied outside of the 100ms buffer after cast');\r\n    }\r\n  }\r\n\r\n  onFinished() {\r\n    // on each cast, the previous one is saved, so the \"results\" of the last VT cast in fight aren't saved, so do it on fight end\r\n    this.casts.push(this._currentCastCount);\r\n  }\r\n\r\n  statistic() {\r\n    const spell = this.abilityTracker.getAbility(SPELLS.VILE_TAINT_TALENT.id);\r\n    const damage = spell.damageEffective + spell.damageAbsorbed;\r\n    const averageTargetsHit = (this.casts.reduce((total, current) => total + current, 0) / spell.casts) || 0;\r\n    const dps = damage / this.owner.fightDuration * 1000;\r\n    return (\r\n      <Statistic\r\n        category={STATISTIC_CATEGORY.TALENTS}\r\n        size=\"flexible\"\r\n        tooltip={(\r\n          <>\r\n            {formatThousands(damage)} damage<br />\r\n            Average targets hit: {averageTargetsHit.toFixed(2)}\r\n          </>\r\n        )}\r\n      >\r\n        <BoringSpellValueText spell={SPELLS.VILE_TAINT_TALENT}>\r\n          {formatNumber(dps)} DPS <small>{formatPercentage(this.owner.getPercentageOfTotalDamageDone(damage))} % of total</small>\r\n        </BoringSpellValueText>\r\n      </Statistic>\r\n    );\r\n  }\r\n}\r\n\r\nexport default VileTaint;\r\n","import React from 'react';\r\n\r\nimport Analyzer, { SELECTED_PLAYER } from 'parser/core/Analyzer';\r\nimport Events from 'parser/core/Events';\r\nimport Enemies from 'parser/shared/modules/Enemies';\r\nimport calculateEffectiveDamage from 'parser/core/calculateEffectiveDamage';\r\n\r\nimport SPELLS from 'common/SPELLS';\r\nimport SpellLink from 'common/SpellLink';\r\nimport { formatPercentage, formatThousands, formatNumber } from 'common/format';\r\n\r\nimport STATISTIC_CATEGORY from 'interface/others/STATISTIC_CATEGORY';\r\nimport Statistic from 'interface/statistics/Statistic';\r\nimport BoringSpellValueText from 'interface/statistics/components/BoringSpellValueText';\r\n\r\nimport { i18n } from '@lingui/core';\r\nimport { t } from '@lingui/macro';\r\n\r\nconst HAUNT_DAMAGE_BONUS = 0.1;\r\n\r\nclass Haunt extends Analyzer {\r\n  get uptime() {\r\n    return this.enemies.getBuffUptime(SPELLS.HAUNT_TALENT.id) / this.owner.fightDuration;\r\n  }\r\n\r\n  get dps() {\r\n    return this.bonusDmg / this.owner.fightDuration * 1000;\r\n  }\r\n\r\n  get suggestionThresholds() {\r\n    return {\r\n      actual: this.uptime,\r\n      isLessThan: {\r\n        minor: 0.9,\r\n        average: 0.85,\r\n        major: 0.75,\r\n      },\r\n      style: 'percentage',\r\n    };\r\n  }\r\n\r\n  static dependencies = {\r\n    enemies: Enemies,\r\n  };\r\n  bonusDmg = 0;\r\n  totalTicks = 0;\r\n  buffedTicks = 0;\r\n\r\n  constructor(...args) {\r\n    super(...args);\r\n    this.active = this.selectedCombatant.hasTalent(SPELLS.HAUNT_TALENT.id);\r\n    this.addEventListener(Events.damage.by(SELECTED_PLAYER), this.onDamage);\r\n  }\r\n\r\n  onDamage(event) {\r\n    const target = this.enemies.getEntity(event);\r\n    if (!target) {\r\n      return;\r\n    }\r\n\r\n    const hasHaunt = target.hasBuff(SPELLS.HAUNT_TALENT.id, event.timestamp);\r\n\r\n    if (hasHaunt) {\r\n      this.bonusDmg += calculateEffectiveDamage(event, HAUNT_DAMAGE_BONUS);\r\n    }\r\n  }\r\n\r\n  suggestions(when) {\r\n    when(this.suggestionThresholds)\r\n      .addSuggestion((suggest, actual, recommended) => suggest(\r\n        <>\r\n          Your <SpellLink id={SPELLS.HAUNT_TALENT.id} /> debuff uptime is too low. While it's usually not possible to get 100% uptime due to travel and cast time, you should aim for as much uptime on the debuff as possible.\r\n        </>,\r\n      )\r\n        .icon(SPELLS.HAUNT_TALENT.icon)\r\n        .actual(i18n._(t('warlock.affliction.suggestions.haunt.uptime')`${formatPercentage(actual)}% Haunt uptime.`))\r\n        .recommended(`> ${formatPercentage(recommended)}% is recommended`));\r\n  }\r\n\r\n  statistic() {\r\n    return (\r\n      <Statistic\r\n        category={STATISTIC_CATEGORY.TALENTS}\r\n        size=\"flexible\"\r\n        tooltip={(\r\n          <>\r\n            {formatThousands(this.bonusDmg)} bonus damage<br />\r\n          </>\r\n        )}\r\n      >\r\n        <BoringSpellValueText spell={SPELLS.HAUNT_TALENT}>\r\n          {formatPercentage(this.uptime)} % <small>uptime</small><br />\r\n          {formatNumber(this.dps)} DPS <small>{formatPercentage(this.owner.getPercentageOfTotalDamageDone(this.bonusDmg))} % of total</small>\r\n        </BoringSpellValueText>\r\n      </Statistic>\r\n    );\r\n  }\r\n}\r\n\r\nexport default Haunt;\r\n","\r\nimport { AnyEvent, DamageEvent, EventType, ApplyDebuffEvent } from 'parser/core/Events';\r\nimport EventsNormalizer from 'parser/core/EventsNormalizer';\r\n\r\n// We can stop the normalization after 5 seconds. Any dot that was applied during pre-pull should've ticked.\r\nconst CUTOFF = 5000;\r\n\r\nexport interface Dot {\r\n  debuffId: number;\r\n}\r\n\r\nexport interface DotStatus {\r\n  debuffId: number;\r\n  missingApplyDebuff?: boolean;\r\n  // The first damage event we find of a dot that is missing an apply debuff event. Used to fabricate the apply debuff event.\r\n  damageEvent?: DamageEvent;\r\n}\r\n\r\n/*\r\n * I noticed in my report that it was missing the apply debuff event for my unstable affliction. I believe I cast it during the pre-pull.\r\n * The uptime calculations look for the time between the apply debuff and remove debuff events, and without the apply debuff event, it was doing crazy things!\r\n */\r\nclass MissingDotApplyDebuffPrePull extends EventsNormalizer {\r\n\r\n  static dots: Dot[] = [];\r\n\r\n  normalize(events: AnyEvent[]): AnyEvent[] {\r\n    const ctor = this.constructor as typeof MissingDotApplyDebuffPrePull;\r\n\r\n    const fightStartTimestamp = this.owner.fight.start_time;\r\n    const cutoff = fightStartTimestamp + CUTOFF;\r\n\r\n    const dotStatusesMap: { [index: number]: DotStatus } = ctor.dots.reduce((map, debuff) => {\r\n      map[debuff.debuffId] = { handled: false, missingApplyDebuff: null };\r\n      return map;\r\n    }, {} as any);\r\n\r\n    for (let i = 0; i < events.length; i += 1) {\r\n      const event = events[i];\r\n\r\n      if (event.timestamp > cutoff) {\r\n        break;\r\n      }\r\n\r\n      if (event.type === EventType.ApplyDebuff) {\r\n        const dotStatus = dotStatusesMap[event.ability.guid];\r\n        if (dotStatus == null) {\r\n          continue;\r\n        }\r\n\r\n        if (dotStatus.missingApplyDebuff == null) {\r\n          // Seems we see the apply debuff event before we find any damage event. We're all good here.\r\n          dotStatus.missingApplyDebuff = false;\r\n        }\r\n      } else if (event.type === EventType.Damage) {\r\n\r\n        const dotStatus = dotStatusesMap[event.ability.guid];\r\n        if (dotStatus == null) {\r\n          continue;\r\n        }\r\n\r\n\r\n        if (dotStatus.missingApplyDebuff == null) {\r\n          // So we got a damage event but we didn't see an apply debuff event for it. Mark it and we'll fabricate one.\r\n          // We will need to create an applyDebuff.\r\n          dotStatus.missingApplyDebuff = true;\r\n          dotStatus.damageEvent = event as DamageEvent;\r\n        }\r\n      }\r\n    }\r\n\r\n    // Fabricate the missing Apply Debuff events, with timestamp at the very beginning of the fight.\r\n\r\n    const missingApplyDebuffsEvents = Object.values(dotStatusesMap).filter(ds => ds.missingApplyDebuff)\r\n      .map(dotStatus => ctor._fabricateApplyDebuffEvent(dotStatus.damageEvent!, fightStartTimestamp));\r\n\r\n    return [...missingApplyDebuffsEvents, ...events];\r\n  }\r\n\r\n  static _fabricateApplyDebuffEvent(event: DamageEvent, timestamp: number): ApplyDebuffEvent {\r\n    return {\r\n      type: EventType.ApplyDebuff,\r\n      ability: event.ability,\r\n      sourceID: event.sourceID,\r\n      sourceIsFriendly: event.sourceIsFriendly,\r\n      targetID: event.targetID,\r\n      targetIsFriendly: event.targetIsFriendly,\r\n      timestamp: timestamp,\r\n\r\n      // Custom properties:\r\n      __fabricated: true,\r\n    };\r\n  }\r\n}\r\n\r\nexport default MissingDotApplyDebuffPrePull;\r\n","import SPELLS from 'common/SPELLS';\r\n\r\nimport MissingDotApplyDebuffPrePull, { Dot } from \"parser/shared/normalizers/MissingDotApplyDebuffPrePull\";\r\n\r\nconst DOTS = [\r\n  {\r\n    debuffId: SPELLS.AGONY.id,\r\n  },\r\n  {\r\n    debuffId: SPELLS.CORRUPTION_DEBUFF.id,\r\n  },\r\n  {\r\n    debuffId: SPELLS.UNSTABLE_AFFLICTION.id,\r\n  },\r\n  {\r\n    debuffId: SPELLS.HAUNT_TALENT.id,\r\n  },\r\n  {\r\n    debuffId: SPELLS.PHANTOM_SINGULARITY_DAMAGE_HEAL.id,\r\n  },\r\n  {\r\n    debuffId: SPELLS.IMMOLATE_DEBUFF.id,\r\n  },\r\n]\r\n\r\nclass WarlockMissingDotApplyDebuffPrePull extends MissingDotApplyDebuffPrePull {\r\n\r\n  static dots: Dot[] = DOTS;\r\n}\r\n\r\nexport default WarlockMissingDotApplyDebuffPrePull;\r\n","import React from 'react';\r\n\r\nimport Analyzer, { SELECTED_PLAYER } from 'parser/core/Analyzer';\r\nimport Events from 'parser/core/Events';\r\n\r\nimport SPELLS from 'common/SPELLS';\r\nimport { formatPercentage, formatThousands } from 'common/format';\r\n\r\nimport STATISTIC_CATEGORY from 'interface/others/STATISTIC_CATEGORY';\r\nimport Statistic from 'interface/statistics/Statistic';\r\nimport BoringSpellValueText from 'interface/statistics/components/BoringSpellValueText';\r\nimport { findMax, binomialPMF } from 'parser/shared/modules/helpers/Probability';\r\n\r\nimport SoulShardTracker from '../soulshards/SoulShardTracker';\r\n\r\nconst TICKS_PER_UA = 4;\r\nconst SC_PROC_CHANCE = 0.15;\r\n\r\nclass SoulConduit extends Analyzer {\r\n  static dependencies = {\r\n    soulShardTracker: SoulShardTracker,\r\n  };\r\n\r\n  _totalTicks = 0;\r\n  _totalUAdamage = 0;\r\n\r\n  constructor(...args) {\r\n    super(...args);\r\n    this.active = this.selectedCombatant.hasTalent(SPELLS.SOUL_CONDUIT_TALENT.id);\r\n    this.addEventListener(Events.damage.by(SELECTED_PLAYER).spell(SPELLS.UNSTABLE_AFFLICTION), this.onUnstableAfflictionDamage);\r\n  }\r\n\r\n  onUnstableAfflictionDamage(event) {\r\n    this._totalTicks += 1;\r\n    this._totalUAdamage += event.amount + (event.absorbed || 0);\r\n  }\r\n\r\n  statistic() {\r\n    // if we haven't cast any UAs, _totalTicks would be 0 and we would get an exception\r\n    // but with denominator 1 in this case, if this._totalUAdamage = 0, then dividing by 1 still gives correct result of average damage = 0\r\n    const avgDamage = this._totalUAdamage / (this._totalTicks > 0 ? this._totalTicks : 1);\r\n    const shardsGained = this.soulShardTracker.getGeneratedBySpell(SPELLS.SOUL_CONDUIT_SHARD_GEN.id);\r\n    const estimatedUAdamage = shardsGained * TICKS_PER_UA * avgDamage;\r\n    const totalSpent = this.soulShardTracker.spent;\r\n    // find number of Shards we were MOST LIKELY to get in the fight\r\n    const { max } = findMax(totalSpent, (k, n) => binomialPMF(k, n, SC_PROC_CHANCE));\r\n    return (\r\n      <Statistic\r\n        category={STATISTIC_CATEGORY.TALENTS}\r\n        size=\"flexible\"\r\n        tooltip={(\r\n          <>\r\n            You gained {shardsGained} Shards from this talent, {max > 0 ? <>which is <strong>{formatPercentage(shardsGained / max)}%</strong> of Shards you were most likely to get in this fight ({max} Shards).</> : 'while you were most likely to not get any Shards.'}<br />\r\n            Estimated damage: {formatThousands(estimatedUAdamage)} ({this.owner.formatItemDamageDone(estimatedUAdamage)})<br /><br />\r\n            This result is estimated by multiplying number of Soul Shards gained from this talent by the average Unstable Affliction damage for the whole fight.\r\n          </>\r\n        )}\r\n      >\r\n        <BoringSpellValueText spell={SPELLS.SOUL_CONDUIT_TALENT}>\r\n          {shardsGained} <small>Soul Shards generated</small>\r\n        </BoringSpellValueText>\r\n      </Statistic>\r\n    );\r\n  }\r\n}\r\n\r\nexport default SoulConduit;\r\n","import React from 'react';\nimport PropTypes from 'prop-types';\n\nimport SpellLink from 'common/SpellLink';\nimport SPELLS from 'common/SPELLS';\n\nimport COVENANTS from 'game/shadowlands/COVENANTS';\n\nimport Checklist from 'parser/shared/modules/features/Checklist';\nimport Rule from 'parser/shared/modules/features/Checklist/Rule';\nimport Requirement from 'parser/shared/modules/features/Checklist/Requirement';\nimport PreparationRule from 'parser/shared/modules/features/Checklist/PreparationRule';\nimport GenericCastEfficiencyRequirement from 'parser/shared/modules/features/Checklist/GenericCastEfficiencyRequirement';\n\nconst AfflictionWarlockChecklist = ({ combatant, castEfficiency, thresholds, shardTracker }) => {\n  const DotUptime = props => (\n    <Requirement\n      name={(\n        <>\n          <SpellLink id={props.id} icon /> uptime\n        </>\n      )}\n      thresholds={props.thresholds}\n    />\n  );\n  DotUptime.propTypes = {\n    id: PropTypes.number.isRequired,\n  };\n\n  const AbilityRequirement = props => (\n    <GenericCastEfficiencyRequirement\n      castEfficiency={castEfficiency.getCastEfficiencyForSpellId(props.spell)}\n      {...props}\n    />\n  );\n  AbilityRequirement.propTypes = {\n    spell: PropTypes.number.isRequired,\n  };\n\n  return (\n    <Checklist>\n      <Rule\n        name=\"Maintain your DoTs and debuffs on the boss\"\n        description=\"Affliction Warlocks rely on DoTs and debuffs as means of dealing damage to the target. You should try to keep as highest uptime on them as possible.\"\n      >\n        <DotUptime id={SPELLS.AGONY.id} thresholds={thresholds.agony} />\n        <DotUptime id={SPELLS.CORRUPTION_CAST.id} thresholds={thresholds.corruption} />\n        <DotUptime id={SPELLS.UNSTABLE_AFFLICTION.id} thresholds={thresholds.unstableAffliction} />\n        <DotUptime id={SPELLS.SHADOW_EMBRACE.id} thresholds={thresholds.shadowEmbrace} />\n        {combatant.hasTalent(SPELLS.SIPHON_LIFE_TALENT.id) && <DotUptime id={SPELLS.SIPHON_LIFE_TALENT.id} thresholds={thresholds.siphonLife} />}\n        {combatant.hasTalent(SPELLS.HAUNT_TALENT.id) && <DotUptime id={SPELLS.HAUNT_TALENT.id} thresholds={thresholds.haunt} />}\n      </Rule>\n      <Rule\n        name=\"Don't cap your Soul Shards\"\n        description=\"Soul Shards are your main and most important resource and since their generation is random as Affliction, it's very important not to let them cap.\"\n      >\n        <Requirement\n          name=\"Wasted shards per minute\"\n          thresholds={thresholds.soulShards}\n          valueTooltip={`You wasted ${shardTracker.wasted} shards.`}\n        />\n      </Rule>\n      <Rule\n        name=\"Use your cooldowns\"\n        description=\"Be mindful of your cooldowns if you are specced into them and use them when it's appropriate. It's okay to hold a cooldown for a little bit when the encounter requires it (burn phases), but generally speaking you should use them as much as you can.\"\n      >\n        <AbilityRequirement spell={SPELLS.SUMMON_DARKGLARE.id} />\n        {combatant.hasTalent(SPELLS.DARK_SOUL_MISERY_TALENT.id) && <AbilityRequirement spell={SPELLS.DARK_SOUL_MISERY_TALENT.id} />}\n        {combatant.hasTalent(SPELLS.VILE_TAINT_TALENT.id) && <AbilityRequirement spell={SPELLS.VILE_TAINT_TALENT.id} />}\n        {combatant.hasTalent(SPELLS.PHANTOM_SINGULARITY_TALENT.id) && <AbilityRequirement spell={SPELLS.PHANTOM_SINGULARITY_TALENT.id} />}\n        {combatant.hasCovenant(COVENANTS.NIGHT_FAE.id) && <AbilityRequirement spell={SPELLS.SOUL_ROT.id} />}\n      </Rule>\n      <Rule\n        name=\"Use your utility and defensive spells\"\n        description={(\n          <>\n            Use other spells in your toolkit to your advantage. For example, you can try to minimize necessary movement by using <SpellLink id={SPELLS.DEMONIC_GATEWAY_CAST.id} icon />, <SpellLink id={SPELLS.DEMONIC_CIRCLE.id} icon />, <SpellLink id={SPELLS.BURNING_RUSH_TALENT.id} icon /> or mitigate incoming damage with <SpellLink id={SPELLS.UNENDING_RESOLVE.id} icon />/<SpellLink id={SPELLS.DARK_PACT_TALENT.id} icon />.<br />\n            While you shouldn't cast these defensives on cooldown, be aware of them and use them whenever effective. Not using them at all indicates you might not be aware of them or not using them optimally.\n          </>\n        )}\n      >\n        <AbilityRequirement spell={SPELLS.DEMONIC_CIRCLE_TELEPORT.id} />\n        {combatant.hasTalent(SPELLS.DARK_PACT_TALENT.id) && <AbilityRequirement spell={SPELLS.DARK_PACT_TALENT.id} />}\n        <AbilityRequirement spell={SPELLS.UNENDING_RESOLVE.id} />\n        {combatant.hasCovenant(COVENANTS.NIGHT_FAE.id) && <AbilityRequirement spell={SPELLS.SOULSHAPE.id} />}\n      </Rule>\n      <Rule\n        name=\"Always be casting\"\n        description={(\n          <>\n            You should try to avoid doing nothing during the fight. When you're out of Soul Shards, cast <SpellLink id={SPELLS.SHADOW_BOLT_AFFLI.id} icon />/<SpellLink id={SPELLS.DRAIN_SOUL_TALENT.id} icon />, refresh your DoTs etc. When you have to move, use your instant abilities or try to utilize <SpellLink id={SPELLS.DEMONIC_CIRCLE.id} icon>Teleport</SpellLink> or <SpellLink id={SPELLS.DEMONIC_GATEWAY_CAST.id} icon>Gateway</SpellLink> to reduce the movement even further.\n          </>\n        )}\n      >\n        <Requirement name=\"Downtime\" thresholds={thresholds.downtime} />\n      </Rule>\n      <PreparationRule thresholds={thresholds} />\n    </Checklist>\n  );\n};\n\nAfflictionWarlockChecklist.propTypes = {\n  castEfficiency: PropTypes.object.isRequired,\n  combatant: PropTypes.shape({\n    hasTalent: PropTypes.func.isRequired,\n    hasCovenant: PropTypes.func.isRequired,\n  }).isRequired,\n  thresholds: PropTypes.object.isRequired,\n  shardTracker: PropTypes.object.isRequired,\n};\n\nexport default AfflictionWarlockChecklist;\n","import React from 'react';\r\n\r\nimport BaseChecklist from 'parser/shared/modules/features/Checklist/Module';\r\nimport CastEfficiency from 'parser/shared/modules/CastEfficiency';\r\nimport Combatants from 'parser/shared/modules/Combatants';\r\nimport PreparationRuleAnalyzer from 'parser/shared/modules/features/Checklist/PreparationRuleAnalyzer';\r\n\r\nimport AlwaysBeCasting from '../AlwaysBeCasting';\r\nimport AgonyUptime from '../DotUptimes/AgonyUptime';\r\nimport CorruptionUptime from '../DotUptimes/CorruptionUptime';\r\nimport UnstableAfflictionUptime from '../DotUptimes/UnstableAfflictionUptime';\r\nimport SiphonLifeUptime from '../../talents/SiphonLifeUptime';\r\nimport Haunt from '../../talents/Haunt';\r\nimport ShadowEmbrace from '../../features/ShadowEmbrace';\r\nimport SoulShardDetails from '../../soulshards/SoulShardDetails';\r\nimport SoulShardTracker from '../../soulshards/SoulShardTracker';\r\n\r\nimport Component from './Component';\r\n\r\nclass Checklist extends BaseChecklist {\r\n  static dependencies = {\r\n    combatants: Combatants,\r\n    castEfficiency: CastEfficiency,\r\n    alwaysBeCasting: AlwaysBeCasting,\r\n    preparationRuleAnalyzer: PreparationRuleAnalyzer,\r\n\r\n    agonyUptime: AgonyUptime,\r\n    corruptionUptime: CorruptionUptime,\r\n    siphonLifeUptime: SiphonLifeUptime,\r\n    unstableAfflictionUptime: UnstableAfflictionUptime,\r\n    haunt: Haunt,\r\n    shadowEmbrace: ShadowEmbrace,\r\n    soulShardDetails: SoulShardDetails,\r\n    soulShardTracker: SoulShardTracker,\r\n  };\r\n\r\n  render() {\r\n    return (\r\n      <Component\r\n        castEfficiency={this.castEfficiency}\r\n        combatant={this.combatants.selected}\r\n        thresholds={{\r\n          ...this.preparationRuleAnalyzer.thresholds,\r\n\r\n          agony: this.agonyUptime.suggestionThresholds,\r\n          corruption: this.corruptionUptime.suggestionThresholds,\r\n          unstableAffliction: this.unstableAfflictionUptime.suggestionThresholds,\r\n          siphonLife: this.siphonLifeUptime.suggestionThresholds,\r\n          haunt: this.haunt.suggestionThresholds,\r\n          shadowEmbrace: this.shadowEmbrace.suggestionThresholds,\r\n          soulShards: this.soulShardDetails.suggestionThresholds,\r\n          downtime: this.alwaysBeCasting.suggestionThresholds,\r\n        }}\r\n        shardTracker={this.soulShardTracker}\r\n      />\r\n    );\r\n  }\r\n}\r\n\r\nexport default Checklist;\r\n","import CoreCombatLogParser from 'parser/core/CombatLogParser';\r\nimport ArcaneTorrent from 'parser/shared/modules/racials/bloodelf/ArcaneTorrent';\r\n\r\nimport GrimoireOfSacrificeNormalizer from '../shared/modules/talents/normalizers/GrimoireOfSacrificeNormalizer';\r\n\r\nimport Abilities from './modules/features/Abilities';\r\nimport AlwaysBeCasting from './modules/features/AlwaysBeCasting';\r\nimport CooldownThroughputTracker from './modules/features/CooldownThroughputTracker';\r\nimport Darkglare from './modules/features/Darkglare';\r\n\r\nimport AgonyUptime from './modules/features/DotUptimes/AgonyUptime';\r\nimport CorruptionUptime from './modules/features/DotUptimes/CorruptionUptime';\r\nimport UnstableAfflictionUptime from './modules/features/DotUptimes/UnstableAfflictionUptime';\r\nimport DotUptimes from './modules/features/DotUptimes';\r\nimport ShadowEmbrace from './modules/features/ShadowEmbrace';\r\n\r\nimport SoulShardTracker from './modules/soulshards/SoulShardTracker';\r\nimport SoulShardDetails from './modules/soulshards/SoulShardDetails';\r\nimport Channeling from './modules/core/Channeling';\r\nimport GlobalCooldown from './modules/core/GlobalCooldown';\r\n\r\nimport Nightfall from './modules/talents/Nightfall';\r\nimport DrainSoul from './modules/talents/DrainSoul';\r\nimport AbsoluteCorruption from './modules/talents/AbsoluteCorruption';\r\nimport SiphonLifeUptime from './modules/talents/SiphonLifeUptime';\r\nimport PhantomSingularity from './modules/talents/PhantomSingularity';\r\nimport VileTaint from './modules/talents/VileTaint';\r\nimport Haunt from './modules/talents/Haunt';\r\nimport WarlockMissingDotApplyDebuffPrePull from '../shared/modules/normalizers/WarlockMissingDotApplyDebuffPrePull';\r\nimport GrimoireOfSacrifice from '../shared/modules/talents/GrimoireOfSacrifice';\r\nimport SoulConduit from './modules/talents/SoulConduit';\r\n\r\nimport Checklist from './modules/features/Checklist/Module';\r\n\r\nclass CombatLogParser extends CoreCombatLogParser {\r\n  static specModules = {\r\n    // Features\r\n    abilities: Abilities,\r\n    alwaysBeCasting: AlwaysBeCasting,\r\n    cooldownThroughputTracker: CooldownThroughputTracker,\r\n    checklist: Checklist,\r\n    darkglare: Darkglare,\r\n    shadowEmbrace: ShadowEmbrace,\r\n\r\n    // Normalizers\r\n    grimoireOfSacrificeNormalizer: GrimoireOfSacrificeNormalizer,\r\n    warlockMissingDotApplyDebuffPrePull: WarlockMissingDotApplyDebuffPrePull,\r\n\r\n    // DoTs\r\n    agonyUptime: AgonyUptime,\r\n    corruptionUptime: CorruptionUptime,\r\n    unstableAfflictionUptime: UnstableAfflictionUptime,\r\n    dotUptimes: DotUptimes,\r\n\r\n    // Core\r\n    soulShardTracker: SoulShardTracker,\r\n    soulShardDetails: SoulShardDetails,\r\n    channeling: Channeling,\r\n    globalCooldown: GlobalCooldown,\r\n\r\n    // Talents\r\n    nightfall: Nightfall,\r\n    drainSoul: DrainSoul,\r\n    absoluteCorruption: AbsoluteCorruption,\r\n    siphonLifeUptime: SiphonLifeUptime,\r\n    phantomSingularity: PhantomSingularity,\r\n    vileTaint: VileTaint,\r\n    haunt: Haunt,\r\n    grimoireOfSacrifice: GrimoireOfSacrifice,\r\n    soulConduit: SoulConduit,\r\n\r\n    // There's no throughput benefit from casting Arcane Torrent on cooldown\r\n    arcaneTorrent: [ArcaneTorrent, { castEfficiency: null }] as const,\r\n  };\r\n}\r\n\r\nexport default CombatLogParser;\r\n","import React from 'react';\r\nimport PropTypes from 'prop-types';\r\n\r\nimport { TooltipElement } from 'common/Tooltip';\r\n\r\nimport './StatisticBox.css';\r\nimport STATISTIC_CATEGORY from './STATISTIC_CATEGORY';\r\n\r\nexport { default as STATISTIC_ORDER } from './STATISTIC_ORDER';\r\n\r\n/**\r\n * @deprecated Use `interface/statistic/Statistic` instead.\r\n */\r\nconst StatisticsListBox = ({ title, tooltip, children, bodyStyle, ...others }) => {\r\n  delete others.category;\r\n  delete others.position;\r\n  return (\r\n    <div className=\"col-lg-3 col-md-4 col-sm-6 col-xs-12\">\r\n      <div className=\"panel statistic statistic-box statistic-box-list\" {...others}>\r\n        {title && (\r\n          <div className=\"panel-heading\">\r\n            <h2>{tooltip ? <TooltipElement content={tooltip}>{title}</TooltipElement> : title}</h2>\r\n          </div>\r\n        )}\r\n        <div className=\"panel-body items\" style={bodyStyle}>\r\n          {children}\r\n        </div>\r\n      </div>\r\n    </div>\r\n  );\r\n};\r\nStatisticsListBox.propTypes = {\r\n  title: PropTypes.node,\r\n  children: PropTypes.node.isRequired,\r\n  tooltip: PropTypes.node,\r\n  bodyStyle: PropTypes.object,\r\n  category: PropTypes.string,\r\n  position: PropTypes.number,\r\n};\r\nStatisticsListBox.defaultProps = {\r\n  category: STATISTIC_CATEGORY.GENERAL,\r\n};\r\n\r\nexport default StatisticsListBox;\r\n"],"sourceRoot":""}