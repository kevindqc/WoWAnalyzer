{"version":3,"sources":["parser/mage/frost/modules/features/BrainFreeze.tsx","parser/mage/frost/modules/talents/GlacialSpike.tsx","parser/mage/frost/modules/features/IceLance.tsx","parser/mage/frost/modules/talents/ThermalVoid.tsx","parser/mage/frost/modules/features/WintersChill.tsx","parser/mage/frost/modules/features/AlwaysBeCasting.tsx","parser/mage/frost/modules/features/WaterElemental.tsx","parser/mage/frost/modules/checklist/Component.tsx","parser/mage/frost/modules/checklist/Module.tsx","parser/mage/frost/modules/features/Buffs.tsx","parser/mage/frost/modules/features/Abilities.tsx","parser/mage/frost/modules/features/CooldownThroughputTracker.js","parser/mage/frost/modules/cooldowns/FrozenOrb.tsx","parser/mage/frost/modules/cooldowns/ColdSnap.tsx","parser/mage/frost/modules/talents/LonelyWinter.tsx","parser/mage/frost/modules/talents/SplittingIce.tsx","parser/mage/frost/modules/talents/BoneChilling.tsx","parser/mage/shared/modules/features/FocusMagic.tsx","parser/mage/frost/modules/items/ColdFront.tsx","parser/mage/frost/modules/items/IceBite.tsx","parser/mage/frost/modules/items/IcyPropulsion.tsx","parser/mage/frost/modules/items/ShiveringCore.tsx","parser/mage/frost/modules/items/UnrelentingCold.tsx","parser/mage/frost/CombatLogParser.ts","interface/statistics/components/Gauge.js"],"names":["BrainFreeze","options","eventHistory","enemies","usedProcs","overwrittenProcs","expiredProcs","totalProcs","flurryHardCast","flurryOverlapped","wasLastGeneratorEB","addEventListener","Events","applybuff","by","SELECTED_PLAYER","spell","SPELLS","BRAIN_FREEZE","brainFreezeApplied","refreshbuff","brainFreezeRefreshed","removebuff","brainFreezeRemoved","cast","FLURRY","onFlurryCast","event","this","last","MS_BUFFER_100","length","enemy","getEntity","selectedCombatant","hasBuff","id","WINTERS_CHILL","when","brainFreezeOverwritenThresholds","addSuggestion","suggest","actual","recommended","formatPercentage","SpellLink","icon","i18n","_","brainFreezeExpiredThresholds","flurryWithoutBrainFreezeThresholds","formatNumber","overlappedFlurryThresholds","Statistic","position","STATISTIC_ORDER","CORE","size","tooltip","BoringSpellValueText","utilPercent","wastedProcs","wastedPercent","isLessThan","minor","average","major","style","ThresholdStyle","PERCENTAGE","isGreaterThan","NUMBER","Analyzer","dependencies","EnemyInstances","EventHistory","GlacialSpike","abilityTracker","lastCastEvent","lastCastDidDamage","spikeShattered","spikeNotShattered","active","hasTalent","GLACIAL_SPIKE_TALENT","onGlacialSpikeCast","damage","GLACIAL_SPIKE_DAMAGE","onGlacialSpikeDamage","fightend","onFightEnd","flagTimeline","encodeTargetString","targetID","targetInstance","SHATTER_DEBUFFS","some","effect","timestamp","undefined","meta","isInefficientCast","inefficientCastReason","glacialSpikeUtilizationThresholds","SHATTER","Tooltip","content","category","STATISTIC_CATEGORY","TALENTS","totalCasts","utilPercentage","getAbility","casts","AbilityTracker","IceLance","hadFingersProc","iceLanceTargetId","nonShatteredCasts","iceLanceCastTimestamp","totalFingersProcs","overwrittenFingersProcs","expiredFingersProcs","ICE_LANCE","onCast","ICE_LANCE_DAMAGE","onDamage","changebuffstack","FINGERS_OF_FROST","onFingersStackChange","damageTarget","stackChange","stacksGained","newStacks","nonShatteredIceLanceThresholds","shatteredPercent","wastedFingersProcs","ThermalVoid","THERMAL_VOID_TALENT","hist","getBuffHistory","ICY_VEINS","totalIncrease","totalDuration","castRows","map","buff","idx","end","owner","currentTimestamp","castTime","start","fight","start_time","duration","increase","Math","max","key","formatDuration","dropdown","className","SpellIcon","AFFECTED_CASTS","FROSTBOLT","EBONBOLT_TALENT","COMET_STORM_TALENT","ICE_NOVA_TALENT","RAY_OF_FROST_TALENT","AFFECTED_DAMAGE","FROSTBOLT_DAMAGE","EBONBOLT_DAMAGE","WINTERS_CHILL_SPENDERS","WINTERS_CHILL_HARDCASTS","RADIANT_SPARK","WintersChill","hasGlacialSpike","hasEbonbolt","isVenthyr","totalChillStacks","preCastFound","preCastIgnored","preCastSpellId","wintersChillHits","goodShatteredCasts","badShatteredCasts","missedHardcasts","missedShatters","badShatters","buffRemovedTimestamp","hasCovenant","COVENANTS","VENTHYR","applydebuff","onDebuffApplied","removedebuff","onDebuffRemoved","onFinished","spellId","ability","guid","MIRRORS_OF_TORMENT","acceptable","push","preCastSpell","find","wintersChillShatterThresholds","shatterMissedPercent","wintersChillHardCastThresholds","hardcastMissedPercent","shatterUtil","hardcastUtil","AlwaysBeCasting","boss","disableDowntimeSuggestion","overrideDowntimeSuggestionThresholds","FIRE_BLAST","ARCANE_EXPLOSION","ICICLES_BUFF","activeTimePercentage","downtimePercentage","Gauge","value","totalTimeWasted","fightDuration","CoreAlwaysBeCasting","WaterElemental","abc","beginCastSpell","_waterboltsCancelled","_waterboltsCastStarts","_waterboltHits","_waterboltDamage","wasCastStarted","petActiveTime","_timestampLastFinish","_timestampLastCast","_timestampFirstCast","LONELY_WINTER_TALENT","begincast","SELECTED_PLAYER_PET","WATERBOLT","onWaterboltBeginCast","onWaterboltCast","onWaterboltDamage","amount","absorbed","waterElementalUptimeThresholds","SUMMON_WATER_ELEMENTAL","waterElementalPrepullThresholds","petActiveTimePercentage","petDowntimePercentage","petTotalCasts","formatThousands","BoringValueText","label","Uptime","Cooldown","abs","prepullSummonCheck","FrostMageChecklist","combatant","castEfficiency","thresholds","AbilityRequirement","props","GenericCastEfficiencyRequirement","getCastEfficiencyForSpellId","Rule","name","description","FROZEN_ORB","RUNE_OF_POWER_TALENT","FROST_NOVA","FREEZE","Requirement","wintersChillShatter","wintersChillHardCasts","brainFreezeUtilization","fingersOfFrostUtilization","SPLITTING_ICE_TALENT","glacialSpikeUtilization","runeOfPowerBuffUptime","waterElementalUptime","downtimeSuggestionThresholds","cancelledCasts","PreparationRule","arcaneIntellectUptime","Checklist","combatants","brainFreeze","glacialSpike","iceLance","thermalVoid","wintersChill","arcaneIntellect","runeOfPower","alwaysBeCasting","preparationRuleAnalyzer","waterElemental","Component","selected","brainFreezeUtilizationThresholds","brainFreezeOverwrites","brainFreezeExpired","brainFreezeUnbuffedFlurry","fingersProcUtilizationThresholds","iceLanceNotShattered","suggestionThresholds","roundedSecondsSuggestionThresholds","BaseChecklist","Combatants","CastEfficiency","ArcaneIntellect","CancelledCasts","RuneOfPower","PreparationRuleAnalyzer","Buffs","timelineHighlight","triggeredBySpellId","RUNE_OF_POWER_BUFF","enabled","ICE_BARRIER","ICE_BLOCK","MIRROR_IMAGE","Object","keys","BLOODLUST_BUFFS","item","Number","CoreBuffs","Abilities","SPELL_CATEGORIES","ROTATIONAL","gcd","base","timelineSortIndex","damageSpellIds","cooldown","haste","FLURRY_DAMAGE","suggestion","recommendedEfficiency","COMET_STORM_DAMAGE","BLIZZARD","ROTATIONAL_AOE","BLIZZARD_DAMAGE","CONE_OF_COLD","FROZEN_ORB_DAMAGE","buffSpellId","COOLDOWNS","TIME_WARP","KYRIAN","DEATHBORNE","NECROLORD","SHIFTING_POWER","NIGHT_FAE","DEFENSIVE","hasConduitBySpellID","WINTERS_PROTECTION","WINTERS_PROTECTION_REDUCTION_SEC","conduitRankBySpellID","ARCANE_INTELLECT","UTILITY","charges","ICE_WARD_TALENT","BLINK","SHIMMER_TALENT","FLOW_OF_TIME","FLOW_OF_TIME_REDUCTION_SEC","COUNTERSPELL","REMOVE_CURSE","SLOW_FALL","SPELL_STEAL","FOCUS_MAGIC_TALENT","ALTER_TIME","ALTER_TIME_BUFF","INVISIBILITY","INVISIBILITY_BUFF","COLD_SNAP","POLYMORPH_SHEEP","POLYMORPH_PIG","POLYMORPH_BLACK_CAT","POLYMORPH_MONKEY","POLYMORPH_RABBIT","POLYMORPH_POLAR_BEAR_CUB","POLYMORPH_PORCUPINE","POLYMORPH_TURTLE","POLYMORPH_TURKEY","POLYMORPH_PENGUIN","POLYMORPH_BUMBLEBEE","POLYMORPH_PEACOCK","POLYMORPH_DIREHORN","POLYMORPH_MAWRAT","CoreAbilities","CooldownThroughputTracker","CoreCooldownThroughputTracker","cooldownSpells","summary","BUILT_IN_SUMMARY_TYPES","DAMAGE","castCooldowns","FrozenOrb","spellUsable","_reduceCooldown","isOnCooldown","reduceCooldown","SpellUsable","SPELL_RESETS","ColdSnap","_resetCooldowns","forEach","endCooldown","BUFFED_SPELLS","LonelyWinter","bonusDamage","onAffectedDamage","calculateEffectiveDamage","totalDamage","spellBonus","formatItemDamageDone","SPLITTABLE_CASTS","SPLITTABLE_DAMAGE","ICICLE_DAMAGE","SplittingIce","cleaveDamage","boostDamage","castTarget","damageBonus","boostDamagePercent","cleaveDamagePercent","damagePercent","getPercentageOfTotalDamageDone","AFFECTED_SPELLS","BoneChilling","BONE_CHILLING_TALENT","buffInfo","getBuff","BONE_CHILLING_BUFF","mod","stacks","uptime","getBuffUptime","FocusMagic","buffStack","highStackTimestamp","intUptime","to","FOCUS_MAGIC_CRIT_BUFF","onBuffApplied","onBuffRefreshed","onBuffRemoved","focusMagicBuffUptimeThresholds","critBuffUptime","intBuffUptime","ColdFront","bonusFrozenOrbs","hasLegendaryByBonusID","COLD_FRONT","bonusID","COLD_FRONT_BUFF","ITEMS","DAMAGE_BONUS","IceBite","conduitRank","ICE_BITE","onIceLanceDamage","ItemDamageDone","Enemies","COOLDOWN_REDUCTION_MS","IcyPropulsion","cooldownReduction","ICY_PROPULSION","hitType","HIT_TYPES","CRIT","reductionSeconds","reductionPerIcyVeins","ShiveringCore","SHIVERING_CORE","onBlizzardDamage","UnrelentingCold","UNRELENTING_COLD","onFrozenOrbDamage","CombatLogParser","CoreCombatLogParser","specModules","checklist","buffs","shiftingPowerNormalizer","ShiftingPowerNormalizer","abilities","cooldownThroughputTracker","mirrorImage","MirrorImage","elementalBarrier","ElementalBarrier","boneChilling","lonelyWinter","focusMagic","splittingIce","frozenOrb","coldSnap","coldFront","shiftingPower","ShiftingPower","iceBite","icyPropulsion","shiveringCore","unrelentingCold","divertedEnergy","DivertedEnergy","groundingSurge","GroundingSurge","ireOfTheAscended","IreOfTheAscended","tempestBarrier","TempestBarrier","siphonedMalice","SiphonedMalice","arcaneTorrent","ArcaneTorrent","textAlign","marginTop","render","paddingTop","paddingRight","fontSize","width","height","viewBox","fill","xmlns","d","stroke","strokeWidth","strokeLinecap","fillRule","clipRule","top","left","transform","margin","transformOrigin","paddingLeft"],"mappings":"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","file":"static/js/FrostMage.07b3b2ec.chunk.js","sourcesContent":["import React from 'react';\r\nimport SPELLS from 'common/SPELLS';\r\nimport SpellLink from 'common/SpellLink';\r\nimport { formatNumber, formatPercentage } from 'common/format';\r\nimport Statistic from 'interface/statistics/Statistic';\r\nimport BoringSpellValueText from 'interface/statistics/components/BoringSpellValueText';\r\nimport STATISTIC_ORDER from 'interface/others/STATISTIC_ORDER';\r\nimport Analyzer, { SELECTED_PLAYER, Options } from 'parser/core/Analyzer';\r\nimport EnemyInstances from 'parser/shared/modules/EnemyInstances';\r\nimport Events, { CastEvent, ApplyBuffEvent, RemoveBuffEvent, RefreshBuffEvent } from 'parser/core/Events';\r\nimport EventHistory from 'parser/shared/modules/EventHistory';\r\nimport { MS_BUFFER_100 } from 'parser/mage/shared/constants';\r\nimport { ThresholdStyle, When } from 'parser/core/ParseResults';\r\nimport { i18n } from '@lingui/core';\r\nimport { t } from '@lingui/macro';\r\n\r\nconst debug = false;\r\n\r\nclass BrainFreeze extends Analyzer {\r\n  static dependencies = {\r\n    enemies: EnemyInstances,\r\n    eventHistory: EventHistory,\r\n  };\r\n  protected eventHistory!: EventHistory;\r\n  protected enemies!: EnemyInstances;\r\n\r\n  usedProcs = 0;\r\n  overwrittenProcs = 0;\r\n  expiredProcs = 0;\r\n  totalProcs = 0;\r\n  flurryHardCast = 0;\r\n  flurryOverlapped = 0;\r\n\r\n  // Tracks whether the last brain freeze generator to be cast was Ebonbolt or Frostbolt\r\n  wasLastGeneratorEB = false;\r\n\r\n  constructor(options: Options) {\r\n    super(options);\r\n    this.addEventListener(Events.applybuff.by(SELECTED_PLAYER).spell(SPELLS.BRAIN_FREEZE), this.brainFreezeApplied);\r\n    this.addEventListener(Events.refreshbuff.by(SELECTED_PLAYER).spell(SPELLS.BRAIN_FREEZE), this.brainFreezeRefreshed);\r\n    this.addEventListener(Events.removebuff.by(SELECTED_PLAYER).spell(SPELLS.BRAIN_FREEZE), this.brainFreezeRemoved);\r\n    this.addEventListener(Events.cast.by(SELECTED_PLAYER).spell(SPELLS.FLURRY), this.onFlurryCast);\r\n  }\r\n\r\n  brainFreezeApplied(event: ApplyBuffEvent) {\r\n    this.totalProcs += 1;\r\n  }\r\n\r\n  brainFreezeRefreshed(event: RefreshBuffEvent) {\r\n    this.totalProcs += 1;\r\n    this.overwrittenProcs += 1;\r\n    debug && this.debug(\"Brain Freeze overwritten\");\r\n  }\r\n\r\n  brainFreezeRemoved(event: RemoveBuffEvent) {\r\n    const previousSpell = this.eventHistory.last(1, MS_BUFFER_100, Events.cast.by(SELECTED_PLAYER).spell(SPELLS.FLURRY));\r\n    if (previousSpell.length !== 0) {\r\n      this.usedProcs += 1;\r\n    } else {\r\n      this.expiredProcs += 1; // If Flurry was not the spell that was cast immediately before this, then the proc must have expired.\r\n      debug && this.debug(\"Brain Freeze proc expired\");\r\n    }\r\n  }\r\n\r\n  onFlurryCast(event: CastEvent) {\r\n    const enemy = this.enemies.getEntity(event);\r\n    if (!this.selectedCombatant.hasBuff(SPELLS.BRAIN_FREEZE.id)) {\r\n      this.flurryHardCast += 1;\r\n    } else if (enemy && enemy.hasBuff(SPELLS.WINTERS_CHILL.id)) {\r\n      this.flurryOverlapped += 1;\r\n    }\r\n  }\r\n\r\n  get wastedProcs() {\r\n    return this.overwrittenProcs + this.expiredProcs;\r\n  }\r\n\r\n  get wastedPercent() {\r\n    return (this.wastedProcs / this.totalProcs) || 0;\r\n  }\r\n\r\n  get utilPercent() {\r\n    return 1 - this.wastedPercent;\r\n  }\r\n\r\n  get brainFreezeUtilizationThresholds() {\r\n    return {\r\n      actual: this.utilPercent,\r\n      isLessThan: {\r\n        minor: 0.95,\r\n        average: 0.90,\r\n        major: 0.80,\r\n      },\r\n      style: ThresholdStyle.PERCENTAGE,\r\n    };\r\n  }\r\n\r\n  // Percentages lowered from .00, .08, .16; with the addition of the forgiveness window it is almost as bad as letting BF expire when you waste a proc\r\n  get brainFreezeOverwritenThresholds() {\r\n    return {\r\n      actual: (this.overwrittenProcs / this.totalProcs) || 0,\r\n      isGreaterThan: {\r\n        minor: 0.00,\r\n        average: 0.05,\r\n        major: 0.10,\r\n      },\r\n      style: ThresholdStyle.PERCENTAGE,\r\n    };\r\n  }\r\n\r\n  // there's almost never an excuse to let BF expire\r\n  get brainFreezeExpiredThresholds() {\r\n    return {\r\n      actual: (this.expiredProcs / this.totalProcs) || 0,\r\n      isGreaterThan: {\r\n        minor: 0.00,\r\n        average: 0.03,\r\n        major: 0.06,\r\n      },\r\n      style: ThresholdStyle.PERCENTAGE,\r\n    };\r\n  }\r\n\r\n  get flurryWithoutBrainFreezeThresholds() {\r\n    return {\r\n      actual: this.flurryHardCast,\r\n      isGreaterThan: {\r\n        minor: 0,\r\n        average: 0,\r\n        major: 3,\r\n      },\r\n      style: ThresholdStyle.NUMBER,\r\n    };\r\n  }\r\n\r\n  get overlappedFlurryThresholds() {\r\n    return {\r\n      actual: this.flurryOverlapped,\r\n      isGreaterThan: {\r\n        average: 0,\r\n        major: 3,\r\n      },\r\n      style: ThresholdStyle.NUMBER,\r\n    }\r\n  }\r\n\r\n  suggestions(when: When) {\r\n    when(this.brainFreezeOverwritenThresholds)\r\n      .addSuggestion((suggest, actual, recommended) => suggest(<>You overwrite {formatPercentage(actual)}% of your <SpellLink id={SPELLS.BRAIN_FREEZE.id} /> procs. You should use your <SpellLink id={SPELLS.BRAIN_FREEZE.id} /> procs as soon as possible and avoid letting them expire or be overwritten whenever possible. There are not any situations where it would be advantageous to hold your <SpellLink id={SPELLS.BRAIN_FREEZE.id} />.</>)\r\n          .icon(SPELLS.BRAIN_FREEZE.icon)\r\n          .actual(i18n._(t('mage.frost.suggestions.brainFreeze.overwritten')`${formatPercentage(actual)}% overwritten`))\r\n          .recommended(`Overwriting none is recommended`));\r\n    when(this.brainFreezeExpiredThresholds)\r\n      .addSuggestion((suggest, actual, recommended) => suggest(<>You allowed {formatPercentage(actual)}% of your <SpellLink id={SPELLS.BRAIN_FREEZE.id} /> procs to expire. Make sure you are using your procs as soon as possible to avoid this.</>)\r\n          .icon(SPELLS.BRAIN_FREEZE.icon)\r\n          .actual(i18n._(t('mage.frost.suggestions.brainFreeze.expired')`${formatPercentage(actual)}% expired`))\r\n          .recommended(`Letting none expire is recommended`));\r\n    when(this.flurryWithoutBrainFreezeThresholds)\r\n      .addSuggestion((suggest, actual, recommended) => suggest(<>You cast <SpellLink id={SPELLS.FLURRY.id} /> without <SpellLink id={SPELLS.BRAIN_FREEZE.id} /> {actual} times. <SpellLink id={SPELLS.FLURRY.id} /> does not debuff the target with <SpellLink id={SPELLS.WINTERS_CHILL.id} /> unless you have a <SpellLink id={SPELLS.BRAIN_FREEZE.id} /> proc, so you should never cast <SpellLink id={SPELLS.FLURRY.id} /> unless you have <SpellLink id={SPELLS.BRAIN_FREEZE.id} />.</>)\r\n          .icon(SPELLS.FLURRY.icon)\r\n          .actual(i18n._(t('mage.frost.suggestions.brainFreeze.casts')`${formatNumber(actual)} casts`))\r\n          .recommended(`Casting none is recommended`));\r\n    when(this.overlappedFlurryThresholds)\r\n      .addSuggestion((suggest, actual, recommended) => suggest(<>You used a <SpellLink id={SPELLS.BRAIN_FREEZE.id} /> proc via casting <SpellLink id={SPELLS.FLURRY.id} /> while the target still had the <SpellLink id={SPELLS.WINTERS_CHILL.id} /> debuff on them {this.flurryOverlapped} times. Using <SpellLink id={SPELLS.BRAIN_FREEZE.id} /> applies 2 stacks of <SpellLink id={SPELLS.WINTERS_CHILL.id} /> to the target so you should always ensure you are spending both stacks before you use another <SpellLink id={SPELLS.BRAIN_FREEZE.id} /> proc.</>)\r\n          .icon(SPELLS.FLURRY.icon)\r\n          .actual(i18n._(t('mage.frost.suggestions.brainFreeze.casts')`${formatNumber(actual)} casts`))\r\n          .recommended(`Casting none is recommended`));\r\n  }\r\n\r\n  statistic() {\r\n    return (\r\n      <Statistic\r\n        position={STATISTIC_ORDER.CORE(30)}\r\n        size=\"flexible\"\r\n        tooltip={(\r\n          <>\r\n            You got {this.totalProcs} total procs.\r\n            <ul>\r\n              <li>{this.usedProcs} used</li>\r\n              <li>{this.overwrittenProcs} overwritten</li>\r\n              <li>{this.expiredProcs} expired</li>\r\n            </ul>\r\n          </>\r\n        )}\r\n      >\r\n        <BoringSpellValueText spell={SPELLS.BRAIN_FREEZE}>\r\n          {formatPercentage(this.utilPercent, 0)}% <small>Proc utilization</small>\r\n        </BoringSpellValueText>\r\n      </Statistic>\r\n    );\r\n  }\r\n}\r\n\r\nexport default BrainFreeze;\r\n","import React from 'react';\r\n\r\nimport Analyzer, { SELECTED_PLAYER, Options } from 'parser/core/Analyzer';\r\nimport { When, ThresholdStyle } from 'parser/core/ParseResults';\r\nimport Events, { CastEvent, DamageEvent, FightEndEvent } from 'parser/core/Events';\r\nimport SPELLS from 'common/SPELLS';\r\nimport SpellLink from 'common/SpellLink';\r\nimport { formatPercentage } from 'common/format';\r\nimport Statistic from 'interface/statistics/Statistic';\r\nimport BoringSpellValueText from 'interface/statistics/components/BoringSpellValueText';\r\nimport STATISTIC_CATEGORY from 'interface/others/STATISTIC_CATEGORY';\r\nimport { TooltipElement } from 'common/Tooltip';\r\nimport EnemyInstances, { encodeTargetString } from 'parser/shared/modules/EnemyInstances';\r\nimport AbilityTracker from 'parser/shared/modules/AbilityTracker';\r\nimport { SHATTER_DEBUFFS } from 'parser/mage/shared/constants';\r\nimport { i18n } from '@lingui/core';\r\nimport { t } from '@lingui/macro';\r\n\r\nclass GlacialSpike extends Analyzer {\r\n  static dependencies = {\r\n    enemies: EnemyInstances,\r\n    abilityTracker: AbilityTracker,\r\n  };\r\n  protected enemies!: EnemyInstances;\r\n  protected abilityTracker!: AbilityTracker;\r\n\r\n  lastCastEvent?: CastEvent;\r\n  lastCastDidDamage = false;\r\n  spikeShattered = 0;\r\n  spikeNotShattered = 0;\r\n\r\n  constructor(options: Options) {\r\n    super(options);\r\n    this.active = this.selectedCombatant.hasTalent(SPELLS.GLACIAL_SPIKE_TALENT.id);\r\n\r\n    this.addEventListener(Events.cast.by(SELECTED_PLAYER).spell(SPELLS.GLACIAL_SPIKE_TALENT), this.onGlacialSpikeCast);\r\n    this.addEventListener(Events.damage.by(SELECTED_PLAYER).spell(SPELLS.GLACIAL_SPIKE_DAMAGE), this.onGlacialSpikeDamage);\r\n    this.addEventListener(Events.fightend, this.onFightEnd);\r\n  }\r\n\r\n  onGlacialSpikeCast(event: CastEvent) {\r\n    if (this.lastCastEvent) {\r\n      this.flagTimeline(this.lastCastEvent);\r\n    }\r\n\r\n    this.lastCastEvent = event;\r\n    this.lastCastDidDamage = false;\r\n  }\r\n\r\n  onGlacialSpikeDamage(event: DamageEvent) {\r\n    if (!this.lastCastEvent) {\r\n      return;\r\n    }\r\n\r\n    const castTarget = encodeTargetString(this.lastCastEvent.targetID, this.lastCastEvent.targetInstance);\r\n    const damageTarget = encodeTargetString(event.targetID, event.targetInstance);\r\n\r\n    //We dont care about the Glacial Spikes that split to something else via Splitting Ice.\r\n    if (castTarget !== damageTarget) {\r\n      return;\r\n    }\r\n\r\n    this.lastCastDidDamage = true;\r\n    const enemy: any = this.enemies.getEntity(event);\r\n    if (enemy && SHATTER_DEBUFFS.some(effect => enemy.hasBuff(effect.id, event.timestamp))) {\r\n      this.spikeShattered += 1;\r\n    } else {\r\n      this.spikeNotShattered += 1;\r\n      this.flagTimeline(this.lastCastEvent);\r\n    }\r\n    this.lastCastEvent = undefined;\r\n  }\r\n\r\n  onFightEnd(event: FightEndEvent) {\r\n    if (this.lastCastEvent) {\r\n      this.flagTimeline(this.lastCastEvent);\r\n    }\r\n  }\r\n\r\n  flagTimeline(event: CastEvent) {\r\n    if (!this.lastCastEvent) {\r\n      return;\r\n    }\r\n\r\n    event.meta = event.meta || {};\r\n    event.meta.isInefficientCast = true;\r\n    if (this.lastCastDidDamage) {\r\n      event.meta.inefficientCastReason = `You cast Glacial Spike without shattering it. You should wait until it is frozen or you are able to use a Brain Freeze proc to maximize its damage.`;\r\n    } else {\r\n      event.meta.inefficientCastReason = 'The target died before Glacial Spike hit it. You should avoid this by casting faster spells on very low-health targets, it is important to not waste potential Glacial Spike damage.';\r\n    }\r\n  }\r\n\r\n  get utilPercentage() {\r\n    return (this.spikeShattered / this.totalCasts) || 0;\r\n  }\r\n\r\n  get totalCasts() {\r\n    return this.abilityTracker.getAbility(SPELLS.GLACIAL_SPIKE_TALENT.id).casts;\r\n  }\r\n\r\n  get glacialSpikeUtilizationThresholds() {\r\n    return {\r\n      actual: this.utilPercentage,\r\n      isLessThan: {\r\n        minor: 1.0,\r\n        average: 0.85,\r\n        major: 0.7,\r\n      },\r\n      style: ThresholdStyle.PERCENTAGE,\r\n    };\r\n  }\r\n\r\n  suggestions(when: When) {\r\n    when(this.glacialSpikeUtilizationThresholds)\r\n      .addSuggestion((suggest, actual, recommended) => suggest(\r\n          <>\r\n            You cast <SpellLink id={SPELLS.GLACIAL_SPIKE_TALENT.id} /> without <SpellLink id={SPELLS.SHATTER.id} />ing it {this.spikeNotShattered} times. Because it is such a potent ability, it is important to maximize it's damage by only casting it if the target is\r\n            <TooltipElement\r\n              content={(<>Winter's Chill, Frost Nova, Ice Nova, Ring of Frost, and your pet's Freeze will all cause the target to be frozen or act as frozen.</>)}\r\n            >\r\n            Frozen or acting as Frozen\r\n            </TooltipElement>.\r\n          </>)\r\n          .icon(SPELLS.GLACIAL_SPIKE_TALENT.icon)\r\n          .actual(i18n._(t('mage.frost.suggestions.glacialSpike.castsWithoutShatter')`${formatPercentage(actual, 1)}% utilization`))\r\n          .recommended(`${formatPercentage(recommended, 1)}% is recommended`));\r\n  }\r\n\r\n  statistic() {\r\n    return (\r\n      <Statistic\r\n        category={STATISTIC_CATEGORY.TALENTS}\r\n        size=\"flexible\"\r\n        tooltip={(<>You cast Glacial Spike {this.totalCasts} times, {this.spikeShattered} casts of which were Shattered</>)}\r\n      >\r\n        <BoringSpellValueText spell={SPELLS.GLACIAL_SPIKE_TALENT}>\r\n        {`${formatPercentage(this.utilPercentage, 0)}%`} <small>Cast utilization</small>\r\n        </BoringSpellValueText>\r\n      </Statistic>\r\n    );\r\n  }\r\n}\r\n\r\nexport default GlacialSpike;\r\n","import React from 'react';\r\nimport SPELLS from 'common/SPELLS';\r\nimport SpellLink from 'common/SpellLink';\r\nimport { formatPercentage } from 'common/format';\r\nimport Statistic from 'interface/statistics/Statistic';\r\nimport BoringSpellValueText from 'interface/statistics/components/BoringSpellValueText';\r\nimport STATISTIC_ORDER from 'interface/others/STATISTIC_ORDER';\r\nimport EnemyInstances, { encodeTargetString } from 'parser/shared/modules/EnemyInstances';\r\nimport AbilityTracker from 'parser/shared/modules/AbilityTracker';\r\nimport Analyzer, { SELECTED_PLAYER, Options } from 'parser/core/Analyzer';\r\nimport { When, ThresholdStyle } from 'parser/core/ParseResults';\r\nimport Events, { CastEvent, DamageEvent, ChangeBuffStackEvent } from 'parser/core/Events';\r\nimport { MS_BUFFER_100, SHATTER_DEBUFFS } from 'parser/mage/shared/constants';\r\nimport { i18n } from '@lingui/core';\r\nimport { t } from '@lingui/macro';\r\n\r\nclass IceLance extends Analyzer {\r\n  static dependencies = {\r\n    enemies: EnemyInstances,\r\n    abilityTracker: AbilityTracker,\r\n  };\r\n  protected enemies!: EnemyInstances;\r\n  protected abilityTracker!: AbilityTracker;\r\n\r\n  hadFingersProc = false;\r\n  iceLanceTargetId = \"\";\r\n  nonShatteredCasts = 0;\r\n\r\n  iceLanceCastTimestamp = 0;\r\n  totalFingersProcs = 0;\r\n  overwrittenFingersProcs = 0;\r\n  expiredFingersProcs = 0;\r\n\r\n  constructor(options: Options) {\r\n    super(options);\r\n    this.addEventListener(Events.cast.by(SELECTED_PLAYER).spell(SPELLS.ICE_LANCE), this.onCast);\r\n    this.addEventListener(Events.damage.by(SELECTED_PLAYER).spell(SPELLS.ICE_LANCE_DAMAGE), this.onDamage);\r\n    this.addEventListener(Events.changebuffstack.by(SELECTED_PLAYER).spell(SPELLS.FINGERS_OF_FROST), this.onFingersStackChange);\r\n  }\r\n\r\n  onCast(event: CastEvent) {\r\n    this.iceLanceCastTimestamp = event.timestamp;\r\n    if (event.targetID) {\r\n      this.iceLanceTargetId = encodeTargetString(event.targetID, event.targetInstance);\r\n    }\r\n    this.hadFingersProc = false;\r\n    if (this.selectedCombatant.hasBuff(SPELLS.FINGERS_OF_FROST.id)) {\r\n      this.hadFingersProc = true;\r\n    }\r\n  }\r\n\r\n  onDamage(event: DamageEvent) {\r\n    const damageTarget = encodeTargetString(event.targetID, event.targetInstance);\r\n    if (this.iceLanceTargetId !== damageTarget) {\r\n      return;\r\n    }\r\n    const enemy = this.enemies.getEntity(event);\r\n    if (enemy && !SHATTER_DEBUFFS.some(effect => enemy.hasBuff(effect.id, event.timestamp)) && !this.hadFingersProc) {\r\n      this.nonShatteredCasts += 1;\r\n    }\r\n  }\r\n\r\n  onFingersStackChange(event: ChangeBuffStackEvent) {\r\n    // FoF overcaps don't show as a refreshbuff, instead they are a stack lost followed immediately by a gain\r\n    const stackChange = event.stacksGained;\r\n    if (stackChange > 0) {\r\n      this.totalFingersProcs += stackChange;\r\n    } else if (this.iceLanceCastTimestamp && this.iceLanceCastTimestamp + MS_BUFFER_100 > event.timestamp) {\r\n      // just cast ice lance, so this stack removal probably a proc used\r\n    } else if (event.newStacks === 0) {\r\n      this.expiredFingersProcs += (-stackChange); // stacks zero out, must be expiration\r\n    } else {\r\n      this.overwrittenFingersProcs += (-stackChange); // stacks don't zero, this is an overwrite\r\n    }\r\n  }\r\n\r\n  get wastedFingersProcs() {\r\n    return this.expiredFingersProcs + this.overwrittenFingersProcs;\r\n  }\r\n\r\n  get usedFingersProcs() {\r\n    return this.totalFingersProcs - this.wastedFingersProcs;\r\n  }\r\n\r\n  get shatteredPercent() {\r\n    return 1 - (this.nonShatteredCasts / this.abilityTracker.getAbility(SPELLS.ICE_LANCE.id).casts);\r\n  }\r\n\r\n  get fingersProcUtilizationThresholds() {\r\n    return {\r\n      actual: 1 - (this.wastedFingersProcs / this.totalFingersProcs) || 0,\r\n      isLessThan: {\r\n        minor: 0.95,\r\n        average: 0.85,\r\n        major: 0.70,\r\n      },\r\n      style: ThresholdStyle.PERCENTAGE,\r\n    };\r\n  }\r\n\r\n  get nonShatteredIceLanceThresholds() {\r\n    return {\r\n      actual: (this.nonShatteredCasts / this.abilityTracker.getAbility(SPELLS.ICE_LANCE.id).casts),\r\n      isGreaterThan: {\r\n        minor: 0.05,\r\n        average: 0.15,\r\n        major: 0.25,\r\n      },\r\n      style: ThresholdStyle.PERCENTAGE,\r\n    };\r\n  }\r\n\r\n  suggestions(when: When) {\r\n    when(this.nonShatteredIceLanceThresholds)\r\n      .addSuggestion((suggest, actual, recommended) => suggest(<>You cast <SpellLink id={SPELLS.ICE_LANCE.id} /> {this.nonShatteredCasts} times ({formatPercentage(actual)}%) without <SpellLink id={SPELLS.SHATTER.id} />. Make sure that you are only casting Ice Lance when the target has <SpellLink id={SPELLS.WINTERS_CHILL.id} /> (or other Shatter effects), if you have a <SpellLink id={SPELLS.FINGERS_OF_FROST.id} /> proc, or if you are moving and you cant cast anything else.</>)\r\n          .icon(SPELLS.ICE_LANCE.icon)\r\n          .actual(i18n._(t('mage.frost.suggestions.iceLance.nonShatterCasts')`${formatPercentage(actual)}% missed`))\r\n          .recommended(`<${formatPercentage(recommended)}% is recommended`));\r\n  }\r\n\r\n  statistic() {\r\n    return (\r\n      <Statistic\r\n        position={STATISTIC_ORDER.CORE(30)}\r\n        size=\"flexible\"\r\n        tooltip=\"This is the percentage of Ice Lance casts that were shattered. The only time it is acceptable to cast Ice Lance without Shatter is if you are moving and you cant use anything else.\"\r\n      >\r\n        <BoringSpellValueText spell={SPELLS.ICE_LANCE}>\r\n          {`${formatPercentage(this.shatteredPercent, 0)}%`} <small>Casts shattered</small>\r\n        </BoringSpellValueText>\r\n      </Statistic>\r\n    );\r\n  }\r\n}\r\n\r\nexport default IceLance;\r\n","import React from 'react';\r\nimport SPELLS from 'common/SPELLS';\r\nimport { formatDuration, formatNumber } from 'common/format';\r\nimport Statistic from 'interface/statistics/Statistic';\r\nimport STATISTIC_CATEGORY from 'interface/others/STATISTIC_CATEGORY';\r\nimport BoringSpellValueText from 'interface/statistics/components/BoringSpellValueText';\r\nimport Analyzer, { Options } from 'parser/core/Analyzer';\r\nimport SpellIcon from 'common/SpellIcon';\r\n\r\nconst BASE_DURATION = 20;\r\n\r\n/*\r\n * Icy Veins' duration is increased by 10 sec.\r\n * Your Ice Lances against frozen targets extend your Icy Veins by an additional 1 sec.\r\n */\r\nclass ThermalVoid extends Analyzer {\r\n\r\n  constructor(options: Options) {\r\n    super(options);\r\n    this.active = this.selectedCombatant.hasTalent(SPELLS.THERMAL_VOID_TALENT.id);\r\n  }\r\n\r\n  statistic() {\r\n    const hist = this.selectedCombatant.getBuffHistory(SPELLS.ICY_VEINS.id);\r\n    if(!hist || hist.length === 0) {\r\n      return null;\r\n    }\r\n\r\n    let totalIncrease = 0;\r\n    let totalDuration = 0; // We could use getBuffUptime but we are doing the math anyway\r\n    const castRows = hist.map((buff: any, idx: any) => {\r\n      const end = buff.end || this.owner.currentTimestamp;\r\n      const castTime = (buff.start - this.owner.fight.start_time) / 1000;\r\n      const duration = (end - buff.start) / 1000;\r\n      totalDuration += duration;\r\n      // If the buff ended early because of death or fight end, don't blame the talent\r\n      const increase = Math.max(0, duration - BASE_DURATION);\r\n      totalIncrease += increase;\r\n      return (\r\n        <tr key={idx}>\r\n          <td>{formatDuration(castTime)}</td>\r\n          <td>{formatDuration(duration)}</td>\r\n          <td>{formatDuration(increase)}</td>\r\n        </tr>\r\n      );\r\n    });\r\n\r\n    return (\r\n      <Statistic\r\n        size=\"flexible\"\r\n        category={STATISTIC_CATEGORY.TALENTS}\r\n        tooltip=\"Extension times include the base 10 second increase from the talent.\"\r\n        dropdown={(\r\n          <>\r\n            <table className=\"table table-condensed\">\r\n            <thead>\r\n              <tr>\r\n                <th>Cast</th>\r\n                <th>Duration</th>\r\n                <th>Extension</th>\r\n              </tr>\r\n            </thead>\r\n            <tbody>\r\n              {castRows}\r\n              <tr key=\"avg\">\r\n                <th>Average</th>\r\n                <th>{formatDuration(totalDuration / hist.length)}</th>\r\n                <th>{formatDuration(totalIncrease / hist.length)}</th>\r\n              </tr>\r\n            </tbody>\r\n          </table>\r\n        </>\r\n      )}\r\n      >\r\n        <BoringSpellValueText spell={SPELLS.THERMAL_VOID_TALENT}>\r\n          <><SpellIcon id={SPELLS.ICY_VEINS.id} /> +{formatNumber(totalIncrease)} seconds</>\r\n        </BoringSpellValueText>\r\n      </Statistic>\r\n    );\r\n  }\r\n}\r\n\r\nexport default ThermalVoid;\r\n","import React from 'react';\r\n\r\nimport Analyzer, { SELECTED_PLAYER, Options } from 'parser/core/Analyzer';\r\nimport { When, ThresholdStyle } from 'parser/core/ParseResults';\r\nimport Events, { CastEvent, DamageEvent, ApplyDebuffEvent, RemoveDebuffEvent, FightEndEvent } from 'parser/core/Events';\r\nimport EventHistory from 'parser/shared/modules/EventHistory';\r\nimport EnemyInstances from 'parser/shared/modules/EnemyInstances';\r\nimport SPELLS from 'common/SPELLS';\r\nimport COVENANTS from 'game/shadowlands/COVENANTS';\r\nimport SpellIcon from 'common/SpellIcon';\r\nimport SpellLink from 'common/SpellLink';\r\nimport { formatPercentage } from 'common/format';\r\nimport Statistic from 'interface/statistics/Statistic';\r\nimport BoringSpellValueText from 'interface/statistics/components/BoringSpellValueText';\r\nimport STATISTIC_ORDER from 'interface/others/STATISTIC_ORDER';\r\nimport { i18n } from '@lingui/core';\r\nimport { t } from '@lingui/macro';\r\n\r\nconst AFFECTED_CASTS = [\r\n  SPELLS.FROSTBOLT,\r\n  SPELLS.EBONBOLT_TALENT,\r\n  SPELLS.GLACIAL_SPIKE_TALENT,\r\n  SPELLS.ICE_LANCE,\r\n  SPELLS.COMET_STORM_TALENT,\r\n  SPELLS.ICE_NOVA_TALENT,\r\n  SPELLS.RAY_OF_FROST_TALENT,\r\n];\r\n\r\nconst AFFECTED_DAMAGE = [\r\n  SPELLS.FROSTBOLT_DAMAGE,\r\n  SPELLS.EBONBOLT_DAMAGE,\r\n  SPELLS.GLACIAL_SPIKE_DAMAGE,\r\n  SPELLS.ICE_LANCE_DAMAGE,\r\n  SPELLS.COMET_STORM_TALENT,\r\n  SPELLS.ICE_NOVA_TALENT,\r\n  SPELLS.RAY_OF_FROST_TALENT,\r\n];\r\n\r\nconst WINTERS_CHILL_SPENDERS = [\r\n  SPELLS.ICE_LANCE_DAMAGE,\r\n  SPELLS.GLACIAL_SPIKE_DAMAGE,\r\n  SPELLS.ICE_NOVA_TALENT,\r\n  SPELLS.RAY_OF_FROST_TALENT,\r\n];\r\n\r\nconst WINTERS_CHILL_HARDCASTS = [\r\nSPELLS.FROSTBOLT_DAMAGE,\r\nSPELLS.EBONBOLT_DAMAGE,\r\nSPELLS.GLACIAL_SPIKE_DAMAGE,\r\nSPELLS.RADIANT_SPARK,\r\n];\r\n\r\nconst debug = false;\r\n\r\nclass WintersChill extends Analyzer {\r\n  static dependencies = {\r\n    enemies: EnemyInstances,\r\n    eventHistory: EventHistory,\r\n  };\r\n  protected enemies!: EnemyInstances;\r\n  protected eventHistory!: EventHistory;\r\n\r\n  hasGlacialSpike: boolean;\r\n  hasEbonbolt: boolean;\r\n  isVenthyr: boolean;\r\n\r\n  totalProcs = 0;\r\n  totalChillStacks = 0;\r\n  preCastFound = false;\r\n  preCastIgnored = false;\r\n  preCastSpellId = 0;\r\n  wintersChillHits: number[] = [];\r\n  lastCastEvent?: CastEvent;\r\n  goodShatteredCasts = 0;\r\n  badShatteredCasts = 0;\r\n  missedHardcasts = 0;\r\n  missedShatters = 0;\r\n  badShatters = 0;\r\n  buffRemovedTimestamp = 0;\r\n\r\n  constructor(options: Options) {\r\n    super(options);\r\n    this.hasGlacialSpike = this.selectedCombatant.hasTalent(SPELLS.GLACIAL_SPIKE_TALENT.id);\r\n    this.hasEbonbolt = this.selectedCombatant.hasTalent(SPELLS.EBONBOLT_TALENT.id);\r\n    this.isVenthyr = this.selectedCombatant.hasCovenant(COVENANTS.VENTHYR.id);\r\n\r\n    this.addEventListener(Events.cast.by(SELECTED_PLAYER).spell(AFFECTED_CASTS), this.onCast);\r\n    this.addEventListener(Events.damage.by(SELECTED_PLAYER).spell(AFFECTED_DAMAGE), this.onDamage);\r\n    this.addEventListener(Events.applydebuff.by(SELECTED_PLAYER).spell(SPELLS.WINTERS_CHILL), this.onDebuffApplied);\r\n    this.addEventListener(Events.removedebuff.by(SELECTED_PLAYER).spell(SPELLS.WINTERS_CHILL), this.onDebuffRemoved);\r\n    this.addEventListener(Events.fightend, this.onFinished);\r\n  }\r\n\r\n  onCast(event: CastEvent) {\r\n    this.lastCastEvent = event;\r\n  }\r\n\r\n  onDamage(event: DamageEvent) {\r\n    const spellId = event.ability.guid;\r\n    const enemy = this.enemies.getEntity(event);\r\n\r\n    if (!enemy || !enemy.hasBuff(SPELLS.WINTERS_CHILL.id)) {\r\n      return;\r\n    }\r\n\r\n    if (this.isVenthyr && enemy.hasBuff(SPELLS.MIRRORS_OF_TORMENT.id)) {\r\n      this.preCastIgnored = true;\r\n    } else if (WINTERS_CHILL_HARDCASTS.some(acceptable => acceptable.id === spellId) || this.preCastSpellId === SPELLS.RADIANT_SPARK.id) {\r\n      this.preCastFound = true;\r\n    } else if (WINTERS_CHILL_SPENDERS.some(acceptable => acceptable.id === spellId)) {\r\n      this.goodShatteredCasts += 1;\r\n    } else {\r\n      this.badShatteredCasts += 1;\r\n    }\r\n\r\n    this.wintersChillHits.push(spellId);\r\n    this.lastCastEvent = undefined;\r\n  }\r\n\r\n  onDebuffApplied(event: ApplyDebuffEvent) {\r\n    this.preCastFound = false;\r\n    this.preCastIgnored = false;\r\n    this.preCastSpellId = 0;\r\n    this.goodShatteredCasts = 0;\r\n    this.badShatteredCasts = 0;\r\n    this.wintersChillHits = [];\r\n    const preCastSpell: any = this.eventHistory.last(2,1000,Events.cast.by(SELECTED_PLAYER));\r\n    this.totalProcs += 1;\r\n    this.totalChillStacks += 2;\r\n\r\n    if (preCastSpell.length <= 1) {\r\n      this.preCastFound = false;\r\n    } else {\r\n      this.preCastFound = true;\r\n      this.preCastSpellId = preCastSpell!.find((spell: any) => spell.ability.guid !== SPELLS.FLURRY.id).ability.guid;\r\n    }\r\n  }\r\n\r\n  onDebuffRemoved(event: RemoveDebuffEvent) {\r\n    if (debug) {\r\n      this.log(\"Pre Cast Found: \" + this.preCastFound);\r\n      this.log(\"Pre Cast Spell ID: \" + this.preCastSpellId);\r\n      this.log(\"Good Shatters: \" + this.goodShatteredCasts);\r\n      this.log(\"Bad Shatters: \" + this.badShatteredCasts);\r\n      this.log(\"Winter Chill Hits: \" + this.wintersChillHits);\r\n    }\r\n\r\n    if (!this.preCastFound && !this.preCastIgnored) {\r\n      this.missedHardcasts += 1;\r\n    }\r\n\r\n    if (this.goodShatteredCasts + this.badShatteredCasts < 2) {\r\n      this.missedShatters += (2 - this.goodShatteredCasts + this.badShatteredCasts);\r\n    } else if (this.badShatteredCasts > 0) {\r\n      this.badShatters += this.badShatteredCasts;\r\n    }\r\n\r\n    this.buffRemovedTimestamp = event.timestamp;\r\n  }\r\n\r\n  onFinished(event: FightEndEvent) {\r\n    //If there was a Winters Chill applied that had not been removed yet when the fight ended, adjust the total chill stacks and missed shatters to account for what the player didnt have time to use\r\n    //Only reduce the total and missed numbers by the amount that was unused. So if they shattered one of the 2 casts then only reduce by 1.\r\n    if (this.buffRemovedTimestamp === event.timestamp) {\r\n      this.totalChillStacks -= 2 - this.goodShatteredCasts + this.badShatteredCasts;\r\n      this.missedShatters -= 2 - this.goodShatteredCasts + this.badShatteredCasts;\r\n    }\r\n\r\n  }\r\n\r\n  get shatterMissedPercent() {\r\n    return (this.badShatters + this.missedShatters) / this.totalChillStacks || 0;\r\n  }\r\n\r\n  get shatterUtil() {\r\n    return 1 - this.shatterMissedPercent;\r\n  }\r\n\r\n  get hardcastMissedPercent() {\r\n    return (this.missedHardcasts / this.totalProcs) || 0;\r\n  }\r\n\r\n  get hardcastUtil() {\r\n    return 1 - this.hardcastMissedPercent;\r\n  }\r\n\r\n  // less strict than the ice lance suggestion both because it's less important,\r\n  // and also because using a Brain Freeze after being forced to move is a good excuse for missing the hardcast.\r\n  get wintersChillHardCastThresholds() {\r\n    return {\r\n      actual: this.hardcastUtil,\r\n      isLessThan: {\r\n        minor: 0.90,\r\n        average: 0.80,\r\n        major: 0.60,\r\n      },\r\n      style: ThresholdStyle.PERCENTAGE,\r\n    };\r\n  }\r\n\r\n  get wintersChillShatterThresholds() {\r\n    return {\r\n      actual: this.shatterUtil,\r\n      isLessThan: {\r\n        minor: 0.95,\r\n        average: 0.85,\r\n        major: 0.75,\r\n      },\r\n      style: ThresholdStyle.PERCENTAGE,\r\n    };\r\n  }\r\n\r\n  suggestions(when: When) {\r\n    when(this.wintersChillShatterThresholds)\r\n      .addSuggestion((suggest, actual, recommended) => suggest(<>You failed to properly take advantage of <SpellLink id={SPELLS.WINTERS_CHILL.id} /> on your target {this.badShatters + this.missedShatters} times ({formatPercentage(this.shatterMissedPercent)}%). After debuffing the target via <SpellLink id={SPELLS.BRAIN_FREEZE.id} /> and <SpellLink id={SPELLS.FLURRY.id} />, you should ensure that you hit the target with {this.hasGlacialSpike ? <>a <SpellLink id={SPELLS.GLACIAL_SPIKE_TALENT.id} /> and an <SpellLink id={SPELLS.ICE_LANCE.id} /> (If Glacial Spike is available), or </> : ''} two <SpellLink id={SPELLS.ICE_LANCE.id} />s before the <SpellLink id={SPELLS.WINTERS_CHILL.id} /> debuff expires to get the most out of <SpellLink id={SPELLS.SHATTER.id} />.</>)\r\n          .icon(SPELLS.ICE_LANCE.icon)\r\n          .actual(i18n._(t('mage.frost.suggestions.wintersChill.notShatteredIceLance')`${formatPercentage(this.shatterMissedPercent)}% Winter's Chill not shattered with Ice Lance`))\r\n          .recommended(`${formatPercentage(1 - recommended)}% is recommended`));\r\n    when(this.wintersChillHardCastThresholds)\r\n      .addSuggestion((suggest, actual, recommended) => suggest(<>You failed to use a pre-cast ability before spending your <SpellLink id={SPELLS.BRAIN_FREEZE.id} /> {this.missedHardcasts} times ({formatPercentage(this.hardcastMissedPercent)}%). Because of the travel time of <SpellLink id={SPELLS.FLURRY.id} />, you should cast a damaging ability such as <SpellLink id={SPELLS.FROSTBOLT.id} /> {this.hasEbonbolt ? <>or <SpellLink id={SPELLS.EBONBOLT_TALENT.id} /></> : ''} immediately before using your instant cast <SpellLink id={SPELLS.FLURRY.id} />. Doing this will allow your pre-cast ability to hit the target after <SpellLink id={SPELLS.FLURRY.id} /> (unless you are standing too close to the target) allowing it to benefit from <SpellLink id={SPELLS.SHATTER.id} />. If you are a Kyrian, it is also acceptable to pre-cast <SpellLink id={SPELLS.RADIANT_SPARK.id} /> instead.</>)\r\n          .icon(SPELLS.FROSTBOLT.icon)\r\n          .actual(i18n._(t('mage.frost.suggestions.wintersChill.notShattered')`${formatPercentage(this.hardcastMissedPercent)}% Winter's Chill not shattered with Frostbolt, Glacial Spike, or Ebonbolt`))\r\n          .recommended(`${formatPercentage(1 - recommended)}% is recommended`));\r\n  }\r\n\r\n  statistic() {\r\n    return (\r\n      <Statistic\r\n        position={STATISTIC_ORDER.CORE(30)}\r\n        size=\"flexible\"\r\n        tooltip={(\r\n          <>\r\n            When using your Brain Freeze procs, you should always ensure that you have something immediately before it (Like Frostbolt, Ebonbolt, or Radiant Spark) as well as 2 Ice Lance Casts (Or Glacial Spike + Ice Lance) immediately after to get the most out of the Winter's Chill debuff that is applied to the target. Doing so will allow the cast before and the 2 casts after to all benefit from Shatter. Note that if you are very close to your target, then the ability you used immediately before Flurry might hit the target too quickly and not get shattered.\r\n          </>\r\n        )}\r\n      >\r\n        <BoringSpellValueText spell={SPELLS.WINTERS_CHILL}>\r\n          <SpellIcon id={SPELLS.WINTERS_CHILL.id} /> {formatPercentage(this.shatterUtil, 0)}% <small>Spells shattered</small><br />\r\n          <SpellIcon id={SPELLS.FROSTBOLT.id} /> {formatPercentage(this.hardcastUtil, 0)}% <small>Pre-casts shattered</small>\r\n        </BoringSpellValueText>\r\n      </Statistic>\r\n    );\r\n  }\r\n}\r\n\r\nexport default WintersChill;\r\n","import React from 'react';\r\n\r\nimport CoreAlwaysBeCasting from 'parser/shared/modules/AlwaysBeCasting';\r\n\r\nimport SPELLS from 'common/SPELLS';\r\nimport { formatPercentage } from 'common/format';\r\nimport Statistic from 'interface/statistics/Statistic';\r\nimport Gauge from 'interface/statistics/components/Gauge';\r\nimport STATISTIC_ORDER from 'interface/others/STATISTIC_ORDER';\r\nimport SpellLink from 'common/SpellLink';\r\nimport { When, ThresholdStyle } from 'parser/core/ParseResults';\r\nimport { i18n } from '@lingui/core';\r\nimport { t, Trans } from '@lingui/macro';\r\n\r\nclass AlwaysBeCasting extends CoreAlwaysBeCasting {\r\n  get deadTimePercentage() {\r\n    return this.totalTimeWasted / this.owner.fightDuration;\r\n  }\r\n\r\n  get overrideDowntimeSuggestionThresholds() {\r\n    return {\r\n      style: ThresholdStyle.PERCENTAGE,\r\n      actual: this.downtimePercentage,\r\n      isGreaterThan: {\r\n        minor: 0.05,\r\n        average: 0.15,\r\n        major: 0.25,\r\n      },\r\n    };\r\n  }\r\n\r\n  suggestions(when: When) {\r\n    const boss = this.owner.boss;\r\n    if (!boss || !boss.fight.disableDowntimeSuggestion) {\r\n      when(this.overrideDowntimeSuggestionThresholds)\r\n        .addSuggestion((suggest, actual, recommended) => suggest(<>Your downtime can be improved. Try to Always Be Casting (ABC) and try to reduce the delay between casting spells. If you have to move, try casting instants like <SpellLink id={SPELLS.FIRE_BLAST.id} /> or <SpellLink id={SPELLS.ARCANE_EXPLOSION.id} /> (if there are 2+ targets); even unbuffed <SpellLink id={SPELLS.ICE_LANCE.id} /> spam is better than nothing. Additionally, if you are standing still while waiting for a boss damage reduction or immunity phase to end, you should still be casting <SpellLink id={SPELLS.FROSTBOLT.id} /> to generate procs or build <SpellLink id={SPELLS.ICICLES_BUFF.id} />.</>)\r\n            .icon('spell_mage_altertime')\r\n            .actual(i18n._(t('mage.frost.suggestions.alwaysBeCasting.downtime')`${formatPercentage(actual)}% downtime`))\r\n            .recommended(`<${formatPercentage(recommended)}% is recommended`));\r\n    }\r\n  }\r\n\r\n  statistic() {\r\n    return (\r\n      <Statistic\r\n        position={STATISTIC_ORDER.CORE(10)}\r\n        tooltip={(\r\n          <Trans id=\"mage.frost.alwaysBeCasting.statistic.tooltip\">\r\n            Downtime is available time not used to cast anything (including not having your GCD rolling). This can be caused by delays between casting spells, latency, cast interrupting or just simply not casting anything (e.g. due to movement/stunned).<br />\r\n            <ul>\r\n              <li>You spent <strong>{formatPercentage(this.activeTimePercentage)}%</strong> of your time casting something.</li>\r\n              <li>You spent <strong>{formatPercentage(this.downtimePercentage)}%</strong> of your time casting nothing at all.</li>\r\n            </ul>\r\n          </Trans>\r\n        )}\r\n      >\r\n        <div className=\"pad\">\r\n          <label><Trans id=\"mage.frost.alwaysBeCasting.statistic.label\">Active time</Trans></label>\r\n          <Gauge value={this.activeTimePercentage} />\r\n        </div>\r\n      </Statistic>\r\n    );\r\n  }\r\n}\r\n\r\nexport default AlwaysBeCasting;\r\n","import React from 'react';\r\nimport SPELLS from 'common/SPELLS';\r\nimport SpellLink from 'common/SpellLink';\r\nimport UptimeIcon from 'interface/icons/Uptime';\r\nimport CooldownIcon from 'interface/icons/Cooldown';\r\nimport { formatPercentage, formatNumber, formatThousands, formatDuration } from 'common/format';\r\nimport Statistic from 'interface/statistics/Statistic';\r\nimport BoringValueText from 'interface/statistics/components/BoringValueText';\r\nimport STATISTIC_ORDER from 'interface/others/STATISTIC_ORDER';\r\nimport Analyzer, { Options, SELECTED_PLAYER_PET } from 'parser/core/Analyzer';\r\nimport { When, ThresholdStyle } from 'parser/core/ParseResults';\r\nimport Events, { BeginCastEvent, CastEvent, DamageEvent } from 'parser/core/Events';\r\nimport { i18n } from '@lingui/core';\r\nimport { t } from '@lingui/macro';\r\n\r\nimport AlwaysBeCasting from './AlwaysBeCasting';\r\n\r\nclass WaterElemental extends Analyzer {\r\n  static dependencies = {\r\n    abc: AlwaysBeCasting,\r\n  };\r\n  protected abc!: AlwaysBeCasting;\r\n\r\n  beginCastSpell?: BeginCastEvent;\r\n  _waterboltsCancelled = 0;\r\n  _waterboltsCastStarts = 0;\r\n  _waterboltHits = 0;\r\n  _waterboltDamage = 0;\r\n  wasCastStarted = false;\r\n  petActiveTime = 0;\r\n  _timestampLastFinish = 0;\r\n  _timestampLastCast = 0;\r\n  _timestampFirstCast = 0;\r\n\r\n  constructor(options: Options) {\r\n    super(options);\r\n    this.active = !this.selectedCombatant.hasTalent(SPELLS.LONELY_WINTER_TALENT.id);\r\n\r\n    this.addEventListener(Events.begincast.by(SELECTED_PLAYER_PET).spell(SPELLS.WATERBOLT), this.onWaterboltBeginCast);\r\n    this.addEventListener(Events.cast.by(SELECTED_PLAYER_PET).spell(SPELLS.WATERBOLT), this.onWaterboltCast);\r\n    this.addEventListener(Events.damage.by(SELECTED_PLAYER_PET).spell(SPELLS.WATERBOLT), this.onWaterboltDamage);\r\n  }\r\n\r\n  onWaterboltBeginCast(event: BeginCastEvent) {\r\n    if (this.wasCastStarted) {\r\n        this._waterboltsCancelled += 1;\r\n    }\r\n    if (this._waterboltHits === 0 && this._timestampFirstCast === 0) {\r\n      this._timestampFirstCast = event.timestamp;\r\n    }\r\n    this.beginCastSpell = event;\r\n    this.wasCastStarted = true;\r\n    this._timestampLastCast = event.timestamp;\r\n  }\r\n\r\n  onWaterboltCast(event: CastEvent) {\r\n    if (this.beginCastSpell && this.beginCastSpell.ability.guid !== event.ability.guid && this.wasCastStarted) {\r\n        this._waterboltsCancelled += 1;\r\n    } else {\r\n      this._waterboltsCastStarts += 1;\r\n      this._timestampLastFinish = event.timestamp;\r\n      if (this._timestampLastCast === 0) {\r\n        //in case casting was started before going infight\r\n        this._timestampLastCast = this.owner.fight.start_time;\r\n      }\r\n      if (this._waterboltHits === 0 && this._timestampFirstCast === 0) {\r\n        this._timestampFirstCast = event.timestamp;\r\n      }\r\n      this.petActiveTime += this._timestampLastFinish - this._timestampLastCast;\r\n    }\r\n    this.wasCastStarted = false;\r\n  }\r\n\r\n  onWaterboltDamage(event: DamageEvent) {\r\n    if (this._waterboltHits === 0 && this._timestampFirstCast === 0) {\r\n      this._timestampFirstCast = event.timestamp;\r\n    }\r\n    this._waterboltHits += 1;\r\n    this._waterboltDamage += event.amount + (event.absorbed || 0);\r\n  }\r\n\r\n  get petDowntimePercentage() {\r\n    return 1 - this.petActiveTimePercentage;\r\n  }\r\n\r\n  get petActiveTimePercentage() {\r\n    return this.petActiveTime / this.owner.fightDuration;\r\n  }\r\n\r\n  get prepullSummonCheck() {\r\n    return this._timestampFirstCast - this.owner.fight.start_time;\r\n  }\r\n\r\n  get petTotalCasts() {\r\n    return this._waterboltsCancelled + this._waterboltsCastStarts;\r\n  }\r\n\r\n\r\n  //checks for difference between player and pet uptime\r\n  get waterElementalUptimeThresholds() {\r\n    return {\r\n      actual: this.petActiveTimePercentage,\r\n      isLessThan: {\r\n        minor: this.abc.activeTimePercentage - 0.10, // eg. player has 83% so the pet can have 73%\r\n        average: this.abc.activeTimePercentage - 0.25,\r\n        major: this.abc.activeTimePercentage -0.30,\r\n      },\r\n      style: ThresholdStyle.PERCENTAGE,\r\n    };\r\n  }\r\n\r\n  //checks for the time between pull and first action (begin cast/cast/damage) from pet\r\n  get waterElementalPrepullThresholds() {\r\n    return {\r\n      actual: Math.abs(this.prepullSummonCheck),\r\n      isGreaterThan: {\r\n        minor: 5000, //\r\n        average: 10000, // 5 - 10 seconds after pull should give the player time for fetid/mythrax-like pulls\r\n        major: 20000, //\r\n      },\r\n      style: ThresholdStyle.NUMBER,\r\n    };\r\n  }\r\n\r\n  suggestions(when: When) {\r\n    when(this.waterElementalUptimeThresholds)\r\n    .addSuggestion((suggest, actual, recommended) => suggest(<>\r\n                      Your <SpellLink id={SPELLS.SUMMON_WATER_ELEMENTAL.id} /> uptime can be improved.\r\n                      The uptime of your Water Elemental should more or less mirror your own uptime, higher being better.\r\n                      Ensure you have your it summoned pre-pull and that it's always attacking.\r\n                      </>)\r\n          .icon(SPELLS.SUMMON_WATER_ELEMENTAL.icon)\r\n          .actual(i18n._(t('mage.frost.suggestions.waterElemental.uptime')`${formatPercentage(actual)}% uptime`))\r\n          .recommended(`mirroring your own uptime (${formatPercentage(this.abc.activeTimePercentage)}% or more) is recommended`));\r\n    when(this.waterElementalPrepullThresholds)\r\n      .addSuggestion((suggest, actual, recommended) => suggest(<>\r\n                      Your Water Elemental should be able to cast Waterbolt right when the fight starts. Therefore, cast <SpellLink id={SPELLS.SUMMON_WATER_ELEMENTAL.id} /> before the fight.\r\n                      </>)\r\n          .icon(SPELLS.WATERBOLT.icon)\r\n          .actual(i18n._(t('mage.frost.suggestions.frostElemental.utilization')`${(this._timestampFirstCast === 0 ? 'Never attacked or not summoned' : 'First attack: ' + formatDuration((this._timestampFirstCast - this.owner.fight.start_time)/1000) + ' into the fight')}`))\r\n          .recommended(`summoning pre-fight is recommended`));\r\n  }\r\n\r\n  statistic() {\r\n    return (\r\n      <Statistic\r\n        position={STATISTIC_ORDER.CORE(60)}\r\n        size=\"flexible\"\r\n        tooltip={(\r\n          <>\r\n            Water Elemental was casting for {formatPercentage(this.petActiveTimePercentage)} % of the fight (Downtime: {formatPercentage(this.petDowntimePercentage)} %).<br />\r\n            Your Water Elemental began casting {this.petTotalCasts} times.<br />\r\n            <ul>\r\n              <li>{this._waterboltHits} casts dealt a total damage of {formatThousands(this._waterboltDamage)}.</li>\r\n              <li>{this._waterboltsCancelled} casts were cancelled.</li>\r\n              <li>{this.petTotalCasts - this._waterboltsCancelled - this._waterboltHits} did not hit a target in time.</li>\r\n            </ul>\r\n          </>\r\n        )}\r\n      >\r\n        <BoringValueText label=\"Water Elemental\">\r\n          <UptimeIcon /> {formatPercentage(this.petActiveTimePercentage)}% <small>Pet uptime</small><br />\r\n          <CooldownIcon /> {formatNumber(this._waterboltDamage / (this.owner.fightDuration / 1000))} <small>Pet DPS</small>\r\n        </BoringValueText>\r\n      </Statistic>\r\n    );\r\n  }\r\n}\r\n\r\nexport default WaterElemental;\r\n","import React from 'react';\r\nimport PropTypes from 'prop-types';\r\nimport SPELLS from 'common/SPELLS';\r\nimport SpellLink from 'common/SpellLink';\r\nimport Checklist from 'parser/shared/modules/features/Checklist';\r\nimport Rule from 'parser/shared/modules/features/Checklist/Rule';\r\nimport Requirement from 'parser/shared/modules/features/Checklist/Requirement';\r\nimport PreparationRule from 'parser/shared/modules/features/Checklist/PreparationRule';\r\nimport GenericCastEfficiencyRequirement from 'parser/shared/modules/features/Checklist/GenericCastEfficiencyRequirement';\r\n\r\nconst FrostMageChecklist = ({ combatant, castEfficiency, thresholds }: any) => {\r\n  const AbilityRequirement = (props: any) => (\r\n    <GenericCastEfficiencyRequirement\r\n      castEfficiency={castEfficiency.getCastEfficiencyForSpellId(props.spell)}\r\n      {...props}\r\n    />\r\n  );\r\n  AbilityRequirement.propTypes = {\r\n    spell: PropTypes.number.isRequired,\r\n  };\r\n\r\n  return (\r\n    <Checklist>\r\n      <Rule\r\n        name=\"Use your cooldowns\"\r\n        description={(\r\n          <>\r\n            Using your cooldown abilities as often as possible can help raise your dps significantly. Some help more than others, but as a general rule of thumb you should be looking to use most of your damaging abilities and damage cooldowns as often as possible unless you need to save them for a priority burst phase that is coming up soon.\r\n          </>\r\n        )}\r\n      >\r\n        <AbilityRequirement spell={SPELLS.ICY_VEINS.id} />\r\n        <AbilityRequirement spell={SPELLS.FROZEN_ORB.id} />\r\n        {combatant.hasTalent(SPELLS.EBONBOLT_TALENT.id) && !combatant.hasTalent(SPELLS.GLACIAL_SPIKE_TALENT.id) && <AbilityRequirement spell={SPELLS.EBONBOLT_TALENT.id} />}\r\n        {combatant.hasTalent(SPELLS.COMET_STORM_TALENT.id) && <AbilityRequirement spell={SPELLS.COMET_STORM_TALENT.id} />}\r\n        {combatant.hasTalent(SPELLS.RUNE_OF_POWER_TALENT.id) && <AbilityRequirement spell={SPELLS.RUNE_OF_POWER_TALENT.id} />}\r\n        {combatant.hasTalent(SPELLS.RAY_OF_FROST_TALENT.id) && <AbilityRequirement spell={SPELLS.RAY_OF_FROST_TALENT.id} />}\r\n        {combatant.hasTalent(SPELLS.ICE_NOVA_TALENT.id) && <AbilityRequirement spell={SPELLS.ICE_NOVA_TALENT.id} />}\r\n      </Rule>\r\n      <Rule\r\n        name=\"Shatter your spells\"\r\n        description={(\r\n          <>\r\n            The most important element of maximizing the damage of your rotation is ensuring that you are <SpellLink id={SPELLS.SHATTER.id} />ing as many of your spells as possible. The key aspect of this is taking advantage of the <SpellLink id={SPELLS.WINTERS_CHILL.id} /> debuff. Winter's Chill is applied to the target when you use a <SpellLink id={SPELLS.BRAIN_FREEZE.id} /> proc and makes the target act as if it is frozen for a short duration of time. Therefore, you should cast a rotational ability like <SpellLink id={SPELLS.FROSTBOLT.id} />, <SpellLink id={SPELLS.EBONBOLT_TALENT.id} />, or <SpellLink id={SPELLS.GLACIAL_SPIKE_TALENT.id} />, followed immediately by the Brain Freeze buffed Flurry and then end with an <SpellLink id={SPELLS.ICE_LANCE.id} />. Against non-boss enemies, you can also utilize other things like <SpellLink id={SPELLS.FROST_NOVA.id} /> or your pet's <SpellLink id={SPELLS.FREEZE.id} /> to shatter spells as well.\r\n          </>\r\n        )}\r\n      >\r\n        <Requirement name=\"Ice Lance into Winter's Chill\" thresholds={thresholds.wintersChillShatter} tooltip=\"Using Brain Freeze will apply the Winter's Chill debuff to the target which causes your spells to act as if the target is frozen. Therefore, you should always cast Ice Lance after every instant cast Flurry so that the Ice Lance hits the target while Winter's Chill is up.\" />\r\n        <Requirement name=\"Hardcast into Winter's Chill\" thresholds={thresholds.wintersChillHardCasts} tooltip=\"Flurry travels faster than your other spells, so you can pre-cast Frostbolt, Ebonbolt, or Glacial Spike before using your instant cast Flurry. This will result in the pre-cast spell landing in the Winter's Chill debuff and dealing bonus shatter damage.\" />\r\n      </Rule>\r\n      <Rule\r\n        name=\"Use your procs effectively\"\r\n        description={(\r\n          <>\r\n            Frost Mage revolves almost entirely around utilizing your procs effectively. Therefore it is very important that when you get a proc, you use it quickly and efficiently to prevent them from expiring and to lessen the likelyhood of overwriting them or wasting them. You should aim to use your <SpellLink id={SPELLS.FINGERS_OF_FROST.id} /> as quickly as possible to ensure that you do not overcap and to avoid wasting them. Additionally, you should try to ensure that you use all of your Fingers of Frost procs before you use your <SpellLink id={SPELLS.BRAIN_FREEZE.id} /> proc, but sometimes this is not possible. If you are already casting <SpellLink id={SPELLS.FROSTBOLT.id} />, <SpellLink id={SPELLS.EBONBOLT_TALENT.id} />, or <SpellLink id={SPELLS.GLACIAL_SPIKE_TALENT.id} /> and you have both a <SpellLink id={SPELLS.BRAIN_FREEZE.id} /> and a <SpellLink id={SPELLS.FINGERS_OF_FROST.id} /> proc, you should prioritize using the Brain Freeze and let the Fingers of Frost proc get wasted.\r\n          </>\r\n        )}\r\n      >\r\n        <Requirement name=\"Used Brain Freeze procs\" thresholds={thresholds.brainFreezeUtilization} tooltip=\"Your Brain Freeze utilization. Brain Freeze is your most important proc and it is very important that you utilize them properly.\" />\r\n        <Requirement name=\"Used Fingers of Frost procs\" thresholds={thresholds.fingersOfFrostUtilization} />\r\n      </Rule>\r\n      <Rule\r\n        name=\"Use Glacial Spike properly\"\r\n        description={(\r\n          <>\r\n            <SpellLink id={SPELLS.GLACIAL_SPIKE_TALENT.id} /> is one of the most impactful talents that you can choose and it plays a large part in your rotation; So you should always ensure that you are getting the most out of it, because a large part of your damage will come from making sure that you are handling Glacial Spike properly. As a rule, once you have Glacial Spike available, you should not cast it unless you have a <SpellLink id={SPELLS.BRAIN_FREEZE.id} /> proc to use alongside it (<SpellLink id={SPELLS.GLACIAL_SPIKE_TALENT.id} /> {'>'} <SpellLink id={SPELLS.FLURRY.id} /> {'>'} <SpellLink id={SPELLS.ICE_LANCE.id} />) or if you also have the <SpellLink id={SPELLS.SPLITTING_ICE_TALENT.id} /> and the Glacial Spike will hit a second target. If neither of those are true, then you should continue casting <SpellLink id={SPELLS.FROSTBOLT.id} /> until you have a <SpellLink id={SPELLS.BRAIN_FREEZE.id} /> proc. If you are consistently in situations where you are waiting to get a Brain Freeze proc, then consider taking the <SpellLink id={SPELLS.EBONBOLT_TALENT.id} /> talent and saving it for when you need to generate a proc to use with Glacial Spike.\r\n          </>\r\n        )}\r\n      >\r\n        {combatant.hasTalent(SPELLS.GLACIAL_SPIKE_TALENT.id) && <Requirement name=\"Glacial Spike utilization\" thresholds={thresholds.glacialSpikeUtilization} />}\r\n      </Rule>\r\n      <Rule\r\n        name=\"Use your talents effectively\"\r\n        description=\"Regardless of which talents you select, you should ensure that you are utilizing them properly. If you are having trouble effectively using a particular talent, you should consider taking a different talent that you can utilize properly or focus on effectively using the talents that you have selected.\"\r\n      >\r\n        {combatant.hasTalent(SPELLS.RUNE_OF_POWER_TALENT.id) && <Requirement name=\"Rune of Power uptime\" thresholds={thresholds.runeOfPowerBuffUptime} tooltip=\"Using Rune of Power effectively means being able to stay within the range of it for it's entire duration. If you are unable to do so or if you frequently have to move out of the range of the buff, consider taking a different talent instead.\" />}\r\n        {!combatant.hasTalent(SPELLS.LONELY_WINTER_TALENT.id) && <Requirement name=\"Water Elemental utilization\" thresholds={thresholds.waterElementalUptime} />}\r\n      </Rule>\r\n      <Rule\r\n        name=\"Avoid downtime\"\r\n        description={(\r\n          <>\r\n            As a DPS, it is important to spend as much time casting as possible since if you arent casting you arent doing damage. Therefore it is important to minimize your movements, stay within range of the target, and try to avoid cancelling casts (unless you have to). While some fights will have an amount of time that is unavoidable downtime; the more you can minimize that downtime, the better.\r\n          </>\r\n        )}\r\n      >\r\n        <Requirement name=\"Downtime\" thresholds={thresholds.downtimeSuggestionThresholds} />\r\n        <Requirement name=\"Cancelled casts\" thresholds={thresholds.cancelledCasts} />\r\n      </Rule>\r\n      <PreparationRule thresholds={thresholds}>\r\n        <Requirement name=\"Arcane Intellect active\" thresholds={thresholds.arcaneIntellectUptime} />\r\n      </PreparationRule>\r\n    </Checklist>\r\n  );\r\n};\r\n\r\nFrostMageChecklist.propTypes = {\r\n  castEfficiency: PropTypes.object.isRequired,\r\n  combatant: PropTypes.shape({\r\n    hasTalent: PropTypes.func.isRequired,\r\n  }).isRequired,\r\n  thresholds: PropTypes.object.isRequired,\r\n};\r\n\r\nexport default FrostMageChecklist;\r\n","import React from 'react';\r\n\r\nimport BaseChecklist from 'parser/shared/modules/features/Checklist/Module';\r\nimport CastEfficiency from 'parser/shared/modules/CastEfficiency';\r\nimport Combatants from 'parser/shared/modules/Combatants';\r\nimport PreparationRuleAnalyzer from 'parser/shared/modules/features/Checklist/PreparationRuleAnalyzer';\r\n\r\nimport BrainFreeze from '../features/BrainFreeze';\r\nimport GlacialSpike from '../talents/GlacialSpike';\r\nimport IceLance from '../features/IceLance';\r\nimport ThermalVoid from '../talents/ThermalVoid';\r\nimport WintersChill from '../features/WintersChill';\r\nimport AlwaysBeCasting from '../features/AlwaysBeCasting';\r\nimport ArcaneIntellect from '../../../shared/modules/features/ArcaneIntellect';\r\nimport CancelledCasts from '../../../shared/modules/features/CancelledCasts';\r\nimport RuneOfPower from '../../../shared/modules/features/RuneOfPower';\r\nimport WaterElemental from '../features/WaterElemental';\r\n\r\nimport Component from './Component';\r\n\r\nclass Checklist extends BaseChecklist {\r\n  static dependencies = {\r\n    combatants: Combatants,\r\n    castEfficiency: CastEfficiency,\r\n    brainFreeze: BrainFreeze,\r\n    glacialSpike: GlacialSpike,\r\n    iceLance: IceLance,\r\n    thermalVoid: ThermalVoid,\r\n    wintersChill: WintersChill,\r\n    arcaneIntellect: ArcaneIntellect,\r\n    cancelledCasts: CancelledCasts,\r\n    runeOfPower: RuneOfPower,\r\n    alwaysBeCasting: AlwaysBeCasting,\r\n    preparationRuleAnalyzer: PreparationRuleAnalyzer,\r\n    waterElemental: WaterElemental,\r\n\r\n  };\r\n  protected combatants!: Combatants;\r\n  protected castEfficiency!: CastEfficiency;\r\n  protected brainFreeze!: BrainFreeze;\r\n  protected glacialSpike!: GlacialSpike;\r\n  protected iceLance!: IceLance;\r\n  protected thermalVoid!: ThermalVoid;\r\n  protected wintersChill!: WintersChill;\r\n  protected arcaneIntellect!: ArcaneIntellect;\r\n  protected cancelledCasts!: CancelledCasts;\r\n  protected runeOfPower!: RuneOfPower;\r\n  protected alwaysBeCasting!: AlwaysBeCasting;\r\n  protected preparationRuleAnalyzer!: PreparationRuleAnalyzer;\r\n  protected waterElemental!: WaterElemental;\r\n\r\n  render() {\r\n    return (\r\n      <Component\r\n        combatant={this.combatants.selected}\r\n        castEfficiency={this.castEfficiency}\r\n        thresholds={{\r\n          ...this.preparationRuleAnalyzer.thresholds,\r\n\r\n          downtimeSuggestionThresholds: this.alwaysBeCasting.overrideDowntimeSuggestionThresholds,\r\n          brainFreezeUtilization: this.brainFreeze.brainFreezeUtilizationThresholds,\r\n          brainFreezeOverwrites: this.brainFreeze.brainFreezeOverwritenThresholds,\r\n          brainFreezeExpired: this.brainFreeze.brainFreezeExpiredThresholds,\r\n          brainFreezeUnbuffedFlurry: this.brainFreeze.flurryWithoutBrainFreezeThresholds,\r\n          glacialSpikeUtilization: this.glacialSpike.glacialSpikeUtilizationThresholds,\r\n          fingersOfFrostUtilization: this.iceLance.fingersProcUtilizationThresholds,\r\n          iceLanceNotShattered: this.iceLance.nonShatteredIceLanceThresholds,\r\n          wintersChillShatter: this.wintersChill.wintersChillShatterThresholds,\r\n          wintersChillHardCasts: this.wintersChill.wintersChillHardCastThresholds,\r\n          arcaneIntellectUptime: this.arcaneIntellect.suggestionThresholds,\r\n          cancelledCasts: this.cancelledCasts.suggestionThresholds,\r\n          runeOfPowerBuffUptime: this.runeOfPower.roundedSecondsSuggestionThresholds,\r\n          waterElementalUptime: this.waterElemental.waterElementalUptimeThresholds,\r\n        }}\r\n      />\r\n    );\r\n  }\r\n}\r\n\r\nexport default Checklist;\r\n","import SPELLS from 'common/SPELLS';\r\nimport CoreBuffs from 'parser/core/modules/Buffs';\r\nimport BLOODLUST_BUFFS from 'game/BLOODLUST_BUFFS';\r\n\r\nclass Buffs extends CoreBuffs {\r\n  buffs() {\r\n    const combatant = this.selectedCombatant;\r\n\r\n    // This should include ALL buffs that can be applied by your spec.\r\n    // This data can be used by various kinds of modules to improve their results, and modules added in the future may rely on buffs that aren't used today.\r\n    return [\r\n      {\r\n        spellId: SPELLS.BRAIN_FREEZE.id,\r\n        timelineHighlight: true,\r\n      },\r\n      {\r\n        spellId: SPELLS.FINGERS_OF_FROST.id,\r\n        timelineHighlight: true,\r\n      },\r\n      {\r\n        spellId: SPELLS.ICY_VEINS.id,\r\n        triggeredBySpellId: SPELLS.ICY_VEINS.id,\r\n        timelineHighlight: true,\r\n      },\r\n      {\r\n        spellId: SPELLS.RUNE_OF_POWER_BUFF.id,\r\n        enabled: combatant.hasTalent(SPELLS.RUNE_OF_POWER_TALENT),\r\n        timelineHighlight: true,\r\n      },\r\n      {\r\n        spellId: SPELLS.ICE_BARRIER.id,\r\n        triggeredBySpellId: SPELLS.ICE_BARRIER.id,\r\n        timelineHighlight: true,\r\n      },\r\n      {\r\n        spellId: SPELLS.ICE_BLOCK.id,\r\n        triggeredBySpellId: SPELLS.ICE_BLOCK.id,\r\n        timelineHighlight: true,\r\n      },\r\n      {\r\n        spellId: SPELLS.MIRROR_IMAGE.id,\r\n        triggeredBySpellId: SPELLS.MIRROR_IMAGE.id,\r\n        timelineHighlight: true,\r\n      },\r\n      {\r\n        spellId: Object.keys(BLOODLUST_BUFFS).map(item => Number(item)),\r\n        timelineHighlight: true,\r\n      },\r\n    ];\r\n  }\r\n}\r\n\r\nexport default Buffs;\r\n","import SPELLS from 'common/SPELLS';\r\nimport COVENANTS from 'game/shadowlands/COVENANTS';\r\n\r\nimport CoreAbilities from 'parser/core/modules/Abilities';\r\nimport { WINTERS_PROTECTION_REDUCTION_SEC, FLOW_OF_TIME_REDUCTION_SEC } from 'parser/mage/shared/constants'\r\n\r\nclass Abilities extends CoreAbilities {\r\n  spellbook() {\r\n    const combatant = this.selectedCombatant;\r\n    return [\r\n      // Rotational spells\r\n      {\r\n        spell: SPELLS.FROSTBOLT,\r\n        category: Abilities.SPELL_CATEGORIES.ROTATIONAL,\r\n        gcd: {\r\n          base: 1500,\r\n        },\r\n        timelineSortIndex: 1,\r\n        damageSpellIds: [SPELLS.FROSTBOLT_DAMAGE.id],\r\n      },\r\n      {\r\n        spell: SPELLS.FIRE_BLAST,\r\n        category: Abilities.SPELL_CATEGORIES.ROTATIONAL,\r\n        gcd: null,\r\n        cooldown: (haste: any) => 12 / (1 + haste),\r\n      },\r\n      {\r\n        spell: SPELLS.ARCANE_EXPLOSION,\r\n        category: Abilities.SPELL_CATEGORIES.ROTATIONAL,\r\n        gcd: {\r\n          base: 1500,\r\n        },\r\n      },\r\n      {\r\n        spell: SPELLS.ICE_LANCE,\r\n        category: Abilities.SPELL_CATEGORIES.ROTATIONAL,\r\n        gcd: {\r\n          base: 1500,\r\n        },\r\n        timelineSortIndex: 2,\r\n        damageSpellIds: [SPELLS.ICE_LANCE_DAMAGE.id],\r\n      },\r\n      {\r\n        spell: SPELLS.FLURRY,\r\n        category: Abilities.SPELL_CATEGORIES.ROTATIONAL,\r\n        gcd: {\r\n          base: 1500,\r\n        },\r\n        timelineSortIndex: 3,\r\n        damageSpellIds: [SPELLS.FLURRY_DAMAGE.id],\r\n      },\r\n      {\r\n        spell: SPELLS.GLACIAL_SPIKE_TALENT,\r\n        category: Abilities.SPELL_CATEGORIES.ROTATIONAL,\r\n        enabled: combatant.hasTalent(SPELLS.GLACIAL_SPIKE_TALENT.id),\r\n        gcd: {\r\n          base: 1500,\r\n        },\r\n        timelineSortIndex: 4,\r\n        damageSpellIds: [SPELLS.GLACIAL_SPIKE_DAMAGE.id],\r\n      },\r\n      {\r\n        spell: SPELLS.RAY_OF_FROST_TALENT,\r\n        category: Abilities.SPELL_CATEGORIES.ROTATIONAL,\r\n        gcd: {\r\n          base: 1500,\r\n        },\r\n        cooldown: 80,\r\n        enabled: combatant.hasTalent(SPELLS.RAY_OF_FROST_TALENT.id),\r\n        castEfficiency: {\r\n          suggestion: true,\r\n        },\r\n        timelineSortIndex: 4, // Shares talent row with Glacial Spike\r\n        //damageSpellIds: [SPELLS.RAY_OF_FROST.id], // needs verification\r\n      },\r\n      {\r\n        spell: SPELLS.COMET_STORM_TALENT,\r\n        category: Abilities.SPELL_CATEGORIES.ROTATIONAL,\r\n        gcd: {\r\n          base: 1500,\r\n        },\r\n        cooldown: 30,\r\n        enabled: combatant.hasTalent(SPELLS.COMET_STORM_TALENT.id),\r\n        castEfficiency: {\r\n          suggestion: true,\r\n          recommendedEfficiency: 0.90,\r\n        },\r\n        timelineSortIndex: 5,\r\n        damageSpellIds: [SPELLS.COMET_STORM_DAMAGE.id],\r\n      },\r\n      {\r\n        spell: SPELLS.EBONBOLT_TALENT,\r\n        category: Abilities.SPELL_CATEGORIES.ROTATIONAL,\r\n        cooldown: 45,\r\n        enabled: combatant.hasTalent(SPELLS.EBONBOLT_TALENT.id),\r\n        castEfficiency: {\r\n          //If using Glacial Spike, it is recommended to hold Ebonbolt as an emergency proc if GS is available and you dont have a Brain Freeze Proc. Therefore, with good luck, it is possible to go the entire fight without casting Ebonbolt.\r\n          suggestion: !combatant.hasTalent(SPELLS.GLACIAL_SPIKE_TALENT.id),\r\n          recommendedEfficiency: 0.90,\r\n        },\r\n        timelineSortIndex: 6,\r\n        damageSpellIds: [SPELLS.EBONBOLT_DAMAGE.id],\r\n      },\r\n      {\r\n        spell: SPELLS.BLIZZARD,\r\n        category: Abilities.SPELL_CATEGORIES.ROTATIONAL_AOE,\r\n        gcd: {\r\n          base: 1500,\r\n        },\r\n        cooldown: (haste: any) => 8 / (1 + haste),\r\n        timelineSortIndex: 7,\r\n        damageSpellIds: [SPELLS.BLIZZARD_DAMAGE.id],\r\n      },\r\n      {\r\n        spell: SPELLS.CONE_OF_COLD,\r\n        category: Abilities.SPELL_CATEGORIES.ROTATIONAL,\r\n        gcd: {\r\n          base: 1500,\r\n        },\r\n        cooldown: 12,\r\n        timelineSortIndex: 8,\r\n        //damageSpellIds: [SPELLS.CONE_OF_COLD.id], // needs verification\r\n      },\r\n      {\r\n        spell: SPELLS.ICE_NOVA_TALENT,\r\n        category: Abilities.SPELL_CATEGORIES.ROTATIONAL,\r\n        gcd: {\r\n          base: 1500,\r\n        },\r\n        cooldown: 25,\r\n        enabled: combatant.hasTalent(SPELLS.ICE_NOVA_TALENT.id),\r\n        castEfficiency: {\r\n          suggestion: true,\r\n          recommendedEfficiency: 0.90,\r\n        },\r\n        timelineSortIndex: 9,\r\n        //damageSpellIds: [SPELLS.ICE_NOVA_TALENT.id], // needs verification\r\n      },\r\n\r\n      // Cooldowns; start at sortindex 15\r\n      {\r\n        spell: SPELLS.FROZEN_ORB,\r\n        category: Abilities.SPELL_CATEGORIES.ROTATIONAL,\r\n        gcd: {\r\n          base: 1500,\r\n        },\r\n        cooldown: 60,\r\n        castEfficiency: {\r\n          suggestion: true,\r\n          recommendedEfficiency: 0.90,\r\n        },\r\n        timelineSortIndex: 15,\r\n        damageSpellIds: [SPELLS.FROZEN_ORB_DAMAGE.id],\r\n      },\r\n      {\r\n        spell: SPELLS.RUNE_OF_POWER_TALENT,\r\n        buffSpellId: SPELLS.RUNE_OF_POWER_BUFF.id,\r\n        category: Abilities.SPELL_CATEGORIES.COOLDOWNS,\r\n        gcd: {\r\n          base: 1500,\r\n        },\r\n        cooldown: 45,\r\n        enabled: combatant.hasTalent(SPELLS.RUNE_OF_POWER_TALENT.id),\r\n        castEfficiency: {\r\n          suggestion: true,\r\n          recommendedEfficiency: 0.90,\r\n        },\r\n        timelineSortIndex: 16, // Shares talent row with Mirror Image\r\n      },\r\n      {\r\n        spell: SPELLS.ICY_VEINS,\r\n        buffSpellId: SPELLS.ICY_VEINS.id,\r\n        category: Abilities.SPELL_CATEGORIES.COOLDOWNS,\r\n        gcd: null,\r\n        cooldown: 180,\r\n        castEfficiency: {\r\n          suggestion: true,\r\n          recommendedEfficiency: 0.90,\r\n        },\r\n        timelineSortIndex: 17,\r\n      },\r\n      {\r\n        spell: SPELLS.TIME_WARP,\r\n        buffSpellId: SPELLS.TIME_WARP.id,\r\n        category: Abilities.SPELL_CATEGORIES.COOLDOWNS,\r\n        gcd: null,\r\n        cooldown: 300,\r\n        timelineSortIndex: 18,\r\n      },\r\n      {\r\n        spell: SPELLS.RADIANT_SPARK,\r\n        category: Abilities.SPELL_CATEGORIES.COOLDOWNS,\r\n        gcd: {\r\n          base: 1500,\r\n        },\r\n        cooldown: 30,\r\n        enabled: combatant.hasCovenant(COVENANTS.KYRIAN.id),\r\n        castEfficiency: {\r\n          suggestion: true,\r\n          recommendedEfficiency: 0.90,\r\n        },\r\n      },\r\n      {\r\n        spell: SPELLS.DEATHBORNE,\r\n        category: Abilities.SPELL_CATEGORIES.COOLDOWNS,\r\n        gcd: {\r\n          base: 1500,\r\n        },\r\n        cooldown: 180,\r\n        enabled: combatant.hasCovenant(COVENANTS.NECROLORD.id),\r\n        castEfficiency: {\r\n          suggestion: true,\r\n          recommendedEfficiency: 0.90,\r\n        },\r\n      },\r\n      {\r\n        spell: SPELLS.MIRRORS_OF_TORMENT,\r\n        category: Abilities.SPELL_CATEGORIES.COOLDOWNS,\r\n        gcd: {\r\n          base: 1500,\r\n        },\r\n        cooldown: 90,\r\n        enabled: combatant.hasCovenant(COVENANTS.VENTHYR.id),\r\n        castEfficiency: {\r\n          suggestion: true,\r\n          recommendedEfficiency: 0.90,\r\n        },\r\n      },\r\n      {\r\n        spell: SPELLS.SHIFTING_POWER,\r\n        category: Abilities.SPELL_CATEGORIES.COOLDOWNS,\r\n        gcd: {\r\n          base: 1500,\r\n        },\r\n        cooldown: 60,\r\n        enabled: combatant.hasCovenant(COVENANTS.NIGHT_FAE.id),\r\n      },\r\n\r\n\r\n      //Defensives\r\n      {\r\n        spell: SPELLS.ICE_BARRIER,\r\n        buffSpellId: SPELLS.ICE_BARRIER.id,\r\n        cooldown: 25,\r\n        category: Abilities.SPELL_CATEGORIES.DEFENSIVE,\r\n        gcd: {\r\n          base: 1500,\r\n        },\r\n      },\r\n      {\r\n        spell: SPELLS.ICE_BLOCK,\r\n        buffSpellId: SPELLS.ICE_BLOCK.id,\r\n        cooldown: combatant.hasConduitBySpellID(SPELLS.WINTERS_PROTECTION.id) ? 240 - WINTERS_PROTECTION_REDUCTION_SEC[combatant.conduitRankBySpellID(SPELLS.WINTERS_PROTECTION.id)] : 240,\r\n        category: Abilities.SPELL_CATEGORIES.DEFENSIVE,\r\n        gcd: {\r\n          base: 1500,\r\n        },\r\n      },\r\n      {\r\n        spell: SPELLS.MIRROR_IMAGE,\r\n        category: Abilities.SPELL_CATEGORIES.DEFENSIVE,\r\n        gcd: {\r\n          base: 1500,\r\n        },\r\n        cooldown: 120,\r\n      },\r\n\r\n      //Utility\r\n      {\r\n        spell: SPELLS.ARCANE_INTELLECT,\r\n        category: Abilities.SPELL_CATEGORIES.UTILITY,\r\n        gcd: {\r\n          base: 1500,\r\n        },\r\n      },\r\n      {\r\n        spell: SPELLS.FROST_NOVA,\r\n        category: Abilities.SPELL_CATEGORIES.UTILITY,\r\n        cooldown: 30,\r\n        charges: combatant.hasTalent(SPELLS.ICE_WARD_TALENT.id) ? 2 : 1,\r\n      },\r\n      {\r\n        spell: SPELLS.BLINK,\r\n        category: Abilities.SPELL_CATEGORIES.UTILITY,\r\n        gcd: {\r\n          base: 1500,\r\n        },\r\n        enabled: !combatant.hasTalent(SPELLS.SHIMMER_TALENT.id),\r\n        cooldown: combatant.hasConduitBySpellID(SPELLS.FLOW_OF_TIME.id) ? 15 - FLOW_OF_TIME_REDUCTION_SEC[combatant.conduitRankBySpellID(SPELLS.FLOW_OF_TIME.id)] : 15,\r\n      },\r\n      {\r\n        spell: SPELLS.SHIMMER_TALENT,\r\n        category: Abilities.SPELL_CATEGORIES.UTILITY,\r\n        gcd: null,\r\n        cooldown: combatant.hasConduitBySpellID(SPELLS.FLOW_OF_TIME.id) ? 25 - FLOW_OF_TIME_REDUCTION_SEC[combatant.conduitRankBySpellID(SPELLS.FLOW_OF_TIME.id)] : 25,\r\n        charges: 2,\r\n        enabled: combatant.hasTalent(SPELLS.SHIMMER_TALENT.id),\r\n      },\r\n      {\r\n        spell: SPELLS.COUNTERSPELL,\r\n        category: Abilities.SPELL_CATEGORIES.UTILITY,\r\n        gcd: null,\r\n        cooldown: 24,\r\n      },\r\n      {\r\n        spell: SPELLS.REMOVE_CURSE,\r\n        category: Abilities.SPELL_CATEGORIES.UTILITY,\r\n        gcd: {\r\n          base: 1500,\r\n        },\r\n        cooldown: 8,\r\n      },\r\n      {\r\n        spell: SPELLS.SLOW_FALL,\r\n        buffSpellId: SPELLS.SLOW_FALL.id,\r\n        category: Abilities.SPELL_CATEGORIES.UTILITY,\r\n        gcd: {\r\n          base: 1500,\r\n        },\r\n      },\r\n      {\r\n        spell: SPELLS.SPELL_STEAL,\r\n        category: Abilities.SPELL_CATEGORIES.UTILITY,\r\n        gcd: {\r\n          base: 1500,\r\n        },\r\n      },\r\n      {\r\n        spell: SPELLS.FOCUS_MAGIC_TALENT,\r\n        category: Abilities.SPELL_CATEGORIES.UTILITY,\r\n        gcd: {\r\n          base: 1500,\r\n        },\r\n      },\r\n      {\r\n        spell: SPELLS.ALTER_TIME,\r\n        buffSpellId: SPELLS.ALTER_TIME_BUFF.id,\r\n        category: Abilities.SPELL_CATEGORIES.UTILITY,\r\n        gcd: {\r\n          base: 1500,\r\n        },\r\n      },\r\n      {\r\n        spell: SPELLS.INVISIBILITY,\r\n        buffSpellId: SPELLS.INVISIBILITY_BUFF.id,\r\n        category: Abilities.SPELL_CATEGORIES.UTILITY,\r\n        gcd: {\r\n          base: 1500,\r\n        },\r\n        cooldown: 300,\r\n      },\r\n      {\r\n        spell: SPELLS.COLD_SNAP,\r\n        category: Abilities.SPELL_CATEGORIES.UTILITY,\r\n        gcd: null,\r\n        cooldown: 300,\r\n      },\r\n      {\r\n        spell: SPELLS.SUMMON_WATER_ELEMENTAL,\r\n        category: Abilities.SPELL_CATEGORIES.UTILITY,\r\n        gcd: {\r\n          base: 1500,\r\n        },\r\n        enabled: !combatant.hasTalent(SPELLS.LONELY_WINTER_TALENT.id),\r\n        cooldown: 30,\r\n      },\r\n      {\r\n        spell: [SPELLS.POLYMORPH_SHEEP, SPELLS.POLYMORPH_PIG,\r\n          SPELLS.POLYMORPH_BLACK_CAT, SPELLS.POLYMORPH_MONKEY,\r\n          SPELLS.POLYMORPH_RABBIT, SPELLS.POLYMORPH_POLAR_BEAR_CUB,\r\n          SPELLS.POLYMORPH_PORCUPINE, SPELLS.POLYMORPH_TURTLE,\r\n          SPELLS.POLYMORPH_TURKEY, SPELLS.POLYMORPH_PENGUIN,\r\n          SPELLS.POLYMORPH_BUMBLEBEE, SPELLS.POLYMORPH_PEACOCK,\r\n          SPELLS.POLYMORPH_DIREHORN, SPELLS.POLYMORPH_MAWRAT],\r\n        category: Abilities.SPELL_CATEGORIES.UTILITY,\r\n        gcd: {\r\n          base: 1500,\r\n        },\r\n      },\r\n    ];\r\n  }\r\n}\r\n\r\nexport default Abilities;\r\n","import SPELLS from 'common/SPELLS';\r\nimport CoreCooldownThroughputTracker, { BUILT_IN_SUMMARY_TYPES } from 'parser/shared/modules/CooldownThroughputTracker';\r\n\r\nclass CooldownThroughputTracker extends CoreCooldownThroughputTracker {\r\n  static cooldownSpells = [\r\n    ...CoreCooldownThroughputTracker.cooldownSpells,\r\n    {\r\n      spell: SPELLS.ICY_VEINS,\r\n      summary: [\r\n        BUILT_IN_SUMMARY_TYPES.DAMAGE,\r\n      ],\r\n    },\r\n    {\r\n      spell: SPELLS.RUNE_OF_POWER_TALENT,\r\n      duration: 10,\r\n      summary: [\r\n        BUILT_IN_SUMMARY_TYPES.DAMAGE,\r\n      ],\r\n    },\r\n  ];\r\n\r\n  static castCooldowns = [\r\n    ...CoreCooldownThroughputTracker.castCooldowns,\r\n    {\r\n      spell: SPELLS.MIRROR_IMAGE,\r\n      duration: 40,\r\n      summary: [\r\n        BUILT_IN_SUMMARY_TYPES.DAMAGE,\r\n      ],\r\n    },\r\n  ];\r\n}\r\n\r\nexport default CooldownThroughputTracker;\r\n","import SPELLS from 'common/SPELLS';\r\nimport Analyzer, { Options } from 'parser/core/Analyzer';\r\nimport SpellUsable from 'parser/shared/modules/SpellUsable';\r\nimport Events from 'parser/core/Events';\r\nimport { SELECTED_PLAYER } from 'parser/core/EventFilter';\r\n\r\nconst REDUCTION_MS = 500;\r\n\r\nclass FrozenOrb extends Analyzer {\r\n  static dependencies = {\r\n    spellUsable: SpellUsable,\r\n  };\r\n  protected spellUsable!: SpellUsable;\r\n\r\n  constructor(props: Options) {\r\n    super(props);\r\n    this.addEventListener(Events.damage.by(SELECTED_PLAYER).spell(SPELLS.BLIZZARD_DAMAGE), this._reduceCooldown);\r\n  }\r\n\r\n  _reduceCooldown() {\r\n    if (this.spellUsable.isOnCooldown(SPELLS.FROZEN_ORB.id)) {\r\n      this.spellUsable.reduceCooldown(SPELLS.FROZEN_ORB.id, REDUCTION_MS);\r\n    }\r\n  }\r\n}\r\n\r\nexport default FrozenOrb;\r\n","import SPELLS from 'common/SPELLS';\r\nimport Analyzer, { Options } from 'parser/core/Analyzer';\r\nimport SpellUsable from 'parser/shared/modules/SpellUsable';\r\nimport Events from 'parser/core/Events';\r\nimport { SELECTED_PLAYER } from 'parser/core/EventFilter';\r\n\r\nconst SPELL_RESETS = [\r\n\tSPELLS.ICE_BARRIER,\r\n\tSPELLS.FROST_NOVA,\r\n\tSPELLS.CONE_OF_COLD,\r\n\tSPELLS.ICE_BLOCK,\r\n  ];\r\n\r\nclass ColdSnap extends Analyzer {\r\n  static dependencies = {\r\n    spellUsable: SpellUsable,\r\n  };\r\n  protected spellUsable!: SpellUsable;\r\n\r\n  constructor(props: Options) {\r\n    super(props);\r\n    this.addEventListener(Events.cast.by(SELECTED_PLAYER).spell(SPELLS.COLD_SNAP), this._resetCooldowns);\r\n  }\r\n\r\n  _resetCooldowns() {\r\n    SPELL_RESETS.forEach(spell => {\r\n      if (this.spellUsable.isOnCooldown(spell.id)) {\r\n        this.spellUsable.endCooldown(spell.id);\r\n      }\r\n    });\r\n  }\r\n}\r\n\r\nexport default ColdSnap;\r\n","import React from 'react';\r\nimport SPELLS from 'common/SPELLS';\r\nimport Statistic from 'interface/statistics/Statistic';\r\nimport BoringSpellValueText from 'interface/statistics/components/BoringSpellValueText';\r\nimport STATISTIC_ORDER from 'interface/others/STATISTIC_ORDER';\r\nimport Analyzer, { Options } from 'parser/core/Analyzer';\r\nimport { SELECTED_PLAYER } from 'parser/core/EventFilter';\r\nimport calculateEffectiveDamage from 'parser/core/calculateEffectiveDamage';\r\n\r\nimport Events, { DamageEvent } from 'parser/core/Events';\r\nimport { formatNumber } from 'common/format';\r\n\r\nconst DAMAGE_BONUS = 0.25;\r\nconst BUFFED_SPELLS = [\r\n  SPELLS.FROSTBOLT_DAMAGE,\r\n  SPELLS.ICE_LANCE_DAMAGE,\r\n  SPELLS.FLURRY_DAMAGE,\r\n];\r\n\r\n// You can no longer summon your Water Elemental, but Frostbolt, Ice Lance, and Flurry deal 25% increased damage.\r\nclass LonelyWinter extends Analyzer {\r\n  bonusDamage: {[id: number]: number };\r\n\r\n  constructor(options: Options) {\r\n    super(options);\r\n    this.active = this.selectedCombatant.hasTalent(SPELLS.LONELY_WINTER_TALENT.id);\r\n    this.addEventListener(Events.damage.by(SELECTED_PLAYER).spell(BUFFED_SPELLS), this.onAffectedDamage);\r\n    this.bonusDamage = {};\r\n    BUFFED_SPELLS.forEach(spell => { this.bonusDamage[spell.id] = 0; });\r\n  }\r\n\r\n  onAffectedDamage(event: DamageEvent) {\r\n    this.bonusDamage[event.ability.guid] += calculateEffectiveDamage(event, DAMAGE_BONUS);\r\n  }\r\n\r\n  statistic() {\r\n    let totalDamage = 0;\r\n    const tooltip = Object.keys(this.bonusDamage).map(spellId => {\r\n      const spellBonus = this.bonusDamage[Number(spellId)];\r\n      totalDamage += spellBonus;\r\n      return <li key={spellId}>Bonus <strong>{SPELLS[spellId].name}</strong> damage: {formatNumber(spellBonus)}</li>;\r\n    });\r\n\r\n    return (\r\n      <Statistic\r\n        position={STATISTIC_ORDER.CORE(90)}\r\n        size=\"flexible\"\r\n        tooltip={(\r\n          <>\r\n            When analyzing this talent, take into account any DPS you lost by not having a Water Elemental.\r\n            <ul>\r\n              {tooltip}\r\n            </ul>\r\n            Total damage increase: {formatNumber(totalDamage)}\r\n          </>\r\n        )}\r\n      >\r\n        <BoringSpellValueText spell={SPELLS.LONELY_WINTER_TALENT}>\r\n          {this.owner.formatItemDamageDone(totalDamage)}\r\n        </BoringSpellValueText>\r\n      </Statistic>\r\n    );\r\n  }\r\n\r\n}\r\n\r\nexport default LonelyWinter;\r\n","import React from 'react';\r\nimport SPELLS from 'common/SPELLS';\r\nimport Analyzer, { SELECTED_PLAYER, Options } from 'parser/core/Analyzer';\r\nimport Events, { CastEvent, DamageEvent } from 'parser/core/Events';\r\nimport Statistic from 'interface/statistics/Statistic';\r\nimport STATISTIC_CATEGORY from 'interface/others/STATISTIC_CATEGORY';\r\nimport BoringSpellValueText from 'interface/statistics/components/BoringSpellValueText';\r\nimport { formatPercentage } from 'common/format';\r\nimport { encodeTargetString } from 'parser/shared/modules/EnemyInstances';\r\nimport calculateEffectiveDamage from 'parser/core/calculateEffectiveDamage';\r\n\r\nconst SPLITTING_ICE_DAMAGE_BONUS = 0.05;\r\nconst GLACIAL_SPIKE_DAMAGE_BONUS = 0.65;\r\nconst SPLITTABLE_CASTS = [\r\n  SPELLS.FROSTBOLT,\r\n  SPELLS.ICE_LANCE,\r\n  SPELLS.GLACIAL_SPIKE_TALENT,\r\n  SPELLS.EBONBOLT_TALENT,\r\n];\r\n\r\nconst SPLITTABLE_DAMAGE = [\r\n  SPELLS.ICE_LANCE_DAMAGE,\r\n  SPELLS.ICICLE_DAMAGE,\r\n  SPELLS.GLACIAL_SPIKE_DAMAGE,\r\n  SPELLS.EBONBOLT_DAMAGE,\r\n];\r\n\r\nconst debug = false;\r\n\r\nclass SplittingIce extends Analyzer {\r\n\r\n  hasGlacialSpike: boolean;\r\n  hasEbonbolt: boolean;\r\n  cleaveDamage = 0; // all damage to secondary target\r\n  boostDamage = 0; // damage to primary target attributable to boost\r\n  castTarget = \"\"; // player's last directly targeted foe, used to tell which hit was on primary target\r\n\r\n  constructor(options: Options) {\r\n    super(options);\r\n\t   this.active = this.selectedCombatant.hasTalent(SPELLS.SPLITTING_ICE_TALENT.id);\r\n     this.hasGlacialSpike = this.selectedCombatant.hasTalent(SPELLS.GLACIAL_SPIKE_TALENT.id);\r\n     this.hasEbonbolt = this.selectedCombatant.hasTalent(SPELLS.EBONBOLT_TALENT.id);\r\n\r\n     this.addEventListener(Events.cast.by(SELECTED_PLAYER).spell(SPLITTABLE_CASTS), this.onCast);\r\n     this.addEventListener(Events.damage.by(SELECTED_PLAYER).spell(SPLITTABLE_DAMAGE), this.onDamage);\r\n  }\r\n\r\n  onCast(event: CastEvent) {\r\n    if(event.targetID) {\r\n      this.castTarget = encodeTargetString(event.targetID, event.targetInstance);\r\n    }\r\n  }\r\n\r\n  onDamage(event: DamageEvent) {\r\n    const spellId = event.ability.guid;\r\n    const damageTarget = encodeTargetString(event.targetID, event.targetInstance);\r\n    if(this.castTarget === damageTarget) {\r\n      let damageBonus = SPLITTING_ICE_DAMAGE_BONUS;\r\n      if(spellId === SPELLS.GLACIAL_SPIKE_DAMAGE.id) {\r\n        damageBonus *= GLACIAL_SPIKE_DAMAGE_BONUS;\r\n      }\r\n      this.boostDamage += calculateEffectiveDamage(event, damageBonus);\r\n    } else {\r\n      this.cleaveDamage += event.amount + (event.absorbed || 0);\r\n      if(debug) { console.log(`Splitting Ice cleave for ${event.amount + (event.absorbed || 0)} : castTarget=${this.castTarget} damageTarget=${damageTarget}`); }\r\n    }\r\n  }\r\n\r\n  get damage() {\r\n    return this.cleaveDamage + this.boostDamage;\r\n  }\r\n\r\n  get damagePercent() {\r\n    return this.owner.getPercentageOfTotalDamageDone(this.damage);\r\n  }\r\n\r\n  get cleaveDamagePercent() {\r\n    return this.owner.getPercentageOfTotalDamageDone(this.cleaveDamage);\r\n  }\r\n\r\n  get boostDamagePercent() {\r\n    return this.owner.getPercentageOfTotalDamageDone(this.boostDamage);\r\n  }\r\n\r\n  statistic() {\r\n    return (\r\n      <Statistic\r\n        size=\"flexible\"\r\n        category={STATISTIC_CATEGORY.TALENTS}\r\n        tooltip={(\r\n          <>\r\n            This is all the secondary target damage summed with the portion of primary target damage attributable to Splitting Ice.{this.hasGlacialSpike && ' Because only the icicles inside each Glacial Spike are boosted, the damage bonus to Glacial Spike is estimated.'}\r\n            <ul>\r\n              <li>Primary Target Boosted: <strong>{this.hasGlacialSpike && '≈'}{formatPercentage(this.boostDamagePercent)}%</strong></li>\r\n              <li>Secondary Target Total: <strong>{formatPercentage(this.cleaveDamagePercent)}%</strong></li>\r\n            </ul>\r\n          </>\r\n        )}\r\n      >\r\n        <BoringSpellValueText spell={SPELLS.SPLITTING_ICE_TALENT}>\r\n          <>\r\n            {this.hasGlacialSpike ? '≈' : ''}{formatPercentage(this.damagePercent)}%\r\n          </>\r\n        </BoringSpellValueText>\r\n      </Statistic>\r\n    );\r\n  }\r\n}\r\n\r\nexport default SplittingIce;\r\n","import React from 'react';\r\nimport SPELLS from 'common/SPELLS';\r\nimport Statistic from 'interface/statistics/Statistic';\r\nimport UptimeIcon from 'interface/icons/Uptime';\r\nimport BoringSpellValueText from 'interface/statistics/components/BoringSpellValueText';\r\nimport STATISTIC_CATEGORY from 'interface/others/STATISTIC_CATEGORY';\r\nimport Analyzer, { Options } from 'parser/core/Analyzer';\r\nimport { SELECTED_PLAYER, SELECTED_PLAYER_PET } from 'parser/core/EventFilter';\r\nimport calculateEffectiveDamage from 'parser/core/calculateEffectiveDamage';\r\n\r\nimport Events, { DamageEvent } from 'parser/core/Events';\r\nimport { formatNumber, formatPercentage } from 'common/format';\r\n\r\nconst DAMAGE_BONUS_PER_STACK = 0.005;\r\nconst AFFECTED_SPELLS = [\r\n  SPELLS.ICICLE_DAMAGE,\r\n  SPELLS.ICE_LANCE_DAMAGE,\r\n  SPELLS.BLIZZARD_DAMAGE,\r\n  SPELLS.FLURRY_DAMAGE,\r\n  SPELLS.FROSTBOLT_DAMAGE,\r\n  SPELLS.FROZEN_ORB_DAMAGE,\r\n  SPELLS.COMET_STORM_DAMAGE,\r\n  SPELLS.GLACIAL_SPIKE_DAMAGE,\r\n  SPELLS.FROST_NOVA,\r\n  SPELLS.EBONBOLT_DAMAGE,\r\n  SPELLS.CONE_OF_COLD,\r\n  SPELLS.RAY_OF_FROST_TALENT,\r\n  SPELLS.ICE_NOVA_TALENT,\r\n  SPELLS.WATERBOLT,\r\n];\r\n\r\nclass BoneChilling extends Analyzer {\r\n\r\n  totalDamage = 0;\r\n\r\n  constructor(options: Options) {\r\n    super(options);\r\n    this.active = this.selectedCombatant.hasTalent(SPELLS.BONE_CHILLING_TALENT.id);\r\n    if (this.active) {\r\n      this.addEventListener(Events.damage.by(SELECTED_PLAYER | SELECTED_PLAYER_PET).spell(AFFECTED_SPELLS), this.onAffectedDamage);\r\n    }\r\n  }\r\n\r\n  onAffectedDamage(event: DamageEvent) {\r\n    const buffInfo: any = this.selectedCombatant.getBuff(SPELLS.BONE_CHILLING_BUFF.id);\r\n    if (!buffInfo) {\r\n      return;\r\n    }\r\n    const mod = buffInfo.stacks * DAMAGE_BONUS_PER_STACK;\r\n    const increase = calculateEffectiveDamage(event, mod);\r\n    this.totalDamage += increase;\r\n  }\r\n\r\n  get uptime() {\r\n\t\treturn this.selectedCombatant.getBuffUptime(SPELLS.BONE_CHILLING_BUFF.id) / this.owner.fightDuration;\r\n\t}\r\n\r\n  statistic() {\r\n    return (\r\n      <Statistic\r\n        category={STATISTIC_CATEGORY.TALENTS}\r\n        size=\"flexible\"\r\n        tooltip={`Total damage increase: ${formatNumber(this.totalDamage)}`}\r\n      >\r\n        <BoringSpellValueText spell={SPELLS.BONE_CHILLING_TALENT}>\r\n          <UptimeIcon /> {formatPercentage(this.uptime)}% <small>Buff uptime</small><br />\r\n          {this.owner.formatItemDamageDone(this.totalDamage)}\r\n        </BoringSpellValueText>\r\n      </Statistic>\r\n    );\r\n  }\r\n\r\n}\r\n\r\nexport default BoneChilling;\r\n","import React from 'react';\r\n\r\nimport Analyzer, { SELECTED_PLAYER, Options } from 'parser/core/Analyzer';\r\nimport { When, ThresholdStyle } from 'parser/core/ParseResults';\r\nimport Events, { ApplyBuffEvent, RefreshBuffEvent, RemoveBuffEvent } from 'parser/core/Events';\r\nimport SPELLS from 'common/SPELLS';\r\nimport UptimeIcon from 'interface/icons/Uptime';\r\nimport SpellLink from 'common/SpellLink';\r\nimport { formatPercentage } from 'common/format';\r\nimport Statistic from 'interface/statistics/Statistic';\r\nimport BoringSpellValueText from 'interface/statistics/components/BoringSpellValueText';\r\nimport STATISTIC_CATEGORY from 'interface/others/STATISTIC_CATEGORY';\r\nimport { i18n } from '@lingui/core';\r\nimport { t } from '@lingui/macro';\r\n\r\nclass FocusMagic extends Analyzer {\r\n\r\n  buffStack = 0;\r\n  highStackTimestamp = 0;\r\n  intUptime = 0;\r\n\r\n  constructor(options: Options) {\r\n    super(options);\r\n    this.active = this.selectedCombatant.hasTalent(SPELLS.FOCUS_MAGIC_TALENT.id);\r\n    this.addEventListener(Events.applybuff.to(SELECTED_PLAYER).spell(SPELLS.FOCUS_MAGIC_CRIT_BUFF), this.onBuffApplied);\r\n    this.addEventListener(Events.refreshbuff.to(SELECTED_PLAYER).spell(SPELLS.FOCUS_MAGIC_CRIT_BUFF), this.onBuffRefreshed);\r\n    this.addEventListener(Events.removebuff.to(SELECTED_PLAYER).spell(SPELLS.FOCUS_MAGIC_CRIT_BUFF), this.onBuffRemoved);\r\n  }\r\n\r\n  onBuffApplied(event: ApplyBuffEvent) {\r\n    this.buffStack = 1;\r\n  }\r\n\r\n  onBuffRefreshed(event: RefreshBuffEvent) {\r\n    this.buffStack += 1;\r\n\r\n    if (this.buffStack >= 8 && this.highStackTimestamp === 0) {\r\n      this.highStackTimestamp = event.timestamp;\r\n    }\r\n  }\r\n\r\n  onBuffRemoved(event: RemoveBuffEvent) {\r\n    this.buffStack = 0;\r\n\r\n    if (this.highStackTimestamp !== 0) {\r\n      this.intUptime += event.timestamp - this.highStackTimestamp;\r\n      this.highStackTimestamp = 0;\r\n    }\r\n  }\r\n\r\n  get intBuffUptime() {\r\n    return this.intUptime / this.owner.fightDuration;\r\n  }\r\n\r\n  get critBuffUptime() {\r\n    return this.selectedCombatant.getBuffUptime(SPELLS.FOCUS_MAGIC_CRIT_BUFF.id) / this.owner.fightDuration;\r\n  }\r\n\r\n  get focusMagicBuffUptimeThresholds() {\r\n    return {\r\n      actual: this.critBuffUptime,\r\n      isLessThan: {\r\n        minor: 1,\r\n        average: 0.90,\r\n        major: 0.80,\r\n      },\r\n      style: ThresholdStyle.PERCENTAGE,\r\n    };\r\n  }\r\n\r\n  suggestions(when: When) {\r\n    when(this.focusMagicBuffUptimeThresholds)\r\n      .addSuggestion((suggest, actual, recommended) => suggest(<>You had low uptime on <SpellLink id={SPELLS.FOCUS_MAGIC_TALENT.id} />. In order to get benefit from this talent, ensure that you are putting <SpellLink id={SPELLS.FOCUS_MAGIC_TALENT.id} /> on another player or trading the buff with another mage before the pull. If you buffed a player for the entire fight but still had low uptime, consider giving the buff to a player that will crit with direct damage (Non DoT) abilities more often so the buff can trigger as many times as possible.</>)\r\n          .icon(SPELLS.FOCUS_MAGIC_TALENT.icon)\r\n          .actual(i18n._(t('mage.shared.suggestions.focusMagic.uptime')`${formatPercentage(this.critBuffUptime)}% Focus Magic Uptime`))\r\n          .recommended(`<${formatPercentage(recommended)}% is recommended`));\r\n  }\r\n\r\n  statistic() {\r\n    return (\r\n      <Statistic\r\n        category={STATISTIC_CATEGORY.TALENTS}\r\n        size=\"flexible\"\r\n        tooltip={(\r\n          <>\r\n            In order for Focus Magic to compete with the other talents on that row, you need to ensure you are getting as much uptime out of the buff as possible. Therefore, if you forget to put the buff on another player or if the player you gave it to is not getting direct damage crits very often (DoT crits do not count), then you might need to consider giving the buff to someone else. Ideally, you should aim to trade buffs with another mage who has also taken Focus Magic so you both can benefit.<br /><br />\r\n\r\n            In addition to giving you crit for 10 seconds when your partner crits, the buff also applies a stacking Intellect buff to you every time the crit buff is refreshed. So making sure that your partner is getting as many crits as possible so you can spend as much time at 8 stacks of the Intellect buff as possible should be your priority with this talent.\r\n          </>\r\n        )}\r\n      >\r\n        <BoringSpellValueText spell={SPELLS.FOCUS_MAGIC_TALENT}>\r\n          <UptimeIcon /> {formatPercentage(this.critBuffUptime, 0)}% <small>Crit Buff Uptime</small><br />\r\n          <UptimeIcon /> {formatPercentage(this.intBuffUptime, 0)}% <small>Int Buff Uptime (At 8 Stacks)</small>\r\n        </BoringSpellValueText>\r\n      </Statistic>\r\n    );\r\n  }\r\n}\r\n\r\nexport default FocusMagic;\r\n","import React from 'react';\r\nimport SPELLS from 'common/SPELLS';\r\nimport Analyzer, { Options } from 'parser/core/Analyzer';\r\nimport Events from 'parser/core/Events';\r\nimport EventHistory from 'parser/shared/modules/EventHistory';\r\nimport Statistic from 'interface/statistics/Statistic';\r\nimport SpellIcon from 'common/SpellIcon';\r\nimport BoringSpellValueText from 'interface/statistics/components/BoringSpellValueText';\r\nimport STATISTIC_CATEGORY from 'interface/others/STATISTIC_CATEGORY';\r\nimport { SELECTED_PLAYER } from 'parser/core/EventFilter';\r\nimport { formatNumber } from 'common/format';\r\n\r\nclass ColdFront extends Analyzer {\r\n  static dependencies = {\r\n    eventHistory: EventHistory,\r\n  };\r\n  protected eventHistory!: EventHistory;\r\n\r\n  bonusFrozenOrbs = 0;\r\n\r\n  constructor(props: Options) {\r\n    super(props);\r\n    this.active = this.selectedCombatant.hasLegendaryByBonusID(SPELLS.COLD_FRONT.bonusID);\r\n    this.addEventListener(Events.applybuff.to(SELECTED_PLAYER).spell(SPELLS.COLD_FRONT_BUFF), this.onBuffApplied);\r\n  }\r\n\r\n  onBuffApplied() {\r\n    const buffRemovedEvent = this.eventHistory.last(1,500,Events.removebuff.to(SELECTED_PLAYER).spell(SPELLS.COLD_FRONT_BUFF));\r\n    if (buffRemovedEvent) {\r\n      this.bonusFrozenOrbs += 1;\r\n    }\r\n  }\r\n\r\n  statistic() {\r\n    return (\r\n      <Statistic\r\n        category={STATISTIC_CATEGORY.ITEMS}\r\n        size=\"flexible\"\r\n        tooltip=\"This shows the number of extra Frozen Orb casts that were gained by using the Cold Front legendary effect.\"\r\n      >\r\n        <BoringSpellValueText spell={SPELLS.COLD_FRONT}>\r\n          <SpellIcon id={SPELLS.FROZEN_ORB.id} /> {`${formatNumber(this.bonusFrozenOrbs)}`} <small>Extra Frozen Orbs</small>\r\n        </BoringSpellValueText>\r\n      </Statistic>\r\n    );\r\n  }\r\n}\r\n\r\nexport default ColdFront;\r\n","import React from 'react';\r\nimport SPELLS from 'common/SPELLS';\r\nimport Analyzer, { Options } from 'parser/core/Analyzer';\r\nimport Events, { DamageEvent } from 'parser/core/Events';\r\nimport Statistic from 'interface/statistics/Statistic';\r\nimport BoringSpellValueText from 'interface/statistics/components/BoringSpellValueText';\r\nimport STATISTIC_CATEGORY from 'interface/others/STATISTIC_CATEGORY';\r\nimport ItemDamageDone from 'interface/ItemDamageDone';\r\nimport { SELECTED_PLAYER } from 'parser/core/EventFilter';\r\nimport calculateEffectiveDamage from 'parser/core/calculateEffectiveDamage';\r\nimport Enemies from 'parser/shared/modules/Enemies';\r\n\r\nimport { SHATTER_DEBUFFS } from 'parser/mage/shared/constants';\r\n\r\nconst DAMAGE_BONUS = [0, .04, .044, .048, .052, .056, .06, .064, .068, .072, .076, .08, .084, .088, .092, .096];\r\n\r\nclass IceBite extends Analyzer {\r\n  static dependencies = {\r\n    enemies: Enemies,\r\n  }\r\n  protected enemies!: Enemies;\r\n\r\n  conduitRank = 0;\r\n  bonusDamage = 0;\r\n\r\n  constructor(props: Options) {\r\n    super(props);\r\n    this.active = this.selectedCombatant.hasConduitBySpellID(SPELLS.ICE_BITE.id);\r\n    if (!this.active) {\r\n      return;\r\n    }\r\n    this.conduitRank = this.selectedCombatant.conduitRankBySpellID(SPELLS.ICE_BITE.id);\r\n    this.addEventListener(Events.damage.by(SELECTED_PLAYER).spell(SPELLS.ICE_LANCE_DAMAGE), this.onIceLanceDamage);\r\n  }\r\n\r\n  onIceLanceDamage(event: DamageEvent) {\r\n    const enemy = this.enemies.getEntity(event);\r\n    if (enemy && SHATTER_DEBUFFS.some(effect => enemy.hasBuff(effect.id, event.timestamp))) {\r\n      this.bonusDamage += calculateEffectiveDamage(event,DAMAGE_BONUS[this.conduitRank]);\r\n    }\r\n  }\r\n\r\n  statistic() {\r\n    return (\r\n      <Statistic\r\n        category={STATISTIC_CATEGORY.ITEMS}\r\n        size=\"flexible\"\r\n      >\r\n        <BoringSpellValueText spell={SPELLS.ICE_BITE}>\r\n          <ItemDamageDone amount={this.bonusDamage} />\r\n        </BoringSpellValueText>\r\n      </Statistic>\r\n    );\r\n  }\r\n}\r\n\r\nexport default IceBite;\r\n","import React from 'react';\r\nimport SPELLS from 'common/SPELLS';\r\nimport Analyzer, { Options } from 'parser/core/Analyzer';\r\nimport SpellUsable from 'parser/shared/modules/SpellUsable';\r\nimport AbilityTracker from 'parser/shared/modules/AbilityTracker';\r\nimport Events, { DamageEvent } from 'parser/core/Events';\r\nimport Statistic from 'interface/statistics/Statistic';\r\nimport UptimeIcon from 'interface/icons/Uptime';\r\nimport BoringSpellValueText from 'interface/statistics/components/BoringSpellValueText';\r\nimport STATISTIC_CATEGORY from 'interface/others/STATISTIC_CATEGORY';\r\nimport HIT_TYPES from 'game/HIT_TYPES';\r\nimport { SELECTED_PLAYER } from 'parser/core/EventFilter';\r\nimport { formatNumber } from 'common/format';\r\n\r\nconst COOLDOWN_REDUCTION_MS = [0, 750, 830, 900, 980, 1005, 1130, 1200, 1280, 1350, 1430, 1500, 1580, 1650, 1730, 1800];\r\n\r\nclass IcyPropulsion extends Analyzer {\r\n  static dependencies = {\r\n    spellUsable: SpellUsable,\r\n    abilityTracker: AbilityTracker,\r\n  };\r\n  protected spellUsable!: SpellUsable;\r\n  protected abilityTracker!: AbilityTracker;\r\n\r\n  conduitRank = 0;\r\n  cooldownReduction = 0;\r\n\r\n  constructor(props: Options) {\r\n    super(props);\r\n    this.active = this.selectedCombatant.hasConduitBySpellID(SPELLS.ICY_PROPULSION.id);\r\n    if (!this.active) {\r\n      return;\r\n    }\r\n    this.conduitRank = this.selectedCombatant.conduitRankBySpellID(SPELLS.ICY_PROPULSION.id);\r\n    this.addEventListener(Events.damage.by(SELECTED_PLAYER), this.onDamage);\r\n  }\r\n\r\n  onDamage(event: DamageEvent) {\r\n    if (!this.selectedCombatant.hasBuff(SPELLS.ICY_VEINS.id) || event.hitType !== HIT_TYPES.CRIT || !this.spellUsable.isOnCooldown(SPELLS.ICY_VEINS.id)) {\r\n      return;\r\n    }\r\n\r\n    this.cooldownReduction += this.spellUsable.reduceCooldown(SPELLS.ICY_VEINS.id,COOLDOWN_REDUCTION_MS[this.conduitRank]);\r\n\r\n  }\r\n\r\n  get reductionSeconds() {\r\n    return this.cooldownReduction / 1000;\r\n  }\r\n\r\n  get reductionPerIcyVeins() {\r\n    return this.reductionSeconds / this.abilityTracker.getAbility(SPELLS.ICY_VEINS.id).casts;\r\n  }\r\n\r\n  statistic() {\r\n    return (\r\n      <Statistic\r\n        category={STATISTIC_CATEGORY.ITEMS}\r\n        size=\"flexible\"\r\n        tooltip={<>Icy Propulsion reduced the cooldown on Icy Veins by a total of {this.reductionSeconds} ({this.reductionPerIcyVeins} Per Icy Veins on average).</>}\r\n      >\r\n        <BoringSpellValueText spell={SPELLS.ICY_PROPULSION}>\r\n          <UptimeIcon /> {`${formatNumber(this.reductionSeconds)}s`} <small>Icy Veins CDR</small>\r\n        </BoringSpellValueText>\r\n      </Statistic>\r\n    );\r\n  }\r\n\r\n\r\n}\r\n\r\nexport default IcyPropulsion;\r\n","import React from 'react';\r\nimport SPELLS from 'common/SPELLS';\r\nimport Analyzer, { Options } from 'parser/core/Analyzer';\r\nimport Events, { DamageEvent } from 'parser/core/Events';\r\nimport Statistic from 'interface/statistics/Statistic';\r\nimport BoringSpellValueText from 'interface/statistics/components/BoringSpellValueText';\r\nimport STATISTIC_CATEGORY from 'interface/others/STATISTIC_CATEGORY';\r\nimport ItemDamageDone from 'interface/ItemDamageDone';\r\nimport { SELECTED_PLAYER } from 'parser/core/EventFilter';\r\nimport calculateEffectiveDamage from 'parser/core/calculateEffectiveDamage';\r\n\r\nconst DAMAGE_BONUS = [0, .08, .09, .10, .10, .11, .12, .13, .14, .14, .15, .16, .17, .18, .18, .19];\r\n\r\nclass ShiveringCore extends Analyzer {\r\n  \r\n  conduitRank = 0;\r\n  bonusDamage = 0;\r\n\r\n  constructor(props: Options) {\r\n    super(props);\r\n    this.active = this.selectedCombatant.hasConduitBySpellID(SPELLS.SHIVERING_CORE.id);\r\n    if (!this.active) {\r\n      return;\r\n    }\r\n    this.conduitRank = this.selectedCombatant.conduitRankBySpellID(SPELLS.SHIVERING_CORE.id);\r\n    this.addEventListener(Events.damage.by(SELECTED_PLAYER).spell(SPELLS.BLIZZARD_DAMAGE), this.onBlizzardDamage);\r\n  }\r\n\r\n  onBlizzardDamage(event: DamageEvent) {\r\n    this.bonusDamage += calculateEffectiveDamage(event.amount,DAMAGE_BONUS[this.conduitRank]);\r\n  }\r\n\r\n  statistic() {\r\n    return (\r\n      <Statistic\r\n        category={STATISTIC_CATEGORY.ITEMS}\r\n        size=\"flexible\"\r\n      >\r\n        <BoringSpellValueText spell={SPELLS.SHIVERING_CORE}>\r\n          <ItemDamageDone amount={this.bonusDamage} />\r\n        </BoringSpellValueText>\r\n      </Statistic>\r\n    );\r\n  }\r\n}\r\n\r\nexport default ShiveringCore;\r\n","import React from 'react';\r\nimport SPELLS from 'common/SPELLS';\r\nimport Analyzer, { Options } from 'parser/core/Analyzer';\r\nimport Events, { DamageEvent } from 'parser/core/Events';\r\nimport Statistic from 'interface/statistics/Statistic';\r\nimport BoringSpellValueText from 'interface/statistics/components/BoringSpellValueText';\r\nimport STATISTIC_CATEGORY from 'interface/others/STATISTIC_CATEGORY';\r\nimport ItemDamageDone from 'interface/ItemDamageDone';\r\nimport { SELECTED_PLAYER } from 'parser/core/EventFilter';\r\nimport calculateEffectiveDamage from 'parser/core/calculateEffectiveDamage';\r\n\r\nconst DAMAGE_BONUS = [0, .15, .17, .18, .20, .21, .23, .24, .26, .27, .29, .30, .32, .33, .35, .36];\r\n\r\nclass UnrelentingCold extends Analyzer {\r\n  \r\n  conduitRank = 0;\r\n  bonusDamage = 0;\r\n\r\n  constructor(props: Options) {\r\n    super(props);\r\n    this.active = this.selectedCombatant.hasConduitBySpellID(SPELLS.UNRELENTING_COLD.id);\r\n    if (!this.active) {\r\n      return;\r\n    }\r\n    this.conduitRank = this.selectedCombatant.conduitRankBySpellID(SPELLS.UNRELENTING_COLD.id);\r\n    this.addEventListener(Events.damage.by(SELECTED_PLAYER).spell(SPELLS.FROZEN_ORB_DAMAGE), this.onFrozenOrbDamage);\r\n  }\r\n\r\n  onFrozenOrbDamage(event: DamageEvent) {\r\n    this.bonusDamage += calculateEffectiveDamage(event,DAMAGE_BONUS[this.conduitRank]);\r\n  }\r\n\r\n  statistic() {\r\n    return (\r\n      <Statistic\r\n        category={STATISTIC_CATEGORY.ITEMS}\r\n        size=\"flexible\"\r\n      >\r\n        <BoringSpellValueText spell={SPELLS.UNRELENTING_COLD}>\r\n          <ItemDamageDone amount={this.bonusDamage} />\r\n        </BoringSpellValueText>\r\n      </Statistic>\r\n    );\r\n  }\r\n}\r\n\r\nexport default UnrelentingCold;\r\n","import CoreCombatLogParser from 'parser/core/CombatLogParser';\r\nimport ArcaneTorrent from 'parser/shared/modules/racials/bloodelf/ArcaneTorrent';\r\n\r\nimport Checklist from './modules/checklist/Module';\r\nimport Buffs from './modules/features/Buffs';\r\n\r\n//Normalizers\r\nimport ShiftingPowerNormalizer from '../shared/normalizers/ShiftingPower';\r\n\r\n//Features\r\nimport Abilities from './modules/features/Abilities';\r\nimport AlwaysBeCasting from './modules/features/AlwaysBeCasting';\r\nimport CooldownThroughputTracker from './modules/features/CooldownThroughputTracker';\r\nimport WintersChill from './modules/features/WintersChill';\r\nimport BrainFreeze from './modules/features/BrainFreeze';\r\nimport IceLance from './modules/features/IceLance';\r\nimport MirrorImage from '../shared/modules/features/MirrorImage';\r\nimport ElementalBarrier from '../shared/modules/features/ElementalBarrier';\r\nimport ArcaneIntellect from '../shared/modules/features/ArcaneIntellect';\r\nimport CancelledCasts from '../shared/modules/features/CancelledCasts';\r\nimport FrozenOrb from './modules/cooldowns/FrozenOrb';\r\nimport ColdSnap from './modules/cooldowns/ColdSnap';\r\n\r\n//Talents\r\nimport WaterElemental from './modules/features/WaterElemental';\r\nimport LonelyWinter from './modules/talents/LonelyWinter';\r\nimport SplittingIce from './modules/talents/SplittingIce';\r\nimport ThermalVoid from './modules/talents/ThermalVoid';\r\nimport GlacialSpike from './modules/talents/GlacialSpike';\r\nimport BoneChilling from './modules/talents/BoneChilling';\r\nimport RuneOfPower from '../shared/modules/features/RuneOfPower';\r\nimport FocusMagic from '../shared/modules/features/FocusMagic';\r\n\r\n//Legendaries\r\nimport ColdFront from './modules/items/ColdFront';\r\n\r\n//Covenants\r\nimport ShiftingPower from '../shared/modules/features/ShiftingPower';\r\n\r\n//Conduits\r\nimport IceBite from './modules/items/IceBite';\r\nimport IcyPropulsion from './modules/items/IcyPropulsion';\r\nimport ShiveringCore from './modules/items/ShiveringCore';\r\nimport UnrelentingCold from './modules/items/UnrelentingCold';\r\nimport DivertedEnergy from '../shared/modules/items/DivertedEnergy';\r\nimport GroundingSurge from '../shared/modules/items/GroundingSurge';\r\nimport IreOfTheAscended from '../shared/modules/items/IreOfTheAscended';\r\nimport TempestBarrier from '../shared/modules/items/TempestBarrier';\r\nimport SiphonedMalice from '../shared/modules/items/SiphonedMalice';\r\n\r\nclass CombatLogParser extends CoreCombatLogParser {\r\n   static specModules = {\r\n    checklist: Checklist,\r\n    buffs: Buffs,\r\n\r\n    //Normalizers\r\n    shiftingPowerNormalizer: ShiftingPowerNormalizer,\r\n\r\n    // Features\r\n    abilities: Abilities,\r\n    alwaysBeCasting: AlwaysBeCasting,\r\n    cancelledCasts: CancelledCasts,\r\n    cooldownThroughputTracker: CooldownThroughputTracker,\r\n    wintersChill: WintersChill,\r\n    brainFreeze: BrainFreeze,\r\n    iceLance: IceLance,\r\n    arcaneIntellect: ArcaneIntellect,\r\n    mirrorImage: MirrorImage,\r\n    elementalBarrier: ElementalBarrier,\r\n    waterElemental: WaterElemental,\r\n\r\n    // Talents\r\n    boneChilling: BoneChilling,\r\n    lonelyWinter: LonelyWinter,\r\n    focusMagic: FocusMagic,\r\n    runeOfPower: RuneOfPower,\r\n    splittingIce: SplittingIce,\r\n    thermalVoid: ThermalVoid,\r\n    glacialSpike: GlacialSpike,\r\n\r\n\t  // Cooldowns\r\n    frozenOrb: FrozenOrb,\r\n    coldSnap: ColdSnap,\r\n\r\n    //Legendaries\r\n    coldFront: ColdFront,\r\n\r\n    //Covenants\r\n    shiftingPower: ShiftingPower,\r\n\r\n    //Conduits\r\n    iceBite: IceBite,\r\n    icyPropulsion: IcyPropulsion,\r\n    shiveringCore: ShiveringCore,\r\n    unrelentingCold: UnrelentingCold,\r\n    divertedEnergy: DivertedEnergy,\r\n    groundingSurge: GroundingSurge,\r\n    ireOfTheAscended: IreOfTheAscended,\r\n    tempestBarrier: TempestBarrier,\r\n    siphonedMalice: SiphonedMalice,\r\n\r\n    // There's no throughput benefit from casting Arcane Torrent on cooldown\r\n    arcaneTorrent: [ArcaneTorrent, { castEfficiency: null }] as const,\r\n  };\r\n}\r\n\r\nexport default CombatLogParser;\r\n","import React from 'react';\r\nimport PropTypes from 'prop-types';\r\n\r\nimport { formatPercentage } from 'common/format';\r\nimport { Trans } from '@lingui/macro';\r\n\r\nconst Gauge = ({ value }) => (\r\n  <div className=\"flex\" style={{ textAlign: 'center', marginTop: 12 }}>\r\n    <Trans id=\"interface.statistics.components.gauge.low\" render=\"div\" className=\"flex-main text-right text-muted\" style={{ paddingTop: 23, paddingRight: 8, fontSize: 12 }}>\r\n      Low\r\n    </Trans>\r\n    <div className=\"flex-sub\" style={{ position: 'relative' }}>\r\n      <svg width=\"98\" height=\"85\" viewBox=\"19 19 101 88\" fill=\"none\" xmlns=\"http://www.w3.org/2000/svg\" style={{ fill: 'none' }}>\r\n          <path d=\"M101.459 101.459C119.033 83.8858 119.033 55.3934 101.459 37.8198C83.8859 20.2462 55.3934 20.2462 37.8198 37.8198C20.2463 55.3934 20.2463 83.8858 37.8198 101.459\" stroke=\"#f8b700\" strokeWidth=\"8\" strokeLinecap=\"round\" />\r\n          <path fillRule=\"evenodd\" clipRule=\"evenodd\" d=\"M68.6396 28.6396H70.6396V32.6396H68.6396V28.6396Z\" fill=\"#f8b700\" />\r\n          <path fillRule=\"evenodd\" clipRule=\"evenodd\" d=\"M87.7656 32.8389L89.5485 33.7451L87.7368 37.3097L85.9539 36.4035L87.7656 32.8389Z\" fill=\"#f8b700\" />\r\n          <path fillRule=\"evenodd\" clipRule=\"evenodd\" d=\"M101.207 50.1829L100.077 48.5324L103.378 46.2732L104.508 47.9236L101.207 50.1829Z\" fill=\"#f8b700\" />\r\n          <path fillRule=\"evenodd\" clipRule=\"evenodd\" d=\"M106.622 67.3762L106.417 65.3868L110.398 64.9765L110.603 66.966L106.622 67.3762Z\" fill=\"#f8b700\" />\r\n          <path fillRule=\"evenodd\" clipRule=\"evenodd\" d=\"M103.658 84.4276L104.376 82.5609L108.11 83.9969L107.392 85.8635L103.658 84.4276Z\" fill=\"#f8b700\" />\r\n          <path fillRule=\"evenodd\" clipRule=\"evenodd\" d=\"M52.0547 32.5298L50.2627 33.4179L52.039 37.0019L53.831 36.1137L52.0547 32.5298Z\" fill=\"#f8b700\" />\r\n          <path fillRule=\"evenodd\" clipRule=\"evenodd\" d=\"M36.1157 45.9784L34.965 47.6142L38.2354 49.9147L39.3861 48.2789L36.1157 45.9784Z\" fill=\"#f8b700\" />\r\n          <path fillRule=\"evenodd\" clipRule=\"evenodd\" d=\"M28.8926 64.968L28.6883 66.9576L32.6626 67.3657L32.8669 65.3761L28.8926 64.968Z\" fill=\"#f8b700\" />\r\n          <path fillRule=\"evenodd\" clipRule=\"evenodd\" d=\"M31.3486 84.3921L32.0806 86.2533L35.8031 84.7895L35.0711 82.9282L31.3486 84.3921Z\" fill=\"#f8b700\" />\r\n      </svg>\r\n\r\n      <div\r\n        style={{\r\n          position: 'absolute',\r\n          top: 49,\r\n          left: '50%',\r\n          width: 32,\r\n          height: 32,\r\n          transform: 'translate(-50%, -50%)',\r\n          marginTop: -13,\r\n        }}\r\n      >\r\n        <svg\r\n          width=\"10\"\r\n          height=\"32\"\r\n          viewBox=\"0 0 10 32\"\r\n          fill=\"none\"\r\n          xmlns=\"http://www.w3.org/2000/svg\"\r\n          style={{\r\n            fill: 'none',\r\n            margin: 0,\r\n            transformOrigin: '5px 27px',\r\n            transform: `rotate(${-140 + 280 * value}deg)`,\r\n          }}\r\n        >\r\n          <path d=\"M9 27C9 29.2091 7.20914 31 5 31C2.79086 31 1 29.2091 1 27C1 24.7909 2.79086 23 5 23C7.20914 23 9 24.7909 9 27Z\" stroke=\"#f8b700\" strokeWidth=\"2\" />\r\n          <path fillRule=\"evenodd\" clipRule=\"evenodd\" d=\"M6 0L6 23H4L4 0L6 0Z\" fill=\"#f8b700\" />\r\n        </svg>\r\n      </div>\r\n\r\n      <div className=\"value\" style={{ marginTop: -18, fontSize: '1.25em' }}>\r\n        {formatPercentage(value, 0)}%\r\n      </div>\r\n    </div>\r\n    <Trans id=\"interface.statistics.components.gauge.high\" render=\"div\" className=\"flex-main text-left text-muted\" style={{ paddingTop: 23, paddingLeft: 8, fontSize: 12 }}>\r\n      High\r\n    </Trans>\r\n  </div>\r\n);\r\nGauge.propTypes = {\r\n  value: PropTypes.number.isRequired,\r\n};\r\n\r\nexport default Gauge;\r\n"],"sourceRoot":""}