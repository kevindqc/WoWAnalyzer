{"version":3,"sources":["interface/GuildReports/images/ally_guild_banner_bwl.jpg","interface/GuildReports/images/horde_guild_banner_onyx.jpg","interface/GuildReportsList/GuildReportsList.tsx","interface/GuildReports/GuildReports.tsx","interface/GuildPage/GuildPage.tsx","game/ZONES.ts"],"names":["module","exports","GuildReportsList","reports","className","style","fontWeight","map","report","url","makePlainUrl","id","key","to","Date","start","toLocaleString","title","ZONES","find","zone","name","zoneNameById","owner","color","textAlign","aria-hidden","marginLeft","REPORTS_TO_SHOW","ERRORS","GUILD_NOT_FOUND","NO_REPORTS_FOR_FILTER","WCL_API_ERROR","UNKNOWN_API_ERROR","UNEXPECTED","NOT_RESPONDING","GuildReports","props","state","activeZoneID","reportsToShow","isLoading","error","errorMessage","realmSlug","realm","factionImage","HORDE_PICTURE","load","bind","this","fetchBattleNetInfo","region","setState","fetch","makeGuildApiUrl","response","status","ok","json","data","faction","ALLIANCE_PICTURE","retryingPromise","then","default","realms","realmsInRegion","console","warn","lowerCaseRealm","toLowerCase","elem","findRealm","slug","getRealmSlug","urlEncodedName","encodeURIComponent","urlEncodedRealm","filterStart","setMonth","getMonth","fetchWcl","getTime","length","catch","err","errorType","GuildNotFoundError","captureException","WclApiError","UnknownApiError","message","filteredReports","filterReports","DISCORD","href","target","rel","GITHUB","WCL_GUIDE","nameSlug","replace","battleNetUrl","backgroundImage","backgroundSize","backgroundPosition","fontSize","WarcraftLogs","Armory","Wipefest","height","value","onChange","e","Number","Object","values","reverse","width","float","overflow","onClick","preventDefault","display","i18n","_","padding","margin","ActivityIndicator","text","filter","sort","a","b","slice","React","Component","GuildPage","others","DocumentTitle","NavigationBar"],"mappings":"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","file":"static/js/GuildPage.43179a83.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/ally_guild_banner_bwl.1b35f21a.jpg\";","module.exports = __webpack_public_path__ + \"static/media/horde_guild_banner_onyx.f9d433f9.jpg\";","import React from 'react';\r\nimport { Link } from 'react-router-dom';\r\nimport { makePlainUrl } from 'interface/common/makeAnalyzerUrl';\r\nimport ZONES from 'game/ZONES';\r\nimport { WCLGuildReport } from 'common/WCL_TYPES';\r\n\r\ninterface Props {\r\n  reports: WCLGuildReport[];\r\n}\r\n\r\nfunction zoneNameById(id: number): string | undefined {\r\n  return ZONES.find((zone) => zone.id === id)?.name;\r\n}\r\n\r\nconst GuildReportsList = ({ reports }: Props) => (\r\n  <ul className=\"list reports-list\">\r\n    <li style={{ fontWeight: 'bold' }}>\r\n      <div className=\"row\">\r\n        <div className=\"col-sm-2\">Report Date</div>\r\n        <div className=\"col-sm-5\">Title</div>\r\n        <div className=\"col-sm-2\">Zone</div>\r\n        <div className=\"col-sm-2\">Owner</div>\r\n      </div>\r\n    </li>\r\n    {reports.map((report) => {\r\n      const url = makePlainUrl(report.id);\r\n\r\n      return (\r\n        <li key={url}>\r\n          <Link to={url}>\r\n            <div className=\"row\">\r\n              <div className=\"col-sm-2\">{new Date(report.start).toLocaleString()}</div>\r\n              <div className=\"col-sm-5\">{report.title}</div>\r\n              <div className=\"col-sm-2\">{zoneNameById(report.zone)}</div>\r\n              <div className=\"col-sm-2\">{report.owner}</div>\r\n              <div className=\"col-sm-1\" style={{ color: 'white', textAlign: 'right' }}>\r\n                <span\r\n                  className=\"glyphicon glyphicon-chevron-right\"\r\n                  aria-hidden=\"true\"\r\n                  style={{ marginLeft: 10 }}\r\n                />\r\n              </div>\r\n            </div>\r\n          </Link>\r\n        </li>\r\n      );\r\n    })}\r\n  </ul>\r\n);\r\n\r\nexport default GuildReportsList;\r\n","import React from 'react';\r\nimport { Link } from 'react-router-dom';\r\nimport { t, Trans } from '@lingui/macro';\r\n\r\nimport ZONES from 'game/ZONES';\r\nimport fetchWcl, { GuildNotFoundError, UnknownApiError, WclApiError } from 'common/fetchWclApi';\r\nimport { WCLGuildReport, WCLGuildReportsResponse } from \"common/WCL_TYPES\";\r\nimport { captureException } from 'common/errorLogger';\r\nimport retryingPromise from 'common/retryingPromise';\r\nimport { makeGuildApiUrl } from 'common/makeApiUrl';\r\nimport ActivityIndicator from 'interface/common/ActivityIndicator';\r\nimport ArmoryIcon from 'interface/icons/Armory';\r\nimport WarcraftLogsIcon from 'interface/icons/WarcraftLogs';\r\nimport WipefestIcon from 'interface/icons/Wipefest';\r\nimport { i18n } from 'interface/RootLocalizationProvider';\r\n\r\nimport './GuildReports.scss';\r\nimport ReportsList from '../GuildReportsList';\r\nimport ALLIANCE_PICTURE from './images/ally_guild_banner_bwl.jpg'\r\nimport HORDE_PICTURE from './images/horde_guild_banner_onyx.jpg'\r\n\r\nconst loadRealms = () =>\r\n  retryingPromise(() =>\r\n    import('common/RealmList').then(exports => exports.default),\r\n  );\r\n\r\nconst ZONE_ALL = -1;\r\nconst ZONE_DEFAULT = ZONE_ALL;\r\nconst REPORTS_TO_SHOW = [25, 50, 100];\r\nconst REPORTS_TO_SHOW_DEFAULT = 25;\r\nconst MONTHS_BACK_SEARCH = 3;\r\n\r\nconst ERRORS = {\r\n  GUILD_NOT_FOUND: t('interface.guildReports.errors.guildNotFound')`We couldn't find your guild on Warcraft Logs`,\r\n  NO_REPORTS_FOR_FILTER: t('interface.guildReports.errors.noReportsForFilter')`We couldn't find any reports`,\r\n  WCL_API_ERROR: t('interface.guildReports.errors.wclAPIError')`Something went wrong talking to Warcraft Logs`,\r\n  UNKNOWN_API_ERROR: t('interface.guildReports.errors.unknownAPIError')`Something went wrong talking to the server`,\r\n  UNEXPECTED: t('interface.guildReports.errors.unexpected')`Something went wrong`,\r\n  NOT_RESPONDING: t('interface.guildReports.errors.notResponding')`Request timed out`,\r\n};\r\n\r\ninterface Props {\r\n  region: string,\r\n  realm: string,\r\n  name: string,\r\n}\r\n\r\ninterface State {\r\n  activeZoneID: number,\r\n  reports: WCLGuildReport[],\r\n  reportsToShow: number,\r\n  isLoading: boolean,\r\n  error: any, // TODO MessageDescriptor? convert to enum?\r\n  errorMessage: any | null,\r\n  realmSlug: string,\r\n  factionImage: string,\r\n}\r\n\r\nclass GuildReports extends React.Component<Props, State> {\r\n  constructor(props: Props) {\r\n    super(props);\r\n    this.state = {\r\n      activeZoneID: ZONE_DEFAULT,\r\n      reports: [],\r\n      reportsToShow: REPORTS_TO_SHOW_DEFAULT,\r\n      isLoading: true,\r\n      error: null,\r\n      errorMessage: null,\r\n      realmSlug: props.realm,\r\n      factionImage: HORDE_PICTURE,\r\n    };\r\n    this.load = this.load.bind(this);\r\n  }\r\n\r\n  async componentDidMount() {\r\n    this.fetchBattleNetInfo();\r\n  }\r\n\r\n  async fetchBattleNetInfo() {\r\n    const { region, realm, name } = this.props;\r\n\r\n    // Skip CN-API due to blizzard restrictions (aka there is no API for CN)\r\n    if (region === 'CN') {\r\n      this.setState(\r\n        {\r\n          factionImage: HORDE_PICTURE,\r\n        },\r\n        () => {\r\n          this.load();\r\n        },\r\n      );\r\n      return;\r\n    }\r\n    // fetch guild faction\r\n    const response = await fetch(\r\n      makeGuildApiUrl(region, realm, name),\r\n    );\r\n\r\n    // TODO do we care about these errors just for faction? we could\r\n    //  let blizzard api fail silently and use WCL response for any real errors\r\n    if (response.status === 500) {\r\n      this.setState({\r\n        isLoading: false,\r\n        error: ERRORS.NOT_RESPONDING,\r\n      });\r\n      return;\r\n    } else if (response.status === 404) {\r\n      this.setState({\r\n        isLoading: false,\r\n        error: ERRORS.GUILD_NOT_FOUND,\r\n      });\r\n      return;\r\n    } else if (!response.ok) {\r\n      this.setState({\r\n        isLoading: false,\r\n        error: ERRORS.UNEXPECTED,\r\n      });\r\n      return;\r\n    }\r\n\r\n    const data = await response.json();\r\n\r\n    if (!data.faction) {\r\n      // We definitely want to see this error I think so that we know if response format has changed\r\n      this.setState({\r\n        isLoading: false,\r\n        error: ERRORS.UNEXPECTED,\r\n        errorMessage: 'Corrupt Battle.net API response received.',\r\n      });\r\n      return;\r\n    }\r\n    this.setState(\r\n      { factionImage: data.faction === 1 ? HORDE_PICTURE : ALLIANCE_PICTURE },\r\n      () => {\r\n        this.load();\r\n      },\r\n    );\r\n  }\r\n\r\n  get filterReports() {\r\n    let filteredReports = this.state.reports;\r\n    if (this.state.activeZoneID !== ZONE_ALL) {\r\n      filteredReports = filteredReports.filter(elem => this.state.activeZoneID === elem.zone);\r\n    }\r\n    filteredReports.sort((a, b) => b.start - a.start);\r\n    return filteredReports.slice(0, this.state.reportsToShow);\r\n  }\r\n\r\n  async findRealm() {\r\n    const realms = await loadRealms();\r\n    // Use the slug from REALMS when available, otherwise try realm-prop and fail\r\n    const realmsInRegion = realms[this.props.region];\r\n    if (!realmsInRegion) {\r\n      console.warn(`Region could not be found: ${this.props.region}. This generally indicates a bug.`);\r\n      return null;\r\n    }\r\n    const lowerCaseRealm = this.props.realm.toLowerCase();\r\n    const realm = realmsInRegion.find(elem => elem.name.toLowerCase() === lowerCaseRealm);\r\n    if (!realm) {\r\n      console.warn(`Realm could not be found: ${this.props.realm}. This generally indicates a bug.`);\r\n    }\r\n    return realm;\r\n  }\r\n\r\n  async getRealmSlug() {\r\n    const realm = await this.findRealm();\r\n    return realm ? realm.slug : this.props.realm;\r\n  }\r\n\r\n  async load() {\r\n    this.setState({\r\n      isLoading: true,\r\n    });\r\n\r\n    const realm = await this.getRealmSlug();\r\n    this.setState({\r\n      realmSlug: realm,\r\n    });\r\n\r\n    const urlEncodedName = encodeURIComponent(this.props.name);\r\n    const urlEncodedRealm = encodeURIComponent(realm);\r\n\r\n    const filterStart = new Date();\r\n    // TODO allow selection of a date range?\r\n    filterStart.setMonth(filterStart.getMonth() - MONTHS_BACK_SEARCH);\r\n    return fetchWcl<WCLGuildReportsResponse>(\r\n      `reports/guild/${urlEncodedName}/${urlEncodedRealm}/${this.props.region}`,\r\n      {\r\n        start: filterStart.getTime(),\r\n      },\r\n    )\r\n      .then(reports => {\r\n        if (reports.length === 0) {\r\n          this.setState({\r\n            reports: [],\r\n            isLoading: false,\r\n            error: ERRORS.NO_REPORTS_FOR_FILTER,\r\n          });\r\n          return;\r\n        }\r\n        this.setState({\r\n          reports: reports,\r\n          isLoading: false,\r\n          error: null,\r\n        });\r\n      })\r\n      .catch(err => {\r\n        if (err instanceof GuildNotFoundError) {\r\n          this.setState({\r\n            error: ERRORS.GUILD_NOT_FOUND,\r\n            isLoading: false,\r\n          });\r\n          return;\r\n        }\r\n\r\n        // For any WCL or unexpected errors, send to Sentry\r\n        captureException(err);\r\n\r\n        let errorType;\r\n        if (err instanceof WclApiError) {\r\n          errorType = ERRORS.WCL_API_ERROR;\r\n        } else if (err instanceof UnknownApiError) {\r\n          errorType = ERRORS.UNKNOWN_API_ERROR;\r\n        } else {\r\n          errorType = ERRORS.UNEXPECTED;\r\n        }\r\n        this.setState({\r\n          error: errorType,\r\n          errorMessage: err.message,\r\n          isLoading: false,\r\n        });\r\n      });\r\n  }\r\n\r\n  render() {\r\n    let errorMessage;\r\n    const filteredReports = this.filterReports;\r\n\r\n    const DISCORD = <a href=\"https://discord.gg/AxphPxU\" target=\"_blank\" rel=\"noopener noreferrer\">Discord</a>;\r\n    const GITHUB = <a href=\"https://github.com/WoWAnalyzer/WoWAnalyzer\" target=\"_blank\" rel=\"noopener noreferrer\">Github</a>;\r\n    const WCL_GUIDE = <a href=\"https://www.warcraftlogs.com/help/start/\" target=\"_blank\" rel=\"noopener noreferrer\">Warcraft Logs guide</a>;\r\n\r\n    if (this.state.error === ERRORS.GUILD_NOT_FOUND) {\r\n      errorMessage = (\r\n        <Trans id=\"interface.guildReports.errors.guildNotFoundDetails\">\r\n          Please check your input and make sure that you've selected the correct region and realm.\r\n          <br />\r\n          If your input was correct, then make sure that someone in your raid logged the fight for\r\n          you or check out the {WCL_GUIDE} to get started with logging on your own.\r\n          <br />\r\n          <br />\r\n          When you know for sure that you have logs on Warcraft Logs and you still get this error,\r\n          please message us on {DISCORD} or create an issue on {GITHUB}.\r\n        </Trans>\r\n      );\r\n    } else if (this.state.error === ERRORS.NOT_RESPONDING) {\r\n      errorMessage = (\r\n        <Trans id=\"interface.guildReports.errors.notRespondingDetails\">\r\n          It looks like we couldn't get a response in time from the API, this usually happens when\r\n          the servers are under heavy load.\r\n          <br />\r\n          <br />\r\n          You could try and enter your report-code manually <Link to=\"/\">here</Link>.<br />\r\n          That would bypass the guild lookup and we should be able to analyze your report.\r\n          <br />\r\n        </Trans>\r\n      );\r\n    } else if (\r\n      this.state.error === ERRORS.WCL_API_ERROR ||\r\n      this.state.error === ERRORS.UNKNOWN_API_ERROR ||\r\n      this.state.error === ERRORS.UNEXPECTED\r\n    ) {\r\n      errorMessage = (\r\n        <Trans id=\"interface.guildReports.errors.details\">\r\n          {this.state.errorMessage}\r\n          <br />\r\n          Please message us on {DISCORD} or create an issue on {GITHUB}\r\n          if this issue persists and we will fix it, eventually.\r\n        </Trans>\r\n      );\r\n    } else if (\r\n      this.state.error === ERRORS.NO_REPORTS_FOR_FILTER ||\r\n      filteredReports.length === 0\r\n    ) {\r\n      errorMessage = (\r\n        <Trans id=\"interface.guildReports.errors.noReportsForFilterDetails\">\r\n          Please check your filters and make sure that you logged those fights on Warcraft Logs.\r\n          <br />\r\n          <br />\r\n          Don't know how to log your fights? Check out the {WCL_GUIDE} to get started.\r\n        </Trans>\r\n      );\r\n    }\r\n\r\n    // Name slug for battle.net armory, standard name for WCL & wipefest\r\n    const nameSlug = this.props.name.replace(/\\s/g, \"-\").toLowerCase();\r\n    let battleNetUrl = `https://worldofwarcraft.com/en-${this.props.region}/guild/${this.props.region}/${this.state.realmSlug}/${nameSlug}`;\r\n    if (this.props.region === 'CN') {\r\n      battleNetUrl = `https://www.wowchina.com/zh-cn/guild/${this.state.realmSlug}/${nameSlug}`;\r\n    }\r\n\r\n    return (\r\n      <div className=\"results\">\r\n        <header>\r\n          <div className=\"background\">\r\n            <div\r\n              className=\"img\"\r\n              style={{\r\n                backgroundImage: `url(${this.state.factionImage})`,\r\n                backgroundSize: `cover`,\r\n                backgroundPosition: 'center center',\r\n              }}\r\n            />\r\n          </div>\r\n          <div className=\"info container\">\r\n            <div>\r\n              <a\r\n                href={`https://www.warcraftlogs.com/guild/${this.props.region}/${this.state.realmSlug}/${this.props.name}`}\r\n                target=\"_blank\"\r\n                rel=\"noopener noreferrer\"\r\n                className=\"btn\"\r\n                style={{ fontSize: 22 }}\r\n              >\r\n                <WarcraftLogsIcon /> Warcraft Logs\r\n              </a>\r\n              <br />\r\n              <a\r\n                href={battleNetUrl}\r\n                target=\"_blank\"\r\n                rel=\"noopener noreferrer\"\r\n                className=\"btn\"\r\n                style={{ fontSize: 22 }}\r\n              >\r\n                <ArmoryIcon /> Armory\r\n              </a>\r\n              <br />\r\n              {this.props.region !== 'CN' && (\r\n                <a\r\n                  href={`https://www.wipefest.gg/guild/${this.props.name}/${this.state.realmSlug}/${this.props.region}`}\r\n                  target=\"_blank\"\r\n                  rel=\"noopener noreferrer\"\r\n                  className=\"btn\"\r\n                  style={{ fontSize: 22 }}\r\n                >\r\n                  <WipefestIcon /> Wipefest\r\n                </a>\r\n              )}\r\n            </div>\r\n            <div className=\"player\">\r\n              <h2>{this.props.region} - {this.props.realm}</h2>\r\n              <h1>{this.props.name}</h1>\r\n            </div>\r\n          </div>\r\n          <nav>\r\n            <div className=\"container\">\r\n              <ul>\r\n                <li style={{ height: 'auto' }}>\r\n                  <select\r\n                    className=\"form-control\"\r\n                    value={this.state.activeZoneID}\r\n                    onChange={e => this.setState({ activeZoneID: Number(e.target.value) })}\r\n                  >\r\n                    <option key={ZONE_ALL} value={ZONE_ALL}>All Zones</option>\r\n                    {Object.values(ZONES)\r\n                      .reverse()\r\n                      .map(elem => (\r\n                        <option key={elem.id} value={elem.id}>\r\n                          {elem.name}\r\n                        </option>\r\n                      ))}\r\n                  </select>\r\n                </li>\r\n                <li style={{ height: 'auto' }}>\r\n                  <select\r\n                    className=\"form-control\"\r\n                    value={this.state.reportsToShow}\r\n                    onChange={e => this.setState({ reportsToShow: Number(e.target.value) })}\r\n                    style={{ width: 'auto', float: 'right' }}\r\n                  >\r\n                    {REPORTS_TO_SHOW\r\n                      .map(elem => (\r\n                        <option key={elem} value={elem}>\r\n                          {elem} reports\r\n                        </option>\r\n                      ))}\r\n                  </select>\r\n                </li>\r\n              </ul>\r\n            </div>\r\n          </nav>\r\n        </header>\r\n        <div className=\"container\">\r\n          <div className=\"row\">\r\n            <div className=\"col-md-12\">\r\n              {this.state.error && (\r\n                <span>\r\n                  <Link to=\"/\">\r\n                    <Trans id=\"interface.guildReports.home\">Home</Trans>\r\n                  </Link>{' '}\r\n                  &gt;{' '}\r\n                  <span>\r\n                    {this.props.region} &gt; {this.props.realm} &gt;{' '}\r\n                    {this.props.name}\r\n                  </span>\r\n                  <br />\r\n                  <br />\r\n                </span>\r\n              )}\r\n              <div className=\"panel\" style={{ overflow: 'auto' }}>\r\n                {!this.state.isLoading && (\r\n                  <div className=\"panel-heading\">\r\n                    <div className=\"pull-right\">\r\n                      <Link\r\n                        to=\"\"\r\n                        onClick={e => {\r\n                          e.preventDefault();\r\n                          this.load();\r\n                        }}\r\n                      >\r\n                        <span\r\n                          className=\"glyphicon glyphicon-refresh\"\r\n                          aria-hidden=\"true\"\r\n                        />{' '}\r\n                        <Trans id=\"interface.guildReports.refresh\">Refresh</Trans>\r\n                      </Link>\r\n                    </div>\r\n                    <h1 style={{ display: 'inline-block' }}>\r\n                      {this.state.error ? (\r\n                        i18n._(this.state.error)\r\n                      ) : (\r\n                        <Trans id=\"interface.guildReports.guildReports\">Guild Reports</Trans>\r\n                      )}\r\n                    </h1>\r\n                    <small>\r\n                      <Trans id=\"interface.guildReports.guildReportsDetails\">\r\n                        This page will only show guild reports that are public and listed on\r\n                        Warcraft Logs. If your reports are unlisted, you need to manually find the\r\n                        report on Warcraft Logs and copy the direct report link to analyze a fight\r\n                        missing from this page. If your reports are private, they can't be analyzed.\r\n                      </Trans>\r\n                    </small>\r\n                  </div>\r\n                )}\r\n                <div className=\"panel-body\">\r\n                  <div\r\n                    className=\"flex-main\"\r\n                    style={{ padding: errorMessage ? 20 : 0 }}\r\n                  >\r\n                    {this.state.isLoading && !this.state.error && (\r\n                      <div\r\n                        style={{\r\n                          textAlign: 'center',\r\n                          fontSize: '2em',\r\n                          margin: '20px 0',\r\n                        }}\r\n                      >\r\n                        <ActivityIndicator\r\n                          text={<Trans id=\"interface.guildReports.fetchingReports\">Fetching reports...</Trans>}\r\n                        />\r\n                      </div>\r\n                    )}\r\n                    {!this.state.isLoading && errorMessage}\r\n                    {!this.state.isLoading && filteredReports.length > 0 && (\r\n                      <ReportsList\r\n                        reports={filteredReports}\r\n                      />\r\n                    )}\r\n                  </div>\r\n                </div>\r\n              </div>\r\n            </div>\r\n          </div>\r\n        </div>\r\n      </div>\r\n    );\r\n  }\r\n}\r\n\r\nexport default GuildReports;\r\n","import React from 'react';\r\nimport DocumentTitle from 'interface/DocumentTitle';\r\nimport NavigationBar from 'interface/layout/NavigationBar';\r\nimport GuildReports from 'interface/GuildReports';\r\n\r\ninterface GuildPageProps {\r\n  region: string;\r\n  realm: string;\r\n  name: string;\r\n}\r\n\r\nconst GuildPage = ({ region, realm, name, ...others }: GuildPageProps) => (\r\n  <>\r\n    <DocumentTitle title={`${name}-${realm} (${region})`} />\r\n    <NavigationBar />\r\n    <GuildReports region={region} realm={realm} name={name} {...others} />\r\n  </>\r\n);\r\n\r\nexport default GuildPage;\r\n","// a butchered version of https://www.warcraftlogs.com:443/v1/zones\r\n// only includes the raids from Shadowlands (showing older logs wouldn't make sense)\r\n\r\n// TODO: Refactor this (it's kind of strange and feels misplaced)\r\n\r\ninterface Encounter {\r\n  id: number;\r\n  name: string;\r\n  npcID: number;\r\n}\r\n\r\ninterface Bracket {\r\n  min: number;\r\n  max: number;\r\n  bucket: number;\r\n  type: string;\r\n}\r\n\r\ninterface Partition {\r\n  name: string;\r\n  compact: string;\r\n  default?: boolean;\r\n}\r\n\r\ninterface Zone {\r\n  id: number;\r\n  name: string;\r\n  frozen?: boolean;\r\n  encounters: Encounter[];\r\n  brackets: Bracket;\r\n  partitions?: Partition[];\r\n}\r\n\r\nconst ZONES: Zone[] = [\r\n  {\r\n    'id': 26,\r\n    'name': 'Castle Nathria',\r\n    'frozen': false,\r\n    'brackets': {\r\n      'min': 173,\r\n      'max': 230,\r\n      'bucket': 3,\r\n      'type': 'Item Level',\r\n    },\r\n    'encounters': [\r\n      {\r\n        'id': 2398,\r\n        'name': 'Shriekwing',\r\n        'npcID': 164406,\r\n      },\r\n      {\r\n        'id': 2418,\r\n        'name': 'Huntsman Altimor',\r\n        'npcID': 165066,\r\n      },\r\n      {\r\n        'id': 2383,\r\n        'name': 'Hungering Destroyer',\r\n        'npcID': 164261,\r\n      },\r\n      {\r\n        'id': 2402,\r\n        'name': 'Sun King\\'s Salvation',\r\n        'npcID': 168973, //High Torturer Darithos\r\n      },\r\n      {\r\n        'id': 2405,\r\n        'name': 'Artificer Xy\\'mox',\r\n        'npcID': 166644,\r\n      },\r\n      {\r\n        'id': 2406,\r\n        'name': 'Lady Inerva Darkvein',\r\n        'npcID': 165521,\r\n      },\r\n      {\r\n        'id': 2412,\r\n        'name': 'The Council of Blood',\r\n        'npcID': 166969,\r\n      },\r\n      {\r\n        'id': 2399,\r\n        'name': 'Sludgefist',\r\n        'npcID': 164407,\r\n      },\r\n      {\r\n        'id': 2417,\r\n        'name': 'Stone Legion Generals',\r\n        'npcID': 168113,\r\n      },\r\n      {\r\n        'id': 2407,\r\n        'name': 'Sire Denathrius',\r\n        'npcID': 167406,\r\n      },\r\n    ],\r\n  },\r\n];\r\n\r\nexport default ZONES;\r\n"],"sourceRoot":""}