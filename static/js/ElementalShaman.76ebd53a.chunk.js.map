{"version":3,"sources":["parser/shaman/elemental/modules/Buffs.tsx","parser/shaman/elemental/modules/Abilities.tsx","parser/shaman/elemental/modules/features/AlwaysBeCasting.tsx","parser/shaman/elemental/modules/talents/Aftershock.tsx","parser/shaman/elemental/modules/talents/Ascendance.tsx","parser/shaman/elemental/modules/talents/EarthenRage.tsx","parser/shaman/elemental/modules/talents/LiquidMagmaTotem.tsx","parser/shaman/elemental/modules/talents/MasterOfTheElements.tsx","parser/shaman/elemental/modules/talents/PrimalFireElemental.tsx","parser/shaman/elemental/modules/talents/PrimalStormElemental.tsx","parser/shaman/elemental/modules/talents/StormElemental.tsx","parser/shaman/elemental/modules/talents/Stormkeeper.tsx","parser/shaman/elemental/modules/talents/UnlimitedPowerTimesByStacks.tsx","parser/shaman/elemental/modules/talents/UnlimitedPower.tsx","parser/shaman/elemental/modules/talents/SurgeOfPower.tsx","parser/shaman/elemental/modules/talents/Icefury.tsx","parser/shaman/elemental/modules/talents/StaticDischarge.tsx","parser/shaman/elemental/modules/talents/EchoingShock.tsx","parser/shaman/elemental/modules/core/LavaSurge.tsx","parser/shaman/elemental/modules/features/CancelledCasts.tsx","parser/shaman/elemental/modules/checklist/Component.tsx","parser/shaman/elemental/modules/checklist/Module.tsx","parser/shaman/shared/maelstromchart/MaelstromTracker.js","parser/shaman/shared/maelstromchart/MaelstromDetails.js","parser/shaman/shared/maelstromchart/Maelstrom.js","parser/shaman/shared/maelstromchart/MaelstromTab.js","parser/shaman/elemental/CombatLogParser.tsx","interface/statistics/components/BoringValueText/index.tsx","parser/shared/modules/features/Checklist/helpers/calculateMedian.js","parser/shared/modules/features/Checklist/helpers/average.js","parser/shared/modules/features/Checklist/helpers/harmonic.js","parser/shared/modules/features/Checklist/Rule.tsx","parser/shared/modules/features/Checklist/Requirement.tsx","parser/shared/modules/features/Checklist/helpers/performanceForThresholds.js","parser/shared/modules/features/Checklist/index.js","parser/shared/modules/features/Checklist/PreparationRule.js","parser/shared/modules/features/Checklist/GenericCastEfficiencyRequirement.js","parser/shared/modules/resources/resourcetracker/ResourceTracker.ts","parser/shared/modules/resources/resourcetracker/ResourceBreakdown.tsx","common/colorForPerformance.ts","interface/icons/Dropdown.js","interface/common/Expandable.tsx","parser/shared/modules/helpers/Stacks.tsx","parser/shared/modules/CancelledCasts.tsx"],"names":["Buffs","combatant","this","selectedCombatant","spellId","SPELLS","ICEFURY_TALENT","id","timelineHighlight","FIRE_ELEMENTAL","MASTER_OF_THE_ELEMENTS_BUFF","enabled","hasTalent","MASTER_OF_THE_ELEMENTS_TALENT","SURGE_OF_POWER_BUFF","SURGE_OF_POWER_TALENT","STORMKEEPER_TALENT","triggeredBySpellId","Object","keys","BLOODLUST_BUFFS","map","item","Number","CoreBuffs","Abilities","spell","LAVA_BURST","charges","ECHO_OF_THE_ELEMENTS_TALENT","cooldown","haste","category","SPELL_CATEGORIES","ROTATIONAL","gcd","base","LIGHTNING_BOLT","LIQUID_MAGMA_TOTEM_TALENT","ROTATIONAL_AOE","castEfficiency","suggestion","recommendedEfficiency","CHAIN_LIGHTNING","LAVA_BEAM","EARTHQUAKE","ELEMENTAL_BLAST_TALENT","ASCENDANCE_TALENT_ELEMENTAL","COOLDOWNS","damageSpellIds","FIRE_BLAST","METEOR_DAMAGE","FIRE_ELEMENTAL_IMMOLATE","STORM_ELEMENTAL_TALENT","WIND_GUST","EYE_OF_THE_STORM","CALL_LIGHTNING","FLAME_SHOCK","FROST_SHOCK","EARTH_SHOCK","CAPACITOR_TOTEM","UTILITY","ASTRAL_SHIFT","buffSpellId","DEFENSIVE","THUNDERSTORM","TREMOR_TOTEM","WIND_SHEAR","STATIC_DISCHARGE_TALENT","ECHOING_SHOCK_TALENT","BLOODLUST","HEROISM","REINCARNATION","OTHERS","CoreAbilities","AlwaysBeCasting","when","suggestionThresholds","addSuggestion","suggest","actual","recommended","SpellLink","icon","formatPercentage","activeTimePercentage","isLessThan","minor","average","major","style","ThresholdStyle","PERCENTAGE","CoreAlwaysBeCasting","Aftershock","options","refund","active","AFTERSHOCK_TALENT","addEventListener","Events","energize","AFTERSHOCK","onAftershock","event","resourceChange","Statistic","position","STATISTIC_ORDER","OPTIONAL","size","STATISTIC_CATEGORY","TALENTS","BoringSpellValueText","ResourceGenerated","resourceType","RESOURCE_TYPES","MAELSTROM","amount","Analyzer","Ascendance","justEnteredAscendance","checkDelay","numCasts","abilities","enemies","hasEB","tooltip","AscendanceUptime","others","formatNumber","averageLavaBurstCasts","getBuffUptime","owner","fightDuration","isGreaterThan","NUMBER","dependencies","EnemyInstances","EarthenRage","damageGained","EARTHEN_RAGE_TALENT","damage","by","SELECTED_PLAYER","EARTHEN_RAGE_DAMAGE","onERDamage","absorbed","ItemDamageDone","LiquidMagmaTotem","LIQUID_MAGMA_TOTEM_DAMAGE","onLMTDamage","MASTER_OF_THE_ELEMENTS","INCREASE","DURATION","WINDOW_DURATION","AFFECTED_DAMAGE","ICEFURY_OVERLOAD","LIGHTNING_BOLT_OVERLOAD","CHAIN_LIGHTNING_OVERLOAD","ELEMENTAL_BLAST_OVERLOAD","AFFECTED_CASTS","MasterOfTheElements","key","moteBuffedAbilities","moteActivationTimestamp","moteConsumptionTimestamp","spellid","includes","cast","_onCast","_onLvBCast","_onDamage","timestamp","meta","isEnhancedCast","ability","guid","Infinity","calculateEffectiveDamage","dropdown","className","e","damagingCasts","FIRE_ELEMENTAL_METEOR","FIRE_ELEMENTAL_FIRE_BLAST","PrimalFireElemental","meteorCasts","PFEcasts","usedCasts","maelstromGained","IMMOLATE","PRIMAL_ELEMENTALIST_TALENT","SELECTED_PLAYER_PET","onDamage","onFECast","onDamagingCast","unusedSpells","filter","unusedSpellsString","join","unusedSpellsCount","length","i18n","_","missedMeteorCasts","PrimalStormElemental","eotsCasts","pseCasts","lastCLCastTimestamp","badCasts","onPetCast","onPetDamage","onPSECast","unusedSpellsSuggestionTresholds","badCastsSuggestionTresholds","StormElemental","badFS","justEnteredSE","onSECast","undefined","stormEleUptime","averageLightningBoltCasts","WIND_GUST_BUFF","AFFECTED_ABILITIES","Stormkeeper","damageDoneByBuffedCasts","onSKDamage","hasBuff","UnlimitedPowerTimesByStacks","unlimitedPowerStacks","lastUPStack","lastUPUpdate","fight","start_time","UNLIMITED_POWER_TALENT","Array","from","MAX_UP_STACKS","x","applybuff","UNLIMITED_POWER_BUFF","handleStacks","applybuffstack","removebuff","removebuffstack","fightend","push","type","EventType","FightEnd","currentStacks","avgStacks","forEach","elem","index","reduce","a","b","UnlimitedPower","unlimitedPowerTimesByStacks","values","unlimitedPowerTimesByStack","i","formatDuration","uptime","averageUnlimitedPowerStacks","SURGE_OF_POWER","SurgeOfPower","sopBuffedAbilities","skSopCasts","skCasts","Icefury","empoweredFrostShockCasts","abilityTracker","onFrostShockCast","toFixed","getAbility","casts","DECIMAL","AbilityTracker","StaticDischarge","damageDone","ticks","onSDDamage","onSDCast","STATIC_DISCHARGE","EchoingShock","onCast","efficiency","LavaSurge","spellUsable","LAVA_SURGE","onLS","isOnCooldown","endCooldown","SpellUsable","CancelledCasts","statisticOrder","CORE","castsCancelled","totalCasts","CoreCancelledCasts","ElementalShamanChecklist","thresholds","AbilityRequirement","props","GenericCastEfficiencyRequirement","getCastEfficiencyForSpellId","Rule","name","description","href","target","rel","Requirement","downtime","cancelledCasts","flameShockUptime","flameShockRefreshes","icefuryEfficiency","ascendanceEfficiency","PreparationRule","Checklist","combatants","preparationRuleAnalyzer","alwaysBeCasting","icefury","ascendance","flameshock","Component","selected","cancelledCastSuggestionThresholds","downtimeSuggestionThresholds","uptimeThreshold","refreshThreshold","BaseChecklist","Combatants","CastEfficiency","PreparationRuleAnalyzer","FlameShock","MaelstromTracker","args","resource","maxResource","ResourceTracker","MaelstromDetails","suggestionThresholdsWasted","wasted","StatisticBox","Icon","value","wastedPercent","label","total","Panel","title","pad","ResourceBreakdown","tracker","maelstromTracker","showSpenders","generated","COLORS","Maelstrom","start","rawData","resourceUpdates","secIntoFight","Math","floor","kind","y","current","waste","data","spec","mark","line","strokeWidth","encoding","field","axis","labelExpr","formatTime","grid","scale","nice","color","legend","orient","domain","range","stroke","disableHeight","width","BaseChart","height","MaelstromTab","url","render","padding","end","end_time","CombatLogParser","CoreCombatLogParser","specModules","flameShock","lavaSurge","buffs","earthenRage","aftershock","elementalBlast","ElementalBlast","spiritWolf","SpiritWolf","earthShield","EarthShield","staticCharge","StaticCharge","masterOfTheElements","stormElemental","liquidMagmaTotem","surgeOfPower","primalFireElemental","primalStormElemental","unlimitedPower","stormkeeper","staticDischarge","echoingShock","maelstromDetails","maelstromTab","ankhNormalizer","AnkhNormalizer","checklist","astralShift","AstralShift","BoringValue","children","calculateMedian","arr","sort","half","c","p","harmonic","cum","val","PERFORMANCE_METHOD","RuleContext","React","createContext","useState","requirementPerformances","performance","passed","expanded","state","setState","calculateRulePerformance","useCallback","DEFAULT","min","MEDIAN","AVERAGE","LOWEST","FIRST","HARMONIC","Error","requirements","isArray","some","child","isValidElement","Provider","prevState","performanceMethod","element","inverseExpanded","header","backgroundColor","colorForPerformance","Dropdown","Information","setPerformance","THOUSANDS","formatThousands","BOOLEAN","SECONDS","valueTooltip","prefix","suffix","max","thresholdsN","formatThresholdsActual","marginLeft","Tooltip","content","minWidth","marginRight","transition","performanceForGreaterThanThresholds","performanceForLessThanThresholds","isEqual","performanceForThresholds","PureComponent","Consumer","potionsUsed","bestPotionUsed","itemsEnchanted","itemsBestEnchanted","weaponsEnhanced","bestWeaponEnhancements","higherFlaskPresent","flaskPresent","higherFoodPresent","foodPresent","renderEnchantRequirements","renderWeaponEnhancementRequirements","renderPotionRequirements","renderFlaskRequirements","renderFoodRequirements","captureException","isMaxCasts","maxCasts","gotMaxCasts","averageIssueEfficiency","majorIssueEfficiency","eventEmitter","buildersObj","spendersObj","to","onEnergize","spent","spentByCast","resourceChangeType","gain","_applyBuilder","getResource","maxGain","initBuilderAbility","used","shouldProcessCastEvent","eventResource","cost","getReducedCost","initSpenderAbility","triggerSpendEvent","resourceCost","classResources","find","r","fabricatedEvent","SpendResource","sourceID","targetID","__fabricated","fabricateEvent","Boolean","acc","EventEmitter","abilityId","resourceName","prepareGenerated","prepareSpent","totalGenerated","totalWasted","totalSpent","spendersCasts","colSpan","paddingRight","textAlign","other","xmlns","viewBox","d","Expandable","setExpanded","Element","onClick","prevExpanded","ControlledExpandable","RemoveBuff","RemoveDebuff","ApplyBuff","ApplyDebuff","ApplyBuffStack","RemoveBuffStack","ApplyDebuffStack","RemoveDebuffStack","stack","castsFinished","beginCastSpell","wasCastStarted","cancelledSpellList","IGNORED_ABILITIES","begincast","onBeginCast","onFightend","CASTS_THAT_ARENT_CASTS","CASTABLE_WHILE_CASTING_SPELLS","addToCancelledList","beginCastAbility","cancelledPercentage"],"mappings":"wLA0CeA,E,sKApCX,IAAMC,EAAYC,KAAKC,kBAIvB,MAAO,CACL,CACEC,QAASC,IAAOC,eAAeC,GAC/BC,mBAAmB,GAErB,CACEJ,QAASC,IAAOI,eAAeF,GAC/BC,mBAAmB,GAErB,CACEJ,QAASC,IAAOK,4BAA4BH,GAC5CI,QAASV,EAAUW,UAAUP,IAAOQ,8BAA8BN,IAClEC,mBAAmB,GAErB,CACEJ,QAASC,IAAOS,oBAAoBP,GACpCI,QAASV,EAAUW,UAAUP,IAAOU,sBAAsBR,IAC1DC,mBAAmB,GAErB,CACEJ,QAASC,IAAOW,mBAAmBT,GACnCU,mBAAoBZ,IAAOW,mBAAmBT,GAC9CC,mBAAmB,GAErB,CACEJ,QAASc,OAAOC,KAAKC,KAAiBC,KAAI,SAAAC,GAAI,OAAIC,OAAOD,MACzDd,mBAAmB,Q,GAhCPgB,KCqOLC,E,0KAlOX,IAAMxB,EAAYC,KAAKC,kBACvB,MAAO,CACL,CACEuB,MAAOrB,IAAOsB,WACdC,QAAS3B,EAAUW,UAAUP,IAAOwB,4BAA4BtB,IAAM,EAAI,EAC1EuB,SAAU,SAAAC,GAAK,OAAI,GAAK,EAAIA,IAC5BC,SAAUP,EAAUQ,iBAAiBC,WACrCC,IAAK,CACHC,KAAM,OAGV,CACEV,MAAOrB,IAAOgC,eACdL,SAAUP,EAAUQ,iBAAiBC,WACrCC,IAAK,CACHC,KAAM,OAGV,CACEV,MAAOrB,IAAOiC,0BACdN,SAAUP,EAAUQ,iBAAiBM,eACrCJ,IAAK,CACHC,KAAM,MAERN,SAAU,GACVnB,QAASV,EAAUW,UAAUP,IAAOiC,0BAA0B/B,IAC9DiC,eAAgB,CACdC,YAAY,EACZC,sBAAuB,KAG3B,CACEhB,MAAOrB,IAAOsC,gBACdX,SAAUP,EAAUQ,iBAAiBM,eACrCJ,IAAK,CACHC,KAAM,OAGV,CACEV,MAAOrB,IAAOuC,UACdZ,SAAUP,EAAUQ,iBAAiBM,gBAEvC,CACEb,MAAOrB,IAAOwC,WACdb,SAAUP,EAAUQ,iBAAiBM,eACrCJ,IAAK,CACHC,KAAM,OAGV,CACEV,MAAOrB,IAAOyC,uBACdd,SAAUP,EAAUQ,iBAAiBC,WACrCvB,QAASV,EAAUW,UAAUP,IAAOyC,uBAAuBvC,IAC3DuB,SAAU,GACVK,IAAK,CACHC,KAAM,MAERI,eAAgB,CACdC,YAAY,EACZC,sBAAuB,KAG3B,CACEhB,MAAOrB,IAAO0C,4BACdf,SAAUP,EAAUQ,iBAAiBe,UACrClB,SAAU,IACVK,IAAK,CACHC,KAAM,MAERzB,QAASV,EAAUW,UAAUP,IAAO0C,4BAA4BxC,IAChEiC,eAAgB,CACdC,YAAY,EACZC,sBAAuB,KAG3B,CACEhB,MAAOrB,IAAOI,eACduB,SAAUP,EAAUQ,iBAAiBe,UACrClB,SAAU,IACVK,IAAK,CACHC,KAAM,MAERa,eAAgB,CAAC5C,IAAO6C,WAAW3C,GAAIF,IAAO8C,cAAc5C,GAAIF,IAAO+C,wBAAwB7C,IAC/FI,SAAUV,EAAUW,UAAUP,IAAOgD,uBAAuB9C,IAC5DiC,eAAgB,CACdC,YAAY,EACZC,sBAAuB,IAG3B,CACEhB,MAAOrB,IAAOW,mBACdgB,SAAUP,EAAUQ,iBAAiBe,UACrClB,SAAU,GACVK,IAAK,CACHC,KAAM,MAERzB,QAASV,EAAUW,UAAUP,IAAOW,mBAAmBT,IACvDiC,eAAgB,CACdC,YAAY,EACZC,sBAAuB,KAG3B,CACEhB,MAAOrB,IAAOgD,uBACdrB,SAAUP,EAAUQ,iBAAiBe,UACrClB,SAAU,IACVnB,QAASV,EAAUW,UAAUP,IAAOgD,uBAAuB9C,IAC3D0C,eAAgB,CAAC5C,IAAOiD,UAAU/C,GAAIF,IAAOkD,iBAAiBhD,GAAIF,IAAOmD,eAAejD,IACxFiC,eAAgB,CACdC,YAAY,EACZC,sBAAuB,KAI3B,CACEhB,MAAOrB,IAAOoD,YACdzB,SAAUP,EAAUQ,iBAAiBC,WACrCJ,SAAU,EACVK,IAAK,CACHC,KAAM,OAGV,CACEV,MAAOrB,IAAOqD,YACd1B,SAAUP,EAAUQ,iBAAiBC,WACrCC,IAAK,CACHC,KAAM,OAGV,CACEV,MAAOrB,IAAOC,eACd0B,SAAUP,EAAUQ,iBAAiBe,UACrClB,SAAU,GACVK,IAAK,CACHC,KAAM,MAERzB,QAASV,EAAUW,UAAUP,IAAOC,eAAeC,IACnDiC,eAAgB,CACdC,YAAY,EACZC,sBAAuB,KAG3B,CACEhB,MAAOrB,IAAOsD,YACd3B,SAAUP,EAAUQ,iBAAiBC,WACrCC,IAAK,CACHC,KAAM,OAGV,CACEV,MAAOrB,IAAOuD,gBACd5B,SAAUP,EAAUQ,iBAAiB4B,QACrC1B,IAAK,CACHC,KAAM,MAERN,SAAU,IAEZ,CACEJ,MAAOrB,IAAOyD,aACdC,YAAa1D,IAAOyD,aAAavD,GACjCuB,SAAU,GACVE,SAAUP,EAAUQ,iBAAiB+B,WAEvC,CACEtC,MAAOrB,IAAO4D,aACdjC,SAAUP,EAAUQ,iBAAiB4B,QACrC1B,IAAK,CACHC,KAAM,KAERN,SAAU,IAEZ,CACEJ,MAAOrB,IAAO6D,aACdlC,SAAUP,EAAUQ,iBAAiB4B,QACrC1B,IAAK,CACHC,KAAM,OAGV,CACEV,MAAOrB,IAAO8D,WACdnC,SAAUP,EAAUQ,iBAAiB4B,QACrC/B,SAAU,GACVK,IAAK,MAEP,CACET,MAAOrB,IAAO+D,wBACdpC,SAAUP,EAAUQ,iBAAiBC,WACrCJ,SAAU,GACVU,eAAgB,CACdC,YAAY,EACZC,sBAAuB,IAEzB/B,QAASV,EAAUW,UAAUP,IAAO+D,wBAAwB7D,IAC5D4B,IAAK,CACHC,KAAM,OAGV,CACEV,MAAOrB,IAAOgE,qBACdrC,SAAUP,EAAUQ,iBAAiBC,WACrCJ,SAAU,GACVU,eAAgB,CACdC,YAAY,EACZC,sBAAuB,IAEzB/B,QAASV,EAAUW,UAAUP,IAAOgE,qBAAqB9D,IACzD4B,IAAK,CACHC,KAAM,OAGV,CACEV,MAAOrB,IAAOiE,UACdtC,SAAUP,EAAUQ,iBAAiBe,WAEvC,CACEtB,MAAOrB,IAAOkE,QACdvC,SAAUP,EAAUQ,iBAAiBe,WAEvC,CACEtB,MAAOrB,IAAOmE,cACdxC,SAAUP,EAAUQ,iBAAiBwC,a,UA9NrBC,G,iDCuBTC,E,0KARDC,GACVA,EAAK1E,KAAK2E,sBAAsBC,eAAc,SAACC,EAASC,EAAQC,GAAlB,OAAkCF,EAAQ,8FAAyD,kBAACG,EAAA,EAAD,CAAW3E,GAAIF,IAAOoD,YAAYlD,KAA3F,KAAmG,kBAAC2E,EAAA,EAAD,CAAW3E,GAAIF,IAAOsD,YAAYpD,KAArI,OAA+I,kBAAC2E,EAAA,EAAD,CAAW3E,GAAIF,IAAOqD,YAAYnD,OACtQ4E,KAAK,wBACLH,OAF6E,UAEnEI,YAAiB,EAAIJ,GAF8C,eAG7EC,YAH6E,WAG7DG,YAAiB,EAAIH,GAHwC,0B,2CAZhF,MAAO,CACLD,OAAQ9E,KAAKmF,qBACbC,WAAY,CACVC,MAAO,IACPC,QAAS,IACTC,MAAO,KAETC,MAAOC,IAAeC,gB,GATEC,K,oECsCfC,E,kDA5Bb,WAAYC,GAAmB,IAAD,8BAC5B,cAAMA,IAHRC,OAAS,EAIP,EAAKC,OAAS,EAAK9F,kBAAkBS,UAAUP,IAAO6F,kBAAkB3F,IAExE,EAAK4F,iBAAiBC,IAAOC,SAAS3E,MAAMrB,IAAOiG,YAAa,EAAKC,cAJzC,E,yDAOjBC,GACXtG,KAAK8F,QAAUQ,EAAMC,iB,kCAIrB,OACE,kBAACC,EAAA,EAAD,CACEC,SAAUC,IAAgBC,WAC1BC,KAAK,WACL9E,SAAU+E,IAAmBC,SAE7B,kBAACC,EAAA,EAAD,CAAsBvF,MAAOrB,IAAO6F,mBAClC,oCACE,kBAACgB,EAAA,EAAD,CAAmBC,aAAcC,IAAeC,UAAWC,OAAQpH,KAAK8F,gB,GAvB3DuB,K,iBCGnBC,E,kDAkBJ,WAAYzB,GAAmB,IAAD,gCAC5B,cAAMA,IAbR0B,uBAAwB,EAYM,EAX9BC,WAAa,EAWiB,EAV9BC,UAU8B,mBAT3BtH,IAAO0C,4BAA4BxC,GAAK,GASb,cAR3BF,IAAOsB,WAAWpB,GAAK,GAQI,cAP3BF,IAAOsD,YAAYpD,GAAK,GAOG,cAN3BF,IAAOyC,uBAAuBvC,GAAK,GAMR,uBALpB,GAKoB,KAHpBqH,eAGoB,IAFpBC,aAEoB,EAE5B,EAAK5B,OAAS,EAAK9F,kBAAkBS,UAAUP,IAAO0C,4BAA4BxC,IAFtD,E,wDAwB5B,IAAMuH,EAAQ5H,KAAKC,kBAAkBS,UAAUP,IAAOyC,uBAAuBvC,IAE7E,OACE,kBAACmG,EAAA,EAAD,CACEC,SAAUC,IAAgBC,WAC1BC,KAAK,WACL9E,SAAU+E,IAAmBC,QAC7Be,QACE,yDACqB3C,YAAiBlF,KAAK8H,kBAD3C,KAC+D,6BAD/D,iCAGE,4BACE,4CAAkB9H,KAAKyH,SAAStH,IAAOsD,YAAYpD,KACnD,2CAAiBL,KAAKyH,SAAStH,IAAOsB,WAAWpB,KAChDuH,GAAS,gDAAsB5H,KAAKyH,SAAStH,IAAOyC,uBAAuBvC,KAC5E,6CAAmBL,KAAKyH,SAASM,WAKvC,kBAAChB,EAAA,EAAD,CAAsBvF,MAAOrB,IAAO0C,6BAClC,kDACcmF,YAAahI,KAAKiI,uBADhC,4C,kCAQIvD,GACV,IAAMgD,EAAS,qBAAiB1H,KAAKC,kBAAkBS,UAAUP,IAAOyC,uBAAuBvC,IAA/D,wBAAjB,oBACfqE,EAAK1E,KAAK2E,sBACPC,eAAc,SAACC,EAASC,EAAQC,GAAlB,OACbF,EAAQ,uFAA6D6C,EAA7D,MACLzC,KAAK9E,IAAO0C,4BAA4BoC,MACxCH,OAFH,UAEaA,EAFb,mCAGGC,YAHH,oBAG4B2C,EAH5B,6B,uCAnDJ,OAAO1H,KAAKC,kBAAkBiI,cAAc/H,IAAO0C,4BAA4BxC,IAAML,KAAKmI,MAAMC,gB,4CAIhG,OAAQpI,KAAKyH,SAAStH,IAAOsB,WAAWpB,IAAML,KAAKyH,SAAStH,IAAO0C,4BAA4BxC,KAAQ,I,2CAIvG,MAAO,CACLyE,OAAQ9E,KAAKyH,SAASM,OACtBM,cAAe,CACb9C,MAAO,GAETC,MAAOC,IAAe6C,Y,GArCHjB,KAAnBC,EAEGiB,aAAe,CACpBb,UAAWnG,EACXoG,QAASa,KA8EElB,Q,SCxDAmB,E,kDA3Bb,WAAY5C,GAAmB,IAAD,8BAC5B,cAAMA,IAHR6C,aAAe,EAIb,EAAK3C,OAAS,EAAK9F,kBAAkBS,UAAUP,IAAOwI,oBAAoBtI,IAC1E,EAAK4F,iBAAiBC,IAAO0C,OAAOC,GAAGC,KAAiBtH,MAAMrB,IAAO4I,qBAAsB,EAAKC,YAHpE,E,uDAMnB1C,GACTtG,KAAK0I,cAAgBpC,EAAMc,QAAUd,EAAM2C,UAAY,K,kCAIvD,OACE,kBAACzC,EAAA,EAAD,CACEC,SAAUC,IAAgBC,WAC1BC,KAAK,WACL9E,SAAU+E,IAAmBC,SAE7B,kBAACC,EAAA,EAAD,CAAsBvF,MAAOrB,IAAO4I,qBAClC,oCACE,kBAACG,EAAA,EAAD,CAAgB9B,OAAQpH,KAAK0I,sB,GAtBfrB,KC4BX8B,E,kDA1Bb,WAAYtD,GAAmB,IAAD,8BAC5B,cAAMA,IAHR6C,aAAe,EAIb,EAAK3C,OAAS,EAAK9F,kBAAkBS,UAAUP,IAAOiC,0BAA0B/B,IAChF,EAAK4F,iBAAiBC,IAAO0C,OAAOC,GAAGC,KAAiBtH,MAAMrB,IAAOiJ,2BAA4B,EAAKC,aAH1E,E,wDAMlB/C,GACVtG,KAAK0I,cAAgBpC,EAAMc,QAAUd,EAAM2C,UAAY,K,kCAIvD,OACE,kBAACzC,EAAA,EAAD,CACEC,SAAUC,IAAgBC,WAC1BC,KAAK,YAEL,kBAACG,EAAA,EAAD,CAAsBvF,MAAOrB,IAAOiC,2BAClC,oCACE,kBAAC8G,EAAA,EAAD,CAAgB9B,OAAQpH,KAAK0I,sB,GArBVrB,K,iBCCzBiC,EAAyB,CAC7BC,SAAU,GACVC,SAAU,KACVC,gBAAiB,IACjBC,gBAAiB,CACfvJ,IAAOC,eACPD,IAAOwJ,iBACPxJ,IAAOqD,YACPrD,IAAOgC,eACPhC,IAAOyJ,wBACPzJ,IAAOsC,gBACPtC,IAAO0J,yBACP1J,IAAOyC,uBACPzC,IAAO2J,yBACP3J,IAAOsD,aAETsG,eAAgB,CACd5J,IAAOwC,WACPxC,IAAOC,eACPD,IAAOqD,YACPrD,IAAOyC,uBACPzC,IAAOsC,gBACPtC,IAAOsD,YACPtD,IAAOgC,gBAET2E,QAAS,CACP3G,IAAOC,eAAeC,GACtBF,IAAOyC,uBAAuBvC,KAwFnB2J,E,kDA9Eb,WAAYnE,GAAmB,IAAD,EAI5B,IAAK,IAAMoE,KAJiB,qBAC5B,cAAMpE,IANRqE,oBAAiD,GAKnB,EAJ9BC,wBAAyC,KAIX,EAH9BC,yBAA0C,KAGZ,EAF9B1B,aAAe,EAIb,EAAK3C,OAAS,EAAK9F,kBAAkBS,UAAUP,IAAOQ,8BAA8BN,IAElEiJ,EAAuBS,eAAgB,CACvD,IAAMM,EAAUf,EAAuBS,eAAeE,GAAK5J,IACvD,EAAKJ,kBAAkBS,UAAU2J,IAAaf,EAAuBxC,QAAQwD,SAASD,KACxF,EAAKH,oBAAoBG,GAAW,GAPZ,OAW5B,EAAKpE,iBAAiBC,IAAOqE,KAAK1B,GAAGC,KAAiBtH,MAAM8H,EAAuBS,gBAAiB,EAAKS,SACzG,EAAKvE,iBAAiBC,IAAOqE,KAAK1B,GAAGC,KAAiBtH,MAAMrB,IAAOsB,YAAa,EAAKgJ,YACrF,EAAKxE,iBAAiBC,IAAO0C,OAAOC,GAAGC,KAAiBtH,MAAM8H,EAAuBI,iBAAkB,EAAKgB,WAbhF,E,oDAgBtBpE,GAC+B,OAAjCtG,KAAKmK,0BAGTnK,KAAKoK,yBAA2B9D,EAAMqE,UACtC3K,KAAKmK,wBAA0B,KAC/B7D,EAAMsE,KAAOtE,EAAMsE,MAAQ,GAC3BtE,EAAMsE,KAAKC,gBAAiB,EAC5B7K,KAAKkK,oBAAoB5D,EAAMwE,QAAQC,OAAS,K,iCAIvCzE,GACTtG,KAAKmK,wBAA0B7D,EAAMqE,Y,gCAG7BrE,GACJA,EAAMqE,WAAa3K,KAAKoK,0BAA4B,IAGpD9D,EAAMqE,WAAa3K,KAAKoK,0BAA4BY,KAAY1B,EAAuBG,kBAG3FzJ,KAAK0I,cAAgBuC,YAAyB3E,EAAOgD,EAAuBC,a,kCAGjE,IAAD,OACV,OACE,kBAAC/C,EAAA,EAAD,CACEC,SAAUC,IAAgBC,WAC1BC,KAAK,WACLsE,SACE,oCACE,2BAAOC,UAAU,yBACf,+BACE,4BACE,uCACA,wDAGJ,+BACGnK,OAAOC,KAAKjB,KAAKkK,qBAAqB/I,KAAI,SAACiK,GAAD,OACzC,wBAAInB,IAAKmB,GACP,4BAAI,kBAACpG,EAAA,EAAD,CAAW3E,GAAIgB,OAAO+J,MAC1B,4BAAK,EAAKlB,oBAAoB7I,OAAO+J,aAQjD,kBAACrE,EAAA,EAAD,CAAsBvF,MAAOrB,IAAOQ,+BAClC,oCACE,kBAACuI,EAAA,EAAD,CAAgB9B,OAAQpH,KAAK0I,sB,GA5EPrB,K,QC1B5BgE,EAAgB,CAAClL,IAAOmL,sBAAuBnL,IAAO+C,wBAAyB/C,IAAOoL,2BA2E7EC,E,kDAhEb,WAAY3F,GAAmB,IAAD,gCAC5B,cAAMA,IATR4F,YAAc,EAQgB,EAP9BC,SAAW,EAOmB,EAL9BC,eAK8B,IAH9BjD,aAAe,EAGe,EAF9BkD,gBAAkB,EAIhB,EAAKD,WAAL,mBACGxL,IAAOmL,sBAAsBjL,IAAK,GADrC,cAEGF,IAAO0L,SAASxL,IAAK,GAFxB,cAGGF,IAAO6C,WAAW3C,IAAK,GAH1B,GAKA,EAAK0F,OAAS,EAAK9F,kBAAkBS,UAAUP,IAAO2L,2BAA2BzL,MAC1E,EAAKJ,kBAAkBS,UAAUP,IAAOgD,uBAAuB9C,IACtE,EAAK4F,iBAAiBC,IAAO0C,OAAOC,GAAGkD,KAAqBvK,MAAM6J,GAAgB,EAAKW,UACvF,EAAK/F,iBAAiBC,IAAOqE,KAAK1B,GAAGC,KAAiBtH,MAAMrB,IAAOI,gBAAiB,EAAK0L,UACzF,EAAKhG,iBAAiBC,IAAOqE,KAAK1B,GAAGkD,KAAqBvK,MAAM6J,GAAgB,EAAKa,gBAXzD,E,qDAkBrB5F,GACPtG,KAAK0I,cAAgBpC,EAAMc,QAAUd,EAAM2C,UAAY,K,+BAGhD3C,GACPtG,KAAK0L,UAAY,I,qCAGJpF,GACbtG,KAAK2L,UAAUrF,EAAMwE,QAAQC,OAAQ,I,kCAG3BrG,GAAa,IAAD,OAChByH,EAAenL,OAAOC,KAAKjB,KAAK2L,WAAWS,QAAO,SAAAnC,GAAG,OAAK,EAAK0B,UAAUtK,OAAO4I,OAChFoC,EAAqBF,EAAaG,KAAK,MACvCC,EAAoBJ,EAAaK,OACvC9H,EAAK6H,GAAmBlE,cAAc,GACnCzD,eAAc,SAACC,EAASC,EAAQC,GAAlB,OAAkCF,EAAQ,uKACtDI,KAAK9E,IAAOI,eAAe0E,MAC3BH,OAAO2H,OAAKC,EAAE,uJAAiE1E,YAAauE,GAA8DF,yBAC1JtH,YAH8C,0DAI9CQ,MAAMR,EAAc,MACzBL,EAAK1E,KAAK2M,mBAAmBtE,cAAc,GACxCzD,eAAc,SAACC,EAASC,EAAQC,GAAlB,OAAkCF,EAAQ,mDAAwB,kBAACG,EAAA,EAAD,CAAW3E,GAAIF,IAAOmL,sBAAsBjL,KAApE,wBAA+F,kBAAC2E,EAAA,EAAD,CAAW3E,GAAIF,IAAOI,eAAeF,KAApI,qBAA4J,kBAAC2E,EAAA,EAAD,CAAW3E,GAAIF,IAAO2L,2BAA2BzL,KAA7M,mEACtD4E,KAAK9E,IAAOI,eAAe0E,MAC3BH,OAAO2H,OAAKC,EAAE,mHAAsE1E,YAAa,EAAK2E,uBACtG5H,YAH8C,qEAI9CQ,MAAMR,EAAc,Q,kCAIzB,OACE,kBAACyB,EAAA,EAAD,CACEC,SAAUC,IAAgBC,WAC1BC,KAAK,YAEL,oCACE,kBAACG,EAAA,EAAD,CAAsBvF,MAAOrB,IAAOI,gBAClC,kBAAC2I,EAAA,EAAD,CAAgB9B,OAAQpH,KAAK0I,oB,wCAzCrC,OAAO1I,KAAK0L,SAAW1L,KAAKyL,gB,GAxBEpE,KCL5BgE,EAAgB,CAAClL,IAAOkD,iBAAiBhD,GAAIF,IAAOiD,UAAU/C,GAAIF,IAAOmD,eAAejD,IA4G/EuM,E,kDA9Fb,WAAY/G,GAAmB,IAAD,gCAC5B,cAAMA,IAXRgH,UAAY,EAUkB,EAT9BC,SAAW,EASmB,EAR9BC,oBAAsB,EAQQ,EAN9BpB,eAM8B,IAJ9BjD,aAAe,EAIe,EAH9BkD,gBAAkB,EAGY,EAF9BoB,SAAW,EAIT,EAAKrB,WAAL,mBACGxL,IAAOkD,iBAAiBhD,IAAK,GADhC,cAEGF,IAAOiD,UAAU/C,IAAK,GAFzB,cAGGF,IAAOmD,eAAejD,IAAK,GAH9B,GAKA,EAAK0F,OAAS,EAAK9F,kBAAkBS,UAAUP,IAAO2L,2BAA2BzL,KAC5E,EAAKJ,kBAAkBS,UAAUP,IAAOgD,uBAAuB9C,IACpE,EAAK4F,iBAAiBC,IAAOqE,KAAK1B,GAAGkD,KAAqBvK,MAAM6J,GAAgB,EAAK4B,WACrF,EAAKhH,iBAAiBC,IAAO0C,OAAOC,GAAGkD,KAAqBvK,MAAM6J,GAAgB,EAAK6B,aACvF,EAAKjH,iBAAiBC,IAAOqE,KAAK1B,GAAGC,KAAiBtH,MAAMrB,IAAOgD,wBAAyB,EAAKgK,WAXrE,E,sDAwCpB7G,GACRtG,KAAK8M,UAAY,I,gCAGTxG,GACRtG,KAAK2L,UAAUrF,EAAMwE,QAAQC,OAAQ,I,kCAG3BzE,GACVtG,KAAK0I,cAAgBpC,EAAMc,QAAUd,EAAM2C,UAAY,GAEnD3C,EAAMwE,QAAQC,OAAS5K,IAAOmD,eAAejD,IAC3CiG,EAAMqE,UAAY3K,KAAK+M,oBAjEY,OAkErC/M,KAAKgN,UAAY,K,kCAKXtI,GACV,IAAM2H,EAAqBrM,KAAKmM,aAAaG,KAAK,MAElD5H,EAAK1E,KAAKoN,iCACPxI,eAAc,SAACC,EAASC,EAAQC,GAAlB,OAAkCF,EAAQ,uLACtDI,KAAK9E,IAAOgD,uBAAuB8B,MACnCH,OAF8C,UAEpCkD,YAAalD,GAFuB,qDAE6BuH,EAF7B,MAG9CtH,YAH8C,8DAKnDL,EAAK1E,KAAKqN,6BACPzI,eAAc,SAACC,EAASC,EAAQC,GAAlB,OAAkCF,EAAQ,mDAAwB,kBAACG,EAAA,EAAD,CAAW3E,GAAIF,IAAOmD,eAAejD,KAA7D,kBACtD4E,KAAK9E,IAAOgD,uBAAuB8B,MACnCH,OAF8C,UAEpCkD,YAAalD,GAFuB,4EAG9CC,YAH8C,4E,kCAOnD,OACE,kBAACyB,EAAA,EAAD,CACEC,SAAUC,IAAgBC,WAC1BC,KAAK,WACLiB,QACE,iEAC6BG,YAAahI,KAAKgN,UAD/C,mBACyE,kBAAChI,EAAA,EAAD,CAAW3E,GAAIF,IAAOmD,eAAejD,OAIhH,kBAAC0G,EAAA,EAAD,CAAsBvF,MAAOrB,IAAOgD,wBAClC,kBAAC+F,EAAA,EAAD,CAAgB9B,OAAQpH,KAAK0I,mB,mCAxEjB,IAAD,OACjB,OAAO1H,OAAOC,KAAKjB,KAAK2L,WAAWS,QAAO,SAAAnC,GAAG,OAAK,EAAK0B,UAAUtK,OAAO4I,S,sDAIxE,MAAO,CACLnF,OAAQ9E,KAAKmM,aAAaK,OAC1BnE,cAAe,CACbhD,MAAO,EACPE,MAAO,GAETC,MAAOC,IAAe6C,U,kDAKxB,MAAO,CACLxD,OAAQ9E,KAAKmM,aAAaK,OAC1BnE,cAAe,CACbhD,MAAO,EACPE,MAAO,GAETC,MAAOC,IAAe6C,Y,GA/COjB,KCA7BiG,E,kDAoBJ,WAAYzH,GAAmB,IAAD,gCAC5B,cAAMA,IAfR0H,MAAQ,EAcsB,EAb9BC,eAAgB,EAac,EAZ9BhG,WAAa,EAYiB,EAX9BC,UAW8B,mBAV3BtH,IAAOgD,uBAAuB9C,GAAK,GAUR,cAT3BF,IAAOgC,eAAe9B,GAAK,GASA,cAR3BF,IAAOsC,gBAAgBpC,GAAK,GAQD,cAP3BF,IAAOsD,YAAYpD,GAAK,GAOG,cAN3BF,IAAOwC,WAAWtC,GAAK,GAMI,uBALpB,GAKoB,KAHpBsH,aAGoB,IAFpBD,eAEoB,EAE5B,EAAK3B,OAAS,EAAK9F,kBAAkBS,UAAUP,IAAOgD,uBAAuB9C,IAC7E,EAAK4F,iBAAiBC,IAAOqE,KAAK1B,GAAGC,KAAiBtH,MAAMrB,IAAOgD,wBAAyB,EAAKsK,UACjG,EAAKxH,iBAAiBC,IAAOqE,KAAK1B,GAAGC,KAAkB,EAAK2E,UAJhC,E,qDA6BrBnH,GACPtG,KAAKwN,eAAgB,EACrBxN,KAAKyH,SAAStH,IAAOgD,uBAAuB9C,KAAO,I,6BAG9CiG,GACL,IAAMpG,EAAUoG,EAAMwE,QAAQC,UAEC2C,IAA3B1N,KAAKyH,SAASvH,GAChBF,KAAKyH,SAASvH,IAAY,EAE1BF,KAAKyH,SAASM,QAAU,I,kCAK1B,OACE,kBAACvB,EAAA,EAAD,CACEqB,QACE,yDACqB3C,YAAiBlF,KAAK2N,gBAD3C,KAC6D,6BAD7D,sCAGE,4BACE,4CAAkB3N,KAAKyH,SAAStH,IAAOsD,YAAYpD,KACnD,+CAAqBL,KAAKyH,SAAStH,IAAOgC,eAAe9B,KACzD,2CAAiBL,KAAKyH,SAAStH,IAAOwC,WAAWtC,KACjD,gDAAsBL,KAAKyH,SAAStH,IAAOsC,gBAAgBpC,KAC3D,6CAAmBL,KAAKyH,SAASM,WAKvC,gDACW,kBAAC/C,EAAA,EAAD,CAAW3E,GAAIF,IAAOgC,eAAe9B,KADhD,IACwDL,KAAK4N,0BAD7D,cACkG,kBAAC5I,EAAA,EAAD,CAAW3E,GAAIF,IAAOgD,uBAAuB9C,S,kCAOzIqE,GACV,IAAMgD,EAAS,4DACfhD,EAAK1E,KAAK2E,sBACPC,eAAc,SAACC,EAASC,EAAQC,GAAlB,OAAkCF,EAAQ,2FAAiE6C,EAAjE,MACtDzC,KAAK9E,IAAOgD,uBAAuB8B,MACnCH,OAAO2H,OAAKC,EAAE,2HAA4D5H,aAC1EC,YAH8C,oBAGrB2C,EAHqB,uC,qCAhEnD,OAAO1H,KAAKC,kBAAkBiI,cAAc/H,IAAO0N,eAAexN,IAAML,KAAKmI,MAAMC,gB,gDAInF,OAAQpI,KAAKyH,SAAStH,IAAOgC,eAAe9B,IAAML,KAAKyH,SAAStH,IAAOgD,uBAAuB9C,KAAQ,I,iDAItG,OAAQL,KAAKyH,SAAStH,IAAOsC,gBAAgBpC,IAAML,KAAKyH,SAAStH,IAAOgD,uBAAuB9C,KAAQ,I,2CAIvG,MAAO,CACLyE,OAAQ9E,KAAKyH,SAASM,OACtBM,cAAe,CACb9C,MAAO,GAETC,MAAOC,IAAe6C,Y,GA7CCjB,KAAvBiG,EAEG/E,aAAe,CACpBb,UAAWnG,EACXoG,QAASa,KA+FE8E,QCzGTQ,EAAqB,CACzB3N,IAAOyJ,wBAAwBvJ,GAC/BF,IAAOgC,eAAe9B,GACtBF,IAAO0J,yBAAyBxJ,GAChCF,IAAOsC,gBAAgBpC,IAuCV0N,E,kDAjCb,WAAYlI,GAAmB,IAAD,8BAC5B,cAAMA,IAHRmI,wBAA0B,EAIxB,EAAKjI,OAAS,EAAK9F,kBAAkBS,UAAUP,IAAOW,mBAAmBT,IACzE,EAAK4F,iBACHC,IAAO0C,OAAOC,GAAGC,KAAiBtH,MAAMsM,GACxC,EAAKG,YALqB,E,uDASnB3H,GACJtG,KAAKC,kBAAkBiO,QAAQ/N,IAAOW,mBAAmBT,MAI9DL,KAAKgO,yBAA2B1H,EAAMc,QAAUd,EAAM2C,UAAY,M,kCAIlE,OACE,kBAACzC,EAAA,EAAD,CACEC,SAAUC,IAAgBC,WAC1BC,KAAK,YAEL,kBAACG,EAAA,EAAD,CAAsBvF,MAAOrB,IAAOW,oBAClC,oCACE,kBAACoI,EAAA,EAAD,CAAgB9B,OAAQpH,KAAKgO,iC,GA5Bf3G,K,SC+BX8G,E,kDAlCb,WAAYtI,GAAmB,IAAD,8BAC5B,cAAMA,IALRuI,qBAAmC,GAIL,EAH9BC,YAAc,EAGgB,EAF9BC,aAAe,EAAKnG,MAAMoG,MAAMC,WAI9B,EAAKzI,OAAS,EAAK9F,kBAAkBS,UAAUP,IAAOsO,uBAAuBpO,IAE7E,EAAK+N,qBAAuBM,MAAMC,KAAK,CAAEnC,OAAQoC,KAAqB,SAAAC,GAAC,MAAI,MAC3E,EAAK5I,iBAAiBC,IAAO4I,UAAUjG,GAAGC,KAAiBtH,MAAMrB,IAAO4O,sBAAuB,EAAKC,cACpG,EAAK/I,iBAAiBC,IAAO+I,eAAepG,GAAGC,KAAiBtH,MAAMrB,IAAO4O,sBAAuB,EAAKC,cACzG,EAAK/I,iBAAiBC,IAAOgJ,WAAWrG,GAAGC,KAAiBtH,MAAMrB,IAAO4O,sBAAuB,EAAKC,cACrG,EAAK/I,iBAAiBC,IAAOiJ,gBAAgBtG,GAAGC,KAAiBtH,MAAMrB,IAAO4O,sBAAuB,EAAKC,cAC1G,EAAK/I,iBAAiBC,IAAOkJ,SAAU,EAAKJ,cAThB,E,yDAwBjB1I,GACXtG,KAAKoO,qBAAqBpO,KAAKqO,aAAagB,KAAK/I,EAAMqE,UAAY3K,KAAKsO,cACpEhI,EAAMgJ,OAASC,IAAUC,WAG7BxP,KAAKsO,aAAehI,EAAMqE,UAC1B3K,KAAKqO,YAAcoB,YAAcnJ,M,kDAjBjC,OAAOtG,KAAKoO,uB,kDAGqB,IAAD,OAC5BsB,EAAY,EAIhB,OAHA1P,KAAKoO,qBAAqBuB,SAAQ,SAACC,EAAMC,GACvCH,GAAaE,EAAKE,QAAO,SAACC,EAAGC,GAAJ,OAAUD,EAAIC,IAAG,GAAK,EAAK7H,MAAMC,cAAgByH,KAErEH,M,GA1B+BrI,KCCpC4I,E,kDAQJ,WAAYpK,GAAmB,IAAD,8BAC5B,cAAMA,IAHEqK,iCAEoB,EAE5B,EAAKnK,OAAS,EAAK9F,kBAAkBS,UAAUP,IAAOsO,uBAAuBpO,IAFjD,E,wDAiBjB,IAAD,OACV,OACE,kBAACmG,EAAA,EAAD,CACEC,SAAUC,IAAgBC,WAC1BC,KAAK,WACL9E,SAAU+E,IAAmBC,QAC7BoE,SACE,oCACE,2BAAOC,UAAU,yBACf,+BACE,4BACE,sCACA,wCACA,0CAGJ,+BACGnK,OAAOmP,OAAOnQ,KAAKoQ,4BAA4BjP,KAAI,SAACiK,EAAGiF,GAAJ,OAClD,wBAAIpG,IAAKoG,GACP,4BAAKA,GACL,4BAAKC,YAAelF,EAAE0E,QAAO,SAACC,EAAGC,GAAJ,OAAUD,EAAIC,IAAG,GAAK,MACnD,4BAAK9K,YAAiBkG,EAAE0E,QAAO,SAACC,EAAGC,GAAJ,OAAUD,EAAIC,IAAG,GAAK,EAAK7H,MAAMC,eAAhE,aAQZ,kBAACrB,EAAA,EAAD,CAAsBvF,MAAOrB,IAAOsO,wBAClC,kFAC8CvJ,YAAiBlF,KAAKuQ,QADpE,U,iDAzCN,OAAOvQ,KAAKkQ,4BAA4BA,8B,6BAIxC,OAAOlQ,KAAKC,kBAAkBiI,cAAc/H,IAAO4O,qBAAqB1O,IAAML,KAAKmI,MAAMC,gB,mCAIzF,MAxBoB,IAwBbpI,KAAKkQ,4BAA4BM,gC,GAtBfnJ,KAAvB4I,EAEG1H,aAAe,CACpB2H,4BAA6B/B,GA6DlB8B,QC9DTQ,EAAiB,CACrB1G,eAAgB,CACd5J,IAAOoD,YACPpD,IAAOqD,YACPrD,IAAOsB,WACPtB,IAAOgC,iBA2FIuO,G,kDAhFb,WAAY7K,GAAmB,IAAD,EAI5B,IAAK,IAAMoE,KAJiB,qBAC5B,cAAMpE,IAPR8K,mBAAgD,GAMlB,EAJ9BC,WAAa,EAIiB,EAF9BC,QAAU,EAIR,EAAK9K,OAAS,EAAK9F,kBAAkBS,UAAUP,IAAOU,sBAAsBR,IAE1DoQ,EAAe1G,eAAgB,CAC/C,IAAMM,EAAUoG,EAAe1G,eAAeE,GAAK5J,GACnD,EAAKsQ,mBAAmBtG,GAAW,EANT,OAS5B,EAAKpE,iBAAiBC,IAAOqE,KAAK1B,GAAGC,KAAiBtH,MAAMiP,EAAe1G,gBAAiB,EAAKS,SATrE,E,oDAwBtBlE,GAEFtG,KAAKC,kBAAkBiO,QAAQ/N,IAAOW,mBAAmBT,GAAIiG,EAAMqE,YAAcrE,EAAMwE,QAAQC,OAAS5K,IAAOgC,eAAe9B,KAChIL,KAAK6Q,SAAW,GAGb7Q,KAAKC,kBAAkBiO,QAAQ/N,IAAOS,oBAAoBP,MAI/DiG,EAAMsE,KAAOtE,EAAMsE,MAAQ,GAC3BtE,EAAMsE,KAAKC,gBAAiB,EAC5B7K,KAAK2Q,mBAAmBrK,EAAMwE,QAAQC,OAAS,EAG3C/K,KAAKC,kBAAkBiO,QAAQ/N,IAAOW,mBAAmBT,GAAIiG,EAAMqE,YAAcrE,EAAMwE,QAAQC,OAAS5K,IAAOgC,eAAe9B,KAChIL,KAAK4Q,YAAc,M,kCAIV,IAAD,OACV,OACE,kBAACpK,EAAA,EAAD,CACEC,SAAUC,IAAgBC,WAC1BC,KAAK,YAEL,2BAAOuE,UAAU,yBACf,+BACE,4BACE,uCACA,wDAGJ,+BACGnK,OAAOC,KAAKjB,KAAK2Q,oBAAoBxP,KAAI,SAACiK,GAAD,OACxC,wBAAInB,IAAKmB,GACP,4BAAI,kBAACpG,EAAA,EAAD,CAAW3E,GAAIgB,OAAO+J,MAC1B,4BAAK,EAAKuF,mBAAmBtP,OAAO+J,c,kCAStC1G,GACVA,EAAK1E,KAAK2E,sBACPC,eAAc,SAACC,EAASC,EAAQC,GAAlB,OAAkCF,EAAQ,gPAC0C,KAD1C,OACoD,KADpD,OAC8D,KAD9D,QACyE,KADzE,OACmF,KADnF,SAEtDI,KAAK9E,IAAOU,sBAAsBoE,MAClCH,OAAO2H,OAAKC,EAAE,mJAAsExH,YAAiBJ,OACrGC,YAJ8C,6B,2CA3DnD,MAAO,CACLD,OAAQ9E,KAAK4Q,WAAa5Q,KAAK6Q,QAC/BzL,WAAY,CACVC,MAAO,GACPC,QAAS,IACTC,MAAO,IAETC,MAAOC,IAAeC,gB,GA3BD2B,K,UCbrByJ,G,kDAOJ,WAAYjL,GAAmB,IAAD,8BAC5B,cAAMA,IAJRkL,yBAA2B,EAGG,EAFpBC,oBAEoB,EAE5B,EAAKjL,OAAS,EAAK9F,kBAAkBS,UAAUP,IAAOC,eAAeC,IACrE,EAAK4F,iBAAiBC,IAAOqE,KAAK1B,GAAGC,KAAiBtH,MAAMrB,IAAOqD,aAAc,EAAKyN,kBAH1D,E,+DAmBxBjR,KAAKC,kBAAkBiO,QAAQ/N,IAAOC,eAAeC,MACvDL,KAAK+Q,0BAA4B,K,kCAIzBrM,GACVA,EAAK1E,KAAK2E,sBAAsBC,eAAc,SAACC,EAASC,GAAV,OAAqBD,EAAQ,qEAAgC,kBAACG,EAAA,EAAD,CAAW3E,GAAIF,IAAOC,eAAeC,KAArE,uBAA+F,kBAAC2E,EAAA,EAAD,CAAW3E,GAAIF,IAAOqD,YAAYnD,KAAjI,gBAAoJ,kBAAC2E,EAAA,EAAD,CAAW3E,GAAIF,IAAOC,eAAeC,KAAzL,yHACxE4E,KAAK9E,IAAOC,eAAe6E,MAC3BH,OAAO,wDAAoBA,EAAOoM,QAAQ,GAAnC,IAAuC,kBAAClM,EAAA,EAAD,CAAW3E,GAAIF,IAAOC,eAAeC,KAA5E,iCAAgH,kBAAC2E,EAAA,EAAD,CAAW3E,GAAIF,IAAOqD,YAAYnD,KAAlJ,iBAAsK,kBAAC2E,EAAA,EAAD,CAAW3E,GAAIF,IAAOC,eAAeC,KAA3M,mBACP0E,YAAY,yD,2CArBf,MAAO,CACLD,OAAQ9E,KAAK+Q,yBAA2B/Q,KAAKgR,eAAeG,WAAWhR,IAAOC,eAAeC,IAAI+Q,MACjGhM,WAAY,CACVC,MAAO,EACPC,QAAS,IACTC,MAAO,GAETC,MAAOC,IAAe4L,a,GArBNhK,KAAhByJ,GACGvI,aAAe,CACpByI,eAAgBM,MAqCLR,UCqCAS,G,kDAlEb,WAAY1L,GAAmB,IAAD,8BAC5B,cAAMA,IALR2L,WAAa,EAIiB,EAH9BC,MAAQ,EAGsB,EAF9BL,MAAQ,EAIN,EAAKrL,OAAS,EAAK9F,kBAAkBS,UAAUP,IAAO+D,wBAAwB7D,IAC9E,EAAK4F,iBACHC,IAAO0C,OAAOC,GAAGC,KAAiBtH,MAAMrB,IAAO+D,yBAC/C,EAAKwN,YAEP,EAAKzL,iBACHC,IAAOqE,KAAK1B,GAAGC,KAAiBtH,MAAMrB,IAAO+D,yBAC7C,EAAKyN,UATqB,E,uDA4BnBrL,GACTtG,KAAKyR,OAAS,EACdzR,KAAKwR,YAAclL,EAAMc,QAAUd,EAAM2C,UAAY,K,+BAG9C3C,GACPtG,KAAKoR,OAAS,I,kCAGJ1M,GACVA,EAAK1E,KAAK2E,sBACPC,eAAc,SAACC,EAASC,EAAQC,GAAlB,OACbF,EACE,6CACeK,YAAiB,EAAIJ,GADpC,0BACmE,kBAACE,EAAA,EAAD,CAAW3E,GAAIF,IAAOyR,iBAAiBvR,KAD1G,mGAIC4E,KAAK9E,IAAO+D,wBAAwBe,MACpCH,OANH,UAMaA,EANb,oCAM+C,kBAACE,EAAA,EAAD,CAAW3E,GAAIF,IAAO+D,wBAAwB7D,OAC1F0E,YAPH,UAOkBG,YAAiBH,GAPnC,0B,kCAWJ,OACE,kBAACyB,EAAA,EAAD,CACEC,SAAUC,IAAgBC,WAC1BC,KAAK,YAEL,kBAACG,EAAA,EAAD,CAAsBvF,MAAOrB,IAAO+D,yBAClC,oCACE,kBAACgF,EAAA,EAAD,CAAgB9B,OAAQpH,KAAKwR,kB,kCA5CrC,OAAOxR,KAAKyR,OAAS,EAAIzR,KAAKoR,QAAU,I,2CAIxC,MAAO,CACLtM,OAAQ9E,KAAKyR,OAAS,EAAIzR,KAAKoR,OAC/BhM,WAAY,CACVC,MAAO,EACPE,MAAO,KAETC,MAAOC,IAAeC,gB,GA7BE2B,KC+CfwK,G,kDA/Cb,WAAYhM,GAAmB,IAAD,8BAC5B,cAAMA,IAJRmH,SAAW,EAGmB,EAF9BoE,MAAQ,EAIN,EAAKrL,OAAS,EAAK9F,kBAAkBS,UAAUP,IAAOgE,qBAAqB9D,IAC3E,EAAK4F,iBAAiBC,IAAOqE,KAAK1B,GAAGC,KAAkB,EAAKgJ,QAHhC,E,mDAqBvBxL,GACAtG,KAAKC,kBAAkBiO,QAAQ/N,IAAOgE,qBAAqB9D,MAIhEL,KAAKoR,OAAS,EAEV9K,EAAMwE,QAAQC,OAAS5K,IAAOsB,WAAWpB,KAC3CL,KAAKgN,UAAY,M,kCAITtI,GACVA,EAAK1E,KAAK2E,sBACPC,eAAc,SAACC,EAASC,EAAQC,GAAlB,OACbF,EACE,4GAICI,KAAK9E,IAAOgE,qBAAqBc,MACjCH,OANH,UAMaI,YAAiBJ,GAN9B,2CAOGC,YAPH,UAOkBG,YAAiBH,GAPnC,0B,iCA7BJ,OAAO,EAAK/E,KAAKgN,SAAWhN,KAAKoR,OAAU,I,2CAI3C,MAAO,CACLtM,OAAQ9E,KAAK+R,WACb3M,WAAY,CACVC,MAAO,IACPE,MAAO,KAETC,MAAOC,IAAeC,gB,GAtBD2B,K,oBCLrB2K,G,kDAOJ,WAAYnM,GAAmB,IAAD,8BAC5B,cAAMA,IAHEoM,iBAEoB,EAE5B,EAAKhM,iBAAiBC,IAAO4I,UAAUjG,GAAGC,KAAiBtH,MAAMrB,KAAO+R,YAAa,EAAKC,MAF9D,E,iDAKzB7L,GACCtG,KAAKiS,YAAYG,aAAajS,KAAOsB,WAAWpB,KAClDL,KAAKiS,YAAYI,YAAYlS,KAAOsB,WAAWpB,Q,GAd7BgH,KAAlB2K,GACGzJ,aAAe,CACpB0J,YAAaK,MAiBFN,UCMAO,G,4MAtBbC,eAAiB9L,IAAgB+L,KAAK,G,0DAc1B/N,GACVA,EAAK1E,KAAK2E,sBAAsBC,eAAc,SAACC,EAASC,EAAQC,GAAlB,OAAkCF,EAAQ,GAAD,OAAIK,YAAiBJ,GAArB,6LACpFG,KAAK,mBACLH,OAAO2H,OAAKC,EAAE,4FAAmDxH,YAAiBJ,OAClFC,YAH6E,WAG7DG,YAAiBH,GAH4C,0B,2CAZhF,MAAO,CACLD,OAAQ9E,KAAK0S,eAAiB1S,KAAK2S,WACnCtK,cAAe,CACbhD,MAAO,IACPC,QAAS,KACTC,MAAO,IAETC,MAAOC,IAAeC,gB,UAXCkN,G,kGCqGdC,GAlGkB,SAAC,GAAoD,IAAlD9S,EAAiD,EAAjDA,UAAWuC,EAAsC,EAAtCA,eAAgBwQ,EAAsB,EAAtBA,WAEvDC,EAAqB,SAACC,GAAD,OACzB,kBAACC,GAAA,EAAD,eACE3Q,eAAgBA,EAAe4Q,4BAA4BF,EAAMxR,QAC7DwR,KAIR,OACE,kBAAC,KAAD,KACE,kBAACG,GAAA,EAAD,CACEC,KAAK,0CACLC,YACE,+WAEG,IACD,uBAAGC,KAAK,iEAAiEC,OAAO,SAASC,IAAI,uBAA7F,gBAIHzT,EAAUW,UAAUP,IAAO0C,4BAA4BxC,KACxD,kBAAC0S,EAAD,CAAoBvR,MAAOrB,IAAO0C,4BAA4BxC,KAC7DN,EAAUW,UAAUP,IAAOgD,uBAAuB9C,KACnD,kBAAC0S,EAAD,CAAoBvR,MAAOrB,IAAOI,eAAeF,KAChDN,EAAUW,UAAUP,IAAOgD,uBAAuB9C,KACnD,kBAAC0S,EAAD,CAAoBvR,MAAOrB,IAAOgD,uBAAuB9C,KACxDN,EAAUW,UAAUP,IAAOC,eAAeC,KAC3C,kBAAC0S,EAAD,CAAoBvR,MAAOrB,IAAOC,eAAeC,KAChDN,EAAUW,UAAUP,IAAOW,mBAAmBT,KAC/C,kBAAC0S,EAAD,CAAoBvR,MAAOrB,IAAOW,mBAAmBT,KACpDN,EAAUW,UAAUP,IAAOiC,0BAA0B/B,KACtD,kBAAC0S,EAAD,CAAoBvR,MAAOrB,IAAOiC,0BAA0B/B,KAC3DN,EAAUW,UAAUP,IAAOyC,uBAAuBvC,KACnD,kBAAC0S,EAAD,CAAoBvR,MAAOrB,IAAOyC,uBAAuBvC,MAE3D,kBAAC8S,GAAA,EAAD,CACEC,KAAK,oBAAoBC,YACzB,mPAEgD,kBAACrO,EAAA,EAAD,CAAW3E,GAAIF,IAAOsD,YAAYpD,KAFlF,KAE0F,kBAAC2E,EAAA,EAAD,CAAW3E,GAAIF,IAAO+R,WAAW7R,KAF3H,cAE4I,kBAAC2E,EAAA,EAAD,CAAW3E,GAAIF,IAAOsB,WAAWpB,KAF7K,MAEsL,kBAAC2E,EAAA,EAAD,CAAW3E,GAAIF,IAAOqD,YAAYnD,KAFxN,qTAOA,kBAACoT,GAAA,EAAD,CAAaL,KAAK,WAAWN,WAAYA,EAAWY,WACpD,kBAACD,GAAA,EAAD,CAAaL,KAAK,kBAAkBN,WAAYA,EAAWa,kBAE7D,kBAACR,GAAA,EAAD,CACEC,KAAK,4BACLC,YACE,0GACqE,kBAACrO,EAAA,EAAD,CAAW3E,GAAIF,IAAOsB,WAAWpB,KADtG,+BACwI,kBAAC2E,EAAA,EAAD,CAAW3E,GAAIF,IAAO+R,WAAW7R,KADzK,oBAEW,kBAAC2E,EAAA,EAAD,CAAW3E,GAAIF,IAAOoD,YAAYlD,KAF7C,+JAMF,kBAACoT,GAAA,EAAD,CAAaL,KAAO,oCAAE,kBAACpO,EAAA,EAAD,CAAW3E,GAAIF,IAAOoD,YAAYlD,KAApC,WAAuDyS,WAAYA,EAAWc,mBAClG,kBAACH,GAAA,EAAD,CAAaL,KAAO,4CAAO,kBAACpO,EAAA,EAAD,CAAW3E,GAAIF,IAAOoD,YAAYlD,KAAzC,eAAgEyS,WAAYA,EAAWe,uBAG3G9T,EAAUW,UAAUP,IAAOC,eAAeC,KAC1C,kBAAC8S,GAAA,EAAD,CACEC,KAAK,6BACLC,YACE,oCACE,kBAACrO,EAAA,EAAD,CAAW3E,GAAIF,IAAOC,eAAeC,KADvC,qHAC+J,kBAAC2E,EAAA,EAAD,CAAW3E,GAAIF,IAAOC,eAAeC,KADpM,qBAC4N,kBAAC2E,EAAA,EAAD,CAAW3E,GAAIF,IAAOqD,YAAYnD,KAD9P,qCAEGN,EAAUW,UAAUP,IAAOQ,8BAA8BN,KAAO,6EAAwC,kBAAC2E,EAAA,EAAD,CAAW3E,GAAIF,IAAOC,eAAeC,KAA7E,cAA8F,kBAAC2E,EAAA,EAAD,CAAW3E,GAAIF,IAAOqD,YAAYnD,KAAhI,oBAAuJ,kBAAC2E,EAAA,EAAD,CAAW3E,GAAIF,IAAOQ,8BAA8BN,KAA3M,uFAIrE,kBAACoT,GAAA,EAAD,CAAaL,KAAM,+CAAU,kBAACpO,EAAA,EAAD,CAAW3E,GAAIF,IAAOqD,YAAYnD,KAA5C,iBAAgE,kBAAC2E,EAAA,EAAD,CAAW3E,GAAIF,IAAOC,eAAeC,KAArG,aAAyHyS,WAAYA,EAAWgB,qBAGtK/T,EAAUW,UAAUP,IAAO0C,8BAC5B,kBAACsQ,GAAA,EAAD,CACEC,KAAK,6BACLC,YACE,oCACE,kBAACrO,EAAA,EAAD,CAAW3E,GAAIF,IAAO0C,4BAA4BxC,KADpD,iCACwF,kBAAC2E,EAAA,EAAD,CAAW3E,GAAIF,IAAOsB,WAAWpB,KADzH,mCAC+J,kBAAC2E,EAAA,EAAD,CAAW3E,GAAIF,IAAOsB,WAAWpB,KADhM,QAC2M,kBAAC2E,EAAA,EAAD,CAAW3E,GAAIF,IAAOsD,YAAYpD,KAD7O,mBAEGN,EAAUW,UAAUP,IAAO0C,4BAA4BxC,KAAO,4CAAO,kBAAC2E,EAAA,EAAD,CAAW3E,GAAIF,IAAOsB,WAAWpB,KAAxC,iCAA4E,kBAAC2E,EAAA,EAAD,CAAW3E,GAAIF,IAAOsD,YAAYpD,KAA9G,yCAInE,kBAACoT,GAAA,EAAD,CAAaL,KAAM,4DAAuB,kBAACpO,EAAA,EAAD,CAAW3E,GAAIF,IAAO0C,4BAA4BxC,KAAzE,aAA6FyS,WAAYA,EAAWiB,wBAEzI,kBAACC,GAAA,EAAD,CAAiBlB,WAAYA,M,UCjF7BmB,G,4MAYMC,gB,IACA5R,oB,IACA6R,6B,IACAR,oB,IACAS,qB,IACAC,a,IACAC,gB,IACAC,gB,yDAGR,OACE,kBAACC,GAAD,CACEzU,UAAWC,KAAKkU,WAAWO,SAC3BnS,eAAgBtC,KAAKsC,eACrBwQ,WAAU,6BACL9S,KAAKmU,wBAAwBrB,YADxB,IAERa,eAAgB3T,KAAK2T,eAAee,kCACpChB,SAAU1T,KAAKoU,gBAAgBO,6BAC/Bb,kBAAmB9T,KAAKqU,QAAQ1P,qBAChCoP,qBAAsB/T,KAAKsU,WAAW3P,qBACtCiP,iBAAkB5T,KAAKuU,WAAWK,gBAClCf,oBAAqB7T,KAAKuU,WAAWM,yB,GAjCvBC,MAAlBb,GACG1L,aAAe,CACpB2L,WAAYa,KACZzS,eAAgB0S,KAChBb,wBAAyBc,KACzBtB,eAAgBpB,GAChB6B,gBAAiB3P,EACjB4P,QAASvD,GACTwD,WAAYhN,EACZiN,WAAYW,MA+BDjB,U,2FC5CAkB,G,kDAPb,aAAsB,IAAD,iDAANC,EAAM,yBAANA,EAAM,uBACnB,+BAASA,KACJC,SAAWnO,IAAeC,UAC/B,EAAKmO,YAAc,IAHA,E,iBADQC,GCczBC,G,0KA6CQ9Q,GAAO,IAAD,OAChBA,EAAK1E,KAAKyV,4BACP7Q,eAAc,SAACC,EAASC,EAAQC,GAAlB,OAAkCF,EAAQ,kBAAD,OAAmB,EAAK6Q,OAAxB,8FACnDzQ,KAAK,yBACLH,OAAO2H,OAAKC,EAAE,oGAAsDxH,YAAiBJ,OACrFC,YAH4C,UAG7BG,YAAiBH,GAHY,0B,kCAOnD,MAAO,CAEH,kBAAC4Q,EAAA,EAAD,CACE1L,IAAI,eACJxD,SAAUC,IAAgB+L,KAAK,GAC/BxN,KAAM,kBAAC2Q,GAAA,EAAD,CAAM3Q,KAAK,0BACjB4Q,MAAK,UAAK3Q,YAAiBlF,KAAK8V,eAA3B,MACLC,MAAM,uBACNlO,QAAO,UAAK7H,KAAK0V,OAAV,mBAA2B1V,KAAKgW,MAAhC,wBAIT,kBAACC,GAAA,EAAD,CACEhM,IAAI,QACJiM,MAAM,kBACNzP,SAAU,IACV0P,KAAK,GAEL,kBAACC,GAAA,EAAD,CACEC,QAASrW,KAAKsW,iBACdC,cAAY,Q,6BApEpB,OAAOvW,KAAKsW,iBAAiBZ,QAAU,I,4BAIvC,OAAO1V,KAAKsW,iBAAiBZ,OAAS1V,KAAKsW,iBAAiBE,WAAa,I,sCAIzE,OAAQxW,KAAK0V,OAAS1V,KAAKmI,MAAMC,cAAiB,IAAO,IAAM,I,oCAI/D,OAAOpI,KAAK0V,OAAS1V,KAAKgW,OAAS,I,iDAInC,MAAO,CACLlR,OAAQ9E,KAAK8V,cACbzN,cAAe,CACbhD,MA7BgB,EA8BhBC,QA7BkB,IA8BlBC,MA7BgB,KA+BlBC,MAAO,gB,2CAKT,MAAO,CACLV,OAAQ,EAAI9E,KAAK8V,cACjB1Q,WAAY,CACVC,MAAO,EACPC,QAAS,IACTC,MAAO,KAETC,MAAO,kB,GAzCkB6B,KAAzBmO,GACGjN,aAAe,CACpB+N,iBAAkBnB,IAgFPK,U,6BC3FTiB,GACY,yBADZA,GAEc,uBAFdA,GAGmB,0BAHnBA,GAIqB,wBAuGZC,GApGG,SAAA1D,GAChB,IAAKA,EAAMqD,QACT,OACE,2CAHqB,IASjBM,EAAU3D,EAAV2D,MAEFC,EAAU,GAEhB5D,EAAMqD,QAAQQ,gBAAgBlH,SAAQ,SAACvO,GACrC,IAAM0V,EAAeC,KAAKC,OAAO5V,EAAKuJ,UAAYgM,GAAS,KAC3DC,EAAQvH,KAAK,CAAC4H,KAAM,YAAapI,EAAGiI,EAAcI,EAAE9V,EAAK+V,UACzDP,EAAQvH,KAAK,CAAC4H,KAAM,SAAUpI,EAAGiI,EAAcI,EAAE9V,EAAKgW,WAGxD,IAAMC,EAAO,CACXA,KAAMT,GAGFU,EAAO,CACXC,KAAM,CACJjI,KAAM,OACNkI,KAAM,CACJC,YAAa,IAGjBC,SAAU,CACR7I,EAAG,CACD8I,MAAO,IACPrI,KAAM,eACNsI,KAAM,CACJC,UAAWC,aAAW,sBACtBC,MAAM,GAERC,MAAO,CACLC,MAAM,GAER/B,MAAO,QAETgB,EAAG,CACDS,MAAO,IACPrI,KAAM,eACNsI,KAAM,CACJG,MAAM,GAER7B,MAAO,aAETgC,MAAO,CACLP,MAAO,OACPrI,KAAM,UACN4G,MAAO,KACPiC,OAAQ,CACNC,OAAQ,OAEVJ,MAAO,CACLK,OAAQ,CAAC,YAAa,UACtBC,MAAO,CAAC7B,GAAuBA,MAGnC8B,OAAQ,CACNZ,MAAO,OACPrI,KAAM,UACN4G,MAAO,KACPiC,OAAQ,CACNC,OAAQ,OAEVJ,MAAO,CACLK,OAAQ,CAAC,YAAa,UACtBC,MAAO,CAAC7B,GAAyBA,OAIvCY,KAAM,CACJjE,KAAM,SAIX,OACE,kBAAC,KAAD,CAAWoF,eAAa,IACrB,gBAAGC,EAAH,EAAGA,MAAH,OACC,kBAACC,GAAA,EAAD,CACEC,OAAQ,IACRF,MAAOA,EACPnB,KAAMA,EACND,KAAMA,QChGTuB,G,oKAKG,IAAD,OACJ,MAAO,CACL1C,MAAO,kBACP2C,IAAK,YACLC,OAAQ,kBACN,kBAAC,KAAD,CAAOtT,MAAO,CAAEuT,QAAS,cACvB,kBAAC,GAAD,CACEpC,MAAO,EAAKxO,MAAMoG,MAAMC,WACxBwK,IAAK,EAAK7Q,MAAMoG,MAAM0K,SACtB5C,QAAS,EAAKC,0B,GAdCjP,KAArBuR,GACGrQ,aAAe,CACpB+N,iBAAkBnB,IAoBPyD,UCYTM,G,4HAAwBC,KAAxBD,GACGE,YAAc,CAEnB1R,UAAWnG,EACX8X,WAAYnE,KACZoE,UAAWtH,GACXuH,MAAOzZ,EACP6T,eAAgBpB,GAChB6B,gBAAiB3P,EAGjB+U,YAAa/Q,EAEbgR,WAAY7T,EAEZ8T,eAAgBC,KAChBC,WAAYC,KACZC,YAAaC,KACbC,aAAcC,KACdC,oBAAqBlQ,EACrBmQ,eAAgB7M,EAChB8M,iBAAkBjR,EAClBkR,aAAc3J,GACd4J,oBAAqB9O,EACrB+O,qBAAsB3N,EACtByH,QAASvD,GACTZ,4BAA6B/B,EAC7BqM,eAAgBvK,EAChBwK,YAAa1M,EACbuG,WAAYhN,EACZoT,gBAAiBnJ,GACjBoJ,aAAc9I,GAEdyE,iBAAkBnB,GAClByF,iBAAkBpF,GAClBqF,aAAcjC,GACdkC,eAAgBC,KAChBC,UAAW/G,GACXgH,YAAaC,MAKFhC,c,iCCpFf,oBAuBeiC,IAXK,SAAC,GAAD,IAAGpF,EAAH,EAAGA,MAAOqF,EAAV,EAAUA,SAAUjQ,EAApB,EAAoBA,UAApB,OAClB,yBAAKA,UAAS,0BAAqBA,GAAa,KAC9C,+BACG4K,GAEH,yBAAK5K,UAAU,SACZiQ,M,oLClBQ,SAASC,EAAgBlL,GACtC,IAAMmL,EAAG,YAAOnL,GAChBmL,EAAIC,MAAK,SAACxL,EAAGC,GAAJ,OAAUD,EAAIC,KAEvB,IAAMwL,EAAOzE,KAAKC,MAAMsE,EAAI9O,OAAS,GAErC,OAAI8O,EAAI9O,OAAS,EACR8O,EAAIE,IAEHF,EAAIE,EAAO,GAAKF,EAAIE,IAAS,ECT1B,SAASlW,EAAQ6K,GAC9B,OAAOA,EAAOL,QAAO,SAAC2L,EAAGC,GAAJ,OAAUD,EAAIC,IAAG,GAAKvL,EAAO3D,OCDrC,SAASmP,EAASxL,GAC/B,OAAOA,EAAO3D,OAAS2D,EAAOL,QAAO,SAAC8L,EAAKC,GAAN,OAAcD,EAAM,EAAEC,IAAK,GCU3D,IAGKC,EAHCC,EAAcC,IAAMC,eAAc,SAACpG,Q,SAGpCiG,K,kBAAAA,E,gBAAAA,E,kBAAAA,E,gBAAAA,E,cAAAA,E,qBAAAA,M,KAiIG3I,IA1GF,SAACH,GAAkB,IAAD,EAEHkJ,mBAAgB,CAACC,wBAAyB,GAAIC,YAAa,EAAGC,QAAQ,EAAMC,UAAU,IAFnF,mBAEtBC,EAFsB,KAEfC,EAFe,KAKvBC,EAA2BC,uBAAY,SAACvM,GAA0D,IAAxC3K,EAAuC,uDAA/BsW,EAAmBa,QAKzF,OAAQnX,GACN,KAAKsW,EAAmBa,QACtB,OAAO5F,KAAK6F,IAAIvB,EAAgBlL,GAAS7K,EAAQ6K,IACnD,KAAK2L,EAAmBe,OACtB,OAAOxB,EAAgBlL,GACzB,KAAK2L,EAAmBgB,QACtB,OAAOxX,EAAQ6K,GACjB,KAAK2L,EAAmBiB,OACtB,OAAOhG,KAAK6F,IAAL,MAAA7F,KAAI,YAAQ5G,IACrB,KAAK2L,EAAmBkB,MACtB,OAAO7M,EAAO,GAChB,KAAK2L,EAAmBmB,SACtB,OAAOtB,EAASxL,GAClB,QACE,MAAM,IAAI+M,MAAJ,yBAA4B1X,OAErC,IAuBK4N,EAA8CJ,EAA9CI,KAAgB+J,EAA8BnK,EAAxCoI,SAAwB/H,EAAgBL,EAAhBK,YAEtC,IAAK8J,GAAiBzO,MAAM0O,QAAQD,KAAkBA,EAAaE,MArB5C,SAACC,GACtB,SAAItB,IAAMuB,eAAeD,MAArB,OAA+BA,QAA/B,IAA+BA,OAA/B,EAA+BA,EAAOtK,WAqB1C,OAAO,KAOT,OACE,kBAAC+I,EAAYyB,SAAb,CAAsB3H,MAtBU,SAAC6F,GAEjCc,GAAS,SAACiB,GACR,IAAMtB,EAAyD,sBAAOsB,EAAUtB,yBAAjB,CAA0CT,IACnGU,EAAcD,EAAwB3P,OAAS,EAAIiQ,EAAyBN,EAAyBnJ,EAAM0K,mBAAqB,EAChIrB,EAASD,EAAc,KAE7B,MAAO,CAACD,0BAAyBC,YAAaA,EAAaC,SAAQC,UADjDD,QAiBlB,kBAAC,IAAD,CACEsB,QAAQ,KACRxS,UAAWoR,EAAMF,OAAS,SAAW,SACrCuB,gBATkB,WACtBpB,GAAS,SAAAiB,GAAS,kCAASA,GAAT,IAAoBnB,UAAWmB,EAAUnB,eASvDA,SAAUC,EAAMD,SAChBuB,OACE,yBAAK1S,UAAU,iBACb,yBAAKA,UAAU,kBACZiI,GAEH,yBAAKjI,UAAU,iBACb,yBAAKA,UAAU,kBACb,yBACEA,UAAU,WACV3F,MAAO,CACLiT,MAAM,GAAD,OAAyB,IAApB8D,EAAMH,YAAX,KACL0B,gBAAiBC,YAAoBxB,EAAMH,kBAKnD,yBAAKjR,UAAU,oBACb,6BACE,kBAAC6S,EAAA,EAAD,UAMP3K,GACC,yBAAKlI,UAAU,8BACb,kBAAC8S,EAAA,EAAD,MACA,yBAAK9S,UAAU,aACZkI,IAIP,yBAAKlI,UAAU,OACZgS,O,kJChHL1J,E,kDAEJ,WAAYT,GAAe,IAAD,6BACxB,cAAMA,GACNA,EAAMkL,eAAe,EAAK9B,aAFF,E,mEASHtJ,GACrB,OAAQA,EAAWtN,OACjB,KAAKC,IAAeC,WAClB,MAAM,GAAN,OAAUR,YAAiB4N,EAAWhO,QAAtC,KACF,KAAKW,IAAe6C,OAClB,MAAM,GAAN,OAAUN,YAAa8K,EAAWhO,SACpC,KAAKW,IAAe0Y,UAClB,MAAM,GAAN,OAAUC,YAAgBtL,EAAWhO,SACvC,KAAKW,IAAe4L,QAClB,MAAM,GAAN,OAAUyB,EAAWhO,OAAOoM,QAAQ,IACtC,KAAKzL,IAAe4Y,QAClB,OAAOvL,EAAWhO,OAAS,kBAAC,QAAD,CAAOzE,GAAG,eAA2B,kBAAC,QAAD,CAAOA,GAAG,cAC5E,KAAKoF,IAAe6Y,QAClB,MAAM,GAAN,OAAUxL,EAAWhO,OAAOoM,QAAQ,GAApC,KACF,QACE,MAAM,IAAIgM,MAAJ,yBAA4BpK,EAAWtN,W,+BAIzC,IAAD,EAC6DxF,KAAKgT,MAAjEI,EADD,EACCA,KAAMN,EADP,EACOA,WAAYjL,EADnB,EACmBA,QAAS0W,EAD5B,EAC4BA,aAAcC,EAD1C,EAC0CA,OAAQC,EADlD,EACkDA,OAEnDrC,EAAcpc,KAAKoc,YACrBsC,OAAMhR,EACJiR,EAAc7L,OACGpF,IAApBiR,EAAYD,MACbA,EAAG,YAAQC,EAAYD,MAEzB,IAAM5Z,EACJ,oCACG0Z,EADH,IACYxe,KAAK4e,uBAAuB9L,GADxC,IACsD4L,EADtD,IAC4DD,GAI9D,OACE,yBAAKtT,UAAU,YACb,yBAAKA,UAAU,QACb,yBAAKA,UAAU,aACZiI,GAEFvL,GACC,yBACEsD,UAAU,WACV3F,MAAO,CAAEqZ,WAAY,KAErB,kBAACC,EAAA,EAAD,CAASC,QAASlX,GAChB,6BACE,kBAACoW,EAAA,EAAD,SAKR,yBAAK9S,UAAU,qCAAqC3F,MAAO,CAAEwZ,SAAU,GAAIH,WAAY,EAAGI,YAAa,KACrG,yBAAK9T,UAAU,aAAa3F,MAAO,CAAEiT,MAAO,SACzC8F,EAAe,kBAACO,EAAA,EAAD,CAAgBC,QAASR,GAAezZ,GAA2BA,IAGvF,yBAAKqG,UAAU,0BAA0B3F,MAAO,CAAEiT,MAAO,KACvD,yBAAKtN,UAAU,6BACb,yBACEA,UAAU,wBACV3F,MAAO,CACLiT,MAAM,GAAD,OAAmB,IAAd2D,EAAL,KACL8C,WAAY,yBACZpB,gBAAiBC,YAAoB3B,Y,kCAnEnD,OCSW,SAAkCtJ,GAC/C,GAAIA,EAAWzK,cACb,MAAwC,kBAA7ByK,EAAWzK,cAjB1B,SAA6CvD,EAA7C,GAAiF,IAA1BO,EAAyB,EAAzBA,MAAOC,EAAkB,EAAlBA,QAASC,EAAS,EAATA,MACrE,OAAIT,EAASS,EAEJ,KAAQA,EAAQT,EACdA,EAASQ,EAEX,MAAkBR,EAASQ,IAAYC,EAAQD,GAAvC,KACNR,EAASO,EAEX,GAAcP,EAASO,IAAUC,EAAUD,GAAvC,KAGJ,EAME8Z,CAAoCrM,EAAWhO,OAAQgO,EAAWzK,eAElEyK,EAAWzK,cAAgByK,EAAWhO,OAE1C,GAAIgO,EAAW1N,WACpB,MAAqC,kBAA1B0N,EAAW1N,WAtC1B,SAA0CN,EAA1C,GAA8E,IAA1BO,EAAyB,EAAzBA,MAAOC,EAAkB,EAAlBA,QAASC,EAAS,EAATA,MAClE,OAAIT,EAASS,EAEJ,KAAQT,EAASS,EACfT,EAASQ,EAEX,MAAkBR,EAASS,IAAUD,EAAUC,GAAvC,KACNT,EAASO,EAEX,MAAkBP,EAASQ,IAAYD,EAAQC,GAAvC,KAGR,EA2BE8Z,CAAiCtM,EAAWhO,OAAQgO,EAAW1N,YAE/D0N,EAAWhO,OAASgO,EAAW1N,WAEnC,QAA2BsI,IAAvBoF,EAAWuM,QACpB,OAAOvM,EAAWhO,SAAWgO,EAAWuM,QAAU,EAAI,EAEtD,MAAM,IAAInC,MAAM,sCDzBToC,CAAyBtf,KAAKgT,MAAMF,gB,GARrBkJ,IAAMuD,eAsFjB,aAACvM,GAAD,OACb,kBAACG,EAAA,EAAYqM,SAAb,MACG,SAACtB,GAAD,OACC,kBAAC,EAAD,iBACMlL,EADN,CAEEkL,eAAgBA,U,mEEvFTjK,IAtBG,SAAAjB,GAAU,IAClBoI,EAAapI,EAAboI,SAER,OACE,wBAAIjQ,UAAU,cACViQ,GACA,4BACE,yBAAKjQ,UAAU,sBACb,kBAAC,QAAD,CAAO9K,GAAG,oCAAV,YAAoG,uBAAGiT,KAAK,+CAAsE,uBAAGA,KAAK,oCAK/L8H,K,4GCZDpH,E,yLAOwB,IAClBlB,EAAe9S,KAAKgT,MAApBF,WAER,OACE,oCACE,kBAAC,IAAD,CACEM,KAAM,kBAAC,QAAD,CAAO/S,GAAG,wDAChByS,WAAYA,EAAW2M,cAEzB,kBAAC,IAAD,CACErM,KAAM,kBAAC,QAAD,CAAO/S,GAAG,mEAChByS,WAAYA,EAAW4M,oB,kDAKF,IACnB5M,EAAe9S,KAAKgT,MAApBF,WAER,OACE,oCACE,kBAAC,IAAD,CACEM,KAAM,kBAAC,QAAD,CAAO/S,GAAG,gDAChByS,WAAYA,EAAW6M,iBAEzB,kBAAC,IAAD,CACEvM,KAAM,kBAAC,QAAD,CAAO/S,GAAG,oDAChByS,WAAYA,EAAW8M,wB,4DAKQ,IAC7B9M,EAAe9S,KAAKgT,MAApBF,WAER,OACE,oCACE,kBAAC,IAAD,CACEM,KAAM,kBAAC,QAAD,2CACNN,WAAYA,EAAW+M,kBAEzB,kBAAC,IAAD,CACEzM,KAAM,kBAAC,QAAD,+CACNN,WAAYA,EAAWgN,4B,gDAKJ,IACjBhN,EAAe9S,KAAKgT,MAApBF,WACR,OACE,oCACE,kBAAC,IAAD,CACEM,KAAM,kBAAC,QAAD,CAAO/S,GAAG,gDAChByS,WAAYA,EAAWiN,qBAEzB,kBAAC,IAAD,CACE3M,KAAM,kBAAC,QAAD,CAAO/S,GAAG,4CAChByS,WAAYA,EAAWkN,kB,+CAKL,IAChBlN,EAAe9S,KAAKgT,MAApBF,WACR,OACE,oCACE,kBAAC,IAAD,CACEM,KAAM,kBAAC,QAAD,CAAO/S,GAAG,+CAChByS,WAAYA,EAAWmN,oBAEzB,kBAAC,IAAD,CACE7M,KAAM,kBAAC,QAAD,CAAO/S,GAAG,2CAChByS,WAAYA,EAAWoN,iB,+BAMrB,IACA9E,EAAapb,KAAKgT,MAAlBoI,SAER,OACE,kBAAC,IAAD,CACEhI,KAAM,kBAAC,QAAD,CAAO/S,GAAG,mDAChBgT,YAAa,kBAAC,QAAD,CAAOhT,GAAG,2DAEtBL,KAAKmgB,4BACLngB,KAAKogB,sCACLpgB,KAAKqgB,2BACLrgB,KAAKsgB,0BACLtgB,KAAKugB,yBACLnF,O,GAnGqBY,IAAMuD,eAyGrBvL,O,mHCnGTf,E,uKA2DM,IAAD,EAC4BjT,KAAKgT,MAAhCxR,EADD,EACCA,MAAO4R,EADR,EACQA,KAASrL,EADjB,gCAGD+K,EAAa9S,KAAK8S,WACxB,OAAKA,EAKH,kBAAC,IAAD,eACEM,KAAMA,GAAQ,kBAAC,IAAD,CAAW/S,GAAImB,IAC7BsR,WAAYA,GACR/K,IAPC,O,iCA/CT,IAAK/H,KAAKgT,MAAM1Q,eAEd,OADAke,YAAiB,IAAItD,MAAJ,6GAAgHld,KAAKgT,MAAMxR,SACrI,KAGT,GAAGxB,KAAKgT,MAAMyN,WAAY,CAAC,IAAD,EAIpBzgB,KAAKgT,MAAM1Q,eAFb8O,EAFsB,EAEtBA,MACAsP,EAHsB,EAGtBA,SAGF,MAAO,CACL5b,OAAQsM,EACRsN,IAAKgC,EACLtb,WAAY,CACVC,MAAOqb,EACPpb,QAASob,EAAW,EACpBnb,MAAOmb,EAAW,GAEpBlb,MAAO,UAEH,IAAD,EAODxF,KAAKgT,MAAM1Q,eALbyP,EAFG,EAEHA,WAOF,MAAO,CACLjN,OAVG,EAGH6b,YAOsB,EAAI5O,EAC1B3M,WAAY,CACVC,MAZC,EAIH7C,sBASE8C,QAbC,EAKHsb,uBASErb,MAdC,EAMHsb,sBAUArb,MAAO,kB,GAtDgCwW,IAAMuD,eA6EtCtM,O,4FC7DTsC,E,kDAsBJ,WAAY1P,GAAkB,IAAD,8BAC3B,cAAMA,IAhBEib,kBAemB,IAb7B3J,QAAU,EAamB,EAZ7BN,gBAAoC,GAYP,EAT7BkK,YAA6C,GAShB,EAR7BC,YAA6C,GAQhB,EAL7B3L,cAK6B,IAF7BC,iBAE6B,EAE3B,EAAKrP,iBAAiBC,IAAOC,SAAS8a,GAAGnY,KAAkB,EAAKoY,YAChE,EAAKjb,iBAAiBC,IAAOqE,KAAK1B,GAAGC,KAAkB,EAAKgJ,QAHjC,E,+DAaV5R,GACjBF,KAAK+gB,YAAY7gB,GAAW,CAAEsW,UAAW,EAAGd,OAAQ,EAAGtE,MAAO,K,yCAE7ClR,GACjBF,KAAKghB,YAAY9gB,GAAW,CAAEihB,MAAO,EAAGC,YAAa,GAAIhQ,MAAO,K,iCAIvD9K,GACT,IAAMpG,EAAUoG,EAAMwE,QAAQC,KAE9B,GAAGzE,EAAM+a,qBAAuBrhB,KAAKqV,SAAShV,GAA9C,CAIA,IAAM+W,EAAQ9Q,EAAM8Q,MACdkK,EAAOhb,EAAMC,eAAiB6Q,EACpCpX,KAAKuhB,cAAcrhB,EAASohB,EAAMlK,EAAOpX,KAAKwhB,YAAYlb,GAAQA,EAAMqE,c,+CAYjDzK,EAAiBkH,GACxC,IAAMqa,OAA+B/T,IAArB1N,KAAKsV,YAA4BtV,KAAKsV,YAActV,KAAKmX,QAAU/P,EAC7Eka,EAAOvK,KAAK6F,IAAIxV,EAAQqa,GACxBrK,EAAQL,KAAK2H,IAAItX,EAASqa,EAAS,GACzCzhB,KAAKuhB,cAAcrhB,EAASohB,EAAMlK,K,oCAGtBlX,EAAiBohB,EAAclK,EAAgB/B,EAA2B1K,GACjF3K,KAAK+gB,YAAY7gB,IAClBF,KAAK0hB,mBAAmBxhB,GAG5BF,KAAK+gB,YAAY7gB,GAASwV,QAAU0B,EACpCpX,KAAK+gB,YAAY7gB,GAASsW,WAAa8K,EACvCthB,KAAK+gB,YAAY7gB,GAASkR,OAAS,EAGlB,OAAbiE,QAAkC3H,IAAb2H,QAA8C3H,IAApB2H,EAASjO,QAC1DpH,KAAKmX,QAAU9B,EAASjO,YACHsG,IAAjB2H,EAASqJ,MACX1e,KAAKsV,YAAcD,EAASqJ,MAG9B1e,KAAKmX,SAAWmK,EAGlBthB,KAAK6W,gBAAgBxH,KAAK,CACxB1E,UAAWA,EACXwM,QAASnX,KAAKmX,QACdC,MAAOA,EACPZ,UAAW8K,EACXK,KAAM,M,6BAKHrb,GACL,IAAMpG,EAAUoG,EAAMwE,QAAQC,KAE9B,GAAI/K,KAAK4hB,uBAAuBtb,GAAhC,CAGA,IAAMub,EAAgB7hB,KAAKwhB,YAAYlb,GAEvC,GAAIub,EAAJ,CAIIA,EAAcnD,MAChB1e,KAAKsV,YAAcuM,EAAcnD,KAEnC,IAAMoD,EAAO9hB,KAAK+hB,eAAezb,GAE5BtG,KAAKghB,YAAY9gB,IACpBF,KAAKgiB,mBAAmB9hB,GAGrB4hB,GAAiB,IAATA,IAIb9hB,KAAKghB,YAAY9gB,GAASkR,OAAS,EACnCpR,KAAKghB,YAAY9gB,GAASkhB,YAAY/R,KAAKyS,GACxCA,EAAO,IACR9hB,KAAKghB,YAAY9gB,GAASihB,OAASW,GAIrC9hB,KAAKmX,QAAU0K,EAAcza,OAAS0a,EAEtC9hB,KAAK6W,gBAAgBxH,KAAK,CACxB1E,UAAWrE,EAAMqE,UACjBwM,QAASnX,KAAKmX,QACdC,MAAO,EACPZ,UAAW,EACXmL,KAAME,EAAcza,SAGtBpH,KAAKiiB,kBAAkBH,EAAMxb,Q,qCAIhBA,GAAmB,IAAD,EAC/B,OAAIA,EAAM4b,mBAAyDxU,IAAzCpH,EAAM4b,aAAaliB,KAAKqV,SAAShV,IAClDiG,EAAM4b,aAAaliB,KAAKqV,SAAShV,IAE1C,UAAOL,KAAKwhB,YAAYlb,UAAxB,aAAO,EAAyBwb,O,kCAGtBxb,GAAgD,IAAD,OACzD,OAAIA,EAAM6b,eAGD7b,EAAM6b,eAAeC,MAAK,SAAAC,GAAC,OAAIA,EAAE/S,OAAS,EAAK+F,SAAShV,WAF/D,I,wCAMc8gB,EAAe7a,GAE/B,IAAMgc,EAAsC,CAC1ChT,KAAMC,IAAUgT,cAChB5X,UAAWrE,EAAMqE,UACjB6X,SAAUlc,EAAMkc,SAChBC,SAAUnc,EAAMmc,SAChBlc,eAAgB4a,EAChBE,mBAAoBrhB,KAAKqV,SAAShV,GAClCyK,QAASxE,EAAMwE,QACf4X,cAAc,GAGhB1iB,KAAK8gB,aAAa6B,eAAeL,EAAiBhc,K,6CAG7BA,GACrB,OAAOsc,QAAQ5iB,KAAKwhB,YAAYlb,M,0CAGdpG,GAClB,OAAQF,KAAK+gB,YAAY7gB,IAAYF,KAAK+gB,YAAY7gB,GAASsW,WAAc,I,uCAG9DtW,GACf,OAAQF,KAAK+gB,YAAY7gB,IAAYF,KAAK+gB,YAAY7gB,GAASwV,QAAW,I,6CAGrDxV,GACrB,OAAQF,KAAK+gB,YAAY7gB,IAAYF,KAAK+gB,YAAY7gB,GAASkR,OAAU,I,gCAIzE,OAAOpQ,OAAOmP,OAAOnQ,KAAK+gB,aAAajR,QAAO,SAAC+S,EAAKrhB,GAAN,OAAgBqhB,EAAMrhB,EAAMgV,YAAW,K,6BAIrF,OAAOxV,OAAOmP,OAAOnQ,KAAK+gB,aAAajR,QAAO,SAAC+S,EAAKrhB,GAAN,OAAgBqhB,EAAMrhB,EAAMkU,SAAQ,K,4BAIlF,OAAO1U,OAAOmP,OAAOnQ,KAAKghB,aAAalR,QAAO,SAAC+S,EAAKrhB,GAAN,OAAgBqhB,EAAMrhB,EAAM2f,QAAO,K,oCAIjF,OAAOngB,OAAOmP,OAAOnQ,KAAKghB,aAAalR,QAAO,SAAC+S,EAAKrhB,GAAN,OAAgBqhB,EAAMrhB,EAAM4P,QAAO,O,GA9MvD/J,KAAxBkO,EACGhN,aAAe,CACpBuY,aAAcgC,KAgNHvN,O,0GClOTa,E,+KAEa2K,GACf,OAAO/f,OAAOC,KAAK8f,GAChB5f,KAAI,SAAA4hB,GAAS,MAAK,CACjBA,UAAW1hB,OAAO0hB,GAClBvM,UAAWuK,EAAY1f,OAAO0hB,IAAYvM,UAC1Cd,OAAQqL,EAAY1f,OAAO0hB,IAAYrN,WAExC6F,MAAK,SAACxL,EAAGC,GAAJ,OAAUA,EAAEwG,UAAYzG,EAAEyG,aAC/BpK,QAAO,SAAAtB,GAAO,OAAIA,EAAQ0L,UAAY,GAAK1L,EAAQ4K,Y,mCAG3CsL,GACX,OAAOhgB,OAAOC,KAAK+f,GAChB7f,KAAI,SAAA4hB,GAAS,MAAK,CACjBA,UAAW1hB,OAAO0hB,GAClB5B,MAAOH,EAAY3f,OAAO0hB,IAAY5B,MACtC/P,MAAO4P,EAAY3f,OAAO0hB,IAAY3R,UAEvCmK,MAAK,SAACxL,EAAGC,GAAJ,OAAUA,EAAEmR,MAAQpR,EAAEoR,SAC3B/U,QAAO,SAAAtB,GAAO,OAAIA,EAAQqW,MAAQ,O,+BAG7B,IAAD,EAC2BnhB,KAAKgT,MAA/BqD,EADD,EACCA,QAASE,EADV,EACUA,aACXyM,EAAe3M,EAAQhB,SAASjC,KAEhCoD,EAAYxW,KAAKijB,iBAAiB5M,EAAQ0K,aAC1CI,EAAQnhB,KAAKkjB,aAAa7M,EAAQ2K,aAEpCmC,EAAiB9M,EAAQG,UACzB4M,EAAc/M,EAAQX,OAEtB2N,EAAahN,EAAQ8K,MACrBxO,EAAa0D,EAAQiN,cASzB,OANAH,EAAqC,IAAnBA,EAAwB,EAAIA,EAC9CC,EAA+B,IAAhBA,EAAqB,EAAIA,EAExCC,EAA6B,IAAfA,EAAoB,EAAIA,EACtC1Q,EAA6B,IAAfA,EAAoB,EAAIA,EAGpC,oCACE,2BAAOxH,UAAU,cACf,+BACE,4BACE,uCACA,wBAAIoY,QAAS,GAAIP,EAAjB,cACA,wBAAIO,QAAS,GAAG,kBAAC,IAAD,CAAgBxE,QAAQ,sFAAsFiE,EAA9G,cAGpB,+BACGxM,GAAaA,EACXrV,KAAI,SAAA2J,GAAO,OACV,wBAAIb,IAAKa,EAAQiY,WACf,wBAAIvd,MAAO,CAAEiT,MAAO,QAClB,kBAAC,IAAD,CAAWpY,GAAIyK,EAAQiY,aAEzB,wBAAIvd,MAAO,CAAEiT,MAAO,GAAI+K,aAAc,EAAGC,UAAW,WAClD,kBAAC,IAAD,CAAgB1E,QAAO,UAAK7Z,YAAiB4F,EAAQ0L,UAAY2M,GAA1C,OAAgErY,EAAQ0L,UAAUtF,QAAQ,KAEnH,wBAAI1L,MAAO,CAAEiT,MAAO,QAClB,yBACEtN,UAAU,kBACV3F,MAAO,CAAEiT,MAAM,GAAD,OAAM3N,EAAQ0L,UAAY2M,EAAkB,IAA5C,SAGlB,wBAAI3d,MAAO,CAAEiT,MAAO,GAAI+K,aAAc,EAAGC,UAAW,WAClD,kBAAC,IAAD,CAAgB1E,QAAO,UAAK7Z,YAAiB4F,EAAQ4K,OAAS0N,GAAvC,OAA0DtY,EAAQ4K,OAAOxE,QAAQ,KAE1G,wBAAI1L,MAAO,CAAEiT,MAAO,QAClB,yBACEtN,UAAU,kBACV3F,MAAO,CAAEiT,MAAM,GAAD,OAAM3N,EAAQ4K,OAAS0N,EAAe,IAAtC,eAO3B7M,GACC,2BAAOpL,UAAU,cACf,+BACE,4BACE,uCACA,wBAAIoY,QAAS,GAAIP,EAAjB,UACA,wBAAIO,QAAS,GAAb,WAGJ,+BACGpC,GAASA,EACPhgB,KAAI,SAAA2J,GAAO,OACV,wBAAIb,IAAKa,EAAQiY,WACf,wBAAIvd,MAAO,CAAEiT,MAAO,QAClB,kBAAC,IAAD,CAAWpY,GAAIyK,EAAQiY,aAEzB,wBAAIvd,MAAO,CAAEiT,MAAO,GAAI+K,aAAc,EAAGC,UAAW,WAClD,kBAAC,IAAD,CAAgB1E,QAAO,UAAK7Z,YAAiB4F,EAAQqW,MAAQkC,GAAtC,OAAwDvY,EAAQqW,MAAMjQ,QAAQ,KAEvG,wBAAI1L,MAAO,CAAEiT,MAAO,QAClB,yBACEtN,UAAU,kBACV3F,MAAO,CAAEiT,MAAM,GAAD,OAAM3N,EAAQqW,MAAQkC,EAAc,IAApC,SAGlB,wBAAI7d,MAAO,CAAEiT,MAAO,GAAI+K,aAAc,EAAGC,UAAW,WAClD,kBAAC,IAAD,CAAgB1E,QAAO,UAAK7Z,YAAiB4F,EAAQsG,MAAQuB,GAAtC,OAAwD7H,EAAQsG,QAEzF,wBAAI5L,MAAO,CAAEiT,MAAO,QAClB,yBACEtN,UAAU,kBACV3F,MAAO,CAAEiT,MAAM,GAAD,OAAM3N,EAAQsG,MAAQuB,EAAc,IAApC,oB,GAlHNqJ,IAAMxH,WA+HvB4B,O,iCC5IA,SAAS2H,EAAoB3B,GAC1C,OAAIA,GAAe,EACV,UACEA,EAAc,KAChB,UACEA,EAAc,GAChB,UACEA,EAAc,KAChB,UAEA,UAVX,mC,iCCAA,oBAUexG,IANF,SAAC,GAAD,IAAM8N,EAAN,2BACX,uCAAKC,MAAM,6BAA6BC,QAAQ,WAAWzY,UAAU,QAAWuY,GAC5E,0BAAMG,EAAE,mU,mJCQDC,G,OAAa,SAAC9Q,GAAsD,IAAD,EAC9CkJ,oBAAkB,GAD4B,mBACvEI,EADuE,KAC7DyH,EAD6D,KAMtElG,EAAkD7K,EAAlD6K,OAAQzC,EAA0CpI,EAA1CoI,SAAmB4I,EAAuBhR,EAAhC2K,QAAkBxS,EAAc6H,EAAd7H,UAE5C,OACE,kBAAC6Y,EAAD,CAAS7Y,UAAS,qBAAgBmR,EAAW,WAAa,GAAxC,YAA8CnR,GAAa,KAC3E,yBAAKA,UAAU,OAAO8Y,QARL,WACnBF,GAAY,SAACG,GAAD,OAA4BA,OAQnCrG,GAEH,kBAAC,IAAD,CAAe1S,UAAU,UAAUwN,OAAQ2D,EAAW,OAAS,GAC5DlB,MAMI+I,EAAuB,SAACnR,GAAmB,IAC9C6K,EAAkD7K,EAAlD6K,OAAQzC,EAA0CpI,EAA1CoI,SAAmB4I,EAAuBhR,EAAhC2K,QAAkBxS,EAAc6H,EAAd7H,UAE5C,OACE,kBAAC6Y,EAAD,CAAS7Y,UAAS,qBAAgB6H,EAAMsJ,SAAW,WAAa,GAA9C,YAAoDnR,GAAa,KACjF,yBAAKA,UAAU,OAAO8Y,QAASjR,EAAM4K,iBAClCC,GAEH,kBAAC,IAAD,CAAe1S,UAAU,UAAUwN,OAAQ3F,EAAMsJ,SAAW,OAAS,GAClElB,M,6EC3CT,8CAMO,SAAS3L,EAAcnJ,GAC5B,OAAQA,EAAMgJ,MACZ,KAAKC,IAAU6U,WACf,KAAK7U,IAAU8U,aACb,OAAO,EACT,KAAK9U,IAAU+U,UACf,KAAK/U,IAAUgV,YACb,OAAO,EACT,KAAKhV,IAAUiV,eACf,KAAKjV,IAAUkV,gBACf,KAAKlV,IAAUmV,iBACf,KAAKnV,IAAUoV,kBACb,OAAOre,EAAMse,MAEjB,MAAM,IAAI1H,MAAM,0C,0KCCZ3K,E,kDAaJ,WAAY1M,GAAkB,IAAD,8BAC3B,cAAMA,IAbR6M,eAAiB,EAYY,EAX7BmS,cAAgB,EAWa,EAV7BC,oBAA6CpX,EAUhB,EAT7BqX,gBAA0B,EASG,EAR7BC,mBAKI,GAGyB,EAF7BC,kBAA8B,GAI5B,EAAKhf,iBAAiBC,IAAOgf,UAAUrc,GAAGC,KAAkB,EAAKqc,aACjE,EAAKlf,iBAAiBC,IAAOqE,KAAK1B,GAAGC,KAAkB,EAAKgJ,QAC5D,EAAK7L,iBAAiBC,IAAOkJ,SAAU,EAAKgW,YAJjB,E,wDAOjB9e,GACV,IAAMpG,EAAUoG,EAAMwE,QAAQC,KAC1B/K,KAAKilB,kBAAkB3a,SAASpK,IAAYmlB,IAAuB/a,SAASpK,IAAYolB,IAA8Bhb,SAASpK,KAG/HF,KAAK+kB,qBAA0CrX,IAAxB1N,KAAK8kB,gBAC9Bxe,EAAMqE,UACN3K,KAAK8kB,eAAena,UA7BR,MA+BZ3K,KAAK0S,gBAAkB,EACvB1S,KAAKulB,sBAEPvlB,KAAK8kB,eAAiBxe,EACtBtG,KAAK+kB,gBAAiB,K,6BAGjBze,GACL,IAAMpG,EAAUoG,EAAMwE,QAAQC,KACxBya,EAAmBxlB,KAAK8kB,gBAAkB9kB,KAAK8kB,eAAeha,QAChE9K,KAAKilB,kBAAkB3a,SAASpK,IAAYmlB,IAAuB/a,SAASpK,IAAYolB,IAA8Bhb,SAASpK,KAAaslB,IAG5IA,EAAiBza,OAAS7K,GAAWF,KAAK+kB,iBAC5C/kB,KAAK0S,gBAAkB,EACvB1S,KAAKulB,sBAEHC,EAAiBza,OAAS7K,GAAWF,KAAK+kB,iBAC5C/kB,KAAK6kB,eAAiB,GAExB7kB,KAAK+kB,gBAAiB,K,2CAItB,GAAK/kB,KAAK8kB,eAAV,CAGA,IAAMU,EAAmBxlB,KAAK8kB,eAAeha,QACxC9K,KAAKglB,mBAAmBQ,EAAiBza,MAM5C/K,KAAKglB,mBAAmBQ,EAAiBza,MAAM3D,QAAU,EALzDpH,KAAKglB,mBAAmBQ,EAAiBza,MAAQ,CAC/C,UAAaya,EAAiBpS,KAC9B,OAAU,M,wEA2Cd,OACE,kBAAC,IAAD,CACE3M,SAAUC,IAAgB+L,KAAK,IAC/B7L,KAAK,QACLuE,UAAU,QACVtD,QACE,gDACY7H,KAAK2S,WADjB,WAEE,4BACE,4BAAK3S,KAAK6kB,cAAV,yBACA,4BAAK7kB,KAAK0S,eAAV,4BAKN,kBAAC,IAAD,CAAiBqD,MAAM,mBACrB,kBAAC,IAAD,MADF,IACiB7Q,YAAiBlF,KAAKylB,qBADvC,KAC8D,sD,iCAnDlE,OAAOzlB,KAAK0S,eAAiB1S,KAAK6kB,gB,0CAIlC,OAAO7kB,KAAK0S,eAAiB1S,KAAK2S,a,wDAIlC,MAAO,CACL7N,OAAQ9E,KAAKylB,oBACbpd,cAAe,CACbhD,MAAO,IACPC,QAAS,IACTC,MAAO,KAETC,MAAOC,IAAeC,gB,GAnFC2B,KA8HdkL","file":"static/js/ElementalShaman.76ebd53a.chunk.js","sourcesContent":["import SPELLS from 'common/SPELLS';\r\nimport CoreBuffs from 'parser/core/modules/Buffs';\r\nimport BLOODLUST_BUFFS from 'game/BLOODLUST_BUFFS';\r\n\r\nclass Buffs extends CoreBuffs {\r\n  buffs() {\r\n    const combatant = this.selectedCombatant;\r\n\r\n    // This should include ALL buffs that can be applied by your spec.\r\n    // This data can be used by various kinds of modules to improve their results, and modules added in the future may rely on buffs that aren't used today.\r\n    return [\r\n      {\r\n        spellId: SPELLS.ICEFURY_TALENT.id,\r\n        timelineHighlight: true,\r\n      },\r\n      {\r\n        spellId: SPELLS.FIRE_ELEMENTAL.id,\r\n        timelineHighlight: true,\r\n      },\r\n      {\r\n        spellId: SPELLS.MASTER_OF_THE_ELEMENTS_BUFF.id,\r\n        enabled: combatant.hasTalent(SPELLS.MASTER_OF_THE_ELEMENTS_TALENT.id),\r\n        timelineHighlight: true,\r\n      },\r\n      {\r\n        spellId: SPELLS.SURGE_OF_POWER_BUFF.id,\r\n        enabled: combatant.hasTalent(SPELLS.SURGE_OF_POWER_TALENT.id),\r\n        timelineHighlight: true,\r\n      },\r\n      {\r\n        spellId: SPELLS.STORMKEEPER_TALENT.id,\r\n        triggeredBySpellId: SPELLS.STORMKEEPER_TALENT.id,\r\n        timelineHighlight: true,\r\n      },\r\n      {\r\n        spellId: Object.keys(BLOODLUST_BUFFS).map(item => Number(item)),\r\n        timelineHighlight: true,\r\n      },\r\n    ];\r\n  }\r\n}\r\n\r\nexport default Buffs;\r\n","import SPELLS from 'common/SPELLS';\r\n\r\nimport CoreAbilities from 'parser/core/modules/Abilities';\r\nimport { SpellbookAbility } from 'parser/core/modules/Ability';\r\n\r\nclass Abilities extends CoreAbilities {\r\n  spellbook(): SpellbookAbility[] {\r\n    const combatant = this.selectedCombatant;\r\n    return [\r\n      {\r\n        spell: SPELLS.LAVA_BURST,\r\n        charges: combatant.hasTalent(SPELLS.ECHO_OF_THE_ELEMENTS_TALENT.id) ? 2 : 1,\r\n        cooldown: haste => 8 / (1 + haste),\r\n        category: Abilities.SPELL_CATEGORIES.ROTATIONAL,\r\n        gcd: {\r\n          base: 1500,\r\n        },\r\n      },\r\n      {\r\n        spell: SPELLS.LIGHTNING_BOLT,\r\n        category: Abilities.SPELL_CATEGORIES.ROTATIONAL,\r\n        gcd: {\r\n          base: 1500,\r\n        },\r\n      },\r\n      {\r\n        spell: SPELLS.LIQUID_MAGMA_TOTEM_TALENT,\r\n        category: Abilities.SPELL_CATEGORIES.ROTATIONAL_AOE,\r\n        gcd: {\r\n          base: 1500,\r\n        },\r\n        cooldown: 60,\r\n        enabled: combatant.hasTalent(SPELLS.LIQUID_MAGMA_TOTEM_TALENT.id),\r\n        castEfficiency: {\r\n          suggestion: true,\r\n          recommendedEfficiency: 0.9,\r\n        },\r\n      },\r\n      {\r\n        spell: SPELLS.CHAIN_LIGHTNING,\r\n        category: Abilities.SPELL_CATEGORIES.ROTATIONAL_AOE, // 2 / (1 + haste)\r\n        gcd: {\r\n          base: 1500,\r\n        },\r\n      },\r\n      {\r\n        spell: SPELLS.LAVA_BEAM,\r\n        category: Abilities.SPELL_CATEGORIES.ROTATIONAL_AOE,\r\n      },\r\n      {\r\n        spell: SPELLS.EARTHQUAKE,\r\n        category: Abilities.SPELL_CATEGORIES.ROTATIONAL_AOE,\r\n        gcd: {\r\n          base: 1500,\r\n        },\r\n      },\r\n      {\r\n        spell: SPELLS.ELEMENTAL_BLAST_TALENT,\r\n        category: Abilities.SPELL_CATEGORIES.ROTATIONAL,\r\n        enabled: combatant.hasTalent(SPELLS.ELEMENTAL_BLAST_TALENT.id),\r\n        cooldown: 12,\r\n        gcd: {\r\n          base: 1500,\r\n        },\r\n        castEfficiency: {\r\n          suggestion: true,\r\n          recommendedEfficiency: 0.6,\r\n        },\r\n      },\r\n      {\r\n        spell: SPELLS.ASCENDANCE_TALENT_ELEMENTAL,\r\n        category: Abilities.SPELL_CATEGORIES.COOLDOWNS,\r\n        cooldown: 180,\r\n        gcd: {\r\n          base: 1500,\r\n        },\r\n        enabled: combatant.hasTalent(SPELLS.ASCENDANCE_TALENT_ELEMENTAL.id),\r\n        castEfficiency: {\r\n          suggestion: true,\r\n          recommendedEfficiency: 0.9,\r\n        },\r\n      },\r\n      {\r\n        spell: SPELLS.FIRE_ELEMENTAL,\r\n        category: Abilities.SPELL_CATEGORIES.COOLDOWNS,\r\n        cooldown: 60 * 2.5,\r\n        gcd: {\r\n          base: 1500,\r\n        },\r\n        damageSpellIds: [SPELLS.FIRE_BLAST.id, SPELLS.METEOR_DAMAGE.id, SPELLS.FIRE_ELEMENTAL_IMMOLATE.id],\r\n        enabled: !combatant.hasTalent(SPELLS.STORM_ELEMENTAL_TALENT.id),\r\n        castEfficiency: {\r\n          suggestion: true,\r\n          recommendedEfficiency: 1.0,\r\n        },\r\n      },\r\n      {\r\n        spell: SPELLS.STORMKEEPER_TALENT,\r\n        category: Abilities.SPELL_CATEGORIES.COOLDOWNS,\r\n        cooldown: 60,\r\n        gcd: {\r\n          base: 1500,\r\n        },\r\n        enabled: combatant.hasTalent(SPELLS.STORMKEEPER_TALENT.id),\r\n        castEfficiency: {\r\n          suggestion: true,\r\n          recommendedEfficiency: 0.9,\r\n        },\r\n      },\r\n      {\r\n        spell: SPELLS.STORM_ELEMENTAL_TALENT,\r\n        category: Abilities.SPELL_CATEGORIES.COOLDOWNS,\r\n        cooldown: 60 * 2.5,\r\n        enabled: combatant.hasTalent(SPELLS.STORM_ELEMENTAL_TALENT.id),\r\n        damageSpellIds: [SPELLS.WIND_GUST.id, SPELLS.EYE_OF_THE_STORM.id, SPELLS.CALL_LIGHTNING.id],\r\n        castEfficiency: {\r\n          suggestion: true,\r\n          recommendedEfficiency: 0.9,\r\n        },\r\n      },\r\n\r\n      {\r\n        spell: SPELLS.FLAME_SHOCK,\r\n        category: Abilities.SPELL_CATEGORIES.ROTATIONAL,\r\n        cooldown: 6,\r\n        gcd: {\r\n          base: 1500,\r\n        },\r\n      },\r\n      {\r\n        spell: SPELLS.FROST_SHOCK,\r\n        category: Abilities.SPELL_CATEGORIES.ROTATIONAL,\r\n        gcd: {\r\n          base: 1500,\r\n        },\r\n      },\r\n      {\r\n        spell: SPELLS.ICEFURY_TALENT,\r\n        category: Abilities.SPELL_CATEGORIES.COOLDOWNS,\r\n        cooldown: 30,\r\n        gcd: {\r\n          base: 1500,\r\n        },\r\n        enabled: combatant.hasTalent(SPELLS.ICEFURY_TALENT.id),\r\n        castEfficiency: {\r\n          suggestion: true,\r\n          recommendedEfficiency: 0.8,\r\n        },\r\n      },\r\n      {\r\n        spell: SPELLS.EARTH_SHOCK,\r\n        category: Abilities.SPELL_CATEGORIES.ROTATIONAL,\r\n        gcd: {\r\n          base: 1500,\r\n        },\r\n      },\r\n      {\r\n        spell: SPELLS.CAPACITOR_TOTEM,\r\n        category: Abilities.SPELL_CATEGORIES.UTILITY,\r\n        gcd: {\r\n          base: 1500,\r\n        },\r\n        cooldown: 60, //misses Static Charge CDR\r\n      },\r\n      {\r\n        spell: SPELLS.ASTRAL_SHIFT,\r\n        buffSpellId: SPELLS.ASTRAL_SHIFT.id,\r\n        cooldown: 90,\r\n        category: Abilities.SPELL_CATEGORIES.DEFENSIVE,\r\n      },\r\n      {\r\n        spell: SPELLS.THUNDERSTORM,\r\n        category: Abilities.SPELL_CATEGORIES.UTILITY,\r\n        gcd: {\r\n          base: 1000,\r\n        },\r\n        cooldown: 45,\r\n      },\r\n      {\r\n        spell: SPELLS.TREMOR_TOTEM,\r\n        category: Abilities.SPELL_CATEGORIES.UTILITY,\r\n        gcd: {\r\n          base: 1500,\r\n        },\r\n      },\r\n      {\r\n        spell: SPELLS.WIND_SHEAR,\r\n        category: Abilities.SPELL_CATEGORIES.UTILITY,\r\n        cooldown: 12,\r\n        gcd: null,\r\n      },\r\n      {\r\n        spell: SPELLS.STATIC_DISCHARGE_TALENT,\r\n        category: Abilities.SPELL_CATEGORIES.ROTATIONAL,\r\n        cooldown: 30,\r\n        castEfficiency: {\r\n          suggestion: true,\r\n          recommendedEfficiency: 0.9,\r\n        },\r\n        enabled: combatant.hasTalent(SPELLS.STATIC_DISCHARGE_TALENT.id),\r\n        gcd: {\r\n          base: 1500,\r\n        },\r\n      },\r\n      {\r\n        spell: SPELLS.ECHOING_SHOCK_TALENT,\r\n        category: Abilities.SPELL_CATEGORIES.ROTATIONAL,\r\n        cooldown: 30,\r\n        castEfficiency: {\r\n          suggestion: true,\r\n          recommendedEfficiency: 0.9,\r\n        },\r\n        enabled: combatant.hasTalent(SPELLS.ECHOING_SHOCK_TALENT.id),\r\n        gcd: {\r\n          base: 1500,\r\n        },\r\n      },\r\n      {\r\n        spell: SPELLS.BLOODLUST,\r\n        category: Abilities.SPELL_CATEGORIES.COOLDOWNS,\r\n      },\r\n      {\r\n        spell: SPELLS.HEROISM,\r\n        category: Abilities.SPELL_CATEGORIES.COOLDOWNS,\r\n      },\r\n      {\r\n        spell: SPELLS.REINCARNATION,\r\n        category: Abilities.SPELL_CATEGORIES.OTHERS,\r\n      },\r\n    ];\r\n  }\r\n}\r\n\r\nexport default Abilities;\r\n","import CoreAlwaysBeCasting from 'parser/shared/modules/AlwaysBeCasting';\r\nimport { ThresholdStyle, When } from 'parser/core/ParseResults';\r\nimport SpellLink from 'common/SpellLink';\r\nimport SPELLS from 'common/SPELLS';\r\nimport { formatPercentage } from 'common/format';\r\nimport React from 'react';\r\n\r\nclass AlwaysBeCasting extends CoreAlwaysBeCasting {\r\n  get suggestionThresholds() {\r\n    return {\r\n      actual: this.activeTimePercentage,\r\n      isLessThan: {\r\n        minor: 0.95,\r\n        average: 0.85,\r\n        major: 0.75,\r\n      },\r\n      style: ThresholdStyle.PERCENTAGE,\r\n    };\r\n  }\r\n\r\n  suggestions(when: When) {\r\n    when(this.suggestionThresholds).addSuggestion((suggest, actual, recommended) => suggest(<>Your downtime can be improved. If you need to move use <SpellLink id={SPELLS.FLAME_SHOCK.id} />, <SpellLink id={SPELLS.EARTH_SHOCK.id} /> or <SpellLink id={SPELLS.FROST_SHOCK.id} /></>)\r\n      .icon('spell_mage_altertime')\r\n      .actual(`${formatPercentage(1 - actual)}% downtime`)\r\n      .recommended(`<${formatPercentage(1 - recommended)}% is recommended`));\r\n  }\r\n}\r\n\r\nexport default AlwaysBeCasting;\r\n","import React from 'react';\r\n\r\nimport SPELLS from 'common/SPELLS';\r\n\r\nimport Analyzer, { Options } from 'parser/core/Analyzer';\r\n\r\nimport { STATISTIC_ORDER } from 'interface/others/StatisticBox';\r\nimport Events, { EnergizeEvent } from 'parser/core/Events';\r\nimport Statistic from 'interface/statistics/Statistic';\r\nimport BoringSpellValueText from 'interface/statistics/components/BoringSpellValueText';\r\nimport STATISTIC_CATEGORY from 'interface/others/STATISTIC_CATEGORY';\r\nimport ResourceGenerated from 'interface/others/ResourceGenerated';\r\nimport RESOURCE_TYPES from 'game/RESOURCE_TYPES';\r\n\r\nclass Aftershock extends Analyzer {\r\n  refund = 0;\r\n\r\n  constructor(options: Options) {\r\n    super(options);\r\n    this.active = this.selectedCombatant.hasTalent(SPELLS.AFTERSHOCK_TALENT.id);\r\n\r\n    this.addEventListener(Events.energize.spell(SPELLS.AFTERSHOCK), this.onAftershock);\r\n  }\r\n\r\n  onAftershock(event: EnergizeEvent) {\r\n    this.refund += event.resourceChange;\r\n  }\r\n\r\n  statistic() {\r\n    return (\r\n      <Statistic\r\n        position={STATISTIC_ORDER.OPTIONAL()}\r\n        size=\"flexible\"\r\n        category={STATISTIC_CATEGORY.TALENTS}\r\n      >\r\n        <BoringSpellValueText spell={SPELLS.AFTERSHOCK_TALENT}>\r\n          <>\r\n            <ResourceGenerated resourceType={RESOURCE_TYPES.MAELSTROM} amount={this.refund} />\r\n          </>\r\n        </BoringSpellValueText>\r\n      </Statistic>\r\n    );\r\n  }\r\n}\r\n\r\nexport default Aftershock;\r\n","import React from 'react';\r\n\r\nimport SPELLS from 'common/SPELLS';\r\nimport { formatNumber, formatPercentage } from 'common/format';\r\n\r\nimport Analyzer, { Options } from 'parser/core/Analyzer';\r\nimport EnemyInstances from 'parser/shared/modules/EnemyInstances';\r\n\r\nimport { STATISTIC_ORDER } from 'interface/others/StatisticBox';\r\n\r\nimport Abilities from 'parser/shaman/elemental/modules/Abilities';\r\nimport Statistic from 'interface/statistics/Statistic';\r\nimport STATISTIC_CATEGORY from 'interface/others/STATISTIC_CATEGORY';\r\nimport Enemies from 'parser/shared/modules/Enemies';\r\nimport BoringSpellValueText from 'interface/statistics/components/BoringSpellValueText';\r\nimport { ThresholdStyle, When } from 'parser/core/ParseResults';\r\n\r\nclass Ascendance extends Analyzer {\r\n\r\n  static dependencies = {\r\n    abilities: Abilities,\r\n    enemies: EnemyInstances,\r\n  };\r\n  justEnteredAscendance = false;\r\n  checkDelay = 0;\r\n  numCasts = {\r\n    [SPELLS.ASCENDANCE_TALENT_ELEMENTAL.id]: 0,\r\n    [SPELLS.LAVA_BURST.id]: 0,\r\n    [SPELLS.EARTH_SHOCK.id]: 0,\r\n    [SPELLS.ELEMENTAL_BLAST_TALENT.id]: 0,\r\n    others: 0,\r\n  };\r\n  protected abilities!: Abilities;\r\n  protected enemies!: Enemies;\r\n\r\n  constructor(options: Options) {\r\n    super(options);\r\n    this.active = this.selectedCombatant.hasTalent(SPELLS.ASCENDANCE_TALENT_ELEMENTAL.id);\r\n  }\r\n\r\n  get AscendanceUptime() {\r\n    return this.selectedCombatant.getBuffUptime(SPELLS.ASCENDANCE_TALENT_ELEMENTAL.id) / this.owner.fightDuration;\r\n  }\r\n\r\n  get averageLavaBurstCasts() {\r\n    return (this.numCasts[SPELLS.LAVA_BURST.id] / this.numCasts[SPELLS.ASCENDANCE_TALENT_ELEMENTAL.id]) || 0;\r\n  }\r\n\r\n  get suggestionThresholds() {\r\n    return {\r\n      actual: this.numCasts.others,\r\n      isGreaterThan: {\r\n        major: 0,\r\n      },\r\n      style: ThresholdStyle.NUMBER,\r\n    };\r\n  }\r\n\r\n  statistic() {\r\n    const hasEB = this.selectedCombatant.hasTalent(SPELLS.ELEMENTAL_BLAST_TALENT.id);\r\n\r\n    return (\r\n      <Statistic\r\n        position={STATISTIC_ORDER.OPTIONAL()}\r\n        size=\"flexible\"\r\n        category={STATISTIC_CATEGORY.TALENTS}\r\n        tooltip={(\r\n          <>\r\n            With a uptime of: {formatPercentage(this.AscendanceUptime)} %<br />\r\n            Casts while Ascendance was up:\r\n            <ul>\r\n              <li>Earth Shock: {this.numCasts[SPELLS.EARTH_SHOCK.id]}</li>\r\n              <li>Lava Burst: {this.numCasts[SPELLS.LAVA_BURST.id]}</li>\r\n              {hasEB && <li>Elemental Blast: {this.numCasts[SPELLS.ELEMENTAL_BLAST_TALENT.id]}</li>}\r\n              <li>Other Spells: {this.numCasts.others}</li>\r\n            </ul>\r\n          </>\r\n        )}\r\n      >\r\n        <BoringSpellValueText spell={SPELLS.ASCENDANCE_TALENT_ELEMENTAL}>\r\n          <>\r\n            On average {formatNumber(this.averageLavaBurstCasts)} Lava Bursts cast during Ascendance.\r\n          </>\r\n        </BoringSpellValueText>\r\n      </Statistic>\r\n    );\r\n  }\r\n\r\n  suggestions(when: When) {\r\n    const abilities = `Lava Burst ${this.selectedCombatant.hasTalent(SPELLS.ELEMENTAL_BLAST_TALENT.id) ? `, Elemental Blast ` : ``} and Earth Shock`;\r\n    when(this.suggestionThresholds)\r\n      .addSuggestion((suggest, actual, recommended) =>\r\n        suggest(<span>Maximize your damage during ascendance by only using ${abilities}.</span>)\r\n          .icon(SPELLS.ASCENDANCE_TALENT_ELEMENTAL.icon)\r\n          .actual(`${actual} other casts during Ascendence`)\r\n          .recommended(`Only cast ${abilities} during Ascendence.`));\r\n  }\r\n}\r\n\r\nexport default Ascendance;\r\n","import React from 'react';\r\n\r\nimport SPELLS from 'common/SPELLS';\r\n\r\nimport Analyzer, { Options, SELECTED_PLAYER } from 'parser/core/Analyzer';\r\n\r\nimport { STATISTIC_ORDER } from 'interface/others/StatisticBox';\r\nimport Events, { DamageEvent } from 'parser/core/Events';\r\nimport Statistic from 'interface/statistics/Statistic';\r\nimport STATISTIC_CATEGORY from 'interface/others/STATISTIC_CATEGORY';\r\nimport BoringSpellValueText from 'interface/statistics/components/BoringSpellValueText';\r\nimport ItemDamageDone from 'interface/ItemDamageDone';\r\n\r\nclass EarthenRage extends Analyzer {\r\n  damageGained = 0;\r\n\r\n  constructor(options: Options) {\r\n    super(options);\r\n    this.active = this.selectedCombatant.hasTalent(SPELLS.EARTHEN_RAGE_TALENT.id);\r\n    this.addEventListener(Events.damage.by(SELECTED_PLAYER).spell(SPELLS.EARTHEN_RAGE_DAMAGE), this.onERDamage);\r\n  }\r\n\r\n  onERDamage(event: DamageEvent) {\r\n    this.damageGained += event.amount + (event.absorbed || 0);\r\n  }\r\n\r\n  statistic() {\r\n    return (\r\n      <Statistic\r\n        position={STATISTIC_ORDER.OPTIONAL()}\r\n        size=\"flexible\"\r\n        category={STATISTIC_CATEGORY.TALENTS}\r\n      >\r\n        <BoringSpellValueText spell={SPELLS.EARTHEN_RAGE_DAMAGE}>\r\n          <>\r\n            <ItemDamageDone amount={this.damageGained} />\r\n          </>\r\n        </BoringSpellValueText>\r\n      </Statistic>\r\n    );\r\n  }\r\n}\r\n\r\nexport default EarthenRage;\r\n","import React from 'react';\r\n\r\nimport SPELLS from 'common/SPELLS';\r\n\r\nimport Analyzer, { Options, SELECTED_PLAYER } from 'parser/core/Analyzer';\r\n\r\nimport { STATISTIC_ORDER } from 'interface/others/StatisticBox';\r\nimport Events, { DamageEvent } from 'parser/core/Events';\r\nimport BoringSpellValueText from 'interface/statistics/components/BoringSpellValueText';\r\nimport ItemDamageDone from 'interface/ItemDamageDone';\r\nimport Statistic from 'interface/statistics/Statistic';\r\n\r\nclass LiquidMagmaTotem extends Analyzer {\r\n  damageGained = 0;\r\n\r\n  constructor(options: Options) {\r\n    super(options);\r\n    this.active = this.selectedCombatant.hasTalent(SPELLS.LIQUID_MAGMA_TOTEM_TALENT.id);\r\n    this.addEventListener(Events.damage.by(SELECTED_PLAYER).spell(SPELLS.LIQUID_MAGMA_TOTEM_DAMAGE), this.onLMTDamage);\r\n  }\r\n\r\n  onLMTDamage(event: DamageEvent) {\r\n    this.damageGained += event.amount + (event.absorbed || 0);\r\n  }\r\n\r\n  statistic() {\r\n    return (\r\n      <Statistic\r\n        position={STATISTIC_ORDER.OPTIONAL()}\r\n        size=\"flexible\"\r\n      >\r\n        <BoringSpellValueText spell={SPELLS.LIQUID_MAGMA_TOTEM_TALENT}>\r\n          <>\r\n            <ItemDamageDone amount={this.damageGained} />\r\n          </>\r\n        </BoringSpellValueText>\r\n      </Statistic>\r\n    );\r\n  }\r\n}\r\n\r\nexport default LiquidMagmaTotem;\r\n","import React from 'react';\r\n\r\nimport Analyzer, { Options } from 'parser/core/Analyzer';\r\nimport { STATISTIC_ORDER } from 'interface/others/StatisticBox';\r\nimport SPELLS from 'common/SPELLS';\r\nimport calculateEffectiveDamage from 'parser/core/calculateEffectiveDamage';\r\nimport SpellLink from 'common/SpellLink';\r\nimport { SELECTED_PLAYER } from 'parser/core/EventFilter';\r\nimport Events, { CastEvent, DamageEvent } from 'parser/core/Events';\r\nimport BoringSpellValueText from 'interface/statistics/components/BoringSpellValueText';\r\nimport ItemDamageDone from 'interface/ItemDamageDone';\r\nimport Statistic from 'interface/statistics/Statistic';\r\n\r\nconst MASTER_OF_THE_ELEMENTS = {\r\n  INCREASE: 0.2,\r\n  DURATION: 15000,\r\n  WINDOW_DURATION: 500,\r\n  AFFECTED_DAMAGE: [\r\n    SPELLS.ICEFURY_TALENT,\r\n    SPELLS.ICEFURY_OVERLOAD,\r\n    SPELLS.FROST_SHOCK,\r\n    SPELLS.LIGHTNING_BOLT,\r\n    SPELLS.LIGHTNING_BOLT_OVERLOAD,\r\n    SPELLS.CHAIN_LIGHTNING,\r\n    SPELLS.CHAIN_LIGHTNING_OVERLOAD,\r\n    SPELLS.ELEMENTAL_BLAST_TALENT,\r\n    SPELLS.ELEMENTAL_BLAST_OVERLOAD,\r\n    SPELLS.EARTH_SHOCK,\r\n  ],\r\n  AFFECTED_CASTS: [\r\n    SPELLS.EARTHQUAKE,\r\n    SPELLS.ICEFURY_TALENT,\r\n    SPELLS.FROST_SHOCK,\r\n    SPELLS.ELEMENTAL_BLAST_TALENT,\r\n    SPELLS.CHAIN_LIGHTNING,\r\n    SPELLS.EARTH_SHOCK,\r\n    SPELLS.LIGHTNING_BOLT,\r\n  ],\r\n  TALENTS: [\r\n    SPELLS.ICEFURY_TALENT.id,\r\n    SPELLS.ELEMENTAL_BLAST_TALENT.id,\r\n  ],\r\n};\r\n\r\nclass MasterOfTheElements extends Analyzer {\r\n  moteBuffedAbilities: { [key: number]: number } = {};\r\n  moteActivationTimestamp: number | null = null;\r\n  moteConsumptionTimestamp: number | null = null;\r\n  damageGained = 0;\r\n\r\n  constructor(options: Options) {\r\n    super(options);\r\n    this.active = this.selectedCombatant.hasTalent(SPELLS.MASTER_OF_THE_ELEMENTS_TALENT.id);\r\n\r\n    for (const key in MASTER_OF_THE_ELEMENTS.AFFECTED_CASTS) {\r\n      const spellid = MASTER_OF_THE_ELEMENTS.AFFECTED_CASTS[key].id;\r\n      if (this.selectedCombatant.hasTalent(spellid) || !MASTER_OF_THE_ELEMENTS.TALENTS.includes(spellid)) {\r\n        this.moteBuffedAbilities[spellid] = 0;\r\n      }\r\n    }\r\n\r\n    this.addEventListener(Events.cast.by(SELECTED_PLAYER).spell(MASTER_OF_THE_ELEMENTS.AFFECTED_CASTS), this._onCast);\r\n    this.addEventListener(Events.cast.by(SELECTED_PLAYER).spell(SPELLS.LAVA_BURST), this._onLvBCast);\r\n    this.addEventListener(Events.damage.by(SELECTED_PLAYER).spell(MASTER_OF_THE_ELEMENTS.AFFECTED_DAMAGE), this._onDamage);\r\n  }\r\n\r\n  _onCast(event: CastEvent) {\r\n    if (this.moteActivationTimestamp === null) { //the buff is a clusterfuck so we just track it manually\r\n      return;\r\n    }\r\n    this.moteConsumptionTimestamp = event.timestamp;\r\n    this.moteActivationTimestamp = null;\r\n    event.meta = event.meta || {};\r\n    event.meta.isEnhancedCast = true;\r\n    this.moteBuffedAbilities[event.ability.guid] += 1;\r\n\r\n  }\r\n\r\n  _onLvBCast(event: CastEvent) {\r\n    this.moteActivationTimestamp = event.timestamp;\r\n  }\r\n\r\n  _onDamage(event: DamageEvent) {\r\n    if (event.timestamp < (this.moteConsumptionTimestamp || 0)) {\r\n      return;\r\n    }\r\n    if (event.timestamp > (this.moteConsumptionTimestamp || Infinity) + MASTER_OF_THE_ELEMENTS.WINDOW_DURATION) {\r\n      return;\r\n    }\r\n    this.damageGained += calculateEffectiveDamage(event, MASTER_OF_THE_ELEMENTS.INCREASE);\r\n  }\r\n\r\n  statistic() {\r\n    return (\r\n      <Statistic\r\n        position={STATISTIC_ORDER.OPTIONAL()}\r\n        size=\"flexible\"\r\n        dropdown={(\r\n          <>\r\n            <table className=\"table table-condensed\">\r\n              <thead>\r\n                <tr>\r\n                  <th>Ability</th>\r\n                  <th>Number of Buffed Casts</th>\r\n                </tr>\r\n              </thead>\r\n              <tbody>\r\n                {Object.keys(this.moteBuffedAbilities).map((e) => (\r\n                  <tr key={e}>\r\n                    <th><SpellLink id={Number(e)} /></th>\r\n                    <td>{this.moteBuffedAbilities[Number(e)]}</td>\r\n                  </tr>\r\n                ))}\r\n              </tbody>\r\n            </table>\r\n          </>\r\n        )}\r\n      >\r\n        <BoringSpellValueText spell={SPELLS.MASTER_OF_THE_ELEMENTS_TALENT}>\r\n          <>\r\n            <ItemDamageDone amount={this.damageGained} />\r\n          </>\r\n        </BoringSpellValueText>\r\n      </Statistic>\r\n    );\r\n  }\r\n}\r\n\r\nexport default MasterOfTheElements;\r\n","import React from 'react';\r\n\r\nimport SPELLS from 'common/SPELLS';\r\nimport SpellLink from 'common/SpellLink';\r\nimport { formatNumber } from 'common/format';\r\n\r\nimport Analyzer, { Options, SELECTED_PLAYER, SELECTED_PLAYER_PET } from 'parser/core/Analyzer';\r\n\r\nimport { STATISTIC_ORDER } from 'interface/others/StatisticBox';\r\nimport Events, { CastEvent, DamageEvent } from 'parser/core/Events';\r\nimport { When } from 'parser/core/ParseResults';\r\nimport ItemDamageDone from 'interface/ItemDamageDone';\r\nimport Statistic from 'interface/statistics/Statistic';\r\nimport BoringSpellValueText from 'interface/statistics/components/BoringSpellValueText';\r\n\r\nimport { i18n } from '@lingui/core';\r\nimport { t } from '@lingui/macro';\r\n\r\nconst damagingCasts = [SPELLS.FIRE_ELEMENTAL_METEOR, SPELLS.FIRE_ELEMENTAL_IMMOLATE, SPELLS.FIRE_ELEMENTAL_FIRE_BLAST];\r\n\r\nclass PrimalFireElemental extends Analyzer {\r\n  meteorCasts = 0;\r\n  PFEcasts = 0;\r\n\r\n  usedCasts: { [key: number]: boolean };\r\n\r\n  damageGained = 0;\r\n  maelstromGained = 0;\r\n\r\n  constructor(options: Options) {\r\n    super(options);\r\n    this.usedCasts = {\r\n      [SPELLS.FIRE_ELEMENTAL_METEOR.id]: false,\r\n      [SPELLS.IMMOLATE.id]: false,\r\n      [SPELLS.FIRE_BLAST.id]: false,\r\n    };\r\n    this.active = this.selectedCombatant.hasTalent(SPELLS.PRIMAL_ELEMENTALIST_TALENT.id)\r\n      && (!this.selectedCombatant.hasTalent(SPELLS.STORM_ELEMENTAL_TALENT.id));\r\n    this.addEventListener(Events.damage.by(SELECTED_PLAYER_PET).spell(damagingCasts), this.onDamage);\r\n    this.addEventListener(Events.cast.by(SELECTED_PLAYER).spell(SPELLS.FIRE_ELEMENTAL), this.onFECast);\r\n    this.addEventListener(Events.cast.by(SELECTED_PLAYER_PET).spell(damagingCasts), this.onDamagingCast);\r\n  }\r\n\r\n  get missedMeteorCasts() {\r\n    return this.PFEcasts - this.meteorCasts;\r\n  }\r\n\r\n  onDamage(event: DamageEvent) {\r\n    this.damageGained += event.amount + (event.absorbed || 0);\r\n  }\r\n\r\n  onFECast(event: CastEvent) {\r\n    this.PFEcasts += 1;\r\n  }\r\n\r\n  onDamagingCast(event: CastEvent) {\r\n    this.usedCasts[event.ability.guid] = true;\r\n  }\r\n\r\n  suggestions(when: When) {\r\n    const unusedSpells = Object.keys(this.usedCasts).filter(key => !this.usedCasts[Number(key)]);\r\n    const unusedSpellsString = unusedSpells.join(', ');\r\n    const unusedSpellsCount = unusedSpells.length;\r\n    when(unusedSpellsCount).isGreaterThan(0)\r\n      .addSuggestion((suggest, actual, recommended) => suggest(<span> Your Fire Elemental is not using all of it's spells. Check if immolate and Fire Blast are set to autocast and you are using Meteor.</span>)\r\n        .icon(SPELLS.FIRE_ELEMENTAL.icon)\r\n        .actual(i18n._(t('shaman.elemental.suggestions.primalElemental.unusedSpells')`${formatNumber(unusedSpellsCount)} spells not used by your Fire Elemental (${unusedSpellsString})`))\r\n        .recommended(`You should be using all spells of your Fire Elemental.`)\r\n        .major(recommended + 1));\r\n    when(this.missedMeteorCasts).isGreaterThan(0)\r\n      .addSuggestion((suggest, actual, recommended) => suggest(<span>You are not using <SpellLink id={SPELLS.FIRE_ELEMENTAL_METEOR.id} /> every time you cast <SpellLink id={SPELLS.FIRE_ELEMENTAL.id} /> if you are using <SpellLink id={SPELLS.PRIMAL_ELEMENTALIST_TALENT.id} />. Only wait with casting meteor if you wait for adds to spawn.</span>)\r\n        .icon(SPELLS.FIRE_ELEMENTAL.icon)\r\n        .actual(i18n._(t('shaman.elemental.suggestions.primalElemental.meteorCastsMissed')`${formatNumber(this.missedMeteorCasts)} missed Meteor Casts.`))\r\n        .recommended(`You should cast Meteor every time you summon your Fire Elemental `)\r\n        .major(recommended + 1));\r\n  }\r\n\r\n  statistic() {\r\n    return (\r\n      <Statistic\r\n        position={STATISTIC_ORDER.OPTIONAL()}\r\n        size=\"flexible\"\r\n      >\r\n        <>\r\n          <BoringSpellValueText spell={SPELLS.FIRE_ELEMENTAL}>\r\n            <ItemDamageDone amount={this.damageGained} />\r\n          </BoringSpellValueText>\r\n        </>\r\n      </Statistic>\r\n    );\r\n  }\r\n}\r\n\r\nexport default PrimalFireElemental;\r\n","import React from 'react';\r\n\r\nimport SPELLS from 'common/SPELLS';\r\nimport SpellLink from 'common/SpellLink';\r\nimport { formatNumber } from 'common/format';\r\n\r\nimport Analyzer, { Options, SELECTED_PLAYER, SELECTED_PLAYER_PET } from 'parser/core/Analyzer';\r\n\r\nimport { STATISTIC_ORDER } from 'interface/others/StatisticBox';\r\nimport Events, { CastEvent, DamageEvent } from 'parser/core/Events';\r\nimport { ThresholdStyle, When } from 'parser/core/ParseResults';\r\nimport Statistic from 'interface/statistics/Statistic';\r\nimport BoringSpellValueText from 'interface/statistics/components/BoringSpellValueText';\r\nimport ItemDamageDone from 'interface/ItemDamageDone';\r\n\r\nconst damagingCasts = [SPELLS.EYE_OF_THE_STORM.id, SPELLS.WIND_GUST.id, SPELLS.CALL_LIGHTNING.id];\r\nconst CALL_LIGHTNING_BUFF_DURATION: number = 15000;\r\n\r\nclass PrimalStormElemental extends Analyzer {\r\n  eotsCasts = 0;\r\n  pseCasts = 0;\r\n  lastCLCastTimestamp = 0;\r\n\r\n  usedCasts: { [key: number]: boolean };\r\n\r\n  damageGained = 0;\r\n  maelstromGained = 0;\r\n  badCasts = 0;\r\n\r\n  constructor(options: Options) {\r\n    super(options);\r\n    this.usedCasts = {\r\n      [SPELLS.EYE_OF_THE_STORM.id]: false,\r\n      [SPELLS.WIND_GUST.id]: false,\r\n      [SPELLS.CALL_LIGHTNING.id]: false,\r\n    };\r\n    this.active = this.selectedCombatant.hasTalent(SPELLS.PRIMAL_ELEMENTALIST_TALENT.id)\r\n      && this.selectedCombatant.hasTalent(SPELLS.STORM_ELEMENTAL_TALENT.id);\r\n    this.addEventListener(Events.cast.by(SELECTED_PLAYER_PET).spell(damagingCasts), this.onPetCast);\r\n    this.addEventListener(Events.damage.by(SELECTED_PLAYER_PET).spell(damagingCasts), this.onPetDamage);\r\n    this.addEventListener(Events.cast.by(SELECTED_PLAYER).spell(SPELLS.STORM_ELEMENTAL_TALENT), this.onPSECast);\r\n  }\r\n\r\n  get unusedSpells() {\r\n    return Object.keys(this.usedCasts).filter(key => !this.usedCasts[Number(key)]);\r\n  }\r\n\r\n  get unusedSpellsSuggestionTresholds() {\r\n    return {\r\n      actual: this.unusedSpells.length,\r\n      isGreaterThan: {\r\n        minor: 1,\r\n        major: 1,\r\n      },\r\n      style: ThresholdStyle.NUMBER,\r\n    };\r\n  }\r\n\r\n  get badCastsSuggestionTresholds() {\r\n    return {\r\n      actual: this.unusedSpells.length,\r\n      isGreaterThan: {\r\n        minor: 1,\r\n        major: 5,\r\n      },\r\n      style: ThresholdStyle.NUMBER,\r\n    };\r\n  }\r\n\r\n  onPSECast(event: CastEvent) {\r\n    this.pseCasts += 1;\r\n  }\r\n\r\n  onPetCast(event: CastEvent) {\r\n    this.usedCasts[event.ability.guid] = true;\r\n  }\r\n\r\n  onPetDamage(event: DamageEvent) {\r\n    this.damageGained += event.amount + (event.absorbed || 0);\r\n\r\n    if (event.ability.guid !== SPELLS.CALL_LIGHTNING.id) {\r\n      if (event.timestamp > this.lastCLCastTimestamp + CALL_LIGHTNING_BUFF_DURATION) {\r\n        this.badCasts += 1;\r\n      }\r\n    }\r\n  }\r\n\r\n  suggestions(when: When) {\r\n    const unusedSpellsString = this.unusedSpells.join(', ');\r\n\r\n    when(this.unusedSpellsSuggestionTresholds)\r\n      .addSuggestion((suggest, actual, recommended) => suggest(<span> Your Storm Elemental is not using all of it's spells. Check if Wind Gust and Call Lightning are set to autocast and you are using Eye Of The Storm.</span>)\r\n        .icon(SPELLS.STORM_ELEMENTAL_TALENT.icon)\r\n        .actual(`${formatNumber(actual)} spells not used by your Storm Elemental (${unusedSpellsString})`)\r\n        .recommended(`You should be using all spells of your Storm Elemental.`));\r\n\r\n    when(this.badCastsSuggestionTresholds)\r\n      .addSuggestion((suggest, actual, recommended) => suggest(<span>You are not using <SpellLink id={SPELLS.CALL_LIGHTNING.id} /> on cooldown.</span>)\r\n        .icon(SPELLS.STORM_ELEMENTAL_TALENT.icon)\r\n        .actual(`${formatNumber(actual)} casts done by your Storm Elemental without the \"Call Lightning\"-Buff.}`)\r\n        .recommended(`You should be recasting \"Call Lightning\" before the buff drops off.`));\r\n  }\r\n\r\n  statistic() {\r\n    return (\r\n      <Statistic\r\n        position={STATISTIC_ORDER.OPTIONAL()}\r\n        size=\"flexible\"\r\n        tooltip={(\r\n          <>\r\n            Your Storm Elemental cast {formatNumber(this.badCasts)} spells without <SpellLink id={SPELLS.CALL_LIGHTNING.id} />\r\n          </>\r\n        )}\r\n      >\r\n        <BoringSpellValueText spell={SPELLS.STORM_ELEMENTAL_TALENT}>\r\n          <ItemDamageDone amount={this.damageGained} />\r\n        </BoringSpellValueText>\r\n\r\n      </Statistic>\r\n    );\r\n  }\r\n}\r\n\r\nexport default PrimalStormElemental;\r\n","import React from 'react';\r\n\r\nimport SPELLS from 'common/SPELLS';\r\nimport { formatPercentage } from 'common/format';\r\n\r\nimport Analyzer, { Options, SELECTED_PLAYER } from 'parser/core/Analyzer';\r\nimport EnemyInstances from 'parser/shared/modules/EnemyInstances';\r\n\r\nimport Abilities from 'parser/shaman/elemental/modules/Abilities';\r\nimport Events, { CastEvent } from 'parser/core/Events';\r\nimport { ThresholdStyle, When } from 'parser/core/ParseResults';\r\nimport Enemies from 'parser/shared/modules/Enemies';\r\nimport Statistic from 'interface/statistics/Statistic';\r\nimport SpellLink from 'common/SpellLink';\r\n\r\nimport { i18n } from '@lingui/core';\r\nimport { t } from '@lingui/macro';\r\n\r\nclass StormElemental extends Analyzer {\r\n\r\n  static dependencies = {\r\n    abilities: Abilities,\r\n    enemies: EnemyInstances,\r\n  };\r\n  badFS = 0;\r\n  justEnteredSE = false;\r\n  checkDelay = 0;\r\n  numCasts = {\r\n    [SPELLS.STORM_ELEMENTAL_TALENT.id]: 0,\r\n    [SPELLS.LIGHTNING_BOLT.id]: 0,\r\n    [SPELLS.CHAIN_LIGHTNING.id]: 0,\r\n    [SPELLS.EARTH_SHOCK.id]: 0,\r\n    [SPELLS.EARTHQUAKE.id]: 0,\r\n    others: 0,\r\n  };\r\n  protected enemies !: Enemies;\r\n  protected abilities !: Abilities;\r\n\r\n  constructor(options: Options) {\r\n    super(options);\r\n    this.active = this.selectedCombatant.hasTalent(SPELLS.STORM_ELEMENTAL_TALENT.id);\r\n    this.addEventListener(Events.cast.by(SELECTED_PLAYER).spell(SPELLS.STORM_ELEMENTAL_TALENT), this.onSECast);\r\n    this.addEventListener(Events.cast.by(SELECTED_PLAYER), this.onSECast);\r\n  }\r\n\r\n  get stormEleUptime() {\r\n    return this.selectedCombatant.getBuffUptime(SPELLS.WIND_GUST_BUFF.id) / this.owner.fightDuration;\r\n  }\r\n\r\n  get averageLightningBoltCasts() {\r\n    return (this.numCasts[SPELLS.LIGHTNING_BOLT.id] / this.numCasts[SPELLS.STORM_ELEMENTAL_TALENT.id]) || 0;\r\n  }\r\n\r\n  get averageChainLightningCasts() {\r\n    return (this.numCasts[SPELLS.CHAIN_LIGHTNING.id] / this.numCasts[SPELLS.STORM_ELEMENTAL_TALENT.id]) || 0;\r\n  }\r\n\r\n  get suggestionThresholds() {\r\n    return {\r\n      actual: this.numCasts.others,\r\n      isGreaterThan: {\r\n        major: 1,\r\n      },\r\n      style: ThresholdStyle.NUMBER,\r\n    };\r\n  }\r\n\r\n  onSECast(event: CastEvent) {\r\n    this.justEnteredSE = true;\r\n    this.numCasts[SPELLS.STORM_ELEMENTAL_TALENT.id] += 1;\r\n  }\r\n\r\n  onCast(event: CastEvent) {\r\n    const spellId = event.ability.guid;\r\n\r\n    if (this.numCasts[spellId] !== undefined) {\r\n      this.numCasts[spellId] += 1;\r\n    } else {\r\n      this.numCasts.others += 1;\r\n    }\r\n  }\r\n\r\n  statistic() {\r\n    return (\r\n      <Statistic\r\n        tooltip={(\r\n          <>\r\n            With a uptime of: {formatPercentage(this.stormEleUptime)} %<br />\r\n            Casts while Storm Elemental was up:\r\n            <ul>\r\n              <li>Earth Shock: {this.numCasts[SPELLS.EARTH_SHOCK.id]}</li>\r\n              <li>Lightning Bolt: {this.numCasts[SPELLS.LIGHTNING_BOLT.id]}</li>\r\n              <li>Earthquake: {this.numCasts[SPELLS.EARTHQUAKE.id]}</li>\r\n              <li>Chain Lightning: {this.numCasts[SPELLS.CHAIN_LIGHTNING.id]}</li>\r\n              <li>Other Spells: {this.numCasts.others}</li>\r\n            </ul>\r\n          </>\r\n        )}\r\n      >\r\n        <>\r\n          You cast <SpellLink id={SPELLS.LIGHTNING_BOLT.id} /> {this.averageLightningBoltCasts} times per <SpellLink id={SPELLS.STORM_ELEMENTAL_TALENT.id} />\r\n        </>\r\n      </Statistic>\r\n\r\n    );\r\n  }\r\n\r\n  suggestions(when: When) {\r\n    const abilities = `Lightning Bolt/Chain Lightning and Earth Shock/Earthquake`;\r\n    when(this.suggestionThresholds)\r\n      .addSuggestion((suggest, actual, recommended) => suggest(<span>Maximize your damage during Storm Elemental by only using {abilities}.</span>)\r\n        .icon(SPELLS.STORM_ELEMENTAL_TALENT.icon)\r\n        .actual(i18n._(t('shaman.elemental.suggestions.stormElemental.badCasts')`${actual} other casts with Storm Elemental up`))\r\n        .recommended(`Only cast ${abilities} while Storm Elemental is up.`));\r\n  }\r\n}\r\n\r\nexport default StormElemental;\r\n","import React from 'react';\r\n\r\nimport SPELLS from 'common/SPELLS';\r\n\r\nimport Analyzer, { Options, SELECTED_PLAYER } from 'parser/core/Analyzer';\r\n\r\nimport { STATISTIC_ORDER } from 'interface/others/StatisticBox';\r\nimport Events, { DamageEvent } from 'parser/core/Events';\r\nimport Statistic from 'interface/statistics/Statistic';\r\nimport BoringSpellValueText from 'interface/statistics/components/BoringSpellValueText';\r\nimport ItemDamageDone from 'interface/ItemDamageDone';\r\n\r\nconst AFFECTED_ABILITIES = [\r\n  SPELLS.LIGHTNING_BOLT_OVERLOAD.id,\r\n  SPELLS.LIGHTNING_BOLT.id,\r\n  SPELLS.CHAIN_LIGHTNING_OVERLOAD.id,\r\n  SPELLS.CHAIN_LIGHTNING.id,\r\n];\r\n\r\nclass Stormkeeper extends Analyzer {\r\n  damageDoneByBuffedCasts = 0;\r\n\r\n  constructor(options: Options) {\r\n    super(options);\r\n    this.active = this.selectedCombatant.hasTalent(SPELLS.STORMKEEPER_TALENT.id);\r\n    this.addEventListener(\r\n      Events.damage.by(SELECTED_PLAYER).spell(AFFECTED_ABILITIES),\r\n      this.onSKDamage,\r\n    );\r\n  }\r\n\r\n  onSKDamage(event: DamageEvent) {\r\n    if (!this.selectedCombatant.hasBuff(SPELLS.STORMKEEPER_TALENT.id)) {\r\n      return;\r\n    }\r\n\r\n    this.damageDoneByBuffedCasts += event.amount + (event.absorbed || 0);\r\n  }\r\n\r\n  statistic() {\r\n    return (\r\n      <Statistic\r\n        position={STATISTIC_ORDER.OPTIONAL()}\r\n        size=\"flexible\"\r\n      >\r\n        <BoringSpellValueText spell={SPELLS.STORMKEEPER_TALENT}>\r\n          <>\r\n            <ItemDamageDone amount={this.damageDoneByBuffedCasts} />\r\n          </>\r\n        </BoringSpellValueText>\r\n      </Statistic>\r\n    );\r\n  }\r\n}\r\n\r\nexport default Stormkeeper;\r\n","import Analyzer, { Options, SELECTED_PLAYER } from 'parser/core/Analyzer';\r\nimport SPELLS from 'common/SPELLS';\r\nimport Events, { ApplyBuffEvent, ApplyBuffStackEvent, EventType, FightEndEvent, RemoveBuffEvent, RemoveBuffStackEvent } from 'parser/core/Events';\r\nimport { currentStacks } from 'parser/shared/modules/helpers/Stacks';\r\n\r\n/*\r\n  unlimitedPowerTimesByStacks() returns an array with the durations of each BS charge\r\n*/\r\n\r\nconst MAX_UP_STACKS = 20; //might need to be increased\r\n\r\nclass UnlimitedPowerTimesByStacks extends Analyzer {\r\n  unlimitedPowerStacks: number[][] = [];\r\n  lastUPStack = 0;\r\n  lastUPUpdate = this.owner.fight.start_time;\r\n\r\n  constructor(options: Options) {\r\n    super(options);\r\n    this.active = this.selectedCombatant.hasTalent(SPELLS.UNLIMITED_POWER_TALENT.id);\r\n\r\n    this.unlimitedPowerStacks = Array.from({ length: MAX_UP_STACKS + 1 }, x => []);\r\n    this.addEventListener(Events.applybuff.by(SELECTED_PLAYER).spell(SPELLS.UNLIMITED_POWER_BUFF), this.handleStacks);\r\n    this.addEventListener(Events.applybuffstack.by(SELECTED_PLAYER).spell(SPELLS.UNLIMITED_POWER_BUFF), this.handleStacks);\r\n    this.addEventListener(Events.removebuff.by(SELECTED_PLAYER).spell(SPELLS.UNLIMITED_POWER_BUFF), this.handleStacks);\r\n    this.addEventListener(Events.removebuffstack.by(SELECTED_PLAYER).spell(SPELLS.UNLIMITED_POWER_BUFF), this.handleStacks);\r\n    this.addEventListener(Events.fightend, this.handleStacks);\r\n  }\r\n\r\n  get unlimitedPowerTimesByStacks() {\r\n    return this.unlimitedPowerStacks;\r\n  }\r\n\r\n  get averageUnlimitedPowerStacks() {\r\n    let avgStacks = 0;\r\n    this.unlimitedPowerStacks.forEach((elem, index) => {\r\n      avgStacks += elem.reduce((a, b) => a + b, 0) / this.owner.fightDuration * index;\r\n    });\r\n    return avgStacks;\r\n  }\r\n\r\n  handleStacks(event: ApplyBuffEvent | RemoveBuffEvent | ApplyBuffStackEvent | RemoveBuffStackEvent | FightEndEvent) {\r\n    this.unlimitedPowerStacks[this.lastUPStack].push(event.timestamp - this.lastUPUpdate);\r\n    if (event.type === EventType.FightEnd) {\r\n      return;\r\n    }\r\n    this.lastUPUpdate = event.timestamp;\r\n    this.lastUPStack = currentStacks(event);\r\n  }\r\n}\r\n\r\nexport default UnlimitedPowerTimesByStacks;\r\n","import React from 'react';\r\nimport Analyzer, { Options } from 'parser/core/Analyzer';\r\nimport SPELLS from 'common/SPELLS';\r\nimport { formatDuration, formatPercentage } from 'common/format';\r\nimport { STATISTIC_ORDER } from 'interface/others/StatisticBox';\r\nimport UnlimitedPowerTimesByStacks from 'parser/shaman/elemental/modules/talents/UnlimitedPowerTimesByStacks';\r\nimport Statistic from 'interface/statistics/Statistic';\r\nimport STATISTIC_CATEGORY from 'interface/others/STATISTIC_CATEGORY';\r\nimport BoringSpellValueText from 'interface/statistics/components/BoringSpellValueText';\r\n\r\nconst HASTE_PER_STACK = 0.02;\r\n\r\nclass UnlimitedPower extends Analyzer {\r\n\r\n  static dependencies = {\r\n    unlimitedPowerTimesByStacks: UnlimitedPowerTimesByStacks,\r\n  };\r\n\r\n  protected unlimitedPowerTimesByStacks!: UnlimitedPowerTimesByStacks;\r\n\r\n  constructor(options: Options) {\r\n    super(options);\r\n    this.active = this.selectedCombatant.hasTalent(SPELLS.UNLIMITED_POWER_TALENT.id);\r\n  }\r\n\r\n  get unlimitedPowerTimesByStack() {\r\n    return this.unlimitedPowerTimesByStacks.unlimitedPowerTimesByStacks;\r\n  }\r\n\r\n  get uptime() {\r\n    return this.selectedCombatant.getBuffUptime(SPELLS.UNLIMITED_POWER_BUFF.id) / this.owner.fightDuration;\r\n  }\r\n\r\n  get averageHaste() {\r\n    return this.unlimitedPowerTimesByStacks.averageUnlimitedPowerStacks * HASTE_PER_STACK;\r\n  }\r\n\r\n  statistic() {\r\n    return (\r\n      <Statistic\r\n        position={STATISTIC_ORDER.OPTIONAL()}\r\n        size=\"flexible\"\r\n        category={STATISTIC_CATEGORY.TALENTS}\r\n        dropdown={(\r\n          <>\r\n            <table className=\"table table-condensed\">\r\n              <thead>\r\n                <tr>\r\n                  <th>Stacks</th>\r\n                  <th>Time (s)</th>\r\n                  <th>Time (%)</th>\r\n                </tr>\r\n              </thead>\r\n              <tbody>\r\n                {Object.values(this.unlimitedPowerTimesByStack).map((e, i) => (\r\n                  <tr key={i}>\r\n                    <th>{i}</th>\r\n                    <td>{formatDuration(e.reduce((a, b) => a + b, 0) / 1000)}</td>\r\n                    <td>{formatPercentage(e.reduce((a, b) => a + b, 0) / this.owner.fightDuration)}%</td>\r\n                  </tr>\r\n                ))}\r\n              </tbody>\r\n            </table>\r\n          </>\r\n        )}\r\n      >\r\n        <BoringSpellValueText spell={SPELLS.UNLIMITED_POWER_TALENT}>\r\n          <>\r\n            Unlimited Power Average Haste Gain (Uptime {formatPercentage(this.uptime)}%)\r\n          </>\r\n        </BoringSpellValueText>\r\n      </Statistic>\r\n    );\r\n  }\r\n}\r\n\r\nexport default UnlimitedPower;\r\n","import React from 'react';\r\n\r\nimport Analyzer, { Options } from 'parser/core/Analyzer';\r\nimport { STATISTIC_ORDER } from 'interface/others/StatisticBox';\r\nimport SPELLS from 'common/SPELLS';\r\nimport SpellLink from 'common/SpellLink';\r\nimport { SELECTED_PLAYER } from 'parser/core/EventFilter';\r\nimport { formatPercentage } from 'common/format';\r\nimport Events, { CastEvent } from 'parser/core/Events';\r\nimport { ThresholdStyle, When } from 'parser/core/ParseResults';\r\nimport Statistic from 'interface/statistics/Statistic';\r\nimport { i18n } from '@lingui/core';\r\nimport { t } from '@lingui/macro';\r\n\r\nconst SURGE_OF_POWER = {\r\n  AFFECTED_CASTS: [\r\n    SPELLS.FLAME_SHOCK,\r\n    SPELLS.FROST_SHOCK,\r\n    SPELLS.LAVA_BURST,\r\n    SPELLS.LIGHTNING_BOLT,\r\n  ],\r\n};\r\n\r\nclass SurgeOfPower extends Analyzer {\r\n  sopBuffedAbilities: { [key: number]: number } = {};\r\n  // total SK + SoP lightning bolt casts\r\n  skSopCasts = 0;\r\n  // total SK lightning bolt casts\r\n  skCasts = 0;\r\n\r\n  constructor(options: Options) {\r\n    super(options);\r\n    this.active = this.selectedCombatant.hasTalent(SPELLS.SURGE_OF_POWER_TALENT.id);\r\n\r\n    for (const key in SURGE_OF_POWER.AFFECTED_CASTS) {\r\n      const spellid = SURGE_OF_POWER.AFFECTED_CASTS[key].id;\r\n      this.sopBuffedAbilities[spellid] = 0;\r\n    }\r\n\r\n    this.addEventListener(Events.cast.by(SELECTED_PLAYER).spell(SURGE_OF_POWER.AFFECTED_CASTS), this._onCast);\r\n  }\r\n\r\n  get suggestionThresholds() {\r\n    return {\r\n      actual: this.skSopCasts / this.skCasts,\r\n      isLessThan: {\r\n        minor: 0.9,\r\n        average: 0.75,\r\n        major: 0.5,\r\n      },\r\n      style: ThresholdStyle.PERCENTAGE,\r\n    };\r\n  }\r\n\r\n  _onCast(event: CastEvent) {\r\n    // cast lightning bolt with only SK buff active\r\n    if (this.selectedCombatant.hasBuff(SPELLS.STORMKEEPER_TALENT.id, event.timestamp) && event.ability.guid === SPELLS.LIGHTNING_BOLT.id) {\r\n      this.skCasts += 1;\r\n    }\r\n\r\n    if (!this.selectedCombatant.hasBuff(SPELLS.SURGE_OF_POWER_BUFF.id)) {\r\n      return;\r\n    }\r\n\r\n    event.meta = event.meta || {};\r\n    event.meta.isEnhancedCast = true;\r\n    this.sopBuffedAbilities[event.ability.guid] += 1;\r\n\r\n    // cast lightning bolt with SoP and SK buffs active\r\n    if (this.selectedCombatant.hasBuff(SPELLS.STORMKEEPER_TALENT.id, event.timestamp) && event.ability.guid === SPELLS.LIGHTNING_BOLT.id) {\r\n      this.skSopCasts += 1;\r\n    }\r\n  }\r\n\r\n  statistic() {\r\n    return (\r\n      <Statistic\r\n        position={STATISTIC_ORDER.OPTIONAL()}\r\n        size=\"flexible\"\r\n      >\r\n        <table className=\"table table-condensed\">\r\n          <thead>\r\n            <tr>\r\n              <th>Ability</th>\r\n              <th>Number of Buffed Casts</th>\r\n            </tr>\r\n          </thead>\r\n          <tbody>\r\n            {Object.keys(this.sopBuffedAbilities).map((e) => (\r\n              <tr key={e}>\r\n                <th><SpellLink id={Number(e)} /></th>\r\n                <td>{this.sopBuffedAbilities[Number(e)]}</td>\r\n              </tr>\r\n            ))}\r\n          </tbody>\r\n        </table>\r\n      </Statistic>\r\n    );\r\n  }\r\n\r\n  suggestions(when: When) {\r\n    when(this.suggestionThresholds)\r\n      .addSuggestion((suggest, actual, recommended) => suggest(<span>You should aim to empower all of your Stormkeeper lightning bolts with Surge of Power. You can accomplish this\r\n        consistently by pooling to 95+ maelstrom right before Stormkeeper is available, then casting ES {'->'} SK {'->'} LB {'->'} LvB {'->'} ES {'->'} LB.</span>)\r\n        .icon(SPELLS.SURGE_OF_POWER_TALENT.icon)\r\n        .actual(i18n._(t('shaman.elemental.suggestions.surgeOfPower.stormKeeperEmpowered')`${formatPercentage(actual)}% of Stormkeeper Lightning Bolts empowered with Surge`))\r\n        .recommended(`100% is recommended.`));\r\n  }\r\n}\r\n\r\nexport default SurgeOfPower;\r\n","import React from 'react';\r\n\r\nimport SPELLS from 'common/SPELLS';\r\nimport SpellLink from 'common/SpellLink';\r\n\r\nimport Events from 'parser/core/Events';\r\nimport Analyzer, { Options, SELECTED_PLAYER } from 'parser/core/Analyzer';\r\nimport AbilityTracker from 'parser/shared/modules/AbilityTracker';\r\nimport { ThresholdStyle, When } from 'parser/core/ParseResults';\r\n\r\nclass Icefury extends Analyzer {\r\n  static dependencies = {\r\n    abilityTracker: AbilityTracker,\r\n  };\r\n  empoweredFrostShockCasts = 0;\r\n  protected abilityTracker!: AbilityTracker;\r\n\r\n  constructor(options: Options) {\r\n    super(options);\r\n    this.active = this.selectedCombatant.hasTalent(SPELLS.ICEFURY_TALENT.id);\r\n    this.addEventListener(Events.cast.by(SELECTED_PLAYER).spell(SPELLS.FROST_SHOCK), this.onFrostShockCast);\r\n  }\r\n\r\n  get suggestionThresholds() {\r\n    return {\r\n      actual: this.empoweredFrostShockCasts / this.abilityTracker.getAbility(SPELLS.ICEFURY_TALENT.id).casts,\r\n      isLessThan: {\r\n        minor: 4,\r\n        average: 3.5,\r\n        major: 3,\r\n      },\r\n      style: ThresholdStyle.DECIMAL,\r\n    };\r\n  }\r\n\r\n  onFrostShockCast() {\r\n    if (this.selectedCombatant.hasBuff(SPELLS.ICEFURY_TALENT.id)) {\r\n      this.empoweredFrostShockCasts += 1;\r\n    }\r\n  }\r\n\r\n  suggestions(when: When) {\r\n    when(this.suggestionThresholds).addSuggestion((suggest, actual) => suggest(<>You should fully utilize your <SpellLink id={SPELLS.ICEFURY_TALENT.id} /> casts by casting 4 <SpellLink id={SPELLS.FROST_SHOCK.id} />s before the <SpellLink id={SPELLS.ICEFURY_TALENT.id} /> buff expires. Pay attention to the remaining duration of the buff to ensure you have time to use all of the stacks.</>)\r\n      .icon(SPELLS.ICEFURY_TALENT.icon)\r\n      .actual(<>On average, only {actual.toFixed(2)} <SpellLink id={SPELLS.ICEFURY_TALENT.id} />(s) stacks were consumed with <SpellLink id={SPELLS.FROST_SHOCK.id} /> casts before <SpellLink id={SPELLS.ICEFURY_TALENT.id} /> buff expired.</>)\r\n      .recommended('It\\'s recommended to always consume all 4 stacks.'));\r\n  }\r\n}\r\n\r\nexport default Icefury;\r\n","import React from 'react';\r\n\r\nimport SPELLS from 'common/SPELLS';\r\n\r\nimport Analyzer, { Options, SELECTED_PLAYER } from 'parser/core/Analyzer';\r\n\r\nimport { STATISTIC_ORDER } from 'interface/others/StatisticBox';\r\nimport Events, { CastEvent, DamageEvent } from 'parser/core/Events';\r\nimport Statistic from 'interface/statistics/Statistic';\r\nimport BoringSpellValueText from 'interface/statistics/components/BoringSpellValueText';\r\nimport ItemDamageDone from 'interface/ItemDamageDone';\r\nimport { ThresholdStyle, When } from 'parser/core/ParseResults';\r\nimport SpellLink from 'common/SpellLink';\r\nimport { formatPercentage } from 'common/format';\r\n\r\nclass StaticDischarge extends Analyzer {\r\n  damageDone = 0;\r\n  ticks = 0;\r\n  casts = 0;\r\n\r\n  constructor(options: Options) {\r\n    super(options);\r\n    this.active = this.selectedCombatant.hasTalent(SPELLS.STATIC_DISCHARGE_TALENT.id);\r\n    this.addEventListener(\r\n      Events.damage.by(SELECTED_PLAYER).spell(SPELLS.STATIC_DISCHARGE_TALENT),\r\n      this.onSDDamage,\r\n    );\r\n    this.addEventListener(\r\n      Events.cast.by(SELECTED_PLAYER).spell(SPELLS.STATIC_DISCHARGE_TALENT),\r\n      this.onSDCast,\r\n    );\r\n  }\r\n\r\n  get efficientcy() {\r\n    return this.ticks / (6 * this.casts) || 1;\r\n  }\r\n\r\n  get suggestionThresholds() {\r\n    return {\r\n      actual: this.ticks / (6 * this.casts),\r\n      isLessThan: {\r\n        minor: 1,\r\n        major: 0.85,\r\n      },\r\n      style: ThresholdStyle.PERCENTAGE,\r\n    };\r\n  }\r\n\r\n  onSDDamage(event: DamageEvent) {\r\n    this.ticks += 1;\r\n    this.damageDone += event.amount + (event.absorbed || 0);\r\n  }\r\n\r\n  onSDCast(event: CastEvent) {\r\n    this.casts += 1;\r\n  }\r\n\r\n  suggestions(when: When) {\r\n    when(this.suggestionThresholds)\r\n      .addSuggestion((suggest, actual, recommended) =>\r\n        suggest(\r\n          <span>\r\n            You missed ${formatPercentage(1 - actual)}% of the ticks of your <SpellLink id={SPELLS.STATIC_DISCHARGE.id} />.\r\n            Try to maximize the ticks by only using it while Flame Shock is active on an enemy in range.\r\n          </span>)\r\n          .icon(SPELLS.STATIC_DISCHARGE_TALENT.icon)\r\n          .actual(`${actual}% of possible ticks with ${<SpellLink id={SPELLS.STATIC_DISCHARGE_TALENT.id} />}`)\r\n          .recommended(`${formatPercentage(recommended)}% is recommended`));\r\n  };\r\n\r\n  statistic() {\r\n    return (\r\n      <Statistic\r\n        position={STATISTIC_ORDER.OPTIONAL()}\r\n        size=\"flexible\"\r\n      >\r\n        <BoringSpellValueText spell={SPELLS.STATIC_DISCHARGE_TALENT}>\r\n          <>\r\n            <ItemDamageDone amount={this.damageDone} />\r\n          </>\r\n        </BoringSpellValueText>\r\n      </Statistic>\r\n    );\r\n  }\r\n}\r\n\r\nexport default StaticDischarge;\r\n","import React from 'react';\r\n\r\nimport SPELLS from 'common/SPELLS';\r\nimport { formatPercentage } from 'common/format';\r\n\r\nimport Analyzer, { Options, SELECTED_PLAYER } from 'parser/core/Analyzer';\r\n\r\nimport Events, { CastEvent } from 'parser/core/Events';\r\nimport { ThresholdStyle, When } from 'parser/core/ParseResults';\r\n\r\nclass EchoingShock extends Analyzer {\r\n\r\n  badCasts = 0;\r\n  casts = 0;\r\n\r\n  constructor(options: Options) {\r\n    super(options);\r\n    this.active = this.selectedCombatant.hasTalent(SPELLS.ECHOING_SHOCK_TALENT.id);\r\n    this.addEventListener(Events.cast.by(SELECTED_PLAYER), this.onCast);\r\n  }\r\n\r\n  get efficiency() {\r\n    return 1 - (this.badCasts / this.casts) || 0;\r\n  }\r\n\r\n  get suggestionThresholds() {\r\n    return {\r\n      actual: this.efficiency,\r\n      isLessThan: {\r\n        minor: 0.95,\r\n        major: 0.85,\r\n      },\r\n      style: ThresholdStyle.PERCENTAGE,\r\n    };\r\n  }\r\n\r\n  onCast(event: CastEvent) {\r\n    if (!this.selectedCombatant.hasBuff(SPELLS.ECHOING_SHOCK_TALENT.id)) {\r\n      return;\r\n    }\r\n\r\n    this.casts += 1;\r\n\r\n    if (event.ability.guid !== SPELLS.LAVA_BURST.id) {\r\n      this.badCasts += 1;\r\n    }\r\n  }\r\n\r\n  suggestions(when: When) {\r\n    when(this.suggestionThresholds)\r\n      .addSuggestion((suggest, actual, recommended) =>\r\n        suggest(\r\n          <span>\r\n            Maximize your damage with Echoing Shock by always duplicating Lava Burst.\r\n          </span>,\r\n        )\r\n          .icon(SPELLS.ECHOING_SHOCK_TALENT.icon)\r\n          .actual(`${formatPercentage(actual)}% of Echoing Shocks used on Lava Burst`)\r\n          .recommended(`${formatPercentage(recommended)}% is recommended`));\r\n  }\r\n}\r\n\r\nexport default EchoingShock;\r\n","import Analyzer, { Options, SELECTED_PLAYER } from 'parser/core/Analyzer';\r\nimport SPELLS from 'common/SPELLS/shaman';\r\nimport SpellUsable from 'parser/shared/modules/SpellUsable';\r\nimport Events, { ApplyBuffEvent } from 'parser/core/Events';\r\n\r\nclass LavaSurge extends Analyzer {\r\n  static dependencies = {\r\n    spellUsable: SpellUsable,\r\n  };\r\n\r\n  protected spellUsable!: SpellUsable;\r\n\r\n  constructor(options: Options) {\r\n    super(options);\r\n    this.addEventListener(Events.applybuff.by(SELECTED_PLAYER).spell(SPELLS.LAVA_SURGE), this.onLS);\r\n  }\r\n\r\n  onLS(event: ApplyBuffEvent) {\r\n    if (this.spellUsable.isOnCooldown(SPELLS.LAVA_BURST.id)) {\r\n      this.spellUsable.endCooldown(SPELLS.LAVA_BURST.id);\r\n    }\r\n  }\r\n}\r\n\r\nexport default LavaSurge;\r\n","import CoreCancelledCasts from 'parser/shared/modules/CancelledCasts';\r\nimport { formatPercentage } from 'common/format';\r\nimport { STATISTIC_ORDER } from 'interface/others/StatisticBox';\r\nimport { ThresholdStyle, When } from 'parser/core/ParseResults';\r\nimport { i18n } from '@lingui/core';\r\nimport { t } from '@lingui/macro';\r\n\r\nclass CancelledCasts extends CoreCancelledCasts {\r\n  statisticOrder = STATISTIC_ORDER.CORE(8);\r\n\r\n  get suggestionThresholds() {\r\n    return {\r\n      actual: this.castsCancelled / this.totalCasts,\r\n      isGreaterThan: {\r\n        minor: 0.05,\r\n        average: 0.075,\r\n        major: 0.1,\r\n      },\r\n      style: ThresholdStyle.PERCENTAGE,\r\n    };\r\n  }\r\n\r\n  suggestions(when: When) {\r\n    when(this.suggestionThresholds).addSuggestion((suggest, actual, recommended) => suggest(`${formatPercentage(actual)}% of spells casts were cancelled. Some casts will likely need to be cancelled due to mechanics, but generally, it is rarely a DPS up to cancel a cast in favor of casting another spell.`)\r\n      .icon('inv_misc_map_01')\r\n      .actual(i18n._(t('shaman.elemental.suggestions.castsCancelled')`${formatPercentage(actual)}% casts cancelled`))\r\n      .recommended(`<${formatPercentage(recommended)}% is recommended`));\r\n  }\r\n}\r\n\r\nexport default CancelledCasts;\r\n","import React from 'react';\r\nimport PropTypes from 'prop-types';\r\nimport SPELLS from 'common/SPELLS';\r\nimport Checklist from 'parser/shared/modules/features/Checklist';\r\nimport Rule from 'parser/shared/modules/features/Checklist/Rule';\r\nimport PreparationRule from 'parser/shared/modules/features/Checklist/PreparationRule';\r\nimport Requirement from 'parser/shared/modules/features/Checklist/Requirement';\r\nimport GenericCastEfficiencyRequirement from 'parser/shared/modules/features/Checklist/GenericCastEfficiencyRequirement';\r\nimport SpellLink from 'common/SpellLink';\r\n\r\nconst ElementalShamanChecklist = ({ combatant, castEfficiency, thresholds }: any) => {\r\n\r\n  const AbilityRequirement = (props: { spell: number }) => (\r\n    <GenericCastEfficiencyRequirement\r\n      castEfficiency={castEfficiency.getCastEfficiencyForSpellId(props.spell)}\r\n      {...props}\r\n    />\r\n  );\r\n\r\n  return (\r\n    <Checklist>\r\n      <Rule\r\n        name=\"Use core abilities as often as possible\"\r\n        description={(\r\n          <>\r\n            Using your core abilities as often as possible can help raise your dps significantly. Some help more than others, but as a general rule of thumb you should be looking to use most of your damaging abilities and damage cooldowns as often as possible, unless you need to save them for a priority burst phase that is coming up soon.\r\n            {' '}\r\n            <a href=\"https://stormearthandlava.com/guide/general/priority_list.html\" target=\"_blank\" rel=\"noopener noreferrer\">More info.</a>\r\n          </>\r\n        )}\r\n      >\r\n        {combatant.hasTalent(SPELLS.ASCENDANCE_TALENT_ELEMENTAL.id) &&\r\n        <AbilityRequirement spell={SPELLS.ASCENDANCE_TALENT_ELEMENTAL.id} />}\r\n        {combatant.hasTalent(SPELLS.STORM_ELEMENTAL_TALENT.id) &&\r\n        <AbilityRequirement spell={SPELLS.FIRE_ELEMENTAL.id} />}\r\n        {combatant.hasTalent(SPELLS.STORM_ELEMENTAL_TALENT.id) &&\r\n        <AbilityRequirement spell={SPELLS.STORM_ELEMENTAL_TALENT.id} />}\r\n        {combatant.hasTalent(SPELLS.ICEFURY_TALENT.id) &&\r\n        <AbilityRequirement spell={SPELLS.ICEFURY_TALENT.id} />}\r\n        {combatant.hasTalent(SPELLS.STORMKEEPER_TALENT.id) &&\r\n        <AbilityRequirement spell={SPELLS.STORMKEEPER_TALENT.id} />}\r\n        {combatant.hasTalent(SPELLS.LIQUID_MAGMA_TOTEM_TALENT.id) &&\r\n        <AbilityRequirement spell={SPELLS.LIQUID_MAGMA_TOTEM_TALENT.id} />}\r\n        {combatant.hasTalent(SPELLS.ELEMENTAL_BLAST_TALENT.id) &&\r\n        <AbilityRequirement spell={SPELLS.ELEMENTAL_BLAST_TALENT.id} />}\r\n      </Rule>\r\n      <Rule\r\n        name=\"Minimize Downtime\" description={(\r\n        <>\r\n          Downtime is the time where you are not casting and not GCD locked. Ensure you are casting as much as possible by avoiding movement when you could be casting.\r\n          Elemental shaman has many GCDs available from <SpellLink id={SPELLS.EARTH_SHOCK.id} />, <SpellLink id={SPELLS.LAVA_SURGE.id} /> empowered <SpellLink id={SPELLS.LAVA_BURST.id} />s, <SpellLink id={SPELLS.FROST_SHOCK.id} />, and others that help you move towards your location without incurring downtime.\r\n          Additionally, cancelled casts contribute significantly as they fill a GCD without actually doing damage. It's expected that some casts will need to be cancelled due to mechanics, but proper planning can help mitigate that.\r\n        </>\r\n      )}\r\n      >\r\n        <Requirement name=\"Downtime\" thresholds={thresholds.downtime} />\r\n        <Requirement name=\"Cancelled casts\" thresholds={thresholds.cancelledCasts} />\r\n      </Rule>\r\n      <Rule\r\n        name=\"Maintain your flame shock\"\r\n        description={(\r\n          <>\r\n            It's important to maintain flame shock on your target to guarantee <SpellLink id={SPELLS.LAVA_BURST.id} /> will crit and to allow for <SpellLink id={SPELLS.LAVA_SURGE.id} /> procs.\r\n            Applying <SpellLink id={SPELLS.FLAME_SHOCK.id} /> itself doesn't do much damage so you should only refresh it with 30% (about 7 seconds) or less of it's total duration remaining to beneift from pandemic.\r\n          </>\r\n        )}\r\n      >\r\n        <Requirement name={(<><SpellLink id={SPELLS.FLAME_SHOCK.id} /> uptime</>)} thresholds={thresholds.flameShockUptime} />\r\n        <Requirement name={(<> Bad <SpellLink id={SPELLS.FLAME_SHOCK.id} /> refreshes </>)} thresholds={thresholds.flameShockRefreshes} />\r\n      </Rule>\r\n      {\r\n        combatant.hasTalent(SPELLS.ICEFURY_TALENT.id) &&\r\n        <Rule\r\n          name=\"Utilize all Icefury Stacks\"\r\n          description={(\r\n            <>\r\n              <SpellLink id={SPELLS.ICEFURY_TALENT.id} />'s damage component itself is not a strong spell so it's important to fully utilize the talent by consuming all 4 <SpellLink id={SPELLS.ICEFURY_TALENT.id} /> buff stacks with <SpellLink id={SPELLS.FROST_SHOCK.id} /> casts during the buff's duration.\r\n              {combatant.hasTalent(SPELLS.MASTER_OF_THE_ELEMENTS_TALENT.id) && <> While you should try to buff as many <SpellLink id={SPELLS.ICEFURY_TALENT.id} /> empowered <SpellLink id={SPELLS.FROST_SHOCK.id} /> as you can with <SpellLink id={SPELLS.MASTER_OF_THE_ELEMENTS_TALENT.id} />, it is far more important to actually use all 4 charges before the buff expires.</>}\r\n            </>\r\n          )}\r\n        >\r\n          <Requirement name={<>Average <SpellLink id={SPELLS.FROST_SHOCK.id} /> Casts within <SpellLink id={SPELLS.ICEFURY_TALENT.id} /> Duration</>} thresholds={thresholds.icefuryEfficiency} />\r\n        </Rule>\r\n      }\r\n      {combatant.hasTalent(SPELLS.ASCENDANCE_TALENT_ELEMENTAL) &&\r\n      <Rule\r\n        name=\"Spam Meatballs(Lava Burst)\"\r\n        description={(\r\n          <>\r\n            <SpellLink id={SPELLS.ASCENDANCE_TALENT_ELEMENTAL.id} />'s damage comes from spamming <SpellLink id={SPELLS.LAVA_BURST.id} /> during it's duration. Only use <SpellLink id={SPELLS.LAVA_BURST.id} /> and <SpellLink id={SPELLS.EARTH_SHOCK.id} /> while it is up.\r\n            {combatant.hasTalent(SPELLS.ASCENDANCE_TALENT_ELEMENTAL.id) && <> Use <SpellLink id={SPELLS.LAVA_BURST.id} /> as much as you can. Only use <SpellLink id={SPELLS.EARTH_SHOCK.id} /> when you need to spend Malestrom..</>}\r\n          </>\r\n        )}\r\n      >\r\n        <Requirement name={<>\"Wrong\" Casts within <SpellLink id={SPELLS.ASCENDANCE_TALENT_ELEMENTAL.id} /> Duration</>} thresholds={thresholds.ascendanceEfficiency} />\r\n      </Rule>}\r\n      <PreparationRule thresholds={thresholds} />\r\n    </Checklist>\r\n  );\r\n};\r\n\r\nElementalShamanChecklist.propTypes = {\r\n  castEfficiency: PropTypes.object.isRequired,\r\n  combatant: PropTypes.shape({\r\n    hasTalent: PropTypes.func.isRequired,\r\n  }).isRequired,\r\n  thresholds: PropTypes.object.isRequired,\r\n};\r\nexport default ElementalShamanChecklist;\r\n","import React from 'react';\r\n\r\nimport BaseChecklist from 'parser/shared/modules/features/Checklist/Module';\r\nimport CastEfficiency from 'parser/shared/modules/CastEfficiency';\r\nimport Combatants from 'parser/shared/modules/Combatants';\r\nimport PreparationRuleAnalyzer from 'parser/shared/modules/features/Checklist/PreparationRuleAnalyzer';\r\n\r\nimport Icefury from 'parser/shaman/elemental/modules/talents/Icefury';\r\nimport Ascendance from 'parser/shaman/elemental/modules/talents/Ascendance';\r\nimport CancelledCasts from 'parser/shaman/elemental/modules/features/CancelledCasts';\r\nimport AlwaysBeCasting from 'parser/shaman/elemental/modules/features/AlwaysBeCasting';\r\n\r\nimport Component from 'parser/shaman/elemental/modules/checklist/Component';\r\nimport FlameShock from 'parser/shaman/shared/spells/FlameShock';\r\n\r\nclass Checklist extends BaseChecklist {\r\n  static dependencies = {\r\n    combatants: Combatants,\r\n    castEfficiency: CastEfficiency,\r\n    preparationRuleAnalyzer: PreparationRuleAnalyzer,\r\n    cancelledCasts: CancelledCasts,\r\n    alwaysBeCasting: AlwaysBeCasting,\r\n    icefury: Icefury,\r\n    ascendance: Ascendance,\r\n    flameshock: FlameShock,\r\n  };\r\n\r\n  protected combatants!: Combatants;\r\n  protected castEfficiency!: CastEfficiency;\r\n  protected preparationRuleAnalyzer!: PreparationRuleAnalyzer;\r\n  protected cancelledCasts!: CancelledCasts;\r\n  protected alwaysBeCasting!: AlwaysBeCasting;\r\n  protected icefury!: Icefury;\r\n  protected ascendance!: Ascendance;\r\n  protected flameshock!: FlameShock;\r\n\r\n  render() {\r\n    return (\r\n      <Component\r\n        combatant={this.combatants.selected}\r\n        castEfficiency={this.castEfficiency}\r\n        thresholds={{\r\n          ...this.preparationRuleAnalyzer.thresholds,\r\n          cancelledCasts: this.cancelledCasts.cancelledCastSuggestionThresholds,\r\n          downtime: this.alwaysBeCasting.downtimeSuggestionThresholds,\r\n          icefuryEfficiency: this.icefury.suggestionThresholds,\r\n          ascendanceEfficiency: this.ascendance.suggestionThresholds,\r\n          flameShockUptime: this.flameshock.uptimeThreshold,\r\n          flameShockRefreshes: this.flameshock.refreshThreshold,\r\n        }}\r\n      />\r\n    );\r\n  }\r\n}\r\n\r\nexport default Checklist;\r\n","import RESOURCE_TYPES from 'game/RESOURCE_TYPES';\r\nimport ResourceTracker from 'parser/shared/modules/resources/resourcetracker/ResourceTracker';\r\n\r\nclass MaelstromTracker extends ResourceTracker {\r\n  constructor(...args) {\r\n    super(...args);\r\n    this.resource = RESOURCE_TYPES.MAELSTROM;\r\n    this.maxResource = 100;\r\n  }\r\n\r\n}\r\nexport default MaelstromTracker;\r\n","import React from 'react';\r\n\r\nimport StatisticBox, { STATISTIC_ORDER } from 'interface/others/StatisticBox';\r\nimport Panel from 'interface/statistics/Panel';\r\nimport Analyzer from 'parser/core/Analyzer';\r\nimport ResourceBreakdown from 'parser/shared/modules/resources/resourcetracker/ResourceBreakdown';\r\nimport { formatPercentage } from 'common/format';\r\nimport Icon from 'common/Icon';\r\nimport { i18n } from '@lingui/core';\r\nimport { t } from '@lingui/macro';\r\n\r\nimport MaelstromTracker from './MaelstromTracker.js';\r\n\r\nconst MINOR_THRESHOLD = 0;\r\nconst AVERAGE_THRESHOLD = 0.02;\r\nconst MAJOR_THRESHOLD = 0.05;\r\n\r\nclass MaelstromDetails extends Analyzer {\r\n  static dependencies = {\r\n    maelstromTracker: MaelstromTracker,\r\n  };\r\n\r\n  get wasted() {\r\n    return this.maelstromTracker.wasted || 0;\r\n  }\r\n\r\n  get total() {\r\n    return this.maelstromTracker.wasted + this.maelstromTracker.generated || 0;\r\n  }\r\n\r\n  get wastedPerMinute() {\r\n    return (this.wasted / this.owner.fightDuration) * 1000 * 60 || 0;\r\n  }\r\n\r\n  get wastedPercent() {\r\n    return this.wasted / this.total || 0;\r\n  }\r\n\r\n  get suggestionThresholdsWasted() {\r\n    return {\r\n      actual: this.wastedPercent,\r\n      isGreaterThan: {\r\n        minor: MINOR_THRESHOLD,\r\n        average: AVERAGE_THRESHOLD,\r\n        major: MAJOR_THRESHOLD,\r\n      },\r\n      style: 'percentage',\r\n    };\r\n  }\r\n\r\n  get suggestionThresholds() {\r\n    return {\r\n      actual: 1 - this.wastedPercent,\r\n      isLessThan: {\r\n        minor: 1 - MINOR_THRESHOLD,\r\n        average: 1 - AVERAGE_THRESHOLD,\r\n        major: 1 - MAJOR_THRESHOLD,\r\n      },\r\n      style: 'percentage',\r\n    };\r\n  }\r\n\r\n  suggestions(when) {\r\n    when(this.suggestionThresholdsWasted)\r\n      .addSuggestion((suggest, actual, recommended) => suggest(`You overcapped ${this.wasted} Maelstrom. Always prioritize spending it over avoiding the overcap of any other ability.`)\r\n          .icon('spell_shadow_mindflay')\r\n          .actual(i18n._(t('shaman.shared.suggestions.maelstrom.overcapped')`${formatPercentage(actual)}% overcapped Maelstrom`))\r\n          .recommended(`${formatPercentage(recommended)}% is recommended`));\r\n  }\r\n\r\n  statistic() {\r\n    return [\r\n      (\r\n        <StatisticBox\r\n          key=\"StatisticBox\"\r\n          position={STATISTIC_ORDER.CORE(1)}\r\n          icon={<Icon icon=\"spell_shadow_mindflay\" />}\r\n          value={`${formatPercentage(this.wastedPercent)} %`}\r\n          label=\"Overcapped Maelstrom\"\r\n          tooltip={`${this.wasted} out of ${this.total} Maelstrom wasted.`}\r\n        />\r\n      ),\r\n      (\r\n        <Panel\r\n          key=\"Panel\"\r\n          title=\"Maelstrom usage\"\r\n          position={200}\r\n          pad={false}\r\n        >\r\n          <ResourceBreakdown\r\n            tracker={this.maelstromTracker}\r\n            showSpenders\r\n          />\r\n        </Panel>\r\n      ),\r\n    ];\r\n  }\r\n}\r\n\r\nexport default MaelstromDetails;\r\n","//Based on Main/Mana.js and parser/VengeanceDemonHunter/Modules/PainChart\r\n//Note: For those that might wish to add Boss Health in the future- some of the work is already done here: https://github.com/leapis/WoWAnalyzer/tree/focusChartBossHealth\r\n\r\nimport React from 'react';\r\nimport PropTypes from 'prop-types';\r\nimport { AutoSizer } from 'react-virtualized';\r\nimport BaseChart, { formatTime } from 'interface/others/BaseChart';\r\n\r\nconst COLORS = {\r\n  MAELSTROM_FILL: 'rgba(0, 139, 215, 0.2)',\r\n  MAELSTROM_BORDER: 'rgba(0, 145, 255, 1)',\r\n  WASTED_MAELSTROM_FILL: 'rgba(255, 20, 147, 0.3)',\r\n  WASTED_MAELSTROM_BORDER: 'rgba(255, 90, 160, 1)',\r\n};\r\n\r\nconst Maelstrom = props => {\r\n  if (!props.tracker) {\r\n    return (\r\n      <div>\r\n        Loading...\r\n      </div>\r\n    );\r\n  }\r\n\r\n  const { start } = props;\r\n\r\n  const rawData = [];\r\n\r\n  props.tracker.resourceUpdates.forEach((item) => {\r\n    const secIntoFight = Math.floor((item.timestamp - start) / 1000);\r\n    rawData.push({kind: 'Maelstrom', x: secIntoFight, y:item.current});\r\n    rawData.push({kind: 'Wasted', x: secIntoFight, y:item.waste});\r\n  });\r\n\r\n  const data = {\r\n    data: rawData,\r\n  };\r\n\r\n  const spec = {\r\n    mark: {\r\n      type: 'area',\r\n      line: {\r\n        strokeWidth: 1,\r\n      },\r\n    },\r\n    encoding: {\r\n      x: {\r\n        field: 'x',\r\n        type: 'quantitative',\r\n        axis: {\r\n          labelExpr: formatTime('datum.value * 1000'),\r\n          grid: false,\r\n        },\r\n        scale: {\r\n          nice: false,\r\n        },\r\n        title: 'Time',\r\n      },\r\n      y: {\r\n        field: 'y',\r\n        type: 'quantitative',\r\n        axis: {\r\n          grid: false,\r\n        },\r\n        title: 'Maelstrom',\r\n      },\r\n      color: {\r\n        field: 'kind',\r\n        type: 'nominal',\r\n        title: null,\r\n        legend: {\r\n          orient: 'top',\r\n        },\r\n        scale: {\r\n          domain: ['Maelstrom', 'Wasted'],\r\n          range: [COLORS.MAELSTROM_FILL, COLORS.WASTED_MAELSTROM_FILL],\r\n        },\r\n      },\r\n      stroke: {\r\n        field: 'kind',\r\n        type: 'nominal',\r\n        title: null,\r\n        legend: {\r\n          orient: 'top',\r\n        },\r\n        scale: {\r\n          domain: ['Maelstrom', 'Wasted'],\r\n          range: [COLORS.MAELSTROM_BORDER, COLORS.WASTED_MAELSTROM_BORDER],\r\n        },\r\n      },\r\n    },\r\n    data: {\r\n      name: 'data',\r\n    },\r\n  };\r\n\r\n return (\r\n   <AutoSizer disableHeight>\r\n     {({ width }) => (\r\n       <BaseChart\r\n         height={400}\r\n         width={width}\r\n         spec={spec}\r\n         data={data}\r\n       />\r\n     )}\r\n   </AutoSizer>\r\n );\r\n};\r\n\r\nMaelstrom.propTypes = {\r\n  start: PropTypes.number.isRequired,\r\n  tracker: PropTypes.object,\r\n};\r\n\r\nexport default Maelstrom;\r\n","import React from 'react';\r\nimport Panel from 'interface/others/Panel';\r\nimport Analyzer from 'parser/core/Analyzer';\r\n\r\nimport MaelstromChart from './Maelstrom';\r\nimport MaelstromTracker from './MaelstromTracker';\r\n\r\nclass MaelstromTab extends Analyzer {\r\n  static dependencies = {\r\n    maelstromTracker: MaelstromTracker,\r\n  };\r\n\r\n  tab() {\r\n    return {\r\n      title: 'Maelstrom Chart',\r\n      url: 'maelstrom',\r\n      render: () => (\r\n        <Panel style={{ padding: '15px 22px' }}>\r\n          <MaelstromChart\r\n            start={this.owner.fight.start_time}\r\n            end={this.owner.fight.end_time}\r\n            tracker={this.maelstromTracker}\r\n          />\r\n        </Panel>\r\n      ),\r\n    };\r\n  }\r\n}\r\n\r\nexport default MaelstromTab;\r\n","import CoreCombatLogParser from 'parser/core/CombatLogParser';\r\n\r\nimport Buffs from 'parser/shaman/elemental/modules/Buffs';\r\n\r\nimport Abilities from 'parser/shaman/elemental/modules/Abilities';\r\n\r\nimport AlwaysBeCasting from 'parser/shaman/elemental/modules/features/AlwaysBeCasting';\r\n\r\nimport Aftershock from 'parser/shaman/elemental/modules/talents/Aftershock';\r\nimport Ascendance from 'parser/shaman/elemental/modules/talents/Ascendance';\r\nimport EarthenRage from 'parser/shaman/elemental/modules/talents/EarthenRage';\r\nimport LiquidMagmaTotem from 'parser/shaman/elemental/modules/talents/LiquidMagmaTotem';\r\nimport MasterOfTheElements from 'parser/shaman/elemental/modules/talents/MasterOfTheElements';\r\nimport PrimalFireElemental from 'parser/shaman/elemental/modules/talents/PrimalFireElemental';\r\nimport PrimalStormElemental from 'parser/shaman/elemental/modules/talents/PrimalStormElemental';\r\nimport StormElemental from 'parser/shaman/elemental/modules/talents/StormElemental';\r\nimport Stormkeeper from 'parser/shaman/elemental/modules/talents/Stormkeeper';\r\nimport UnlimitedPower from 'parser/shaman/elemental/modules/talents/UnlimitedPower';\r\nimport UnlimitedPowerTimesByStacks from 'parser/shaman/elemental/modules/talents/UnlimitedPowerTimesByStacks';\r\nimport SurgeOfPower from 'parser/shaman/elemental/modules/talents/SurgeOfPower';\r\nimport Icefury from 'parser/shaman/elemental/modules/talents/Icefury';\r\nimport StaticDischarge from 'parser/shaman/elemental/modules/talents/StaticDischarge';\r\nimport EchoingShock from 'parser/shaman/elemental/modules/talents/EchoingShock';\r\n\r\nimport LavaSurge from 'parser/shaman/elemental/modules/core/LavaSurge';\r\nimport CancelledCasts from 'parser/shaman/elemental/modules/features/CancelledCasts';\r\nimport Checklist from 'parser/shaman/elemental/modules/checklist/Module';\r\n\r\nimport EarthShield from '../shared/talents/EarthShield';\r\nimport SpiritWolf from '../shared/talents/SpiritWolf';\r\nimport StaticCharge from '../shared/talents/StaticCharge';\r\nimport AnkhNormalizer from '../shared/normalizers/AnkhNormalizer';\r\nimport AstralShift from '../shared/spells/AstralShift';\r\nimport ElementalBlast from '../shared/talents/ElementalBlast';\r\n\r\n//Resources\r\nimport MaelstromDetails from '../shared/maelstromchart/MaelstromDetails';\r\nimport MaelstromTracker from '../shared/maelstromchart/MaelstromTracker';\r\nimport MaelstromTab from '../shared/maelstromchart/MaelstromTab';\r\nimport FlameShock from '../shared/spells/FlameShock';\r\n\r\nclass CombatLogParser extends CoreCombatLogParser {\r\n  static specModules = {\r\n    // Features\r\n    abilities: Abilities,\r\n    flameShock: FlameShock,\r\n    lavaSurge: LavaSurge,\r\n    buffs: Buffs,\r\n    cancelledCasts: CancelledCasts,\r\n    alwaysBeCasting: AlwaysBeCasting,\r\n\r\n    // Talents\r\n    earthenRage: EarthenRage,\r\n    //staticDischarge: StaticDischarge,\r\n    aftershock: Aftershock,\r\n    //echoingShock: EchoingShock,\r\n    elementalBlast: ElementalBlast,\r\n    spiritWolf: SpiritWolf,\r\n    earthShield: EarthShield,\r\n    staticCharge: StaticCharge,\r\n    masterOfTheElements: MasterOfTheElements,\r\n    stormElemental: StormElemental,\r\n    liquidMagmaTotem: LiquidMagmaTotem,\r\n    surgeOfPower: SurgeOfPower,\r\n    primalFireElemental: PrimalFireElemental,\r\n    primalStormElemental: PrimalStormElemental,\r\n    icefury: Icefury,\r\n    unlimitedPowerTimesByStacks: UnlimitedPowerTimesByStacks,\r\n    unlimitedPower: UnlimitedPower,\r\n    stormkeeper: Stormkeeper,\r\n    ascendance: Ascendance,\r\n    staticDischarge: StaticDischarge,\r\n    echoingShock: EchoingShock,\r\n\r\n    maelstromTracker: MaelstromTracker,\r\n    maelstromDetails: MaelstromDetails,\r\n    maelstromTab: MaelstromTab,\r\n    ankhNormalizer: AnkhNormalizer,\r\n    checklist: Checklist,\r\n    astralShift: AstralShift,\r\n  };\r\n\r\n}\r\n\r\nexport default CombatLogParser;\r\n","/**\r\n * A simple component that shows a value in the most plain way possible.\r\n * Use this only as the very last resort.\r\n */\r\nimport React from 'react';\r\n\r\ntype Props = {\r\n  label: React.ReactNode;\r\n  children: React.ReactNode;\r\n  className?: string;\r\n}\r\n\r\nconst BoringValue = ({ label, children, className }: Props) => (\r\n  <div className={`pad boring-text ${className || ''}`}>\r\n    <label>\r\n      {label}\r\n    </label>\r\n    <div className=\"value\">\r\n      {children}\r\n    </div>\r\n  </div>\r\n);\r\n\r\nexport default BoringValue;\r\n","export default function calculateMedian(values) {\r\n  const arr = [...values];\r\n  arr.sort((a, b) => a - b);\r\n\r\n  const half = Math.floor(arr.length / 2);\r\n\r\n  if (arr.length % 2) {\r\n    return arr[half];\r\n  } else {\r\n    return (arr[half - 1] + arr[half]) / 2.0;\r\n  }\r\n}\r\n","export default function average(values) {\r\n  return values.reduce((c, p) => c + p, 0) / values.length;\r\n}\r\n","export default function harmonic(values) {\r\n  return values.length / values.reduce((cum, val) => cum + 1/val, 0);\r\n}\r\n","import React, {useCallback, useState} from 'react';\r\n\r\nimport DropdownIcon from 'interface/icons/Dropdown';\r\nimport InformationIcon from 'interface/icons/Information';\r\nimport { ControlledExpandable } from 'interface/common/Expandable';\r\nimport colorForPerformance from 'common/colorForPerformance';\r\n\r\nimport calculateMedian from './helpers/calculateMedian';\r\nimport average from './helpers/average';\r\nimport harmonic from './helpers/harmonic';\r\n\r\nexport const RuleContext = React.createContext((value: number) => {/**/});\r\n\r\n\r\nexport enum PERFORMANCE_METHOD {\r\n  DEFAULT = 'DEFAULT',\r\n  MEDIAN = 'MEDIAN',\r\n  AVERAGE = 'AVERAGE',\r\n  LOWEST = 'LOWEST',\r\n  FIRST = 'FIRST',\r\n  HARMONIC = 'HARMONIC',\r\n};\r\n\r\ninterface Props {\r\n  name: React.ReactNode;\r\n  children: React.ReactNode;\r\n  description?: React.ReactNode;\r\n  performanceMethod?: PERFORMANCE_METHOD;\r\n}\r\n\r\ninterface State {\r\n  requirementPerformances: number[],\r\n  performance: number;\r\n  passed: boolean;\r\n  expanded: boolean;\r\n}\r\n\r\nconst Rule = (props: Props) => {\r\n\r\n  const [state, setState] = useState<State>({requirementPerformances: [], performance: 1, passed: true, expanded: false});\r\n\r\n\r\n  const calculateRulePerformance = useCallback((values: number[], style = PERFORMANCE_METHOD.DEFAULT) => {\r\n    // Lowest would generally be too punishing for small mistakes, if you want to have a single value tank the rule consider making it its own rule.\r\n    // Average would mark things as OK when one thing was OK and 3 things were \"average\", I think this is wrong and it should mark the rule as average. Median achieves this.\r\n    // Actual Median could mark a rule as 100% ok when there are still some things being neglected, so instead I opted for the best of both worlds and using the lowest of the median or average by default.\r\n\r\n    switch (style) {\r\n      case PERFORMANCE_METHOD.DEFAULT:\r\n        return Math.min(calculateMedian(values), average(values));\r\n      case PERFORMANCE_METHOD.MEDIAN:\r\n        return calculateMedian(values);\r\n      case PERFORMANCE_METHOD.AVERAGE:\r\n        return average(values);\r\n      case PERFORMANCE_METHOD.LOWEST:\r\n        return Math.min(...values);\r\n      case PERFORMANCE_METHOD.FIRST:\r\n        return values[0];\r\n      case PERFORMANCE_METHOD.HARMONIC:\r\n        return harmonic(values);\r\n      default:\r\n        throw new Error(`Unknown style: ${style}`);\r\n    }\r\n  }, [])\r\n\r\n \r\n\r\n  const checkEmptyRule = (child: React.ReactNode) => {\r\n    if (React.isValidElement(child) && child?.props) {\r\n      return true;\r\n    } else {\r\n      return false;\r\n    }\r\n  }\r\n\r\n  const setRequirementPerformance = (p: number) => {\r\n    // We don't have to worry about adding the same Requirement's performance multiple times here because it's only called in the Requirement's constructor, which is only called once.\r\n    setState((prevState: State) => {\r\n      const requirementPerformances: State['requirementPerformances'] = [...prevState.requirementPerformances, p];\r\n      const performance = requirementPerformances.length > 0 ? calculateRulePerformance(requirementPerformances, props.performanceMethod) : 1\r\n      const passed = performance > 0.666;\r\n      const expanded = !passed;\r\n      return {requirementPerformances, performance: performance, passed, expanded}\r\n    })\r\n  }\r\n\r\n  const { name, children: requirements, description } = props;\r\n\r\n  if (!requirements || (Array.isArray(requirements) && !requirements.some(checkEmptyRule))) {\r\n    return null;\r\n  }\r\n\r\n  const inverseExpanded = () => {\r\n    setState(prevState => ({...prevState, expanded: !prevState.expanded}))\r\n  }\r\n\r\n  return (\r\n    <RuleContext.Provider value={setRequirementPerformance}>\r\n      <ControlledExpandable\r\n        element=\"li\"\r\n        className={state.passed ? 'passed' : 'failed'}\r\n        inverseExpanded={inverseExpanded}\r\n        expanded={state.expanded}\r\n        header={(\r\n          <div className=\"flex wrapable\">\r\n            <div className=\"flex-main name\">\r\n              {name}\r\n            </div>\r\n            <div className=\"flex-sub perf\">\r\n              <div className=\"perf-container\">\r\n                <div\r\n                  className=\"perf-bar\"\r\n                  style={{\r\n                    width: `${state.performance * 100}%`,\r\n                    backgroundColor: colorForPerformance(state.performance),\r\n                  }}\r\n                />\r\n              </div>\r\n            </div>\r\n            <div className=\"flex-sub chevron\">\r\n              <div>\r\n                <DropdownIcon />\r\n              </div>\r\n            </div>\r\n          </div>\r\n        )}\r\n      >\r\n        {description && (\r\n          <div className=\"row text-muted description\">\r\n            <InformationIcon />\r\n            <div className=\"col-md-12\">\r\n              {description}\r\n            </div>\r\n          </div>\r\n        )}\r\n        <div className=\"row\">\r\n          {requirements}\r\n        </div>\r\n      </ControlledExpandable>\r\n    </RuleContext.Provider>\r\n  );\r\n}\r\n\r\nexport default Rule;\r\n","import React from 'react';\r\n\r\nimport InformationIcon from 'interface/icons/Information';\r\nimport { formatNumber, formatPercentage, formatThousands } from 'common/format';\r\nimport Tooltip, { TooltipElement } from 'common/Tooltip';\r\nimport colorForPerformance from 'common/colorForPerformance';\r\nimport { BoolThreshold, NumberThreshold, Threshold, ThresholdStyle } from 'parser/core/ParseResults';\r\nimport { Trans } from '@lingui/macro';\r\n\r\nimport performanceForThresholds from './helpers/performanceForThresholds';\r\nimport { RuleContext } from './Rule';\r\n\r\n\r\nexport type RequirementThresholds = NumberThreshold | BoolThreshold;\r\n\r\ninterface Props {\r\n  name: React.ReactNode,\r\n  thresholds: RequirementThresholds,\r\n  tooltip?: React.ReactNode,\r\n  valueTooltip?: React.ReactNode,\r\n  setPerformance: (performance: number) => void,\r\n  prefix?: React.ReactNode,\r\n  suffix?: React.ReactNode,\r\n}\r\nclass Requirement extends React.PureComponent<Props> {\r\n\r\n  constructor(props: Props) {\r\n    super(props);\r\n    props.setPerformance(this.performance);\r\n  }\r\n\r\n  get performance() {\r\n    return performanceForThresholds(this.props.thresholds);\r\n  }\r\n\r\n  formatThresholdsActual(thresholds: Threshold<any>) {\r\n    switch (thresholds.style) {\r\n      case ThresholdStyle.PERCENTAGE:\r\n        return `${formatPercentage(thresholds.actual)}%`;\r\n      case ThresholdStyle.NUMBER:\r\n        return `${formatNumber(thresholds.actual)}`;\r\n      case ThresholdStyle.THOUSANDS:\r\n        return `${formatThousands(thresholds.actual)}`;\r\n      case ThresholdStyle.DECIMAL:\r\n        return `${thresholds.actual.toFixed(2)}`;\r\n      case ThresholdStyle.BOOLEAN:\r\n        return thresholds.actual ? <Trans id=\"common.yes\">Yes</Trans> : <Trans id=\"common.no\">No</Trans>;\r\n      case ThresholdStyle.SECONDS:\r\n        return `${thresholds.actual.toFixed(2)}s`;\r\n      default:\r\n        throw new Error(`Unknown style: ${thresholds.style}`);\r\n    }\r\n  }\r\n\r\n  render() {\r\n    const { name, thresholds, tooltip, valueTooltip, prefix, suffix } = this.props;\r\n\r\n    const performance = this.performance;\r\n    let max = undefined;\r\n    const thresholdsN = thresholds as NumberThreshold;\r\n    if(thresholdsN.max !== undefined) {\r\n      max = `/ ${thresholdsN.max}`;\r\n    }\r\n    const actual = (\r\n      <>\r\n        {prefix} {this.formatThresholdsActual(thresholds)} {max} {suffix}\r\n      </>\r\n    );\r\n\r\n    return (\r\n      <div className=\"col-md-6\">\r\n        <div className=\"flex\">\r\n          <div className=\"flex-main\">\r\n            {name}\r\n          </div>\r\n          {tooltip && (\r\n            <div\r\n              className=\"flex-sub\"\r\n              style={{ marginLeft: 10 }}\r\n            >\r\n              <Tooltip content={tooltip}>\r\n                <div>\r\n                  <InformationIcon />\r\n                </div>\r\n              </Tooltip>\r\n            </div>\r\n          )}\r\n          <div className=\"flex-sub content-middle text-muted\" style={{ minWidth: 55, marginLeft: 5, marginRight: 10 }}>\r\n            <div className=\"text-right\" style={{ width: '100%' }}>\r\n              {valueTooltip ? <TooltipElement content={valueTooltip}>{actual}</TooltipElement> : actual}\r\n            </div>\r\n          </div>\r\n          <div className=\"flex-sub content-middle\" style={{ width: 50 }}>\r\n            <div className=\"performance-bar-container\">\r\n              <div\r\n                className=\"performance-bar small\"\r\n                style={{\r\n                  width: `${performance * 100}%`,\r\n                  transition: 'background-color 800ms',\r\n                  backgroundColor: colorForPerformance(performance),\r\n                }}\r\n              />\r\n            </div>\r\n          </div>\r\n        </div>\r\n      </div>\r\n    );\r\n  }\r\n}\r\n\r\nexport default (props: Omit<Props, 'setPerformance'>) => (\r\n  <RuleContext.Consumer>\r\n    {(setPerformance: (performance: number) => void) => (\r\n      <Requirement\r\n        {...props}\r\n        setPerformance={setPerformance}\r\n      />\r\n    )}\r\n  </RuleContext.Consumer>\r\n);\r\n","/**\r\n *   0 - 33% major This is different from the *minor* threshold which is at 100% instead of 66%. The reason for this is that the minor threshold being at 75% and then 75%-100% being minor - max is that this would suggest going for max is best while this is not always the case. Something like Crusader Strike (with the Crusader's Might talent) has a recommended cast efficiency of 35% *because* you should only cast it enough to benefit you, more than that would be good but not 100% cast efficiency as then you're losing healing.\r\n * 33% - 66% average\r\n * 66% - 99% minor\r\n * 100% good (no issue)\r\n * @param actual\r\n * @param minor\r\n * @param average\r\n * @param major\r\n * @returns {number}\r\n */\r\nfunction performanceForLessThanThresholds(actual, { minor, average, major }) {\r\n  if (actual < major) {\r\n    // major issue\r\n    return 0.333 * actual / major;\r\n  } else if (actual < average) {\r\n    // average issue (between major and average issue)\r\n    return 0.333 + 0.333 * ((actual - major) / (average - major));\r\n  } else if (actual < minor) {\r\n    // minor issue (between average and minor issue)\r\n    return 0.666 + 0.333 * ((actual - average) / (minor - average));\r\n  } else {\r\n    // no issue\r\n    return 1;\r\n  }\r\n}\r\nfunction performanceForGreaterThanThresholds(actual, { minor, average, major }) {\r\n  if (actual > major) {\r\n    // major issue\r\n    return 0.333 * major / actual;\r\n  } else if (actual > average) {\r\n    // average issue (between major and average issue)\r\n    return 0.666 - 0.333 * ((actual - average) / (major - average));\r\n  } else if (actual > minor) {\r\n    // minor issue (between average and minor issue)\r\n    return 1 - 0.333 * ((actual - minor) / (average - minor));\r\n  } else {\r\n    // no issue\r\n    return 1;\r\n  }\r\n}\r\nexport default function performanceForThresholds(thresholds) {\r\n  if (thresholds.isGreaterThan) {\r\n    if (typeof thresholds.isGreaterThan === 'object') {\r\n      return performanceForGreaterThanThresholds(thresholds.actual, thresholds.isGreaterThan);\r\n    } else {\r\n      return thresholds.isGreaterThan / thresholds.actual;\r\n    }\r\n  } else if (thresholds.isLessThan) {\r\n    if (typeof thresholds.isLessThan === 'object') {\r\n      return performanceForLessThanThresholds(thresholds.actual, thresholds.isLessThan);\r\n    } else {\r\n      return thresholds.actual / thresholds.isLessThan;\r\n    }\r\n  } else if (thresholds.isEqual !== undefined) {\r\n    return thresholds.actual !== thresholds.isEqual ? 1 : 0;\r\n  } else {\r\n    throw new Error('Failed to recognize threshold type');\r\n  }\r\n}\r\n","import React from 'react';\r\nimport PropTypes from 'prop-types';\r\nimport { Trans } from '@lingui/macro';\r\n\r\nimport './Checklist.scss';\r\n\r\nconst Checklist = props => {\r\n  const { children } = props;\r\n\r\n  return (\r\n    <ul className=\"checklist\">\r\n      {!children && (\r\n        <li>\r\n          <div className=\"alert alert-danger\">\r\n            <Trans id=\"shared.checklist.missingChecklist\">The checklist is not yet available for this spec. See <a href=\"https://github.com/WoWAnalyzer/WoWAnalyzer\">GitHub</a> or join us on <a href=\"https://discord.gg/AxphPxU\">Discord</a> if you're interested in contributing this.</Trans>\r\n          </div>\r\n        </li>\r\n      )}\r\n\r\n      {children}\r\n    </ul>\r\n  );\r\n};\r\n\r\nChecklist.propTypes = {\r\n  children: PropTypes.node,\r\n};\r\n\r\nexport default Checklist;\r\n","import React from 'react';\r\nimport PropTypes from 'prop-types';\r\nimport { Trans } from '@lingui/macro';\r\n\r\nimport Rule from './Rule';\r\nimport Requirement from './Requirement';\r\n\r\nclass PreparationRule extends React.PureComponent {\r\n\r\n  static propTypes = {\r\n    children: PropTypes.node,\r\n    thresholds: PropTypes.object.isRequired,\r\n  };\r\n\r\n  renderPotionRequirements() {\r\n    const { thresholds } = this.props;\r\n\r\n    return (\r\n      <>\r\n        <Requirement\r\n          name={<Trans id=\"shared.modules.features.checklist.combatPotionsUsed\">Combat potions used</Trans>}\r\n          thresholds={thresholds.potionsUsed}\r\n        />\r\n        <Requirement\r\n          name={<Trans id=\"shared.modules.features.checklist.highQualityCombatPotionsUsed\">High quality combat potions used</Trans>}\r\n          thresholds={thresholds.bestPotionUsed}\r\n        />\r\n      </>\r\n    );\r\n  }\r\n  renderEnchantRequirements() {\r\n    const { thresholds } = this.props;\r\n\r\n    return (\r\n      <>\r\n        <Requirement\r\n          name={<Trans id=\"shared.modules.features.checklist.enchanted\">All items enchanted</Trans>}\r\n          thresholds={thresholds.itemsEnchanted}\r\n        />\r\n        <Requirement\r\n          name={<Trans id=\"shared.modules.features.checklist.enchantedHigh\">Using high quality enchants</Trans>}\r\n          thresholds={thresholds.itemsBestEnchanted}\r\n        />\r\n      </>\r\n    );\r\n  }\r\n  renderWeaponEnhancementRequirements() {\r\n    const { thresholds } = this.props;\r\n\r\n    return (\r\n      <>\r\n        <Requirement\r\n          name={<Trans>All weapons enhanced (oils/stones)</Trans>}\r\n          thresholds={thresholds.weaponsEnhanced}\r\n        />\r\n        <Requirement\r\n          name={<Trans>Using high quality weapon enhancements</Trans>}\r\n          thresholds={thresholds.bestWeaponEnhancements}\r\n        />\r\n      </>\r\n    );\r\n  }\r\n  renderFlaskRequirements() {\r\n    const { thresholds } = this.props;\r\n    return (\r\n      <>\r\n        <Requirement\r\n          name={<Trans id=\"shared.modules.features.checklist.flaskHigh\">High quality flask used</Trans>}\r\n          thresholds={thresholds.higherFlaskPresent}\r\n        />\r\n        <Requirement\r\n          name={<Trans id=\"shared.modules.features.checklist.flask\">Flask used</Trans>}\r\n          thresholds={thresholds.flaskPresent}\r\n        />\r\n      </>\r\n    );\r\n  }\r\n  renderFoodRequirements() {\r\n    const { thresholds } = this.props;\r\n    return (\r\n      <>\r\n        <Requirement\r\n          name={<Trans id=\"shared.modules.features.checklist.foodHigh\">High quality food used</Trans>}\r\n          thresholds={thresholds.higherFoodPresent}\r\n        />\r\n        <Requirement\r\n          name={<Trans id=\"shared.modules.features.checklist.food\">Food used</Trans>}\r\n          thresholds={thresholds.foodPresent}\r\n        />\r\n      </>\r\n    );\r\n  }\r\n\r\n  render() {\r\n    const { children } = this.props;\r\n\r\n    return (\r\n      <Rule\r\n        name={<Trans id=\"shared.modules.features.checklist.wellPrepared\">Be well prepared</Trans>}\r\n        description={<Trans id=\"shared.modules.features.checklist.wellPreparedDetails\">Being well prepared with food, flasks, potions and enchants is an easy way to improve your performance.</Trans>}\r\n      >\r\n        {this.renderEnchantRequirements()}\r\n        {this.renderWeaponEnhancementRequirements()}\r\n        {this.renderPotionRequirements()}\r\n        {this.renderFlaskRequirements()}\r\n        {this.renderFoodRequirements()}\r\n        {children}\r\n      </Rule>\r\n    );\r\n  }\r\n}\r\n\r\nexport default PreparationRule;\r\n","import React from 'react';\r\nimport PropTypes from 'prop-types';\r\n\r\nimport SpellLink from 'common/SpellLink';\r\nimport { captureException } from 'common/errorLogger';\r\n\r\nimport Requirement from './Requirement';\r\n\r\n/**\r\n * This is a common requirement for all checklists that uses settings for CastEfficiency to create a Requirement. It shows the spell and your efficiency as performance depending on the configured cast efficiency efficiency thresholds.\r\n *\r\n * This requirement is automatically disabled if the ability's CastEfficiency suggestion is disabled (i.e. if the ability's castEfficiency: { suggestion } is unset or false), or the ability is disabled completely. If you set `onlyWithSuggestion` to `false` in the object when creating this requirement you can change this behavior to always show if the ability is enabled, regardless of the CastEfficiency suggestion property being set.\r\n */\r\nclass GenericCastEfficiencyRequirement extends React.PureComponent {\r\n  static propTypes = {\r\n    spell: PropTypes.number.isRequired,\r\n    name: PropTypes.node,\r\n    castEfficiency: PropTypes.shape({\r\n      efficiency: PropTypes.number.isRequired,\r\n      gotMaxCasts: PropTypes.bool.isRequired,\r\n      recommendedEfficiency: PropTypes.number.isRequired,\r\n      averageIssueEfficiency: PropTypes.number.isRequired,\r\n      majorIssueEfficiency: PropTypes.number.isRequired,\r\n      casts: PropTypes.any,\r\n      maxCasts: PropTypes.any,\r\n    }).isRequired,\r\n    isMaxCasts: PropTypes.bool,\r\n  };\r\n\r\n  get thresholds() {\r\n    if (!this.props.castEfficiency) {\r\n      captureException(new Error(`GenericCastEfficiencyRequirement requires that you pass the castEfficiency object yourself. Spell: ${this.props.spell}`));\r\n      return null;\r\n    }\r\n\r\n    if(this.props.isMaxCasts) {\r\n      const {\r\n        casts,\r\n        maxCasts,\r\n      } = this.props.castEfficiency;\r\n\r\n      return {\r\n        actual: casts,\r\n        max: maxCasts,\r\n        isLessThan: {\r\n          minor: maxCasts,\r\n          average: maxCasts - 1,\r\n          major: maxCasts - 2,\r\n        },\r\n        style: 'number',\r\n      };\r\n    } else {\r\n      const {\r\n        efficiency,\r\n        gotMaxCasts,\r\n        recommendedEfficiency: minor,\r\n        averageIssueEfficiency: average,\r\n        majorIssueEfficiency: major,\r\n      } = this.props.castEfficiency;\r\n\r\n      return {\r\n        actual: gotMaxCasts ? 1 : efficiency,\r\n        isLessThan: {\r\n          minor,\r\n          average,\r\n          major,\r\n        },\r\n        style: 'percentage',\r\n      };\r\n    }\r\n  }\r\n\r\n  render() {\r\n    const { spell, name, ...others } = this.props;\r\n\r\n    const thresholds = this.thresholds;\r\n    if (!thresholds) {\r\n      return null;\r\n    }\r\n\r\n    return (\r\n      <Requirement\r\n        name={name || <SpellLink id={spell} />}\r\n        thresholds={thresholds}\r\n        {...others}\r\n      />\r\n    );\r\n  }\r\n}\r\n\r\nexport default GenericCastEfficiencyRequirement;\r\n","import Analyzer, { SELECTED_PLAYER, Options } from 'parser/core/Analyzer';\r\nimport EventEmitter from 'parser/core/modules/EventEmitter';\r\nimport Events, { EventType, ClassResources, EnergizeEvent, CastEvent, HealEvent, SpendResourceEvent } from 'parser/core/Events';\r\nimport { Resource } from 'game/RESOURCE_TYPES';\r\n\r\nexport type BuilderObj = {\r\n  generated: number,\r\n  wasted: number,\r\n  casts: number,\r\n}\r\n\r\nexport type SpenderObj = {\r\n  spent: number,\r\n  spentByCast: number[],\r\n  casts: number,\r\n}\r\n\r\ntype ResourceUpdate = {\r\n  timestamp: number | undefined,\r\n  current: number,\r\n  waste: number,\r\n  generated: number,\r\n  used: number,\r\n}\r\n\r\n/**\r\n * This is an 'abstract' implementation of a framework for tracking resource generating/spending.\r\n * Extend it by following the instructions in the TODO comments below\r\n */\r\nclass ResourceTracker extends Analyzer {\r\n  static dependencies = {\r\n    eventEmitter: EventEmitter,\r\n    // Optional dependency for the `resourceCost` prop of events\r\n    // spellResourceCost: SpellResourceCost,\r\n  };\r\n\r\n  protected eventEmitter!: EventEmitter;\r\n\r\n  current = 0;\r\n  resourceUpdates: ResourceUpdate[] = [];\r\n\r\n  // stores resource gained/spent/wasted by ability ID\r\n  buildersObj: {[index: number]: BuilderObj} = {};\r\n  spendersObj: {[index: number]: SpenderObj} = {};\r\n\r\n  // TODO set this to the resource you wish to track constructor.. see the appropriate objects in game/RESOURCE_TYPES\r\n  resource!: Resource;\r\n\r\n  // TODO a classes 'main' resource passes the max along with events, but for other resources this may need to be defined\r\n  maxResource!: number;\r\n\r\n  constructor(options: Options){\r\n    super(options);\r\n    this.addEventListener(Events.energize.to(SELECTED_PLAYER), this.onEnergize);\r\n    this.addEventListener(Events.cast.by(SELECTED_PLAYER), this.onCast);\r\n  }\r\n\r\n  // FIXME implement natural regen\r\n  // TODO if the tracked resource naturally regenerates (like Energy), set this to true and set the parameters of the regeneration in the below fields\r\n  // naturallyRegenerates = false;\r\n  // baseRegenRate; // TODO resource's base regeneration rate in points per second\r\n  // isRegenHasted; // TODO iff true, regeneration rate will be scaled with haste\r\n\r\n  // TODO if you wish an ability to show in results even if it wasn't used, add it using these functions constructor\r\n  initBuilderAbility(spellId: number) {\r\n    this.buildersObj[spellId] = { generated: 0, wasted: 0, casts: 0 };\r\n  }\r\n  initSpenderAbility(spellId: number) {\r\n    this.spendersObj[spellId] = { spent: 0, spentByCast: [], casts: 0 };\r\n  }\r\n\r\n  // BUILDERS - Handled on energize, using the 'resourceChange' field\r\n  onEnergize(event: EnergizeEvent) {\r\n    const spellId = event.ability.guid;\r\n\r\n    if(event.resourceChangeType !== this.resource.id) {\r\n        return;\r\n    }\r\n\r\n    const waste = event.waste;\r\n    const gain = event.resourceChange - waste;\r\n    this._applyBuilder(spellId, gain, waste, this.getResource(event), event.timestamp);\r\n  }\r\n\r\n  // FIXME Track resource drains too, so that the 'current' value can be more accurate\r\n\r\n  // TODO if a resource gain isn't showing as an energize in events, handle it manually by calling this\r\n  /**\r\n   * FIXME solve with a normalizer instead?\r\n   * Applies an energize of the tracked resource type.\r\n   * @param {number} spellId - The spellId to attribute the resource gain to\r\n   * @param {number} amount - The raw amount of resources to gain\r\n   */\r\n  processInvisibleEnergize(spellId: number, amount: number) {\r\n    const maxGain = this.maxResource !== undefined ? this.maxResource - this.current : amount;\r\n    const gain = Math.min(amount, maxGain);\r\n    const waste = Math.max(amount - maxGain, 0);\r\n    this._applyBuilder(spellId, gain, waste);\r\n  }\r\n\r\n  _applyBuilder(spellId: number, gain: number, waste: number,  resource?: ClassResources, timestamp?: number) {\r\n    if (!this.buildersObj[spellId]) {\r\n        this.initBuilderAbility(spellId);\r\n    }\r\n\r\n    this.buildersObj[spellId].wasted += waste;\r\n    this.buildersObj[spellId].generated += gain;\r\n    this.buildersObj[spellId].casts += 1;\r\n\r\n    // resource.amount for an energize is the amount AFTER the energize\r\n    if (resource !== null && resource !== undefined && resource.amount !== undefined) {\r\n      this.current = resource.amount;\r\n      if (resource.max !== undefined) {\r\n        this.maxResource = resource.max; // track changes in max resource, which can happen due to procs / casts\r\n      }\r\n    } else {\r\n      this.current += gain;\r\n    }\r\n\r\n    this.resourceUpdates.push({\r\n      timestamp: timestamp,\r\n      current: this.current,\r\n      waste: waste,\r\n      generated: gain,\r\n      used: 0,\r\n    });\r\n  }\r\n\r\n  // SPENDERS - Handled on cast, using the 'classResources' field\r\n  onCast(event: CastEvent) {\r\n    const spellId = event.ability.guid;\r\n\r\n    if(!this.shouldProcessCastEvent(event)) {\r\n        return;\r\n    }\r\n    const eventResource = this.getResource(event);\r\n\r\n    if(!eventResource){\r\n      return;\r\n    }\r\n\r\n    if (eventResource.max) {\r\n      this.maxResource = eventResource.max; // track changes in max resource, which can happen due to procs / casts\r\n    }\r\n    const cost = this.getReducedCost(event);\r\n\r\n    if (!this.spendersObj[spellId]) {\r\n      this.initSpenderAbility(spellId);\r\n    }\r\n\r\n    if (!cost || cost === 0) {\r\n      return;\r\n    }\r\n\r\n    this.spendersObj[spellId].casts += 1;\r\n    this.spendersObj[spellId].spentByCast.push(cost);\r\n    if(cost > 0) {\r\n      this.spendersObj[spellId].spent += cost;\r\n    }\r\n\r\n    //Re-sync current amount, to update not-tracked gains.\r\n    this.current = eventResource.amount - cost;\r\n\r\n    this.resourceUpdates.push({\r\n      timestamp: event.timestamp,\r\n      current: this.current,\r\n      waste: 0,\r\n      generated: 0,\r\n      used: eventResource.amount,\r\n    });\r\n\r\n    this.triggerSpendEvent(cost, event);\r\n  }\r\n\r\n  // TODO if your spec has an ability cost reduction that doesn't show in events, handle it manually by overriding here. Or extend SpellResourceCost and apply the discount there.\r\n  getReducedCost(event: CastEvent) {\r\n    if (event.resourceCost && event.resourceCost[this.resource.id] !== undefined) {\r\n      return event.resourceCost[this.resource.id];\r\n    }\r\n    return this.getResource(event)?.cost;\r\n  }\r\n\r\n  getResource(event: CastEvent | HealEvent | EnergizeEvent ) {\r\n    if(!event.classResources) {\r\n      return undefined;\r\n    } else {\r\n      return event.classResources.find(r => r.type === this.resource.id);\r\n    }\r\n  }  \r\n\r\n  triggerSpendEvent(spent: number, event: CastEvent) {\r\n\r\n    const fabricatedEvent: SpendResourceEvent = {\r\n      type: EventType.SpendResource,\r\n      timestamp: event.timestamp,\r\n      sourceID: event.sourceID,\r\n      targetID: event.targetID,\r\n      resourceChange: spent,\r\n      resourceChangeType: this.resource.id,\r\n      ability: event.ability,\r\n      __fabricated: true,\r\n    };\r\n\r\n    this.eventEmitter.fabricateEvent(fabricatedEvent, event);\r\n  }\r\n\r\n  shouldProcessCastEvent(event: CastEvent) {\r\n    return Boolean(this.getResource(event));\r\n  }\r\n\r\n  getGeneratedBySpell(spellId: number) {\r\n    return (this.buildersObj[spellId] && this.buildersObj[spellId].generated) || 0;\r\n  }\r\n\r\n  getWastedBySpell(spellId: number) {\r\n    return (this.buildersObj[spellId] && this.buildersObj[spellId].wasted) || 0;\r\n  }\r\n\r\n  getBuilderCastsBySpell(spellId: number) {\r\n    return (this.buildersObj[spellId] && this.buildersObj[spellId].casts) || 0;\r\n  }\r\n\r\n  get generated() {\r\n    return Object.values(this.buildersObj).reduce((acc, spell) => acc + spell.generated, 0);\r\n  }\r\n\r\n  get wasted() {\r\n    return Object.values(this.buildersObj).reduce((acc, spell) => acc + spell.wasted, 0);\r\n  }\r\n\r\n  get spent() {\r\n    return Object.values(this.spendersObj).reduce((acc, spell) => acc + spell.spent, 0);\r\n  }\r\n\r\n  get spendersCasts() {\r\n    return Object.values(this.spendersObj).reduce((acc, spell) => acc + spell.casts, 0);\r\n  }\r\n}\r\n\r\nexport default ResourceTracker;\r\n","import React from 'react';\r\n\r\nimport SpellLink from 'common/SpellLink';\r\nimport { formatPercentage } from 'common/format';\r\nimport { TooltipElement } from 'common/Tooltip';\r\n\r\nimport ResourceTracker, { BuilderObj, SpenderObj } from './ResourceTracker';\r\n\r\ninterface Props {\r\n  tracker: ResourceTracker,\r\n  showSpenders: boolean,\r\n}\r\n\r\nclass ResourceBreakdown extends React.Component<Props> {\r\n\r\n  prepareGenerated(buildersObj: {[index: number]: BuilderObj}) {\r\n    return Object.keys(buildersObj)\r\n      .map(abilityId => ({\r\n        abilityId: Number(abilityId),\r\n        generated: buildersObj[Number(abilityId)].generated,\r\n        wasted: buildersObj[Number(abilityId)].wasted,\r\n      }))\r\n      .sort((a, b) => b.generated - a.generated)\r\n      .filter(ability => ability.generated > 0 || ability.wasted);\r\n  }\r\n\r\n  prepareSpent(spendersObj: {[index: number]: SpenderObj}) {\r\n    return Object.keys(spendersObj)\r\n      .map(abilityId => ({\r\n        abilityId: Number(abilityId),\r\n        spent: spendersObj[Number(abilityId)].spent,\r\n        casts: spendersObj[Number(abilityId)].casts,\r\n      }))\r\n      .sort((a, b) => b.spent - a.spent)\r\n      .filter(ability => ability.spent > 0);\r\n  }\r\n\r\n  render() {\r\n    const { tracker, showSpenders } = this.props;\r\n    const resourceName = tracker.resource.name;\r\n\r\n    const generated = this.prepareGenerated(tracker.buildersObj);\r\n    const spent = this.prepareSpent(tracker.spendersObj);\r\n\r\n    let totalGenerated = tracker.generated;\r\n    let totalWasted = tracker.wasted;\r\n\r\n    let totalSpent = tracker.spent;\r\n    let totalCasts = tracker.spendersCasts;\r\n\r\n    // looks wrong but totals are only for the purpose of percentage, and if nothing was wasted, then 0/1 gives correct result 0% wasted, if it's not 0 it retains its original value\r\n    totalGenerated = (totalGenerated === 0) ? 1 : totalGenerated;\r\n    totalWasted = (totalWasted === 0) ? 1 : totalWasted;\r\n\r\n    totalSpent = (totalSpent === 0) ? 1 : totalSpent;\r\n    totalCasts = (totalCasts === 0) ? 1 : totalCasts;\r\n\r\n    return (\r\n      <>\r\n        <table className=\"data-table\">\r\n          <thead>\r\n            <tr>\r\n              <th>Ability</th>\r\n              <th colSpan={2}>{resourceName} generated</th>\r\n              <th colSpan={2}><TooltipElement content=\"This is the amount of resources that were generated while you were already at cap.\">{resourceName} wasted</TooltipElement></th>\r\n            </tr>\r\n          </thead>\r\n          <tbody>\r\n            {generated && generated\r\n              .map(ability => (\r\n                <tr key={ability.abilityId}>\r\n                  <td style={{ width: '30%' }}>\r\n                    <SpellLink id={ability.abilityId} />\r\n                  </td>\r\n                  <td style={{ width: 50, paddingRight: 5, textAlign: 'center' }}>\r\n                    <TooltipElement content={`${formatPercentage(ability.generated / totalGenerated)} %`}>{ability.generated.toFixed(0)}</TooltipElement>\r\n                  </td>\r\n                  <td style={{ width: '40%' }}>\r\n                    <div\r\n                      className=\"performance-bar\"\r\n                      style={{ width: `${(ability.generated / totalGenerated) * 100}%` }}\r\n                    />\r\n                  </td>\r\n                  <td style={{ width: 50, paddingRight: 5, textAlign: 'center' }}>\r\n                    <TooltipElement content={`${formatPercentage(ability.wasted / totalWasted)} %`}>{ability.wasted.toFixed(0)}</TooltipElement>\r\n                  </td>\r\n                  <td style={{ width: '30%' }}>\r\n                    <div\r\n                      className=\"performance-bar\"\r\n                      style={{ width: `${(ability.wasted / totalWasted) * 100}%` }}\r\n                    />\r\n                  </td>\r\n                </tr>\r\n              ))}\r\n          </tbody>\r\n        </table>\r\n        {showSpenders && (\r\n          <table className=\"data-table\">\r\n            <thead>\r\n              <tr>\r\n                <th>Ability</th>\r\n                <th colSpan={2}>{resourceName} spent</th>\r\n                <th colSpan={2}>Casts</th>\r\n              </tr>\r\n            </thead>\r\n            <tbody>\r\n              {spent && spent\r\n                .map(ability => (\r\n                  <tr key={ability.abilityId}>\r\n                    <td style={{ width: '30%' }}>\r\n                      <SpellLink id={ability.abilityId} />\r\n                    </td>\r\n                    <td style={{ width: 50, paddingRight: 5, textAlign: 'center' }}>\r\n                      <TooltipElement content={`${formatPercentage(ability.spent / totalSpent)} %`}>{ability.spent.toFixed(0)}</TooltipElement>\r\n                    </td>\r\n                    <td style={{ width: '40%' }}>\r\n                      <div\r\n                        className=\"performance-bar\"\r\n                        style={{ width: `${(ability.spent / totalSpent) * 100}%` }}\r\n                      />\r\n                    </td>\r\n                    <td style={{ width: 50, paddingRight: 5, textAlign: 'center' }}>\r\n                      <TooltipElement content={`${formatPercentage(ability.casts / totalCasts)} %`}>{ability.casts}</TooltipElement>\r\n                    </td>\r\n                    <td style={{ width: '30%' }}>\r\n                      <div\r\n                        className=\"performance-bar\"\r\n                        style={{ width: `${(ability.casts / totalCasts) * 100}%` }}\r\n                      />\r\n                    </td>\r\n                  </tr>\r\n                ))}\r\n            </tbody>\r\n          </table>\r\n        )}\r\n      </>\r\n    );\r\n  }\r\n}\r\n\r\nexport default ResourceBreakdown;\r\n","export default function colorForPerformance(performance: number) {\r\n  if (performance >= 1) {\r\n    return '#4ec04e';\r\n  } else if (performance > 0.666) {\r\n    return '#a6c34c';\r\n  } else if (performance > 0.5) {\r\n    return '#ffc84a';\r\n  } else if (performance > 0.333) {\r\n    return '#df7102';\r\n  } else {\r\n    return '#ac1f39';\r\n  }\r\n}\r\n","import React from 'react';\r\n\r\n// https://thenounproject.com/search/?q=dropdown&i=1871189\r\n// Dropdown by zalhan from the Noun Project\r\nconst Icon = ({ ...other }) => (\r\n  <svg xmlns=\"http://www.w3.org/2000/svg\" viewBox=\"0 0 16 9\" className=\"icon\" {...other}>\r\n      <path d=\"M14.0059397,2.26485497e-14 C15.1072288,2.26485497e-14 15.3722573,0.627746582 14.5881847,1.41182411 L8.70999225,7.29005337 C8.317902,7.68214607 7.67653023,7.6764822 7.29009898,7.29005337 L1.41183294,1.41182411 C0.632099139,0.632095183 0.894513756,2.26485497e-14 1.99406028,2.26485497e-14 L14.0059397,2.26485497e-14 Z\" />\r\n  </svg>\r\n);\r\n\r\nexport default Icon;\r\n","import React, {useState} from 'react';\r\nimport AnimateHeight from 'react-animate-height';\r\n\r\nimport './Expandable.scss';\r\n\r\ninterface Props {\r\n  header: React.ReactNode;\r\n  children: React.ReactNode;\r\n  element: React.ElementType;\r\n  className?: string;\r\n  expanded?: boolean;\r\n  inverseExpanded: () => void;\r\n}\r\n\r\nexport const Expandable = (props: Omit<Props, 'expanded'|'inverseExpanded'>) => {\r\n  const [expanded, setExpanded] = useState<boolean>(false);\r\n  const handleToggle = () => {\r\n    setExpanded((prevExpanded: boolean) => !prevExpanded)\r\n  }\r\n\r\n  const { header, children, element: Element, className } = props;\r\n  \r\n  return (\r\n    <Element className={`expandable ${expanded ? 'expanded' : ''} ${className || ''}`}>\r\n      <div className=\"meta\" onClick={handleToggle}>\r\n        {header}\r\n      </div>\r\n      <AnimateHeight className=\"details\" height={expanded ? 'auto' : 0}>\r\n        {children}\r\n      </AnimateHeight>\r\n    </Element>\r\n  );\r\n}\r\n\r\nexport const ControlledExpandable = (props: Props) =>  {\r\n  const { header, children, element: Element, className } = props;\r\n\r\n  return (\r\n    <Element className={`expandable ${props.expanded ? 'expanded' : ''} ${className || ''}`}>\r\n      <div className=\"meta\" onClick={props.inverseExpanded}>\r\n        {header}\r\n      </div>\r\n      <AnimateHeight className=\"details\" height={props.expanded ? 'auto' : 0}>\r\n        {children}\r\n      </AnimateHeight>\r\n    </Element>\r\n  );\r\n}\r\n","import { ApplyBuffEvent, ApplyBuffStackEvent, ApplyDebuffEvent, ApplyDebuffStackEvent, EventType, RemoveBuffEvent, RemoveBuffStackEvent, RemoveDebuffEvent, RemoveDebuffStackEvent } from 'parser/core/Events';\r\n\r\n/**\r\n * Returns the current stacks on a given event\r\n * @param event\r\n */\r\nexport function currentStacks(event: RemoveBuffEvent | RemoveDebuffEvent | ApplyBuffEvent | ApplyDebuffEvent | ApplyBuffStackEvent | RemoveBuffStackEvent | ApplyDebuffStackEvent | RemoveDebuffStackEvent) {\r\n  switch (event.type) {\r\n    case EventType.RemoveBuff:\r\n    case EventType.RemoveDebuff:\r\n      return 0;\r\n    case EventType.ApplyBuff:\r\n    case EventType.ApplyDebuff:\r\n      return 1;\r\n    case EventType.ApplyBuffStack:\r\n    case EventType.RemoveBuffStack:\r\n    case EventType.ApplyDebuffStack:\r\n    case EventType.RemoveDebuffStack:\r\n      return event.stack;\r\n  }\r\n  throw new Error(\"Invalid event type for currentStacks\");\r\n}\r\n","import React from 'react';\r\n\r\nimport {\r\n  formatMilliseconds,\r\n  formatNumber,\r\n  formatPercentage,\r\n} from 'common/format';\r\nimport Analyzer, { Options, SELECTED_PLAYER } from 'parser/core/Analyzer';\r\nimport { ThresholdStyle } from 'parser/core/ParseResults';\r\nimport CrossIcon from 'interface/icons/Cross';\r\nimport Statistic from 'interface/statistics/Statistic';\r\nimport BoringValueText from 'interface/statistics/components/BoringValueText';\r\nimport STATISTIC_ORDER from 'interface/others/STATISTIC_ORDER';\r\nimport CASTS_THAT_ARENT_CASTS from 'parser/core/CASTS_THAT_ARENT_CASTS';\r\nimport CASTABLE_WHILE_CASTING_SPELLS from 'parser/core/CASTABLE_WHILE_CASTING_SPELLS';\r\n\r\nimport Events, { CastEvent, BeginCastEvent } from '../../core/Events';\r\n\r\nconst debug = false;\r\nconst MS_BUFFER = 100;\r\n\r\nclass CancelledCasts extends Analyzer {\r\n  castsCancelled = 0;\r\n  castsFinished = 0;\r\n  beginCastSpell: BeginCastEvent | undefined = undefined;\r\n  wasCastStarted: boolean = false;\r\n  cancelledSpellList: {\r\n    [key: number]: {\r\n      spellName: string,\r\n      amount: number\r\n    }\r\n  } = {};\r\n  IGNORED_ABILITIES: number[] = [];\r\n\r\n  constructor(options: Options){\r\n    super(options);\r\n    this.addEventListener(Events.begincast.by(SELECTED_PLAYER), this.onBeginCast);\r\n    this.addEventListener(Events.cast.by(SELECTED_PLAYER), this.onCast);\r\n    this.addEventListener(Events.fightend, this.onFightend);\r\n  }\r\n\r\n  onBeginCast(event: BeginCastEvent) {\r\n    const spellId = event.ability.guid;\r\n    if (this.IGNORED_ABILITIES.includes(spellId) || CASTS_THAT_ARENT_CASTS.includes(spellId) || CASTABLE_WHILE_CASTING_SPELLS.includes(spellId)) {\r\n      return;\r\n    }\r\n    if (this.wasCastStarted && this.beginCastSpell !== undefined &&\r\n      event.timestamp -\r\n      this.beginCastSpell.timestamp >\r\n      MS_BUFFER) {\r\n      this.castsCancelled += 1;\r\n      this.addToCancelledList();\r\n    }\r\n    this.beginCastSpell = event;\r\n    this.wasCastStarted = true;\r\n  }\r\n\r\n  onCast(event: CastEvent) {\r\n    const spellId = event.ability.guid;\r\n    const beginCastAbility = this.beginCastSpell && this.beginCastSpell.ability;\r\n    if (this.IGNORED_ABILITIES.includes(spellId) || CASTS_THAT_ARENT_CASTS.includes(spellId) || CASTABLE_WHILE_CASTING_SPELLS.includes(spellId) || !beginCastAbility) {\r\n      return;\r\n    }\r\n    if (beginCastAbility.guid !== spellId && this.wasCastStarted) {\r\n      this.castsCancelled += 1;\r\n      this.addToCancelledList();\r\n    }\r\n    if (beginCastAbility.guid === spellId && this.wasCastStarted) {\r\n      this.castsFinished += 1;\r\n    }\r\n    this.wasCastStarted = false;\r\n  }\r\n\r\n  addToCancelledList() {\r\n    if (!this.beginCastSpell) {\r\n      return;\r\n    }\r\n    const beginCastAbility = this.beginCastSpell.ability;\r\n    if (!this.cancelledSpellList[beginCastAbility.guid]) {\r\n      this.cancelledSpellList[beginCastAbility.guid] = {\r\n        'spellName': beginCastAbility.name,\r\n        'amount': 1,\r\n      };\r\n    } else {\r\n      this.cancelledSpellList[beginCastAbility.guid].amount += 1;\r\n    }\r\n    debug && this.log(beginCastAbility.name + ' cast cancelled');\r\n  }\r\n  get totalCasts() {\r\n    return this.castsCancelled + this.castsFinished;\r\n  }\r\n\r\n  get cancelledPercentage() {\r\n    return this.castsCancelled / this.totalCasts;\r\n  }\r\n\r\n  get cancelledCastSuggestionThresholds() {\r\n    return {\r\n      actual: this.cancelledPercentage,\r\n      isGreaterThan: {\r\n        minor: 0.02,\r\n        average: 0.05,\r\n        major: 0.15,\r\n      },\r\n      style: ThresholdStyle.PERCENTAGE,\r\n    };\r\n  }\r\n\r\n  onFightend() {\r\n    debug &&\r\n    console.log(\r\n      formatMilliseconds(this.owner.fightDuration),\r\n      'Casts Finished:',\r\n      `${formatNumber(this.castsFinished)}`,\r\n    );\r\n    debug &&\r\n    console.log(\r\n      formatMilliseconds(this.owner.fightDuration),\r\n      'Casts Cancelled:',\r\n      `${formatNumber(this.castsCancelled)}`,\r\n    );\r\n  }\r\n\r\n  statistic() {\r\n    return (\r\n      <Statistic\r\n        position={STATISTIC_ORDER.CORE(10)}\r\n        size=\"small\"\r\n        className=\"value\"\r\n        tooltip={(\r\n          <>\r\n            You cast {this.totalCasts} spells.\r\n            <ul>\r\n              <li>{this.castsFinished} casts were completed</li>\r\n              <li>{this.castsCancelled} casts were cancelled</li>\r\n            </ul>\r\n          </>\r\n        )}\r\n      >\r\n        <BoringValueText label=\"Cancelled Casts\">\r\n          <CrossIcon /> {formatPercentage(this.cancelledPercentage)}% <small>Casts Cancelled</small>\r\n        </BoringValueText>\r\n      </Statistic>\r\n    );\r\n  }\r\n}\r\n\r\nexport default CancelledCasts;\r\n"],"sourceRoot":""}