{"version":3,"sources":["parser/paladin/protection/modules/Abilities.js","parser/paladin/protection/modules/features/AlwaysBeCasting.js","parser/paladin/protection/modules/core/GrandCrusader.tsx","parser/paladin/protection/modules/features/SpellUsable.tsx","parser/paladin/protection/modules/features/ShieldOfTheRighteous.tsx","parser/paladin/protection/modules/features/NoDamageShieldOfTheRighteous.tsx","parser/paladin/protection/modules/spells/Consecration.tsx","parser/paladin/protection/modules/spells/HammerOfTheRighteous.js","parser/paladin/protection/modules/talents/RighteousProtector.tsx","parser/paladin/protection/modules/spells/LightOfTheProtector.js","parser/paladin/protection/modules/spells/WordOfGlory.tsx","parser/paladin/protection/modules/features/Checklist/Component.js","parser/paladin/protection/modules/features/Checklist/Module.js","parser/paladin/protection/modules/features/MitigationCheck.js","parser/paladin/protection/modules/core/Haste.tsx","parser/paladin/protection/modules/features/OvercapShieldOfTheRighteous.tsx","parser/paladin/protection/modules/features/WordOfGloryTiming.js","parser/paladin/protection/modules/talents/Seraphim.tsx","parser/paladin/protection/modules/talents/SanctifiedWrathProtJudgement.tsx","parser/paladin/protection/modules/talents/HolyShieldSpellBlock.tsx","parser/paladin/protection/modules/talents/Redoubt.tsx","parser/paladin/protection/modules/talents/BlessedHammerDamageReduction.tsx","parser/paladin/protection/modules/talents/FirstAvenger.tsx","parser/paladin/protection/modules/talents/MomentOfGlory.tsx","parser/paladin/protection/CombatLogParser.ts","interface/icons/Uptime.js","parser/shared/modules/features/Checklist/helpers/calculateMedian.js","parser/shared/modules/features/Checklist/helpers/average.js","parser/shared/modules/features/Checklist/helpers/harmonic.js","parser/shared/modules/features/Checklist/Rule.tsx","parser/shared/modules/features/Checklist/Requirement.tsx","parser/shared/modules/features/Checklist/helpers/performanceForThresholds.js","parser/shared/modules/features/Checklist/index.js","parser/shared/modules/features/Checklist/PreparationRule.js","parser/shared/modules/features/Checklist/GenericCastEfficiencyRequirement.js","common/colorForPerformance.ts","interface/others/charts/OneVariableBinomialChart.js","parser/shared/modules/helpers/Probability.tsx","interface/statistics/components/BoringSpellValue/index.tsx","interface/icons/Dropdown.js","interface/common/Expandable.tsx","parser/shared/modules/MitigationCheck.js","parser/paladin/shared/holypower/HolyPowerTracker.js","parser/paladin/shared/holypower/HolyPowerDetails.js","parser/shared/modules/hit-tracking/IgnoredAbilities.ts","parser/shared/modules/hit-tracking/utilities.ts","parser/paladin/shared/spells/Judgment.tsx","parser/shared/modules/features/SelfHealTimingGraph.js"],"names":["Abilities","combatant","this","selectedCombatant","spell","SPELLS","CONSECRATION_CAST","buffSpellId","CONSECRATION_BUFF","id","category","SPELL_CATEGORIES","ROTATIONAL","cooldown","haste","gcd","base","BLESSED_HAMMER_TALENT","charges","enabled","hasTalent","castEfficiency","suggestion","recommendedEfficiency","AVENGERS_SHIELD","SHIELD_OF_THE_RIGHTEOUS","SHIELD_OF_THE_RIGHTEOUS_BUFF","isDefensive","static","HAMMER_OF_THE_RIGHTEOUS","JUDGMENT_CAST_PROTECTION","CRUSADERS_JUDGMENT_TALENT","WORD_OF_GLORY","DEFENSIVE","ARDENT_DEFENDER","UNBREAKABLE_SPIRIT_TALENT","GUARDIAN_OF_ANCIENT_KINGS","GUARDIAN_OF_ANCIENT_KINGS_QUEEN","SERAPHIM_TALENT","SEMI_DEFENSIVE","AVENGING_WRATH","LAY_ON_HANDS","COOLDOWNS","FLASH_OF_LIGHT","OTHERS","DIVINE_STEED","UTILITY","CAVALIER_TALENT","BLESSING_OF_FREEDOM","BLESSING_OF_PROTECTION","BLESSING_OF_SPELLWARDING_TALENT","BLESSING_OF_SACRIFICE","AEGIS_OF_LIGHT_TALENT","CLEANSE_TOXINS","HAMMER_OF_JUSTICE","HAMMER_OF_WRATH","HAND_OF_RECKONING","REBUKE","BLINDING_LIGHT_TALENT","REPENTANCE_TALENT","BASTION_OF_LIGHT_TALENT","CoreAbilities","AlwaysBeCasting","statisticOrder","STATISTIC_ORDER","CORE","when","boss","owner","fight","disableDowntimeSuggestion","suggestionThresholds","addSuggestion","suggest","actual","recommended","SpellLink","JUDGMENT_CAST","icon","i18n","_","formatPercentage","downtimePercentage","isGreaterThan","minor","average","major","style","CoreAlwaysBeCasting","GrandCrusader","options","_totalResets","_exactResets","_inferredResets","_resetChances","abilities","_lastResetSource","addEventListener","Events","cast","by","SELECTED_PLAYER","trackGrandCrusaderChanceCasts","damage","to","trackGrandCrusaderChanceHits","event","includes","ability","guid","HIT_TYPES","DODGE","PARRY","hitType","spellUsable","resetCooldowns","isOnCooldown","endCooldown","timestamp","ecd","getExpectedCooldownDuration","undefined","reduceCooldown","binomChartXAxis","title","tickFormat","value","fill","Statistic","position","DEFAULT","size","tooltip","procChance","dropdown","padding","plotOneVariableBinomChart","BoringSpellValue","GRAND_CRUSADER","label","Analyzer","dependencies","SpellUsable","_hasCJ","gc","spellId","cooldownTriggerEvent","cooldownRemaining","INVALID_COOLDOWN_CONFIG_LAG_MARGIN","triggerInferredReset","isAvailable","CoreSpellUsable","ShieldOfTheRighteous","enemies","totalHits","sotrHits","totalDamageTaken","sotrDamageTaken","trackHits","shouldIgnore","magic","amount","absorbed","overkill","hasBuff","hitsMitigatedThreshold","StatisticBox","SpellIcon","formatThousands","isLessThan","ThresholdStyle","PERCENTAGE","Enemies","NoDamageShieldOfTheRighteous","sotrCastsToHits","Map","lastSotrCastPtr","registerSOTRCast","registerSOTRHit","set","get","push","hitRatioSuggestionThresholds","sotrCastToHitRatio","totalCasts","numCastsWithHit","forEach","hits","length","Consecration","_hitsTaken","_hitsMitigated","onPlayerDamage","uptimeSuggestionThresholds","pctHitsMitigated","BETTER_SPELLS","HammerOfTheRighteous","props","activeSpell","_badCasts","_casts","_handleFiller","every","spells","bind","badCastThreshold","badCastRatio","RighteousProtector","guardianOfAncientKingsReduced","guardianOfAncientKingsWasted","avengingWrathReduced","avengingWrathReductionWasted","active","RIGHTEOUS_PROTECTOR_TALENT","onCast","reduction","guardianReduction","STATISTIC_CATEGORY","TALENTS","BoringSpellValueText","formatNumber","e","LightOfTheProtector","_lastHit","_msTilHeal","_delays","LIGHT_OF_THE_PROTECTOR","_overhealing","_actualHealing","HAND_OF_THE_PROTECTOR_TALENT","_countDelay","_startDelayTimer","heal","_countHeal","_updateDelayRP","delayFromHit","delay","console","error","meta","inefficientCastReason","name","toFixed","isInefficientCast","overhealing","overheal","CRIT","delaySuggestion","overhealSuggestion","reduce","sum","overhealRatio","avgDelay","HEAL_DELAY_THRESHOLD","WordOfGlory","slCount","slWasted","slSotrs","castsFree","castsPayed","castsOverhealed","sotrCast","applybuff","SHINING_LIGHT","slApply","removebuff","slRemove","totalHeal","_event","wastedSlSuggestion","sotrSuggestion","NUMBER","ProtectionPaladinChecklist","thresholds","extras","AbilityRequirement","GenericCastEfficiencyRequirement","getCastEfficiencyForSpellId","Rule","description","Requirement","hotrAbility","hotrBadCasts","hpWaste","sotrHitsMitigated","consecration","SHINING_LIGHT_DESC","wogOverheal","wogSlWaste","wogSotrCasts","PreparationRule","Checklist","Component","combatants","selected","hotr","preparationRuleAnalyzer","shieldOfTheRighteous","noDamageSOTR","lotpDelay","lotp","lotpOverheal","hp","wog","BaseChecklist","CastEfficiency","Combatants","PreparationRuleAnalyzer","HolyPowerDetails","MitigationCheck","args","buffCheckPhysical","buffCheckPhysAndMag","CoreMitigationCheck","Haste","CoreHaste","HASTE_BUFFS","OvercapShieldOfTheRighteous","goodSotrCasts","badSotrCasts","totalSotrOvercapping","lastSotrCastTimestamp","buffTimeAtLastCast","overcapRecords","hpGeneratingSpells","trackSotRCasts","timeDiffBetweenCasts","buffAmountAtCurrentCast","Math","max","ACTIVE_MITIGATION_CAP","castIsForgivable","overcap","min","i","lostUptimeDueToOvercap","getBuffUptime","GENERAL","SOTR_SOFT_CAP","className","map","record","key","formatTimestamp","formatMilliseconds","WordOfGloryTiming","selfHealSpell","tabTitle","tabURL","SelfHealTimingGraph","Seraphim","statTracker","bonusStatGains","onSeraphimGain","getBonusStats","hasteChange","addHaste","currentHastePercentage","crit","versatility","mastery","currentStat","Uptime","uptime","averageHasteGain","CriticalStrike","averageCritGain","Versatility","averageVersatilityGain","Mastery","averageMasteryGain","fightDuration","gain","next","StatTracker","SanctifiedWrathProtJudgement","buffedJudgements","holyPowerWastes","CRIT_NO_HA_CHANGE","CRIT_YES_HA_CHANGE","MAX_HOLY_POWER","SANCTIFIED_WRATH_PROT_TALENT","trackJudgmentCasts","energize","trackedWastedJudgmentHP","hasAW","judgementSource","JUDGMENT_HP_ENERGIZE","wastedHolyPower","waste","wasteDueToSanctifiedWrath","hasHA","HOLY_AVENGER_TALENT","hpChange","resourceChange","preCastHP","wasCrit","totalWastedHP","current","bonusHP","PHYSICAL_DAMAGE","MAGIC_SCHOOLS","ids","PHYSICAL","HolyShieldSpellBlock","spellsHitPlayerCount","holyShieldProcsCount","HOLY_SHIELD_TALENT","trackHolyShieldAbsorbs","trackSpellsHitPlayer","type","BLOCKED_CRIT","BLOCKED_NORMAL","Redoubt","REDOUBT_TALENT","localStatTracker","add","REDOUBT_BUFF","stamina","bonusStaminaGain","strength","bonusStrenghGain","startingStaminaRating","startingStrengthRating","averageStamGain","averageStacks","averageStrengthGain","getStackWeightedBuffUptime","BlessedHammerDamageReduction","totalMeleeHits","reducedDamageHits","totalReducedDamage","currentAttackPower","trackHitsToPlayer","trackCurrentAttackPower","sourceID","BLESSED_HAMMER_DEBUFF","playerId","blessedHammerDamageReduction","attackPower","averageHitReduction","FirstAvenger","lastAvengersShieldCastTimestamp","totalNumHits","totalNumCasts","castToHitsMap","FIRST_AVENGER_TALENT","trackAvengersShieldCasts","trackAvengersShieldHits","has","castTimestamp","numExtraHits","damageEvent","prev","averageHitsPerCast","totalExtraDamage","averageExtraDamage","Array","from","keys","getExtraDamageForCast","MomentOfGlory","damageBoostedHits","MOMENT_OF_GLORY_TALENT","trackASDamage","getBonusDamageFromMoG","baseDamageDone","CombatLogParser","CoreCombatLogParser","specModules","grandCrusader","lightOfTheProtector","wordOfGlory","judgment","Judgment","alwaysBeCasting","checklist","wogTiming","mitigationcheck","overcapSOTR","righteousProtector","seraphim","sanctifiedWrathProtJudgement","holyShieldSpellBlock","redoubt","firstAvenger","momentOfGlory","arcaneTorrent","ArcaneTorrent","holyPowerTracker","HolyPowerTracker","holyPowerDetails","Icon","other","xmlns","viewBox","d","calculateMedian","values","arr","sort","a","b","half","floor","c","p","harmonic","cum","val","PERFORMANCE_METHOD","RuleContext","React","createContext","useState","requirementPerformances","performance","passed","expanded","state","setState","calculateRulePerformance","useCallback","MEDIAN","AVERAGE","LOWEST","FIRST","HARMONIC","Error","requirements","children","isArray","some","child","isValidElement","Provider","prevState","performanceMethod","element","inverseExpanded","header","width","backgroundColor","colorForPerformance","Dropdown","Information","setPerformance","THOUSANDS","DECIMAL","BOOLEAN","SECONDS","valueTooltip","prefix","suffix","thresholdsN","formatThresholdsActual","marginLeft","Tooltip","content","minWidth","marginRight","transition","performanceForGreaterThanThresholds","performanceForLessThanThresholds","isEqual","performanceForThresholds","PureComponent","Consumer","href","potionsUsed","bestPotionUsed","itemsEnchanted","itemsBestEnchanted","weaponsEnhanced","bestWeaponEnhancements","higherFlaskPresent","flaskPresent","higherFoodPresent","foodPresent","renderEnchantRequirements","renderWeaponEnhancementRequirements","renderPotionRequirements","renderFlaskRequirements","renderFoodRequirements","others","captureException","isMaxCasts","casts","maxCasts","efficiency","gotMaxCasts","averageIssueEfficiency","majorIssueEfficiency","OneVariableBinomialChart","hover","probabilities","actualEvent","xAxis","yAxis","yDomain","data","spec","encoding","x","field","axis","grid","format","y","scale","domain","layer","mark","color","line","strokeWidth","filled","disableHeight","BaseChart","height","expectedProcCount","procAttempts","binomialPMF","k","n","numerator","denominator","binomialDistribution","pow","binomialCDF","probability","findMax","pmf","maxP","resetProbabilityArray","actualProcs","_x","poissonBinomialPMF","setMinMaxProbabilities","threshold","procProbabilities","rangeMin","findIndex","rangeMax","slice","Ekj","j","lookup","trackedName","tooltipText","actualEventY","extra","Expandable","setExpanded","Element","onClick","prevExpanded","ControlledExpandable","checksPassedMap","checksFailedMap","checksPhysical","checksMagical","buffCheckMagical","debuffCheckPhysical","debuffCheckMagical","debuffCheckPhysAndMag","findByBossId","softMitigationChecks","physical","magical","onDamageTaken","checks","buffCheck","debuffCheck","tick","IMMUNE","enemy","getEntities","failSum","total","passSum","spellIconId","SHIELD_BLOCK_BUFF","physicalTable","physicalChecks","scope","borderless","borderTop","magicalTable","magicalChecks","fontWeight","filter","resource","RESOURCE_TYPES","HOLY_POWER","getResource","cost","FIRES_OF_JUSTICE_BUFF","ResourceTracker","wasted","wastedHolyPowerPercent","pad","tracker","resourceName","showSpenders","generated","IGNORED","sourceIsFriendly","notableEnemy","IgnoredAbilities","DAMAGE_MODIFIER","retHolyPowerAbilities","DIVINE_STORM","TEMPLARS_VERDICT_DAMAGE","EXECUTION_SENTENCE_TALENT","JUSTICARS_VENGEANCE_TALENT","protHolyPowerAbilities","judgmentSpells","allHolyPowerAbilities","supportedSpecIds","SPECS","PROTECTION_PALADIN","RETRIBUTION_PALADIN","spellCastMap","spellDamageMap","totalJudgmentConsumptions","totalJudgmentCasts","specId","trackDamageEvent","find","getEntity","JUDGMENT_DEBUFF","holyPowerDamageSpell","getSupportedSpellWithId","oldCastNumber","extraJudgmentDamage","oldDamageNumber","tooltipRows","castNum","percentageJudgmentsConsumed","getStatisticTooltip","EnemyInstances","_hpEvents","_deathEvents","_selfhealTimestamps","HEALTHSTONE","death","onDeath","onHealTaken","targetID","url","render","explanation","plot","_deaths","lastHpIndex","hitPoints","maxHitPoints","percentage","round","start_time","log","_hp","startingHP","absorb","baseEncoding","labelExpr","formatTime","zero","nice","interpolate","concat","deaths","minHeight"],"mappings":"iMA2QeA,E,0KAnQX,IAAMC,EAAYC,KAAKC,kBACvB,MAAO,CACL,CACEC,MAAOC,IAAOC,kBACdC,YAAaF,IAAOG,kBAAkBC,GACtCC,SAAUV,EAAUW,iBAAiBC,WACrCC,SAAU,SAAAC,GAAK,OAAI,KAAO,EAAIA,IAC9BC,IAAK,CACHC,KAAM,OAGV,CACEZ,MAAOC,IAAOY,sBACdP,SAAUV,EAAUW,iBAAiBC,WACrCC,SAAU,SAAAC,GAAK,OAAI,GAAK,EAAIA,IAC5BC,IAAK,CACHC,KAAM,MAERE,QAAS,EACTC,QAASlB,EAAUmB,UAAUf,IAAOY,sBAAsBR,IAC1DY,eAAgB,CACdC,YAAY,EACZC,sBAAuB,KAG3B,CACEnB,MAAOC,IAAOmB,gBACdd,SAAUV,EAAUW,iBAAiBC,WACrCC,SAAU,SAAAC,GAAK,OAAI,IAAM,EAAIA,IAC7BC,IAAK,CACHC,KAAM,MAERK,eAAgB,CACdC,YAAY,EACZC,sBAAuB,KAM3B,CACEnB,MAAOC,IAAOoB,wBACdlB,YAAaF,IAAOqB,6BAA6BjB,GACjDkB,aAAa,EACbjB,SAAUV,EAAUW,iBAAiBC,WACrCG,IAAK,CACHa,OAAQ,MAGZ,CACExB,MAAOC,IAAOwB,wBACdnB,SAAUV,EAAUW,iBAAiBC,WACrCC,SAAU,SAAAC,GAAK,OAAI,GAAK,EAAIA,IAC5BI,QAAS,EACTH,IAAK,CACHC,KAAM,MAERG,SAAUlB,EAAUmB,UAAUf,IAAOY,sBAAsBR,IAC3DY,eAAgB,CACdC,YAAY,IAGhB,CACElB,MAAOC,IAAOyB,yBACdpB,SAAUV,EAAUW,iBAAiBC,WACrCC,SAAU,SAAAC,GAAK,OAAI,GAAK,EAAIA,IAC5BI,QAASjB,EAAUmB,UAAUf,IAAO0B,0BAA0BtB,IAAM,EAAI,EACxEM,IAAK,CACHC,KAAM,MAERK,eAAgB,CACdC,YAAY,IAGhB,CACElB,MAAOC,IAAO2B,cACdtB,SAAUV,EAAUW,iBAAiBsB,UACrClB,IAAK,CACHC,KAAM,OAIV,CACEZ,MAAOC,IAAO6B,gBACd3B,YAAaF,IAAO6B,gBAAgBzB,GACpCC,SAAUV,EAAUW,iBAAiBsB,UACrCpB,SAAU,KAAOZ,EAAUmB,UAAUf,IAAO8B,0BAA0B1B,IAAM,GAAM,GAClFY,eAAgB,CACdC,YAAY,IAGhB,CACElB,MAAO,CAACC,IAAO+B,0BAA2B/B,IAAOgC,iCACjD9B,YAAa,CAACF,IAAO+B,0BAA0B3B,GAAIJ,IAAOgC,gCAAgC5B,IAC1FC,SAAUV,EAAUW,iBAAiBsB,UACrCpB,SAAU,IACVQ,eAAgB,CACdC,YAAY,IAGhB,CACElB,MAAOC,IAAOiC,gBACd/B,YAAaF,IAAOiC,gBAAgB7B,GACpCC,SAAUV,EAAUW,iBAAiB4B,eACrC1B,SAAU,GACVE,IAAK,CACHC,KAAM,MAERG,QAASlB,EAAUmB,UAAUf,IAAOiC,gBAAgB7B,IACpDY,eAAgB,CACdC,YAAY,IAGhB,CACElB,MAAOC,IAAOmC,eACdjC,YAAaF,IAAOmC,eAAe/B,GACnCC,SAAUV,EAAUW,iBAAiB4B,eACrCxB,IAAK,CACHC,KAAM,MAERH,SAAU,KAMZ,CACET,MAAOC,IAAOoC,aACdd,aAAa,EACbjB,SAAUV,EAAUW,iBAAiB+B,UACrC7B,SAAU,IACVQ,eAAgB,CACdC,YAAY,EACZC,sBAAuB,KAG3B,CACEnB,MAAOC,IAAOsC,eACdjC,SAAUV,EAAUW,iBAAiBiC,OACrC7B,IAAK,CACHC,KAAM,OAGV,CACEZ,MAAOC,IAAOwC,aACdnC,SAAUV,EAAUW,iBAAiBmC,QACrCjC,SAAU,GACVK,QAASjB,EAAUmB,UAAUf,IAAO0C,gBAAgBtC,IAAM,EAAI,EAC9DM,IAAK,CACHC,KAAM,OAGV,CACEZ,MAAOC,IAAO2C,oBACdtC,SAAUV,EAAUW,iBAAiBmC,QACrCjC,SAAU,GACVE,IAAK,CACHC,KAAM,OAGV,CACEZ,MAAOC,IAAO4C,uBACdtB,aAAa,EACbjB,SAAUV,EAAUW,iBAAiBmC,QACrCjC,SAAU,IACVE,IAAK,CACHC,KAAM,MAERG,SAAUlB,EAAUmB,UAAUf,IAAO6C,gCAAgCzC,KAEvE,CACEL,MAAOC,IAAO6C,gCACdxC,SAAUV,EAAUW,iBAAiB+B,UACrC7B,SAAU,IACVE,IAAK,CACHC,KAAM,MAERG,QAASlB,EAAUmB,UAAUf,IAAO6C,gCAAgCzC,KAEtE,CACEL,MAAOC,IAAO8C,sBACdzC,SAAUV,EAAUW,iBAAiBmC,QACrCjC,SAAU,KAMZ,CACET,MAAOC,IAAO+C,sBACd1C,SAAUV,EAAUW,iBAAiBmC,QACrCjC,SAAU,IACVE,IAAK,CACHC,KAAM,MAERG,QAASlB,EAAUmB,UAAUf,IAAO+C,sBAAsB3C,KAE5D,CACEL,MAAOC,IAAOgD,eACd3C,SAAUV,EAAUW,iBAAiBmC,QACrCjC,SAAU,EACVE,IAAK,CACHC,KAAM,OAGV,CACEZ,MAAOC,IAAOiD,kBACd5C,SAAUV,EAAUW,iBAAiBmC,QACrCjC,SAAU,GACVE,IAAK,CACHC,KAAM,OAGV,CACEZ,MAAOC,IAAOkD,gBACd7C,SAAUV,EAAUW,iBAAiBC,WACrCC,SAAU,SAAAC,GAAK,OAAI,KAAO,EAAIA,IAC9BC,IAAK,CACHC,KAAM,OAGV,CACEZ,MAAOC,IAAOmD,kBACd9C,SAAUV,EAAUW,iBAAiBmC,QACrCjC,SAAU,GAEZ,CACET,MAAOC,IAAOoD,OACd/C,SAAUV,EAAUW,iBAAiBmC,QACrCjC,SAAU,IAEZ,CACET,MAAOC,IAAOqD,sBACdhD,SAAUV,EAAUW,iBAAiBmC,QACrCjC,SAAU,GACVE,IAAK,CACHC,KAAM,MAERG,QAASlB,EAAUmB,UAAUf,IAAOqD,sBAAsBjD,KAE5D,CACEL,MAAOC,IAAOsD,kBACdjD,SAAUV,EAAUW,iBAAiBmC,QACrCjC,SAAU,GACVE,IAAK,CACHC,KAAM,MAERG,QAASlB,EAAUmB,UAAUf,IAAOsD,kBAAkBlD,KAExD,CACEL,MAAOC,IAAOuD,wBACdlD,SAAUV,EAAUW,iBAAiBC,WACrCC,SAAU,IACVM,QAASlB,EAAUmB,UAAUf,IAAOuD,wBAAwBnD,U,GA/P5CoD,K,yDC+BTC,E,4MAHbC,eAAiBC,IAAgBC,KAAK,G,0DAX1BC,GACV,IAAMC,EAAOjE,KAAKkE,MAAMD,KAEnBA,GAASA,EAAKE,MAAMC,2BACvBJ,EAAKhE,KAAKqE,sBAAsBC,eAAc,SAACC,EAASC,EAAQC,GAAlB,OAAkCF,EAAQ,0NAAqL,kBAACG,EAAA,EAAD,CAAWnE,GAAIJ,IAAOwE,cAAcpE,GAAIqE,MAAI,IAAjO,OAAwO,kBAACF,EAAA,EAAD,CAAWnE,GAAIJ,IAAOmB,gBAAgBf,GAAIqE,MAAI,IAAtR,MACnFA,KAAK,wBACLJ,OAAOK,OAAKC,EAAE,qFAAmDC,YAAiBP,OAClFC,YAH2E,WAG3DM,YAAiBN,GAH0C,0B,2CAflF,MAAO,CACLD,OAAQxE,KAAKgF,mBACbC,cAAe,CACbC,MAAO,GACPC,QAAS,IACTC,MAAO,IAETC,MAAO,kB,GATiBC,K,8FCOxBC,E,kDAUJ,WAAYC,GAAmB,IAAD,8BAC5B,cAAMA,IAPRC,aAAuB,EAMO,EAL9BC,aAAuB,EAKO,EAJ9BC,gBAA0B,EAII,EAH9BC,cAAwB,EAGM,EAF9BC,eAE8B,IAU9BC,iBAAmD,KARjD,EAAKC,iBAAiBC,IAAOC,KAAKC,GAAGC,KAAiBjG,MAAM,CAACC,IAAOwB,wBAAyBxB,IAAOY,wBAAyB,EAAKqF,+BAClI,EAAKL,iBAAiBC,IAAOK,OAAOC,GAAGH,KAAkB,EAAKI,8BAHlC,E,0EAYAC,GACvB,CAACrG,IAAOwB,wBAAwBpB,GAAIJ,IAAOY,sBAAsBR,IAAIkG,SAASD,EAAME,QAAQC,QAGjG3G,KAAK4F,eAAiB,EACtB5F,KAAK8F,iBAAmBU,K,mDAGGA,GACtB,CAACI,IAAUC,MAAOD,IAAUE,OAAOL,SAASD,EAAMO,WAGvD/G,KAAK4F,eAAiB,EACtB5F,KAAK8F,iBAAmBU,K,2CAGLQ,EAA0BR,GAC7CxG,KAAKyF,cAAgB,EACrBzF,KAAK2F,iBAAmB,EACxB3F,KAAKiH,eAAeD,EAAaR,K,qCAGpBQ,EAA0BR,GAEmB,IAAD,EAArDQ,EAAYE,aAAa/G,IAAOmB,gBAAgBf,KAClDyG,EAAYG,YAAYhH,IAAOmB,gBAAgBf,IAAI,EAAnD,UAA0DP,KAAK8F,wBAA/D,aAA0D,EAAuBsB,UAAW,GAI9F,GAAIpH,KAAKC,kBAAkBiB,UAAUf,IAAO0B,0BAA0BtB,KAAOyG,EAAYE,aAAa/G,IAAOyB,yBAAyBrB,KAAiC,OAA1BP,KAAK8F,iBAA2B,CAG3K,IAAMuB,EAA0BrH,KAAK6F,UAAUyB,4BAA4BnH,IAAOyB,yBAAyBrB,GAAIP,KAAK8F,uBACxGyB,IAARF,GACFL,EAAYQ,eAAerH,IAAOyB,yBAAyBrB,GAAI8G,EAAKrH,KAAK8F,iBAAiBsB,c,kCAKnF,IAAD,OAEJK,EAAkB,CACtBC,MAAO,UACPC,WAAY,SAACC,GAAD,gBAAsB7C,YAAiB6C,EAAQ,EAAKhC,cAAe,GAAnE,MACZP,MAAO,CACLwC,KAAM,UAGV,OACE,kBAACC,EAAA,EAAD,CACEC,SAAUjE,IAAgBkE,QAC1BC,KAAK,WACLC,QACE,sGACkElI,KAAKyF,aADvE,WAC6FzF,KAAK2F,gBADlG,kEACiL,6BADjL,WAEW3F,KAAK4F,cAFhB,iDAE6Eb,YAAiB/E,KAAKmI,WAAY,GAF/G,wBAKFC,SACE,yBAAK/C,MAAO,CAAEgD,QAAS,QACpBC,YAA0BtI,KAAKyF,aAAczF,KAAK4F,cAAe5F,KAAKmI,WAAY,UAAW,gBAAiB,CAAC,EAAG,IAAMV,GACzH,mDAAwB,uCAAxB,8DAIJ,kBAACc,EAAA,EAAD,CACErI,MAAOC,IAAOqI,eACdZ,MAAK,UAAK5H,KAAKyF,aAAV,WACLgD,MAAM,sB,iCAzEZ,MAnBqB,Q,GAEGC,KAAtBnD,EACGoD,aAAe,CACpB9C,UAAW/F,GA+FAyF,QC3GTqD,E,kDAQJ,WAAYpD,GAAmB,IAAD,8BAC5B,cAAMA,IAJRqD,QAAkB,EAGY,EAF9BC,QAE8B,EAE5B,EAAKD,OAAS,EAAK5I,kBAAkBiB,UAAUf,IAAO0B,0BAA0BtB,IAFpD,E,0DAKhBwI,EAAiBC,GACzBD,IAAY5I,IAAOmB,gBAAgBf,GACjCP,KAAKkH,aAAa6B,IAAY/I,KAAKiJ,kBAAkBF,GAAWG,KAClElJ,KAAK8I,GAAGK,qBAAqBnJ,KAAMgJ,GAE5BhJ,KAAK6I,QAAUE,IAAY5I,IAAOyB,yBAAyBrB,KAC/DP,KAAKoJ,YAAYL,IAAY/I,KAAKiJ,kBAAkBF,GAAWG,KAClElJ,KAAK8I,GAAGK,qBAAqBnJ,KAAMgJ,GAIvC,qEAAoBD,EAASC,O,GAxBPK,KAApBT,EACGD,a,2BACFU,IAAgBV,c,IACnBG,GAAIvD,IAyBOqD,Q,gFCdTU,E,kDAYJ,WAAY9D,GAAmB,IAAD,8BAC5B,cAAMA,IARE+D,aAOoB,IAL9BC,UAAY,EAKkB,EAJ9BC,SAAW,EAImB,EAH9BC,iBAAmB,EAGW,EAF9BC,gBAAkB,EAEY,EA6D9B9F,eAAiBC,IAAgBC,KAAK,IA1DpC,EAAKgC,iBAAiBC,IAAOK,OAAOC,GAAGH,KAAkB,EAAKyD,WAHlC,E,sDAMpBpD,GACR,IAAGqD,YAAa7J,KAAKuJ,QAAS/C,KAAUsD,YAAMtD,GAA9C,CAIA,IAAMuD,EAASvD,EAAMuD,QAAUvD,EAAMwD,UAAY,IAAMxD,EAAMyD,UAAY,GAEzEjK,KAAKwJ,WAAa,EAClBxJ,KAAK0J,kBAAoBK,EACtB/J,KAAKC,kBAAkBiK,QAAQ/J,IAAOqB,6BAA6BjB,MACpEP,KAAKyJ,UAAY,EACjBzJ,KAAK2J,iBAAmBI,M,kCAgBhB/F,GACVA,EAAKhE,KAAKmK,wBACP7F,eAAc,SAACC,EAASC,EAAQC,GAAlB,OAAkCF,EAAQ,2DAAsB,kBAACG,EAAA,EAAD,CAAWnE,GAAIJ,IAAOoB,wBAAwBhB,KAApE,4BACtDqE,KAAKzE,IAAOoB,wBAAwBqD,MACpCJ,OAF8C,UAEpCO,YAAiBP,GAFmB,mDAG9CC,YAH8C,mBAGtBM,YAAiBN,GAHK,0B,kCAQnD,OACE,kBAAC2F,EAAA,EAAD,CACExF,KAAM,kBAACyF,EAAA,EAAD,CAAW9J,GAAIJ,IAAOoB,wBAAwBhB,KACpDqH,MAAK,UAAK7C,YAAiB/E,KAAKyJ,SAAWzJ,KAAKwJ,WAA3C,KACLf,MAAM,0BACNP,QACE,+EAEE,4BACE,4CAAiB,gCAASlI,KAAKyJ,UAA/B,kDAAgG,gCAASa,YAAgBtK,KAAK2J,kBAA9H,aACA,4CAAiB,gCAAS3J,KAAKwJ,UAAYxJ,KAAKyJ,UAAhD,UAAyE,gCAAQ,wCAAjF,uCAA8I,gCAASa,YAAgBtK,KAAK0J,iBAAmB1J,KAAK2J,kBAApM,cAEF,gCAAS5E,YAAiB/E,KAAKyJ,SAAWzJ,KAAKwJ,WAA/C,KANF,oEAMuI,kC,6CAjC7I,MAAO,CACLhF,OAAQxE,KAAKyJ,SAAWzJ,KAAKwJ,UAC7Be,WAAY,CACVrF,MAAO,IACPC,QAAS,GACTC,MAAO,KAETC,MAAOmF,IAAeC,gB,GAzCO/B,KAA7BY,EACGX,aAAe,CACpBY,QAASmB,KA0EEpB,Q,OCNAqB,E,kDAvEX,WAAYnF,GAAmB,IAAD,8BAC1B,cAAMA,IAJFoF,gBAAiD,IAAIC,IAG/B,EAFtBC,gBAAoC,KAIxC,EAAK/E,iBAAiBC,IAAOC,KAAKC,GAAGC,KAAiBjG,MAAMC,IAAOoB,yBAA0B,EAAKwJ,kBAClG,EAAKhF,iBAAiBC,IAAOK,OAAOH,GAAGC,KAAiBjG,MAAMC,IAAOoB,yBAA0B,EAAKyJ,iBAH1E,E,6DAMbxE,GACTA,EAAME,QAAQC,OAASxG,IAAOoB,wBAAwBhB,KAG1DP,KAAK4K,gBAAgBK,IAAIzE,EAAO,IAChCxG,KAAK8K,gBAAkBtE,K,sCAGXA,GAIwB,IAAD,EAH/BA,EAAME,QAAQC,OAASxG,IAAOoB,wBAAwBhB,KAG7B,OAAzBP,KAAK8K,kBACL,UAAA9K,KAAK4K,gBAAgBM,IAAIlL,KAAK8K,wBAA9B,SAAgDK,KAAK3E,O,kCA4BjDxC,GACRA,EAAKhE,KAAKoL,8BACL9G,eAAc,SAACC,EAASC,EAAQC,GAAlB,OAAkCF,EAAQ,iLACxDK,KAAKzE,IAAOoB,wBAAwBqD,MACpCJ,OAAO,wIAA+EO,YAAiBP,MACvGC,YAAY,6HAAqFM,YAAiBN,W,kCAIvH,OACI,kBAACqD,EAAA,EAAD,CACIC,SAAUjE,IAAgBkE,QAC1BC,KAAK,YAEL,kBAACM,EAAA,EAAD,CACIrI,MAAOC,IAAOoB,wBACdqG,MAAK,UAAK7C,YAAiB/E,KAAKqL,oBAA3B,MACL5C,MAAO,kBAAC,QAAD,CAAOlI,GAAG,kF,yCAxC7B,IAAM+K,EAAqBtL,KAAK4K,gBAAgB3C,KAC5CsD,EAAkB,EAOtB,OANAvL,KAAK4K,gBAAgBY,SAAQ,SAACC,EAAMxF,GAC5BwF,EAAKC,OAAS,IACdH,GAAmB,MAGLA,EAAkBD,I,mDAKxC,MAAO,CACH9G,OAAQxE,KAAKqL,mBACbd,WAAY,CACRrF,MAAO,IACPC,QAAS,IACTC,MAAO,KAEXC,MAAOmF,IAAeC,gB,GA/CS/B,KCFrCiD,E,kDAUJ,WAAYnG,GAAmB,IAAD,8BAC5B,cAAMA,IANE+D,aAKoB,IAH9BqC,WAAqB,EAGS,EAF9BC,eAAyB,EAIvB,EAAK9F,iBAAiBC,IAAOK,OAAOC,GAAGH,KAAkB,EAAK2F,gBAFlC,E,2DAKftF,GACVqD,YAAa7J,KAAKuJ,QAAS/C,KAI9BxG,KAAK4L,YAAc,EAChB5L,KAAKC,kBAAkBiK,QAAQ/J,IAAOG,kBAAkBC,MACzDP,KAAK6L,gBAAkB,M,kCAoBf7H,GACVA,EAAKhE,KAAK+L,4BACLzH,eAAc,SAACC,EAASC,EAAQC,GAAlB,OAAkCF,EAAQ,iIACpDK,KAAKzE,IAAOC,kBAAkBwE,MAC9BJ,OAAOK,OAAKC,EAAE,iIAAiEC,YAAiBP,OAChGC,YAH4C,WAG5BM,YAAiBN,GAHW,0B,kCAOrD,OACE,kBAACqD,EAAA,EAAD,CACEC,SAAUjE,IAAgBC,KAAK,GAC/BkE,KAAK,YAEH,kBAACM,EAAA,EAAD,CACErI,MAAOC,IAAOC,kBACdwH,MAAK,UAAK7C,YAAiB/E,KAAKgM,kBAA3B,MACLvD,MAAM,sC,uCAhCd,OAAOzI,KAAK6L,eAAiB7L,KAAK4L,a,iDAIlC,MAAO,CACLpH,OAAQxE,KAAKgM,iBACbzB,WAAY,CACVrF,MAAO,IACPC,QAAS,GACTC,MAAO,IAETC,MAAOmF,IAAeC,gB,GAtCD/B,KAArBiD,EACGhD,aAAe,CACpBY,QAASmB,KAgEEiB,QCrETM,EAAgB,CACpB9L,IAAOyB,yBAAyBrB,GAChCJ,IAAOmB,gBAAgBf,IAGJ2L,E,kDAUnB,WAAYC,GAAQ,IAAD,8BACjB,cAAMA,IALRC,YAAcjM,IAAOwB,wBAIF,EAHnB0K,UAAY,EAGO,EAFnBC,OAAS,EAIJ,EAAKrM,kBAAkBiB,UAAUf,IAAOY,sBAAsBR,MAC/D,EAAK6L,YAAcjM,IAAOY,uBAG5B,EAAKgF,iBAAiBC,IAAOC,KAAKC,GAAGC,KAAiBjG,MAAM,EAAKkM,aAAc,EAAKG,eANnE,E,0DASL/F,IACYyF,EAAcO,MAAMxM,KAAKyM,OAAOvF,aAAawF,KAAK1M,KAAKyM,WAE7EzM,KAAKqM,WAAa,GAGpBrM,KAAKsM,QAAU,I,kCAmBLtI,GAAO,IAAD,OAChBA,EAAKhE,KAAK2M,kBACPrI,eAAc,SAACC,EAASC,EAAQC,GAAlB,OAAkCF,EAAQ,gEAA2B,kBAACG,EAAA,EAAD,CAAWnE,GAAI,EAAK6L,YAAY7L,KAA3D,gCAA8F,kBAACmE,EAAA,EAAD,CAAWnE,GAAIJ,IAAOyB,yBAAyBrB,KAA7I,QAAwJ,kBAACmE,EAAA,EAAD,CAAWnE,GAAIJ,IAAOmB,gBAAgBf,KAA9L,8BAA+N,sCAA/N,6EACtDqE,KAAK,EAAKwH,YAAYxH,MACtBJ,OAAOK,OAAKC,EAAE,2IAAsEC,YAAiB,EAAK6H,kBAC1GnI,YAH8C,YAG7BM,YAAiBN,GAHY,0B,mCAjBnD,OAAOzE,KAAKqM,UAAYrM,KAAKsM,S,uCAI7B,MAAO,CACL9H,OAAQxE,KAAK4M,aACb3H,cAAe,CACbC,MAAO,GACPC,QAAS,IACTC,MAAO,KAETC,MAAO,kB,GAxCqCqD,KAA7BwD,EACZvD,aAAe,CACpB9C,UAAW/F,IACX2M,OAAQ7D,K,gCCDNiE,G,kDAWJ,WAAYrH,GAAmB,IAAD,EAG5B,OAH4B,qBAC5B,cAAMA,IAPEwB,iBAMoB,IAL9B8F,8BAAwC,EAKV,EAJ9BC,6BAAuC,EAIT,EAH9BC,qBAA+B,EAGD,EAF9BC,6BAAuC,EAIrC,EAAKC,OAAS,EAAKjN,kBAAkBiB,UAAUf,IAAOgN,2BAA2B5M,IAC5E,EAAK2M,QAGV,EAAKnH,iBAAiBC,IAAOC,KAAKC,GAAGC,KAAiBjG,MAAMC,IAAOoB,yBAA0B,EAAK6L,QANtE,GAI1B,e,mDAKG5G,GACL,GAAIxG,KAAKgH,YAAYE,aAAa/G,IAAOmC,eAAe/B,IAAK,CAC3D,IAAM8M,EAAYrN,KAAKgH,YAAYQ,eAAerH,IAAOmC,eAAe/B,GA5BhD,KA6BxBP,KAAKgN,sBAAwBK,EAC7BrN,KAAKiN,8BA9BmB,IA8B8BI,OAEtDrN,KAAKiN,8BAhCmB,IAkC1B,GAAIjN,KAAKgH,YAAYE,aAAa/G,IAAO+B,0BAA0B3B,KAAOP,KAAKgH,YAAYE,aAAa/G,IAAOgC,gCAAgC5B,IAAK,CAClJ,IAAM8M,EAAYrN,KAAKsN,kBACvBtN,KAAK8M,+BAAiCO,EACtCrN,KAAK+M,8BArCmB,IAqC8BM,OAEtDrN,KAAK+M,8BAvCmB,M,kCA0D1B,OACE,kBAACjF,EAAA,EAAD,CACEC,SAAUjE,IAAgBkE,QAC1BC,KAAK,WACLzH,SAAU+M,KAAmBC,SAE7B,kBAACC,GAAA,EAAD,CAAsBvN,MAAOC,IAAOgN,4BAClC,kBAAC9C,EAAA,EAAD,CAAW9J,GAAIJ,IAAOmC,eAAe/B,KADvC,IAC+CmN,YAAa1N,KAAKgN,qBAhE1D,KA+DP,KACgG,gDAAsBU,YAAa1N,KAAKiN,6BAhEjI,KAgEyF,aAA8F,6BAC5L,kBAAC5C,EAAA,EAAD,CAAW9J,GAAIJ,IAAO+B,0BAA0B3B,KAFlD,IAE0DmN,YAAa1N,KAAK8M,8BAjErE,KA+DP,KAEoH,gDAAsBY,YAAa1N,KAAK+M,6BAjErJ,KAiE6G,iB,wCAhBxH,IACE,OAAO/M,KAAKgH,YAAYQ,eAAerH,IAAO+B,0BAA0B3B,GAnDhD,KAoDxB,MAAOoN,GACP,OAAO3N,KAAKgH,YAAYQ,eAAerH,IAAOgC,gCAAgC5B,GArDtD,U,GAMGmI,KAA3BmE,GACGlE,aAAe,CACpB3B,YAAa4B,KAiEFiE,UCzDMe,G,kDAenB,WAAYzB,GAAQ,IAAD,8BACjB,cAAMA,IAVR0B,SAAW,KASQ,EARnBC,WAAa,EAQM,EAPnBC,QAAU,GAOS,EALnB3B,YAAcjM,IAAO6N,uBAKF,EAHnBC,aAAe,EAGI,EAFnBC,eAAiB,EAIZ,EAAKjO,kBAAkBiB,UAAUf,IAAOgO,6BAA6B5N,KACtE,EAAK6L,YAAcjM,IAAOgO,6BAC1B,EAAKpI,iBAAiBC,IAAOC,KAAKC,GAAGC,KAAiBG,GAAGH,KAAiBjG,MAAM,EAAKkM,aAAc,EAAKgC,cAIxG,EAAKrI,iBAAiBC,IAAOC,KAAKC,GAAGC,KAAiBjG,MAAM,EAAKkM,aAAc,EAAKgC,aAGtF,EAAKrI,iBAAiBC,IAAOK,OAAOC,GAAGH,KAAkB,EAAKkI,kBAC9D,EAAKtI,iBAAiBC,IAAOsI,KAAKpI,GAAGC,KAAiBjG,MAAM,EAAKkM,aAAc,EAAKmC,YAEjF,EAAKtO,kBAAkBiB,UAAUf,IAAOgN,2BAA2B5M,KACpE,EAAKwF,iBAAiBC,IAAOC,KAAKC,GAAGC,KAAiBjG,MAAMC,IAAOoB,yBAA0B,EAAKiN,gBAfnF,E,6DAmBFhI,GACfxG,KAAK6N,SAAWrH,EAChBxG,KAAK8N,WAAa9N,KAAKyM,OAAOrD,YAAYpJ,KAAKoM,YAAY7L,IAAM,EAAIP,KAAKyM,OAAOxD,kBAAkBjJ,KAAKoM,YAAY7L,M,qCAKvGiG,GACb,GAAIxG,KAAK6N,UAAgC,IAApB7N,KAAK8N,WAA1B,CAGA,IAAMW,EAAejI,EAAMY,UAAYpH,KAAK6N,SAASzG,UACrDpH,KAAK8N,YD9DqB,ICgEvB9N,KAAK8N,WAAaW,IACnBzO,KAAK8N,WAAaW,M,kCAIVjI,GACV,GAAqB,OAAlBxG,KAAK6N,SAAR,CAKA,IAAMa,EAAQlI,EAAMY,WAAapH,KAAK6N,SAAW7N,KAAK6N,SAASzG,UAAY,GAAKpH,KAAK8N,WAMrF,GALGY,EAAQ,GACTC,QAAQC,MAAM,oCAAqCF,GAErD1O,KAAK+N,QAAQ5C,KAAKuD,KAEfA,EA9EsB,KA8EzB,CAIA,IAAMG,EAAOrI,EAAMqI,MAAQ,CACzBC,sBAAsB,QAAD,OAAU9O,KAAKoM,YAAY2C,KAA3B,mCAEvBF,EAAKC,uBAAL,iDAAwEJ,EAAQ,KAAMM,QAAQ,GAA9F,0BACAH,EAAKI,mBAAoB,EACzBzI,EAAMqI,KAAOA,M,iCAGJrI,GACT,IAAM0I,EAAc1I,EAAM2I,UAAY,EAItC,GAHAnP,KAAKiO,cAAgBiB,EACrBlP,KAAKkO,gBAAkB1H,EAAMuD,OAEV,IAAhBmF,GAAqB1I,EAAMO,UAAYH,IAAUwI,KAApD,CAIA,IAAMP,EAAOrI,EAAMqI,MAAQ,CACzBC,sBAAsB,QAAD,OAAU9O,KAAKoM,YAAY2C,KAA3B,mCAEvBF,EAAKC,uBAAL,+EAAsGpB,YAAawB,GAAnH,KACAL,EAAKI,mBAAoB,EACzBzI,EAAMqI,KAAOA,K,kCAuCH7K,GAAO,IAAD,OAChBA,EAAKhE,KAAKqP,iBAAiB/K,eAAc,SAACC,EAASC,EAAQC,GAAlB,OAAkCF,EAAQ,6DAAwB,kBAACG,EAAA,EAAD,CAAWnE,GAAI,EAAK6L,YAAY7L,KAAxD,oIAC9EqE,KAAKzE,IAAO6N,uBAAuBpJ,MACnCJ,OAAOK,OAAKC,EAAE,8GAAuEN,EAAOwK,QAAQ,OACpGvK,YAHsE,YAGrDA,EAAYuK,QAAQ,GAHiC,wBAK3EhL,EAAKhE,KAAKsP,oBAAoBhL,eAAc,SAACC,EAASC,EAAQC,GAAlB,OAAkCF,EAAQ,gEAA2B,kBAACG,EAAA,EAAD,CAAWnE,GAAI,EAAK6L,YAAY7L,KAA3D,qDACjFqE,KAAKzE,IAAO6N,uBAAuBpJ,MACnCJ,OAAOK,OAAKC,EAAE,2GAAsEC,YAAiBP,OACrGC,YAHyE,YAGxDM,YAAiBN,GAHuC,0B,+BAzC9E,OAA2B,IAAxBzE,KAAK+N,QAAQrC,OACP,EAGF1L,KAAK+N,QAAQwB,QAAO,SAACC,EAAKd,GAAN,OAAgBc,EAAMd,IAAO,GAAK1O,KAAK+N,QAAQrC,S,oCAI1E,OAAQ1L,KAAKiO,cAAgBjO,KAAKiO,aAAejO,KAAKkO,iBAAoB,I,yCAI1E,MAAO,CACL1J,OAAQxE,KAAKyP,cACbxK,cAAe,CACbC,MAAO,GACPC,QAAS,GACTC,MAAO,IAETC,MAAO,gB,sCAKT,MAAO,CACLb,OAAQxE,KAAK0P,SAAW,IACxBzK,cAAe,CACbC,MAAO,IACPC,QAASwK,EACTvK,MAAOuK,GAETtK,MAAO,e,GA9HoCqD,KAA5BkF,GACZjF,aAAe,CACpB8D,OAAQ7D,IACR/C,UAAW/F,KCrBf,IAEqB8P,G,kDAWnB,WAAYpK,GAAmB,IAAD,8BAC5B,cAAMA,IAXAqK,QAAU,EAUY,EATtBC,SAAW,EASW,EAPtBC,QAAU,EAOY,EALtBC,UAAY,EAKU,EAJtBC,WAAa,EAIS,EAFtBC,gBAAkB,EAKxB,EAAKnK,iBAAiBC,IAAOC,KAAK/F,MAAMC,IAAO2B,eAAeoE,GAAGC,KAAkB,EAAKF,MACxF,EAAKF,iBAAiBC,IAAOC,KAAK/F,MAAMC,IAAOoB,yBAAyB2E,GAAGC,KAAkB,EAAKgK,UAClG,EAAKpK,iBAAiBC,IAAOoK,UAAUlQ,MAAMC,IAAOkQ,eAAgB,EAAKC,SACzE,EAAKvK,iBAAiBC,IAAOuK,WAAWrQ,MAAMC,IAAOkQ,eAAgB,EAAKG,UAC1E,EAAKzK,iBAAiBC,IAAOsI,KAAKpO,MAAMC,IAAO2B,eAAeoE,GAAGC,KAAkB,EAAKmI,MAP5D,E,iDAUjB9H,GACX,IAAMiK,EAAYjK,EAAMuD,QAAUvD,EAAM2I,UAAY,IAAM3I,EAAMwD,UAAY,GAExExD,EAAMO,UAAYH,IAAUwI,MAAQ5I,EAAMuD,OAAS0G,EA1BhC,MA2BrBzQ,KAAKkQ,iBAAmB,K,2BAIf1J,GACRxG,KAAKC,kBAAkBiK,QAAQ/J,IAAOkQ,cAAc9P,KACrDP,KAAKgQ,WAAa,EAClBhQ,KAAK8P,UAAY,GAEjB9P,KAAKiQ,YAAc,I,+BAINzJ,GACZxG,KAAKC,kBAAkBiK,QAAQ/J,IAAOkQ,cAAc9P,MACrDP,KAAK+P,SAAW,K,8BAIJW,GACd1Q,KAAK6P,SAAW,I,+BAGDa,GAGf1Q,KAAK8P,UAAY,I,kCA2CP9L,GACVA,EAAKhE,KAAKsP,oBACPhL,eAAc,SAACC,EAASC,EAAQC,GAAlB,OAAkCF,EAAQ,4DAAuB,kBAACG,EAAA,EAAD,CAAWnE,GAAIJ,IAAO2B,cAAcvB,KAA3D,gDACtDqE,KAAKzE,IAAO2B,cAAc8C,MAC1BJ,OAF8C,UAEpCO,YAAiBP,GAFmB,gDAG9CC,YAH8C,YAG7BM,YAAiBN,GAHY,wBAKnDT,EAAKhE,KAAK2Q,oBACPrM,eAAc,SAACC,EAASC,EAAQC,GAAlB,OAAkCF,EAAQ,wEAAmC,kBAACG,EAAA,EAAD,CAAWnE,GAAIJ,IAAO2B,cAAcvB,KAAvE,qBAA+F,kBAACmE,EAAA,EAAD,CAAWnE,GAAIJ,IAAOkQ,cAAc9P,KAAnI,MACtDqE,KAAKzE,IAAOkQ,cAAczL,MAC1BJ,OAF8C,kBAE5BA,EAF4B,wBAG9CC,YAH8C,YAG7BA,EAH6B,wBAKnDT,EAAKhE,KAAK4Q,gBACPtM,eAAc,SAACC,EAASC,EAAQC,GAAlB,OAAkCF,EAAQ,0DAAqB,kBAACG,EAAA,EAAD,CAAWnE,GAAIJ,IAAOkQ,cAAc9P,KAAzD,uEAAmI,kBAACmE,EAAA,EAAD,CAAWnE,GAAIJ,IAAOoB,wBAAwBhB,KAAjL,MACtDqE,KAAKzE,IAAOkQ,cAAczL,MAC1BJ,OAF8C,mBAE3BA,EAF2B,YAG9CC,YAH8C,YAG7BA,EAH6B,yB,iCArDnD,OAAOzE,KAAKgQ,UAAYhQ,KAAKiQ,a,yCAI7B,MAAO,CACLzL,OAAQxE,KAAKkQ,gBAAkBlQ,KAAKsL,WACpCrG,cAAe,CACbC,MAAO,GACPC,QAAS,IACTC,MAAO,IAETC,MAAOmF,IAAeC,c,yCAKxB,MAAO,CACLjG,OAAQxE,KAAK8P,SACb7K,cAAe,CACbC,MAAO,EACPC,QAAS,EACTC,MAAO,GAETC,MAAOmF,IAAeqG,U,qCAKxB,MAAO,CACLrM,OAAQxE,KAAK+P,QACb9K,cAAe,CACbC,MAAO,EACPC,QAAS,GACTC,MAAO,IAETC,MAAOmF,IAAeqG,Y,GA1FanI,K,kDCoF1BoI,GArFoB,SAAC,GAA4C,IAA1C3P,EAAyC,EAAzCA,eAAgB4P,EAAyB,EAAzBA,WAAYC,EAAa,EAAbA,OAC1DC,EAAqB,SAAA9E,GAAK,OAC9B,kBAAC+E,GAAA,EAAD,eACE/P,eAAgBA,EAAegQ,4BAA4BhF,EAAMjM,QAC7DiM,KAOR,OACE,kBAAC,KAAD,KACE,kBAACiF,GAAA,EAAD,CACErC,KAAK,2CACLsC,YAAY,uEAEZ,kBAACJ,EAAD,CAAoB/Q,MAAOC,IAAOmB,gBAAgBf,KAClD,kBAAC0Q,EAAD,CAAoB/Q,MAAOC,IAAOyB,yBAAyBrB,KAC3D,kBAAC+Q,GAAA,EAAD,CACEvC,KAAM,2CAAM,kBAACrK,EAAA,EAAD,CAAWnE,GAAIyQ,EAAOO,YAAYhR,KAAxC,UACN2H,QAAS,iDAAY,sCAAZ,6EACT6I,WAAYA,EAAWS,eAEzB,kBAACP,EAAD,CAAoB/Q,MAAOC,IAAOmC,eAAe/B,MAGnD,kBAAC6Q,GAAA,EAAD,CACErC,KACE,qEACgC,kBAACrK,EAAA,EAAD,CAAWnE,GAAIJ,IAAOoB,wBAAwBhB,KAD9E,QACyF,kBAACmE,EAAA,EAAD,CAAWnE,GAAIJ,IAAOC,kBAAkBG,MAGnI8Q,YACE,gDACW,kBAAC3M,EAAA,EAAD,CAAWnE,GAAIJ,IAAOC,kBAAkBG,KADnD,kGACwJ,6BADxJ,OAEM,kBAACmE,EAAA,EAAD,CAAWnE,GAAIJ,IAAOoB,wBAAwBhB,KAFpD,8CAEqG,kBAACmE,EAAA,EAAD,CAAWnE,GAAIJ,IAAO6B,gBAAgBzB,KAF3I,sFAEoO,kBAACmE,EAAA,EAAD,CAAWnE,GAAIJ,IAAOoB,wBAAwBhB,KAFlR,qBAMF,kBAAC+Q,GAAA,EAAD,CAAavC,KAAK,kCAAkCgC,WAAYA,EAAWU,UAC3E,kBAACH,GAAA,EAAD,CAAavC,KAAM,2DAAsB,kBAACrK,EAAA,EAAD,CAAWnE,GAAIJ,IAAOoB,wBAAwBhB,MAC1EwQ,WAAYA,EAAWW,kBACvBxJ,QAAQ,2GACrB,kBAACoJ,GAAA,EAAD,CACEvC,KACE,2DAAsB,kBAACrK,EAAA,EAAD,CAAWnE,GAAIJ,IAAOC,kBAAkBG,MAEhEwQ,WAAYA,EAAWY,eAEzB,kBAACV,EAAD,CAAoB/Q,MAAOC,IAAO6B,gBAAgBzB,GAChDwO,KAAO,oCAAE,kBAACrK,EAAA,EAAD,CAAWnE,GAAIJ,IAAO6B,gBAAgBzB,KAAxC,uBAGX,kBAAC6Q,GAAA,EAAD,CAAMrC,KAAM,2CAAM,kBAACrK,EAAA,EAAD,CAAWnE,GAAIJ,IAAO2B,cAAcvB,KAA1C,qBACV8Q,YACE,sDACiB,kBAAC3M,EAAA,EAAD,CAAWnE,GAAIJ,IAAO2B,cAAcvB,KADrD,sCAC8F,kBAACmE,EAAA,EAAD,CAAWnE,GAAIJ,IAAOgO,6BAA6B5N,KADjJ,0BAC8K,kCAD9K,8BACmN,kBAACmE,EAAA,EAAD,CAAWnE,GAAIJ,IAAOoB,wBAAwBhB,KADjQ,uCAC2S,kBAACmE,EAAA,EAAD,CAAWnE,GAAIJ,IAAOyR,mBAAmBrR,KADpV,yBACgX,kBAACmE,EAAA,EAAD,CAAWnE,GAAIJ,IAAO2B,cAAcvB,KADpZ,eACsa,6BACpa,6DAGJ,kBAAC+Q,GAAA,EAAD,CAAavC,KAAM,oCAAE,kBAACrK,EAAA,EAAD,CAAWnE,GAAIJ,IAAO2B,cAAcvB,KAAtC,iCACN2H,QAAQ,+GACR6I,WAAYA,EAAWc,cACpC,kBAACP,GAAA,EAAD,CAAavC,KAAM,uDAAkB,kBAACrK,EAAA,EAAD,CAAWnE,GAAIJ,IAAOyR,mBAAmBrR,KAA3D,WACN2H,QAAQ,yEACR6I,WAAYA,EAAWe,aACpC,kBAACR,GAAA,EAAD,CAAavC,KAAM,iDAAY,kBAACrK,EAAA,EAAD,CAAWnE,GAAIJ,IAAOyR,mBAAmBrR,KAArD,wBACNwQ,WAAYA,EAAWgB,aACvB7J,QAAQ,0GAEvB,kBAAC8J,GAAA,EAAD,CAAiBjB,WAAYA,MChE7BkB,G,uKAgBF,OACE,kBAACC,GAAD,CACEnS,UAAWC,KAAKmS,WAAWC,SAC3BjR,eAAgBnB,KAAKmB,eACrB6P,OAAQ,CACNO,YAAavR,KAAKqS,KAAKjG,aAEzB2E,WAAU,2BACL/Q,KAAKsS,wBAAwBvB,YADxB,IAERY,aAAc3R,KAAK2R,aAAa5F,2BAChC2F,kBAAmB1R,KAAKuS,qBAAqBpI,uBAC7CqI,aAAcxS,KAAKwS,aAAapH,6BAChCqH,UAAWzS,KAAK0S,KAAKrD,gBACrBsD,aAAc3S,KAAK0S,KAAKpD,mBACxBkC,aAAcxR,KAAKqS,KAAK1F,iBACxB8E,QAASzR,KAAK4S,GAAGvO,qBACjBwN,YAAa7R,KAAK6S,IAAIvD,mBACtBwC,WAAY9R,KAAK6S,IAAIlC,mBACrBoB,aAAc/R,KAAK6S,IAAIjC,uB,GAlCTkC,KAAlBb,GACGtJ,aAAe,CACpBxH,eAAgB4R,IAChBZ,WAAYa,IACZnN,UAAW/F,IACXwS,wBAAyBW,IACzBV,qBAAsBjJ,EACtBkJ,aAAc7H,EACdgH,aAAchG,EACd+G,KAAM9E,GACNyE,KAAMnG,EACN0G,GAAIM,IACJL,IAAKjD,IA6BMqC,UCzCAkB,G,kDAdb,aAAqB,IAAD,iDAALC,EAAK,yBAALA,EAAK,uBAClB,+BAASA,KACJC,kBAAoB,CACvBlT,IAAOqB,6BAA6BjB,IAGtC,EAAK+S,oBAAsB,CACzBnT,IAAO6B,gBAAgBzB,GACvBJ,IAAO+B,0BAA0B3B,IARjB,E,iBADQgT,G,mBCAxBC,G,4HAAcC,MAAdD,GACGE,Y,2BACFD,KAAUC,a,mBAEZvT,IAAOiC,gBAAgB7B,GAAK,MAIlBiT,UCSTG,G,kDAqBJ,WAAYnO,GAAmB,IAAD,8BAC5B,cAAMA,IAjBEwB,iBAgBoB,IAd9B4M,cAAwB,EAcM,EAb9BC,aAAuB,EAaO,EAZ9BC,qBAA+B,EAYD,EAX9BC,sBAAgC,EAWF,EAV9BC,mBAA6B,EAUC,EAT9BC,eAAkC,GASJ,EAP9BC,mBAAqB,CACnB/T,IAAOY,sBACPZ,IAAOwB,wBACPxB,IAAOkD,gBACPlD,IAAOyB,0BAKP,EAAKmE,iBAAiBC,IAAOC,KAAKC,GAAGC,KAAiBjG,MAAMC,IAAOoB,yBAA0B,EAAK4S,gBAFtE,E,2DAKf3N,GACb,GAAmC,IAA/BxG,KAAK+T,sBAIP,OAHA/T,KAAK4T,eAAiB,EACtB5T,KAAK+T,sBAAwBvN,EAAMY,eACnCpH,KAAKgU,mBArCc,MAwCrB,IAAMI,EAAuB5N,EAAMY,UAAYpH,KAAK+T,sBAC9CM,EAA0BC,KAAKC,IAAI,EAAGvU,KAAKgU,mBAAqBI,GAClEC,GAzCcG,MAyC+BxU,KAAKyU,iBAAiBjO,IACrExG,KAAK6T,cAAgB,EACrB7T,KAAKiU,eAAe9I,KAAK,CACvBlF,KAAKO,EACLkO,QA/CsB,MA+CWL,KAInCrU,KAAK4T,eAAiB,EAGxB5T,KAAK+T,sBAAwBvN,EAAMY,UACnCpH,KAAKgU,mBAAqBM,KAAKK,IAAIN,EAtDd,KADK,S,uCAgEX7N,GACf,IAAK,IAAIoO,EAAI,EAAGA,EAAI5U,KAAKkU,mBAAmBxI,OAAQkJ,IAClD,GAAI5U,KAAKgH,YAAYoC,YAAYpJ,KAAKkU,mBAAmBU,GAAGrU,IAC1D,OAAO,EAGX,OAAO,I,kCAGqB,IAAD,OAGrBsU,EA3Ee,MAyEI7U,KAAK4T,cAAgB5T,KAAK6T,cAC1B7T,KAAKC,kBAAkB6U,cAAc3U,IAAOqB,6BAA6BjB,IAElG,OACE,oCACE,kBAACuH,EAAA,EAAD,CACEC,SAAUjE,IAAgBkE,QAC1BC,KAAK,WACLzH,SAAU+M,KAAmBwH,QAC7B7M,QACE,gDACYwF,YAAamH,EAlFtB,KAiFH,+BACoF,kBAACnQ,EAAA,EAAD,CAAWnE,GAAIJ,IAAOoB,wBAAwBhB,KADlI,IACyI,6BADzI,oCAEmC,kBAACmE,EAAA,EAAD,CAAWnE,GAAIJ,IAAOoB,wBAAwBhB,KAFjF,mBAEwGmN,YAAasH,GAFrH,8BAKF5M,SACE,oCACE,2BAAO6M,UAAU,yBACf,+BACE,4BACE,8CACA,oDAGJ,+BACGjV,KAAKiU,eAAeiB,KAAI,SAACC,EAAuBP,GAAxB,OACvB,wBAAIQ,IAAKR,GACP,4BAAK,EAAK1Q,MAAMmR,gBAAgBF,EAAOlP,KAAKmB,YAC5C,4BAAKkO,YAAmBH,EAAOT,kBAQ3C,kBAACnM,EAAA,EAAD,CAAkBrI,MAAOC,IAAOoB,wBAC9BqG,MAAK,UAAK8F,YAAamH,EA5GpB,KA4GE,KACLpM,MAAM,qC,GAxGwBC,KAApCiL,GACGhL,aAAe,CACpB3B,YAAa4B,GA8GF+K,U,UC/GA4B,G,kDAdb,aAAsB,IAAD,iDAANnC,EAAM,yBAANA,EAAM,uBACnB,+BAASA,KACJoC,cAAgBrV,IAAO2B,cAC5B,EAAK2T,SAAW,kBAChB,EAAKC,OAAS,mBAJK,E,qDAQnB,OACE,kBAACC,GAAA,EAAD,U,GAX0BA,M,4DCoB1BC,G,kDAUJ,WAAYpQ,GAAmB,IAAD,EAG5B,OAH4B,qBAC5B,cAAMA,IANEqQ,iBAKoB,IAH9BC,eAA+B,GAK7B,EAAK5I,OAAS,EAAKjN,kBAAkBiB,UAAUf,IAAOiC,gBAAgB7B,IACjE,EAAK2M,QAGV,EAAKnH,iBAAiBC,IAAOoK,UAAU9J,GAAGH,KAAiBjG,MAAMC,IAAOiC,iBAAkB,EAAK2T,gBANnE,GAI1B,e,2DAyBWvP,GACbxG,KAAK8V,eAAe3K,KAAKnL,KAAKgW,cAAchW,KAAK6V,gB,oCAGrCA,GACZ,IAAMI,EAAczC,GAAM0C,SAASL,EAAYM,uBApD7B,KAoDsEN,EAAYM,uBAEpG,MAAO,CACLvV,MAAOqV,EACPG,KAxDgB,IAyDhBC,YAzDgB,IA0DhBC,QA1DgB,O,oDA8DUC,GAC5B,OAAOA,EAAeA,GAAe,U,kCAKrC,OACE,kBAACzO,EAAA,EAAD,CACEC,SAAUjE,IAAgBkE,QAC1BC,KAAK,WACLzH,SAAU+M,KAAmBC,SAE7B,kBAACC,GAAA,EAAD,CAAsBvN,MAAOC,IAAOiC,iBAClC,kBAACoU,GAAA,EAAD,MADF,IACkBzR,YAAiB/E,KAAKyW,OAAQ,GADhD,KACqD,yCAAqB,6BACxE,kBAAC,KAAD,MAFF,IAEiB1R,YAAiB/E,KAAK0W,kBAFvC,KAE2D,uDAAmC,6BAC5F,kBAACC,GAAA,EAAD,MAHF,IAG0B5R,YAAiB/E,KAAK4W,iBAHhD,KAGmE,sDAAkC,6BACnG,kBAACC,GAAA,EAAD,MAJF,IAIuB9R,YAAiB/E,KAAK8W,wBAJ7C,KAIuE,6DAAyC,6BAC9G,kBAACC,GAAA,EAAD,MALF,IAKmBhS,YAAiB/E,KAAKgX,oBALzC,KAK+D,yDAAqC,iC,6BAnDxG,OAAOhX,KAAKC,kBAAkB6U,cAAc3U,IAAOiC,gBAAgB7B,IAAMP,KAAKkE,MAAM+S,gB,yCAIpF,MAhCkB,IAgCKjX,KAAKyW,S,sCAI5B,MApCkB,IAoCKzW,KAAKyW,S,6CAI5B,MAxCkB,IAwCKzW,KAAKyW,S,uCAI5B,OAAOzW,KAAK8V,eAAeZ,KAAI,SAACgC,GAAD,OAAsBA,EAAKtW,SAAO2O,QAAO,SAACC,EAAK2H,GAAN,OAAe3H,EAAM2H,IAAM,GAAKnX,KAAK8V,eAAepK,OAAS1L,KAAKyW,W,GApCvH/N,KAAjBkN,GACGjN,aAAe,CACpBkN,YAAauB,MA4EFxB,UCFAyB,G,kDAjFX,WAAY7R,GAAmB,IAAD,EAG1B,OAH0B,qBAC1B,cAAMA,IAPV8R,iBAA2B,EAMG,EAL9BC,gBAA4B,GAKE,EAJ9BC,kBAAoB,EAIU,EAH9BC,mBAAqB,EAGS,EAF9BC,eAAiB,EAIb,EAAKxK,OAAS,EAAKjN,kBAAkBiB,UAAUf,IAAOwX,6BAA6BpX,IAC9E,EAAK2M,QAIV,EAAKnH,iBAAiBC,IAAOC,KAAKC,GAAGC,KAAiBjG,MAAMC,IAAOyB,0BAA2B,EAAKgW,oBACnG,EAAK7R,iBAAiBC,IAAO6R,SAAS3R,GAAGC,KAAkB,EAAK2R,yBARtC,GAItB,e,+DAOWtR,GACXxG,KAAKC,kBAAkBiK,QAAQ/J,IAAOmC,eAAe/B,MACrDP,KAAKsX,kBAAoB,K,8CAIT9Q,GACpB,IAAMuR,EAAiB/X,KAAKC,kBAAkBiK,QAAQ/J,IAAOmC,eAAe/B,IAEtEyX,EAA2BxR,EAAME,QAAQC,OAASxG,IAAO8X,qBAAqB1X,GAC9E2X,EAA2C,OAAhB1R,EAAM2R,YAAkC5Q,IAAhBf,EAAM2R,OAAuB3R,EAAM2R,MAAQ,EACpG,GAAIJ,GAASC,EAAiB,CAC1B,IAAMI,EAAoCpY,KAAKoY,0BAA0B5R,GACrE0R,GAAiD,IAA9BE,GACnBpY,KAAKuX,gBAAgBpM,KAAKiN,M,gDAmBZ5R,GACtB,IAAM6R,EAAiBrY,KAAKC,kBAAkBiK,QAAQ/J,IAAOmY,oBAAoB/X,IAC3EgY,EAAmB/R,EAAMgS,eACzBC,EAAYzY,KAAK0X,gBAAkBa,EAAW/R,EAAM2R,OACpDO,EAAoBH,IAAavY,KAAKwX,mBAAqBe,IAAavY,KAAKyX,mBACnF,OAAKY,IAAUK,GAAWD,EAAY,IAAQJ,GAASI,EAAY,EACxDjS,EAAM2R,MAEN,I,kCAKX,IAAMQ,EAAgB3Y,KAAKuX,gBAAgBhI,QAAO,SAACC,EAAKoJ,GAAN,OAAkBpJ,EAAMoJ,IAAS,GAC7EC,EAAmC,EAAxB7Y,KAAKsX,iBAAwBqB,EAC9C,OACI,kBAAC7Q,EAAA,EAAD,CACIC,SAAUjE,IAAgBkE,QAC1BC,KAAK,WACLzH,SAAU+M,KAAmBC,QAC7BtF,QACI,oCACI,2BAA4B,EAAxBlI,KAAKsX,kBADb,8DACiG,6BAC7F,2BAAIqB,GAFR,kDAMJ,kBAACpQ,EAAA,EAAD,CACIrI,MAAOC,IAAOwX,6BACd/P,MAAO8F,YAAamL,GACpBpQ,MAAM,0B,GAjFiBC,KCDrCoQ,G,OAAkBC,EAAcC,IAAIC,SA0D3BC,G,kDAhDb,WAAY1T,GAAmB,IAAD,EAG5B,OAH4B,qBAC5B,cAAMA,IAJR2T,qBAA+B,EAGD,EAF9BC,qBAA+B,EAI7B,EAAKlM,OAAS,EAAKjN,kBAAkBiB,UAAUf,IAAOkZ,mBAAmB9Y,IACpE,EAAK2M,QAGV,EAAKnH,iBAAiBC,IAAOgE,SAAS9D,GAAGC,KAAiBjG,MAAMC,IAAOkZ,oBAAqB,EAAKC,wBACjG,EAAKvT,iBAAiBC,IAAOK,OAAOC,GAAGH,KAAkB,EAAKoT,sBAPlC,GAI1B,e,iEAMiB/S,GACfA,EAAME,QAAQ8S,OAASV,KACzB9Y,KAAKmZ,sBAAwB,EACzB3S,EAAMO,UAAYH,IAAU6S,cAAgBjT,EAAMO,UAAYH,IAAU8S,iBAC1E1Z,KAAKoZ,sBAAwB,M,6CAKZ5S,GACjBA,EAAME,QAAQC,OAASxG,IAAOkZ,mBAAmB9Y,KACnDP,KAAKoZ,sBAAwB,K,kCAK/B,OACE,kBAACtR,EAAA,EAAD,CACEC,SAAUjE,IAAgBkE,QAC1BC,KAAK,WACLzH,SAAU+M,KAAmBC,QAC7BtF,QACE,2DACuBwF,YAAa1N,KAAKoZ,sBADzC,WACwE1L,YAAa1N,KAAKmZ,sBAD1F,WACwH,6BADxH,mBAEkB,4BAAKpU,YAAiB/E,KAAKoZ,qBAAqBpZ,KAAKmZ,sBAArD,MAFlB,wBAMA,kBAAC5Q,EAAA,EAAD,CACErI,MAAOC,IAAOkZ,mBACdzR,MAAO5H,KAAKoZ,qBACZ3Q,MAAM,wB,GA7CiBC,KCN7BiR,G,kDAQJ,WAAYnU,GAAmB,IAAD,EAG5B,GAH4B,qBAC5B,cAAMA,IAHEqQ,iBAEoB,EAE5B,EAAK3I,OAAS,EAAKjN,kBAAkBiB,UAAUf,IAAOyZ,eAAerZ,KAChE,EAAK2M,OACR,sBAEF,IAAM2M,EAAgCrU,EAAQqQ,YANlB,OAO5BgE,EAAiBC,IAAI3Z,IAAO4Z,aAAaxZ,GAAI,CAC3CyZ,QAAS,EAAKC,iBAAiBJ,GAC/BK,SAAU,EAAKC,iBAAiBN,KATN,E,6DAabhE,GACf,MAxBkB,IAwBXA,EAAYuE,wB,uCAGJvE,GACf,MA5BkB,IA4BXA,EAAYwE,yB,kCAQnB,IAAMC,EAAkBta,KAAKia,iBAAiBja,KAAK6V,aAAe7V,KAAKua,cACjEC,EAAsBxa,KAAKma,iBAAiBna,KAAK6V,aAAe7V,KAAKua,cAC3E,OACE,kBAACzS,EAAA,EAAD,CACEC,SAAUjE,IAAgBkE,QAC1BC,KAAK,WACLzH,SAAU+M,KAAmBC,QAC7BtF,QACE,qFACiDwF,YAAa4M,GAD9D,gBAC6F5M,YAAa8M,GAD1G,eAKF,kBAACjS,EAAA,EAAD,CACErI,MAAOC,IAAOyZ,eACdhS,MAAO8F,YAAa1N,KAAKua,eACzB9R,MAAM,sB,oCApBZ,OAAOzI,KAAKC,kBAAkBwa,2BAA2Bta,IAAO4Z,aAAaxZ,IAAMP,KAAKkE,MAAM+S,kB,GA9B5EvO,KAAhBiR,GACGhR,aAAe,CACpBkN,YAAauB,MAuDFuC,UCzDTe,G,kDAYJ,WAAYlV,GAAmB,IAAD,EAG5B,OAH4B,qBAC5B,cAAMA,IARE+D,aAOoB,IAL9BoR,eAAyB,EAKK,EAJ9BC,kBAA4B,EAIE,EAH9BC,mBAA6B,EAGC,EAF9BC,mBAAoC,KAIlC,EAAK5N,OAAS,EAAKjN,kBAAkBiB,UAAUf,IAAOY,sBAAsBR,IACvE,EAAK2M,QAGV,EAAKnH,iBAAiBC,IAAOK,OAAOC,GAAGH,KAAkB,EAAK4U,mBAC9D,EAAKhV,iBAAiBC,IAAOK,OAAOC,GAAGH,KAAkB,EAAK6U,yBAPlC,GAI1B,e,8DAMcxU,IAChBxG,KAAK2a,gBAAkB,EAClBnU,EAAMyU,UAAajb,KAAKuJ,QAAQA,QAAQ/C,EAAMyU,aAG1Bjb,KAAKuJ,QAAQA,QAAQ/C,EAAMyU,UAAU/Q,QAAQ/J,IAAO+a,sBAAsB3a,GAAIiG,EAAMY,eAAWG,OAAWA,EAAWvH,KAAKkE,MAAMiX,YAEvJnb,KAAK4a,mBAAqB,EAC1B5a,KAAK6a,oBAAsB7a,KAAKob,iC,8CAIZ5U,GAClB,gBAAiBA,GAASA,EAAM6U,cAClCrb,KAAK8a,mBAAqBtU,EAAM6U,e,kCAgBlC,OACE,kBAACvT,EAAA,EAAD,CACEC,SAAUjE,IAAgBkE,QAC1BC,KAAK,WACLzH,SAAU+M,KAAmBC,QAC7BtF,QACE,+CACU,2BAAIwF,YAAa1N,KAAKsb,sBADhC,uCAC6F,kBAAC5W,EAAA,EAAD,CAAWnE,GAAIJ,IAAOY,sBAAsBR,KADzI,MAKF,kBAACgI,EAAA,EAAD,CACErI,MAAOC,IAAOY,sBACd6G,MAAO8F,YAAa1N,KAAK6a,oBACzBpS,MAAK,8BAAyBzI,KAAK4a,kBAA9B,e,mDAzBX,OAAK5a,KAAK8a,mBAGuB,GAA1B9a,KAAK8a,mBAA0B,IAF7B,I,0CAMT,OAAO9a,KAAK6a,mBAAqB7a,KAAK4a,sB,GAhDClS,KAArCgS,GACG/R,aAAe,CACpBY,QAASmB,KAuEEgQ,UCmBAa,G,kDAnFb,WAAY/V,GAAmB,IAAD,EAG5B,OAH4B,qBAC5B,cAAMA,IANRgW,gCAA0C,EAKZ,EAJ9BC,aAAuB,EAIO,EAH9BC,cAAwB,EAGM,EAF9BC,cAA4C,IAAI9Q,IAI9C,EAAKqC,OAAS,EAAKjN,kBAAkBiB,UAAUf,IAAOyb,qBAAqBrb,IACtE,EAAK2M,QAGV,EAAKnH,iBAAiBC,IAAOC,KAAKC,GAAGC,KAAiBjG,MAAMC,IAAOmB,iBAAkB,EAAKua,0BAC1F,EAAK9V,iBAAiBC,IAAOK,OAAOH,GAAGC,KAAiBjG,MAAMC,IAAOmB,iBAAkB,EAAKwa,yBAPhE,GAI1B,e,qEAMqBtV,GACvBxG,KAAKwb,gCAAkChV,EAAMY,UAC7CpH,KAAK0b,eAAiB,I,8CAGAlV,GACtB,GAAIA,EAAMY,UAAYpH,KAAKwb,gCAzBe,IAyBkD,CACrFxb,KAAK2b,cAAcI,IAAI/b,KAAKwb,kCAC/Bxb,KAAK2b,cAAc1Q,IAAIjL,KAAKwb,gCAAiC,IAE/Dxb,KAAKyb,cAAgB,EACrB,IAAMhQ,EAAkCzL,KAAK2b,cAAczQ,IAAIlL,KAAKwb,sCACvDjU,IAATkE,GACFA,EAAKN,KAAK3E,M,4CAKMwV,GACpB,IAAKhc,KAAK2b,cAAcI,IAAIC,GAC1B,OAAO,EAET,IAAMvQ,EAAkCzL,KAAK2b,cAAczQ,IAAI8Q,GAC/D,QAAazU,IAATkE,EACF,OAAO,EAET,IAAMwQ,EAAexQ,EAAKC,OA5CI,EA4CiCD,EAAKC,OA5CtC,EA4C2E,EACzG,OAAQD,EAAKyJ,KAAI,SAACgH,GAAD,OAAiBA,EAAYnS,QAAUmS,EAAYlS,UAAY,MACnEuF,QAAO,SAAC4M,EAAMvD,GAAP,OAAmBuD,EAAOvD,IAAS,GAAKnN,EAAKC,OACvDuQ,I,kCAkBV,OACE,kBAACnU,EAAA,EAAD,CACEC,SAAUjE,IAAgBkE,QAC1BC,KAAK,WACLzH,SAAU+M,KAAmBC,QAC7BtF,QACE,0DACuB,2BAAIwF,YAAa1N,KAAKoc,qBAD7C,wBAC0F,kBAAC1X,EAAA,EAAD,CAAWnE,GAAIJ,IAAOmB,gBAAgBf,KAAM,6BADtI,wDAEyD,2BAAImN,YAAa1N,KAAKqc,mBAF/E,yBAMF,kBAAC9T,EAAA,EAAD,CACErI,MAAOC,IAAOyb,qBACdhU,MAAO8F,YAAa1N,KAAKsc,oBACzB7T,MACE,wEACmC,kBAAC/D,EAAA,EAAD,CAAWnE,GAAIJ,IAAOmB,gBAAgBf,KADzE,U,yCA9BR,OAAOP,KAAKyb,aAAezb,KAAK0b,gB,uCAGF,IAAD,OAC7B,OAAOa,MAAMC,KAAKxc,KAAK2b,cAAcc,QACtBvH,KAAI,SAAC8G,GAAD,OAAmB,EAAKU,sBAAsBV,MAClDzM,QAAO,SAAC4M,EAAMvD,GAAP,OAAmBuD,EAAOvD,IAAS,K,yCAIzD,OAAO5Y,KAAKqc,iBAAmBrc,KAAK0b,kB,GA3DbhT,KC+CZiU,G,kDA7Cb,WAAYnX,GAAmB,IAAD,EAG5B,OAH4B,qBAC5B,cAAMA,IAJRoX,kBAA4B,EAGE,EAF9BP,iBAA2B,EAIzB,EAAKnP,OAAS,EAAKjN,kBAAkBiB,UAAUf,IAAO0c,uBAAuBtc,IACxE,EAAK2M,QAIV,EAAKnH,iBAAiBC,IAAOK,OAAOH,GAAGC,KAAiBjG,MAAMC,IAAOmB,iBAAkB,EAAKwb,eAPhE,GAI1B,e,0DAMUtW,GACPxG,KAAKC,kBAAkBiK,QAAQ/J,IAAO0c,uBAAuBtc,GAAIiG,EAAMY,eAAWG,OAAWA,EAAWvH,KAAKkE,MAAMiX,YAGxHnb,KAAK4c,mBAAqB,EAC1B5c,KAAKqc,kBAAoBrc,KAAK+c,sBAAsBvW,M,4CAGhCA,GACpB,IAAMwW,EAAiBxW,EAAMuD,QAAUvD,EAAMwD,UAAY,GACzD,OAAOgT,EAAkBA,GAAkB,S,kCAI3C,OACE,kBAAClV,EAAA,EAAD,CACEC,SAAUjE,IAAgBkE,QAC1BC,KAAK,WACLzH,SAAU+M,KAAmBC,QAC7BtF,QACE,+CACU,2BAAIwF,YAAa1N,KAAK4c,oBADhC,mBACuE,kBAAClY,EAAA,EAAD,CAAWnE,GAAIJ,IAAOmB,gBAAgBf,KAD7G,iBACiI,kBAACmE,EAAA,EAAD,CAAWnE,GAAIJ,IAAO0c,uBAAuBtc,KAD9K,MAKF,kBAACgI,EAAA,EAAD,CACErI,MAAOC,IAAO0c,uBACdjV,MAAO8F,YAAa1N,KAAKqc,kBACzB5T,MAAM,sB,GA1CYC,K,UCwBtBuU,G,4HAAwBC,KAAxBD,GACGE,YAAc,CAEnBC,cAAe7X,EACf3E,MAAO4S,GAGP6J,oBAAqBzP,GACrByE,KAAMnG,EACNoR,YAAa1N,GACb2N,SAAUC,IAGV3X,UAAW/F,EACX2d,gBAAiB7Z,EACjBoD,YAAa4B,EACb8U,UAAWzL,GACX0L,UAAWpI,GACXhD,qBAAsBjJ,EACtBqI,aAAchG,EACdiS,gBAAiBzK,GACjBX,aAAc7H,EACdkT,YAAalK,GAIbmK,mBAAoBjR,GACpBkR,SAAUnI,GACVoI,6BAA8B3G,GAC9B4G,qBAAsB/E,GACtBgF,QAASvE,GACTyB,6BAA8BV,GAC9ByD,aAAc5C,GACd6C,cAAezB,GAGf0B,cAAe,CAACC,IAAe,CAAEnd,eAAgB,OAGjDod,iBAAkBC,KAClBC,iBAAkBvL,KAIP+J,c,iCCjFf,oBAUeyB,IANF,SAAC,GAAD,IAAMC,EAAN,2BACX,uCAAKC,MAAM,6BAA6BC,QAAQ,cAAc5J,UAAU,QAAW0J,GACjF,0BAAMG,EAAE,mpB,oLCNG,SAASC,EAAgBC,GACtC,IAAMC,EAAG,YAAOD,GAChBC,EAAIC,MAAK,SAACC,EAAGC,GAAJ,OAAUD,EAAIC,KAEvB,IAAMC,EAAO/K,KAAKgL,MAAML,EAAIvT,OAAS,GAErC,OAAIuT,EAAIvT,OAAS,EACRuT,EAAII,IAEHJ,EAAII,EAAO,GAAKJ,EAAII,IAAS,ECT1B,SAASla,EAAQ6Z,GAC9B,OAAOA,EAAOzP,QAAO,SAACgQ,EAAGC,GAAJ,OAAUD,EAAIC,IAAG,GAAKR,EAAOtT,OCDrC,SAAS+T,EAAST,GAC/B,OAAOA,EAAOtT,OAASsT,EAAOzP,QAAO,SAACmQ,EAAKC,GAAN,OAAcD,EAAM,EAAEC,IAAK,GCU3D,IAGKC,EAHCC,EAAcC,IAAMC,eAAc,SAACnY,Q,SAGpCgY,K,kBAAAA,E,gBAAAA,E,kBAAAA,E,gBAAAA,E,cAAAA,E,qBAAAA,M,KAiIGxO,IA1GF,SAACjF,GAAkB,IAAD,EAEH6T,mBAAgB,CAACC,wBAAyB,GAAIC,YAAa,EAAGC,QAAQ,EAAMC,UAAU,IAFnF,mBAEtBC,EAFsB,KAEfC,EAFe,KAKvBC,EAA2BC,uBAAY,SAACxB,GAA0D,IAAxC3Z,EAAuC,uDAA/Bua,EAAmB5X,QAKzF,OAAQ3C,GACN,KAAKua,EAAmB5X,QACtB,OAAOsM,KAAKK,IAAIoK,EAAgBC,GAAS7Z,EAAQ6Z,IACnD,KAAKY,EAAmBa,OACtB,OAAO1B,EAAgBC,GACzB,KAAKY,EAAmBc,QACtB,OAAOvb,EAAQ6Z,GACjB,KAAKY,EAAmBe,OACtB,OAAOrM,KAAKK,IAAL,MAAAL,KAAI,YAAQ0K,IACrB,KAAKY,EAAmBgB,MACtB,OAAO5B,EAAO,GAChB,KAAKY,EAAmBiB,SACtB,OAAOpB,EAAST,GAClB,QACE,MAAM,IAAI8B,MAAJ,yBAA4Bzb,OAErC,IAuBK0J,EAA8C5C,EAA9C4C,KAAgBgS,EAA8B5U,EAAxC6U,SAAwB3P,EAAgBlF,EAAhBkF,YAEtC,IAAK0P,GAAiBxE,MAAM0E,QAAQF,KAAkBA,EAAaG,MArB5C,SAACC,GACtB,SAAIrB,IAAMsB,eAAeD,MAArB,OAA+BA,QAA/B,IAA+BA,OAA/B,EAA+BA,EAAOhV,WAqB1C,OAAO,KAOT,OACE,kBAAC0T,EAAYwB,SAAb,CAAsBzZ,MAtBU,SAAC4X,GAEjCc,GAAS,SAACgB,GACR,IAAMrB,EAAyD,sBAAOqB,EAAUrB,yBAAjB,CAA0CT,IACnGU,EAAcD,EAAwBvU,OAAS,EAAI6U,EAAyBN,EAAyB9T,EAAMoV,mBAAqB,EAChIpB,EAASD,EAAc,KAE7B,MAAO,CAACD,0BAAyBC,YAAaA,EAAaC,SAAQC,UADjDD,QAiBlB,kBAAC,IAAD,CACEqB,QAAQ,KACRvM,UAAWoL,EAAMF,OAAS,SAAW,SACrCsB,gBATkB,WACtBnB,GAAS,SAAAgB,GAAS,kCAASA,GAAT,IAAoBlB,UAAWkB,EAAUlB,eASvDA,SAAUC,EAAMD,SAChBsB,OACE,yBAAKzM,UAAU,iBACb,yBAAKA,UAAU,kBACZlG,GAEH,yBAAKkG,UAAU,iBACb,yBAAKA,UAAU,kBACb,yBACEA,UAAU,WACV5P,MAAO,CACLsc,MAAM,GAAD,OAAyB,IAApBtB,EAAMH,YAAX,KACL0B,gBAAiBC,YAAoBxB,EAAMH,kBAKnD,yBAAKjL,UAAU,oBACb,6BACE,kBAAC6M,EAAA,EAAD,UAMPzQ,GACC,yBAAK4D,UAAU,8BACb,kBAAC8M,EAAA,EAAD,MACA,yBAAK9M,UAAU,aACZ5D,IAIP,yBAAK4D,UAAU,OACZ8L,O,kJChHLzP,E,kDAEJ,WAAYnF,GAAe,IAAD,6BACxB,cAAMA,GACNA,EAAM6V,eAAe,EAAK9B,aAFF,E,mEASHnP,GACrB,OAAQA,EAAW1L,OACjB,KAAKmF,IAAeC,WAClB,MAAM,GAAN,OAAU1F,YAAiBgM,EAAWvM,QAAtC,KACF,KAAKgG,IAAeqG,OAClB,MAAM,GAAN,OAAUnD,YAAaqD,EAAWvM,SACpC,KAAKgG,IAAeyX,UAClB,MAAM,GAAN,OAAU3X,YAAgByG,EAAWvM,SACvC,KAAKgG,IAAe0X,QAClB,MAAM,GAAN,OAAUnR,EAAWvM,OAAOwK,QAAQ,IACtC,KAAKxE,IAAe2X,QAClB,OAAOpR,EAAWvM,OAAS,kBAAC,QAAD,CAAOjE,GAAG,eAA2B,kBAAC,QAAD,CAAOA,GAAG,cAC5E,KAAKiK,IAAe4X,QAClB,MAAM,GAAN,OAAUrR,EAAWvM,OAAOwK,QAAQ,GAApC,KACF,QACE,MAAM,IAAI8R,MAAJ,yBAA4B/P,EAAW1L,W,+BAIzC,IAAD,EAC6DrF,KAAKmM,MAAjE4C,EADD,EACCA,KAAMgC,EADP,EACOA,WAAY7I,EADnB,EACmBA,QAASma,EAD5B,EAC4BA,aAAcC,EAD1C,EAC0CA,OAAQC,EADlD,EACkDA,OAEnDrC,EAAclgB,KAAKkgB,YACrB3L,OAAMhN,EACJib,EAAczR,OACGxJ,IAApBib,EAAYjO,MACbA,EAAG,YAAQiO,EAAYjO,MAEzB,IAAM/P,EACJ,oCACG8d,EADH,IACYtiB,KAAKyiB,uBAAuB1R,GADxC,IACsDwD,EADtD,IAC4DgO,GAI9D,OACE,yBAAKtN,UAAU,YACb,yBAAKA,UAAU,QACb,yBAAKA,UAAU,aACZlG,GAEF7G,GACC,yBACE+M,UAAU,WACV5P,MAAO,CAAEqd,WAAY,KAErB,kBAACC,EAAA,EAAD,CAASC,QAAS1a,GAChB,6BACE,kBAAC6Z,EAAA,EAAD,SAKR,yBAAK9M,UAAU,qCAAqC5P,MAAO,CAAEwd,SAAU,GAAIH,WAAY,EAAGI,YAAa,KACrG,yBAAK7N,UAAU,aAAa5P,MAAO,CAAEsc,MAAO,SACzCU,EAAe,kBAACM,EAAA,EAAD,CAAgBC,QAASP,GAAe7d,GAA2BA,IAGvF,yBAAKyQ,UAAU,0BAA0B5P,MAAO,CAAEsc,MAAO,KACvD,yBAAK1M,UAAU,6BACb,yBACEA,UAAU,wBACV5P,MAAO,CACLsc,MAAM,GAAD,OAAmB,IAAdzB,EAAL,KACL6C,WAAY,yBACZnB,gBAAiBC,YAAoB3B,Y,kCAnEnD,OCSW,SAAkCnP,GAC/C,GAAIA,EAAW9L,cACb,MAAwC,kBAA7B8L,EAAW9L,cAjB1B,SAA6CT,EAA7C,GAAiF,IAA1BU,EAAyB,EAAzBA,MAAOC,EAAkB,EAAlBA,QAASC,EAAS,EAATA,MACrE,OAAIZ,EAASY,EAEJ,KAAQA,EAAQZ,EACdA,EAASW,EAEX,MAAkBX,EAASW,IAAYC,EAAQD,GAAvC,KACNX,EAASU,EAEX,GAAcV,EAASU,IAAUC,EAAUD,GAAvC,KAGJ,EAME8d,CAAoCjS,EAAWvM,OAAQuM,EAAW9L,eAElE8L,EAAW9L,cAAgB8L,EAAWvM,OAE1C,GAAIuM,EAAWxG,WACpB,MAAqC,kBAA1BwG,EAAWxG,WAtC1B,SAA0C/F,EAA1C,GAA8E,IAA1BU,EAAyB,EAAzBA,MAAOC,EAAkB,EAAlBA,QAASC,EAAS,EAATA,MAClE,OAAIZ,EAASY,EAEJ,KAAQZ,EAASY,EACfZ,EAASW,EAEX,MAAkBX,EAASY,IAAUD,EAAUC,GAAvC,KACNZ,EAASU,EAEX,MAAkBV,EAASW,IAAYD,EAAQC,GAAvC,KAGR,EA2BE8d,CAAiClS,EAAWvM,OAAQuM,EAAWxG,YAE/DwG,EAAWvM,OAASuM,EAAWxG,WAEnC,QAA2BhD,IAAvBwJ,EAAWmS,QACpB,OAAOnS,EAAWvM,SAAWuM,EAAWmS,QAAU,EAAI,EAEtD,MAAM,IAAIpC,MAAM,sCDzBTqC,CAAyBnjB,KAAKmM,MAAM4E,gB,GARrB+O,IAAMsD,eAsFjB,aAACjX,GAAD,OACb,kBAACiF,EAAA,EAAYiS,SAAb,MACG,SAACrB,GAAD,OACC,kBAAC,EAAD,iBACM7V,EADN,CAEE6V,eAAgBA,U,mEEvFT/P,IAtBG,SAAA9F,GAAU,IAClB6U,EAAa7U,EAAb6U,SAER,OACE,wBAAI/L,UAAU,cACV+L,GACA,4BACE,yBAAK/L,UAAU,sBACb,kBAAC,QAAD,CAAO1U,GAAG,oCAAV,YAAoG,uBAAG+iB,KAAK,+CAAsE,uBAAGA,KAAK,oCAK/LtC,K,4GCZDhP,E,yLAOwB,IAClBjB,EAAe/Q,KAAKmM,MAApB4E,WAER,OACE,oCACE,kBAAC,IAAD,CACEhC,KAAM,kBAAC,QAAD,CAAOxO,GAAG,wDAChBwQ,WAAYA,EAAWwS,cAEzB,kBAAC,IAAD,CACExU,KAAM,kBAAC,QAAD,CAAOxO,GAAG,mEAChBwQ,WAAYA,EAAWyS,oB,kDAKF,IACnBzS,EAAe/Q,KAAKmM,MAApB4E,WAER,OACE,oCACE,kBAAC,IAAD,CACEhC,KAAM,kBAAC,QAAD,CAAOxO,GAAG,gDAChBwQ,WAAYA,EAAW0S,iBAEzB,kBAAC,IAAD,CACE1U,KAAM,kBAAC,QAAD,CAAOxO,GAAG,oDAChBwQ,WAAYA,EAAW2S,wB,4DAKQ,IAC7B3S,EAAe/Q,KAAKmM,MAApB4E,WAER,OACE,oCACE,kBAAC,IAAD,CACEhC,KAAM,kBAAC,QAAD,2CACNgC,WAAYA,EAAW4S,kBAEzB,kBAAC,IAAD,CACE5U,KAAM,kBAAC,QAAD,+CACNgC,WAAYA,EAAW6S,4B,gDAKJ,IACjB7S,EAAe/Q,KAAKmM,MAApB4E,WACR,OACE,oCACE,kBAAC,IAAD,CACEhC,KAAM,kBAAC,QAAD,CAAOxO,GAAG,gDAChBwQ,WAAYA,EAAW8S,qBAEzB,kBAAC,IAAD,CACE9U,KAAM,kBAAC,QAAD,CAAOxO,GAAG,4CAChBwQ,WAAYA,EAAW+S,kB,+CAKL,IAChB/S,EAAe/Q,KAAKmM,MAApB4E,WACR,OACE,oCACE,kBAAC,IAAD,CACEhC,KAAM,kBAAC,QAAD,CAAOxO,GAAG,+CAChBwQ,WAAYA,EAAWgT,oBAEzB,kBAAC,IAAD,CACEhV,KAAM,kBAAC,QAAD,CAAOxO,GAAG,2CAChBwQ,WAAYA,EAAWiT,iB,+BAMrB,IACAhD,EAAahhB,KAAKmM,MAAlB6U,SAER,OACE,kBAAC,IAAD,CACEjS,KAAM,kBAAC,QAAD,CAAOxO,GAAG,mDAChB8Q,YAAa,kBAAC,QAAD,CAAO9Q,GAAG,2DAEtBP,KAAKikB,4BACLjkB,KAAKkkB,sCACLlkB,KAAKmkB,2BACLnkB,KAAKokB,0BACLpkB,KAAKqkB,yBACLrD,O,GAnGqBlB,IAAMsD,eAyGrBpR,O,mHCnGTd,E,uKA2DM,IAAD,EAC4BlR,KAAKmM,MAAhCjM,EADD,EACCA,MAAO6O,EADR,EACQA,KAASuV,EADjB,gCAGDvT,EAAa/Q,KAAK+Q,WACxB,OAAKA,EAKH,kBAAC,IAAD,eACEhC,KAAMA,GAAQ,kBAAC,IAAD,CAAWxO,GAAIL,IAC7B6Q,WAAYA,GACRuT,IAPC,O,iCA/CT,IAAKtkB,KAAKmM,MAAMhL,eAEd,OADAojB,YAAiB,IAAIzD,MAAJ,6GAAgH9gB,KAAKmM,MAAMjM,SACrI,KAGT,GAAGF,KAAKmM,MAAMqY,WAAY,CAAC,IAAD,EAIpBxkB,KAAKmM,MAAMhL,eAFbsjB,EAFsB,EAEtBA,MACAC,EAHsB,EAGtBA,SAGF,MAAO,CACLlgB,OAAQigB,EACRlQ,IAAKmQ,EACLna,WAAY,CACVrF,MAAOwf,EACPvf,QAASuf,EAAW,EACpBtf,MAAOsf,EAAW,GAEpBrf,MAAO,UAEH,IAAD,EAODrF,KAAKmM,MAAMhL,eALbwjB,EAFG,EAEHA,WAOF,MAAO,CACLngB,OAVG,EAGHogB,YAOsB,EAAID,EAC1Bpa,WAAY,CACVrF,MAZC,EAIH7D,sBASE8D,QAbC,EAKH0f,uBASEzf,MAdC,EAMH0f,sBAUAzf,MAAO,kB,GAtDgCya,IAAMsD,eA6EtClS,O,iCC1FA,SAAS2Q,EAAoB3B,GAC1C,OAAIA,GAAe,EACV,UACEA,EAAc,KAChB,UACEA,EAAc,GAChB,UACEA,EAAc,KAChB,UAEA,UAVX,mC,uRCwHe6E,E,4MA5Fb1E,MAAQ,CACN2E,MAAO,M,uDAGC,IAAD,EAQHhlB,KAAKmM,MANP8Y,EAFK,EAELA,cACAC,EAHK,EAGLA,YACAC,EAJK,EAILA,MACAC,EALK,EAKLA,MACAC,EANK,EAMLA,QACAnd,EAPK,EAOLA,QAGIod,EAAO,CACXL,gBACAzgB,OAAQ0gB,GAGJK,EAAO,CACXC,SAAU,CACRC,EAAG,CACDC,MAAO,IACPlM,KAAM,eACN9R,MAAOyd,EAAMzd,MACbie,KAAM,CACJC,MAAM,EACNC,OAAQV,EAAMxd,aAGlBme,EAAG,CACDJ,MAAO,IACPlM,KAAM,eACN9R,MAAO0d,EAAM1d,MACbie,KAAM,CACJC,MAAM,EACNC,OAAQ,OAEVE,MAAO,CACLC,OAAQX,KAIdY,MAAO,CACL,CACEX,KAAM,CACJvW,KAAM,iBAERmX,KAAM,CACJ1M,KAAM,OACN2M,MAAO,0BACPC,KAAM,CACJD,MAAO,UACPE,YAAa,KAInB,CACEf,KAAM,CACJvW,KAAM,UAERmX,KAAM,CACJ1M,KAAM,QACN8M,QAAQ,EACRH,MAAO,UACPle,KAAM,IAERud,SAAU,CACRtd,QAAS,CACP,CAAEwd,MAAO,IAAKhe,MAAOQ,QAQ/B,OACE,kBAAC,IAAD,CAAWqe,eAAa,IACrB,gBAAE5E,EAAF,EAAEA,MAAF,OACC,kBAAC6E,EAAA,EAAD,CACEC,OAAQ,IACR9E,MAAOA,EACP4D,KAAMA,EACND,KAAMA,W,GA3GqBxF,IAAM5N,WCGtC,SAASwU,EAAkBve,EAAoBwe,GACpD,OAAOxe,EAAawe,EASf,SAASC,EAAYC,EAAWC,EAAWtH,GAChD,OAuCF,SAA8BsH,EAAWD,GAUvC,IAFA,IAAIE,EAAY,EACZC,EAAc,EACTpS,EAAIkS,EAAID,EAAI,EAAGjS,GAAKkS,EAAGlS,GAAK,EACnCmS,GAAanS,EAEf,IAAK,IAAIA,EAAI,EAAGA,GAAKiS,EAAGjS,GAAK,EAC3BoS,GAAepS,EAEjB,OAAOmS,EAAYC,EAvDZC,CAAqBH,EAAGD,GAAKvS,KAAK4S,IAAI1H,EAAGqH,GAAKvS,KAAK4S,IAAI,EAAI1H,EAAGsH,EAAID,GASpE,SAASM,EAAYN,EAAWC,EAAWtH,GAEhD,IADA,IAAI4H,EAAc,EACTxS,EAAI,EAAGA,GAAKiS,EAAGjS,GAAK,EAC3BwS,GAAeR,EAAYhS,EAAGkS,EAAGtH,GAEnC,OAAO4H,EASF,SAASC,EAAQP,EAAWQ,GAGjC,IAFA,IAAI/S,GAAO,EACPgT,EAAO,EACF3S,EAAI,EAAGA,GAAKkS,EAAGlS,GAAK,EAAG,CAC9B,IAAMwS,EAAcE,EAAI1S,EAAGkS,GACvBM,EAAcG,IAChBhT,EAAMK,EACN2S,EAAOH,GAGX,MAAO,CACL7S,MACAiL,EAAG+H,GAuBP,SAASC,EAAsBC,EAAqBd,EAAsBxe,GASxE,OAR4DoU,MAAMC,KAAK,CAAE9Q,OAAQib,IAAgB,SAACe,EAAI9S,GACpG,MAA0B,kBAAfzM,EACF,CAAEsd,EAAG7Q,EAAGkR,EAAGc,EAAYhS,EAAG+R,EAAcxe,IAExC,CAAEsd,EAAG7Q,EAAGkR,EAAG6B,EAAmB/S,EAAG+R,EAAcxe,OAO5D,SAASyf,EAAuBH,EAAqBd,EAAsBxe,GAA2D,IAA5B0f,EAA2B,uDAAP,KACtHC,EAAoBN,EAAsBC,EAAad,EAAcxe,GACrE4f,EAAWD,EAAkBE,WAAU,qBAAGlC,GAAa+B,KACvDI,EAAWF,EAAWD,EAAkBI,MAAMH,GAAUC,WAAU,qBAAGlC,EAAY+B,KAEvF,MAAO,CACLC,oBACAC,WACAE,YAYJ,SAASE,EAAItB,EAAWuB,EAAW5I,EAAa6I,GAC9C,IAAW,IAAPxB,EACF,OAAO,EAET,GAAIA,IAAMuB,EAAI,EACZ,OAAO,EAET,GAAU,IAANvB,GAAiB,IAANuB,EACb,OAAO,EAET,GAAqB,OAAjBC,EAAOxB,GAAGuB,GACZ,OAAOC,EAAOxB,GAAGuB,GAGnB,IAAMxgB,GAAiB,EAAI4X,EAAE4I,EAAI,IAAMD,EAAItB,EAAGuB,EAAI,EAAG5I,EAAG6I,GAAU7I,EAAE4I,EAAI,GAAKD,EAAItB,EAAI,EAAGuB,EAAI,EAAG5I,EAAG6I,GAElG,OADAA,EAAOxB,GAAGuB,GAAKxgB,EACRA,EAaF,SAAS+f,EAAmBd,EAAWC,EAAWtH,GAGvD,GAAIA,EAAE9T,SAAWob,EACf,MAAM,IAAIhG,MAAM,oHAKlB,IAAMuH,EAAS,YAAI9L,MAAMuK,EAAI,IAAI5R,KAAI,SAAApQ,GAAC,OAAIyX,MAAMuK,EAAI,GAAGjf,KAAK,SAC5D,OAAOsgB,EAAItB,EAAGC,EAAGtH,EAAG6I,GAyBf,SAAS/f,EACdmf,EACAd,EACAxe,GAWC,IAVDmgB,EAUA,uDAVsB,QACtBC,EASA,uDATsBD,EACtBjD,EAQA,uDARoB,CAAC,EAAG,IACxBF,EAOA,uDAPa,CACXzd,MAAO4gB,EACP3gB,WAAY,MAEdyd,EAGA,uDAHa,CACX1d,MAAO,cAET,EAEkDkgB,EAAuBH,EAAad,EAAcxe,GAA5F2f,EAFR,EAEQA,kBAAmBC,EAF3B,EAE2BA,SAAUE,EAFrC,EAEqCA,SAC/BO,EAAqC,kBAAfrgB,EAA0Bye,EAAYa,EAAad,EAAcxe,GAAcwf,EAAmBF,EAAad,EAAcxe,GACzJ,OACE,kBAAC,EAAD,CACE8c,cAAe6C,EAAkBI,MAAMH,EAAUE,EAAW,GAC5D/C,YAAa,CAAEO,EAAGgC,EAAa3B,EAAG0C,GAClCnD,QAASA,EACTF,MAAOA,EACPC,MAAOA,EACPld,QAASqgB,M,iCCtMf,mCAiCehgB,IAbU,SAAC,GAAD,IAAGrI,EAAH,EAAGA,MAAO0H,EAAV,EAAUA,MAAOa,EAAjB,EAAiBA,MAAOggB,EAAxB,EAAwBA,MAAOxT,EAA/B,EAA+BA,UAA/B,OACvB,yBAAKA,UAAS,4BAAuBA,GAAa,KAChD,yBAAKA,UAAU,iBACb,kBAAC,IAAD,CAAW1U,GAAIL,EAAMK,MAEvB,yBAAK0U,UAAU,mBACb,6BAAMrN,GACN,+BAAQa,GACPggB,M,iCC5BP,oBAUe/J,IANF,SAAC,GAAD,IAAMC,EAAN,2BACX,uCAAKC,MAAM,6BAA6BC,QAAQ,WAAW5J,UAAU,QAAW0J,GAC5E,0BAAMG,EAAE,mU,mJCQD4J,G,OAAa,SAACvc,GAAsD,IAAD,EAC9C6T,oBAAkB,GAD4B,mBACvEI,EADuE,KAC7DuI,EAD6D,KAMtEjH,EAAkDvV,EAAlDuV,OAAQV,EAA0C7U,EAA1C6U,SAAmB4H,EAAuBzc,EAAhCqV,QAAkBvM,EAAc9I,EAAd8I,UAE5C,OACE,kBAAC2T,EAAD,CAAS3T,UAAS,qBAAgBmL,EAAW,WAAa,GAAxC,YAA8CnL,GAAa,KAC3E,yBAAKA,UAAU,OAAO4T,QARL,WACnBF,GAAY,SAACG,GAAD,OAA4BA,OAQnCpH,GAEH,kBAAC,IAAD,CAAezM,UAAU,UAAUwR,OAAQrG,EAAW,OAAS,GAC5DY,MAMI+H,EAAuB,SAAC5c,GAAmB,IAC9CuV,EAAkDvV,EAAlDuV,OAAQV,EAA0C7U,EAA1C6U,SAAmB4H,EAAuBzc,EAAhCqV,QAAkBvM,EAAc9I,EAAd8I,UAE5C,OACE,kBAAC2T,EAAD,CAAS3T,UAAS,qBAAgB9I,EAAMiU,SAAW,WAAa,GAA9C,YAAoDnL,GAAa,KACjF,yBAAKA,UAAU,OAAO4T,QAAS1c,EAAMsV,iBAClCC,GAEH,kBAAC,IAAD,CAAezM,UAAU,UAAUwR,OAAQta,EAAMiU,SAAW,OAAS,GAClEY,M,0OCzBH7N,E,kDAmBJ,aAAsB,IAAD,iDAANC,EAAM,yBAANA,EAAM,gBAEnB,IADA,+BAASA,KAfX4V,gBAAkB,IAAIne,IAcD,EAbrBoe,gBAAkB,IAAIpe,IAaD,EAXrBqe,eAAiB,GAWI,EAVrBC,cAAgB,GAUK,EARrB9V,kBAAoB,GAQC,EAPrB+V,iBAAmB,GAOE,EANrB9V,oBAAsB,GAMD,EAJrB+V,oBAAsB,GAID,EAHrBC,mBAAqB,GAGA,EAFrBC,sBAAwB,GAIC,MAAnB,EAAKrlB,MAAMD,KAEb,OADA,EAAKiJ,QAAS,EACd,eAEF,IAAMjJ,EAAOulB,YAAa,EAAKtlB,MAAMD,KAAK1D,IANvB,OAQjB0D,EAAKE,MAAMslB,sBACXxlB,EAAKE,MAAMslB,qBAAqBC,UAChCzlB,EAAKE,MAAMslB,qBAAqBE,SAEhC,EAAKT,eAAiBjlB,EAAKE,MAAMslB,qBAAqBC,SACtD,EAAKP,cAAgBllB,EAAKE,MAAMslB,qBAAqBE,aACzBpiB,IAAxB,EAAK2hB,qBAAuD3hB,IAAvB,EAAK4hB,gBAC5C,EAAKD,eAAiB,GACtB,EAAKC,cAAgB,MAGvB,EAAKD,eAAiB,GACtB,EAAKC,cAAgB,GAErB,EAAK9V,kBAAoB,GACzB,EAAK+V,iBAAmB,GACxB,EAAK9V,oBAAsB,GAE3B,EAAK+V,oBAAsB,GAC3B,EAAKC,mBAAqB,GAC1B,EAAKC,sBAAwB,IAE/B,sBAAI,EAAKL,gBAAT,YAA4B,EAAKC,gBAAe3d,SAAQ,SAACmC,GACvD,EAAKqb,gBAAgB/d,IAAI0C,EAAG,GAC5B,EAAKsb,gBAAgBhe,IAAI0C,EAAG,MAE9B,EAAK5H,iBAAiBC,IAAOK,OAAOC,GAAGH,KAAkB,EAAKyjB,eAlC3C,E,0DAqCPpjB,GAAQ,IAAD,OACbtG,EAAQsG,EAAME,QAAQC,KAExBkjB,EAAS,GACTC,EAAY,GACZC,EAAc,GAUlB,GAbgBvjB,EAAME,QAAQ8S,OAIdT,IAAcC,IAAIC,UAChC4Q,EAAS7pB,KAAKkpB,eACdY,EAAS,sBAAO9pB,KAAKqT,mBAAZ,YAAkCrT,KAAKsT,sBAChDyW,EAAW,sBAAO/pB,KAAKqpB,qBAAZ,YAAoCrpB,KAAKupB,0BAEpDM,EAAS7pB,KAAKmpB,cACdW,EAAS,sBAAO9pB,KAAKopB,kBAAZ,YAAiCppB,KAAKsT,sBAC/CyW,EAAW,sBAAO/pB,KAAKspB,oBAAZ,YAAmCtpB,KAAKupB,yBAEjDM,EAAOpjB,SAASvG,KAAWsG,EAAMwjB,KAGnC,GACEF,EAAU5I,MAAK,SAACvT,GAAD,OAAO,EAAK1N,kBAAkBiK,QAAQyD,OACrDnH,EAAMO,UAAYH,IAAUqjB,OAG5BjqB,KAAKgpB,gBAAgB/d,IAAI/K,EAAOF,KAAKgpB,gBAAgB9d,IAAIhL,GAAS,OAC7D,CACL,IAAMgqB,EAAQlqB,KAAKuJ,QAAQ4gB,cAAc3jB,EAAMyU,UAE3CiP,GAASH,EAAY7I,MAAK,SAACvT,GAAD,OAAOuc,EAAMhgB,QAAQyD,EAAGnH,EAAMY,cAC1DpH,KAAKgpB,gBAAgB/d,IAAI/K,EAAOF,KAAKgpB,gBAAgB9d,IAAIhL,GAAS,GAElEF,KAAKipB,gBAAgBhe,IAAI/K,EAAOF,KAAKipB,gBAAgB/d,IAAIhL,GAAS,M,kCA6B7D,IAAD,OACJkqB,EAAU7N,MAAMC,KAAKxc,KAAKipB,gBAAgBjK,UAAUzP,QACxD,SAAC8a,EAAO1K,GAAR,OAAgB0K,EAAQ1K,IACxB,GAEI2K,EAAU/N,MAAMC,KAAKxc,KAAKgpB,gBAAgBhK,UAAUzP,QACxD,SAAC8a,EAAO1K,GAAR,OAAgB0K,EAAQ1K,IACxB,GAEF,GAAIyK,EAAUE,IAAY,EACxB,OAAO,KAET,IAKIC,EALET,EAAS,sBACV9pB,KAAKqT,mBADK,YAEVrT,KAAKopB,kBAFK,YAGVppB,KAAKsT,sBAIRiX,EADET,EAAUpe,OAAS,EACPoe,EAAU,GAEV3pB,IAAOqqB,kBAAkBjqB,GAGzC,IAAMkqB,EACJzqB,KAAK0qB,eAAehf,OAAS,EAC3B,oCACE,+BACE,4BACE,wCACA,uCACA,sCACA,wCAGJ,+BACG1L,KAAK0qB,eAAexV,KAAI,SAAChV,GAAD,OACvB,wBAAIkV,IAAKlV,GACP,6BACA,wBAAIyqB,MAAM,OACR,kBAAC,IAAD,CAAWpqB,GAAIL,EAAOmF,MAAO,CAAEohB,OAAQ,YAEzC,4BAAK/Y,YAAa,EAAKsb,gBAAgB9d,IAAIhL,KAC3C,4BAAKwN,YAAa,EAAKub,gBAAgB/d,IAAIhL,WAKjD,KAEA0qB,EAAa,CAAEC,UAAW,QAC1BC,EACJ9qB,KAAK+qB,cAAcrf,OAAS,EAC1B,oCACE,+BACE,4BACE,wBAAIrG,MAAOulB,GAAX,WACA,wBAAIvlB,MAAOulB,GAAX,WACA,wBAAIvlB,MAAOulB,GAAX,UACA,wBAAIvlB,MAAOulB,GAAX,YAGJ,+BACG5qB,KAAK+qB,cAAc7V,KAAI,SAAChV,GAAD,OACtB,wBAAIkV,IAAKlV,GACP,6BACA,wBAAIyqB,MAAM,OACR,kBAAC,IAAD,CAAWpqB,GAAIL,EAAOmF,MAAO,CAAEohB,OAAQ,YAEzC,4BAAK/Y,YAAa,EAAKsb,gBAAgB9d,IAAIhL,KAC3C,4BAAKwN,YAAa,EAAKub,gBAAgB/d,IAAIhL,WAKjD,KAEN,OACE,kBAAC,IAAD,CACE0E,KAAM,kBAAC,IAAD,CAAWrE,GAAIgqB,IACrB3iB,MAAK,UAAK7C,YAAiBulB,GAAWA,EAAUF,IAA3C,MACL3hB,MAAM,iCACNP,QACE,mHAEE,4BAAKlI,KAAKkI,WAId,2BAAO+M,UAAU,wBAAwB5P,MAAO,CAAE2lB,WAAY,SAC3DP,EACAK,M,8BAjHP,MAAO,sBACF9qB,KAAKqT,mBADH,YAEFrT,KAAKopB,kBAFH,YAGFppB,KAAKsT,qBAHH,YAIFtT,KAAKqpB,qBAJH,YAKFrpB,KAAKspB,oBALH,YAMFtpB,KAAKupB,wBACRrU,KAAI,SAAC3U,GAAD,OAAQ,wBAAI6U,IAAK7U,GAAKJ,IAAOI,GAAIwO,W,qCAGnB,IAAD,OACnB,OAAO/O,KAAKkpB,eAAe+B,QACzB,SAAC/qB,GAAD,OAAW,EAAK8oB,gBAAgB9d,IAAIhL,GAAS,EAAK+oB,gBAAgB/d,IAAIhL,GAAS,O,oCAI9D,IAAD,OAClB,OAAOF,KAAKmpB,cAAc8B,QACxB,SAAC/qB,GAAD,OAAW,EAAK8oB,gBAAgB9d,IAAIhL,GAAS,EAAK+oB,gBAAgB/d,IAAIhL,GAAS,S,GA/GvDwI,KAAxByK,EACGxK,aAAe,CACpBY,QAASmB,KAmNEyI,O,2FCnOTqL,E,kDACJ,aAAsB,IAAD,iDAANpL,EAAM,yBAANA,EAAM,uBACnB,+BAASA,KACJ8X,SAAWC,IAAeC,WAFZ,E,2DAKN5kB,GACb,IAAKxG,KAAKqrB,YAAY7kB,GAAO8kB,KAC3B,OAAO,EAET,IAAIA,EAAOtrB,KAAKqrB,YAAY7kB,GAAO8kB,KAInC,OAHItrB,KAAKC,kBAAkBiK,QAAQ/J,IAAOorB,sBAAsBhrB,MAC9D+qB,GAAc,GAETA,M,GAdoBE,KAkBhBhN,O,yKCHTtL,E,0KAqBQlP,GAAO,IAAD,OAChBA,EAAKhE,KAAKqE,sBAAsBC,eAAc,SAACC,EAASC,EAAQC,GAAlB,OAAkCF,EAAQ,cAAD,OAAemJ,YAAa,EAAK6Q,iBAAiBkN,QAAlD,iBAClF7mB,KAzBa,iBA0BbJ,OAAOK,OAAKC,EAAE,8FAAmDC,YAAiB,EAAK2mB,4BACvFjnB,YAH2E,mBAGnDM,YAAiB,EAAIN,GAH8B,0B,kCAOhF,MAAO,CAEH,kBAAC,IAAD,CACE2Q,IAAI,YACJnN,KAAK,QACLF,SAAUjE,IAAgBC,KAAK,GAC/BmE,QAAO,UAAKnD,YAAiB/E,KAAK0rB,wBAA3B,aAEP,kBAAC,IAAD,CACER,SAAUC,IAAeC,WACzBxjB,MAAO8F,YAAa1N,KAAKue,iBAAiBkN,QAC1ChjB,MAAM,uBAKV,kBAAC,IAAD,CACE2M,IAAI,QACJ1N,MAAM,mBACNikB,KAAK,GAEL,kBAAC,IAAD,CACEC,QAAS5rB,KAAKue,iBACdsN,aAAa,aACbC,cAAY,Q,6CA/CpB,OAAO9rB,KAAKue,iBAAiBkN,QAAUzrB,KAAKue,iBAAiBkN,OAASzrB,KAAKue,iBAAiBwN,a,2CAI5F,MAAO,CACLvnB,OAAQ,EAAIxE,KAAK0rB,uBACjBnhB,WAAY,CACVrF,MAAO,IACPC,QAAS,IACTC,MAAO,KAETC,MAAO,kB,GAjBkBqD,KAAzBwK,EACGvK,aAAe,CACpB4V,iBAAkBC,KA2DPtL,O,kHCtEA8Y,EAJW,GCInB,SAASliB,EAAMtD,GAClB,OAAOA,EAAME,QAAQ8S,OAAST,IAAcC,IAAIC,SAG7C,SAASpP,EAAaN,EAAkB/C,GAC3C,OATG,SAAsB+C,EAAkB/C,GAC3C,OAAQA,EAAMylB,uBAAuC1kB,IAAnBf,EAAMyU,eAAoE1T,IAA1CgC,EAAQ4gB,cAAc3jB,EAAMyU,UAQtFiR,CAAa3iB,EAAS/C,IAAU2lB,EAAiB1lB,SAASD,EAAME,QAAQC,Q,sMCM9E6W,E,kDAiCJ,WAAYhY,GAAmB,IAAD,EAG5B,OAH4B,qBAC5B,cAAMA,IA9BA+D,aA6BsB,IA3B9B6iB,gBAA0B,IA2BI,EAzB9BC,sBAAiC,CAC/BlsB,IAAOmsB,aACPnsB,IAAOosB,wBACPpsB,IAAOqsB,0BACPrsB,IAAOssB,4BAqBqB,EAlB9BC,uBAAkC,CAChCvsB,IAAOoB,yBAiBqB,EAd9BorB,eAA0B,CACxBxsB,IAAOwE,cACPxE,IAAOyB,0BAYqB,EAT9BgrB,sBAS8B,sBATO,EAAKP,uBASZ,YATsC,EAAKK,yBAS3C,EAP9BG,iBAA6B,CAACC,IAAMC,mBAAmBxsB,GAAIusB,IAAME,oBAAoBzsB,IAOvD,EAL9B0sB,aAAmC,IAAIpiB,IAKT,EAJ9BqiB,eAAqC,IAAIriB,IAIX,EAH9BsiB,0BAAoC,EAGN,EAF9BC,mBAA6B,EAI3B,EAAKlgB,OAAS,EAAK2f,iBAAiBpmB,SAAS,EAAKxG,kBAAkBotB,QAC/D,EAAKngB,QAGV,EAAKnH,iBAAiBC,IAAOK,OAAOH,GAAGC,KAAiBjG,MAAM,EAAK0sB,uBAAwB,EAAKU,kBAChG,EAAKvnB,iBAAiBC,IAAOC,KAAKC,GAAGC,KAAiBjG,MAAM,EAAKysB,gBAAiB,EAAK/U,oBAP3D,GAI1B,e,oEAMoB7O,GACtB,OAAO/I,KAAK4sB,sBAAsBW,MAAK,SAACrtB,GAAD,OAAWA,EAAMK,KAAOwI,O,uCAGhDvC,GACf,IAAM0jB,EAA8BlqB,KAAKuJ,QAAQikB,UAAUhnB,GAC3D,GAAK0jB,GAAUA,EAAMhgB,QAAQ/J,IAAOstB,gBAAgBltB,GAAI,KAAM,KAA9D,CAGA,IAAMmtB,EAA0C1tB,KAAK2tB,wBAAwBnnB,EAAME,QAAQC,MAC3F,QAA6BY,IAAzBmmB,EAAJ,CAGA1tB,KAAKmtB,2BAA6B,EAClC,IAAMS,EAAoC5tB,KAAKitB,aAAa/hB,IAAIwiB,GAChE1tB,KAAKitB,aAAahiB,IAAIyiB,EAAuBE,EAAoBA,EAAgB,EAApB,GAC7D,IAAMC,EAA8BrnB,EAAMuD,OAAUvD,EAAMuD,QAAU,GAAK,EAAG/J,KAAKosB,kBAC3E0B,EAAsC9tB,KAAKktB,eAAehiB,IAAIwiB,GACpE1tB,KAAKktB,eAAejiB,IAAIyiB,EAAuBI,EAAwCA,EAAkBD,EAAxCA,O,yCAGhDrnB,GACjBxG,KAAKotB,oBAAsB,I,4CAGW,IAAD,OAC/BW,EAAiC,GAIvC,OAHA/tB,KAAKitB,aAAazhB,SAAQ,SAACwiB,EAAiB9tB,GAC1C6tB,EAAY5iB,KAAK,oCAAGjL,EAAM6O,KAAT,2BAAuCif,EAAvC,KAAkDtgB,YAAa,EAAKwf,eAAehiB,IAAIhL,IAAU,GAAjG,uBAAwH,kCAGzI,iEAC6BF,KAAKmtB,0BADlC,IAC6D,6BAC1DY,K,kCAqBK/pB,GAAa,IAAD,OACtBA,EAAKhE,KAAKqE,sBAAsBC,eAAc,SAACC,EAASC,EAAQC,GAAlB,OAAkCF,EAAQ,qEAAgC,kBAAC,IAAD,CAAWhE,GAAIJ,IAAOwE,cAAcpE,GAAIqE,MAAI,IAA5E,cACrFA,KAAKzE,IAAOstB,gBAAgB7oB,MAC5BJ,OAAOK,OAAKC,EAAE,sGAA0DC,YAAiB,EAAKkpB,iCAC9FxpB,YAH6E,WAG7DM,YAAiBN,GAH4C,0B,kCAOhF,OACE,kBAAC,IAAD,CACEsD,SAAUjE,IAAgBkE,QAC1BC,KAAK,WACLC,QAASlI,KAAKkuB,uBAEd,kBAAC,IAAD,CACEhuB,MAAOC,IAAOstB,gBACd7lB,MAAK,UAAK8F,YAAa1N,KAAKmtB,4BAC5B1kB,MAAM,iC,kDAhCZ,OAAOzI,KAAKmtB,0BAA4BntB,KAAKotB,qB,2CAI7C,MAAO,CACL5oB,OAAQxE,KAAKiuB,4BACb1jB,WAAY,CACVrF,MAAO,IACPC,QAAS,GACTC,MAAO,KAETC,MAAOmF,IAAeC,gB,GA7FL/B,KAAjB8U,EACG7U,aAAe,CACpBY,QAAS4kB,KAuHE3Q,O,kJC9HT7H,E,kDAUJ,WAAYnQ,GAAS,IAAD,8BAClB,cAAMA,IAVR4oB,UAAY,GASQ,EARpBC,aAAe,GAQK,EAPpBC,oBAAsB,GAOF,EAJpB9Y,cAAgBrV,IAAOouB,YAIH,EAHpB9Y,SAAW,iBAGS,EAFpBC,OAAS,mBAIP,EAAK3P,iBAAiBC,IAAOwoB,MAAMloB,GAAGH,KAAkB,EAAKsoB,SAC7D,EAAK1oB,iBAAiBC,IAAOK,OAAOC,GAAGH,KAAkB,EAAKyjB,eAC9D,EAAK7jB,iBAAiBC,IAAOsI,KAAKhI,GAAGH,KAAkB,EAAKuoB,aAJ1C,E,oDAOZloB,GACNxG,KAAKquB,aAAaljB,KAAK3E,K,oCAGXA,GACZxG,KAAKouB,UAAUjjB,KAAK3E,K,kCAGVA,GACVxG,KAAKouB,UAAUjjB,KAAK3E,GAEhBA,EAAME,QAAQC,OAAS3G,KAAKwV,cAAcjV,IAAMiG,EAAMyU,WAAazU,EAAMmoB,UAC3E3uB,KAAKsuB,oBAAoBnjB,KAAK3E,K,4BAgJ3B,IAAD,OACJ,MAAO,CACLkB,MAAO1H,KAAKyV,SACZmZ,IAAK5uB,KAAK0V,OACVmZ,OAAQ,kBACN,kBAAC,IAAD,CACEnnB,MAAO,EAAK+N,SACZqZ,YACE,gEAC2B,kBAAC,IAAD,CAAWvuB,GAAI,EAAKiV,cAAcjV,KAD7D,kEACkI,kBAAC,IAAD,CAAWA,GAAI,EAAKiV,cAAcjV,KADpK,YACmL,6BADnL,+HAMD,EAAKwuB,U,2BA1JF,IAAD,OACHC,EAAUhvB,KAAKquB,aAAanZ,KAAI,YAA6B,IAA1B9N,EAAyB,EAAzBA,UAAWV,EAAc,EAAdA,QAE5CuoB,EAAc,EAAKb,UAAUpG,WAAU,SAAAra,GAAC,OAAIA,EAAEvG,WAAaA,EAzClD,OA4Cf,IAAqB,IAAjB6nB,GAAsC,IAAhBA,EAA1B,CALgE,MAS5B,EAAKb,UAAUa,EAAc,GAC3DzP,EAV0D,EASxD0P,UATwD,EAS7CC,cACqB,EAClCC,EAAa9a,KAAKK,IAAIL,KAAK+a,MAAU,IAAJ7P,GAAU,KACjD,MAAO,CACLiG,EAAGre,EAAY,EAAKlD,MAAMC,MAAMmrB,WAChCF,aACA1oB,WATA,EAAK6oB,IAAI,6CAaPC,EAAMxvB,KAAKouB,UAAUnD,QAAO,SAAAzkB,GAAK,YAAwBe,IAApBf,EAAM0oB,gBAAkD3nB,IAAvBf,EAAM2oB,gBAC/Eja,KAAI,YAA6C,IAA1C9N,EAAyC,EAAzCA,UACAoY,EADyC,EAA9B0P,UAA8B,EAAnBC,cACY,EACxC,MAAO,CACL1J,EAAGre,EAAY,EAAKlD,MAAMC,MAAMmrB,WAChCxJ,EAAGxR,KAAKK,IAAIL,KAAK+a,MAAU,IAAJ7P,GAAU,SAIjClT,EAAStM,KAAKsuB,oBAAoBpZ,KAAI,SAAA1O,GAC1C,IAAMipB,EAAajpB,EAAM0oB,WAAa1oB,EAAMuD,QAAU,IAAMvD,EAAMwD,UAAY,IAAMxD,EAAMkpB,QAAU,GAC9FlQ,EAAKiQ,EAAajpB,EAAM2oB,cAAiB,EACzCC,EAAa9a,KAAKK,IAAIL,KAAK+a,MAAU,IAAJ7P,GAAU,KACjD,MAAO,CACLiG,EAAGjf,EAAMY,UAAY,EAAKlD,MAAMC,MAAMmrB,WACtCxJ,EAAGsJ,EACH1oB,QAASF,EAAME,QACfqD,OAAQvD,EAAMuD,QAAU,EACxBoF,SAAU3I,EAAM2I,UAAY,EAC5B+f,UAAWO,MAITE,EAAe,CACnBlK,EAAG,CACDC,MAAO,IACPlM,KAAM,eACNmM,KAAM,CACJiK,UAAWC,YAAW,eACtBjK,MAAM,GAERle,MAAO,KACPqe,MAAO,CAAE+J,MAAM,EAAMC,MAAM,IAE7BjK,EAAG,CACDJ,MAAO,IACPlM,KAAM,eACN9R,MAAO,KACPie,KAAM,CACJC,MAAM,KAKNL,EAAO,CACXU,MAAO,CACL,CACEX,KAAM,CACJvW,KAAM,MAERmX,KAAM,CACJ1M,KAAM,OACN4M,KAAM,CACJ4J,YAAa,SACb7J,MAAO,UACPE,YAAa,GAEfF,MAAO,2BAETX,SAAUmK,GAEZ,CACErK,KAAM,CACJvW,KAAM,SAERmX,KAAM,CACJ1M,KAAM,QACNvR,KAAM,GACNke,MAAO,QACPG,QAAQ,GAEVd,SAAS,2BACJmK,GADG,IAENznB,QAAS,CACP,CAAEwd,MAAO,eAAgBlM,KAAM,UAAW9R,MAAO,WACjD,CAAEge,MAAO,YAAalM,KAAM,eAAgB9R,MAAO,aAAcme,OAAQ,QACzE,CAAEH,MAAO,SAAUlM,KAAM,eAAgB9R,MAAO,UAAWme,OAAQ,QACnE,CAAEH,MAAO,WAAYlM,KAAM,eAAgB9R,MAAO,cAAeme,OAAQ,YAI/E,CACEP,KAAM,CACJvW,KAAM,UAERmX,KAAM,CACJ1M,KAAM,OACN2M,MAAO,MACPE,YAAa,GAEfb,SAAU,CACRC,EAAGkK,EAAalK,EAChBvd,QAAS,CACP,CAAEwd,MAAO,eAAgBlM,KAAM,UAAW9R,MAAO,mBACjD,CAAEge,MAAO,aAAclM,KAAM,eAAgB9R,MAAO,sBAMxD4d,EAAO,CACX1S,GAAI,CAAC,CAAC6S,EAAG,EAAGK,EAAG,MAAMmK,OAAOT,GAC5B/K,MAAOnY,EACP4jB,OAAQlB,GAGV,OACE,yBAAK/Z,UAAU,kBAAkB5P,MAAO,CACtCsc,MAAO,OACPwO,UAAW,MAEX,kBAAC,IAAD,MACG,gBAAGxO,EAAH,EAAGA,MAAO8E,EAAV,EAAUA,OAAV,OACC,kBAAC,IAAD,CAAW9E,MAAOA,EAAO8E,OAAQA,EAAQlB,KAAMA,EAAMD,KAAMA,Y,GAtKrC5c,KAkMnBiN","file":"static/js/ProtectionPaladin.de679e03.chunk.js","sourcesContent":["import SPELLS from 'common/SPELLS';\r\n\r\nimport CoreAbilities from 'parser/core/modules/Abilities';\r\n\r\n//import SpellLink from 'common/SpellLink';\r\n\r\nclass Abilities extends CoreAbilities {\r\n  spellbook() {\r\n    const combatant = this.selectedCombatant;\r\n    return [\r\n      {\r\n        spell: SPELLS.CONSECRATION_CAST,\r\n        buffSpellId: SPELLS.CONSECRATION_BUFF.id,\r\n        category: Abilities.SPELL_CATEGORIES.ROTATIONAL,\r\n        cooldown: haste => 4.5 / (1 + haste),\r\n        gcd: {\r\n          base: 1500,\r\n        },\r\n      },\r\n      {\r\n        spell: SPELLS.BLESSED_HAMMER_TALENT,\r\n        category: Abilities.SPELL_CATEGORIES.ROTATIONAL,\r\n        cooldown: haste => 6 / (1 + haste),\r\n        gcd: {\r\n          base: 1500,\r\n        },\r\n        charges: 3,\r\n        enabled: combatant.hasTalent(SPELLS.BLESSED_HAMMER_TALENT.id),\r\n        castEfficiency: {\r\n          suggestion: false,\r\n          recommendedEfficiency: 0.9,\r\n        },\r\n      },\r\n      {\r\n        spell: SPELLS.AVENGERS_SHIELD,\r\n        category: Abilities.SPELL_CATEGORIES.ROTATIONAL,\r\n        cooldown: haste => 15 / (1 + haste),\r\n        gcd: {\r\n          base: 1500,\r\n        },\r\n        castEfficiency: {\r\n          suggestion: true,\r\n          recommendedEfficiency: 0.9,\r\n        },\r\n      },\r\n      // Probably useless to try to count the number of casts\r\n      //Note by yajinni: Since this is thier main source of damage mitigation, without it they get hit like by a truck.\r\n      //And a main source of damage, it should be tracked somewhat. Keeping it at 80% for now.\r\n      {\r\n        spell: SPELLS.SHIELD_OF_THE_RIGHTEOUS,\r\n        buffSpellId: SPELLS.SHIELD_OF_THE_RIGHTEOUS_BUFF.id,\r\n        isDefensive: true,\r\n        category: Abilities.SPELL_CATEGORIES.ROTATIONAL,\r\n        gcd: {\r\n          static: 1000,\r\n        },\r\n      },\r\n      { // T15: Holy Shield\r\n        spell: SPELLS.HAMMER_OF_THE_RIGHTEOUS,\r\n        category: Abilities.SPELL_CATEGORIES.ROTATIONAL,\r\n        cooldown: haste => 6 / (1 + haste),\r\n        charges: 2,\r\n        gcd: {\r\n          base: 1500,\r\n        },\r\n        enabled: !combatant.hasTalent(SPELLS.BLESSED_HAMMER_TALENT.id),\r\n        castEfficiency: {\r\n          suggestion: false,\r\n        },\r\n      },\r\n      {\r\n        spell: SPELLS.JUDGMENT_CAST_PROTECTION,\r\n        category: Abilities.SPELL_CATEGORIES.ROTATIONAL,\r\n        cooldown: haste => 6 / (1 + haste),\r\n        charges: combatant.hasTalent(SPELLS.CRUSADERS_JUDGMENT_TALENT.id) ? 2 : 1,\r\n        gcd: {\r\n          base: 1500,\r\n        },\r\n        castEfficiency: {\r\n          suggestion: true,\r\n        },\r\n      },\r\n      {\r\n        spell: SPELLS.WORD_OF_GLORY,\r\n        category: Abilities.SPELL_CATEGORIES.DEFENSIVE,\r\n        gcd: {\r\n          base: 1500,\r\n        },\r\n      },\r\n      //COOLDOWNS\r\n      {\r\n        spell: SPELLS.ARDENT_DEFENDER,\r\n        buffSpellId: SPELLS.ARDENT_DEFENDER.id,\r\n        category: Abilities.SPELL_CATEGORIES.DEFENSIVE,\r\n        cooldown: 120 * (combatant.hasTalent(SPELLS.UNBREAKABLE_SPIRIT_TALENT.id) ? 0.7 : 1),\r\n        castEfficiency: {\r\n          suggestion: true,\r\n        },\r\n      },\r\n      {\r\n        spell: [SPELLS.GUARDIAN_OF_ANCIENT_KINGS, SPELLS.GUARDIAN_OF_ANCIENT_KINGS_QUEEN],\r\n        buffSpellId: [SPELLS.GUARDIAN_OF_ANCIENT_KINGS.id, SPELLS.GUARDIAN_OF_ANCIENT_KINGS_QUEEN.id],\r\n        category: Abilities.SPELL_CATEGORIES.DEFENSIVE,\r\n        cooldown: 300,\r\n        castEfficiency: {\r\n          suggestion: true,\r\n        },\r\n      },\r\n      {\r\n        spell: SPELLS.SERAPHIM_TALENT,\r\n        buffSpellId: SPELLS.SERAPHIM_TALENT.id,\r\n        category: Abilities.SPELL_CATEGORIES.SEMI_DEFENSIVE,\r\n        cooldown: 45,\r\n        gcd: {\r\n          base: 1500,\r\n        },\r\n        enabled: combatant.hasTalent(SPELLS.SERAPHIM_TALENT.id),\r\n        castEfficiency: {\r\n          suggestion: true,\r\n        },\r\n      },\r\n      {\r\n        spell: SPELLS.AVENGING_WRATH,\r\n        buffSpellId: SPELLS.AVENGING_WRATH.id,\r\n        category: Abilities.SPELL_CATEGORIES.SEMI_DEFENSIVE,\r\n        gcd: {\r\n          base: 1500,\r\n        },\r\n        cooldown: 120,\r\n        // castEfficiency: {\r\n        //   suggestion: true,\r\n        //   recommendedEfficiency: 0.85,\r\n        // },\r\n      },\r\n      {\r\n        spell: SPELLS.LAY_ON_HANDS,\r\n        isDefensive: true,\r\n        category: Abilities.SPELL_CATEGORIES.COOLDOWNS,\r\n        cooldown: 600,\r\n        castEfficiency: {\r\n          suggestion: true,\r\n          recommendedEfficiency: 0.1,\r\n        },\r\n      },\r\n      {\r\n        spell: SPELLS.FLASH_OF_LIGHT,\r\n        category: Abilities.SPELL_CATEGORIES.OTHERS,\r\n        gcd: {\r\n          base: 1500,\r\n        },\r\n      },\r\n      {\r\n        spell: SPELLS.DIVINE_STEED,\r\n        category: Abilities.SPELL_CATEGORIES.UTILITY,\r\n        cooldown: 45,\r\n        charges: combatant.hasTalent(SPELLS.CAVALIER_TALENT.id) ? 2 : 1,\r\n        gcd: {\r\n          base: 1500,\r\n        },\r\n      },\r\n      {\r\n        spell: SPELLS.BLESSING_OF_FREEDOM,\r\n        category: Abilities.SPELL_CATEGORIES.UTILITY,\r\n        cooldown: 25,\r\n        gcd: {\r\n          base: 1500,\r\n        },\r\n      },\r\n      {\r\n        spell: SPELLS.BLESSING_OF_PROTECTION,\r\n        isDefensive: true,\r\n        category: Abilities.SPELL_CATEGORIES.UTILITY,\r\n        cooldown: 5 * 60,\r\n        gcd: {\r\n          base: 1500,\r\n        },\r\n        enabled: !combatant.hasTalent(SPELLS.BLESSING_OF_SPELLWARDING_TALENT.id),\r\n      },\r\n      {\r\n        spell: SPELLS.BLESSING_OF_SPELLWARDING_TALENT,\r\n        category: Abilities.SPELL_CATEGORIES.COOLDOWNS,\r\n        cooldown: 180,\r\n        gcd: {\r\n          base: 1500,\r\n        },\r\n        enabled: combatant.hasTalent(SPELLS.BLESSING_OF_SPELLWARDING_TALENT.id),\r\n      },\r\n      {\r\n        spell: SPELLS.BLESSING_OF_SACRIFICE,\r\n        category: Abilities.SPELL_CATEGORIES.UTILITY,\r\n        cooldown: 120,\r\n        // castEfficiency: {\r\n        //   suggestion: true,\r\n        //   recommendedEfficiency: 0.85,\r\n        // },\r\n      },\r\n      {\r\n        spell: SPELLS.AEGIS_OF_LIGHT_TALENT,\r\n        category: Abilities.SPELL_CATEGORIES.UTILITY,\r\n        cooldown: 180,\r\n        gcd: {\r\n          base: 1500,\r\n        },\r\n        enabled: combatant.hasTalent(SPELLS.AEGIS_OF_LIGHT_TALENT.id),\r\n      },\r\n      {\r\n        spell: SPELLS.CLEANSE_TOXINS,\r\n        category: Abilities.SPELL_CATEGORIES.UTILITY,\r\n        cooldown: 8,\r\n        gcd: {\r\n          base: 1500,\r\n        },\r\n      },\r\n      {\r\n        spell: SPELLS.HAMMER_OF_JUSTICE,\r\n        category: Abilities.SPELL_CATEGORIES.UTILITY,\r\n        cooldown: 60,\r\n        gcd: {\r\n          base: 1500,\r\n        },\r\n      },\r\n      {\r\n        spell: SPELLS.HAMMER_OF_WRATH,\r\n        category: Abilities.SPELL_CATEGORIES.ROTATIONAL,\r\n        cooldown: haste => 7.5 / (1 + haste),\r\n        gcd: {\r\n          base: 1500,\r\n        },\r\n      },\r\n      {\r\n        spell: SPELLS.HAND_OF_RECKONING,\r\n        category: Abilities.SPELL_CATEGORIES.UTILITY,\r\n        cooldown: 8,\r\n      },\r\n      {\r\n        spell: SPELLS.REBUKE,\r\n        category: Abilities.SPELL_CATEGORIES.UTILITY,\r\n        cooldown: 15,\r\n      },\r\n      {\r\n        spell: SPELLS.BLINDING_LIGHT_TALENT,\r\n        category: Abilities.SPELL_CATEGORIES.UTILITY,\r\n        cooldown: 90,\r\n        gcd: {\r\n          base: 1500,\r\n        },\r\n        enabled: combatant.hasTalent(SPELLS.BLINDING_LIGHT_TALENT.id),\r\n      },\r\n      {\r\n        spell: SPELLS.REPENTANCE_TALENT,\r\n        category: Abilities.SPELL_CATEGORIES.UTILITY,\r\n        cooldown: 15,\r\n        gcd: {\r\n          base: 1500,\r\n        },\r\n        enabled: combatant.hasTalent(SPELLS.REPENTANCE_TALENT.id),\r\n      },\r\n      {\r\n        spell: SPELLS.BASTION_OF_LIGHT_TALENT,\r\n        category: Abilities.SPELL_CATEGORIES.ROTATIONAL,\r\n        cooldown: 120,\r\n        enabled: combatant.hasTalent(SPELLS.BASTION_OF_LIGHT_TALENT.id),\r\n      },\r\n    ];\r\n  }\r\n}\r\n\r\nexport default Abilities;\r\n","import React from 'react';\r\n\r\nimport SPELLS from 'common/SPELLS';\r\nimport SpellLink from 'common/SpellLink';\r\nimport { formatPercentage } from 'common/format';\r\nimport CoreAlwaysBeCasting from 'parser/shared/modules/AlwaysBeCasting';\r\nimport { STATISTIC_ORDER } from 'interface/others/StatisticBox';\r\nimport { i18n } from '@lingui/core';\r\nimport { t } from '@lingui/macro';\r\n\r\nclass AlwaysBeCasting extends CoreAlwaysBeCasting {\r\n  get suggestionThresholds() {\r\n    return {\r\n      actual: this.downtimePercentage,\r\n      isGreaterThan: {\r\n        minor: 0.2,\r\n        average: 0.35,\r\n        major: 0.4,\r\n      },\r\n      style: 'percentage',\r\n    };\r\n  }\r\n\r\n  suggestions(when) {\r\n    const boss = this.owner.boss;\r\n\r\n    if (!boss || !boss.fight.disableDowntimeSuggestion) {\r\n      when(this.suggestionThresholds).addSuggestion((suggest, actual, recommended) => suggest(<>Your downtime can be improved. Try to cast more, for example by reducing the delay between casting spells. Even if you have to move, try to cast something instant with range like <SpellLink id={SPELLS.JUDGMENT_CAST.id} icon /> or <SpellLink id={SPELLS.AVENGERS_SHIELD.id} icon />.</>)\r\n          .icon('spell_mage_altertime')\r\n          .actual(i18n._(t('paladin.protection.alwaysBeCasting.downtime')`${formatPercentage(actual)}% downtime`))\r\n          .recommended(`<${formatPercentage(recommended)}% is recommended`));\r\n    }\r\n  }\r\n\r\n  statisticOrder = STATISTIC_ORDER.CORE(1);\r\n}\r\n\r\nexport default AlwaysBeCasting;\r\n","import React from 'react';\r\nimport Analyzer, { Options, SELECTED_PLAYER } from 'parser/core/Analyzer';\r\nimport STATISTIC_ORDER from 'interface/others/STATISTIC_ORDER';\r\nimport SPELLS from 'common/SPELLS';\r\nimport HIT_TYPES from 'game/HIT_TYPES';\r\nimport { formatPercentage } from 'common/format';\r\nimport { plotOneVariableBinomChart } from 'parser/shared/modules/helpers/Probability';\r\nimport Events, { CastEvent, DamageEvent } from 'parser/core/Events';\r\nimport Statistic from 'interface/statistics/Statistic';\r\nimport BoringSpellValue from 'interface/statistics/components/BoringSpellValue';\r\n\r\nimport Abilities from '../Abilities';\r\nimport SpellUsable from '../features/SpellUsable';\r\n\r\n\r\nconst BASE_PROC_CHANCE = 0.15;\r\n\r\nclass GrandCrusader extends Analyzer {\r\n  static dependencies = {\r\n    abilities: Abilities,\r\n  };\r\n  _totalResets: number = 0;\r\n  _exactResets: number = 0;\r\n  _inferredResets: number = 0;\r\n  _resetChances: number = 0;\r\n  abilities!: Abilities;\r\n\r\n  constructor(options: Options) {\r\n    super(options);\r\n    this.addEventListener(Events.cast.by(SELECTED_PLAYER).spell([SPELLS.HAMMER_OF_THE_RIGHTEOUS, SPELLS.BLESSED_HAMMER_TALENT]), this.trackGrandCrusaderChanceCasts);\r\n    this.addEventListener(Events.damage.to(SELECTED_PLAYER), this.trackGrandCrusaderChanceHits);\r\n  }\r\n\r\n  get procChance(): number {\r\n    return BASE_PROC_CHANCE;\r\n  }\r\n\r\n  _lastResetSource: CastEvent | DamageEvent | null = null;\r\n\r\n  trackGrandCrusaderChanceCasts(event: CastEvent) {\r\n    if (![SPELLS.HAMMER_OF_THE_RIGHTEOUS.id, SPELLS.BLESSED_HAMMER_TALENT.id].includes(event.ability.guid)) {\r\n      return;\r\n    }\r\n    this._resetChances += 1;\r\n    this._lastResetSource = event;\r\n  }\r\n\r\n  trackGrandCrusaderChanceHits(event: DamageEvent) {\r\n    if (![HIT_TYPES.DODGE, HIT_TYPES.PARRY].includes(event.hitType)) {\r\n      return;\r\n    }\r\n    this._resetChances += 1;\r\n    this._lastResetSource = event;\r\n  }\r\n\r\n  triggerInferredReset(spellUsable: SpellUsable, event: CastEvent | DamageEvent) {\r\n    this._totalResets += 1;\r\n    this._inferredResets += 1;\r\n    this.resetCooldowns(spellUsable, event);\r\n  }\r\n\r\n  resetCooldowns(spellUsable: SpellUsable, event: CastEvent | DamageEvent) {\r\n    // reset AS cd\r\n    if (spellUsable.isOnCooldown(SPELLS.AVENGERS_SHIELD.id)) {\r\n      spellUsable.endCooldown(SPELLS.AVENGERS_SHIELD.id, false, this._lastResetSource?.timestamp, 0);\r\n    }\r\n\r\n    // reset Judgment CD if the CJ talent is selected\r\n    if (this.selectedCombatant.hasTalent(SPELLS.CRUSADERS_JUDGMENT_TALENT.id) && spellUsable.isOnCooldown(SPELLS.JUDGMENT_CAST_PROTECTION.id) && this._lastResetSource !== null) {\r\n      // get haste as of last reset source. fingers crossed that it\r\n      // isn't too far off\r\n      const ecd: number | undefined = this.abilities.getExpectedCooldownDuration(SPELLS.JUDGMENT_CAST_PROTECTION.id, this._lastResetSource);\r\n      if (ecd !== undefined) {\r\n        spellUsable.reduceCooldown(SPELLS.JUDGMENT_CAST_PROTECTION.id, ecd, this._lastResetSource.timestamp);\r\n      }\r\n    }\r\n  }\r\n\r\n  statistic() {\r\n    //As we use a different formula than the standard one for XAxis, we send it along as a parameter\r\n    const binomChartXAxis = {\r\n      title: 'Reset %',\r\n      tickFormat: (value: number) => `${formatPercentage(value / this._resetChances, 0)}%`,\r\n      style: {\r\n        fill: 'white',\r\n      },\r\n    };\r\n    return (\r\n      <Statistic\r\n        position={STATISTIC_ORDER.DEFAULT}\r\n        size=\"flexible\"\r\n        tooltip={(\r\n          <>\r\n            Grand Crusader reset the cooldown of Avenger's Shield at least {this._totalResets} times. {this._inferredResets} are inferred from using it before its cooldown normally be up.<br />\r\n            You had {this._resetChances} chances for Grand Crusader to trigger with a {formatPercentage(this.procChance, 0)}% chance to trigger.\r\n          </>\r\n               )}\r\n        dropdown={(\r\n          <div style={{ padding: '8px' }}>\r\n            {plotOneVariableBinomChart(this._totalResets, this._resetChances, this.procChance, 'Reset %', 'Actual Resets', [0, 0.2], binomChartXAxis)}\r\n            <p>Likelihood of having <em>exactly</em> as many resets as you did with your traits and talents.</p>\r\n          </div>\r\n        )}\r\n      >\r\n        <BoringSpellValue\r\n          spell={SPELLS.GRAND_CRUSADER}\r\n          value={`${this._totalResets} Resets`}\r\n          label=\"Grand Crusader\"\r\n        />\r\n      </Statistic>\r\n    )\r\n  }\r\n}\r\n\r\nexport default GrandCrusader;\r\n","import SPELLS from 'common/SPELLS';\r\nimport { Options } from 'parser/core/Analyzer';\r\nimport { DamageEvent, CastEvent } from 'parser/core/Events';\r\nimport CoreSpellUsable, { INVALID_COOLDOWN_CONFIG_LAG_MARGIN } from 'parser/shared/modules/SpellUsable';\r\n\r\nimport GrandCrusader from '../core/GrandCrusader';\r\n\r\nclass SpellUsable extends CoreSpellUsable {\r\n  static dependencies = {\r\n    ...CoreSpellUsable.dependencies,\r\n    gc: GrandCrusader,\r\n  };\r\n  _hasCJ: boolean = false;\r\n  gc!: GrandCrusader;\r\n\r\n  constructor(options: Options) {\r\n    super(options);\r\n    this._hasCJ = this.selectedCombatant.hasTalent(SPELLS.CRUSADERS_JUDGMENT_TALENT.id);\r\n  }\r\n\r\n  beginCooldown(spellId: number, cooldownTriggerEvent: CastEvent | DamageEvent) {\r\n    if (spellId === SPELLS.AVENGERS_SHIELD.id) {\r\n      if (this.isOnCooldown(spellId) && this.cooldownRemaining(spellId) > INVALID_COOLDOWN_CONFIG_LAG_MARGIN) {\r\n        this.gc.triggerInferredReset(this, cooldownTriggerEvent);\r\n      }\r\n    } else if (this._hasCJ && spellId === SPELLS.JUDGMENT_CAST_PROTECTION.id) {\r\n      if (!this.isAvailable(spellId) && this.cooldownRemaining(spellId) > INVALID_COOLDOWN_CONFIG_LAG_MARGIN) {\r\n        this.gc.triggerInferredReset(this, cooldownTriggerEvent);\r\n      }\r\n    }\r\n\r\n    super.beginCooldown(spellId, cooldownTriggerEvent);\r\n  }\r\n}\r\n\r\nexport default SpellUsable;\r\n","import React from 'react';\r\nimport { formatPercentage, formatThousands } from 'common/format';\r\nimport SpellIcon from 'common/SpellIcon';\r\nimport SpellLink from 'common/SpellLink';\r\nimport StatisticBox, { STATISTIC_ORDER } from 'interface/others/StatisticBox';\r\nimport Analyzer, { SELECTED_PLAYER, Options } from 'parser/core/Analyzer';\r\nimport { When, ThresholdStyle } from 'parser/core/ParseResults';\r\nimport SPELLS from 'common/SPELLS';\r\nimport Events, { CastEvent, DamageEvent } from 'parser/core/Events';\r\nimport { shouldIgnore, magic } from 'parser/shared/modules/hit-tracking/utilities';\r\nimport Enemies from 'parser/shared/modules/Enemies';\r\n\r\ninterface CastMetadata {\r\n  castTime: number,\r\n  buffStartTime: number,\r\n  buffEndTime: number,\r\n  melees: number,\r\n  tankbusters: number,\r\n  _event: CastEvent,\r\n}\r\n\r\nclass ShieldOfTheRighteous extends Analyzer {\r\n  static dependencies = {\r\n    enemies: Enemies,\r\n  };\r\n\r\n  protected enemies!: Enemies;\r\n\r\n  totalHits = 0;\r\n  sotrHits = 0;\r\n  totalDamageTaken = 0;\r\n  sotrDamageTaken = 0;\r\n\r\n  constructor(options: Options) {\r\n    super(options);\r\n    // M+ doesn't have a boss prop\r\n    this.addEventListener(Events.damage.to(SELECTED_PLAYER), this.trackHits);\r\n  }\r\n\r\n  trackHits(event: DamageEvent) {\r\n    if(shouldIgnore(this.enemies, event) || magic(event)) {\r\n      return;\r\n    }\r\n\r\n    const amount = event.amount + (event.absorbed || 0) + (event.overkill || 0);\r\n\r\n    this.totalHits += 1;\r\n    this.totalDamageTaken += amount;\r\n    if(this.selectedCombatant.hasBuff(SPELLS.SHIELD_OF_THE_RIGHTEOUS_BUFF.id)) {\r\n      this.sotrHits += 1;\r\n      this.sotrDamageTaken += amount;\r\n    }\r\n  }\r\n\r\n  get hitsMitigatedThreshold() {\r\n    return {\r\n      actual: this.sotrHits / this.totalHits,\r\n      isLessThan: {\r\n        minor: 0.95,\r\n        average: 0.9,\r\n        major: 0.85\r\n      },\r\n      style: ThresholdStyle.PERCENTAGE,\r\n    };\r\n  }\r\n\r\n  suggestions(when: When) {\r\n    when(this.hitsMitigatedThreshold)\r\n      .addSuggestion((suggest, actual, recommended) => suggest(<>You should maintain <SpellLink id={SPELLS.SHIELD_OF_THE_RIGHTEOUS.id} /> while actively tanking</>)\r\n        .icon(SPELLS.SHIELD_OF_THE_RIGHTEOUS.icon)\r\n        .actual(`${formatPercentage(actual)}% of hits mitigated by Shield of the Righteous`)\r\n        .recommended(`at least ${formatPercentage(recommended)}% is recommended`));\r\n  }\r\n\r\n  statistic() {\r\n\r\n    return (\r\n      <StatisticBox\r\n        icon={<SpellIcon id={SPELLS.SHIELD_OF_THE_RIGHTEOUS.id} />}\r\n        value={`${formatPercentage(this.sotrHits / this.totalHits)}%`}\r\n        label=\"Physical Hits Mitigated\"\r\n        tooltip={(\r\n          <>\r\n            Shield of the Righteous usage breakdown:\r\n            <ul>\r\n              <li>You were hit <strong>{this.sotrHits}</strong> times with your Shield of the Righteous buff (<strong>{formatThousands(this.sotrDamageTaken)}</strong> damage).</li>\r\n              <li>You were hit <strong>{this.totalHits - this.sotrHits}</strong> times <strong><em>without</em></strong> your Shield of the Righteous buff (<strong>{formatThousands(this.totalDamageTaken - this.sotrDamageTaken)}</strong> damage).</li>\r\n            </ul>\r\n            <strong>{formatPercentage(this.sotrHits / this.totalHits)}%</strong> of physical attacks were mitigated with Shield of the Righteous.<br />\r\n          </>\r\n        )}\r\n      />\r\n    );\r\n  }\r\n  statisticOrder = STATISTIC_ORDER.CORE(10);\r\n}\r\n\r\nexport default ShieldOfTheRighteous;\r\n","import React from 'react';\r\nimport Analyzer, { Options, SELECTED_PLAYER } from 'parser/core/Analyzer';\r\nimport Events, { CastEvent, DamageEvent } from 'parser/core/Events';\r\nimport SPELLS from 'common/SPELLS';\r\nimport { formatPercentage } from 'common/format';\r\nimport { When, NumberThreshold, ThresholdStyle } from 'parser/core/ParseResults';\r\nimport { STATISTIC_ORDER } from 'interface/others/StatisticBox';\r\nimport Statistic from 'interface/statistics/Statistic';\r\nimport BoringSpellValue from 'interface/statistics/components/BoringSpellValue';\r\nimport { t, Trans } from '@lingui/macro';\r\n\r\n/**\r\n * Analyzer to determine which, if any, SOTR casts did not result in a subsequent hit \r\n * on at least 1 enemy. Operates by determining a mapping from cast to resulting hits and\r\n * reporting the ratio of casts with at least one hit to total casts.\r\n */\r\nclass NoDamageShieldOfTheRighteous extends Analyzer {\r\n    private sotrCastsToHits: Map<CastEvent, DamageEvent[]> = new Map<CastEvent, DamageEvent[]>();\r\n    private lastSotrCastPtr: CastEvent | null = null;\r\n\r\n    constructor(options: Options) {\r\n        super(options);\r\n        this.addEventListener(Events.cast.by(SELECTED_PLAYER).spell(SPELLS.SHIELD_OF_THE_RIGHTEOUS), this.registerSOTRCast);\r\n        this.addEventListener(Events.damage.by(SELECTED_PLAYER).spell(SPELLS.SHIELD_OF_THE_RIGHTEOUS), this.registerSOTRHit);\r\n    }\r\n\r\n    registerSOTRCast(event: CastEvent) {\r\n        if (event.ability.guid !== SPELLS.SHIELD_OF_THE_RIGHTEOUS.id) {\r\n            return;\r\n        }\r\n        this.sotrCastsToHits.set(event, []);\r\n        this.lastSotrCastPtr = event;\r\n    }\r\n\r\n    registerSOTRHit(event: DamageEvent) {\r\n        if (event.ability.guid !== SPELLS.SHIELD_OF_THE_RIGHTEOUS.id) {\r\n            return;\r\n        }\r\n        if (this.lastSotrCastPtr !== null) {\r\n            this.sotrCastsToHits.get(this.lastSotrCastPtr)?.push(event);\r\n        }\r\n    }\r\n\r\n    get sotrCastToHitRatio(): number {\r\n        const totalCasts: number = this.sotrCastsToHits.size;\r\n        let numCastsWithHit = 0;\r\n        this.sotrCastsToHits.forEach((hits, cast) => {\r\n            if (hits.length > 0) {\r\n                numCastsWithHit += 1;\r\n            }\r\n        });\r\n        const ratio: number = numCastsWithHit / totalCasts;\r\n        return ratio;\r\n    }\r\n\r\n    get hitRatioSuggestionThresholds(): NumberThreshold {\r\n        return {\r\n            actual: this.sotrCastToHitRatio,\r\n            isLessThan: {\r\n                minor: 0.98,\r\n                average: 0.95,\r\n                major: 0.92,\r\n            },\r\n            style: ThresholdStyle.PERCENTAGE,\r\n        };\r\n    }\r\n\r\n    suggestions(when: When) {\r\n        when(this.hitRatioSuggestionThresholds)\r\n            .addSuggestion((suggest, actual, recommended) => suggest(t('paladin.protection.modules.features.noDamageShieldOfTheRighteous.suggestion')`SotR is a major source of damage. Make sure that each cast hits at least 1 enemy.`)\r\n            .icon(SPELLS.SHIELD_OF_THE_RIGHTEOUS.icon)\r\n            .actual(t('paladin.protection.modules.features.noDamageShieldOfTheRighteous.actual')`${formatPercentage(actual)}% of casts hit at least 1 target.`)\r\n            .recommended(t('paladin.protection.modules.features.noDamageShieldOfTheRighteous.recommended')`>${formatPercentage(recommended)}% is recommended`))\r\n    }\r\n\r\n    statistic() {\r\n        return (\r\n            <Statistic\r\n                position={STATISTIC_ORDER.DEFAULT}\r\n                size='flexible'\r\n            >\r\n                <BoringSpellValue \r\n                    spell={SPELLS.SHIELD_OF_THE_RIGHTEOUS}\r\n                    value={`${formatPercentage(this.sotrCastToHitRatio)} %`}\r\n                    label={<Trans id=\"paladin.protection.modules.features.noDamageShieldOfTheRighteous.sotrHit\">SotR Casts That Hit An Enemy</Trans>}\r\n                />\r\n            </Statistic>\r\n        )\r\n    }\r\n}\r\n\r\nexport default NoDamageShieldOfTheRighteous;\r\n\r\n","import React from 'react';\r\nimport Analyzer, { Options, SELECTED_PLAYER } from 'parser/core/Analyzer';\r\nimport SPELLS from 'common/SPELLS';\r\nimport { formatPercentage } from 'common/format';\r\nimport Statistic from 'interface/statistics/Statistic';\r\nimport STATISTIC_ORDER from 'interface/others/STATISTIC_ORDER';\r\nimport Events, { DamageEvent } from 'parser/core/Events';\r\nimport { When, ThresholdStyle, NumberThreshold } from 'parser/core/ParseResults';\r\nimport BoringSpellValue from 'interface/statistics/components/BoringSpellValue';\r\nimport { shouldIgnore } from 'parser/shared/modules/hit-tracking/utilities';\r\nimport Enemies from 'parser/shared/modules/Enemies';\r\nimport { i18n } from '@lingui/core';\r\nimport { t } from '@lingui/macro';\r\n\r\nclass Consecration extends Analyzer {\r\n  static dependencies = {\r\n    enemies: Enemies,\r\n  };\r\n\r\n  protected enemies!: Enemies;\r\n\r\n  _hitsTaken: number = 0;\r\n  _hitsMitigated: number = 0;\r\n\r\n  constructor(options: Options) {\r\n    super(options);\r\n    this.addEventListener(Events.damage.to(SELECTED_PLAYER), this.onPlayerDamage);\r\n  }\r\n\r\n  onPlayerDamage(event: DamageEvent) {\r\n    if(shouldIgnore(this.enemies, event)) {\r\n      return;\r\n    }\r\n\r\n    this._hitsTaken += 1;\r\n    if(this.selectedCombatant.hasBuff(SPELLS.CONSECRATION_BUFF.id)) {\r\n      this._hitsMitigated += 1;\r\n    }\r\n  }\r\n\r\n  get pctHitsMitigated(): number {\r\n    return this._hitsMitigated / this._hitsTaken;\r\n  }\r\n\r\n  get uptimeSuggestionThresholds(): NumberThreshold {\r\n    return {\r\n      actual: this.pctHitsMitigated,\r\n      isLessThan: {\r\n        minor: 0.95,\r\n        average: 0.9,\r\n        major: .8,\r\n      },\r\n      style: ThresholdStyle.PERCENTAGE,\r\n    };\r\n  }\r\n\r\n  suggestions(when: When) {\r\n    when(this.uptimeSuggestionThresholds)\r\n        .addSuggestion((suggest, actual, recommended) => suggest('Your Consecration usage can be improved. Maintain it to reduce all incoming damage and refresh it during rotational downtime.')\r\n            .icon(SPELLS.CONSECRATION_CAST.icon)\r\n            .actual(i18n._(t('paladin.protection.suggestions.consecration.hitsMitigated')`${formatPercentage(actual)}% of hits were mitigated by Consecration`))\r\n            .recommended(`>${formatPercentage(recommended)}% is recommended`));\r\n  }\r\n\r\n  statistic() {\r\n    return (\r\n      <Statistic\r\n        position={STATISTIC_ORDER.CORE(2)}\r\n        size=\"flexible\"\r\n        >\r\n          <BoringSpellValue\r\n            spell={SPELLS.CONSECRATION_CAST}\r\n            value={`${formatPercentage(this.pctHitsMitigated)} %`}\r\n            label=\"Hits Mitigated w/ Consecration\"\r\n          />\r\n      </Statistic>\r\n    );\r\n  }\r\n}\r\n\r\nexport default Consecration;\r\n","import React from 'react';\r\nimport SpellLink from 'common/SpellLink';\r\nimport Analyzer, { SELECTED_PLAYER } from 'parser/core/Analyzer';\r\nimport Events from 'parser/core/Events';\r\nimport Abilities from 'parser/core/modules/Abilities';\r\nimport SpellUsable from 'parser/shared/modules/SpellUsable';\r\nimport SPELLS from 'common/SPELLS';\r\nimport { formatPercentage } from 'common/format';\r\nimport { i18n } from '@lingui/core';\r\nimport { t } from '@lingui/macro';\r\n\r\nconst BETTER_SPELLS = [\r\n  SPELLS.JUDGMENT_CAST_PROTECTION.id,\r\n  SPELLS.AVENGERS_SHIELD.id,\r\n];\r\n\r\nexport default class HammerOfTheRighteous extends Analyzer {\r\n  static dependencies = {\r\n    abilities: Abilities,\r\n    spells: SpellUsable,\r\n  };\r\n\r\n  activeSpell = SPELLS.HAMMER_OF_THE_RIGHTEOUS;\r\n  _badCasts = 0;\r\n  _casts = 0;\r\n\r\n  constructor(props) {\r\n    super(props);\r\n    if(this.selectedCombatant.hasTalent(SPELLS.BLESSED_HAMMER_TALENT.id)) {\r\n      this.activeSpell = SPELLS.BLESSED_HAMMER_TALENT;\r\n    }\r\n\r\n    this.addEventListener(Events.cast.by(SELECTED_PLAYER).spell(this.activeSpell), this._handleFiller);\r\n  }\r\n\r\n  _handleFiller(event) {\r\n    const hadBetterSpell = !BETTER_SPELLS.every(this.spells.isOnCooldown.bind(this.spells));\r\n    if(hadBetterSpell) {\r\n      this._badCasts += 1;\r\n    }\r\n\r\n    this._casts += 1;\r\n  }\r\n\r\n  get badCastRatio() {\r\n    return this._badCasts / this._casts;\r\n  }\r\n\r\n  get badCastThreshold() {\r\n    return {\r\n      actual: this.badCastRatio,\r\n      isGreaterThan: {\r\n        minor: 0.10,\r\n        average: 0.15,\r\n        major: 0.25,\r\n      },\r\n      style: 'percentage',\r\n    };\r\n  }\r\n\r\n  suggestions(when) {\r\n    when(this.badCastThreshold)\r\n      .addSuggestion((suggest, actual, recommended) => suggest(<>You should avoid casting <SpellLink id={this.activeSpell.id} /> while better spells (namely <SpellLink id={SPELLS.JUDGMENT_CAST_PROTECTION.id} /> and <SpellLink id={SPELLS.AVENGERS_SHIELD.id} />) are available. This is a <em>filler</em> ability and should only be used when you have no better spells to cast.</>)\r\n        .icon(this.activeSpell.icon)\r\n        .actual(i18n._(t('paladin.protection.suggestions.hammerOfTheRighteous.efficiency')`${formatPercentage(this.badCastRatio)}% of casts while better spells were available`))\r\n        .recommended(`< ${formatPercentage(recommended)}% is recommended`));\r\n  }\r\n}\r\n","import React from 'react';\r\nimport SPELLS from 'common/SPELLS';\r\nimport Analyzer, { Options, SELECTED_PLAYER } from 'parser/core/Analyzer';\r\nimport SpellUsable from 'parser/shared/modules/SpellUsable';\r\nimport Events, { CastEvent } from 'parser/core/Events';\r\nimport Statistic from 'interface/statistics/Statistic';\r\nimport STATISTIC_ORDER from 'interface/others/STATISTIC_ORDER';\r\nimport STATISTIC_CATEGORY from 'interface/others/STATISTIC_CATEGORY';\r\nimport BoringSpellValueText from 'interface/statistics/components/BoringSpellValueText';\r\nimport { formatNumber } from 'common/format';\r\nimport SpellIcon from 'common/SpellIcon';\r\n\r\nexport const REDUCTION_TIME = 1000; // ms\r\nconst SECOND = 1000;\r\n\r\n/**\r\n * Shield of the Righteous reduces the remaining cooldown on Avenging Wrath and Guardian of Ancient Kings by 1 second.\r\n */\r\nclass RighteousProtector extends Analyzer {\r\n  static dependencies = {\r\n    spellUsable: SpellUsable,\r\n  };\r\n\r\n  protected spellUsable!: SpellUsable;\r\n  guardianOfAncientKingsReduced: number = 0;\r\n  guardianOfAncientKingsWasted: number = 0;\r\n  avengingWrathReduced: number = 0;\r\n  avengingWrathReductionWasted: number = 0;\r\n\r\n  constructor(options: Options) {\r\n    super(options);\r\n    this.active = this.selectedCombatant.hasTalent(SPELLS.RIGHTEOUS_PROTECTOR_TALENT.id);\r\n    if (!this.active) {\r\n      return;\r\n    }\r\n    this.addEventListener(Events.cast.by(SELECTED_PLAYER).spell(SPELLS.SHIELD_OF_THE_RIGHTEOUS), this.onCast);\r\n  }\r\n\r\n  onCast(event: CastEvent) {\r\n    if (this.spellUsable.isOnCooldown(SPELLS.AVENGING_WRATH.id)) {\r\n      const reduction = this.spellUsable.reduceCooldown(SPELLS.AVENGING_WRATH.id, REDUCTION_TIME);\r\n      this.avengingWrathReduced += reduction;\r\n      this.avengingWrathReductionWasted += REDUCTION_TIME - reduction;\r\n    } else {\r\n      this.avengingWrathReductionWasted += REDUCTION_TIME;\r\n    }\r\n    if (this.spellUsable.isOnCooldown(SPELLS.GUARDIAN_OF_ANCIENT_KINGS.id) || this.spellUsable.isOnCooldown(SPELLS.GUARDIAN_OF_ANCIENT_KINGS_QUEEN.id)) {\r\n      const reduction = this.guardianReduction;\r\n      this.guardianOfAncientKingsReduced += reduction;\r\n      this.guardianOfAncientKingsWasted += REDUCTION_TIME - reduction;\r\n    } else {\r\n      this.guardianOfAncientKingsWasted += REDUCTION_TIME;\r\n    }\r\n  }\r\n\r\n  /**\r\n   * The buff provided as part of Guardian of Ancient Kings has a different ID based on whether or\r\n   * not the Guardian of Ancient Queens glyph is being used. Since we have no way of looking at the current\r\n   * player's glyphs and `reduceCooldown` throws an error if you try to reduce the CD of a spell not on CD,\r\n   * we use this slightly stupid way of reducing the player's GOAK CD\r\n   */\r\n  get guardianReduction(): number {\r\n    try {\r\n      return this.spellUsable.reduceCooldown(SPELLS.GUARDIAN_OF_ANCIENT_KINGS.id, REDUCTION_TIME);\r\n    } catch (e) {\r\n      return this.spellUsable.reduceCooldown(SPELLS.GUARDIAN_OF_ANCIENT_KINGS_QUEEN.id, REDUCTION_TIME);\r\n    }\r\n  }\r\n\r\n  statistic(): React.ReactNode {\r\n    return (\r\n      <Statistic\r\n        position={STATISTIC_ORDER.DEFAULT}\r\n        size=\"flexible\"\r\n        category={STATISTIC_CATEGORY.TALENTS}\r\n      >\r\n        <BoringSpellValueText spell={SPELLS.RIGHTEOUS_PROTECTOR_TALENT}>\r\n          <SpellIcon id={SPELLS.AVENGING_WRATH.id} /> {formatNumber(this.avengingWrathReduced/SECOND)}s <small>CD Reduction ({formatNumber(this.avengingWrathReductionWasted/SECOND)}s wasted)</small><br />\r\n          <SpellIcon id={SPELLS.GUARDIAN_OF_ANCIENT_KINGS.id} /> {formatNumber(this.guardianOfAncientKingsReduced/SECOND)}s <small>CD Reduction ({formatNumber(this.guardianOfAncientKingsWasted/SECOND)}s wasted)</small>\r\n        </BoringSpellValueText>\r\n      </Statistic>\r\n    )\r\n  }\r\n}\r\n\r\nexport default RighteousProtector;\r\n","import React from 'react';\r\nimport SPELLS from 'common/SPELLS';\r\nimport SpellLink from 'common/SpellLink';\r\nimport Analyzer, { SELECTED_PLAYER } from 'parser/core/Analyzer';\r\nimport Events from 'parser/core/Events';\r\nimport Abilities from 'parser/core/modules/Abilities';\r\nimport SpellUsable from 'parser/shared/modules/SpellUsable';\r\nimport HIT_TYPES from 'game/HIT_TYPES';\r\nimport { formatNumber, formatPercentage } from 'common/format';\r\n\r\nimport { i18n } from '@lingui/core';\r\nimport { t } from '@lingui/macro';\r\n\r\nimport { REDUCTION_TIME as RP_REDUCTION_TIME } from 'parser/paladin/protection/modules/talents/RighteousProtector';\r\n\r\nconst HEAL_DELAY_THRESHOLD = 2000;\r\n\r\n/**\r\n * Light of the Protector / Hand of the Protector shared analysis\r\n *\r\n * Many of the behaviors are shared between the two abilities, and this\r\n * module handles those.\r\n *\r\n * Behavior specific to HotP should be placed in a separate\r\n * HandOfTheProtector module.\r\n *\r\n * Sample Log: https://www.warcraftlogs.com/reports/WP3FTxYwkLXyVRac/#fight=2&source=20\r\n */\r\nexport default class LightOfTheProtector extends Analyzer {\r\n  static dependencies = {\r\n    spells: SpellUsable,\r\n    abilities: Abilities,\r\n  };\r\n\r\n  _lastHit = null;\r\n  _msTilHeal = 0;\r\n  _delays = [];\r\n\r\n  activeSpell = SPELLS.LIGHT_OF_THE_PROTECTOR;\r\n\r\n  _overhealing = 0;\r\n  _actualHealing = 0;\r\n\r\n  constructor(props) {\r\n    super(props);\r\n    if(this.selectedCombatant.hasTalent(SPELLS.HAND_OF_THE_PROTECTOR_TALENT.id)) {\r\n      this.activeSpell = SPELLS.HAND_OF_THE_PROTECTOR_TALENT;\r\n      this.addEventListener(Events.cast.by(SELECTED_PLAYER).to(SELECTED_PLAYER).spell(this.activeSpell), this._countDelay);\r\n    } else {\r\n      // LotP has no target, so .to(SELECTED_PLAYER) filters out ALL\r\n      // casts\r\n      this.addEventListener(Events.cast.by(SELECTED_PLAYER).spell(this.activeSpell), this._countDelay);\r\n    }\r\n\r\n    this.addEventListener(Events.damage.to(SELECTED_PLAYER), this._startDelayTimer);\r\n    this.addEventListener(Events.heal.by(SELECTED_PLAYER).spell(this.activeSpell), this._countHeal);\r\n\r\n    if(this.selectedCombatant.hasTalent(SPELLS.RIGHTEOUS_PROTECTOR_TALENT.id)) {\r\n      this.addEventListener(Events.cast.by(SELECTED_PLAYER).spell(SPELLS.SHIELD_OF_THE_RIGHTEOUS), this._updateDelayRP);\r\n    }\r\n  }\r\n\r\n  _startDelayTimer(event) {\r\n    this._lastHit = event;\r\n    this._msTilHeal = this.spells.isAvailable(this.activeSpell.id) ? 0 : this.spells.cooldownRemaining(this.activeSpell.id);\r\n  }\r\n\r\n  // update the delay based on SotR cast with the RP talent, which\r\n  // reduces LotP/HotP CD by 3s\r\n  _updateDelayRP(event) {\r\n    if(!this._lastHit || this._msTilHeal === 0) {\r\n      return;\r\n    }\r\n    const delayFromHit = event.timestamp - this._lastHit.timestamp;\r\n    this._msTilHeal -= RP_REDUCTION_TIME;\r\n    // we couldn't cast the heal before the current event happened\r\n    if(this._msTilHeal < delayFromHit) {\r\n      this._msTilHeal = delayFromHit;\r\n    }\r\n  }\r\n\r\n  _countDelay(event) {\r\n    if(this._lastHit === null) {\r\n      // haven't been hit yet, might have started with less than 100% hp\r\n      // (or are fighting Mythrax)\r\n      return;\r\n    }\r\n    const delay = event.timestamp - (this._lastHit ? this._lastHit.timestamp : 0) - this._msTilHeal;\r\n    if(delay < 0) {\r\n      console.error(\"LotP/HotP delay came out negative\", delay);\r\n    }\r\n    this._delays.push(delay);\r\n\r\n    if(delay < HEAL_DELAY_THRESHOLD) {\r\n      return; // nothing left to do\r\n    }\r\n\r\n    const meta = event.meta || {\r\n      inefficientCastReason: `This ${this.activeSpell.name} cast was inefficient because:`,\r\n    };\r\n    meta.inefficientCastReason += `<br/> - You delayed casting it for <b>${(delay / 1000).toFixed(2)}s</b> after being hit.`;\r\n    meta.isInefficientCast = true;\r\n    event.meta = meta;\r\n  }\r\n\r\n  _countHeal(event) {\r\n    const overhealing = event.overheal || 0;\r\n    this._overhealing += overhealing;\r\n    this._actualHealing += event.amount;\r\n\r\n    if(overhealing === 0 || event.hitType === HIT_TYPES.CRIT) {\r\n      return; // not gonna penalize overhealing on crits because it heals for SO MUCH\r\n    }\r\n\r\n    const meta = event.meta || {\r\n      inefficientCastReason: `This ${this.activeSpell.name} cast was inefficient because:`,\r\n    };\r\n    meta.inefficientCastReason += `<br/> - You cast it while at high health, causing it to overheal for ${formatNumber(overhealing)}.`;\r\n    meta.isInefficientCast = true;\r\n    event.meta = meta;\r\n  }\r\n\r\n  get avgDelay() {\r\n    if(this._delays.length === 0) {\r\n      return 0;\r\n    }\r\n\r\n    return this._delays.reduce((sum, delay) => sum + delay, 0) / this._delays.length;\r\n  }\r\n\r\n  get overhealRatio() {\r\n    return (this._overhealing / (this._overhealing + this._actualHealing)) || 0;\r\n  }\r\n\r\n  get overhealSuggestion() {\r\n    return {\r\n      actual: this.overhealRatio,\r\n      isGreaterThan: {\r\n        minor: 0.10,\r\n        average: 0.20,\r\n        major: 0.30,\r\n      },\r\n      style: 'percentage',\r\n    };\r\n  }\r\n\r\n  get delaySuggestion() {\r\n    return {\r\n      actual: this.avgDelay / 1000,\r\n      isGreaterThan: {\r\n        minor: 1.5,\r\n        average: HEAL_DELAY_THRESHOLD / 1000,\r\n        major: HEAL_DELAY_THRESHOLD / 1000 + 1,\r\n      },\r\n      style: 'seconds',\r\n    };\r\n  }\r\n\r\n  suggestions(when) {\r\n    when(this.delaySuggestion).addSuggestion((suggest, actual, recommended) => suggest(<>You should delay your <SpellLink id={this.activeSpell.id} /> cast as little as possible after being hit to maximize its effect and to minimize the chance that you waste healing resources.</>)\r\n        .icon(SPELLS.LIGHT_OF_THE_PROTECTOR.icon)\r\n        .actual(i18n._(t('paladin.protection.suggestions.lightOfTheProtector.averageDelay')`${actual.toFixed(2)}s Average Delay`))\r\n        .recommended(`< ${recommended.toFixed(2)}s is recommended`));\r\n\r\n    when(this.overhealSuggestion).addSuggestion((suggest, actual, recommended) => suggest(<>You should avoid casting <SpellLink id={this.activeSpell.id} /> while at very high health to avoid overhealing.</>)\r\n        .icon(SPELLS.LIGHT_OF_THE_PROTECTOR.icon)\r\n        .actual(i18n._(t('paladin.protection.suggestions.lightOfTheProtector.overhealing')`${formatPercentage(actual)}% Overhealing`))\r\n        .recommended(`< ${formatPercentage(recommended)}% is recommended`));\r\n  }\r\n}\r\n","import React from 'react';\r\nimport SPELLS from 'common/SPELLS';\r\nimport SpellLink from 'common/SpellLink';\r\nimport { formatPercentage } from 'common/format';\r\nimport Analyzer, { SELECTED_PLAYER } from 'parser/core/Analyzer';\r\nimport Events, { CastEvent, HealEvent, ApplyBuffEvent, RemoveBuffEvent } from 'parser/core/Events';\r\nimport { When, ThresholdStyle } from 'parser/core/ParseResults';\r\nimport { Options } from 'parser/core/Module';\r\nimport HIT_TYPES from 'game/HIT_TYPES';\r\n\r\nconst OVERHEAL_THRESHOLD = 0.75;\r\n\r\nexport default class WordOfGlory extends Analyzer {\r\n  private slCount = 0;\r\n  private slWasted = 0;\r\n  // sotr casts w/ SL up.\r\n  private slSotrs = 0;\r\n\r\n  private castsFree = 0;\r\n  private castsPayed = 0;\r\n  // casts that overhealed by enough to be concerning\r\n  private castsOverhealed = 0;\r\n\r\n  constructor(options: Options) {\r\n    super(options);\r\n\r\n    this.addEventListener(Events.cast.spell(SPELLS.WORD_OF_GLORY).by(SELECTED_PLAYER), this.cast);\r\n    this.addEventListener(Events.cast.spell(SPELLS.SHIELD_OF_THE_RIGHTEOUS).by(SELECTED_PLAYER), this.sotrCast);\r\n    this.addEventListener(Events.applybuff.spell(SPELLS.SHINING_LIGHT), this.slApply);\r\n    this.addEventListener(Events.removebuff.spell(SPELLS.SHINING_LIGHT), this.slRemove);\r\n    this.addEventListener(Events.heal.spell(SPELLS.WORD_OF_GLORY).by(SELECTED_PLAYER), this.heal);\r\n  }\r\n\r\n  private heal(event: HealEvent) {\r\n    const totalHeal = event.amount + (event.overheal || 0) + (event.absorbed || 0);\r\n\r\n    if (event.hitType !== HIT_TYPES.CRIT && event.amount / totalHeal < OVERHEAL_THRESHOLD) {\r\n      this.castsOverhealed += 1;\r\n    }\r\n  }\r\n\r\n  private cast(event: CastEvent) {\r\n    if(this.selectedCombatant.hasBuff(SPELLS.SHINING_LIGHT.id)) {\r\n      this.castsFree += 1;\r\n      this.slWasted -= 1;\r\n    } else {\r\n      this.castsPayed += 1;\r\n    }\r\n  }\r\n\r\n  private sotrCast(event: CastEvent) {\r\n    if(this.selectedCombatant.hasBuff(SPELLS.SHINING_LIGHT.id)) {\r\n      this.slSotrs += 1;\r\n    }\r\n  }\r\n\r\n  private slApply(_event: ApplyBuffEvent) {\r\n    this.slCount += 1;\r\n  }\r\n\r\n  private slRemove(_event: RemoveBuffEvent) {\r\n    // always mark wasted. when a cast is free, we subtract one. the end result\r\n    // is that if you use every SL you net 0 wasted.\r\n    this.slWasted += 1;\r\n  }\r\n\r\n  get totalCasts() {\r\n    return this.castsFree + this.castsPayed;\r\n  }\r\n\r\n  get overhealSuggestion() {\r\n    return {\r\n      actual: this.castsOverhealed / this.totalCasts,\r\n      isGreaterThan: {\r\n        minor: 0.1,\r\n        average: 0.15,\r\n        major: 0.2\r\n      },\r\n      style: ThresholdStyle.PERCENTAGE,\r\n    };\r\n  }\r\n\r\n  get wastedSlSuggestion() {\r\n    return {\r\n      actual: this.slWasted,\r\n      isGreaterThan: {\r\n        minor: 1,\r\n        average: 3,\r\n        major: 4,\r\n      },\r\n      style: ThresholdStyle.NUMBER,\r\n    };\r\n  }\r\n\r\n  get sotrSuggestion() {\r\n    return {\r\n      actual: this.slSotrs,\r\n      isGreaterThan: {\r\n        minor: 5,\r\n        average: 10,\r\n        major: 20,\r\n      },\r\n      style: ThresholdStyle.NUMBER,\r\n    };\r\n  }\r\n\r\n  suggestions(when: When) {\r\n    when(this.overhealSuggestion)\r\n      .addSuggestion((suggest, actual, recommended) => suggest(<>Try to avoid casting <SpellLink id={SPELLS.WORD_OF_GLORY.id} /> when a large portion of it would overheal.</>)\r\n        .icon(SPELLS.WORD_OF_GLORY.icon)\r\n        .actual(`${formatPercentage(actual)}% of your casts overhealed by more than 25%`)\r\n        .recommended(`< ${formatPercentage(recommended)}% is recommended`));\r\n\r\n    when(this.wastedSlSuggestion)\r\n      .addSuggestion((suggest, actual, recommended) => suggest(<>Make sure to use all of the free <SpellLink id={SPELLS.WORD_OF_GLORY.id} /> casts granted by <SpellLink id={SPELLS.SHINING_LIGHT.id} />.</>)\r\n        .icon(SPELLS.SHINING_LIGHT.icon)\r\n        .actual(`You let ${actual} free casts expire.`)\r\n        .recommended(`< ${recommended}% is recommended`));\r\n\r\n    when(this.sotrSuggestion)\r\n      .addSuggestion((suggest, actual, recommended) => suggest(<>Avoid letting your <SpellLink id={SPELLS.SHINING_LIGHT.id} /> buffs last too long. This wastes stacks that would be generated by <SpellLink id={SPELLS.SHIELD_OF_THE_RIGHTEOUS.id} />.</>)\r\n        .icon(SPELLS.SHINING_LIGHT.icon)\r\n        .actual(`You lost ${actual} stacks`)\r\n        .recommended(`< ${recommended} is recommended`));\r\n  }\r\n}\r\n","import React from 'react';\r\nimport PropTypes from 'prop-types';\r\n\r\nimport SPELLS from 'common/SPELLS';\r\nimport SpellLink from 'common/SpellLink';\r\nimport Checklist from 'parser/shared/modules/features/Checklist';\r\nimport Rule from 'parser/shared/modules/features/Checklist/Rule';\r\nimport Requirement from 'parser/shared/modules/features/Checklist/Requirement';\r\nimport PreparationRule from 'parser/shared/modules/features/Checklist/PreparationRule';\r\nimport GenericCastEfficiencyRequirement from 'parser/shared/modules/features/Checklist/GenericCastEfficiencyRequirement';\r\n\r\nconst ProtectionPaladinChecklist = ({ castEfficiency, thresholds, extras }) => {\r\n  const AbilityRequirement = props => (\r\n    <GenericCastEfficiencyRequirement\r\n      castEfficiency={castEfficiency.getCastEfficiencyForSpellId(props.spell)}\r\n      {...props}\r\n    />\r\n  );\r\n  AbilityRequirement.propTypes = {\r\n    spell: PropTypes.number.isRequired,\r\n  };\r\n\r\n  return (\r\n    <Checklist>\r\n      <Rule\r\n        name=\"Use core abilities as often as possible.\"\r\n        description=\"These should generally always be recharging to maximize efficiency.\"\r\n      >\r\n        <AbilityRequirement spell={SPELLS.AVENGERS_SHIELD.id} />\r\n        <AbilityRequirement spell={SPELLS.JUDGMENT_CAST_PROTECTION.id} />\r\n        <Requirement\r\n          name={<>Bad <SpellLink id={extras.hotrAbility.id} /> casts</>}\r\n          tooltip={<>This is a <em>filler</em> ability and should only be cast while your other spells are on cooldown.</>}\r\n          thresholds={thresholds.hotrBadCasts}\r\n        />\r\n        <AbilityRequirement spell={SPELLS.AVENGING_WRATH.id} />\r\n      </Rule>\r\n\r\n      <Rule\r\n        name={(\r\n          <>\r\n            Mitigate incoming damage with <SpellLink id={SPELLS.SHIELD_OF_THE_RIGHTEOUS.id} /> and <SpellLink id={SPELLS.CONSECRATION_CAST.id} />\r\n          </>\r\n        )}\r\n        description={(\r\n          <>\r\n            Maintain <SpellLink id={SPELLS.CONSECRATION_CAST.id} /> to reduce all incoming damage by a flat amount and use it as a rotational filler if necessary.<br />\r\n            Use <SpellLink id={SPELLS.SHIELD_OF_THE_RIGHTEOUS.id} /> to smooth out your physical damage taken. <SpellLink id={SPELLS.ARDENT_DEFENDER.id} /> can be used either as a cooldown to mitigate boss abilities or to cover time when <SpellLink id={SPELLS.SHIELD_OF_THE_RIGHTEOUS.id} /> is unavailable.\r\n          </>\r\n        )}\r\n      >\r\n        <Requirement name=\"Use your Holy Power efficiently\" thresholds={thresholds.hpWaste} />\r\n        <Requirement name={<>Hits Mitigated with <SpellLink id={SPELLS.SHIELD_OF_THE_RIGHTEOUS.id}/></>}\r\n                     thresholds={thresholds.sotrHitsMitigated}\r\n                     tooltip=\"Only counts physical hits. Some spells that generate a large number of low-damage events are excluded.\"/>\r\n        <Requirement\r\n          name={(\r\n            <>Hits Mitigated with <SpellLink id={SPELLS.CONSECRATION_CAST.id} /></>\r\n          )}\r\n          thresholds={thresholds.consecration}\r\n        />\r\n        <AbilityRequirement spell={SPELLS.ARDENT_DEFENDER.id}\r\n          name={(<><SpellLink id={SPELLS.ARDENT_DEFENDER.id} /> cast efficiency</>)}\r\n        />\r\n      </Rule>\r\n      <Rule name={<>Use <SpellLink id={SPELLS.WORD_OF_GLORY.id}/> to heal yourself</>}\r\n        description={(\r\n          <>\r\n            You should use <SpellLink id={SPELLS.WORD_OF_GLORY.id} /> to heal yourself (or others, with <SpellLink id={SPELLS.HAND_OF_THE_PROTECTOR_TALENT.id} />). However, you should <b>not</b> do this at the expense of <SpellLink id={SPELLS.SHIELD_OF_THE_RIGHTEOUS.id} /> uptime. Instead, take advantage of <SpellLink id={SPELLS.SHINING_LIGHT_DESC.id} /> to make most of your <SpellLink id={SPELLS.WORD_OF_GLORY.id} /> casts free.<br/>\r\n            <em>Section under construction.</em>\r\n          </>\r\n        )}>\r\n        <Requirement name={<><SpellLink id={SPELLS.WORD_OF_GLORY.id} /> casts with large overhealing</>}\r\n                     tooltip=\"Critical heals are excluded. A cast is counted as having large overhealing if at least 25% of it overhealed.\"\r\n                     thresholds={thresholds.wogOverheal} />\r\n        <Requirement name={<>Free casts from <SpellLink id={SPELLS.SHINING_LIGHT_DESC.id} /> wasted</>}\r\n                     tooltip=\"A cast is wasted if the Shining Light buff expires without being used.\"\r\n                     thresholds={thresholds.wogSlWaste}/>\r\n        <Requirement name={<>Stacks of <SpellLink id={SPELLS.SHINING_LIGHT_DESC.id} /> lost to overcapping</>}\r\n                     thresholds={thresholds.wogSotrCasts}\r\n                     tooltip=\"Shining Light stacks up to 5 times. Casting Shield of the Righteous while at 5 stacks loses a stack.\"/>\r\n      </Rule>\r\n      <PreparationRule thresholds={thresholds} />\r\n    </Checklist>\r\n  );\r\n};\r\n\r\nProtectionPaladinChecklist.propTypes = {\r\n  castEfficiency: PropTypes.object.isRequired,\r\n  combatant: PropTypes.shape({\r\n    hasTalent: PropTypes.func.isRequired,\r\n  }).isRequired,\r\n  thresholds: PropTypes.object.isRequired,\r\n  extras: PropTypes.object.isRequired,\r\n};\r\n\r\nexport default ProtectionPaladinChecklist;\r\n","import React from 'react';\r\n\r\nimport BaseChecklist from 'parser/shared/modules/features/Checklist/Module';\r\nimport CastEfficiency from 'parser/shared/modules/CastEfficiency';\r\nimport Abilities from 'parser/core/modules/Abilities';\r\nimport Combatants from 'parser/shared/modules/Combatants';\r\nimport PreparationRuleAnalyzer from 'parser/shared/modules/features/Checklist/PreparationRuleAnalyzer';\r\nimport HolyPowerDetails from 'parser/paladin/shared/holypower/HolyPowerDetails';\r\n\r\nimport ShieldOfTheRighteous from '../ShieldOfTheRighteous';\r\nimport NoDamageShieldOfTheRighteous from '../NoDamageShieldOfTheRighteous';\r\nimport Consecration from '../../spells/Consecration';\r\nimport HammerOfTheRighteous from '../../spells/HammerOfTheRighteous';\r\nimport LightOfTheProtector from '../../spells/LightOfTheProtector';\r\nimport WordOfGlory from '../../spells/WordOfGlory';\r\n\r\nimport Component from './Component';\r\n\r\nclass Checklist extends BaseChecklist {\r\n  static dependencies = {\r\n    castEfficiency: CastEfficiency,\r\n    combatants: Combatants,\r\n    abilities: Abilities,\r\n    preparationRuleAnalyzer: PreparationRuleAnalyzer,\r\n    shieldOfTheRighteous: ShieldOfTheRighteous,\r\n    noDamageSOTR: NoDamageShieldOfTheRighteous,\r\n    consecration: Consecration,\r\n    lotp: LightOfTheProtector,\r\n    hotr: HammerOfTheRighteous,\r\n    hp: HolyPowerDetails,\r\n    wog: WordOfGlory,\r\n  };\r\n\r\n  render(){\r\n    return (\r\n      <Component\r\n        combatant={this.combatants.selected}\r\n        castEfficiency={this.castEfficiency}\r\n        extras={{\r\n          hotrAbility: this.hotr.activeSpell,\r\n        }}\r\n        thresholds={{\r\n          ...this.preparationRuleAnalyzer.thresholds,\r\n          consecration: this.consecration.uptimeSuggestionThresholds,\r\n          sotrHitsMitigated: this.shieldOfTheRighteous.hitsMitigatedThreshold,\r\n          noDamageSOTR: this.noDamageSOTR.hitRatioSuggestionThresholds,\r\n          lotpDelay: this.lotp.delaySuggestion,\r\n          lotpOverheal: this.lotp.overhealSuggestion,\r\n          hotrBadCasts: this.hotr.badCastThreshold,\r\n          hpWaste: this.hp.suggestionThresholds,\r\n          wogOverheal: this.wog.overhealSuggestion,\r\n          wogSlWaste: this.wog.wastedSlSuggestion,\r\n          wogSotrCasts: this.wog.sotrSuggestion,\r\n        }}\r\n      />\r\n    );\r\n  }\r\n}\r\n\r\nexport default Checklist;\r\n","import CoreMitigationCheck from 'parser/shared/modules/MitigationCheck';\r\nimport SPELLS from 'common/SPELLS';\r\n\r\nclass MitigationCheck extends CoreMitigationCheck {\r\n  constructor(...args){\r\n    super(...args);\r\n    this.buffCheckPhysical = [\r\n      SPELLS.SHIELD_OF_THE_RIGHTEOUS_BUFF.id,\r\n    ];\r\n\r\n    this.buffCheckPhysAndMag = [\r\n      SPELLS.ARDENT_DEFENDER.id,\r\n      SPELLS.GUARDIAN_OF_ANCIENT_KINGS.id,\r\n    ];\r\n  }\r\n\r\n}\r\n\r\nexport default MitigationCheck;\r\n","import SPELLS from 'common/SPELLS';\r\nimport CoreHaste from 'parser/shared/modules/Haste';\r\n\r\nclass Haste extends CoreHaste {\r\n  static HASTE_BUFFS = {\r\n    ...CoreHaste.HASTE_BUFFS,\r\n    // Prot paladin specific\r\n    [SPELLS.SERAPHIM_TALENT.id]: 0.08,\r\n  }\r\n}\r\n\r\nexport default Haste;\r\n","import Analyzer, { Options, SELECTED_PLAYER } from 'parser/core/Analyzer';\r\nimport Events, { CastEvent } from 'parser/core/Events';\r\nimport SPELLS from 'common/SPELLS';\r\nimport React from 'react';\r\nimport Statistic from 'interface/statistics/Statistic';\r\nimport STATISTIC_ORDER from 'interface/others/STATISTIC_ORDER';\r\nimport STATISTIC_CATEGORY from 'interface/others/STATISTIC_CATEGORY';\r\nimport BoringSpellValue from 'interface/statistics/components/BoringSpellValue';\r\nimport { formatMilliseconds, formatNumber } from 'common/format';\r\nimport SpellLink from 'common/SpellLink';\r\nimport SpellUsable from 'parser/paladin/protection/modules/features/SpellUsable';\r\n\r\nconst ACTIVE_MITIGATION_CAP = 13.5 * 1000; // Active mitigation buffs cap out at 13.5 seconds.\r\nconst SOTR_BUFF_LENGTH = 4.5 * 1000; // SOTR grants a 4.5s buff.\r\nconst SOTR_SOFT_CAP = ACTIVE_MITIGATION_CAP - SOTR_BUFF_LENGTH;\r\nconst SECOND = 1000;\r\nconst debug = false;\r\n\r\ntype OvercapRecord = {cast: CastEvent, overcap: number};\r\n\r\nclass OvercapShieldOfTheRighteous extends Analyzer {\r\n  static dependencies = {\r\n    spellUsable: SpellUsable,\r\n  };\r\n\r\n  protected spellUsable!: SpellUsable;\r\n\r\n  goodSotrCasts: number = 0;\r\n  badSotrCasts: number = 0;\r\n  totalSotrOvercapping: number = 0;\r\n  lastSotrCastTimestamp: number = 0;\r\n  buffTimeAtLastCast: number = 0;\r\n  overcapRecords: OvercapRecord[] = [];\r\n\r\n  hpGeneratingSpells = [\r\n    SPELLS.BLESSED_HAMMER_TALENT,\r\n    SPELLS.HAMMER_OF_THE_RIGHTEOUS,\r\n    SPELLS.HAMMER_OF_WRATH,\r\n    SPELLS.JUDGMENT_CAST_PROTECTION,\r\n  ];\r\n\r\n  constructor(options: Options) {\r\n    super(options);\r\n    this.addEventListener(Events.cast.by(SELECTED_PLAYER).spell(SPELLS.SHIELD_OF_THE_RIGHTEOUS), this.trackSotRCasts);\r\n  }\r\n\r\n  trackSotRCasts(event: CastEvent): void {\r\n    if (this.lastSotrCastTimestamp === 0) {\r\n      this.goodSotrCasts += 1;\r\n      this.lastSotrCastTimestamp = event.timestamp;\r\n      this.buffTimeAtLastCast = SOTR_BUFF_LENGTH;\r\n      return;\r\n    }\r\n    const timeDiffBetweenCasts = event.timestamp - this.lastSotrCastTimestamp;\r\n    const buffAmountAtCurrentCast = Math.max(0, this.buffTimeAtLastCast - timeDiffBetweenCasts);\r\n    if (buffAmountAtCurrentCast >= SOTR_SOFT_CAP && !this.castIsForgivable(event)) {\r\n      this.badSotrCasts += 1;\r\n      this.overcapRecords.push({\r\n        cast:event,\r\n        overcap: ACTIVE_MITIGATION_CAP - buffAmountAtCurrentCast,\r\n      });\r\n      debug && console.log(`Determined cast at ${event.timestamp} is bad cast with buff amount of ${buffAmountAtCurrentCast}. Adding overcap amount of ${ACTIVE_MITIGATION_CAP - buffAmountAtCurrentCast}`);\r\n    } else {\r\n      this.goodSotrCasts += 1;\r\n      debug && console.log(`Determined cast at ${event.timestamp} is good cast with buff amount of ${buffAmountAtCurrentCast}.`);\r\n    }\r\n    this.lastSotrCastTimestamp = event.timestamp;\r\n    this.buffTimeAtLastCast = Math.min(buffAmountAtCurrentCast + SOTR_BUFF_LENGTH, ACTIVE_MITIGATION_CAP);\r\n  }\r\n\r\n  /**\r\n   * Determine if a cast of SotR is \"forgivable\" despite buff overcapping.\r\n   * A cast is determined to be forgivable if using abilities other than SotR\r\n   * would result in Holy Power overcapping otherwise.\r\n   * @param event\r\n   */\r\n  castIsForgivable(event: CastEvent): boolean {\r\n    for (let i = 0; i < this.hpGeneratingSpells.length; i++) {\r\n      if (this.spellUsable.isAvailable(this.hpGeneratingSpells[i].id)) {\r\n        return false;\r\n      }\r\n    }\r\n    return true;\r\n  }\r\n\r\n  statistic(): React.ReactNode {\r\n    const idealSotrUptime = (this.goodSotrCasts + this.badSotrCasts) * SOTR_BUFF_LENGTH;\r\n    const actualSotrUptime = this.selectedCombatant.getBuffUptime(SPELLS.SHIELD_OF_THE_RIGHTEOUS_BUFF.id);\r\n    const lostUptimeDueToOvercap = idealSotrUptime - actualSotrUptime;\r\n    return (\r\n      <>\r\n        <Statistic\r\n          position={STATISTIC_ORDER.DEFAULT}\r\n          size=\"flexible\"\r\n          category={STATISTIC_CATEGORY.GENERAL}\r\n          tooltip={(\r\n            <>\r\n              You lost {formatNumber(lostUptimeDueToOvercap/SECOND)} seconds due to overcapping <SpellLink id={SPELLS.SHIELD_OF_THE_RIGHTEOUS.id} />.<br />\r\n              Overcapping occurs when you cast <SpellLink id={SPELLS.SHIELD_OF_THE_RIGHTEOUS.id} /> with more than {formatNumber(SOTR_SOFT_CAP/SECOND)} seconds left on the buff.\r\n            </>\r\n          )}\r\n          dropdown={(\r\n            <>\r\n              <table className=\"table table-condensed\">\r\n                <thead>\r\n                  <tr>\r\n                    <th>Cast Timestamp</th>\r\n                    <th>Overcap Amount (s)</th>\r\n                  </tr>\r\n                </thead>\r\n                <tbody>\r\n                  {this.overcapRecords.map((record: OvercapRecord, i: number) => (\r\n                    <tr key={i}>\r\n                      <td>{this.owner.formatTimestamp(record.cast.timestamp)}</td>\r\n                      <td>{formatMilliseconds(record.overcap)}</td>\r\n                    </tr>\r\n                  ))}\r\n                </tbody>\r\n              </table>\r\n            </>\r\n          )}\r\n        >\r\n          <BoringSpellValue spell={SPELLS.SHIELD_OF_THE_RIGHTEOUS}\r\n            value={`${formatNumber(lostUptimeDueToOvercap/SECOND)}s`}\r\n            label=\"Uptime lost to overcapping\"\r\n          />\r\n        </Statistic>\r\n      </>\r\n    );\r\n  }\r\n}\r\n\r\nexport default OvercapShieldOfTheRighteous;\r\n","import React from 'react';\r\n\r\nimport SelfHealTimingGraph from 'parser/shared/modules/features/SelfHealTimingGraph';\r\nimport SPELLS from 'common/SPELLS';\r\n\r\nclass WordOfGloryTiming extends SelfHealTimingGraph {\r\n\r\n  constructor(...args) {\r\n    super(...args);\r\n    this.selfHealSpell = SPELLS.WORD_OF_GLORY;\r\n    this.tabTitle = \"Selfheal Timing\";\r\n    this.tabURL = \"selfheal-timings\";\r\n  }\r\n\r\n  render() {\r\n    return (\r\n      <SelfHealTimingGraph />\r\n    );\r\n  }\r\n}\r\n\r\nexport default WordOfGloryTiming;\r\n","import React from 'react';\r\nimport SPELLS from 'common/SPELLS';\r\nimport Analyzer, { Options, SELECTED_PLAYER } from 'parser/core/Analyzer';\r\nimport Events, { ApplyBuffEvent } from 'parser/core/Events';\r\nimport StatTracker from 'parser/shared/modules/StatTracker';\r\nimport Statistic from 'interface/statistics/Statistic';\r\nimport STATISTIC_ORDER from 'interface/others/STATISTIC_ORDER';\r\nimport STATISTIC_CATEGORY from 'interface/others/STATISTIC_CATEGORY';\r\nimport { formatPercentage } from 'common/format';\r\nimport UptimeIcon from 'interface/icons/Uptime';\r\nimport CriticalStrikeIcon from 'interface/icons/CriticalStrike';\r\nimport VersatilityIcon from 'interface/icons/Versatility';\r\nimport HasteIcon from 'interface/icons/Haste';\r\nimport MasteryIcon from 'interface/icons/Mastery';\r\nimport BoringSpellValueText from 'interface/statistics/components/BoringSpellValueText';\r\nimport Haste from 'parser/paladin/protection/modules/core/Haste';\r\n\r\nconst STAT_MODIFIER = 0.08;\r\nconst debug = false;\r\n\r\ntype BonusStats = {haste: number, crit: number, versatility: number, mastery: number};\r\n\r\n/**\r\n * Consumes 3 Holy Power to grant 8% Haste, Crit, Versatility, and Mastery for 15 seconds.\r\n */\r\nclass Seraphim extends Analyzer {\r\n  static dependencies = {\r\n    statTracker: StatTracker,\r\n  }\r\n\r\n  protected statTracker!: StatTracker;\r\n\r\n  bonusStatGains: BonusStats[] = [];\r\n\r\n\r\n  constructor(options: Options) {\r\n    super(options);\r\n    this.active = this.selectedCombatant.hasTalent(SPELLS.SERAPHIM_TALENT.id);\r\n    if (!this.active) {\r\n      return;\r\n    }\r\n    this.addEventListener(Events.applybuff.to(SELECTED_PLAYER).spell(SPELLS.SERAPHIM_TALENT), this.onSeraphimGain);\r\n  }\r\n\r\n  get uptime(): number {\r\n    return this.selectedCombatant.getBuffUptime(SPELLS.SERAPHIM_TALENT.id) / this.owner.fightDuration;\r\n  }\r\n\r\n  get averageMasteryGain(): number {\r\n    return STAT_MODIFIER * this.uptime;\r\n  }\r\n\r\n  get averageCritGain(): number {\r\n    return STAT_MODIFIER * this.uptime;\r\n  }\r\n\r\n  get averageVersatilityGain(): number {\r\n    return STAT_MODIFIER * this.uptime;\r\n  }\r\n\r\n  get averageHasteGain(): number {\r\n    return this.bonusStatGains.map((gain: BonusStats) => gain.haste).reduce((sum, next) => sum + next, 0) / this.bonusStatGains.length * this.uptime;\r\n  }\r\n\r\n  onSeraphimGain(event: ApplyBuffEvent): void {\r\n    this.bonusStatGains.push(this.getBonusStats(this.statTracker));\r\n  }\r\n\r\n  getBonusStats(statTracker: StatTracker): BonusStats {\r\n    const hasteChange = Haste.addHaste(statTracker.currentHastePercentage, STAT_MODIFIER) - statTracker.currentHastePercentage;\r\n    debug && console.log(`Calculation haste change of ${hasteChange}`);\r\n    return {\r\n      haste: hasteChange,\r\n      crit: STAT_MODIFIER,\r\n      versatility: STAT_MODIFIER,\r\n      mastery: STAT_MODIFIER,\r\n    };\r\n  }\r\n\r\n  calculateBonusStatFromCurrent(currentStat: number): number {\r\n    return currentStat - (currentStat * (1 / (1 + STAT_MODIFIER)));\r\n  }\r\n\r\n  statistic(): React.ReactNode {\r\n    debug && console.log(`Stat gains: haste - ${this.averageHasteGain} crit - ${this.averageCritGain} - vers ${this.averageCritGain} - mastery ${this.averageMasteryGain}.`);\r\n    return (\r\n      <Statistic\r\n        position={STATISTIC_ORDER.DEFAULT}\r\n        size=\"flexible\"\r\n        category={STATISTIC_CATEGORY.TALENTS}\r\n      >\r\n        <BoringSpellValueText spell={SPELLS.SERAPHIM_TALENT}>\r\n          <UptimeIcon /> {formatPercentage(this.uptime, 0)}% <small>uptime</small><br />\r\n          <HasteIcon /> {formatPercentage(this.averageHasteGain)}% <small>average Haste gained</small><br />\r\n          <CriticalStrikeIcon /> {formatPercentage(this.averageCritGain)}% <small>average Crit gained</small><br />\r\n          <VersatilityIcon /> {formatPercentage(this.averageVersatilityGain)}% <small>average Versatility gained</small><br />\r\n          <MasteryIcon /> {formatPercentage(this.averageMasteryGain)}% <small>average Mastery gained</small><br />\r\n        </BoringSpellValueText>\r\n      </Statistic>\r\n    );\r\n  }\r\n}\r\n\r\nexport default Seraphim;\r\n","import Analyzer, { SELECTED_PLAYER, Options } from 'parser/core/Analyzer';\r\nimport SPELLS from 'common/SPELLS';\r\nimport Events, { CastEvent, EnergizeEvent } from 'parser/core/Events';\r\nimport Statistic from 'interface/statistics/Statistic';\r\nimport STATISTIC_ORDER from 'interface/others/STATISTIC_ORDER';\r\nimport STATISTIC_CATEGORY from 'interface/others/STATISTIC_CATEGORY';\r\nimport React from 'react';\r\nimport BoringSpellValue from 'interface/statistics/components/BoringSpellValue';\r\nimport { formatNumber } from 'common/format';\r\n\r\n/**\r\n * Analyzer to track additional and wasted Holy Power from Sanctified Wrath for Protection Paladins.\r\n */\r\nclass SanctifiedWrathProtJudgement extends Analyzer {\r\n    buffedJudgements: number = 0;\r\n    holyPowerWastes: number[] = [];\r\n    CRIT_NO_HA_CHANGE = 4;\r\n    CRIT_YES_HA_CHANGE = 6;\r\n    MAX_HOLY_POWER = 5;\r\n\r\n    constructor(options: Options) {\r\n        super(options);\r\n        this.active = this.selectedCombatant.hasTalent(SPELLS.SANCTIFIED_WRATH_PROT_TALENT.id);\r\n        if (!this.active) {\r\n            return;\r\n        }\r\n\r\n        this.addEventListener(Events.cast.by(SELECTED_PLAYER).spell(SPELLS.JUDGMENT_CAST_PROTECTION), this.trackJudgmentCasts);\r\n        this.addEventListener(Events.energize.by(SELECTED_PLAYER), this.trackedWastedJudgmentHP);\r\n    }\r\n\r\n    trackJudgmentCasts(event: CastEvent) {\r\n        if (this.selectedCombatant.hasBuff(SPELLS.AVENGING_WRATH.id)) {\r\n            this.buffedJudgements += 1;\r\n        }\r\n    }\r\n\r\n    trackedWastedJudgmentHP(event: EnergizeEvent) {\r\n        const hasAW: boolean = this.selectedCombatant.hasBuff(SPELLS.AVENGING_WRATH.id);\r\n        \r\n        const judgementSource: boolean = event.ability.guid === SPELLS.JUDGMENT_HP_ENERGIZE.id;\r\n        const wastedHolyPower: boolean = event.waste !== null && event.waste !== undefined && event.waste > 0;\r\n        if (hasAW && judgementSource) {\r\n            const wasteDueToSanctifiedWrath: number = this.wasteDueToSanctifiedWrath(event);\r\n            if (wastedHolyPower && wasteDueToSanctifiedWrath !== 0) {\r\n                this.holyPowerWastes.push(wasteDueToSanctifiedWrath);\r\n            }\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Judgement can grant any of the following values of HP during Avenging Wrath:\r\n     * 2 - non-crit with no Holy Avenger Buff\r\n     * 4 - crit with no Holy Avenger Buff\r\n     * 3 - non-crit with Holy Avenger Buff\r\n     * 6 - crit with Holy Avenger Buff\r\n     * \r\n     * To consider the wasted holy power generation to be due to a bad Judgement during Avenging Wrath,\r\n     * the spell must not be a crit with HA up (wasted HP no matter what), the cast must not have been made with >3 HP on\r\n     * a non-HA cast (crits are random so we let the wasted HP slide), or the cast must not have been made with >2 HP on a \r\n     * HA cast.\r\n     * @param event \r\n     * @returns Number of wasted Holy Power due to Sanctified Wrath talent.\r\n     */\r\n    wasteDueToSanctifiedWrath(event: EnergizeEvent): number {\r\n        const hasHA: boolean = this.selectedCombatant.hasBuff(SPELLS.HOLY_AVENGER_TALENT.id);\r\n        const hpChange: number = event.resourceChange;\r\n        const preCastHP = this.MAX_HOLY_POWER - (hpChange - event.waste);\r\n        const wasCrit: boolean = (hpChange === this.CRIT_NO_HA_CHANGE || hpChange === this.CRIT_YES_HA_CHANGE);\r\n        if ((hasHA && !wasCrit && preCastHP > 2) || (!hasHA && preCastHP > 3)) {\r\n            return event.waste;\r\n        } else {\r\n            return 0;\r\n        }\r\n    }\r\n\r\n    statistic() {\r\n        const totalWastedHP = this.holyPowerWastes.reduce((sum, current) => sum + current, 0);\r\n        const bonusHP = (this.buffedJudgements * 2) - totalWastedHP;\r\n        return (\r\n            <Statistic\r\n                position={STATISTIC_ORDER.DEFAULT}\r\n                size=\"flexible\"\r\n                category={STATISTIC_CATEGORY.TALENTS}\r\n                tooltip={\r\n                    <>\r\n                        <b>{this.buffedJudgements * 2}</b> total additional Holy Power generated by Sanctified Wrath.<br />\r\n                        <b>{totalWastedHP}</b> additional Holy Power wasted by overcapping.\r\n                    </>\r\n                }\r\n            >\r\n                <BoringSpellValue\r\n                    spell={SPELLS.SANCTIFIED_WRATH_PROT_TALENT}\r\n                    value={formatNumber(bonusHP)}\r\n                    label=\"Extra Holy Power\"\r\n                />\r\n            </Statistic>\r\n        );\r\n    }\r\n}\r\n\r\nexport default SanctifiedWrathProtJudgement;","import React from 'react';\r\nimport Analyzer, { Options, SELECTED_PLAYER } from 'parser/core/Analyzer';\r\nimport Events, { AbsorbedEvent, DamageEvent} from 'parser/core/Events';\r\nimport SPELLS from 'common/SPELLS';\r\nimport MAGIC_SCHOOLS from 'game/MAGIC_SCHOOLS';\r\nimport Statistic from 'interface/statistics/Statistic';\r\nimport STATISTIC_ORDER from 'interface/others/STATISTIC_ORDER';\r\nimport { formatNumber, formatPercentage } from 'common/format';\r\nimport BoringSpellValue from 'interface/statistics/components/BoringSpellValue';\r\nimport STATISTIC_CATEGORY from 'interface/others/STATISTIC_CATEGORY';\r\nimport HIT_TYPES from 'game/HIT_TYPES';\r\n\r\nconst PHYSICAL_DAMAGE = MAGIC_SCHOOLS.ids.PHYSICAL;\r\n\r\n/**\r\n * Analyzer to track the number of spells blocked as a result of selecting the\r\n * Holy Shield talent.\r\n */\r\nclass HolyShieldSpellBlock extends Analyzer {\r\n  spellsHitPlayerCount: number = 0;\r\n  holyShieldProcsCount: number = 0;\r\n\r\n  constructor(options: Options) {\r\n    super(options);\r\n    this.active = this.selectedCombatant.hasTalent(SPELLS.HOLY_SHIELD_TALENT.id);\r\n    if (!this.active) {\r\n      return;\r\n    }\r\n    this.addEventListener(Events.absorbed.by(SELECTED_PLAYER).spell(SPELLS.HOLY_SHIELD_TALENT), this.trackHolyShieldAbsorbs);\r\n    this.addEventListener(Events.damage.to(SELECTED_PLAYER), this.trackSpellsHitPlayer);\r\n  }\r\n\r\n  trackSpellsHitPlayer(event: DamageEvent) {\r\n    if (event.ability.type !== PHYSICAL_DAMAGE) {\r\n      this.spellsHitPlayerCount += 1;\r\n      if (event.hitType === HIT_TYPES.BLOCKED_CRIT || event.hitType === HIT_TYPES.BLOCKED_NORMAL) {\r\n        this.holyShieldProcsCount += 1;\r\n      }\r\n    }\r\n  }\r\n\r\n  trackHolyShieldAbsorbs(event: AbsorbedEvent) {\r\n    if (event.ability.guid === SPELLS.HOLY_SHIELD_TALENT.id) {\r\n      this.holyShieldProcsCount += 1;\r\n    }\r\n  }\r\n\r\n  statistic(): React.ReactNode {\r\n    return (\r\n      <Statistic\r\n        position={STATISTIC_ORDER.DEFAULT}\r\n        size=\"flexible\"\r\n        category={STATISTIC_CATEGORY.TALENTS}\r\n        tooltip={(\r\n          <>\r\n            Holy Shield blocked {formatNumber(this.holyShieldProcsCount)} out of {formatNumber(this.spellsHitPlayerCount)} spells.<br />\r\n            This represents <em>{formatPercentage(this.holyShieldProcsCount/this.spellsHitPlayerCount)} %</em> of spells blocked.\r\n          </>\r\n        )}\r\n        >\r\n          <BoringSpellValue\r\n            spell={SPELLS.HOLY_SHIELD_TALENT}\r\n            value={this.holyShieldProcsCount}\r\n            label=\"Spells Blocked\"\r\n          />\r\n      </Statistic>\r\n    );\r\n  }\r\n}\r\n\r\nexport default HolyShieldSpellBlock;\r\n","import Analyzer, { Options } from 'parser/core/Analyzer';\r\nimport SPELLS from 'common/SPELLS';\r\nimport StatTracker from 'parser/shared/modules/StatTracker';\r\nimport React from 'react';\r\nimport Statistic from 'interface/statistics/Statistic';\r\nimport STATISTIC_ORDER from 'interface/others/STATISTIC_ORDER';\r\nimport STATISTIC_CATEGORY from 'interface/others/STATISTIC_CATEGORY';\r\nimport { formatNumber } from 'common/format';\r\nimport BoringSpellValue from 'interface/statistics/components/BoringSpellValue';\r\n\r\nconst STAT_MODIFIER = 0.02;\r\n\r\nclass Redoubt extends Analyzer {\r\n  static dependencies = {\r\n    statTracker: StatTracker,\r\n  };\r\n\r\n\r\n  protected statTracker!: StatTracker;\r\n\r\n  constructor(options: Options) {\r\n    super(options);\r\n    this.active = this.selectedCombatant.hasTalent(SPELLS.REDOUBT_TALENT.id);\r\n    if (!this.active) {\r\n      return;\r\n    }\r\n    const localStatTracker: StatTracker = options.statTracker as StatTracker;\r\n    localStatTracker.add(SPELLS.REDOUBT_BUFF.id, {\r\n      stamina: this.bonusStaminaGain(localStatTracker),\r\n      strength: this.bonusStrenghGain(localStatTracker)\r\n    });\r\n  }\r\n\r\n  bonusStaminaGain(statTracker: StatTracker) {\r\n    return statTracker.startingStaminaRating * STAT_MODIFIER;\r\n  }\r\n\r\n  bonusStrenghGain(statTracker: StatTracker) {\r\n    return statTracker.startingStrengthRating * STAT_MODIFIER;\r\n  }\r\n\r\n  get averageStacks() {\r\n    return this.selectedCombatant.getStackWeightedBuffUptime(SPELLS.REDOUBT_BUFF.id) / this.owner.fightDuration;\r\n  }\r\n\r\n  statistic(): React.ReactNode {\r\n    const averageStamGain = this.bonusStaminaGain(this.statTracker) * this.averageStacks;\r\n    const averageStrengthGain = this.bonusStrenghGain(this.statTracker) * this.averageStacks;\r\n    return (\r\n      <Statistic\r\n        position={STATISTIC_ORDER.DEFAULT}\r\n        size=\"flexible\"\r\n        category={STATISTIC_CATEGORY.TALENTS}\r\n        tooltip={(\r\n          <>\r\n            Taking the Redoubt talent gave you on average {formatNumber(averageStamGain)} Stamina and {formatNumber(averageStrengthGain)} Strength.\r\n          </>\r\n        )}\r\n      >\r\n        <BoringSpellValue\r\n          spell={SPELLS.REDOUBT_TALENT}\r\n          value={formatNumber(this.averageStacks)}\r\n          label=\"Average Stacks\"\r\n        />\r\n      </Statistic>\r\n    );\r\n  }\r\n}\r\n\r\nexport default Redoubt;\r\n","import Analyzer, { Options, SELECTED_PLAYER } from 'parser/core/Analyzer';\r\nimport SPELLS from 'common/SPELLS';\r\nimport Events, { DamageEvent } from 'parser/core/Events';\r\nimport Enemies from 'parser/shared/modules/Enemies';\r\nimport React from 'react';\r\nimport Statistic from 'interface/statistics/Statistic';\r\nimport STATISTIC_ORDER from 'interface/others/STATISTIC_ORDER';\r\nimport STATISTIC_CATEGORY from 'interface/others/STATISTIC_CATEGORY';\r\nimport { formatNumber } from 'common/format';\r\nimport SpellLink from 'common/SpellLink';\r\nimport BoringSpellValue from 'interface/statistics/components/BoringSpellValue';\r\n\r\nclass BlessedHammerDamageReduction extends Analyzer {\r\n  static dependencies = {\r\n    enemies: Enemies,\r\n  };\r\n\r\n  protected enemies!: Enemies;\r\n\r\n  totalMeleeHits: number = 0;\r\n  reducedDamageHits: number = 0;\r\n  totalReducedDamage: number = 0;\r\n  currentAttackPower: number | null = null;\r\n\r\n  constructor(options: Options) {\r\n    super(options);\r\n    this.active = this.selectedCombatant.hasTalent(SPELLS.BLESSED_HAMMER_TALENT.id);\r\n    if (!this.active) {\r\n      return;\r\n    }\r\n    this.addEventListener(Events.damage.to(SELECTED_PLAYER), this.trackHitsToPlayer);\r\n    this.addEventListener(Events.damage.to(SELECTED_PLAYER), this.trackCurrentAttackPower);\r\n  }\r\n\r\n  trackHitsToPlayer(event: DamageEvent): void {\r\n    this.totalMeleeHits += 1;\r\n    if (!event.sourceID || !this.enemies.enemies[event.sourceID]) {\r\n      return;\r\n    }\r\n    const sourceIsDebuffed = this.enemies.enemies[event.sourceID].hasBuff(SPELLS.BLESSED_HAMMER_DEBUFF.id, event.timestamp, undefined, undefined, this.owner.playerId);\r\n    if (sourceIsDebuffed) {\r\n      this.reducedDamageHits += 1;\r\n      this.totalReducedDamage += this.blessedHammerDamageReduction;\r\n    }\r\n  }\r\n\r\n  trackCurrentAttackPower(event: DamageEvent) {\r\n    if ('attackPower' in event && event.attackPower) {\r\n      this.currentAttackPower = event.attackPower;\r\n    }\r\n  }\r\n\r\n  get blessedHammerDamageReduction(): number {\r\n    if (!this.currentAttackPower) {\r\n      return 0;\r\n    }\r\n    return this.currentAttackPower * 30 / 100;\r\n  }\r\n\r\n  get averageHitReduction(): number {\r\n    return this.totalReducedDamage / this.reducedDamageHits;\r\n  }\r\n\r\n  statistic(): React.ReactNode {\r\n    return (\r\n      <Statistic\r\n        position={STATISTIC_ORDER.DEFAULT}\r\n        size=\"flexible\"\r\n        category={STATISTIC_CATEGORY.TALENTS}\r\n        tooltip={(\r\n          <>\r\n            Average <b>{formatNumber(this.averageHitReduction)}</b> damage reduced per hit affected by <SpellLink id={SPELLS.BLESSED_HAMMER_TALENT.id} />.\r\n          </>\r\n        )}\r\n      >\r\n        <BoringSpellValue\r\n          spell={SPELLS.BLESSED_HAMMER_TALENT}\r\n          value={formatNumber(this.totalReducedDamage)}\r\n          label={`Reduced damage from ${this.reducedDamageHits} hits.`}\r\n        />\r\n      </Statistic>\r\n    );\r\n  }\r\n}\r\n\r\nexport default BlessedHammerDamageReduction;\r\n","import Analyzer, { Options, SELECTED_PLAYER } from 'parser/core/Analyzer';\r\nimport Events, { CastEvent, DamageEvent } from 'parser/core/Events';\r\nimport SPELLS from 'common/SPELLS';\r\nimport React from 'react';\r\nimport Statistic from 'interface/statistics/Statistic';\r\nimport STATISTIC_ORDER from 'interface/others/STATISTIC_ORDER';\r\nimport STATISTIC_CATEGORY from 'interface/others/STATISTIC_CATEGORY';\r\nimport { formatNumber } from 'common/format';\r\nimport SpellLink from 'common/SpellLink';\r\nimport BoringSpellValue from 'interface/statistics/components/BoringSpellValue';\r\n\r\n// One second bounce buffer for AS to bounce around and hit targets.\r\nconst AVENGERS_SHIELD_BOUNCE_BUFFER: number = 1000;\r\nconst TALENTLESS_NUM_OF_BOUNCES = 3;\r\n\r\nclass FirstAvenger extends Analyzer {\r\n  lastAvengersShieldCastTimestamp: number = 0;\r\n  totalNumHits: number = 0;\r\n  totalNumCasts: number = 0;\r\n  castToHitsMap: Map<number, DamageEvent[]> = new Map<number, DamageEvent[]>();\r\n\r\n  constructor(options: Options) {\r\n    super(options);\r\n    this.active = this.selectedCombatant.hasTalent(SPELLS.FIRST_AVENGER_TALENT.id);\r\n    if (!this.active) {\r\n      return;\r\n    }\r\n    this.addEventListener(Events.cast.by(SELECTED_PLAYER).spell(SPELLS.AVENGERS_SHIELD), this.trackAvengersShieldCasts);\r\n    this.addEventListener(Events.damage.by(SELECTED_PLAYER).spell(SPELLS.AVENGERS_SHIELD), this.trackAvengersShieldHits);\r\n  }\r\n\r\n  trackAvengersShieldCasts(event: CastEvent): void {\r\n    this.lastAvengersShieldCastTimestamp = event.timestamp;\r\n    this.totalNumCasts += 1;\r\n  }\r\n\r\n  trackAvengersShieldHits(event: DamageEvent): void {\r\n    if (event.timestamp - this.lastAvengersShieldCastTimestamp < AVENGERS_SHIELD_BOUNCE_BUFFER) {\r\n      if (!this.castToHitsMap.has(this.lastAvengersShieldCastTimestamp)) {\r\n        this.castToHitsMap.set(this.lastAvengersShieldCastTimestamp, []);\r\n      }\r\n      this.totalNumHits += 1;\r\n      const hits: DamageEvent[] | undefined = this.castToHitsMap.get(this.lastAvengersShieldCastTimestamp);\r\n      if (hits !== undefined) {\r\n        hits.push(event);\r\n      }\r\n    }\r\n  }\r\n\r\n  getExtraDamageForCast(castTimestamp: number): number {\r\n    if (!this.castToHitsMap.has(castTimestamp)) {\r\n      return 0;\r\n    }\r\n    const hits: DamageEvent[] | undefined = this.castToHitsMap.get(castTimestamp);\r\n    if (hits === undefined) {\r\n      return 0;\r\n    }\r\n    const numExtraHits = hits.length > TALENTLESS_NUM_OF_BOUNCES ? hits.length - TALENTLESS_NUM_OF_BOUNCES : 0;\r\n    return (hits.map((damageEvent) => damageEvent.amount + (damageEvent.absorbed || 0))\r\n                .reduce((prev, current) => prev + current, 0) / hits.length)\r\n            * numExtraHits;\r\n  }\r\n\r\n  get averageHitsPerCast(): number {\r\n    return this.totalNumHits / this.totalNumCasts;\r\n  }\r\n\r\n  get totalExtraDamage(): number {\r\n    return Array.from(this.castToHitsMap.keys())\r\n                  .map((castTimestamp) => this.getExtraDamageForCast(castTimestamp))\r\n                  .reduce((prev, current) => prev + current, 0);\r\n  }\r\n\r\n  get averageExtraDamage(): number {\r\n    return this.totalExtraDamage / this.totalNumCasts;\r\n  }\r\n\r\n  statistic(): React.ReactNode {\r\n    return (\r\n      <Statistic\r\n        position={STATISTIC_ORDER.DEFAULT}\r\n        size=\"flexible\"\r\n        category={STATISTIC_CATEGORY.TALENTS}\r\n        tooltip={(\r\n          <>\r\n              You hit on average <b>{formatNumber(this.averageHitsPerCast)}</b> enemies per cast of <SpellLink id={SPELLS.AVENGERS_SHIELD.id} /><br />\r\n              The extra hits from taking First Avenger contributed <b>{formatNumber(this.totalExtraDamage)}</b> total extra damage.\r\n          </>\r\n        )}\r\n      >\r\n        <BoringSpellValue\r\n          spell={SPELLS.FIRST_AVENGER_TALENT}\r\n          value={formatNumber(this.averageExtraDamage)}\r\n          label={(\r\n            <>\r\n              Average extra damage per cast of <SpellLink id={SPELLS.AVENGERS_SHIELD.id} />.\r\n            </>\r\n          )}\r\n        />\r\n      </Statistic>\r\n    );\r\n  }\r\n}\r\n\r\nexport default FirstAvenger;\r\n","import Analyzer, { Options, SELECTED_PLAYER } from 'parser/core/Analyzer';\r\nimport SPELLS from 'common/SPELLS';\r\nimport Events, { DamageEvent } from 'parser/core/Events';\r\nimport React from 'react';\r\nimport Statistic from 'interface/statistics/Statistic';\r\nimport STATISTIC_ORDER from 'interface/others/STATISTIC_ORDER';\r\nimport { formatNumber } from 'common/format';\r\nimport SpellLink from 'common/SpellLink';\r\nimport BoringSpellValue from 'interface/statistics/components/BoringSpellValue';\r\nimport STATISTIC_CATEGORY from 'interface/others/STATISTIC_CATEGORY';\r\n\r\nconst DAMAGE_MODIFIER = 0.2;\r\n\r\nclass MomentOfGlory extends Analyzer {\r\n  damageBoostedHits: number = 0;\r\n  totalExtraDamage: number = 0;\r\n\r\n  constructor(options: Options) {\r\n    super(options);\r\n    this.active = this.selectedCombatant.hasTalent(SPELLS.MOMENT_OF_GLORY_TALENT.id);\r\n    if (!this.active) {\r\n      return;\r\n    }\r\n\r\n    this.addEventListener(Events.damage.by(SELECTED_PLAYER).spell(SPELLS.AVENGERS_SHIELD), this.trackASDamage);\r\n  }\r\n\r\n  trackASDamage(event: DamageEvent): void {\r\n    if (!this.selectedCombatant.hasBuff(SPELLS.MOMENT_OF_GLORY_TALENT.id, event.timestamp, undefined, undefined, this.owner.playerId)) {\r\n      return;\r\n    }\r\n    this.damageBoostedHits += 1;\r\n    this.totalExtraDamage += this.getBonusDamageFromMoG(event);\r\n  }\r\n\r\n  getBonusDamageFromMoG(event: DamageEvent): number {\r\n    const baseDamageDone = event.amount + (event.absorbed || 0);\r\n    return baseDamageDone - (baseDamageDone * (1 / (1 + DAMAGE_MODIFIER)));\r\n  }\r\n\r\n  statistic(): React.ReactNode {\r\n    return (\r\n      <Statistic\r\n        position={STATISTIC_ORDER.DEFAULT}\r\n        size=\"flexible\"\r\n        category={STATISTIC_CATEGORY.TALENTS}\r\n        tooltip={(\r\n          <>\r\n            You hit <b>{formatNumber(this.damageBoostedHits)}</b> targets with a <SpellLink id={SPELLS.AVENGERS_SHIELD.id} /> boosted with <SpellLink id={SPELLS.MOMENT_OF_GLORY_TALENT.id} />.\r\n          </>\r\n        )}\r\n      >\r\n        <BoringSpellValue\r\n          spell={SPELLS.MOMENT_OF_GLORY_TALENT}\r\n          value={formatNumber(this.totalExtraDamage)}\r\n          label=\"Extra Damage\"\r\n        />\r\n      </Statistic>\r\n    );\r\n  }\r\n}\r\n\r\nexport default MomentOfGlory;\r\n","import CoreCombatLogParser from 'parser/core/CombatLogParser';\r\nimport ArcaneTorrent from 'parser/shared/modules/racials/bloodelf/ArcaneTorrent';\r\nimport Judgment from 'parser/paladin/shared/spells/Judgment';\r\n\r\nimport Abilities from './modules/Abilities';\r\nimport AlwaysBeCasting from './modules/features/AlwaysBeCasting';\r\nimport SpellUsable from './modules/features/SpellUsable';\r\nimport Checklist from './modules/features/Checklist/Module';\r\nimport MitigationCheck from './modules/features/MitigationCheck';\r\nimport Haste from './modules/core/Haste';\r\n\r\nimport OvercapShieldOfTheRighteous from './modules/features/OvercapShieldOfTheRighteous';\r\n\r\n//Spells\r\nimport Consecration from './modules/spells/Consecration';\r\nimport WordOfGloryTiming from './modules/features/WordOfGloryTiming';\r\nimport LightOfTheProtector from './modules/spells/LightOfTheProtector';\r\nimport ShieldOfTheRighteous from './modules/features/ShieldOfTheRighteous';\r\nimport GrandCrusader from './modules/core/GrandCrusader';\r\nimport HammerOfTheRighteous from './modules/spells/HammerOfTheRighteous';\r\nimport NoDamageShieldOfTheRighteous from './modules/features/NoDamageShieldOfTheRighteous';\r\nimport WordOfGlory from './modules/spells/WordOfGlory';\r\n\r\n//Talents\r\nimport RighteousProtector from './modules/talents/RighteousProtector';\r\nimport Seraphim from './modules/talents/Seraphim';\r\nimport SanctifiedWrathProtJudgement from './modules/talents/SanctifiedWrathProtJudgement';\r\nimport HolyShieldSpellBlock from './modules/talents/HolyShieldSpellBlock';\r\nimport Redoubt from './modules/talents/Redoubt';\r\nimport BlessedHammerDamageReduction from './modules/talents/BlessedHammerDamageReduction';\r\nimport FirstAvenger from './modules/talents/FirstAvenger';\r\nimport MomentOfGlory from './modules/talents/MomentOfGlory';\r\n\r\n//import CooldownTracker from './Modules/Features/CooldownTracker';\r\nimport HolyPowerTracker from '../shared/holypower/HolyPowerTracker';\r\nimport HolyPowerDetails from '../shared/holypower/HolyPowerDetails';\r\n\r\nclass CombatLogParser extends CoreCombatLogParser {\r\n  static specModules = {\r\n    // Core\r\n    grandCrusader: GrandCrusader,\r\n    haste: Haste,\r\n\r\n    // Spells\r\n    lightOfTheProtector: LightOfTheProtector,\r\n    hotr: HammerOfTheRighteous,\r\n    wordOfGlory: WordOfGlory,\r\n    judgment: Judgment,\r\n\r\n    // Features\r\n    abilities: Abilities,\r\n    alwaysBeCasting: AlwaysBeCasting,\r\n    spellUsable: SpellUsable,\r\n    checklist: Checklist,\r\n    wogTiming: WordOfGloryTiming,\r\n    shieldOfTheRighteous: ShieldOfTheRighteous,\r\n    consecration: Consecration,\r\n    mitigationcheck: MitigationCheck,\r\n    noDamageSOTR: NoDamageShieldOfTheRighteous,\r\n    overcapSOTR: OvercapShieldOfTheRighteous,\r\n    //cooldownTracker: CooldownTracker,\r\n\r\n    // Talents\r\n    righteousProtector: RighteousProtector,\r\n    seraphim: Seraphim,\r\n    sanctifiedWrathProtJudgement: SanctifiedWrathProtJudgement,\r\n    holyShieldSpellBlock: HolyShieldSpellBlock,\r\n    redoubt: Redoubt,\r\n    blessedHammerDamageReduction: BlessedHammerDamageReduction,\r\n    firstAvenger: FirstAvenger,\r\n    momentOfGlory: MomentOfGlory,\r\n\r\n    // There's no throughput benefit from casting Arcane Torrent on cooldown\r\n    arcaneTorrent: [ArcaneTorrent, { castEfficiency: null }] as const,\r\n\r\n    // HolyPower\r\n    holyPowerTracker: HolyPowerTracker,\r\n    holyPowerDetails: HolyPowerDetails,\r\n  };\r\n}\r\n\r\nexport default CombatLogParser;\r\n","import React from 'react';\r\n\r\n// https://thenounproject.com/term/duration/370713/\r\n// duration by Bohdan Burmich from the Noun Project\r\nconst Icon = ({ ...other }) => (\r\n  <svg xmlns=\"http://www.w3.org/2000/svg\" viewBox=\"10 10 80 80\" className=\"icon\" {...other}>\r\n    <path d=\"M50,86.4865c17.4361,0,31.6216-14.1855,31.6216-31.6216c0-16.6168-12.8865-30.2714-29.1892-31.5189v-4.9677h7.2973v-4.8649  H40.2703v4.8649h7.2973v4.9677c-16.3027,1.2475-29.1892,14.902-29.1892,31.5189C18.3784,72.3009,32.5639,86.4865,50,86.4865z M52.4324,28.2236c3.1101,0.2817,6.0664,1.0982,8.7798,2.356l-8.7798,15.2073V28.2236z M47.5676,28.2236v26.6412 c0,1.1008,0.7393,2.0647,1.8029,2.3497c0.209,0.0561,0.4205,0.0827,0.6295,0.0827c0.8533,0,1.6642-0.4504,2.1065-1.2162 l13.3146-23.0616c6.8507,4.8503,11.3357,12.8315,11.3357,21.8454c0,14.7537-12.0031,26.7567-26.7568,26.7567 s-26.7568-12.003-26.7568-26.7567C23.2432,40.9315,33.9501,29.4573,47.5676,28.2236z\" />\r\n  </svg>\r\n);\r\n\r\nexport default Icon;\r\n","export default function calculateMedian(values) {\r\n  const arr = [...values];\r\n  arr.sort((a, b) => a - b);\r\n\r\n  const half = Math.floor(arr.length / 2);\r\n\r\n  if (arr.length % 2) {\r\n    return arr[half];\r\n  } else {\r\n    return (arr[half - 1] + arr[half]) / 2.0;\r\n  }\r\n}\r\n","export default function average(values) {\r\n  return values.reduce((c, p) => c + p, 0) / values.length;\r\n}\r\n","export default function harmonic(values) {\r\n  return values.length / values.reduce((cum, val) => cum + 1/val, 0);\r\n}\r\n","import React, {useCallback, useState} from 'react';\r\n\r\nimport DropdownIcon from 'interface/icons/Dropdown';\r\nimport InformationIcon from 'interface/icons/Information';\r\nimport { ControlledExpandable } from 'interface/common/Expandable';\r\nimport colorForPerformance from 'common/colorForPerformance';\r\n\r\nimport calculateMedian from './helpers/calculateMedian';\r\nimport average from './helpers/average';\r\nimport harmonic from './helpers/harmonic';\r\n\r\nexport const RuleContext = React.createContext((value: number) => {/**/});\r\n\r\n\r\nexport enum PERFORMANCE_METHOD {\r\n  DEFAULT = 'DEFAULT',\r\n  MEDIAN = 'MEDIAN',\r\n  AVERAGE = 'AVERAGE',\r\n  LOWEST = 'LOWEST',\r\n  FIRST = 'FIRST',\r\n  HARMONIC = 'HARMONIC',\r\n};\r\n\r\ninterface Props {\r\n  name: React.ReactNode;\r\n  children: React.ReactNode;\r\n  description?: React.ReactNode;\r\n  performanceMethod?: PERFORMANCE_METHOD;\r\n}\r\n\r\ninterface State {\r\n  requirementPerformances: number[],\r\n  performance: number;\r\n  passed: boolean;\r\n  expanded: boolean;\r\n}\r\n\r\nconst Rule = (props: Props) => {\r\n\r\n  const [state, setState] = useState<State>({requirementPerformances: [], performance: 1, passed: true, expanded: false});\r\n\r\n\r\n  const calculateRulePerformance = useCallback((values: number[], style = PERFORMANCE_METHOD.DEFAULT) => {\r\n    // Lowest would generally be too punishing for small mistakes, if you want to have a single value tank the rule consider making it its own rule.\r\n    // Average would mark things as OK when one thing was OK and 3 things were \"average\", I think this is wrong and it should mark the rule as average. Median achieves this.\r\n    // Actual Median could mark a rule as 100% ok when there are still some things being neglected, so instead I opted for the best of both worlds and using the lowest of the median or average by default.\r\n\r\n    switch (style) {\r\n      case PERFORMANCE_METHOD.DEFAULT:\r\n        return Math.min(calculateMedian(values), average(values));\r\n      case PERFORMANCE_METHOD.MEDIAN:\r\n        return calculateMedian(values);\r\n      case PERFORMANCE_METHOD.AVERAGE:\r\n        return average(values);\r\n      case PERFORMANCE_METHOD.LOWEST:\r\n        return Math.min(...values);\r\n      case PERFORMANCE_METHOD.FIRST:\r\n        return values[0];\r\n      case PERFORMANCE_METHOD.HARMONIC:\r\n        return harmonic(values);\r\n      default:\r\n        throw new Error(`Unknown style: ${style}`);\r\n    }\r\n  }, [])\r\n\r\n \r\n\r\n  const checkEmptyRule = (child: React.ReactNode) => {\r\n    if (React.isValidElement(child) && child?.props) {\r\n      return true;\r\n    } else {\r\n      return false;\r\n    }\r\n  }\r\n\r\n  const setRequirementPerformance = (p: number) => {\r\n    // We don't have to worry about adding the same Requirement's performance multiple times here because it's only called in the Requirement's constructor, which is only called once.\r\n    setState((prevState: State) => {\r\n      const requirementPerformances: State['requirementPerformances'] = [...prevState.requirementPerformances, p];\r\n      const performance = requirementPerformances.length > 0 ? calculateRulePerformance(requirementPerformances, props.performanceMethod) : 1\r\n      const passed = performance > 0.666;\r\n      const expanded = !passed;\r\n      return {requirementPerformances, performance: performance, passed, expanded}\r\n    })\r\n  }\r\n\r\n  const { name, children: requirements, description } = props;\r\n\r\n  if (!requirements || (Array.isArray(requirements) && !requirements.some(checkEmptyRule))) {\r\n    return null;\r\n  }\r\n\r\n  const inverseExpanded = () => {\r\n    setState(prevState => ({...prevState, expanded: !prevState.expanded}))\r\n  }\r\n\r\n  return (\r\n    <RuleContext.Provider value={setRequirementPerformance}>\r\n      <ControlledExpandable\r\n        element=\"li\"\r\n        className={state.passed ? 'passed' : 'failed'}\r\n        inverseExpanded={inverseExpanded}\r\n        expanded={state.expanded}\r\n        header={(\r\n          <div className=\"flex wrapable\">\r\n            <div className=\"flex-main name\">\r\n              {name}\r\n            </div>\r\n            <div className=\"flex-sub perf\">\r\n              <div className=\"perf-container\">\r\n                <div\r\n                  className=\"perf-bar\"\r\n                  style={{\r\n                    width: `${state.performance * 100}%`,\r\n                    backgroundColor: colorForPerformance(state.performance),\r\n                  }}\r\n                />\r\n              </div>\r\n            </div>\r\n            <div className=\"flex-sub chevron\">\r\n              <div>\r\n                <DropdownIcon />\r\n              </div>\r\n            </div>\r\n          </div>\r\n        )}\r\n      >\r\n        {description && (\r\n          <div className=\"row text-muted description\">\r\n            <InformationIcon />\r\n            <div className=\"col-md-12\">\r\n              {description}\r\n            </div>\r\n          </div>\r\n        )}\r\n        <div className=\"row\">\r\n          {requirements}\r\n        </div>\r\n      </ControlledExpandable>\r\n    </RuleContext.Provider>\r\n  );\r\n}\r\n\r\nexport default Rule;\r\n","import React from 'react';\r\n\r\nimport InformationIcon from 'interface/icons/Information';\r\nimport { formatNumber, formatPercentage, formatThousands } from 'common/format';\r\nimport Tooltip, { TooltipElement } from 'common/Tooltip';\r\nimport colorForPerformance from 'common/colorForPerformance';\r\nimport { BoolThreshold, NumberThreshold, Threshold, ThresholdStyle } from 'parser/core/ParseResults';\r\nimport { Trans } from '@lingui/macro';\r\n\r\nimport performanceForThresholds from './helpers/performanceForThresholds';\r\nimport { RuleContext } from './Rule';\r\n\r\n\r\nexport type RequirementThresholds = NumberThreshold | BoolThreshold;\r\n\r\ninterface Props {\r\n  name: React.ReactNode,\r\n  thresholds: RequirementThresholds,\r\n  tooltip?: React.ReactNode,\r\n  valueTooltip?: React.ReactNode,\r\n  setPerformance: (performance: number) => void,\r\n  prefix?: React.ReactNode,\r\n  suffix?: React.ReactNode,\r\n}\r\nclass Requirement extends React.PureComponent<Props> {\r\n\r\n  constructor(props: Props) {\r\n    super(props);\r\n    props.setPerformance(this.performance);\r\n  }\r\n\r\n  get performance() {\r\n    return performanceForThresholds(this.props.thresholds);\r\n  }\r\n\r\n  formatThresholdsActual(thresholds: Threshold<any>) {\r\n    switch (thresholds.style) {\r\n      case ThresholdStyle.PERCENTAGE:\r\n        return `${formatPercentage(thresholds.actual)}%`;\r\n      case ThresholdStyle.NUMBER:\r\n        return `${formatNumber(thresholds.actual)}`;\r\n      case ThresholdStyle.THOUSANDS:\r\n        return `${formatThousands(thresholds.actual)}`;\r\n      case ThresholdStyle.DECIMAL:\r\n        return `${thresholds.actual.toFixed(2)}`;\r\n      case ThresholdStyle.BOOLEAN:\r\n        return thresholds.actual ? <Trans id=\"common.yes\">Yes</Trans> : <Trans id=\"common.no\">No</Trans>;\r\n      case ThresholdStyle.SECONDS:\r\n        return `${thresholds.actual.toFixed(2)}s`;\r\n      default:\r\n        throw new Error(`Unknown style: ${thresholds.style}`);\r\n    }\r\n  }\r\n\r\n  render() {\r\n    const { name, thresholds, tooltip, valueTooltip, prefix, suffix } = this.props;\r\n\r\n    const performance = this.performance;\r\n    let max = undefined;\r\n    const thresholdsN = thresholds as NumberThreshold;\r\n    if(thresholdsN.max !== undefined) {\r\n      max = `/ ${thresholdsN.max}`;\r\n    }\r\n    const actual = (\r\n      <>\r\n        {prefix} {this.formatThresholdsActual(thresholds)} {max} {suffix}\r\n      </>\r\n    );\r\n\r\n    return (\r\n      <div className=\"col-md-6\">\r\n        <div className=\"flex\">\r\n          <div className=\"flex-main\">\r\n            {name}\r\n          </div>\r\n          {tooltip && (\r\n            <div\r\n              className=\"flex-sub\"\r\n              style={{ marginLeft: 10 }}\r\n            >\r\n              <Tooltip content={tooltip}>\r\n                <div>\r\n                  <InformationIcon />\r\n                </div>\r\n              </Tooltip>\r\n            </div>\r\n          )}\r\n          <div className=\"flex-sub content-middle text-muted\" style={{ minWidth: 55, marginLeft: 5, marginRight: 10 }}>\r\n            <div className=\"text-right\" style={{ width: '100%' }}>\r\n              {valueTooltip ? <TooltipElement content={valueTooltip}>{actual}</TooltipElement> : actual}\r\n            </div>\r\n          </div>\r\n          <div className=\"flex-sub content-middle\" style={{ width: 50 }}>\r\n            <div className=\"performance-bar-container\">\r\n              <div\r\n                className=\"performance-bar small\"\r\n                style={{\r\n                  width: `${performance * 100}%`,\r\n                  transition: 'background-color 800ms',\r\n                  backgroundColor: colorForPerformance(performance),\r\n                }}\r\n              />\r\n            </div>\r\n          </div>\r\n        </div>\r\n      </div>\r\n    );\r\n  }\r\n}\r\n\r\nexport default (props: Omit<Props, 'setPerformance'>) => (\r\n  <RuleContext.Consumer>\r\n    {(setPerformance: (performance: number) => void) => (\r\n      <Requirement\r\n        {...props}\r\n        setPerformance={setPerformance}\r\n      />\r\n    )}\r\n  </RuleContext.Consumer>\r\n);\r\n","/**\r\n *   0 - 33% major This is different from the *minor* threshold which is at 100% instead of 66%. The reason for this is that the minor threshold being at 75% and then 75%-100% being minor - max is that this would suggest going for max is best while this is not always the case. Something like Crusader Strike (with the Crusader's Might talent) has a recommended cast efficiency of 35% *because* you should only cast it enough to benefit you, more than that would be good but not 100% cast efficiency as then you're losing healing.\r\n * 33% - 66% average\r\n * 66% - 99% minor\r\n * 100% good (no issue)\r\n * @param actual\r\n * @param minor\r\n * @param average\r\n * @param major\r\n * @returns {number}\r\n */\r\nfunction performanceForLessThanThresholds(actual, { minor, average, major }) {\r\n  if (actual < major) {\r\n    // major issue\r\n    return 0.333 * actual / major;\r\n  } else if (actual < average) {\r\n    // average issue (between major and average issue)\r\n    return 0.333 + 0.333 * ((actual - major) / (average - major));\r\n  } else if (actual < minor) {\r\n    // minor issue (between average and minor issue)\r\n    return 0.666 + 0.333 * ((actual - average) / (minor - average));\r\n  } else {\r\n    // no issue\r\n    return 1;\r\n  }\r\n}\r\nfunction performanceForGreaterThanThresholds(actual, { minor, average, major }) {\r\n  if (actual > major) {\r\n    // major issue\r\n    return 0.333 * major / actual;\r\n  } else if (actual > average) {\r\n    // average issue (between major and average issue)\r\n    return 0.666 - 0.333 * ((actual - average) / (major - average));\r\n  } else if (actual > minor) {\r\n    // minor issue (between average and minor issue)\r\n    return 1 - 0.333 * ((actual - minor) / (average - minor));\r\n  } else {\r\n    // no issue\r\n    return 1;\r\n  }\r\n}\r\nexport default function performanceForThresholds(thresholds) {\r\n  if (thresholds.isGreaterThan) {\r\n    if (typeof thresholds.isGreaterThan === 'object') {\r\n      return performanceForGreaterThanThresholds(thresholds.actual, thresholds.isGreaterThan);\r\n    } else {\r\n      return thresholds.isGreaterThan / thresholds.actual;\r\n    }\r\n  } else if (thresholds.isLessThan) {\r\n    if (typeof thresholds.isLessThan === 'object') {\r\n      return performanceForLessThanThresholds(thresholds.actual, thresholds.isLessThan);\r\n    } else {\r\n      return thresholds.actual / thresholds.isLessThan;\r\n    }\r\n  } else if (thresholds.isEqual !== undefined) {\r\n    return thresholds.actual !== thresholds.isEqual ? 1 : 0;\r\n  } else {\r\n    throw new Error('Failed to recognize threshold type');\r\n  }\r\n}\r\n","import React from 'react';\r\nimport PropTypes from 'prop-types';\r\nimport { Trans } from '@lingui/macro';\r\n\r\nimport './Checklist.scss';\r\n\r\nconst Checklist = props => {\r\n  const { children } = props;\r\n\r\n  return (\r\n    <ul className=\"checklist\">\r\n      {!children && (\r\n        <li>\r\n          <div className=\"alert alert-danger\">\r\n            <Trans id=\"shared.checklist.missingChecklist\">The checklist is not yet available for this spec. See <a href=\"https://github.com/WoWAnalyzer/WoWAnalyzer\">GitHub</a> or join us on <a href=\"https://discord.gg/AxphPxU\">Discord</a> if you're interested in contributing this.</Trans>\r\n          </div>\r\n        </li>\r\n      )}\r\n\r\n      {children}\r\n    </ul>\r\n  );\r\n};\r\n\r\nChecklist.propTypes = {\r\n  children: PropTypes.node,\r\n};\r\n\r\nexport default Checklist;\r\n","import React from 'react';\r\nimport PropTypes from 'prop-types';\r\nimport { Trans } from '@lingui/macro';\r\n\r\nimport Rule from './Rule';\r\nimport Requirement from './Requirement';\r\n\r\nclass PreparationRule extends React.PureComponent {\r\n\r\n  static propTypes = {\r\n    children: PropTypes.node,\r\n    thresholds: PropTypes.object.isRequired,\r\n  };\r\n\r\n  renderPotionRequirements() {\r\n    const { thresholds } = this.props;\r\n\r\n    return (\r\n      <>\r\n        <Requirement\r\n          name={<Trans id=\"shared.modules.features.checklist.combatPotionsUsed\">Combat potions used</Trans>}\r\n          thresholds={thresholds.potionsUsed}\r\n        />\r\n        <Requirement\r\n          name={<Trans id=\"shared.modules.features.checklist.highQualityCombatPotionsUsed\">High quality combat potions used</Trans>}\r\n          thresholds={thresholds.bestPotionUsed}\r\n        />\r\n      </>\r\n    );\r\n  }\r\n  renderEnchantRequirements() {\r\n    const { thresholds } = this.props;\r\n\r\n    return (\r\n      <>\r\n        <Requirement\r\n          name={<Trans id=\"shared.modules.features.checklist.enchanted\">All items enchanted</Trans>}\r\n          thresholds={thresholds.itemsEnchanted}\r\n        />\r\n        <Requirement\r\n          name={<Trans id=\"shared.modules.features.checklist.enchantedHigh\">Using high quality enchants</Trans>}\r\n          thresholds={thresholds.itemsBestEnchanted}\r\n        />\r\n      </>\r\n    );\r\n  }\r\n  renderWeaponEnhancementRequirements() {\r\n    const { thresholds } = this.props;\r\n\r\n    return (\r\n      <>\r\n        <Requirement\r\n          name={<Trans>All weapons enhanced (oils/stones)</Trans>}\r\n          thresholds={thresholds.weaponsEnhanced}\r\n        />\r\n        <Requirement\r\n          name={<Trans>Using high quality weapon enhancements</Trans>}\r\n          thresholds={thresholds.bestWeaponEnhancements}\r\n        />\r\n      </>\r\n    );\r\n  }\r\n  renderFlaskRequirements() {\r\n    const { thresholds } = this.props;\r\n    return (\r\n      <>\r\n        <Requirement\r\n          name={<Trans id=\"shared.modules.features.checklist.flaskHigh\">High quality flask used</Trans>}\r\n          thresholds={thresholds.higherFlaskPresent}\r\n        />\r\n        <Requirement\r\n          name={<Trans id=\"shared.modules.features.checklist.flask\">Flask used</Trans>}\r\n          thresholds={thresholds.flaskPresent}\r\n        />\r\n      </>\r\n    );\r\n  }\r\n  renderFoodRequirements() {\r\n    const { thresholds } = this.props;\r\n    return (\r\n      <>\r\n        <Requirement\r\n          name={<Trans id=\"shared.modules.features.checklist.foodHigh\">High quality food used</Trans>}\r\n          thresholds={thresholds.higherFoodPresent}\r\n        />\r\n        <Requirement\r\n          name={<Trans id=\"shared.modules.features.checklist.food\">Food used</Trans>}\r\n          thresholds={thresholds.foodPresent}\r\n        />\r\n      </>\r\n    );\r\n  }\r\n\r\n  render() {\r\n    const { children } = this.props;\r\n\r\n    return (\r\n      <Rule\r\n        name={<Trans id=\"shared.modules.features.checklist.wellPrepared\">Be well prepared</Trans>}\r\n        description={<Trans id=\"shared.modules.features.checklist.wellPreparedDetails\">Being well prepared with food, flasks, potions and enchants is an easy way to improve your performance.</Trans>}\r\n      >\r\n        {this.renderEnchantRequirements()}\r\n        {this.renderWeaponEnhancementRequirements()}\r\n        {this.renderPotionRequirements()}\r\n        {this.renderFlaskRequirements()}\r\n        {this.renderFoodRequirements()}\r\n        {children}\r\n      </Rule>\r\n    );\r\n  }\r\n}\r\n\r\nexport default PreparationRule;\r\n","import React from 'react';\r\nimport PropTypes from 'prop-types';\r\n\r\nimport SpellLink from 'common/SpellLink';\r\nimport { captureException } from 'common/errorLogger';\r\n\r\nimport Requirement from './Requirement';\r\n\r\n/**\r\n * This is a common requirement for all checklists that uses settings for CastEfficiency to create a Requirement. It shows the spell and your efficiency as performance depending on the configured cast efficiency efficiency thresholds.\r\n *\r\n * This requirement is automatically disabled if the ability's CastEfficiency suggestion is disabled (i.e. if the ability's castEfficiency: { suggestion } is unset or false), or the ability is disabled completely. If you set `onlyWithSuggestion` to `false` in the object when creating this requirement you can change this behavior to always show if the ability is enabled, regardless of the CastEfficiency suggestion property being set.\r\n */\r\nclass GenericCastEfficiencyRequirement extends React.PureComponent {\r\n  static propTypes = {\r\n    spell: PropTypes.number.isRequired,\r\n    name: PropTypes.node,\r\n    castEfficiency: PropTypes.shape({\r\n      efficiency: PropTypes.number.isRequired,\r\n      gotMaxCasts: PropTypes.bool.isRequired,\r\n      recommendedEfficiency: PropTypes.number.isRequired,\r\n      averageIssueEfficiency: PropTypes.number.isRequired,\r\n      majorIssueEfficiency: PropTypes.number.isRequired,\r\n      casts: PropTypes.any,\r\n      maxCasts: PropTypes.any,\r\n    }).isRequired,\r\n    isMaxCasts: PropTypes.bool,\r\n  };\r\n\r\n  get thresholds() {\r\n    if (!this.props.castEfficiency) {\r\n      captureException(new Error(`GenericCastEfficiencyRequirement requires that you pass the castEfficiency object yourself. Spell: ${this.props.spell}`));\r\n      return null;\r\n    }\r\n\r\n    if(this.props.isMaxCasts) {\r\n      const {\r\n        casts,\r\n        maxCasts,\r\n      } = this.props.castEfficiency;\r\n\r\n      return {\r\n        actual: casts,\r\n        max: maxCasts,\r\n        isLessThan: {\r\n          minor: maxCasts,\r\n          average: maxCasts - 1,\r\n          major: maxCasts - 2,\r\n        },\r\n        style: 'number',\r\n      };\r\n    } else {\r\n      const {\r\n        efficiency,\r\n        gotMaxCasts,\r\n        recommendedEfficiency: minor,\r\n        averageIssueEfficiency: average,\r\n        majorIssueEfficiency: major,\r\n      } = this.props.castEfficiency;\r\n\r\n      return {\r\n        actual: gotMaxCasts ? 1 : efficiency,\r\n        isLessThan: {\r\n          minor,\r\n          average,\r\n          major,\r\n        },\r\n        style: 'percentage',\r\n      };\r\n    }\r\n  }\r\n\r\n  render() {\r\n    const { spell, name, ...others } = this.props;\r\n\r\n    const thresholds = this.thresholds;\r\n    if (!thresholds) {\r\n      return null;\r\n    }\r\n\r\n    return (\r\n      <Requirement\r\n        name={name || <SpellLink id={spell} />}\r\n        thresholds={thresholds}\r\n        {...others}\r\n      />\r\n    );\r\n  }\r\n}\r\n\r\nexport default GenericCastEfficiencyRequirement;\r\n","export default function colorForPerformance(performance: number) {\r\n  if (performance >= 1) {\r\n    return '#4ec04e';\r\n  } else if (performance > 0.666) {\r\n    return '#a6c34c';\r\n  } else if (performance > 0.5) {\r\n    return '#ffc84a';\r\n  } else if (performance > 0.333) {\r\n    return '#df7102';\r\n  } else {\r\n    return '#ac1f39';\r\n  }\r\n}\r\n","import React from 'react';\r\nimport PropTypes from 'prop-types';\r\nimport { AutoSizer } from 'react-virtualized';\r\nimport BaseChart from 'interface/others/BaseChart';\r\n\r\nclass OneVariableBinomialChart extends React.Component {\r\n  static propTypes = {\r\n    probabilities: PropTypes.arrayOf(\r\n      PropTypes.shape({\r\n        x: PropTypes.number.isRequired,\r\n        y: PropTypes.number.isRequired,\r\n      }),\r\n    ).isRequired,\r\n    actualEvent: PropTypes.shape({\r\n      x: PropTypes.number.isRequired,\r\n      y: PropTypes.number.isRequired,\r\n    }).isRequired,\r\n    xAxis: PropTypes.shape({\r\n      title: PropTypes.string.isRequired,\r\n      tickFormat: PropTypes.string.isRequired,\r\n    }).isRequired,\r\n    yAxis: PropTypes.shape({\r\n      title: PropTypes.string.isRequired,\r\n    }),\r\n    yDomain: PropTypes.arrayOf(PropTypes.number),\r\n    tooltip: PropTypes.string.isRequired,\r\n  };\r\n\r\n  state = {\r\n    hover: null,\r\n  };\r\n\r\n  render() {\r\n    const {\r\n      probabilities,\r\n      actualEvent,\r\n      xAxis,\r\n      yAxis,\r\n      yDomain,\r\n      tooltip,\r\n    } = this.props;\r\n\r\n    const data = {\r\n      probabilities,\r\n      actual: actualEvent,\r\n    };\r\n\r\n    const spec = {\r\n      encoding: {\r\n        x: {\r\n          field: 'x',\r\n          type: 'quantitative',\r\n          title: xAxis.title,\r\n          axis: {\r\n            grid: false,\r\n            format: xAxis.tickFormat,\r\n          },\r\n        },\r\n        y: {\r\n          field: 'y',\r\n          type: 'quantitative',\r\n          title: yAxis.title,\r\n          axis: {\r\n            grid: false,\r\n            format: '.0%',\r\n          },\r\n          scale: {\r\n            domain: yDomain,\r\n          },\r\n        },\r\n      },\r\n      layer: [\r\n        {\r\n          data: {\r\n            name: 'probabilities',\r\n          },\r\n          mark: {\r\n            type: 'area',\r\n            color: 'rgba(250, 183, 0, 0.15)',\r\n            line: {\r\n              color: '#fab700',\r\n              strokeWidth: 1,\r\n            },\r\n          },\r\n        },\r\n        {\r\n          data: {\r\n            name: 'actual',\r\n          },\r\n          mark: {\r\n            type: 'point',\r\n            filled: true,\r\n            color: '#00ff96',\r\n            size: 60,\r\n          },\r\n          encoding: {\r\n            tooltip: [\r\n              { field: 'x', title: tooltip },\r\n            ],\r\n          },\r\n        },\r\n      ],\r\n    };\r\n\r\n\r\n    return (\r\n      <AutoSizer disableHeight>\r\n        {({width}) => (\r\n          <BaseChart\r\n            height={150}\r\n            width={width}\r\n            spec={spec}\r\n            data={data}\r\n          />\r\n        )}\r\n      </AutoSizer>\r\n    );\r\n  }\r\n}\r\n\r\nexport default OneVariableBinomialChart;\r\n","import OneVariableBinomialChart from 'interface/others/charts/OneVariableBinomialChart';\r\nimport React from 'react';\r\n\r\n/**\r\n * pn is the mean value of procs\r\n * @param procChance\r\n * @param procAttempts\r\n */\r\nexport function expectedProcCount(procChance: number, procAttempts: number) {\r\n  return procChance * procAttempts;\r\n}\r\n\r\n/**\r\n * Calculates the probability that out of n tries with probability p, we get exactly k positive outcomes\r\n * @param k {Number} Number of desired positive outcomes\r\n * @param n {Number} Number of tries\r\n * @param p {Number} Probability of positive outcome\r\n */\r\nexport function binomialPMF(k: number, n: number, p: number) {\r\n  return binomialDistribution(n, k) * Math.pow(p, k) * Math.pow(1 - p, n - k);\r\n}\r\n\r\n/**\r\n * Calculates the probability that out of n tries with probability p, we get k or less positive outcomes\r\n * @param k {Number} Number of desired positive outcomes\r\n * @param n {Number} Number of tries\r\n * @param p {Number} Probability of positive outcome\r\n */\r\nexport function binomialCDF(k: number, n: number, p: number) {\r\n  let probability = 0;\r\n  for (let i = 0; i <= k; i += 1) {\r\n    probability += binomialPMF(i, n, p);\r\n  }\r\n  return probability;\r\n}\r\n\r\n/**\r\n * Finds the maximum of PMF of given distribution.\r\n * @param n {Number} Maximum number of tries for given event\r\n * @param {Function} pmf Callback that returns probability of exactly K events happening in N tries. Parameters - K, N\r\n * @returns {{ max: Number, p: Number }} Maximum of given PMF function - argument and probability itself\r\n */\r\nexport function findMax(n: number, pmf: (i: number, n: any) => any) {\r\n  let max = -1;\r\n  let maxP = 0;\r\n  for (let i = 0; i <= n; i += 1) {\r\n    const probability = pmf(i, n);\r\n    if (probability > maxP) {\r\n      max = i;\r\n      maxP = probability;\r\n    }\r\n  }\r\n  return {\r\n    max,\r\n    p: maxP,\r\n  };\r\n}\r\n\r\nfunction binomialDistribution(n: number, k: number) {\r\n  // n! / (k! * (n - k)!)\r\n  // factorials are awful, let's simplify a bit\r\n  // we know k < n:\r\n  // numerator: n! = 1 * 2 * ... * (n - k) * (n - k + 1) * (n - k + 2 ) * ... * n\r\n  // denominator: k! * (n - k)! = k! * 1 * 2 * ... * (n - k)\r\n  // cancelling out 1 * 2 * ... * (n - k) from both we get:\r\n  // (n - k + 1) * (n - k + 2) * ... n / k!\r\n  let numerator = 1;\r\n  let denominator = 1;\r\n  for (let i = n - k + 1; i <= n; i += 1) {\r\n    numerator *= i;\r\n  }\r\n  for (let i = 1; i <= k; i += 1) {\r\n    denominator *= i;\r\n  }\r\n  return numerator / denominator;\r\n}\r\n\r\nfunction resetProbabilityArray(actualProcs: number, procAttempts: number, procChance: number | number[]) {\r\n  const procProbabilities: Array<{ x: number; y: number; }> = Array.from({ length: procAttempts }, (_x, i: number) => {\r\n    if (typeof procChance === 'number') {\r\n      return { x: i, y: binomialPMF(i, procAttempts, procChance) };\r\n    } else {\r\n      return { x: i, y: poissonBinomialPMF(i, procAttempts, procChance) };\r\n    }\r\n  });\r\n\r\n  return procProbabilities;\r\n}\r\n\r\nfunction setMinMaxProbabilities(actualProcs: number, procAttempts: number, procChance: number | number[], threshold: number = 0.001) {\r\n  const procProbabilities = resetProbabilityArray(actualProcs, procAttempts, procChance);\r\n  const rangeMin = procProbabilities.findIndex(({ y }) => y >= threshold);\r\n  const rangeMax = rangeMin + procProbabilities.slice(rangeMin).findIndex(({ y }) => y < threshold);\r\n\r\n  return {\r\n    procProbabilities,\r\n    rangeMin,\r\n    rangeMax,\r\n  };\r\n}\r\n\r\n/**\r\n * Recursive formula for calculating the PMF (probability mass function) of Poisson's Binomial Distribution\r\n * @param k {Number} Number of desired positive outcomes\r\n * @param j {Number} Number of total tries\r\n * @param p {[Number]} Probability vector\r\n * @param lookup {Array} Lookup table\r\n * @returns {Number} Probability\r\n */\r\nfunction Ekj(k: number, j: number, p: number[], lookup: any[][]) {\r\n  if (k === -1) {\r\n    return 0;\r\n  }\r\n  if (k === j + 1) {\r\n    return 0;\r\n  }\r\n  if (k === 0 && j === 0) {\r\n    return 1;\r\n  }\r\n  if (lookup[k][j] !== null) {\r\n    return lookup[k][j];\r\n  }\r\n  // literature uses 1-based indices for probabilities, as we're using an array, we have to use 0 based\r\n  const value: number = (1 - p[j - 1]) * Ekj(k, j - 1, p, lookup) + p[j - 1] * Ekj(k - 1, j - 1, p, lookup);\r\n  lookup[k][j] = value;\r\n  return value;\r\n}\r\n\r\n// Poisson's Binomial Distribution\r\n// Methods based on Wikipedia page and this research paper:\r\n// https://www.researchgate.net/publication/257017356_On_computing_the_distribution_function_for_the_Poisson_binomial_distribution\r\n\r\n/**\r\n * Calculates the probability that out of n tries with p probabilities, we get exactly k positive outcomes\r\n * @param k {Number} Number of desired positive outcomes\r\n * @param n {Number} Number of total tries\r\n * @param p {[Number]} Probability vector\r\n */\r\nexport function poissonBinomialPMF(k: number, n: number, p: any[]) {\r\n  // denoted in the paper as ξk, I'll call it Ek for simplicity\r\n  // using the recursive formula in chapter 2.5\r\n  if (p.length !== n) {\r\n    throw new Error('You must supply a probability vector with the same length as the number of total tries into Poisson Binomial PMF');\r\n  }\r\n  // Using a lookup table to simplify recursion a little bit\r\n  // construct an (n+1) x (n+1) lookup table (because Ek,j uses indexes from 0 to n INCLUSIVE, with this we don't have to subtract indexes all the time)\r\n  // intentionally set tu nulls so we know which values are computed or not\r\n  const lookup = [...Array(n + 1)].map(_ => Array(n + 1).fill(null));\r\n  return Ekj(k, n, p, lookup);\r\n}\r\n\r\n/**\r\n * Calculates the probability that out of n tries with p probabilities, we get less than or equal k positive outcomes\r\n * @param k {Number} Number of desired positive outcomes\r\n * @param n {Number} Number of total tries\r\n * @param p {[Number]} Probability vector\r\n */\r\nexport function poissonBinomialCDF(k: number, n: number, p: number[]) {\r\n  // While technically equal to summing Ei from i = 0 to k, since we use recursion, a better solution is a lookup table\r\n  if (p.length !== n) {\r\n    throw new Error('You must supply a probability vector with the same length as the number of total tries into Poisson Binomial CDF');\r\n  }\r\n  // see comments in poissonBinomialPMF\r\n  const lookup = [...Array(n + 1)].map(_ => Array(n + 1).fill(null));\r\n  let probability = 0;\r\n  // since Ekj uses the values from \"previous row\" (Ekj(k - 1, j - 1, ...)), it's better to iterate from 0\r\n  // this way, it produces the least necessary amount of calculations with the lookup table (only the Ekj(k, j - 1) parts)\r\n  for (let i = 0; i <= k; i += 1) {\r\n    probability += Ekj(i, n, p, lookup);\r\n  }\r\n  return probability;\r\n}\r\n\r\nexport function plotOneVariableBinomChart(\r\n  actualProcs: number,\r\n  procAttempts: number,\r\n  procChance: number | number[],\r\n  trackedName: string = 'Procs',\r\n  tooltipText: string = trackedName,\r\n  yDomain: number[] = [0, 0.4],\r\n  xAxis: any = {\r\n    title: trackedName,\r\n    tickFormat: '~k',\r\n  },\r\n  yAxis: any = {\r\n    title: 'Likelihood',\r\n  },\r\n) {\r\n\r\n  const { procProbabilities, rangeMin, rangeMax } = setMinMaxProbabilities(actualProcs, procAttempts, procChance);\r\n  const actualEventY = typeof procChance === 'number' ? binomialPMF(actualProcs, procAttempts, procChance) : poissonBinomialPMF(actualProcs, procAttempts, procChance);\r\n  return (\r\n    <OneVariableBinomialChart\r\n      probabilities={procProbabilities.slice(rangeMin, rangeMax + 1)}\r\n      actualEvent={{ x: actualProcs, y: actualEventY }}\r\n      yDomain={yDomain}\r\n      xAxis={xAxis}\r\n      yAxis={yAxis}\r\n      tooltip={tooltipText}\r\n    />\r\n  );\r\n}\r\n","/**\r\n * A simple component that shows the spell icon left and a value right.\r\n * Use this only for things that the player certainly should be familiar with, such as their own spells.\r\n * Do NOT use for items or azerite powers.\r\n */\r\nimport React from 'react';\r\n\r\nimport SpellIcon from 'common/SpellIcon';\r\n\r\nimport '../BoringValue.scss';\r\nimport Spell from 'common/SPELLS/Spell';\r\n\r\ntype Props = {\r\n  spell: Spell;\r\n  value: React.ReactNode;\r\n  label: React.ReactNode;\r\n  extra?: React.ReactNode;\r\n  className?: string;\r\n}\r\n\r\nconst BoringSpellValue = ({ spell, value, label, extra, className }: Props) => (\r\n  <div className={`flex boring-value ${className || ''}`}>\r\n    <div className=\"flex-sub icon\">\r\n      <SpellIcon id={spell.id} />\r\n    </div>\r\n    <div className=\"flex-main value\">\r\n      <div>{value}</div>\r\n      <small>{label}</small>\r\n      {extra}\r\n    </div>\r\n  </div>\r\n);\r\n\r\nexport default BoringSpellValue;\r\n","import React from 'react';\r\n\r\n// https://thenounproject.com/search/?q=dropdown&i=1871189\r\n// Dropdown by zalhan from the Noun Project\r\nconst Icon = ({ ...other }) => (\r\n  <svg xmlns=\"http://www.w3.org/2000/svg\" viewBox=\"0 0 16 9\" className=\"icon\" {...other}>\r\n      <path d=\"M14.0059397,2.26485497e-14 C15.1072288,2.26485497e-14 15.3722573,0.627746582 14.5881847,1.41182411 L8.70999225,7.29005337 C8.317902,7.68214607 7.67653023,7.6764822 7.29009898,7.29005337 L1.41183294,1.41182411 C0.632099139,0.632095183 0.894513756,2.26485497e-14 1.99406028,2.26485497e-14 L14.0059397,2.26485497e-14 Z\" />\r\n  </svg>\r\n);\r\n\r\nexport default Icon;\r\n","import React, {useState} from 'react';\r\nimport AnimateHeight from 'react-animate-height';\r\n\r\nimport './Expandable.scss';\r\n\r\ninterface Props {\r\n  header: React.ReactNode;\r\n  children: React.ReactNode;\r\n  element: React.ElementType;\r\n  className?: string;\r\n  expanded?: boolean;\r\n  inverseExpanded: () => void;\r\n}\r\n\r\nexport const Expandable = (props: Omit<Props, 'expanded'|'inverseExpanded'>) => {\r\n  const [expanded, setExpanded] = useState<boolean>(false);\r\n  const handleToggle = () => {\r\n    setExpanded((prevExpanded: boolean) => !prevExpanded)\r\n  }\r\n\r\n  const { header, children, element: Element, className } = props;\r\n  \r\n  return (\r\n    <Element className={`expandable ${expanded ? 'expanded' : ''} ${className || ''}`}>\r\n      <div className=\"meta\" onClick={handleToggle}>\r\n        {header}\r\n      </div>\r\n      <AnimateHeight className=\"details\" height={expanded ? 'auto' : 0}>\r\n        {children}\r\n      </AnimateHeight>\r\n    </Element>\r\n  );\r\n}\r\n\r\nexport const ControlledExpandable = (props: Props) =>  {\r\n  const { header, children, element: Element, className } = props;\r\n\r\n  return (\r\n    <Element className={`expandable ${props.expanded ? 'expanded' : ''} ${className || ''}`}>\r\n      <div className=\"meta\" onClick={props.inverseExpanded}>\r\n        {header}\r\n      </div>\r\n      <AnimateHeight className=\"details\" height={props.expanded ? 'auto' : 0}>\r\n        {children}\r\n      </AnimateHeight>\r\n    </Element>\r\n  );\r\n}\r\n","import React from 'react';\r\n\r\nimport Analyzer, { SELECTED_PLAYER } from 'parser/core/Analyzer';\r\nimport SPELLS from 'common/SPELLS/index';\r\nimport SpellIcon from 'common/SpellIcon';\r\nimport { formatNumber, formatPercentage } from 'common/format';\r\n\r\nimport SpellLink from 'common/SpellLink';\r\nimport Enemies from 'parser/shared/modules/Enemies';\r\n\r\nimport { findByBossId } from 'raids';\r\nimport StatisticBox from 'interface/others/StatisticBox';\r\nimport HIT_TYPES from 'game/HIT_TYPES';\r\nimport MAGIC_SCHOOLS from 'game/MAGIC_SCHOOLS';\r\nimport Events from 'parser/core/Events';\r\n\r\nconst debug = false;\r\n\r\nclass MitigationCheck extends Analyzer {\r\n  static dependencies = {\r\n    enemies: Enemies,\r\n  };\r\n\r\n  checksPassedMap = new Map();\r\n  checksFailedMap = new Map();\r\n\r\n  checksPhysical = [];\r\n  checksMagical = [];\r\n\r\n  buffCheckPhysical = [];\r\n  buffCheckMagical = [];\r\n  buffCheckPhysAndMag = [];\r\n\r\n  debuffCheckPhysical = [];\r\n  debuffCheckMagical = [];\r\n  debuffCheckPhysAndMag = [];\r\n\r\n  constructor(...args) {\r\n    super(...args);\r\n    if (this.owner.boss == null) {\r\n      this.active = false;\r\n      return;\r\n    }\r\n    const boss = findByBossId(this.owner.boss.id);\r\n    if (\r\n      boss.fight.softMitigationChecks &&\r\n      boss.fight.softMitigationChecks.physical &&\r\n      boss.fight.softMitigationChecks.magical\r\n    ) {\r\n      this.checksPhysical = boss.fight.softMitigationChecks.physical;\r\n      this.checksMagical = boss.fight.softMitigationChecks.magical;\r\n      if (this.checksPhysical === undefined || this.checksMagical === undefined) {\r\n        this.checksPhysical = [];\r\n        this.checksMagical = [];\r\n      }\r\n    } else {\r\n      this.checksPhysical = [];\r\n      this.checksMagical = [];\r\n\r\n      this.buffCheckPhysical = [];\r\n      this.buffCheckMagical = [];\r\n      this.buffCheckPhysAndMag = [];\r\n\r\n      this.debuffCheckPhysical = [];\r\n      this.debuffCheckMagical = [];\r\n      this.debuffCheckPhysAndMag = [];\r\n    }\r\n    [...this.checksPhysical, ...this.checksMagical].forEach((e) => {\r\n      this.checksPassedMap.set(e, 0);\r\n      this.checksFailedMap.set(e, 0);\r\n    });\r\n    this.addEventListener(Events.damage.to(SELECTED_PLAYER), this.onDamageTaken);\r\n  }\r\n\r\n  onDamageTaken(event) {\r\n    const spell = event.ability.guid;\r\n    const hitType = event.ability.type;\r\n    let checks = [];\r\n    let buffCheck = [];\r\n    let debuffCheck = [];\r\n    if (hitType === MAGIC_SCHOOLS.ids.PHYSICAL) {\r\n      checks = this.checksPhysical;\r\n      buffCheck = [...this.buffCheckPhysical, ...this.buffCheckPhysAndMag];\r\n      debuffCheck = [...this.debuffCheckPhysical, ...this.debuffCheckPhysAndMag];\r\n    } else {\r\n      checks = this.checksMagical;\r\n      buffCheck = [...this.buffCheckMagical, ...this.buffCheckPhysAndMag];\r\n      debuffCheck = [...this.debuffCheckMagical, ...this.debuffCheckPhysAndMag];\r\n    }\r\n    if (checks.includes(spell) && !event.tick) {\r\n      debug && console.log(buffCheck);\r\n      debug && console.log(debuffCheck);\r\n      if (\r\n        buffCheck.some((e) => this.selectedCombatant.hasBuff(e)) ||\r\n        event.hitType === HIT_TYPES.IMMUNE\r\n      ) {\r\n        // pass checked if buff was up or the damage missed\r\n        this.checksPassedMap.set(spell, this.checksPassedMap.get(spell) + 1);\r\n      } else {\r\n        const enemy = this.enemies.getEntities()[event.sourceID];\r\n        //We want to get the source rather than the player's target, so no getEntity().\r\n        if (enemy && debuffCheck.some((e) => enemy.hasBuff(e, event.timestamp))) {\r\n          this.checksPassedMap.set(spell, this.checksPassedMap.get(spell) + 1);\r\n        } else {\r\n          this.checksFailedMap.set(spell, this.checksFailedMap.get(spell) + 1);\r\n        }\r\n      }\r\n    }\r\n  }\r\n\r\n  get tooltip() {\r\n    return [\r\n      ...this.buffCheckPhysical,\r\n      ...this.buffCheckMagical,\r\n      ...this.buffCheckPhysAndMag,\r\n      ...this.debuffCheckPhysical,\r\n      ...this.debuffCheckMagical,\r\n      ...this.debuffCheckPhysAndMag,\r\n    ].map((id) => <li key={id}>{SPELLS[id].name}</li>);\r\n  }\r\n\r\n  get physicalChecks() {\r\n    return this.checksPhysical.filter(\r\n      (spell) => this.checksPassedMap.get(spell) + this.checksFailedMap.get(spell) > 0,\r\n    );\r\n  }\r\n\r\n  get magicalChecks() {\r\n    return this.checksMagical.filter(\r\n      (spell) => this.checksPassedMap.get(spell) + this.checksFailedMap.get(spell) > 0,\r\n    );\r\n  }\r\n\r\n  statistic() {\r\n    const failSum = Array.from(this.checksFailedMap.values()).reduce(\r\n      (total, val) => total + val,\r\n      0,\r\n    );\r\n    const passSum = Array.from(this.checksPassedMap.values()).reduce(\r\n      (total, val) => total + val,\r\n      0,\r\n    );\r\n    if (failSum + passSum === 0) {\r\n      return null;\r\n    }\r\n    const buffCheck = [\r\n      ...this.buffCheckPhysical,\r\n      ...this.buffCheckMagical,\r\n      ...this.buffCheckPhysAndMag,\r\n    ];\r\n    let spellIconId;\r\n    if (buffCheck.length > 0) {\r\n      spellIconId = buffCheck[0];\r\n    } else {\r\n      spellIconId = SPELLS.SHIELD_BLOCK_BUFF.id;\r\n    }\r\n\r\n    const physicalTable =\r\n      this.physicalChecks.length > 0 ? (\r\n        <>\r\n          <thead>\r\n            <tr>\r\n              <th>Physical</th>\r\n              <th>Ability</th>\r\n              <th>Passed</th>\r\n              <th>Failed</th>\r\n            </tr>\r\n          </thead>\r\n          <tbody>\r\n            {this.physicalChecks.map((spell) => (\r\n              <tr key={spell}>\r\n                <td />\r\n                <th scope=\"row\">\r\n                  <SpellLink id={spell} style={{ height: '2.5em' }} />\r\n                </th>\r\n                <td>{formatNumber(this.checksPassedMap.get(spell))}</td>\r\n                <td>{formatNumber(this.checksFailedMap.get(spell))}</td>\r\n              </tr>\r\n            ))}\r\n          </tbody>\r\n        </>\r\n      ) : null;\r\n\r\n    const borderless = { borderTop: 'none' };\r\n    const magicalTable =\r\n      this.magicalChecks.length > 0 ? (\r\n        <>\r\n          <thead>\r\n            <tr>\r\n              <th style={borderless}>Magical</th>\r\n              <th style={borderless}>Ability</th>\r\n              <th style={borderless}>Passed</th>\r\n              <th style={borderless}>Failed</th>\r\n            </tr>\r\n          </thead>\r\n          <tbody>\r\n            {this.magicalChecks.map((spell) => (\r\n              <tr key={spell}>\r\n                <td />\r\n                <th scope=\"row\">\r\n                  <SpellLink id={spell} style={{ height: '2.5em' }} />\r\n                </th>\r\n                <td>{formatNumber(this.checksPassedMap.get(spell))}</td>\r\n                <td>{formatNumber(this.checksFailedMap.get(spell))}</td>\r\n              </tr>\r\n            ))}\r\n          </tbody>\r\n        </>\r\n      ) : null;\r\n\r\n    return (\r\n      <StatisticBox\r\n        icon={<SpellIcon id={spellIconId} />}\r\n        value={`${formatPercentage(passSum / (passSum + failSum))} %`}\r\n        label=\"Soft mitigation checks passed.\"\r\n        tooltip={\r\n          <>\r\n            Checks if one of the following buffs or debuffs were up during the mechanic:\r\n            <ul>{this.tooltip}</ul>\r\n          </>\r\n        }\r\n      >\r\n        <table className=\"table table-condensed\" style={{ fontWeight: 'bold' }}>\r\n          {physicalTable}\r\n          {magicalTable}\r\n        </table>\r\n      </StatisticBox>\r\n    );\r\n  }\r\n}\r\n\r\nexport default MitigationCheck;\r\n","import RESOURCE_TYPES from 'game/RESOURCE_TYPES';\r\nimport ResourceTracker from 'parser/shared/modules/resources/resourcetracker/ResourceTracker';\r\nimport SPELLS from 'common/SPELLS';\r\n\r\nclass HolyPowerTracker extends ResourceTracker {\r\n  constructor(...args) {\r\n    super(...args);\r\n    this.resource = RESOURCE_TYPES.HOLY_POWER;\r\n  }\r\n\r\n  getReducedCost(event) {\r\n    if (!this.getResource(event).cost) {\r\n      return 0;\r\n    }\r\n    let cost = this.getResource(event).cost;\r\n    if (this.selectedCombatant.hasBuff(SPELLS.FIRES_OF_JUSTICE_BUFF.id)) {\r\n      cost = cost - 1;\r\n    }\r\n    return cost;\r\n  }\r\n}\r\n\r\nexport default HolyPowerTracker;\r\n","import React from 'react';\r\n\r\nimport Analyzer from 'parser/core/Analyzer';\r\nimport Panel from 'interface/statistics/Panel';\r\nimport { formatNumber, formatPercentage } from 'common/format';\r\nimport RESOURCE_TYPES from 'game/RESOURCE_TYPES';\r\nimport { STATISTIC_ORDER } from 'interface/others/StatisticBox';\r\nimport BoringResourceValue from 'interface/statistics/components/BoringResourceValue';\r\nimport Statistic from 'interface/statistics/Statistic';\r\nimport ResourceBreakdown from 'parser/shared/modules/resources/resourcetracker/ResourceBreakdown';\r\n\r\nimport { i18n } from '@lingui/core';\r\nimport { t } from '@lingui/macro';\r\n\r\nimport HolyPowerTracker from './HolyPowerTracker';\r\n\r\n\r\nconst holyPowerIcon = 'inv_helmet_96';\r\n\r\nclass HolyPowerDetails extends Analyzer {\r\n  static dependencies = {\r\n    holyPowerTracker: HolyPowerTracker,\r\n  };\r\n\r\n  get wastedHolyPowerPercent() {\r\n    return this.holyPowerTracker.wasted / (this.holyPowerTracker.wasted + this.holyPowerTracker.generated);\r\n  }\r\n\r\n  get suggestionThresholds() {\r\n    return {\r\n      actual: 1 - this.wastedHolyPowerPercent,\r\n      isLessThan: {\r\n        minor: 0.98,\r\n        average: 0.95,\r\n        major: 0.92,\r\n      },\r\n      style: 'percentage',\r\n    };\r\n  }\r\n\r\n  suggestions(when) {\r\n    when(this.suggestionThresholds).addSuggestion((suggest, actual, recommended) => suggest(`You wasted ${formatNumber(this.holyPowerTracker.wasted)} Holy Power.`)\r\n        .icon(holyPowerIcon)\r\n        .actual(i18n._(t('paladin.shared.suggestions.holyPower.wasted')`${formatPercentage(this.wastedHolyPowerPercent)}% Holy Power wasted`))\r\n        .recommended(`Wasting <${formatPercentage(1 - recommended)}% is recommended`));\r\n  }\r\n\r\n  statistic() {\r\n    return [\r\n      (\r\n        <Statistic\r\n          key=\"Statistic\"\r\n          size=\"small\"\r\n          position={STATISTIC_ORDER.CORE(4)}\r\n          tooltip={`${formatPercentage(this.wastedHolyPowerPercent)}% wasted`}\r\n        >\r\n          <BoringResourceValue\r\n            resource={RESOURCE_TYPES.HOLY_POWER}\r\n            value={formatNumber(this.holyPowerTracker.wasted)}\r\n            label=\"Holy Power Wasted\"\r\n          />\r\n        </Statistic>\r\n      ),\r\n      (\r\n        <Panel\r\n          key=\"Panel\"\r\n          title=\"Holy power usage\"\r\n          pad={false}\r\n        >\r\n          <ResourceBreakdown\r\n            tracker={this.holyPowerTracker}\r\n            resourceName=\"Holy Power\"\r\n            showSpenders\r\n          />\r\n        </Panel>\r\n      ),\r\n    ];\r\n  }\r\n}\r\n\r\nexport default HolyPowerDetails;\r\n","/**\r\n * This list is used to skip abilities for the purposes of *hit\r\n * counting*. These abilities produce many hits but generally aren't\r\n * worth mitigating, skewing the results of tracking.\r\n */\r\n\r\nconst IGNORED: number[] = [\r\n\r\n];\r\n\r\nexport default IGNORED;\r\n","import Enemies from 'parser/shared/modules/Enemies';\r\nimport { DamageEvent } from 'parser/core/Events';\r\nimport MAGIC_SCHOOLS from 'game/MAGIC_SCHOOLS';\r\n\r\nimport IgnoredAbilities from './IgnoredAbilities';\r\n\r\nexport function notableEnemy(enemies: Enemies, event: DamageEvent): boolean {\r\n    return !event.sourceIsFriendly && event.sourceID !== undefined && enemies.getEntities()[event.sourceID] !== undefined;\r\n}\r\n\r\nexport function magic(event: DamageEvent): boolean {\r\n    return event.ability.type !== MAGIC_SCHOOLS.ids.PHYSICAL;\r\n}\r\n\r\nexport function shouldIgnore(enemies: Enemies, event: DamageEvent): boolean {\r\n    return !notableEnemy(enemies, event) || IgnoredAbilities.includes(event.ability.guid);\r\n}\r\n","import Analyzer, { Options, SELECTED_PLAYER } from 'parser/core/Analyzer';\r\nimport EnemyInstances from 'parser/shared/modules/EnemyInstances';\r\nimport SPELLS from 'common/SPELLS';\r\nimport Spell from 'common/SPELLS/Spell';\r\nimport SPECS from 'game/SPECS';\r\nimport Events, { CastEvent, DamageEvent } from 'parser/core/Events';\r\nimport EnemyInstance from 'parser/core/EnemyInstance';\r\nimport React from 'react';\r\nimport Statistic from 'interface/statistics/Statistic';\r\nimport STATISTIC_ORDER from 'interface/others/STATISTIC_ORDER';\r\nimport BoringSpellValue from 'interface/statistics/components/BoringSpellValue';\r\nimport { formatNumber, formatPercentage } from 'common/format';\r\nimport { NumberThreshold, ThresholdStyle, When } from 'parser/core/ParseResults';\r\nimport { i18n } from '@lingui/core';\r\nimport { t } from '@lingui/macro';\r\nimport SpellLink from 'common/SpellLink';\r\n\r\n/**\r\n * Analyzer to track the extra damage caused by Holy Power abilities after\r\n * a Judgment cast.\r\n */\r\nclass Judgment extends Analyzer {\r\n  static dependencies = {\r\n    enemies: EnemyInstances,\r\n  };\r\n  private enemies!: EnemyInstances;\r\n\r\n  DAMAGE_MODIFIER: number = 0.25;\r\n\r\n  retHolyPowerAbilities: Spell[] = [\r\n    SPELLS.DIVINE_STORM,\r\n    SPELLS.TEMPLARS_VERDICT_DAMAGE,\r\n    SPELLS.EXECUTION_SENTENCE_TALENT,\r\n    SPELLS.JUSTICARS_VENGEANCE_TALENT\r\n  ];\r\n\r\n  protHolyPowerAbilities: Spell[] = [\r\n    SPELLS.SHIELD_OF_THE_RIGHTEOUS\r\n  ];\r\n\r\n  judgmentSpells: Spell[] = [\r\n    SPELLS.JUDGMENT_CAST,\r\n    SPELLS.JUDGMENT_CAST_PROTECTION\r\n  ];\r\n\r\n  allHolyPowerAbilities: Spell[] = [...this.retHolyPowerAbilities, ...this.protHolyPowerAbilities];\r\n\r\n  supportedSpecIds: number[] = [SPECS.PROTECTION_PALADIN.id, SPECS.RETRIBUTION_PALADIN.id];\r\n\r\n  spellCastMap: Map<Spell, number> = new Map<Spell, number>();\r\n  spellDamageMap: Map<Spell, number> = new Map<Spell, number>();\r\n  totalJudgmentConsumptions: number = 0;\r\n  totalJudgmentCasts: number = 0;\r\n\r\n  constructor(options: Options) {\r\n    super(options);\r\n    this.active = this.supportedSpecIds.includes(this.selectedCombatant.specId);\r\n    if (!this.active) {\r\n      return;\r\n    }\r\n    this.addEventListener(Events.damage.by(SELECTED_PLAYER).spell(this.allHolyPowerAbilities), this.trackDamageEvent);\r\n    this.addEventListener(Events.cast.by(SELECTED_PLAYER).spell(this.judgmentSpells), this.trackJudgmentCasts);\r\n  }\r\n\r\n  getSupportedSpellWithId(spellId: number): Spell | undefined {\r\n    return this.allHolyPowerAbilities.find((spell) => spell.id === spellId);\r\n  }\r\n\r\n  trackDamageEvent(event: DamageEvent): void {\r\n    const enemy: null | EnemyInstance = this.enemies.getEntity(event);\r\n    if (!enemy || !enemy.hasBuff(SPELLS.JUDGMENT_DEBUFF.id, null, 250)) {\r\n      return;\r\n    }\r\n    const holyPowerDamageSpell: Spell | undefined = this.getSupportedSpellWithId(event.ability.guid);\r\n    if (holyPowerDamageSpell === undefined) {\r\n      return;\r\n    }\r\n    this.totalJudgmentConsumptions += 1;\r\n    const oldCastNumber: number | undefined = this.spellCastMap.get(holyPowerDamageSpell);\r\n    this.spellCastMap.set(holyPowerDamageSpell, !oldCastNumber ? 1 : oldCastNumber + 1);\r\n    const extraJudgmentDamage: number = event.amount - (event.amount * (1 / (1+ this.DAMAGE_MODIFIER)));\r\n    const oldDamageNumber: number | undefined = this.spellDamageMap.get(holyPowerDamageSpell);\r\n    this.spellDamageMap.set(holyPowerDamageSpell, !oldDamageNumber ? extraJudgmentDamage : oldDamageNumber + extraJudgmentDamage);\r\n  }\r\n\r\n  trackJudgmentCasts(event: CastEvent): void {\r\n    this.totalJudgmentCasts += 1;\r\n  }\r\n\r\n  getStatisticTooltip(): React.ReactNode {\r\n    const tooltipRows: React.ReactNode[] = [];\r\n    this.spellCastMap.forEach((castNum: number, spell: Spell) => {\r\n      tooltipRows.push(<>{spell.name} Judgment Consumptions: {castNum} ({formatNumber(this.spellDamageMap.get(spell) || 0)} total extra damage)<br /></>);\r\n    });\r\n    return (\r\n      <>\r\n        Total Judgments Consumed: {this.totalJudgmentConsumptions} <br />\r\n        {tooltipRows}\r\n      </>\r\n    )\r\n  }\r\n\r\n  get percentageJudgmentsConsumed(): number {\r\n    return this.totalJudgmentConsumptions / this.totalJudgmentCasts;\r\n  }\r\n\r\n  get suggestionThresholds(): NumberThreshold {\r\n    return {\r\n      actual: this.percentageJudgmentsConsumed,\r\n      isLessThan: {\r\n        minor: 0.95,\r\n        average: 0.9,\r\n        major: 0.85,\r\n      },\r\n      style: ThresholdStyle.PERCENTAGE,\r\n    };\r\n  }\r\n\r\n  suggestions(when: When) {\r\n    when(this.suggestionThresholds).addSuggestion((suggest, actual, recommended) => suggest(<>You're not consuming all your <SpellLink id={SPELLS.JUDGMENT_CAST.id} icon /> debuffs.</>)\r\n      .icon(SPELLS.JUDGMENT_DEBUFF.icon)\r\n      .actual(i18n._(t('paladin.retribution.suggestions.judgement.consumed')`${formatPercentage(this.percentageJudgmentsConsumed)}% Judgments consumed`))\r\n      .recommended(`>${formatPercentage(recommended)}% is recommended`));\r\n  }\r\n\r\n  statistic(): React.ReactNode {\r\n    return (\r\n      <Statistic\r\n        position={STATISTIC_ORDER.DEFAULT}\r\n        size=\"flexible\"\r\n        tooltip={this.getStatisticTooltip()}\r\n      >\r\n        <BoringSpellValue\r\n          spell={SPELLS.JUDGMENT_DEBUFF}\r\n          value={`${formatNumber(this.totalJudgmentConsumptions)}`}\r\n          label=\"Judgment Debuffs Consumed\"\r\n        />\r\n      </Statistic>\r\n    );\r\n  }\r\n}\r\n\r\nexport default Judgment;\r\n","import React from 'react';\r\nimport { AutoSizer } from 'react-virtualized';\r\n\r\nimport Analyzer, { SELECTED_PLAYER } from 'parser/core/Analyzer';\r\nimport Panel from 'interface/others/Panel';\r\nimport SPELLS from 'common/SPELLS';\r\nimport SpellLink from 'common/SpellLink';\r\n\r\nimport BaseChart, { formatTime } from 'interface/others/BaseChart';\r\nimport Events from 'parser/core/Events';\r\n\r\nconst DEATH_BUFFER = 200;\r\n\r\n/**\r\n * Goal is to remove pressure from healers by selfhealing more when really needed (eg. at low health) / improving tanks reactive selfhealing timings\r\n*/\r\nclass SelfHealTimingGraph extends Analyzer {\r\n  _hpEvents = [];\r\n  _deathEvents = [];\r\n  _selfhealTimestamps = [];\r\n\r\n\r\n  selfHealSpell = SPELLS.HEALTHSTONE;\r\n  tabTitle = \"Selheal Timing\";\r\n  tabURL = 'selfheal-timings';\r\n\r\n  constructor(options){\r\n    super(options);\r\n    this.addEventListener(Events.death.to(SELECTED_PLAYER), this.onDeath);\r\n    this.addEventListener(Events.damage.to(SELECTED_PLAYER), this.onDamageTaken);\r\n    this.addEventListener(Events.heal.to(SELECTED_PLAYER), this.onHealTaken);\r\n  }\r\n\r\n  onDeath(event) {\r\n    this._deathEvents.push(event);\r\n  }\r\n\r\n  onDamageTaken(event) {\r\n    this._hpEvents.push(event);\r\n  }\r\n\r\n  onHealTaken(event) {\r\n    this._hpEvents.push(event);\r\n\r\n    if (event.ability.guid === this.selfHealSpell.id && event.sourceID === event.targetID) {\r\n      this._selfhealTimestamps.push(event);\r\n    }\r\n  }\r\n\r\n  get plot() {\r\n    const _deaths = this._deathEvents.map(({ timestamp, ability }) => {\r\n      // find last HP event (within 200ms of death event, usually should be the same timestamp)\r\n      const lastHpIndex = this._hpEvents.findIndex(e => e.timestamp >= timestamp - DEATH_BUFFER);\r\n      // this event is usually with hitPoints already 0, so we need one event before that\r\n      // return if event doesn't exist or is actually the first event (on-pull death?)\r\n      if (lastHpIndex === -1 || lastHpIndex === 0) {\r\n        this.log('Didn\\'t find last HP event before death');\r\n        return undefined;\r\n      }\r\n      const { hitPoints, maxHitPoints } = this._hpEvents[lastHpIndex - 1];\r\n      const p = (hitPoints / maxHitPoints) || 0;\r\n      const percentage = Math.min(Math.round(p * 100), 100);\r\n      return {\r\n        x: timestamp - this.owner.fight.start_time,\r\n        percentage,\r\n        ability,\r\n      };\r\n    });\r\n\r\n    const _hp = this._hpEvents.filter(event => event.hitPoints !== undefined && event.maxHitPoints !== undefined)\r\n      .map(({ timestamp, hitPoints, maxHitPoints }) => {\r\n        const p = (hitPoints / maxHitPoints) || 0;\r\n        return {\r\n          x: timestamp - this.owner.fight.start_time,\r\n          y: Math.min(Math.round(p * 100), 100),\r\n        };\r\n      });\r\n\r\n    const _casts = this._selfhealTimestamps.map(event => {\r\n      const startingHP = event.hitPoints - (event.amount || 0) + (event.absorbed || 0) + (event.absorb || 0);\r\n      const p = (startingHP / event.maxHitPoints) || 0;\r\n      const percentage = Math.min(Math.round(p * 100), 100);\r\n      return {\r\n        x: event.timestamp - this.owner.fight.start_time,\r\n        y: percentage,\r\n        ability: event.ability,\r\n        amount: event.amount || 0,\r\n        overheal: event.overheal || 0,\r\n        hitPoints: startingHP,\r\n      };\r\n    });\r\n\r\n    const baseEncoding = {\r\n      x: {\r\n        field: 'x',\r\n        type: 'quantitative',\r\n        axis: {\r\n          labelExpr: formatTime('datum.value'),\r\n          grid: false,\r\n        },\r\n        title: null,\r\n        scale: { zero: true, nice: false },\r\n      },\r\n      y: {\r\n        field: 'y',\r\n        type: 'quantitative',\r\n        title: null,\r\n        axis: {\r\n          grid: false,\r\n        },\r\n      },\r\n    };\r\n\r\n    const spec = {\r\n      layer: [\r\n        {\r\n          data: {\r\n            name: 'hp',\r\n          },\r\n          mark: {\r\n            type: 'area',\r\n            line: {\r\n              interpolate: 'linear',\r\n              color: '#fab700',\r\n              strokeWidth: 1,\r\n            },\r\n            color: 'rgba(250, 183, 0, 0.15)',\r\n          },\r\n          encoding: baseEncoding,\r\n        },\r\n        {\r\n          data: {\r\n            name: 'casts',\r\n          },\r\n          mark: {\r\n            type: 'point',\r\n            size: 60,\r\n            color: 'white',\r\n            filled: true,\r\n          },\r\n          encoding: {\r\n            ...baseEncoding,\r\n            tooltip: [\r\n              { field: 'ability.name', type: 'nominal', title: 'Ability' },\r\n              { field: 'hitPoints', type: 'quantitative', title: 'Hit Points', format: '.3~s' },\r\n              { field: 'amount', type: 'quantitative', title: 'Healing', format: '.3~s' },\r\n              { field: 'overheal', type: 'quantitative', title: 'Overhealing', format: '.3~s' },\r\n            ],\r\n          },\r\n        },\r\n        {\r\n          data: {\r\n            name: 'deaths',\r\n          },\r\n          mark: {\r\n            type: 'rule',\r\n            color: 'red',\r\n            strokeWidth: 2,\r\n          },\r\n          encoding: {\r\n            x: baseEncoding.x,\r\n            tooltip: [\r\n              { field: 'ability.name', type: 'nominal', title: 'Killing Ability' },\r\n              { field: 'percentage', type: 'quantitative', title: 'HP % When Hit' },\r\n            ],\r\n          },\r\n        },\r\n      ],\r\n    };\r\n    const data = {\r\n      hp: [{x: 0, y: 100}].concat(_hp),\r\n      casts: _casts,\r\n      deaths: _deaths,\r\n    };\r\n\r\n    return (\r\n      <div className=\"graph-container\" style={{\r\n        width: '100%',\r\n        minHeight: 200,\r\n      }}>\r\n        <AutoSizer>\r\n          {({ width, height }) => (\r\n            <BaseChart width={width} height={height} spec={spec} data={data} />\r\n          )}\r\n        </AutoSizer>\r\n      </div>\r\n    );\r\n  }\r\n\r\n  tab() {\r\n    return {\r\n      title: this.tabTitle,\r\n      url: this.tabURL,\r\n      render: () => (\r\n        <Panel\r\n          title={this.tabTitle}\r\n          explanation={(\r\n            <>\r\n              This plot shows you your <SpellLink id={this.selfHealSpell.id} /> casts relative to your Health Points to help you improve your <SpellLink id={this.selfHealSpell.id} /> timings.<br />\r\n              Improving those timings by selfhealing at low health and the correct time will remove a lot of pressure from your healers.\r\n            </>\r\n          )}\r\n        >\r\n          {this.plot}\r\n        </Panel>\r\n      ),\r\n    };\r\n  }\r\n}\r\n\r\nexport default SelfHealTimingGraph;\r\n"],"sourceRoot":""}