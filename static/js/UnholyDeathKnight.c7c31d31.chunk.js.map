{"version":3,"sources":["parser/deathknight/unholy/modules/features/Abilities.tsx","parser/deathknight/unholy/modules/features/AlwaysBeCasting.tsx","parser/deathknight/unholy/modules/features/CooldownThroughputTracker.ts","parser/deathknight/unholy/modules/features/WoundTracker.ts","parser/deathknight/unholy/modules/features/FesteringStrikeEfficiency.tsx","parser/deathknight/unholy/modules/runicpower/RunicPowerTracker.ts","parser/deathknight/unholy/modules/runicpower/RunicPowerDetails.tsx","parser/deathknight/unholy/modules/features/RuneTracker.ts","parser/deathknight/unholy/modules/features/checklist/Component.js","parser/deathknight/unholy/modules/features/checklist/Module.tsx","parser/deathknight/unholy/modules/features/ScourgeStrikeEfficiency.tsx","parser/deathknight/unholy/modules/features/Apocalypse.tsx","parser/deathknight/unholy/modules/features/VirulentPlagueEfficiency.tsx","parser/deathknight/unholy/modules/features/SpellUsable.ts","parser/deathknight/unholy/modules/talents/SoulReaper.tsx","parser/deathknight/unholy/CombatLogParser.ts","parser/core/calculateEffectiveDamage.js","interface/icons/Uptime.js","parser/shared/ExecuteHelper.ts","parser/shared/modules/helpers/Stacks.tsx","parser/deathknight/shared/RuneTracker.js","parser/deathknight/shared/runeforges/RuneOfTheFallenCrusader.tsx","parser/deathknight/shared/runeforges/RuneOfHysteria.tsx","parser/deathknight/shared/RuneBreakdown.js","parser/deathknight/shared/RuneDetails.js"],"names":["Abilities","combatant","this","selectedCombatant","spell","SPELLS","FESTERING_STRIKE","category","SPELL_CATEGORIES","ROTATIONAL","gcd","base","SCOURGE_STRIKE","enabled","hasTalent","CLAWING_SHADOWS_TALENT","id","DEATH_COIL","CHAINS_OF_ICE","UTILITY","cooldown","DARK_TRANSFORMATION","castEfficiency","suggestion","recommendedEfficiency","OUTBREAK","EPIDEMIC","ROTATIONAL_AOE","DEATH_AND_DECAY","DEFILE_TALENT","APOCALYPSE","COOLDOWNS","extraSuggestion","SpellLink","SUMMON_GARGOYLE_TALENT","DARK_ARBITER_TALENT_GLYPH","ARMY_OF_THE_DEAD","SACRIFICIAL_PACT","DEFENSIVE","ICEBOUND_FORTITUDE","buffSpellId","ANTI_MAGIC_ZONE","ANTI_MAGIC_ZONE_BUFF","isDefensive","ANTI_MAGIC_SHELL","UNHOLY_ASSAULT_TALENT","UNHOLY_BLIGHT_TALENT","DEATH_PACT_TALENT","ASPHYXIATE_TALENT","WRAITH_WALK_TALENT","DEATHS_ADVANCE","DEATH_STRIKE","RAISE_DEAD_UNHOLY","CONTROL_UNDEAD","RAISE_ALLY","DEATH_GRIP","MIND_FREEZE","DARK_COMMAND","RUNE_1","HIDDEN","haste","hasBuff","RUNIC_CORRUPTION","charges","RUNE_2","RUNE_3","SWARMING_MIST","hasCovenant","COVENANTS","VENTHYR","DOOR_OF_SHADOWS","ABOMINATION_LIMB","NECROLORD","FLESHCRAFT","SHACKLE_THE_UNWORTHY","KYRIAN","DEATHS_DUE","NIGHT_FAE","SOULSHAPE","CoreAbilities","AlwaysBeCasting","when","downtimeSuggestionThresholds","addSuggestion","suggest","actual","recommended","icon","i18n","_","formatPercentage","downtimePercentage","isGreaterThan","minor","average","major","style","ThresholdStyle","PERCENTAGE","CoreAlwaysBeCasting","CooldownThroughputTracker","CoreCooldownThroughputTracker","cooldownSpells","summary","BUILT_IN_SUMMARY_TYPES","DAMAGE","WoundTracker","options","_targets","addEventListener","Events","applydebuff","by","SELECTED_PLAYER","FESTERING_WOUND","onFesteringWoundChange","applydebuffstack","removedebuffstack","removedebuff","event","targets","encodeTargetString","targetID","targetInstance","currentStacks","Analyzer","FesteringStrikeEfficiency","woundTracker","totalFesteringStrikeCasts","festeringStrikeCastsOverSafeCount","cast","onCast","targetString","suggestionThresholds","Statistic","tooltip","position","STATISTIC_ORDER","CORE","STATISTIC_CATEGORY","GENERAL","size","BoringSpellValueText","strikeEfficiency","isLessThan","dependencies","RunicPowerTracker","resource","RESOURCE_TYPES","RUNIC_POWER","cost","getResource","ResourceTracker","RunicPowerDetails","runicPowerTracker","wastedPercent","wasted","generated","BoringResourceValue","value","label","title","url","render","Panel","ResourceBreakdown","tracker","showSpenders","RuneTracker","runeEfficiency","CoreRuneTracker","UnholyDeathKnightChecklist","thresholds","AbilityRequirement","props","GenericCastEfficiencyRequirement","getCastEfficiencyForSpellId","Rule","name","description","href","target","rel","SOUL_REAPER_TALENT","ARCANE_TORRENT_RUNIC_POWER","Requirement","runicPowerEfficiency","PreparationRule","Checklist","combatants","preparationRuleAnalyzer","alwaysBeCasting","runeTracker","runicPowerDetails","Component","selected","suggestionThresholdsEfficiency","efficiencySuggestionThresholds","BaseModule","Combatants","CastEfficiency","PreparationRuleAnalyzer","ScourgeStrikeEfficiency","activeSpell","totalCasts","zeroWoundCasts","Apocalypse","enemies","totalApocalypseCasts","apocalypseWoundsPopped","getEntity","currentTargetWounds","getBuff","stacks","Number","toFixed","regular","averageWoundsPopped","EnemyInstances","VirulentPlagueEfficiency","totalOutBreakCasts","totalTimeWasted","refreshdebuff","VIRULENT_PLAGUE","onRefresh","onApply","onCastOutbreak","timestamp","VirulentDuration","averageTimeWasted","UptimeSuggestionThresholds","Uptime","getBuffUptime","owner","fightDuration","EBON_FEVER_TALENT","NUMBER","suffix","Enemies","SpellUsable","hasAotd","ARMY_OF_THE_DAMNED_TALENT","damage","onDeathCoilDamage","SELECTED_PLAYER_PET","MELEE","onArmyDamage","sourceID","isOnCooldown","beginCooldown","reduceCooldown","CoreSpellUsable","SoulReaper","maxCasts","abilities","fightend","adjustMaxCasts","constructor","executeSpells","push","add","Math","ceil","totalExecuteDuration","OPTIONAL","TALENTS","ItemDamageDone","amount","ExecuteHelper","executeSources","lowerThreshold","CombatLogParser","CoreCombatLogParser","specModules","cooldownThroughputTracker","festeringStrikeEfficiency","checklist","scourgeStrikeEfficiency","apocalypse","virulentPlagueEfficiency","spellUsable","soulReaper","runeDetails","RuneDetails","runeOfTheFallenCrusader","RuneOfTheFallenCrusader","runeOfHysteria","RuneOfHysteria","arcaneTorrent","ArcaneTorrent","calculateEffectiveDamage","increase","raw","absorbed","Icon","other","xmlns","viewBox","className","d","inExecuteWindow","inHealthExecuteWindow","executeWindowStart","lastExecuteHitTimestamp","totalExecuteWindowDuration","casts","castsWithExecute","onGeneralDamage","onExecuteCast","onExecuteDamage","applybuff","to","executeOutsideRangeEnablers","applyExecuteEnablerBuff","removebuff","removeExecuteEnablerBuff","onFightEnd","hitPoints","maxHitPoints","upperThreshold","isTargetInExecuteRange","isTargetInReverseExecuteRange","usable","forEach","allOnCD","targetIsFriendly","areExecuteSpellsOnCD","isExecuteUsableOutsideExecuteRange","isTargetInHealthExecuteWindow","modifiesDamage","damageModifier","type","EventType","RemoveBuff","RemoveDebuff","ApplyBuff","ApplyDebuff","ApplyBuffStack","RemoveBuffStack","ApplyDebuffStack","RemoveDebuffStack","stack","Error","RUNE_IDS","args","runesReady","_fightend","RUNES","_lastTimestamp","fight","start_time","_runesReadySum","MAX_RUNES","i","onFightend","onApplybuff","onRemovebuff","UpdateSpellUsable","onUpdateSpellUsable","runesAvailable","x","y","end_time","addPassiveRuneRegeneration","classResources","prepull","filter","runeCost","ability","guid","OBLITERATE_CAST","OBLITERATION_TALENT","startCooldown","resourceChangeType","resourceChange","addCharge","changeCooldown","change","trigger","EndCooldown","RestoreCharge","BeginCooldown","AddCooldownCharge","timeFromStart","passiveRunesGained","runesMaxCasts","passiveRunesWasted","runesWasted","runicCorruptionContribution","addPassiveAccelerator","initBuilderAbility","buildersObj","round","spellId","gained","uptime","contribution","acceleratorGained","acceleratorWasted","multiplier","remainingCooldown","cooldownRemaining","reduction","runeId","longestCooldown","expectedCooldown","getExpectedCooldownDuration","cooldownTriggerEvent","shortestCooldown","chargesOnCooldown","chargesAvailable","timeSpentAtRuneCount","formatNumber","dropdown","index","map","key","formatDuration","color","runeOneCooldown","getCooldown","runeTwoCooldown","runeThreeCooldown","runeCastEfficiencies","efficiency","reduce","accumulator","currentValue","length","spender","spendersObj","spent","timeSpentAtRune","time","healing","overhealing","active","hasWeaponEnchant","RUNE_OF_THE_FALLEN_CRUSADER","heal","UNHOLY_STRENGTH_BUFF","_onHeal","overheal","absorb","overhealPercentage","averageStrength","runicPowerGained","runicPowerWasted","RUNE_OF_HYSTERIA","energize","_onEnergize","RUNE_OF_HYSTERIA_BUFF","waste","runicPowerWastedDuringHysteria","gainedSpell","wastedSpell","spec","SPECS","BLOOD_DEATH_KNIGHT","gainedDeathStrikes","wastedDeathStrikes","floor","runicPowerGainedByHysteria","wastedPercentage","potentialRunicPowerGainedByHysteria","potentiallyGainedDeathStrikes","RuneBreakdown","resourceName","prepareGenerated","prepareSpent","totalGenerated","totalWasted","totalSpent","spendersCasts","colSpan","Tooltip","content","abilityId","width","SpellIcon","noLink","paddingRight","textAlign","propTypes","PropTypes","object","isRequired","bool","data","mark","encoding","field","axis","labelExpr","formatTime","grid","tickMinStep","disableHeight","BaseChart","height","runes"],"mappings":"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","file":"static/js/UnholyDeathKnight.c7c31d31.chunk.js","sourcesContent":["import React from 'react';\r\n\r\nimport SPELLS from 'common/SPELLS';\r\nimport SpellLink from 'common/SpellLink';\r\n\r\nimport CoreAbilities from 'parser/core/modules/Abilities';\r\nimport { SpellbookAbility } from 'parser/core/modules/Ability';\r\n\r\nimport COVENANTS from 'game/shadowlands/COVENANTS';\r\n\r\nclass Abilities extends CoreAbilities {\r\n  spellbook(): SpellbookAbility[] {\r\n    const combatant = this.selectedCombatant;\r\n    return [\r\n      // roational\r\n      {\r\n        spell: SPELLS.FESTERING_STRIKE,\r\n        category: Abilities.SPELL_CATEGORIES.ROTATIONAL,\r\n        gcd: {\r\n          base: 1500,\r\n        },\r\n      },\r\n\r\n      {\r\n        spell: SPELLS.SCOURGE_STRIKE,\r\n        enabled: !combatant.hasTalent(SPELLS.CLAWING_SHADOWS_TALENT.id),\r\n        category: Abilities.SPELL_CATEGORIES.ROTATIONAL,\r\n        gcd: {\r\n          base: 1500,\r\n        },\r\n      },\r\n\r\n      {\r\n        spell: SPELLS.CLAWING_SHADOWS_TALENT,\r\n        enabled: combatant.hasTalent(SPELLS.CLAWING_SHADOWS_TALENT.id),\r\n        category: Abilities.SPELL_CATEGORIES.ROTATIONAL,\r\n        gcd: {\r\n          base: 1500,\r\n        },\r\n      },\r\n\r\n      {\r\n        spell: SPELLS.DEATH_COIL,\r\n        category: Abilities.SPELL_CATEGORIES.ROTATIONAL,\r\n        gcd: {\r\n          base: 1500,\r\n        },\r\n      },\r\n\r\n      {\r\n        spell: SPELLS.CHAINS_OF_ICE,\r\n        category: Abilities.SPELL_CATEGORIES.UTILITY,\r\n        cooldown: 40,\r\n        gcd: {\r\n          base: 1500,\r\n        },\r\n      },\r\n      {\r\n        spell: SPELLS.DARK_TRANSFORMATION,\r\n        category: Abilities.SPELL_CATEGORIES.ROTATIONAL,\r\n        cooldown: 60,\r\n        gcd: {\r\n          base: 1500,\r\n        },\r\n        castEfficiency: {\r\n          suggestion: true,\r\n          recommendedEfficiency: 0.90,\r\n        },\r\n      },\r\n      {\r\n        spell: SPELLS.OUTBREAK,\r\n        category: Abilities.SPELL_CATEGORIES.ROTATIONAL,\r\n        gcd: {\r\n          base: 1500,\r\n        },\r\n      },\r\n      {\r\n        spell: SPELLS.EPIDEMIC,\r\n        category: Abilities.SPELL_CATEGORIES.ROTATIONAL_AOE,\r\n        gcd: {\r\n          base: 1500,\r\n        },\r\n      },\r\n      {\r\n        spell: SPELLS.DEATH_AND_DECAY,\r\n        category: Abilities.SPELL_CATEGORIES.ROTATIONAL_AOE,\r\n        enabled: !combatant.hasTalent(SPELLS.DEFILE_TALENT.id),\r\n        cooldown: 30,\r\n        gcd: {\r\n          base: 1500,\r\n        },\r\n      },\r\n\r\n      // cooldowns\r\n      {\r\n        spell: SPELLS.APOCALYPSE,\r\n        category: Abilities.SPELL_CATEGORIES.COOLDOWNS,\r\n        cooldown: 75,\r\n        gcd: {\r\n          base: 1500,\r\n        },\r\n        castEfficiency: {\r\n          suggestion: true,\r\n          recommendedEfficiency: 0.95,\r\n          extraSuggestion: <span>Making sure to use <SpellLink id={SPELLS.APOCALYPSE.id} /> immediately after it's cooldown is up is important, try to plan for it's use as it is coming off cooldown.</span>,\r\n        },\r\n      },\r\n\r\n      {\r\n        spell: [SPELLS.SUMMON_GARGOYLE_TALENT, SPELLS.DARK_ARBITER_TALENT_GLYPH],\r\n        category: Abilities.SPELL_CATEGORIES.COOLDOWNS,\r\n        cooldown: 180,\r\n        gcd: {\r\n          base: 1500,\r\n        },\r\n        enabled: combatant.hasTalent(SPELLS.SUMMON_GARGOYLE_TALENT.id),\r\n        castEfficiency: {\r\n          suggestion: true,\r\n          recommendedEfficiency: 0.90,\r\n        },\r\n      },\r\n\r\n      {\r\n        spell: SPELLS.ARMY_OF_THE_DEAD,\r\n        category: Abilities.SPELL_CATEGORIES.COOLDOWNS,\r\n        cooldown: 480,\r\n        gcd: {\r\n          base: 1500,\r\n        },\r\n        castEfficiency: {\r\n          suggestion: true,\r\n          recommendedEfficiency: 0.90,\r\n        },\r\n      },\r\n\r\n      // defensives\r\n      {\r\n        spell: SPELLS.SACRIFICIAL_PACT,\r\n        category: Abilities.SPELL_CATEGORIES.DEFENSIVE,\r\n        cooldown: 120,\r\n        gcd: {\r\n          base: 1500,\r\n        },\r\n      },\r\n      {\r\n        spell: SPELLS.ICEBOUND_FORTITUDE,\r\n        buffSpellId: SPELLS.ICEBOUND_FORTITUDE.id,\r\n        category: Abilities.SPELL_CATEGORIES.DEFENSIVE,\r\n        cooldown: 180,\r\n        gcd: null,\r\n      },\r\n      {\r\n        spell: SPELLS.ANTI_MAGIC_ZONE,\r\n        buffSpellId: SPELLS.ANTI_MAGIC_ZONE_BUFF.id,\r\n        category: Abilities.SPELL_CATEGORIES.DEFENSIVE,\r\n        cooldown: 120,\r\n        gcd: null,\r\n        isDefensive: true,\r\n      },\r\n      {\r\n        spell: SPELLS.ANTI_MAGIC_SHELL,\r\n        buffSpellId: SPELLS.ANTI_MAGIC_SHELL.id,\r\n        category: Abilities.SPELL_CATEGORIES.DEFENSIVE,\r\n        cooldown: 60,\r\n        gcd: null,\r\n      },\r\n      // talents\r\n      {\r\n        spell: SPELLS.DEFILE_TALENT,\r\n        category: Abilities.SPELL_CATEGORIES.ROTATIONAL,\r\n        cooldown: 20,\r\n        gcd: {\r\n          base: 1500,\r\n        },\r\n        enabled: combatant.hasTalent(SPELLS.DEFILE_TALENT.id),\r\n        castEfficiency: {\r\n          suggestion: true,\r\n          recommendedEfficiency: 0.90,\r\n        },\r\n      },\r\n      {\r\n        spell: SPELLS.UNHOLY_ASSAULT_TALENT,\r\n        category: Abilities.SPELL_CATEGORIES.COOLDOWNS,\r\n        cooldown: 75,\r\n        enabled: combatant.hasTalent(SPELLS.UNHOLY_ASSAULT_TALENT.id),\r\n        castEfficiency: {\r\n          suggestion: true,\r\n          recommendedEfficiency: .90,\r\n        },\r\n      },\r\n      {\r\n        spell: SPELLS.UNHOLY_BLIGHT_TALENT,\r\n        category: Abilities.SPELL_CATEGORIES.COOLDOWNS,\r\n        enabled: combatant.hasTalent(SPELLS.UNHOLY_BLIGHT_TALENT.id),\r\n        cooldown: 45,\r\n        gcd: {\r\n          base: 1500,\r\n        },\r\n        castEfficiency: {\r\n          suggestion: true,\r\n          recommendedEfficiency: .90,\r\n        },\r\n      },\r\n      {\r\n        spell: SPELLS.DEATH_PACT_TALENT,\r\n        category: Abilities.SPELL_CATEGORIES.DEFENSIVE,\r\n        enabled: combatant.hasTalent(SPELLS.DEATH_PACT_TALENT.id),\r\n        cooldown: 120,\r\n        gcd: {\r\n          base: 1500,\r\n        },\r\n      },\r\n      {\r\n        spell: SPELLS.ASPHYXIATE_TALENT,\r\n        category: Abilities.SPELL_CATEGORIES.UTILITY,\r\n        cooldown: 45,\r\n        gcd: {\r\n          base: 1500,\r\n        },\r\n      },\r\n      {\r\n        spell: SPELLS.WRAITH_WALK_TALENT,\r\n        category: Abilities.SPELL_CATEGORIES.UTILITY,\r\n        enabled: combatant.hasTalent(SPELLS.WRAITH_WALK_TALENT.id),\r\n        gcd: {\r\n          base: 1500,\r\n        },\r\n      },\r\n      {\r\n        spell: SPELLS.DEATHS_ADVANCE,\r\n        category: Abilities.SPELL_CATEGORIES.UTILITY,\r\n        gcd: {\r\n          base: 1500,\r\n        },\r\n      },\r\n      {\r\n        spell: SPELLS.DEATH_STRIKE,\r\n        category: Abilities.SPELL_CATEGORIES.DEFENSIVE,\r\n        gcd: {\r\n          base: 1500,\r\n        },\r\n      },\r\n      // utility\r\n      {\r\n        spell: SPELLS.RAISE_DEAD_UNHOLY,\r\n        category: Abilities.SPELL_CATEGORIES.UTILITY,\r\n        cooldown: 30,\r\n        gcd: {\r\n          base: 1500,\r\n        },\r\n      },\r\n      {\r\n        spell: SPELLS.CONTROL_UNDEAD,\r\n        category: Abilities.SPELL_CATEGORIES.UTILITY,\r\n        gcd: {\r\n          base: 1500,\r\n        },\r\n      },\r\n      {\r\n        spell: SPELLS.RAISE_ALLY,\r\n        category: Abilities.SPELL_CATEGORIES.UTILITY,\r\n        cooldown: 600,\r\n        gcd: {\r\n          base: 1500,\r\n        },\r\n      },\r\n      {\r\n        spell: SPELLS.DEATH_GRIP,\r\n        category: Abilities.SPELL_CATEGORIES.UTILITY,\r\n        gcd: null,\r\n      },\r\n      {\r\n        spell: SPELLS.MIND_FREEZE,\r\n        category: Abilities.SPELL_CATEGORIES.UTILITY,\r\n        gcd: null,\r\n      },\r\n      {\r\n        spell: SPELLS.DARK_COMMAND,\r\n        category: Abilities.SPELL_CATEGORIES.UTILITY,\r\n        cooldown: 8,\r\n        gcd: null,\r\n      },\r\n      {\r\n        spell: SPELLS.RUNE_1,\r\n        category: Abilities.SPELL_CATEGORIES.HIDDEN,\r\n        cooldown: haste => {\r\n          const multiplier = combatant.hasBuff(SPELLS.RUNIC_CORRUPTION.id) ? 1 : 0;\r\n          return 10 / (1 + haste) / (1 + multiplier);\r\n        },\r\n        charges: 2,\r\n      },\r\n\r\n      {\r\n        spell: SPELLS.RUNE_2,\r\n        category: Abilities.SPELL_CATEGORIES.HIDDEN,\r\n        cooldown: haste => {\r\n          const multiplier = combatant.hasBuff(SPELLS.RUNIC_CORRUPTION.id) ? 1 : 0;\r\n          return 10 / (1 + haste) / (1 + multiplier);\r\n        },\r\n        charges: 2,\r\n      },\r\n\r\n      {\r\n        spell: SPELLS.RUNE_3,\r\n        category: Abilities.SPELL_CATEGORIES.HIDDEN,\r\n        cooldown: haste => {\r\n          const multiplier = combatant.hasBuff(SPELLS.RUNIC_CORRUPTION.id) ? 1 : 0;\r\n          return 10 / (1 + haste) / (1 + multiplier);\r\n        },\r\n        charges: 2,\r\n      },\r\n\r\n      // covenants\r\n      {\r\n        spell: SPELLS.SWARMING_MIST,\r\n        category: Abilities.SPELL_CATEGORIES.COOLDOWNS,     \r\n        cooldown: 60,\r\n        gcd: {\r\n          base: 1500,\r\n        },\r\n        castEfficiency: {\r\n          suggestion: true,\r\n          recommendedEfficiency: 0.90,\r\n        },\r\n        enabled: combatant.hasCovenant(COVENANTS.VENTHYR.id),\r\n      },\r\n      {\r\n        spell: SPELLS.DOOR_OF_SHADOWS,\r\n        category: Abilities.SPELL_CATEGORIES.UTILITY,     \r\n        cooldown: 60,\r\n        gcd: {\r\n          base: 1500,\r\n        },\r\n        enabled: combatant.hasCovenant(COVENANTS.VENTHYR.id),\r\n      },\r\n      {\r\n        spell: SPELLS.ABOMINATION_LIMB,\r\n        category: Abilities.SPELL_CATEGORIES.COOLDOWNS,     \r\n        cooldown: 120,\r\n        gcd: {\r\n          base: 1500,\r\n        },\r\n        castEfficiency: {\r\n          suggestion: true,\r\n          recommendedEfficiency: 0.90,\r\n        },\r\n        enabled: combatant.hasCovenant(COVENANTS.NECROLORD.id),\r\n      },\r\n      {\r\n        spell: SPELLS.FLESHCRAFT,\r\n        category: Abilities.SPELL_CATEGORIES.DEFENSIVE,     \r\n        cooldown: 120,\r\n        enabled: combatant.hasCovenant(COVENANTS.NECROLORD.id),\r\n      },\r\n      {\r\n        spell: SPELLS.SHACKLE_THE_UNWORTHY,\r\n        category: Abilities.SPELL_CATEGORIES.COOLDOWNS,     \r\n        cooldown: 60,\r\n        gcd: {\r\n          base: 1500,\r\n        },\r\n        castEfficiency: {\r\n          suggestion: true,\r\n          recommendedEfficiency: 0.90,\r\n        },\r\n        enabled: combatant.hasCovenant(COVENANTS.KYRIAN.id),\r\n      },\r\n      {\r\n        spell: SPELLS.DEATHS_DUE,\r\n        category: Abilities.SPELL_CATEGORIES.ROTATIONAL,     \r\n        cooldown: 30,\r\n        gcd: {\r\n          base: 1500,\r\n        },\r\n        castEfficiency: {\r\n          suggestion: true,\r\n          recommendedEfficiency: 0.90,\r\n        },\r\n        enabled: combatant.hasCovenant(COVENANTS.NIGHT_FAE.id),\r\n      },\r\n      {\r\n        spell: SPELLS.SOULSHAPE,\r\n        category: Abilities.SPELL_CATEGORIES.UTILITY,     \r\n        cooldown: 30,\r\n        gcd: {\r\n          base: 1500,\r\n        },\r\n        enabled: combatant.hasCovenant(COVENANTS.NIGHT_FAE.id),\r\n      },\r\n    ];\r\n  }\r\n}\r\n\r\nexport default Abilities;\r\n","import React from 'react';\r\n\r\nimport { i18n } from '@lingui/core';\r\nimport { t } from '@lingui/macro';\r\n\r\nimport SPELLS from 'common/SPELLS';\r\nimport { formatPercentage } from 'common/format';\r\nimport SpellLink from 'common/SpellLink';\r\n\r\nimport CoreAlwaysBeCasting from 'parser/shared/modules/AlwaysBeCasting';\r\nimport { When, ThresholdStyle } from 'parser/core/ParseResults';\r\n\r\n\r\nclass AlwaysBeCasting extends CoreAlwaysBeCasting {\r\n  get downtimeSuggestionThresholds() {\r\n    return {\r\n      actual: this.downtimePercentage,\r\n      isGreaterThan: {\r\n        minor: 0.2,\r\n        average: 0.35,\r\n        major: .4,\r\n      },\r\n      style: ThresholdStyle.PERCENTAGE,\r\n    };\r\n  }\r\n\r\n  suggestions(when: When) {\r\n    when(this.downtimeSuggestionThresholds)\r\n      .addSuggestion((suggest, actual, recommended) => suggest(<span>Your downtime can be improved. Try to Always Be Casting (ABC), reducing time away from the boss unless due to mechanics.  If you do have to move, try casting filler spells, such as <SpellLink id={SPELLS.DEATH_COIL.id} /> or <SpellLink id={SPELLS.OUTBREAK.id} />.</span>)\r\n          .icon('spell_mage_altertime')\r\n          .actual(i18n._(t('deathknight.unholy.suggestions.alwaysBeCasting')`${formatPercentage(actual)}% downtime`))\r\n          .recommended(`<${formatPercentage(recommended)}% is recommended`));\r\n  }\r\n}\r\n\r\nexport default AlwaysBeCasting;\r\n","import SPELLS from 'common/SPELLS';\r\n\r\nimport CoreCooldownThroughputTracker, { BUILT_IN_SUMMARY_TYPES } from 'parser/shared/modules/CooldownThroughputTracker';\r\n\r\nclass CooldownThroughputTracker extends CoreCooldownThroughputTracker {\r\n  static cooldownSpells = [\r\n    ...CoreCooldownThroughputTracker.cooldownSpells,\r\n    {\r\n      spell: SPELLS.UNHOLY_ASSAULT_TALENT,\r\n      summary: [\r\n        BUILT_IN_SUMMARY_TYPES.DAMAGE,\r\n      ],\r\n    },\r\n    {\r\n      spell: SPELLS.APOCALYPSE,\r\n      summary: [\r\n        BUILT_IN_SUMMARY_TYPES.DAMAGE,\r\n      ]\r\n    }\r\n  ];\r\n}\r\n\r\nexport default CooldownThroughputTracker;\r\n","import SPELLS from 'common/SPELLS';\r\n\r\nimport Analyzer, { SELECTED_PLAYER, Options } from 'parser/core/Analyzer';\r\nimport Events, { ApplyDebuffStackEvent, RemoveDebuffStackEvent, RemoveDebuffEvent, ApplyDebuffEvent } from 'parser/core/Events';\r\nimport { encodeTargetString } from 'parser/shared/modules/EnemyInstances';\r\nimport { currentStacks } from 'parser/shared/modules/helpers/Stacks';\r\n\r\nclass WoundTracker extends Analyzer {  \r\n  private _targets: { [key: string]: number; } = {};\r\n\r\n  public get targets(): { [key: string]: number; } {\r\n    return this._targets;\r\n  }\r\n  \r\n  constructor(options: Options) {\r\n    super(options);\r\n    \r\n    this.addEventListener(Events.applydebuff.by(SELECTED_PLAYER).spell(SPELLS.FESTERING_WOUND), this.onFesteringWoundChange);\r\n    this.addEventListener(Events.applydebuffstack.by(SELECTED_PLAYER).spell(SPELLS.FESTERING_WOUND), this.onFesteringWoundChange);\r\n    this.addEventListener(Events.removedebuffstack.by(SELECTED_PLAYER).spell(SPELLS.FESTERING_WOUND), this.onFesteringWoundChange);\r\n    this.addEventListener(Events.removedebuff.by(SELECTED_PLAYER).spell(SPELLS.FESTERING_WOUND), this.onFesteringWoundChange);\r\n  }\r\n\r\n  onFesteringWoundChange(event: ApplyDebuffEvent | ApplyDebuffStackEvent | RemoveDebuffStackEvent | RemoveDebuffEvent) {\r\n    this.targets[encodeTargetString(event.targetID, event.targetInstance)] = currentStacks(event);\r\n  }\r\n  \r\n}\r\n\r\nexport default WoundTracker;","import React from 'react';\r\n\r\nimport { i18n } from '@lingui/core';\r\nimport { t } from '@lingui/macro';\r\n\r\nimport SPELLS from 'common/SPELLS';\r\nimport SpellLink from 'common/SpellLink';\r\nimport { formatPercentage } from 'common/format';\r\n\r\nimport Analyzer, { Options, SELECTED_PLAYER } from 'parser/core/Analyzer';\r\nimport Events, { CastEvent } from 'parser/core/Events';\r\nimport { ThresholdStyle, When } from 'parser/core/ParseResults';\r\nimport { encodeTargetString } from 'parser/shared/modules/EnemyInstances';\r\n\r\nimport Statistic from 'interface/statistics/Statistic';\r\nimport { STATISTIC_ORDER } from 'interface/others/StatisticBox';\r\nimport STATISTIC_CATEGORY from 'interface/others/STATISTIC_CATEGORY';\r\n\r\nimport BoringSpellValueText from 'interface/statistics/components/BoringSpellValueText';\r\n\r\nimport WoundTracker from './WoundTracker';\r\n\r\nconst SAFE_WOUND_COUNT = 3;\r\n\r\nclass FesteringStrikeEfficiency extends Analyzer {\r\n  static dependencies = {\r\n    woundTracker: WoundTracker,\r\n  };\r\n\r\n  protected woundTracker!: WoundTracker;\r\n\r\n  constructor(options: Options) {\r\n    super(options);\r\n\r\n    this.addEventListener(Events.cast.by(SELECTED_PLAYER).spell(SPELLS.FESTERING_STRIKE), this.onCast);\r\n  }\r\n\r\n  totalFesteringStrikeCasts = 0;\r\n  festeringStrikeCastsOverSafeCount = 0;\r\n\r\n  onCast(event: CastEvent) {\r\n    this.totalFesteringStrikeCasts += 1;\r\n    const targetString = encodeTargetString(event.targetID, event.targetInstance);\r\n\r\n    if (this.woundTracker.targets[targetString]) {\r\n      const currentTargetWounds = this.woundTracker.targets[targetString];\r\n      if (currentTargetWounds > SAFE_WOUND_COUNT) {\r\n        this.festeringStrikeCastsOverSafeCount += 1;\r\n      }\r\n    }\r\n  }\r\n\r\n  get strikeEfficiency(): number {\r\n    return 1 - (this.festeringStrikeCastsOverSafeCount / this.totalFesteringStrikeCasts);\r\n  }\r\n\r\n  get suggestionThresholds() {\r\n    return {\r\n      actual: this.strikeEfficiency,\r\n      isLessThan: {\r\n        minor: .80,\r\n        average: .70,\r\n        major: .60,\r\n      },\r\n      style: ThresholdStyle.PERCENTAGE,\r\n    };\r\n  }\r\n\r\n  suggestions(when: When) {\r\n    when(this.suggestionThresholds)\r\n      .addSuggestion((suggest, actual, recommended) => suggest(<>You are casting <SpellLink id={SPELLS.FESTERING_STRIKE.id} /> too often. When spending runes remember to cast <SpellLink id={SPELLS.SCOURGE_STRIKE.id} /> instead on targets with more than three stacks of <SpellLink id={SPELLS.FESTERING_WOUND.id} /></>)\r\n        .icon(SPELLS.FESTERING_STRIKE.icon)\r\n        .actual(i18n._(t('deathknight.unholy.suggestions.festeringStrikes.efficiency')`${formatPercentage(actual)}% of Festering Strikes did not risk overcapping Festering Wounds`))\r\n        .recommended(`>${formatPercentage(recommended)}% is recommended`));\r\n  }\r\n\r\n  statistic() {\r\n    return (\r\n      <Statistic\r\n        tooltip={`${this.festeringStrikeCastsOverSafeCount} of out ${this.totalFesteringStrikeCasts} Festering Strikes were cast on a target with more than three stacks of Festering Wounds.`}\r\n        position={STATISTIC_ORDER.CORE(4)}\r\n        category={STATISTIC_CATEGORY.GENERAL}\r\n        size=\"flexible\"\r\n      >\r\n        <BoringSpellValueText spell={SPELLS.FESTERING_STRIKE}>\r\n          <>\r\n            {formatPercentage(this.strikeEfficiency)}% <small>efficiency</small>\r\n          </>\r\n        </BoringSpellValueText>\r\n      </Statistic>\r\n    );\r\n  }\r\n}\r\n\r\nexport default FesteringStrikeEfficiency;\r\n","import RESOURCE_TYPES from 'game/RESOURCE_TYPES';\r\n\r\nimport ResourceTracker from 'parser/shared/modules/resources/resourcetracker/ResourceTracker'\r\nimport { Options } from 'parser/core/Analyzer';\r\nimport { CastEvent } from 'parser/core/Events';\r\n\r\nclass RunicPowerTracker extends ResourceTracker {\r\n  constructor(options: Options) {\r\n    super(options);\r\n    this.resource = RESOURCE_TYPES.RUNIC_POWER;\r\n  }\r\n\r\n  getReducedCost(event: CastEvent) {\r\n    const cost = this.getResource(event)?.cost;\r\n    if (cost) {\r\n      return cost / 10;\r\n    }\r\n  }\r\n}\r\n\r\nexport default RunicPowerTracker;\r\n","import React from 'react';\r\n\r\nimport { formatPercentage } from 'common/format';\r\n\r\nimport Analyzer from 'parser/core/Analyzer';\r\nimport { ThresholdStyle, When } from 'parser/core/ParseResults';\r\nimport ResourceBreakdown from 'parser/shared/modules/resources/resourcetracker/ResourceBreakdown';\r\nimport Panel from 'interface/others/Panel';\r\n\r\nimport STATISTIC_ORDER from 'interface/others/STATISTIC_ORDER';\r\nimport Statistic from 'interface/statistics/Statistic';\r\n\r\nimport { i18n } from '@lingui/core';\r\nimport { t } from '@lingui/macro';\r\n\r\nimport BoringResourceValue from 'interface/statistics/components/BoringResourceValue';\r\nimport RESOURCE_TYPES from 'game/RESOURCE_TYPES';\r\n\r\nimport RunicPowerTracker from './RunicPowerTracker';\r\n\r\nclass RunicPowerDetails extends Analyzer {\r\n  static dependencies = {\r\n    runicPowerTracker: RunicPowerTracker,\r\n  };\r\n\r\n  protected runicPowerTracker!: RunicPowerTracker;\r\n\r\n  get wastedPercent() {\r\n    return this.runicPowerTracker.wasted / (this.runicPowerTracker.wasted + this.runicPowerTracker.generated) || 0;\r\n  }\r\n\r\n  get efficiencySuggestionThresholds() {\r\n    return {\r\n      actual: 1 - this.wastedPercent,\r\n      isLessThan: {\r\n        minor: 0.95,\r\n        average: 0.90,\r\n        major: .85,\r\n      },\r\n      style: ThresholdStyle.PERCENTAGE,\r\n    };\r\n  }\r\n\r\n  get suggestionThresholds() {\r\n    return {\r\n      actual: this.wastedPercent,\r\n      isGreaterThan: {\r\n        minor: 0.05,\r\n        average: 0.1,\r\n        major: .15,\r\n      },\r\n      style: ThresholdStyle.PERCENTAGE,\r\n    };\r\n  }\r\n\r\n  suggestions(when: When) {\r\n    when(this.suggestionThresholds).addSuggestion((suggest, actual, recommended) => suggest(`You wasted ${formatPercentage(this.wastedPercent)}% of your Runic Power.`)\r\n      .icon('inv_sword_62')\r\n      .actual(i18n._(t('deathknight.unholy.suggestions.runicPower.wasted')`${formatPercentage(actual)}% wasted`))\r\n      .recommended(`<${formatPercentage(recommended)}% is recommended`));\r\n  }\r\n\r\n  statistic() {\r\n    return (\r\n      <Statistic\r\n        position={STATISTIC_ORDER.CORE(3)}\r\n        size=\"small\"\r\n        tooltip={`${this.runicPowerTracker.wasted} out of ${this.runicPowerTracker.wasted + this.runicPowerTracker.generated} runic power wasted.`}\r\n      >\r\n        <BoringResourceValue\r\n          resource={RESOURCE_TYPES.RUNIC_POWER}\r\n          value={`${formatPercentage(this.wastedPercent)} %`}\r\n          label=\"Runic Power wasted\"\r\n        />\r\n      </Statistic>\r\n    );\r\n  }\r\n\r\n  tab() {\r\n    return {\r\n      title: 'Runic Power usage',\r\n      url: 'runic-power-usage',\r\n      render: () => (\r\n        <Panel>\r\n          <ResourceBreakdown\r\n            tracker={this.runicPowerTracker}\r\n            showSpenders\r\n          />\r\n        </Panel>\r\n      ),\r\n    };\r\n  }\r\n\r\n}\r\n\r\nexport default RunicPowerDetails;\r\n","import CoreRuneTracker from '../../../shared/RuneTracker';\r\n\r\nclass RuneTracker extends CoreRuneTracker{\r\n\r\n  get suggestionThresholds() {\r\n    return {\r\n      actual: 1 - this.runeEfficiency,\r\n      isGreaterThan: {\r\n        minor: 0.15,\r\n        average: 0.25,\r\n        major: 0.35,\r\n      },\r\n      style: 'percentage',\r\n    };\r\n  }\r\n\r\n  get suggestionThresholdsEfficiency() {\r\n    return {\r\n      actual: this.runeEfficiency,\r\n      isLessThan: {\r\n        minor: 0.85,\r\n        average: 0.75,\r\n        major: 0.65,\r\n      },\r\n      style: 'percentage',\r\n    };\r\n  }\r\n\r\n} \r\n\r\nexport default RuneTracker;\r\n","import React from 'react';\r\nimport PropTypes from 'prop-types';\r\n\r\nimport SPELLS from 'common/SPELLS';\r\nimport SpellLink from 'common/SpellLink';\r\n\r\nimport Checklist from 'parser/shared/modules/features/Checklist';\r\nimport Rule from 'parser/shared/modules/features/Checklist/Rule';\r\nimport Requirement from 'parser/shared/modules/features/Checklist/Requirement';\r\nimport PreparationRule from 'parser/shared/modules/features/Checklist/PreparationRule';\r\nimport GenericCastEfficiencyRequirement from 'parser/shared/modules/features/Checklist/GenericCastEfficiencyRequirement';\r\n\r\nconst UnholyDeathKnightChecklist = ({ combatant, castEfficiency, thresholds }) => {\r\n  const AbilityRequirement = (props) => (\r\n    <GenericCastEfficiencyRequirement\r\n      castEfficiency={castEfficiency.getCastEfficiencyForSpellId(props.spell)}\r\n      {...props}\r\n    />\r\n  );\r\n  AbilityRequirement.propTypes = {\r\n    spell: PropTypes.number.isRequired,\r\n  };\r\n\r\n  return (\r\n    <Checklist>\r\n      <Rule\r\n        name=\"Use cooldowns as often as possible\"\r\n        description={(\r\n          <>\r\n            You should aim to use your cooldowns as often as you can to maximize your damage output.\r\n            <a href=\"https://www.wowhead.com/unholy-death-knight-rotation-guide#cooldown-usage\" target=\"_blank\" rel=\"noopener noreferrer\">More info.</a>\r\n          </>\r\n        )}\r\n      >\r\n        <AbilityRequirement spell={SPELLS.APOCALYPSE.id} />\r\n        <AbilityRequirement spell={SPELLS.DARK_TRANSFORMATION.id} />\r\n        {combatant.hasTalent(SPELLS.SOUL_REAPER_TALENT.id) && <AbilityRequirement spell={SPELLS.SOUL_REAPER_TALENT.id} />}\r\n        {combatant.hasTalent(SPELLS.SUMMON_GARGOYLE_TALENT.id) && <AbilityRequirement spell={SPELLS.SUMMON_GARGOYLE_TALENT.id} />}\r\n        {combatant.hasTalent(SPELLS.UNHOLY_ASSAULT_TALENT.id) && <AbilityRequirement spell={SPELLS.UNHOLY_ASSAULT_TALENT.id} />}\r\n        {castEfficiency.getCastEfficiencyForSpellId(SPELLS.ARCANE_TORRENT_RUNIC_POWER.id) && (<AbilityRequirement spell={SPELLS.ARCANE_TORRENT_RUNIC_POWER.id} />)}\r\n        {combatant.hasTalent(SPELLS.UNHOLY_BLIGHT_TALENT.id) && <AbilityRequirement spell={SPELLS.UNHOLY_BLIGHT_TALENT.id} />}\r\n        {combatant.hasTalent(SPELLS.DEFILE_TALENT.id) && <AbilityRequirement spell={SPELLS.DEFILE_TALENT.id} />}\r\n\r\n      </Rule>\r\n      <Rule\r\n        name=\"Try to avoid being inactive for a large portion of the fight\"\r\n        description={(\r\n          <>\r\n            While some downtime is inevitable in fights with movement, you should aim to reduce downtime to prevent capping Runes.\r\n          </>\r\n        )}\r\n      >\r\n        <Requirement name=\"Downtime\" thresholds={thresholds.downtimeSuggestionThresholds} />\r\n      </Rule>\r\n      <Rule\r\n        name=\"Avoid capping Runes\"\r\n        description=\"Death Knights are a resource based class, relying on Runes and Runic Power to cast core abilities.  You can have up to three runes recharging at once.  You want to dump runes whenever you have 4 or more runes to make sure none are wasted\"\r\n      >\r\n        <Requirement name=\"Rune Efficiency\" thresholds={thresholds.runeEfficiency} />\r\n      </Rule>\r\n      <Rule\r\n        name=\"Avoid capping Runic Power\"\r\n        description={(<>Death Knights are a resource based class, relying on Runes and Runic Power to cast core abilities.  Cast <SpellLink id={SPELLS.DEATH_COIL.id} /> when you have 72 or more Runic Power to avoid overcapping.</>)}\r\n      >\r\n        <Requirement name=\"Runic Power Efficiency\" thresholds={thresholds.runicPowerEfficiency} />\r\n      </Rule>\r\n      <PreparationRule thresholds={thresholds} />\r\n    </Checklist>\r\n  );\r\n};\r\n\r\nUnholyDeathKnightChecklist.propTypes = {\r\n  castEfficiency: PropTypes.object.isRequired,\r\n  combatant: PropTypes.shape({\r\n    hasTalent: PropTypes.func.isRequired,\r\n  }).isRequired,\r\n  thresholds: PropTypes.object.isRequired,\r\n};\r\n\r\nexport default UnholyDeathKnightChecklist;\r\n","import React from 'react';\r\n\r\nimport BaseModule from 'parser/shared/modules/features/Checklist/Module';\r\nimport CastEfficiency from 'parser/shared/modules/CastEfficiency';\r\nimport Combatants from 'parser/shared/modules/Combatants';\r\nimport PreparationRuleAnalyzer from 'parser/shared/modules/features/Checklist/PreparationRuleAnalyzer';\r\n\r\nimport AlwaysBeCasting from '../AlwaysBeCasting';\r\nimport RunicPowerDetails from '../../runicpower/RunicPowerDetails';\r\nimport RuneTracker from '../RuneTracker';\r\n\r\nimport Component from './Component';\r\n\r\nclass Checklist extends BaseModule {\r\n  static dependencies = {\r\n    combatants: Combatants,\r\n    castEfficiency: CastEfficiency,\r\n    alwaysBeCasting: AlwaysBeCasting,\r\n    preparationRuleAnalyzer: PreparationRuleAnalyzer,\r\n    runicPowerDetails: RunicPowerDetails,\r\n    runeTracker: RuneTracker,\r\n  };\r\n\r\n  protected combatants!: Combatants;\r\n  protected castEfficiency!: CastEfficiency;\r\n  protected preparationRuleAnalyzer!: PreparationRuleAnalyzer;\r\n  protected alwaysBeCasting!: AlwaysBeCasting;\r\n  protected runeTracker!: RuneTracker;\r\n  protected runicPowerDetails!: RunicPowerDetails;\r\n\r\n  render() {\r\n    return (\r\n      <Component\r\n        combatant={this.combatants.selected}\r\n        castEfficiency={this.castEfficiency}\r\n        thresholds={{\r\n          ...this.preparationRuleAnalyzer.thresholds,\r\n          runeEfficiency: this.runeTracker.suggestionThresholdsEfficiency,\r\n          runicPowerEfficiency: this.runicPowerDetails.efficiencySuggestionThresholds,\r\n          downtimeSuggestionThresholds: this.alwaysBeCasting.downtimeSuggestionThresholds,\r\n        }}\r\n      />\r\n    );\r\n  }\r\n}\r\n\r\nexport default Checklist;\r\n","import React from 'react';\r\n\r\nimport { i18n } from '@lingui/core';\r\nimport { t } from '@lingui/macro';\r\n\r\nimport SPELLS from 'common/SPELLS';\r\nimport Spell from 'common/SPELLS/Spell';\r\nimport SpellLink from 'common/SpellLink';\r\nimport { formatPercentage } from 'common/format';\r\n\r\nimport Analyzer, { Options, SELECTED_PLAYER } from 'parser/core/Analyzer';\r\nimport Events, { CastEvent } from 'parser/core/Events';\r\nimport { encodeTargetString } from 'parser/shared/modules/EnemyInstances';\r\nimport { STATISTIC_ORDER } from 'interface/others/StatisticBox';\r\nimport { ThresholdStyle, When } from 'parser/core/ParseResults';\r\nimport STATISTIC_CATEGORY from 'interface/others/STATISTIC_CATEGORY';\r\nimport Statistic from 'interface/statistics/Statistic';\r\n\r\nimport BoringSpellValueText from 'interface/statistics/components/BoringSpellValueText';\r\n\r\nimport WoundTracker from './WoundTracker';\r\n\r\nclass ScourgeStrikeEfficiency extends Analyzer {\r\n  static dependencies = {\r\n    woundTracker: WoundTracker,\r\n  };\r\n\r\n  protected woundTracker!: WoundTracker;\r\n\r\n  constructor(options: Options) {\r\n    super(options);\r\n    this.activeSpell = this.selectedCombatant.hasTalent(SPELLS.CLAWING_SHADOWS_TALENT.id) ? SPELLS.CLAWING_SHADOWS_TALENT : SPELLS.SCOURGE_STRIKE;\r\n\r\n    this.addEventListener(Events.cast.by(SELECTED_PLAYER).spell(this.activeSpell), this.onCast);\r\n  }\r\n\r\n  activeSpell: Spell;\r\n  totalCasts = 0;\r\n  zeroWoundCasts = 0;\r\n\r\n  onCast(event: CastEvent) {\r\n    this.totalCasts += 1;\r\n    const targetString = encodeTargetString(event.targetID, event.targetInstance);\r\n\r\n    if (this.woundTracker.targets[targetString]) {\r\n      const currentTargetWounds = this.woundTracker.targets[targetString];\r\n      if (currentTargetWounds < 1) {\r\n        this.zeroWoundCasts += 1;\r\n      }\r\n    } else {\r\n      this.zeroWoundCasts += 1;\r\n    }\r\n  }\r\n\r\n  get strikeEfficiency() {\r\n    return 1 - (this.zeroWoundCasts / this.totalCasts);\r\n  }\r\n\r\n  get suggestionThresholds() {\r\n    return {\r\n      actual: this.strikeEfficiency,\r\n      isLessThan: {\r\n        minor: .80,\r\n        average: .70,\r\n        major: .60,\r\n      },\r\n      style: ThresholdStyle.PERCENTAGE,\r\n    };\r\n  }\r\n\r\n  suggestions(when: When) {\r\n    when(this.suggestionThresholds)\r\n      .addSuggestion((suggest, actual, recommended) => suggest(<>You are casting <SpellLink id={this.activeSpell.id} /> too often. When spending runes remember to cast <SpellLink id={this.activeSpell.id} /> instead on targets with no stacks of <SpellLink id={this.activeSpell.id} /></>)\r\n        .icon(this.activeSpell.icon)\r\n        .actual(i18n._(t('deathknight.unholy.suggestions.scourgeStrike.efficiency')`${formatPercentage(actual)}% of ${this.activeSpell.name} were used with Wounds on the target`))\r\n        .recommended(`>${formatPercentage(recommended)}% is recommended`));\r\n  }\r\n\r\n  statistic() {\r\n    return (\r\n      <Statistic\r\n        tooltip={`${this.zeroWoundCasts} out of ${this.totalCasts} ${this.activeSpell.name} were used with no Festering Wounds on the target.`}\r\n        position={STATISTIC_ORDER.CORE(3)}\r\n        category={STATISTIC_CATEGORY.GENERAL}\r\n        size=\"flexible\"\r\n      >\r\n        <BoringSpellValueText spell={SPELLS.SCOURGE_STRIKE}>\r\n          <>\r\n            {formatPercentage(this.strikeEfficiency)}% <small>efficiency</small>\r\n          </>\r\n        </BoringSpellValueText>\r\n      </Statistic>\r\n    );\r\n  }\r\n}\r\n\r\nexport default ScourgeStrikeEfficiency;\r\n","import React from 'react';\r\n\r\nimport SPELLS from 'common/SPELLS';\r\nimport SpellLink from 'common/SpellLink';\r\n\r\nimport Analyzer, { Options, SELECTED_PLAYER } from 'parser/core/Analyzer';\r\nimport Events, { CastEvent } from 'parser/core/Events';\r\nimport { When } from 'parser/core/ParseResults';\r\nimport EnemyInstances from 'parser/shared/modules/EnemyInstances';\r\nimport STATISTIC_ORDER from 'interface/others/STATISTIC_ORDER';\r\nimport Statistic from 'interface/statistics/Statistic';\r\nimport BoringSpellValueText from 'interface/statistics/components/BoringSpellValueText';\r\n\r\nimport { i18n } from '@lingui/core';\r\nimport { t } from '@lingui/macro';\r\n\r\nclass Apocalypse extends Analyzer {\r\n  static dependencies = {\r\n    enemies: EnemyInstances,\r\n  };\r\n\r\n  protected enemies!: EnemyInstances;\r\n\r\n  totalApocalypseCasts = 0;\r\n  apocalypseWoundsPopped = 0;\r\n\r\n  constructor(options: Options) {\r\n    super(options);\r\n\r\n    this.addEventListener(Events.cast.by(SELECTED_PLAYER).spell(SPELLS.APOCALYPSE), this.onCast);\r\n  }\r\n\r\n  //Logic that both counts the amount of Apocalypse cast by the player, as well as the amount of wounds popped by those apocalypse.\r\n  onCast(event: CastEvent) {\r\n    this.totalApocalypseCasts += 1;\r\n    const target = this.enemies.getEntity(event);\r\n    const currentTargetWounds = target && target.hasBuff(SPELLS.FESTERING_WOUND.id) ? target.getBuff(SPELLS.FESTERING_WOUND.id).stacks : 0;\r\n    if (currentTargetWounds > 4) {\r\n      this.apocalypseWoundsPopped = this.apocalypseWoundsPopped + 4;\r\n    } else {\r\n      this.apocalypseWoundsPopped = this.apocalypseWoundsPopped + currentTargetWounds;\r\n    }\r\n  }\r\n\r\n  suggestions(when: When) {\r\n    const averageWoundsPopped = Number((this.apocalypseWoundsPopped / this.totalApocalypseCasts).toFixed(1));\r\n    //Getting 6 wounds on every Apocalypse isn't difficult and should be expected\r\n    when(averageWoundsPopped).isLessThan(4)\r\n      .addSuggestion((suggest, actual, recommended) => suggest(<span>You are casting <SpellLink id={SPELLS.APOCALYPSE.id} /> with too few <SpellLink id={SPELLS.FESTERING_WOUND.id} /> on the target. When casting <SpellLink id={SPELLS.APOCALYPSE.id} />, make sure to have at least 4 <SpellLink id={SPELLS.FESTERING_WOUND.id} /> on the target.</span>)\r\n          .icon(SPELLS.APOCALYPSE.icon)\r\n          .actual(i18n._(t('deathknight.unholy.suggestions.apocalypse.efficiency')`An average ${(actual)} of Festering Wounds were popped by Apocalypse`))\r\n          .recommended(`${(recommended)} is recommended`)\r\n          .regular(recommended - 1).major(recommended - 2));\r\n  }\r\n\r\n  statistic() {\r\n    const averageWoundsPopped = (this.apocalypseWoundsPopped / this.totalApocalypseCasts).toFixed(1);\r\n    return (\r\n      <Statistic\r\n        tooltip={`You popped ${this.apocalypseWoundsPopped} wounds with ${this.totalApocalypseCasts} casts of Apocalypse.`}\r\n        position={STATISTIC_ORDER.CORE(6)}\r\n        size=\"flexible\"\r\n      >\r\n        <BoringSpellValueText spell={SPELLS.APOCALYPSE}>\r\n          <>\r\n            {averageWoundsPopped} <small>average Wounds popped</small>\r\n          </>\r\n        </BoringSpellValueText>\r\n      </Statistic>\r\n    );\r\n  }\r\n}\r\n\r\nexport default Apocalypse;\r\n","import React from 'react';\r\n\r\nimport SPELLS from 'common/SPELLS';\r\nimport SpellLink from 'common/SpellLink';\r\n\r\nimport Analyzer, { Options, SELECTED_PLAYER } from 'parser/core/Analyzer';\r\nimport Events, { ApplyDebuffEvent, CastEvent, RefreshDebuffEvent } from 'parser/core/Events';\r\nimport { ThresholdStyle, When } from 'parser/core/ParseResults';\r\nimport Enemies from 'parser/shared/modules/Enemies';\r\nimport { encodeTargetString } from 'parser/shared/modules/EnemyInstances';\r\nimport STATISTIC_ORDER from 'interface/others/STATISTIC_ORDER';\r\nimport Statistic from 'interface/statistics/Statistic';\r\nimport BoringSpellValueText from 'interface/statistics/components/BoringSpellValueText';\r\n\r\nimport { i18n } from '@lingui/core';\r\nimport { t } from '@lingui/macro';\r\nimport { formatPercentage } from 'common/format';\r\nimport UptimeIcon from 'interface/icons/Uptime';\r\n\r\nclass VirulentPlagueEfficiency extends Analyzer {\r\n  static dependencies = {\r\n    enemies: Enemies,\r\n  };\r\n\r\n  constructor(options: Options) {\r\n    super(options);\r\n\r\n    this.addEventListener(Events.refreshdebuff.by(SELECTED_PLAYER).spell(SPELLS.VIRULENT_PLAGUE), this.onRefresh);\r\n    this.addEventListener(Events.applydebuff.by(SELECTED_PLAYER).spell(SPELLS.VIRULENT_PLAGUE), this.onApply);\r\n    this.addEventListener(Events.cast.by(SELECTED_PLAYER).spell(SPELLS.OUTBREAK), this.onCastOutbreak);\r\n  }\r\n\r\n  targets: { [key: string]: number } = {};\r\n\r\n  totalOutBreakCasts = 0;\r\n  totalTimeWasted = 0;\r\n  protected enemies!: Enemies;\r\n\r\n  get Uptime() {\r\n    return this.enemies.getBuffUptime(SPELLS.VIRULENT_PLAGUE.id) / this.owner.fightDuration;\r\n  }\r\n\r\n  get UptimeSuggestionThresholds() {\r\n    return {\r\n      actual: this.Uptime,\r\n      isLessThan: {\r\n        minor: 0.92,\r\n        average: 0.84,\r\n        major: .74,\r\n      },\r\n      style: ThresholdStyle.PERCENTAGE,\r\n    };\r\n  }\r\n\r\n  get VirulentDuration() {\r\n    return this.selectedCombatant.hasTalent(SPELLS.EBON_FEVER_TALENT.id) ? 13.65 : 27.3;\r\n  }\r\n\r\n  onRefresh(event: RefreshDebuffEvent) {\r\n    this.targets[encodeTargetString(event.targetID, event.targetInstance)] = event.timestamp + 1000 * this.VirulentDuration;\r\n  }\r\n\r\n  onApply(event: ApplyDebuffEvent) {\r\n    this.targets[encodeTargetString(event.targetID, event.targetInstance)] = event.timestamp + 1000 * this.VirulentDuration - 1000 * 0.3 * this.VirulentDuration;\r\n    //Removing 3.15 seconds when buff is only applied. This is for cases when the target does not benefit from the epidemic effect (Dots spreading to adds not staying by target for instance.)\r\n  }\r\n\r\n  onCastOutbreak(event: CastEvent) {\r\n    this.totalOutBreakCasts += 1;\r\n    if (this.targets[encodeTargetString(event.targetID, event.targetInstance)]) {\r\n      //We subtract 6 seconds from the total duration since this is the time left after Outbreak finishes.\r\n      if (((this.targets[encodeTargetString(event.targetID, event.targetInstance)]) - event.timestamp) >= 0) {\r\n        this.totalTimeWasted += ((this.targets[encodeTargetString(event.targetID, event.targetInstance)]) - event.timestamp) / 1000;\r\n      }\r\n    }\r\n  }\r\n\r\n  get averageTimeWasted() {\r\n    return this.totalOutBreakCasts !== 0 ? (this.totalTimeWasted / this.totalOutBreakCasts) : 0;\r\n  }\r\n\r\n  get suggestionThresholds() {\r\n    return {\r\n      actual: this.averageTimeWasted,\r\n      isGreaterThan: {\r\n        minor: 1,\r\n        average: 3,\r\n        major: 5,\r\n      },\r\n      style: ThresholdStyle.NUMBER,\r\n      suffix: 'Average',\r\n    };\r\n  }\r\n\r\n  suggestions(when: When) {\r\n    when(this.suggestionThresholds)\r\n      .addSuggestion((suggest, actual, recommended) => suggest(<> You are casting <SpellLink id={SPELLS.VIRULENT_PLAGUE.id} /> too often. Try to cast <SpellLink id={SPELLS.VIRULENT_PLAGUE.id} /> as close to it falling off as possible.</>)\r\n          .icon(SPELLS.VIRULENT_PLAGUE.icon)\r\n          .actual(i18n._(t('deathknight.unholy.suggestions.virulentPlague.efficiency')`${(this.averageTimeWasted).toFixed(1)} seconds of Virulent Plague uptime was wasted on average for each cast of Outbreak`))\r\n          .recommended(`<${recommended} is recommended`));\r\n    when(this.UptimeSuggestionThresholds)\r\n      .addSuggestion((suggest, actual, recommended) => suggest(<span>Your <SpellLink id={SPELLS.VIRULENT_PLAGUE.id} /> uptime can be improved. Try to pay attention to when Virulent Plague is about to fall off the priority target, using <SpellLink id={SPELLS.OUTBREAK.id} /> to refresh Virulent Plague. Using a debuff tracker can help.</span>)\r\n        .icon(SPELLS.VIRULENT_PLAGUE.icon)\r\n        .actual(i18n._(t('deathknight.unholy.suggestions.virulentPlague.uptime')`${formatPercentage(actual)}% Virulent Plague uptime`))\r\n        .recommended(`>${formatPercentage(recommended)}% is recommended`));\r\n  }\r\n\r\n  statistic() {\r\n    return (\r\n      <Statistic\r\n        tooltip={`A total amount of ${this.totalTimeWasted.toFixed(1)} seconds of Virulent Plague uptime was wasted with an average amount of ${(this.averageTimeWasted).toFixed(1)} seconds per cast`}\r\n        position={STATISTIC_ORDER.CORE(7)}\r\n        size=\"flexible\"\r\n      >\r\n        <BoringSpellValueText spell={SPELLS.VIRULENT_PLAGUE}>\r\n          <>\r\n            <UptimeIcon /> {formatPercentage(this.Uptime)}% <small>uptime</small><br/>\r\n            {(this.averageTimeWasted).toFixed(1)}s <small>average duration wasted</small>\r\n          </>\r\n        </BoringSpellValueText>\r\n      </Statistic>\r\n    );\r\n  }\r\n}\r\n\r\nexport default VirulentPlagueEfficiency;\r\n","import SPELLS from 'common/SPELLS';\r\nimport CoreSpellUsable from 'parser/shared/modules/SpellUsable';\r\nimport Events, { DamageEvent } from 'parser/core/Events';\r\nimport { Options, SELECTED_PLAYER, SELECTED_PLAYER_PET } from 'parser/core/Analyzer';\r\n\r\nconst AOTD_PET_ID = 365;\r\nconst DEATH_COIL_RANK_2_REDUCTION = 1000;\r\nconst AOTD_APOCALYPSE_REDUCTION = 1000;\r\n\r\nclass SpellUsable extends CoreSpellUsable {\r\n  static dependencies = {\r\n    ...CoreSpellUsable.dependencies,\r\n  };\r\n\r\n  hasAotd: boolean;\r\n\r\n  constructor(options: Options) {\r\n    super(options);\r\n    this.hasAotd = this.selectedCombatant.hasTalent(SPELLS.ARMY_OF_THE_DAMNED_TALENT.id);\r\n\r\n    this.addEventListener(Events.damage.by(SELECTED_PLAYER).spell(SPELLS.DEATH_COIL), this.onDeathCoilDamage);\r\n    this.addEventListener(Events.damage.by(SELECTED_PLAYER_PET).spell(SPELLS.MELEE), this.onArmyDamage)\r\n  }\r\n\r\n  onArmyDamage(event: DamageEvent) {\r\n    if (event.sourceID !== AOTD_PET_ID) {\r\n      return;\r\n    }\r\n\r\n    if (!this.isOnCooldown(SPELLS.ARMY_OF_THE_DEAD.id)) {\r\n      this.beginCooldown(SPELLS.ARMY_OF_THE_DEAD.id, event);\r\n    }\r\n  }\r\n  \r\n  onDeathCoilDamage(event: DamageEvent) {\r\n    if (this.isOnCooldown(SPELLS.DARK_TRANSFORMATION.id)) {\r\n      this.reduceCooldown(SPELLS.DARK_TRANSFORMATION.id, DEATH_COIL_RANK_2_REDUCTION, event.timestamp);\r\n    }\r\n    \r\n    if (this.hasAotd && this.isOnCooldown(SPELLS.APOCALYPSE.id)) {\r\n      this.reduceCooldown(SPELLS.APOCALYPSE.id, AOTD_APOCALYPSE_REDUCTION, event.timestamp);\r\n    }\r\n  }\r\n}\r\n\r\nexport default SpellUsable;\r\n","import React from 'react';\r\n\r\nimport { Options, SELECTED_PLAYER } from 'parser/core/Analyzer';\r\nimport Abilities from 'parser/core/modules/Abilities';\r\nimport SPELLS from 'common/SPELLS';\r\nimport STATISTIC_ORDER from 'interface/others/STATISTIC_ORDER';\r\nimport Events, { FightEndEvent } from 'parser/core/Events';\r\nimport Statistic from 'interface/statistics/Statistic';\r\nimport STATISTIC_CATEGORY from 'interface/others/STATISTIC_CATEGORY';\r\nimport BoringSpellValueText from 'interface/statistics/components/BoringSpellValueText';\r\nimport ItemDamageDone from 'interface/ItemDamageDone';\r\nimport ExecuteHelper from 'parser/shared/ExecuteHelper';\r\n\r\nconst SOUL_REAPER_EXECUTE_RANGE = .35\r\n\r\nclass SoulReaper extends ExecuteHelper {\r\n  static executeSources = SELECTED_PLAYER;\r\n  static lowerThreshold = SOUL_REAPER_EXECUTE_RANGE;\r\n\r\n  static dependencies = {\r\n    ...ExecuteHelper.dependencies,\r\n    abilities: Abilities,\r\n  };\r\n\r\n  maxCasts: number = 0;\r\n\r\n  protected abilities!: Abilities;\r\n\r\n  constructor(options: Options) {\r\n    super(options);\r\n\r\n    this.addEventListener(Events.fightend, this.adjustMaxCasts);\r\n    const ctor = this.constructor as typeof ExecuteHelper;\r\n    ctor.executeSpells.push(SPELLS.SOUL_REAPER_TALENT);\r\n\r\n    (options.abilities as Abilities).add({\r\n      spell: SPELLS.SOUL_REAPER_TALENT,\r\n      category: Abilities.SPELL_CATEGORIES.ROTATIONAL,\r\n      cooldown: 6,\r\n      gcd: {\r\n        base: 1500,\r\n      },\r\n      castEfficiency: {\r\n        suggestion: true,\r\n        recommendedEfficiency: 0.85,\r\n        maxCasts: () => this.maxCasts,\r\n      },\r\n    });\r\n  }\r\n\r\n  adjustMaxCasts(event: FightEndEvent) {\r\n    super.onFightEnd(event)\r\n    this.maxCasts += Math.ceil(this.totalExecuteDuration / 6000);\r\n  }\r\n\r\n  statistic() {\r\n    return (\r\n      <Statistic\r\n        position={STATISTIC_ORDER.OPTIONAL(30)}\r\n        size=\"flexible\"\r\n        category={STATISTIC_CATEGORY.TALENTS}\r\n      >\r\n        <BoringSpellValueText spell={SPELLS.SOUL_REAPER_TALENT}>\r\n          <>\r\n            <ItemDamageDone amount={this.damage} />\r\n          </>\r\n        </BoringSpellValueText>\r\n      </Statistic>\r\n    );\r\n  }\r\n}\r\n\r\nexport default SoulReaper;\r\n","import CoreCombatLogParser from 'parser/core/CombatLogParser';\r\nimport ArcaneTorrent from 'parser/shared/modules/racials/bloodelf/ArcaneTorrent';\r\n\r\nimport Abilities from './modules/features/Abilities';\r\nimport AlwaysBeCasting from './modules/features/AlwaysBeCasting';\r\nimport CooldownThroughputTracker from './modules/features/CooldownThroughputTracker';\r\nimport FesteringStrikeEfficiency from './modules/features/FesteringStrikeEfficiency';\r\nimport Checklist from './modules/features/checklist/Module';\r\nimport ScourgeStrikeEfficiency from './modules/features/ScourgeStrikeEfficiency';\r\nimport Apocalypse from './modules/features/Apocalypse';\r\nimport VirulentPlagueEfficiency from './modules/features/VirulentPlagueEfficiency';\r\nimport WoundTracker from './modules/features/WoundTracker';\r\nimport SpellUsable from './modules/features/SpellUsable'\r\n\r\nimport SoulReaper from './modules/talents/SoulReaper';\r\n\r\nimport RunicPowerDetails from './modules/runicpower/RunicPowerDetails';\r\nimport RunicPowerTracker from './modules/runicpower/RunicPowerTracker';\r\n\r\nimport RuneTracker from './modules/features/RuneTracker';\r\nimport RuneDetails from '../shared/RuneDetails';\r\n\r\n// Runes\r\nimport RuneOfTheFallenCrusader from '../shared/runeforges/RuneOfTheFallenCrusader';\r\nimport RuneOfHysteria from '../shared/runeforges/RuneOfHysteria';\r\n\r\nclass CombatLogParser extends CoreCombatLogParser {\r\n  static specModules = {\r\n    // Features\r\n    abilities: Abilities,\r\n    alwaysBeCasting: AlwaysBeCasting,\r\n    cooldownThroughputTracker: CooldownThroughputTracker,\r\n    festeringStrikeEfficiency: FesteringStrikeEfficiency,\r\n    checklist: Checklist,\r\n    scourgeStrikeEfficiency: ScourgeStrikeEfficiency,\r\n  \tapocalypse: Apocalypse,\r\n    virulentPlagueEfficiency: VirulentPlagueEfficiency,\r\n    woundTracker: WoundTracker,\r\n    spellUsable: SpellUsable,\r\n\r\n    // Talents\r\n    soulReaper: SoulReaper,\r\n\r\n    // RunicPower\r\n    runicPowerTracker: RunicPowerTracker,\r\n    runicPowerDetails: RunicPowerDetails,\r\n\r\n    //RuneTracker\r\n    runeTracker: RuneTracker,\r\n    runeDetails: RuneDetails,\r\n    \r\n    // Runes\r\n    runeOfTheFallenCrusader: RuneOfTheFallenCrusader,\r\n    runeOfHysteria: RuneOfHysteria,\r\n\r\n    arcaneTorrent: [ArcaneTorrent, { castEfficiency: 0.5 }] as const,\r\n  };\r\n}\r\n\r\nexport default CombatLogParser;\r\n","export default function calculateEffectiveDamage(event, increase) {\r\n  const raw = (event.amount || 0) + (event.absorbed || 0);\r\n  return raw - (raw / (1 + increase));\r\n}\r\n","import React from 'react';\r\n\r\n// https://thenounproject.com/term/duration/370713/\r\n// duration by Bohdan Burmich from the Noun Project\r\nconst Icon = ({ ...other }) => (\r\n  <svg xmlns=\"http://www.w3.org/2000/svg\" viewBox=\"10 10 80 80\" className=\"icon\" {...other}>\r\n    <path d=\"M50,86.4865c17.4361,0,31.6216-14.1855,31.6216-31.6216c0-16.6168-12.8865-30.2714-29.1892-31.5189v-4.9677h7.2973v-4.8649  H40.2703v4.8649h7.2973v4.9677c-16.3027,1.2475-29.1892,14.902-29.1892,31.5189C18.3784,72.3009,32.5639,86.4865,50,86.4865z M52.4324,28.2236c3.1101,0.2817,6.0664,1.0982,8.7798,2.356l-8.7798,15.2073V28.2236z M47.5676,28.2236v26.6412 c0,1.1008,0.7393,2.0647,1.8029,2.3497c0.209,0.0561,0.4205,0.0827,0.6295,0.0827c0.8533,0,1.6642-0.4504,2.1065-1.2162 l13.3146-23.0616c6.8507,4.8503,11.3357,12.8315,11.3357,21.8454c0,14.7537-12.0031,26.7567-26.7568,26.7567 s-26.7568-12.003-26.7568-26.7567C23.2432,40.9315,33.9501,29.4573,47.5676,28.2236z\" />\r\n  </svg>\r\n);\r\n\r\nexport default Icon;\r\n","import Events, { ApplyBuffEvent, DamageEvent, FightEndEvent, RemoveBuffEvent } from 'parser/core/Events';\r\nimport Analyzer, { Options } from 'parser/core/Analyzer';\r\nimport { formatDuration } from 'common/format';\r\nimport calculateEffectiveDamage from 'parser/core/calculateEffectiveDamage';\r\nimport Spell from 'common/SPELLS/Spell';\r\nimport SpellUsable from 'parser/shared/modules/SpellUsable';\r\n\r\nconst debug = false;\r\n\r\nconst MS_BUFFER = 500;\r\n\r\nclass ExecuteHelper extends Analyzer {\r\n  static dependencies = {\r\n    spellUsable: SpellUsable,\r\n  };\r\n\r\n  protected spellUsable!: SpellUsable;\r\n\r\n  //region IMPLEMENTME statics\r\n  /**\r\n   * Array of objects from common/SPELLS\r\n   * This should contain any execute spells such as Kill Shot, Execute etc.\r\n   */\r\n  static executeSpells: Spell[] = [];\r\n\r\n  /**\r\n   * SELECTED_PLAYER or SELECTED_PLAYER_PET for usage in the eventfilter\r\n   */\r\n  static executeSources: number;\r\n\r\n  /**\r\n   * Array of objects from common/SPELLS\r\n   * This should contain any SPELLS object that allows execute to be used outside normal execute range\r\n   */\r\n  static executeOutsideRangeEnablers: Spell[] = [];\r\n\r\n  /**\r\n   * The lower threshold where execute is enabled, shown in decimals.\r\n   */\r\n  static lowerThreshold: number;\r\n\r\n  /**\r\n   * The upper threshold where an execute can be enabled immediately at a pull, shown in decimals.\r\n   */\r\n  static upperThreshold: number;\r\n\r\n  /**\r\n   * A boolean representing if the given execute modifies the damage of an existing spell.\r\n   * An execute spell should be labelled as false, whereas a talent that modifies an existing spell should be labelled as true.\r\n   */\r\n  static modifiesDamage: boolean;\r\n\r\n  /**\r\n   * represents the modifier of of a talent (or some other effect) that modifies the damage done by an existing spell\r\n   */\r\n  static damageModifier: number;\r\n  //endregion\r\n\r\n  //region Generic Variables\r\n  /**\r\n   * Is true if we're in an execute window either because of a buff giving access to execute spells or because of health windows\r\n   */\r\n  inExecuteWindow: boolean = false;\r\n\r\n  /**\r\n   * Is true if we're in an execute window due to health on a target, so a buff granting access to execute is pointless at this point\r\n   */\r\n  inHealthExecuteWindow: boolean = false;\r\n\r\n  /**\r\n   * A variable marking the timestamp of the start of the current execute window\r\n   */\r\n  executeWindowStart: number = 0;\r\n\r\n  /**\r\n   * A variable marking the timestamp of the last damage event within the execute window\r\n   */\r\n  lastExecuteHitTimestamp: number = 0;\r\n\r\n  /**\r\n   * The amount of time spent inside executewindows, either caused by health or by buffs giving access to execute\r\n   */\r\n  totalExecuteWindowDuration: number = 0;\r\n\r\n  /**\r\n   * Amount of damage done by the spells defined in executeSpells\r\n   */\r\n  damage: number = 0;\r\n\r\n  /**\r\n   * returns the total amount of casts of the executes listed in executeSpells\r\n   */\r\n  casts: number = 0;\r\n\r\n  /**\r\n   * returns the amount of casts of the executes listed in executeSpells that were cast whilst being in an execute window\r\n   */\r\n  castsWithExecute: number = 0;\r\n  //endregion\r\n\r\n  //region Execute helpers\r\n  /**\r\n   * Returns true if the event has less HP than the threshold.\r\n   * This is useful for any generic execute.\r\n   * @param event\r\n   */\r\n  isTargetInExecuteRange(event: DamageEvent) {\r\n    if (!event.hitPoints || !event.maxHitPoints) {\r\n      return false;\r\n    }\r\n    return (event.hitPoints / event.maxHitPoints) < this.lowerThreshold;\r\n  }\r\n\r\n  /**\r\n   * Returns true if the event has more HP than the threshold.\r\n   * This is useful for things like Firestarter and Flashpoint.\r\n   * @param event\r\n   */\r\n  isTargetInReverseExecuteRange(event: DamageEvent) {\r\n    if (!event.hitPoints || !event.maxHitPoints) {\r\n      return false;\r\n    }\r\n    return (event.hitPoints / event.maxHitPoints) > this.upperThreshold;\r\n  }\r\n\r\n  /**\r\n   * Returns true if either isTargetInExecuteRange() or isTargetInReverseExecuteRange() is true.\r\n   * @param event\r\n   */\r\n  isTargetInHealthExecuteWindow(event: DamageEvent) {\r\n    if (!event.hitPoints || !event.maxHitPoints) {\r\n      return false;\r\n    }\r\n    return (this.isTargetInExecuteRange(event) || this.isTargetInReverseExecuteRange(event));\r\n  }\r\n\r\n  /**\r\n   * Returns true if the combatant has one of the buffs that enable execute to be used outside of the regular execute windows\r\n   */\r\n  get isExecuteUsableOutsideExecuteRange() {\r\n    let usable: boolean = false;\r\n    this.executeOutsideRangeEnablers.forEach(spell => {\r\n      if (this.selectedCombatant.hasBuff(spell.id)) {\r\n        usable = true;\r\n      }\r\n    });\r\n    return usable;\r\n  }\r\n\r\n  /**\r\n   * If all execute spells are on cooldown, then we should count the entire period of cooldown as \"inside execute\" to properly calculate maxCasts\r\n   */\r\n  get areExecuteSpellsOnCD() {\r\n    let allOnCD: boolean = true;\r\n    this.executeSpells.forEach(spell => {\r\n      if (!this.spellUsable.isOnCooldown(spell.id)) {\r\n        allOnCD = false;\r\n      }\r\n    });\r\n    return allOnCD;\r\n  }\r\n\r\n  //endregion\r\n\r\n  constructor(options: Options) {\r\n    super(options);\r\n    this.addEventListener(Events.damage.by(this.executeSources), this.onGeneralDamage);\r\n    this.addEventListener(Events.cast.by(this.executeSources).spell(this.executeSpells), this.onExecuteCast);\r\n    this.addEventListener(Events.damage.by(this.executeSources).spell(this.executeSpells), this.onExecuteDamage);\r\n    this.addEventListener(Events.applybuff.to(this.executeSources).spell(this.executeOutsideRangeEnablers), this.applyExecuteEnablerBuff);\r\n    this.addEventListener(Events.removebuff.to(this.executeSources).spell(this.executeOutsideRangeEnablers), this.removeExecuteEnablerBuff);\r\n    this.addEventListener(Events.fightend, this.onFightEnd);\r\n  }\r\n\r\n  //region Static Getters\r\n  get executeSources() {\r\n    const ctor = this.constructor as typeof ExecuteHelper;\r\n    return ctor.executeSources;\r\n  }\r\n\r\n  get executeSpells() {\r\n    const ctor = this.constructor as typeof ExecuteHelper;\r\n    return ctor.executeSpells;\r\n  }\r\n\r\n  get executeOutsideRangeEnablers() {\r\n    const ctor = this.constructor as typeof ExecuteHelper;\r\n    return ctor.executeOutsideRangeEnablers;\r\n  }\r\n\r\n  get lowerThreshold() {\r\n    const ctor = this.constructor as typeof ExecuteHelper;\r\n    return ctor.lowerThreshold;\r\n  }\r\n\r\n  get upperThreshold() {\r\n    const ctor = this.constructor as typeof ExecuteHelper;\r\n    return ctor.upperThreshold;\r\n  }\r\n\r\n  get modifiesDamage() {\r\n    const ctor = this.constructor as typeof ExecuteHelper;\r\n    return ctor.modifiesDamage;\r\n  }\r\n\r\n  get damageModifier() {\r\n    const ctor = this.constructor as typeof ExecuteHelper;\r\n    return ctor.damageModifier;\r\n  }\r\n\r\n  //endregion\r\n\r\n  //region Generic Getters\r\n  get executeDamage() {\r\n    return this.damage;\r\n  }\r\n\r\n  get totalExecuteDuration() {\r\n    return this.totalExecuteWindowDuration;\r\n  }\r\n\r\n  get totalCasts() {\r\n    return this.casts;\r\n  }\r\n\r\n  get totalExecuteCasts() {\r\n    return this.castsWithExecute;\r\n  }\r\n\r\n  //endregion\r\n\r\n  //region Event Listener functions\r\n  onGeneralDamage(event: DamageEvent) {\r\n    if (event.targetIsFriendly) {\r\n      return;\r\n    }\r\n    if (this.areExecuteSpellsOnCD || this.isExecuteUsableOutsideExecuteRange || this.isTargetInHealthExecuteWindow(event)) {\r\n      this.lastExecuteHitTimestamp = event.timestamp;\r\n      if (!this.inExecuteWindow) {\r\n        this.inExecuteWindow = true;\r\n        this.inHealthExecuteWindow = true;\r\n        this.executeWindowStart = event.timestamp;\r\n        debug && console.log('Execute window started');\r\n      }\r\n    } else {\r\n      if (this.inExecuteWindow && event.timestamp > this.lastExecuteHitTimestamp + MS_BUFFER) {\r\n        this.inExecuteWindow = false;\r\n        this.inHealthExecuteWindow = false;\r\n        this.totalExecuteWindowDuration += event.timestamp - this.executeWindowStart;\r\n        debug && console.log('Execute window ended, current total: ', this.totalExecuteDuration);\r\n      }\r\n    }\r\n  }\r\n\r\n  onExecuteCast() {\r\n    this.casts += 1;\r\n    if (this.inExecuteWindow || this.inHealthExecuteWindow) {\r\n      this.castsWithExecute += 1;\r\n    }\r\n  }\r\n\r\n  onExecuteDamage(event: DamageEvent) {\r\n    if (this.inExecuteWindow || this.inHealthExecuteWindow) {\r\n      if (this.modifiesDamage) {\r\n        this.damage += calculateEffectiveDamage(event, this.damageModifier);\r\n      } else {\r\n        this.damage += event.amount + (event.absorbed || 0);\r\n      }\r\n    }\r\n  }\r\n\r\n  applyExecuteEnablerBuff(event: ApplyBuffEvent) {\r\n    if (!this.inExecuteWindow && !this.inHealthExecuteWindow) {\r\n      this.executeWindowStart = event.timestamp;\r\n    }\r\n    this.inExecuteWindow = true;\r\n    this.lastExecuteHitTimestamp = event.timestamp;\r\n    debug && console.log(event.ability.name, ' was applied starting the execute window');\r\n  }\r\n\r\n  removeExecuteEnablerBuff(event: RemoveBuffEvent) {\r\n    if (!this.inHealthExecuteWindow) {\r\n      this.inExecuteWindow = false;\r\n      this.totalExecuteWindowDuration += event.timestamp - this.executeWindowStart;\r\n      debug && console.log(event.ability.name, ' was removed ending the execute window, current total: ', this.totalExecuteDuration);\r\n    } else {\r\n      debug && console.log('Execute enabler buff ended, but inside execute health window so window still ongoing.');\r\n    }\r\n  }\r\n\r\n  onFightEnd(event: FightEndEvent) {\r\n    if (this.inExecuteWindow) {\r\n      this.totalExecuteWindowDuration += event.timestamp - this.executeWindowStart;\r\n      this.inExecuteWindow = false;\r\n    }\r\n    debug && console.log('Fight ended, total duration of execute: ' + this.totalExecuteDuration + ' | ' + formatDuration(this.totalExecuteDuration));\r\n  }\r\n\r\n  //endregion\r\n}\r\n\r\nexport default ExecuteHelper;\r\n","import { ApplyBuffEvent, ApplyBuffStackEvent, ApplyDebuffEvent, ApplyDebuffStackEvent, EventType, RemoveBuffEvent, RemoveBuffStackEvent, RemoveDebuffEvent, RemoveDebuffStackEvent } from 'parser/core/Events';\r\n\r\n/**\r\n * Returns the current stacks on a given event\r\n * @param event\r\n */\r\nexport function currentStacks(event: RemoveBuffEvent | RemoveDebuffEvent | ApplyBuffEvent | ApplyDebuffEvent | ApplyBuffStackEvent | RemoveBuffStackEvent | ApplyDebuffStackEvent | RemoveDebuffStackEvent) {\r\n  switch (event.type) {\r\n    case EventType.RemoveBuff:\r\n    case EventType.RemoveDebuff:\r\n      return 0;\r\n    case EventType.ApplyBuff:\r\n    case EventType.ApplyDebuff:\r\n      return 1;\r\n    case EventType.ApplyBuffStack:\r\n    case EventType.RemoveBuffStack:\r\n    case EventType.ApplyDebuffStack:\r\n    case EventType.RemoveDebuffStack:\r\n      return event.stack;\r\n  }\r\n  throw new Error(\"Invalid event type for currentStacks\");\r\n}\r\n","import React from 'react';\r\n\r\nimport RESOURCE_TYPES from 'game/RESOURCE_TYPES';\r\nimport SPELLS from 'common/SPELLS';\r\nimport { formatDuration, formatNumber, formatPercentage } from 'common/format';\r\nimport STATISTIC_ORDER from 'interface/others/STATISTIC_ORDER';\r\nimport Statistic from 'interface/statistics/Statistic';\r\n\r\nimport SpellUsable from 'parser/shared/modules/SpellUsable';\r\nimport CastEfficiency from 'parser/shared/modules/CastEfficiency';\r\nimport Abilities from 'parser/core/modules/Abilities';\r\nimport ResourceTracker from 'parser/shared/modules/resources/resourcetracker/ResourceTracker';\r\nimport Events, { EventType } from 'parser/core/Events';\r\nimport { SELECTED_PLAYER } from 'parser/core/Analyzer';\r\n\r\nimport { i18n } from '@lingui/core';\r\nimport { t } from '@lingui/macro';\r\nimport BoringResourceValue from 'interface/statistics/components/BoringResourceValue';\r\n\r\nconst MAX_RUNES = 6;\r\nconst RUNIC_CORRUPTION_INCREASE = 1; //Runic Corruption\r\nconst RUNE_IDS = [\r\n  SPELLS.RUNE_1, //-101\r\n  SPELLS.RUNE_2, //-102\r\n  SPELLS.RUNE_3, //-103\r\n];\r\n\r\n/*\r\n * Runes are tracked as 3 fake spells with 2 charges to simulate 3 runes charging at the same time.\r\n * aslong as spells always use the rune pair with the shortest cooldown remaining it should match\r\n * its in game functionality.\r\n */\r\nclass RuneTracker extends ResourceTracker {\r\n  static dependencies = {\r\n    ...ResourceTracker.dependencies,\r\n    spellUsable: SpellUsable,\r\n    castEfficiency: CastEfficiency,\r\n    abilities: Abilities,\r\n  };\r\n\r\n  runesReady = []; //{x, y} points of {time, runeCount} for the chart\r\n  _runesReadySum; //time spent at each rune. _runesReadySum[1] is time spent at one rune available.\r\n  _lastTimestamp; //used to find time since last rune change for the _runesReadySum\r\n  _fightend = false; //fightend, avoid wierd graph by not adding later runes\r\n\r\n  constructor(...args) {\r\n    super(...args);\r\n    this.resource = RESOURCE_TYPES.RUNES;\r\n    this._lastTimestamp = this.owner.fight.start_time;\r\n    this._runesReadySum = [MAX_RUNES + 1];\r\n    for (let i = 0; i <= MAX_RUNES; i += 1) {\r\n      this._runesReadySum[i] = 0;\r\n    }\r\n    this.addEventListener(Events.fightend, this.onFightend);\r\n    this.addEventListener(Events.applybuff.to(SELECTED_PLAYER).spell(SPELLS.RUNIC_CORRUPTION), this.onApplybuff);\r\n    this.addEventListener(Events.removebuff.to(SELECTED_PLAYER).spell(SPELLS.RUNIC_CORRUPTION), this.onRemovebuff);\r\n    this.addEventListener(Events.UpdateSpellUsable.spell(RUNE_IDS), this.onUpdateSpellUsable);\r\n  }\r\n\r\n  onFightend() { //add a last event for calculating uptimes and make the chart not end early.\r\n    const runesAvailable = this.runesAvailable;\r\n    this._fightend = true;\r\n\r\n    this.runesReady.push({ x: this.owner.fightDuration / 1000, y: runesAvailable });\r\n    this._runesReadySum[runesAvailable] += this.owner.fight.end_time - this._lastTimestamp;\r\n    this.addPassiveRuneRegeneration();\r\n  }\r\n\r\n  onCast(event) {\r\n    if (!event.classResources || event.prepull) {\r\n      return;\r\n    }\r\n    super.onCast(event);\r\n\r\n    event.classResources\r\n      .filter(resource => resource.type === this.resource.id)\r\n      .forEach(({ amount, cost }) => {\r\n        let runeCost = cost || 0;\r\n        //adjust for resource cost reduction\r\n        if (event.ability.guid === SPELLS.OBLITERATE_CAST.id && this.selectedCombatant.hasBuff(SPELLS.OBLITERATION_TALENT.id)) {\r\n          runeCost -= 1;\r\n        }\r\n        if (runeCost <= 0) {\r\n          return;\r\n        }\r\n        for (let i = 0; i < runeCost; i += 1) { //start rune cooldown\r\n          this.startCooldown(event);\r\n        }\r\n      });\r\n  }\r\n\r\n  onEnergize(event) { //add a charge to the rune with the longest remaining cooldown when a rune is refunded.\r\n    super.onEnergize(event);\r\n    if (event.resourceChangeType !== this.resource.id) {\r\n      return;\r\n    }\r\n    const amount = event.resourceChange;\r\n    for (let i = 0; i < amount; i += 1) {\r\n      this.addCharge();\r\n    }\r\n  }\r\n\r\n  onApplybuff(event) { //decrease cooldown when a buff that increases rune regeneration rate is applied.\r\n    const multiplier = 1 / (1 + RUNIC_CORRUPTION_INCREASE);\r\n    RUNE_IDS.forEach(spell => {\r\n      this.changeCooldown(spell.id, multiplier);\r\n    });\r\n  }\r\n\r\n  onRemovebuff(event) { //increase cooldown when a buff that increases rune regeneration rate fades.\r\n    const multiplier = 1 + RUNIC_CORRUPTION_INCREASE;\r\n    RUNE_IDS.forEach(spell => {\r\n      this.changeCooldown(spell.id, multiplier);\r\n    });\r\n  }\r\n\r\n  onUpdateSpellUsable(event) { //track when a rune comes off cooldown\r\n    let change = 0;\r\n    if (event.trigger === EventType.EndCooldown || event.trigger === EventType.RestoreCharge) { //gained a rune\r\n      change += 1;\r\n    } else if (event.trigger === EventType.BeginCooldown || event.trigger === EventType.AddCooldownCharge) { //spent a rune\r\n      change -= 1;\r\n    } else { //no change\r\n      return;\r\n    }\r\n\r\n    //time since last rune change was spent at current runes minus the change.\r\n    this._runesReadySum[this.runesAvailable - change] += event.timestamp - this._lastTimestamp;\r\n    this._lastTimestamp = event.timestamp;\r\n    //Adding two points to the rune chart, one at {time, lastRuneCount} and one at {time, newRuneCount} so the chart does not have diagonal lines.\r\n\r\n    if (this._fightend) {\r\n      return;\r\n    }\r\n\r\n    this.runesReady.push({ x: this.timeFromStart(event.timestamp), y: this.runesAvailable - change });\r\n    this.runesReady.push({ x: this.timeFromStart(event.timestamp), y: this.runesAvailable });\r\n  }\r\n\r\n  // add passive rune regeneration and RC/4p21blood\r\n  addPassiveRuneRegeneration() {\r\n    let passiveRunesGained = this.runesMaxCasts;\r\n    let passiveRunesWasted = this.runesWasted;\r\n    //add runic corruption gained (and subtract it from passive regn)\r\n    const runicCorruptionContribution = this.addPassiveAccelerator(SPELLS.RUNIC_CORRUPTION.id, passiveRunesGained, passiveRunesWasted, RUNIC_CORRUPTION_INCREASE);\r\n    passiveRunesGained *= 1 - runicCorruptionContribution;\r\n    passiveRunesWasted *= 1 - runicCorruptionContribution;\r\n    //add passive rune regn\r\n    this.initBuilderAbility(SPELLS.RUNE_1.id);\r\n    this.buildersObj[SPELLS.RUNE_1.id].generated += Math.round(passiveRunesGained);\r\n    this.buildersObj[SPELLS.RUNE_1.id].wasted += Math.round(passiveRunesWasted);\r\n  }\r\n\r\n  addPassiveAccelerator(spellId, gained, wasted, increase) { //used to add passive rune gain accelerators like Runic Corruption\r\n    //use uptime to get approximate contribution to passive regeneration\r\n    const uptime = this.selectedCombatant.getBuffUptime(spellId) / this.owner.fightDuration;\r\n    if (!(uptime > 0)) {\r\n      return 0;\r\n    }\r\n    this.initBuilderAbility(spellId);\r\n    const contribution = uptime * increase / (1 + increase);\r\n    const acceleratorGained = Math.round(gained * contribution);\r\n    this.buildersObj[spellId].generated += acceleratorGained;\r\n    const acceleratorWasted = Math.round(wasted * contribution);\r\n    this.buildersObj[spellId].wasted += acceleratorWasted;\r\n    return contribution;\r\n  }\r\n\r\n  changeCooldown(spellId, multiplier) { //increases or decreases rune cooldown\r\n    if (!this.spellUsable.isOnCooldown(spellId)) {\r\n      return;\r\n    }\r\n    const remainingCooldown = this.spellUsable.cooldownRemaining(spellId);\r\n    const newCooldown = remainingCooldown * multiplier;\r\n    const reduction = remainingCooldown - newCooldown;\r\n    this.spellUsable.reduceCooldown(spellId, reduction);\r\n  }\r\n\r\n  addCharge() {\r\n    const runeId = this.longestCooldown;\r\n    if (!this.spellUsable.isOnCooldown(runeId)) {\r\n      return;\r\n    }\r\n    const expectedCooldown = this.abilities.getExpectedCooldownDuration(runeId, this.spellUsable.cooldownTriggerEvent(runeId));\r\n    this.spellUsable.reduceCooldown(runeId, expectedCooldown);\r\n  }\r\n\r\n  startCooldown(event) {\r\n    const runeId = this.shortestCooldown;\r\n    this.spellUsable.beginCooldown(runeId, event);\r\n  }\r\n\r\n  get shortestCooldown() {\r\n    const runeOneCooldown = this.getCooldown(SPELLS.RUNE_1.id) || 0;\r\n    const runeTwoCooldown = this.getCooldown(SPELLS.RUNE_2.id) || 0;\r\n    const runeThreeCooldown = this.getCooldown(SPELLS.RUNE_3.id) || 0;\r\n    if (runeOneCooldown <= runeTwoCooldown && runeOneCooldown <= runeThreeCooldown) {\r\n      return SPELLS.RUNE_1.id;\r\n    } else if (runeTwoCooldown <= runeThreeCooldown) {\r\n      return SPELLS.RUNE_2.id;\r\n    } else {\r\n      return SPELLS.RUNE_3.id;\r\n    }\r\n  }\r\n\r\n  get longestCooldown() {\r\n    const runeOneCooldown = this.getCooldown(SPELLS.RUNE_1.id) || 0;\r\n    const runeTwoCooldown = this.getCooldown(SPELLS.RUNE_2.id) || 0;\r\n    const runeThreeCooldown = this.getCooldown(SPELLS.RUNE_3.id) || 0;\r\n    if (runeOneCooldown >= runeTwoCooldown && runeOneCooldown >= runeThreeCooldown) {\r\n      return SPELLS.RUNE_1.id;\r\n    } else if (runeTwoCooldown >= runeThreeCooldown) {\r\n      return SPELLS.RUNE_2.id;\r\n    } else {\r\n      return SPELLS.RUNE_3.id;\r\n    }\r\n  }\r\n\r\n  get runesAvailable() {\r\n    let chargesAvailable = 0;\r\n    RUNE_IDS.forEach(spell => {\r\n      chargesAvailable += this.spellUsable.chargesAvailable(spell.id);\r\n    });\r\n    return chargesAvailable;\r\n  }\r\n\r\n  getCooldown(spellId) {\r\n    if (!this.spellUsable.isOnCooldown(spellId)) {\r\n      return null;\r\n    }\r\n    const chargesOnCooldown = 2 - this.spellUsable.chargesAvailable(spellId);\r\n    const cooldownRemaining = this.spellUsable.cooldownRemaining(spellId);\r\n    const fullChargeCooldown = this.abilities.getExpectedCooldownDuration(spellId, this.spellUsable.cooldownTriggerEvent(spellId));\r\n    return (chargesOnCooldown - 1) * fullChargeCooldown + cooldownRemaining;\r\n  }\r\n\r\n  get runeEfficiency() {\r\n    const runeCastEfficiencies = [];\r\n    RUNE_IDS.forEach(spell => {\r\n      runeCastEfficiencies.push(this.castEfficiency.getCastEfficiencyForSpellId(spell.id).efficiency);\r\n    });\r\n    return runeCastEfficiencies.reduce((accumulator, currentValue) => accumulator + currentValue) / runeCastEfficiencies.length;\r\n  }\r\n\r\n  // total runes generated with passive regeneration\r\n  get runesMaxCasts() {\r\n    let totalCasts = 0;\r\n    for (const spender in this.spendersObj) { //add runes spent\r\n      totalCasts += this.spendersObj[spender].spent;\r\n    }\r\n    // subtract starting runes and add end runes\r\n    return totalCasts - MAX_RUNES + this.runesReady[this.runesReady.length - 1].y;\r\n  }\r\n\r\n  // total runes wasted with passive regeneration\r\n  get runesWasted() {\r\n    return this.runesMaxCasts * (1 - this.runeEfficiency);\r\n  }\r\n\r\n  get timeSpentAtRuneCount() {\r\n    const timeSpentAtRune = [];\r\n    this._runesReadySum.forEach((time) => {\r\n      timeSpentAtRune.push(time / this.owner.fightDuration);\r\n    });\r\n    return timeSpentAtRune;\r\n  }\r\n\r\n  timeFromStart(timestamp) {\r\n    return (timestamp - this.owner.fight.start_time) / 1000;\r\n  }\r\n\r\n  get suggestionThresholds() {\r\n    return {\r\n      actual: 1 - this.runeEfficiency,\r\n      isGreaterThan: {\r\n        minor: 0.05,\r\n        average: 0.1,\r\n        major: 0.2,\r\n      },\r\n      style: 'percentage',\r\n    };\r\n  }\r\n\r\n  get suggestionThresholdsEfficiency() {\r\n    return {\r\n      actual: this.runeEfficiency,\r\n      isLessThan: {\r\n        minor: 0.95,\r\n        average: 0.9,\r\n        major: 0.8,\r\n      },\r\n      style: 'percentage',\r\n    };\r\n  }\r\n\r\n  suggestions(when) {\r\n    when(this.suggestionThresholds).addSuggestion((suggest, actual, recommended) => suggest(<>You overcapped {formatPercentage(actual)}% of your runes. Try to always have at least 3 runes on cooldown.</>)\r\n      .icon(SPELLS.RUNE_1.icon)\r\n      .actual(i18n._(t('deathknight.shared.suggestions.runes.overcapped')`${formatPercentage(actual)}% runes overcapped`))\r\n      .recommended(`<${formatPercentage(recommended)}% is recommended`));\r\n  }\r\n\r\n  statistic() {\r\n    const timeSpentAtRuneCount = this.timeSpentAtRuneCount;\r\n    const badThreshold = 4;\r\n    return (\r\n      <Statistic\r\n        position={STATISTIC_ORDER.CORE(10)}\r\n        size=\"flexible\"\r\n        tooltip={(\r\n          <>\r\n            Number of runes wasted: {formatNumber(this.runesWasted)} <br />\r\n            These numbers only include runes wasted from passive regeneration. <br />\r\n            The table below shows the time spent at any given number of runes available.\r\n          </>\r\n        )}\r\n        dropdown={\r\n          <table className=\"table table-condensed\">\r\n            <thead>\r\n              <tr>\r\n                <th>Runes</th>\r\n                <th>Time (s)</th>\r\n                <th>Time (%)</th>\r\n              </tr>\r\n            </thead>\r\n            <tbody>\r\n              { //split into good and bad number of runes available\r\n                this._runesReadySum.filter((value, index) => index < badThreshold).map((value, index) => (\r\n                  <tr key={index}>\r\n                    <th>{index}</th>\r\n                    <td>{formatDuration(this._runesReadySum[index] / 1000)}</td>\r\n                    <td>{formatPercentage(timeSpentAtRuneCount[index])}%</td>\r\n                  </tr>\r\n                ))\r\n              }\r\n              {\r\n                this._runesReadySum.filter((value, index) => index >= badThreshold).map((value, index) => (\r\n                  <tr key={index + badThreshold}>\r\n                    <th style={{ color: 'red' }}>{index + badThreshold}</th>\r\n                    <td>{formatDuration(this._runesReadySum[index + badThreshold] / 1000)}</td>\r\n                    <td>{formatPercentage(timeSpentAtRuneCount[index + badThreshold])}%</td>\r\n                  </tr>\r\n                ))\r\n              }\r\n            </tbody>\r\n          </table>\r\n        }\r\n      >\r\n        <BoringResourceValue\r\n          resource={RESOURCE_TYPES.RUNES}\r\n          value={`${formatPercentage(1 - this.runeEfficiency)} %`}\r\n          label=\"Runes overcapped\"\r\n        />\r\n      </Statistic>\r\n    );\r\n  }\r\n}\r\n\r\nexport default RuneTracker;\r\n","import React from 'react';\r\n\r\nimport SPELLS from 'common/SPELLS';\r\n\r\nimport Analyzer, { Options, SELECTED_PLAYER } from 'parser/core/Analyzer';\r\nimport Events, { HealEvent } from 'parser/core/Events';\r\n\r\nimport STATISTIC_ORDER from 'interface/others/STATISTIC_ORDER';\r\nimport Statistic from 'interface/statistics/Statistic';\r\nimport BoringSpellValueText from 'interface/statistics/components/BoringSpellValueText';\r\nimport { formatNumber, formatPercentage } from 'common/format';\r\n\r\nconst UNHOLY_STRENGTH_STRENGTH = 0.15; // 15% Str buff while active\r\n\r\nclass RuneOfTheFallenCrusader extends Analyzer {\r\n\r\n  healing: number = 0;\r\n  overhealing: number = 0;\r\n\r\n  constructor(options: Options) {\r\n    super(options);\r\n\r\n    const active = this.selectedCombatant.hasWeaponEnchant(SPELLS.RUNE_OF_THE_FALLEN_CRUSADER)\r\n    this.active = active\r\n    if (!active) {\r\n      return;\r\n    }\r\n\r\n    this.addEventListener(Events.heal.to(SELECTED_PLAYER).spell(SPELLS.UNHOLY_STRENGTH_BUFF), this._onHeal);\r\n  }\r\n\r\n  _onHeal(event: HealEvent) {\r\n    if (event.overheal) {\r\n      this.overhealing += event.overheal\r\n    }\r\n    this.healing += event.amount + event.absorb\r\n  }\r\n\r\n  get overhealPercentage() {\r\n    return this.overhealing / this.healing\r\n  }\r\n\r\n  get uptime() {\r\n    return this.selectedCombatant.getBuffUptime(SPELLS.UNHOLY_STRENGTH_BUFF.id) / this.owner.fightDuration;\r\n  }\r\n\r\n  get averageStrength() {\r\n    return this.uptime * UNHOLY_STRENGTH_STRENGTH\r\n  }\r\n\r\n  statistic() {\r\n    return (\r\n      <Statistic\r\n        position={STATISTIC_ORDER.OPTIONAL(2)}\r\n        size=\"flexible\"\r\n        tooltip={(\r\n          <>\r\n            <strong>Uptime: </strong> {formatPercentage(this.uptime)}% <br />\r\n            <strong>Healing: </strong> {formatNumber(this.healing)} <br />\r\n            <strong>Overhealing: </strong> {formatNumber(this.overhealing)} ({formatPercentage(this.overhealPercentage)} %) <br />\r\n          </>\r\n        )}\r\n      >\r\n        <BoringSpellValueText spell={SPELLS.RUNE_OF_THE_FALLEN_CRUSADER}>\r\n          <>\r\n            {formatPercentage(this.averageStrength)} % <small>average Strength</small>\r\n          </>\r\n        </BoringSpellValueText>\r\n      </Statistic>\r\n    );\r\n  }\r\n\r\n}\r\n\r\nexport default RuneOfTheFallenCrusader;\r\n","import React from 'react';\r\n\r\nimport SPELLS from 'common/SPELLS';\r\n\r\nimport Analyzer, { Options } from 'parser/core/Analyzer';\r\nimport Events, { EnergizeEvent } from 'parser/core/Events';\r\n\r\nimport STATISTIC_ORDER from 'interface/others/STATISTIC_ORDER';\r\nimport Statistic from 'interface/statistics/Statistic';\r\nimport BoringSpellValueText from 'interface/statistics/components/BoringSpellValueText';\r\nimport { formatPercentage } from 'common/format';\r\n\r\nimport RESOURCE_TYPES from 'game/RESOURCE_TYPES';\r\n\r\nimport { ThresholdStyle, When } from 'parser/core/ParseResults';\r\nimport { i18n } from '@lingui/core';\r\nimport { t } from '@lingui/macro';\r\nimport SPECS from 'game/SPECS';\r\n\r\nconst RP_BUFF_BY_HYSTERIA = 0.2;\r\nconst DEATH_STRIKE_COST = 45;\r\n\r\n// Energize Events are not floats, making it difficult to track the exact amount of RP gained by Hysteria\r\n// But Energize Events round up if the RP gained was eg. 0.4 and the player had 50.7 RP\r\n// Tracking total RP gained during Hysteria and multiplying it by .2 works for now because fractions add up\r\n// this becomes inaccurate if other spells generate fractions of RP\r\n\r\nclass RuneOfHysteria extends Analyzer {\r\n\r\n  runicPowerGained: number = 0;\r\n  runicPowerWasted: number = 0;\r\n\r\n  constructor(options: Options) {\r\n    super(options);\r\n\r\n    const active = this.selectedCombatant.hasWeaponEnchant(SPELLS.RUNE_OF_HYSTERIA)\r\n    this.active = active\r\n    if (!active) {\r\n      return;\r\n    }\r\n\r\n    this.addEventListener(Events.energize, this._onEnergize)\r\n  }\r\n\r\n  _onEnergize(event: EnergizeEvent) {\r\n    const hysteriaUp = this.selectedCombatant.hasBuff(SPELLS.RUNE_OF_HYSTERIA_BUFF.id, event.timestamp);\r\n    if (!hysteriaUp || event.resourceChangeType !== RESOURCE_TYPES.RUNIC_POWER.id) {\r\n      return;\r\n    }\r\n\r\n    this.runicPowerGained += event.resourceChange;\r\n    this.runicPowerWasted += event.waste\r\n  }\r\n\r\n  get runicPowerGainedByHysteria() {\r\n    return this.runicPowerGained * RP_BUFF_BY_HYSTERIA\r\n  }\r\n\r\n  get runicPowerWastedDuringHysteria() {\r\n    return this.runicPowerWasted * RP_BUFF_BY_HYSTERIA\r\n  }\r\n\r\n  get potentialRunicPowerGainedByHysteria() {\r\n    return this.runicPowerGainedByHysteria + this.runicPowerWastedDuringHysteria\r\n  }\r\n\r\n  get wastedPercentage() {\r\n    return this.runicPowerWastedDuringHysteria / this.runicPowerGainedByHysteria\r\n  }\r\n\r\n  get potentiallyGainedDeathStrikes() {\r\n    return Math.floor(this.potentialRunicPowerGainedByHysteria / DEATH_STRIKE_COST)\r\n  }\r\n\r\n  get gainedDeathStrikes() {\r\n    return Math.floor(this.runicPowerGainedByHysteria / DEATH_STRIKE_COST)\r\n  }\r\n\r\n  get wastedDeathStrikes() {\r\n    return this.potentiallyGainedDeathStrikes - this.gainedDeathStrikes\r\n  }\r\n\r\n  get efficiencySuggestionThresholds() {\r\n    return {\r\n      actual: this.wastedPercentage,\r\n      isGreaterThan: {\r\n        minor: 0,\r\n        average: .2,\r\n        major: .4,\r\n      },\r\n      style: ThresholdStyle.PERCENTAGE,\r\n    };\r\n  }\r\n\r\n  suggestions(when: When) {\r\n    when(this.efficiencySuggestionThresholds)\r\n      .addSuggestion((suggest, actual, recommended) => suggest(<span>Avoid being Runic Power capped at all times, you wasted {this.runicPowerWastedDuringHysteria} PR of {SPELLS.RUNE_OF_HYSTERIA.name} by being RP capped.</span>)\r\n          .icon(SPELLS.RUNE_OF_HYSTERIA.icon)\r\n          .actual(i18n._(t('deathknight.suggestions.hysteria.efficiency')`You wasted ${(formatPercentage(actual))}% of RP from ${SPELLS.RUNE_OF_HYSTERIA.name} by being RP capped.`))\r\n          .recommended(`${formatPercentage(recommended)}% is recommended`));\r\n  }\r\n\r\n  statistic() {\r\n    let gainedSpell: React.ReactNode = <></>\r\n    let wastedSpell: React.ReactNode = <></>\r\n\r\n    if (this.selectedCombatant.spec === SPECS.BLOOD_DEATH_KNIGHT) {\r\n      gainedSpell = <>, resulting in {this.gainedDeathStrikes} additional {SPELLS.DEATH_STRIKE.name}</>\r\n      wastedSpell = <>, losing out on {this.wastedDeathStrikes} {SPELLS.DEATH_STRIKE.name}</>\r\n    }\r\n\r\n    return (\r\n      <Statistic\r\n        position={STATISTIC_ORDER.OPTIONAL(2)}\r\n        size=\"flexible\"\r\n        tooltip={(\r\n          <>\r\n            You gained {Math.floor(this.runicPowerGainedByHysteria)} RP by using {SPELLS.RUNE_OF_HYSTERIA.name}{gainedSpell}.<br />\r\n            {this.runicPowerWastedDuringHysteria > 1 && <>\r\n              You wasted {this.runicPowerWastedDuringHysteria} RP ({formatPercentage(this.wastedPercentage)} %) from Hysteria by being RP capped{wastedSpell}.\r\n            </>}\r\n          </>\r\n        )}\r\n      >\r\n        <BoringSpellValueText spell={SPELLS.RUNE_OF_HYSTERIA}>\r\n          <>\r\n            {Math.floor(this.runicPowerGainedByHysteria)} <small>RP gained</small>\r\n          </>\r\n        </BoringSpellValueText>\r\n      </Statistic>\r\n    );\r\n  }\r\n\r\n}\r\n\r\nexport default RuneOfHysteria;\r\n","import React from 'react';\r\nimport PropTypes from 'prop-types';\r\n\r\nimport SpellIcon from 'common/SpellIcon';\r\nimport SpellLink from 'common/SpellLink';\r\nimport { formatPercentage } from 'common/format';\r\nimport SPELLS from 'common/SPELLS';\r\nimport { TooltipElement } from 'common/Tooltip';\r\n\r\nimport ResourceBreakdown from 'parser/shared/modules/resources/resourcetracker/ResourceBreakdown';\r\n\r\n//Need to extend this class to change how passive rune regeneration is displayed.\r\n//The only new lines are 44, 49-54 and 78.\r\nclass RuneBreakdown extends ResourceBreakdown {\r\n  static propTypes = {\r\n    tracker: PropTypes.object.isRequired,\r\n    showSpenders: PropTypes.bool,\r\n  };\r\n\r\n  render() {\r\n    const { tracker, showSpenders } = this.props;\r\n    const resourceName = tracker.resource.name;\r\n    const generated = this.prepareGenerated(tracker.buildersObj);\r\n    const spent = this.prepareSpent(tracker.spendersObj);\r\n\r\n    let totalGenerated = tracker.generated;\r\n    let totalWasted = tracker.wasted;\r\n\r\n    let totalSpent = tracker.spent;\r\n    let totalCasts = tracker.spendersCasts;\r\n\r\n    // looks wrong but totals are only for the purpose of percentage, and if nothing was wasted, then 0/1 gives correct result 0% wasted, if it's not 0 it retains its original value\r\n    totalGenerated = (totalGenerated === 0) ? 1 : totalGenerated;\r\n    totalWasted = (totalWasted === 0) ? 1 : totalWasted;\r\n\r\n    totalSpent = (totalSpent === 0) ? 1 : totalSpent;\r\n    totalCasts = (totalCasts === 0) ? 1 : totalCasts;\r\n\r\n    return (\r\n      <div>\r\n        <table className=\"data-table\">\r\n          <thead>\r\n            <tr>\r\n              <th>Ability</th>\r\n              <th colSpan=\"2\"><TooltipElement content=\"Runes generated from passive regeneration and abilities that accelerate it are estimates.\">{resourceName} generated</TooltipElement></th>\r\n              <th colSpan=\"2\"><TooltipElement content=\"This is the amount of resources that were generated while you were already at cap.\">{resourceName} wasted</TooltipElement></th>\r\n            </tr>\r\n          </thead>\r\n          <tbody>\r\n            {generated && generated\r\n              .filter(ability => ability.abilityId === SPELLS.RUNE_1.id)\r\n              .map(ability => (\r\n                <tr key={ability.abilityId}>\r\n                  <td style={{ width: '30%' }}>\r\n                    <SpellIcon id={ability.abilityId} noLink />{' '}\r\n                    Passive Rune regeneration\r\n                  </td>\r\n                  <td style={{ width: 50, paddingRight: 5, textAlign: 'center' }}>\r\n                    <TooltipElement content={`${formatPercentage(ability.generated / totalGenerated)} %`}>{ability.generated}</TooltipElement>\r\n                  </td>\r\n                  <td style={{ width: '40%' }}>\r\n                    <div\r\n                      className=\"performance-bar\"\r\n                      style={{ width: `${(ability.generated / totalGenerated) * 100}%` }}\r\n                    />\r\n                  </td>\r\n                  <td style={{ width: 50, paddingRight: 5, textAlign: 'center' }}>\r\n                    <TooltipElement content={`${formatPercentage(ability.wasted / totalWasted)} %`}>{ability.wasted}</TooltipElement>\r\n                  </td>\r\n                  <td style={{ width: '30%' }}>\r\n                    <div\r\n                      className=\"performance-bar\"\r\n                      style={{ width: `${(ability.wasted / totalWasted) * 100}%` }}\r\n                    />\r\n                  </td>\r\n                </tr>\r\n              ))}\r\n            {generated && generated\r\n              .filter(ability => ability.abilityId !== SPELLS.RUNE_1.id)\r\n              .map(ability => (\r\n                <tr key={ability.abilityId}>\r\n                  <td style={{ width: '30%' }}>\r\n                    <SpellLink id={ability.abilityId} />\r\n                  </td>\r\n                  <td style={{ width: 50, paddingRight: 5, textAlign: 'center' }}>\r\n                    <TooltipElement content={`${formatPercentage(ability.generated / totalGenerated)} %`}>{ability.generated}</TooltipElement>\r\n                  </td>\r\n                  <td style={{ width: '40%' }}>\r\n                    <div\r\n                      className=\"performance-bar\"\r\n                      style={{ width: `${(ability.generated / totalGenerated) * 100}%` }}\r\n                    />\r\n                  </td>\r\n                  <td style={{ width: 50, paddingRight: 5, textAlign: 'center' }}>\r\n                    <TooltipElement content={`${formatPercentage(ability.wasted / totalWasted)} %`}>{ability.wasted}</TooltipElement>\r\n                  </td>\r\n                  <td style={{ width: '30%' }}>\r\n                    <div\r\n                      className=\"performance-bar\"\r\n                      style={{ width: `${(ability.wasted / totalWasted) * 100}%` }}\r\n                    />\r\n                  </td>\r\n                </tr>\r\n              ))}\r\n          </tbody>\r\n        </table>\r\n        {showSpenders && (\r\n          <table className=\"data-table\">\r\n            <thead>\r\n              <tr>\r\n                <th>Ability</th>\r\n                <th colSpan=\"2\">{resourceName} spent</th>\r\n                <th colSpan=\"2\">Casts</th>\r\n              </tr>\r\n            </thead>\r\n            <tbody>\r\n              {spent && spent\r\n                .map(ability => (\r\n                  <tr key={ability.abilityId}>\r\n                    <td style={{ width: '30%' }}>\r\n                      <SpellLink id={ability.abilityId} />\r\n                    </td>\r\n                    <td style={{ width: 50, paddingRight: 5, textAlign: 'center' }}>\r\n                      <TooltipElement content={`${formatPercentage(ability.spent / totalSpent)} %`}>{ability.spent}</TooltipElement>\r\n                    </td>\r\n                    <td style={{ width: '40%' }}>\r\n                      <div\r\n                        className=\"performance-bar\"\r\n                        style={{ width: `${(ability.spent / totalSpent) * 100}%` }}\r\n                      />\r\n                    </td>\r\n                    <td style={{ width: 50, paddingRight: 5, textAlign: 'center' }}>\r\n                      <TooltipElement content={`${formatPercentage(ability.casts / totalCasts)} %`}>{ability.casts}</TooltipElement>\r\n                    </td>\r\n                    <td style={{ width: '30%' }}>\r\n                      <div\r\n                        className=\"performance-bar\"\r\n                        style={{ width: `${(ability.casts / totalCasts) * 100}%` }}\r\n                      />\r\n                    </td>\r\n                  </tr>\r\n                ))}\r\n            </tbody>\r\n          </table>\r\n        )}\r\n      </div>\r\n    );\r\n  }\r\n}\r\n\r\nexport default RuneBreakdown;\r\n","import React from 'react';\r\nimport { AutoSizer } from 'react-virtualized';\r\n\r\nimport Analyzer from 'parser/core/Analyzer';\r\nimport Panel from 'interface/others/Panel';\r\nimport BaseChart, { formatTime } from 'interface/others/BaseChart';\r\n\r\nimport RuneBreakdown from './RuneBreakdown';\r\nimport RuneTracker from './RuneTracker';\r\n\r\n\r\nclass RuneDetails extends Analyzer {\r\n  static dependencies = {\r\n    runeTracker: RuneTracker,\r\n  };\r\n\r\n  tab() {\r\n    const data = this.runeTracker.runesReady;\r\n\r\n    const spec = {\r\n      data: {\r\n        name: 'runes',\r\n      },\r\n      mark: {\r\n        type: 'line',\r\n        color: 'rgb(196, 31, 59)',\r\n      },\r\n      encoding: {\r\n        x: {\r\n          field: 'x',\r\n          type: 'quantitative',\r\n          axis: {\r\n            labelExpr: formatTime('datum.value * 1000'),\r\n            grid: false,\r\n          },\r\n          title: null,\r\n        },\r\n        y: {\r\n          field: 'y',\r\n          type: 'quantitative',\r\n          title: '# of Runes',\r\n          axis: {\r\n            grid: false,\r\n            tickMinStep: 1,\r\n          },\r\n        },\r\n      },\r\n    };\r\n\r\n    return {\r\n      title: 'Rune usage',\r\n      url: 'rune-usage',\r\n      render: () => (\r\n        <Panel>\r\n          <AutoSizer disableHeight>\r\n            {({width}) => (\r\n              <BaseChart\r\n                width={width}\r\n                height={400}\r\n                spec={spec}\r\n                data={{ runes: data }}\r\n              />\r\n            )}\r\n          </AutoSizer>\r\n          <RuneBreakdown\r\n            tracker={this.runeTracker}\r\n            showSpenders\r\n          />\r\n        </Panel>\r\n      ),\r\n    };\r\n }\r\n\r\n}\r\n\r\nexport default RuneDetails;\r\n"],"sourceRoot":""}