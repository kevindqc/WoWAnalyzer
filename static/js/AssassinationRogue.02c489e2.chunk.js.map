{"version":3,"sources":["parser/rogue/assassination/modules/Abilities.js","parser/rogue/assassination/modules/features/AlwaysBeCasting.js","parser/rogue/assassination/modules/features/CooldownThroughputTracker.js","parser/rogue/assassination/modules/spells/GarroteUptime.js","parser/rogue/assassination/modules/spells/RuptureUptime.js","parser/shared/modules/earlydotrefreshes/EarlyDotRefreshesSuggestion.js","parser/rogue/assassination/modules/spells/EarlyDotRefresh.js","parser/rogue/assassination/modules/talents/Blindside.js","parser/rogue/assassination/modules/core/Snapshot.js","parser/rogue/assassination/modules/features/GarroteSnapshot.js","parser/rogue/assassination/modules/talents/StealthCasts.js","parser/rogue/assassination/modules/talents/Subterfuge.js","parser/rogue/assassination/modules/features/Checklist/Component.js","parser/rogue/assassination/modules/features/RuptureSnapshot.js","parser/rogue/assassination/constants.js","parser/rogue/assassination/modules/talents/Nightstalker.js","parser/rogue/assassination/modules/talents/MasterAssassin.js","parser/rogue/assassination/modules/features/Checklist/Module.js","parser/rogue/assassination/normalizers/GarroteNormalizer.js","parser/rogue/assassination/normalizers/GarroteOpenerNormalizer.js","parser/rogue/assassination/modules/core/ComboPoints.tsx","parser/rogue/assassination/modules/core/Energy.tsx","parser/rogue/shared/EnemyHpTracker.js","parser/rogue/assassination/modules/spells/EnvenomUptime.js","parser/rogue/assassination/modules/features/CrimsonTempestSnapshot.js","parser/rogue/assassination/modules/talents/ElaboratePlanning.js","parser/rogue/assassination/modules/talents/MasterPoisoner.js","parser/rogue/assassination/modules/spells/shadowlands/legendaries/DashingScoundrel.tsx","parser/rogue/assassination/modules/spells/shadowlands/legendaries/DuskwalkersPatch.tsx","parser/rogue/assassination/CombatLogParser.ts","parser/core/calculateEffectiveDamage.js","interface/others/TalentStatisticBox.js","parser/shared/modules/earlydotrefreshes/EarlyDotRefreshes.js"],"names":["Abilities","combatant","this","selectedCombatant","spell","SPELLS","ENVENOM","category","SPELL_CATEGORIES","ROTATIONAL","gcd","static","buffSpellId","id","GARROTE","cooldown","hasTalent","SUBTERFUGE_TALENT","hasBuff","SUBTERFUGE_BUFF","STEALTH","STEALTH_BUFF","VANISH_BUFF","MUTILATE","POISONED_KNIFE","RUPTURE","BLINDSIDE_TALENT","MARKED_FOR_DEATH_TALENT","castEfficiency","suggestion","enabled","CRIMSON_TEMPEST_TALENT","ROTATIONAL_AOE","FAN_OF_KNIVES","VENDETTA","COOLDOWNS","base","VANISH","MASTER_ASSASSIN_BUFF","EXSANGUINATE_TALENT","CLOAK_OF_SHADOWS","DEFENSIVE","CRIMSON_VIAL","EVASION","FEINT","DEADLY_POISON","OTHERS","WOUND_POISON","CRIPPLING_POISON","SHADOWSTEP","UTILITY","SPRINT","TRICKS_OF_THE_TRADE","BLIND","CHEAP_SHOT","DISTRACT","KICK","KIDNEY_SHOT","SHROUD_OF_CONCEALMENT","SAP","PICK_LOCK","PICK_POCKET","SEPSIS","hasCovenant","COVENANTS","NIGHT_FAE","FLAGELLATION","VENTHYR","ECHOING_REPRIMAND","KYRIAN","SERRATED_BONE_SPIKE","NECROLORD","CoreAbilities","AlwaysBeCasting","actual","downtimePercentage","isGreaterThan","minor","average","major","style","CoreAlwaysBeCasting","CooldownThroughputTracker","CoreCooldownThroughputTracker","cooldownSpells","summary","BUILT_IN_SUMMARY_TYPES","DAMAGE","GarroteUptime","when","suggestionThresholds","addSuggestion","suggest","recommended","SpellLink","icon","i18n","_","formatPercentage","StatisticBox","position","STATISTIC_ORDER","CORE","SpellIcon","value","percentUptime","label","enemies","getBuffUptime","owner","fightDuration","isLessThan","Analyzer","dependencies","Enemies","RuptureUptime","count","formatDuration","wastedDuration","EarlyDotRefresh","options","addEventListener","Events","SpendResource","by","SELECTED_PLAYER","onSpendResource","makeSuggestionThresholds","event","comboPointsSpent","resourceChange","resourceChangeType","RESOURCE_TYPES","COMBO_POINTS","getDot","duration","dot","castId","suggestionThresholdsRuptureEfficiency","suggestionThresholdsGarroteEfficiency","EarlyDotRefreshesCore","dots","name","debuffId","Blindside","args","casts","badMutilates","active","cast","onCast","efficiency","spellId","ability","guid","BLINDSIDE_BUFF","timestamp","registerBadMutilate","target","getEntity","hpPercent","reason","meta","isInefficientCast","inefficientCastReason","TalentStatisticBox","talent","OPTIONAL","tooltip","EnemyInstances","Snapshot","stateByTarget","talentName","multiplier","bonusDamage","lostSnapshotTime","snapshotTime","constructor","spellCastId","Error","NIGHTSTALKER_TALENT","prefiltercd","damage","onDamage","removedebuff","onRemoveDebuff","applydebuff","onApplyDebuff","refreshdebuff","onRefreshDebuff","fightend","onFightend","lostSnapshotTimePercent","lastDoTCastEvent","amount","absorbed","state","encodeTargetString","targetID","targetInstance","expireTime","buffed","calculateEffectiveDamage","targetString","stateOld","startTime","dotApplied","stateNew","makeNewState","checkRefreshRule","debuffEvent","timeRemainOnOld","expireNew","durationOfFresh","Math","min","pandemicTime","castEvent","prev","isEnhancedCast","enhancedCastReason","timeLost","toFixed","spellIcon","GarroteSnapshot","StealthCasts","stealthSequences","latestStealth","usedStealthOnPull","evaluateCast","push","Subterfuge","garroteSnapshot","stealthsWithGarrote","forEach","sequence","find","e","length","stealthsWithAtleastOneGarrote","stealthCasts","percentGoodStealthCasts","ItemDamageDone","AssassinationRogueChecklist","thresholds","AbilityRequirement","props","GenericCastEfficiencyRequirement","getCastEfficiencyForSpellId","Rule","description","Requirement","garroteUptime","ruptureUptime","garroteEfficiency","ruptureEfficiency","energyEfficiency","comboPointEfficiency","energyCapEfficiency","blindsideEfficiency","subterfugeEfficiency","MASTER_ASSASSIN_TALENT","masterAssassinEfficiency","nightstalkerEfficiency","nightstalkerOpenerEfficiency","garroteSnapshotEfficiency","PreparationRule","RuptureSnapshot","comboPointsOnLastCast","ABILITIES_AFFECTED_BY_DAMAGE_INCREASES","MELEE","MUTILATE_MAINHAND","MUTILATE_OFFHAND","POISON_BOMB","DOUBLE_DOSE","INTERNAL_BLEEDING_TALENT","DEADLY_POISON_DOT","DEADLY_POISON_PROC","ABILITIES_AFFECTED_BY_POISON_DAMAGE_INCREASES","NIGHTSTALKER_BLACKLIST","Nightstalker","allowedAbilities","filter","includes","addBonusDamageIfBuffed","ruptureSnapshot","vanishWithRupture","RuptureOpener","GarroteOpener","vanishCastsSpentOnRupture","vanishCasts","percentGoodVanishCasts","goodOpenerCasts","isEqual","suggestionThresholdsOpener","isFalse","bonusDamageTotal","GOOD_MASTER_ASSASSIN_ABILITIES","GOOD_OPENER_CASTS","MasterAssassin","goodCasts","goodSpells","goodCastsSeq","goodStealthCasts","percentGoodCasts","critChance","statTracker","currentCritPercentage","critBonusFromMasterAssassin","damageBonus","TOXIC_BLADE_TALENT","StatTracker","Checklist","Component","combatants","selected","preparationRuleAnalyzer","earlyDotRefresh","blindside","energyDetails","energyCapTracker","comboPointDetails","subterfuge","nightstalker","masterAssassin","ruptureSnapshotEfficiency","BaseChecklist","Combatants","CastEfficiency","PreparationRuleAnalyzer","EnergyDetails","EnergyCapTracker","ComboPointDetails","GarroteNormalizer","events","fixedEvents","eventsRemoved","eventIndex","type","EventType","ApplyDebuff","previousEventIndex","previousEvent","RemoveDebuff","RefreshDebuff","__modified","splice","EventsNormalizer","Cast","castTimestamp","Energize","ComboPoints","comboPointTracker","resourceSuggest","avg","extraSuggestion","makeExtraSuggestion","ComboPointTracker","Energy","energyTracker","URGE_TO_KILL","EnergyTracker","EnemyHpTracker","targetIsFriendly","enemy","hitPoints","maxHitPoints","EnvenomUptime","CrimsonTempestSnapshot","ElaboratePlanning","bonusDmg","ELABORATE_PLANNING_TALENT","ELABORATE_PLANNING_BUFF","MasterPoisoner","MASTER_POISONER_TALENT","addBonusDamage","DashingScoundrel","critCount","comboPointsGained","comboPointsWasted","abilities","hasLegendaryByBonusID","DASHING_SCOUNDREL","bonusID","energize","onEnergize","waste","Statistic","STATISTIC_CATEGORY","ITEMS","BoringSpellValueText","ResourceIcon","noLink","DuskwalkersPatch","effectiveVendettaReductionMs","wastedVendettaReductionMs","lastEnergyCost","spellUsable","DUSKWALERS_PATCH","resource","classResources","FOCUS","cost","cooldownReductionMs","ASS_VEN_CDR_PER_ENERGY","effectiveReductionMs","cooldownRemaining","EXHILERATION","reduceCooldown","size","DUSKWALKERS_PATCH","formatNumber","SpellUsable","CombatLogParser","CoreCombatLogParser","specModules","garroteNormalizer","garroteOpenerNormalizer","GarroteOpenerNormalizer","enemyHpTracker","alwaysBeCasting","cooldownThroughputTracker","checklist","comboPoints","energy","spellEnergyCost","SpellEnergyCost","envenomUptime","crimsonTempestSnapshot","elaboratePlanning","masterPoisoner","serratedBoneSpike","SerratedBoneSpike","echoingReprimand","EchoingReprimand","flagellation","Flagellation","sepsis","Sepsis","dashingScoundrel","duskwalkersPatch","essenceOfBloodfang","EssenceOfBloodfang","invigoratingShadowdust","InvigoratingShadowdust","arcaneTorrent","ArcaneTorrent","increase","raw","others","defaultProps","TALENTS","EarlyDotRefreshes","targets","lastGCD","lastCast","lastCastGoodExtension","lastCastMinWaste","Number","MAX_SAFE_INTEGER","lastCastMaxEffect","badCasts","addedDuration","GlobalCooldown","onGCD","text","extensionInfo","extendDot","wasted","max","effective","getDotByCast","checkLastCast","afterLastCastSet","lastCastBuffer","isLastCastBad","getLastBadCastText","addBadCast","element","extension","newDuration","maxDuration","lostDuration","abilityTracker","getAbility","badCastsEffectivePercent","AbilityTracker"],"mappings":"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","file":"static/js/AssassinationRogue.02c489e2.chunk.js","sourcesContent":["import SPELLS from 'common/SPELLS';\r\nimport CoreAbilities from 'parser/core/modules/Abilities';\r\nimport COVENANTS from 'game/shadowlands/COVENANTS';\r\n\r\nclass Abilities extends CoreAbilities {\r\n  spellbook() {\r\n    const combatant = this.selectedCombatant;\r\n    return [\r\n      // Rotational\r\n      {\r\n        spell: SPELLS.ENVENOM,\r\n        category: Abilities.SPELL_CATEGORIES.ROTATIONAL,\r\n        gcd: {\r\n          static: 1000,\r\n        },\r\n        buffSpellId: SPELLS.ENVENOM.id,\r\n      },\r\n      {\r\n        spell: SPELLS.GARROTE,\r\n        category: Abilities.SPELL_CATEGORIES.ROTATIONAL,\r\n        // During the Subterfuge buff (from the talent), the spell has no cd\r\n        cooldown: () => {\r\n          if (!combatant.hasTalent(SPELLS.SUBTERFUGE_TALENT.id)) {\r\n            return 6;\r\n          } else {\r\n            const hasStealth =\r\n              combatant.hasBuff(SPELLS.SUBTERFUGE_BUFF.id) ||\r\n              combatant.hasBuff(SPELLS.STEALTH.id) ||\r\n              combatant.hasBuff(SPELLS.STEALTH_BUFF.id) ||\r\n              combatant.hasBuff(SPELLS.VANISH_BUFF.id);\r\n            return hasStealth ? 0 : 6;\r\n          }\r\n        },\r\n        gcd: {\r\n          static: 1000,\r\n        },\r\n        buffSpellId: SPELLS.GARROTE.id,\r\n      },\r\n      {\r\n        spell: SPELLS.MUTILATE,\r\n        category: Abilities.SPELL_CATEGORIES.ROTATIONAL,\r\n        gcd: {\r\n          static: 1000,\r\n        },\r\n      },\r\n      {\r\n        spell: SPELLS.POISONED_KNIFE,\r\n        category: Abilities.SPELL_CATEGORIES.ROTATIONAL,\r\n        gcd: {\r\n          static: 1000,\r\n        },\r\n      },\r\n      {\r\n        spell: SPELLS.RUPTURE,\r\n        category: Abilities.SPELL_CATEGORIES.ROTATIONAL,\r\n        gcd: {\r\n          static: 1000,\r\n        },\r\n        buffSpellId: SPELLS.RUPTURE.id,\r\n      },\r\n      {\r\n        spell: SPELLS.BLINDSIDE_TALENT,\r\n        category: Abilities.SPELL_CATEGORIES.ROTATIONAL,\r\n        gcd: {\r\n          static: 1000,\r\n        },\r\n      },\r\n      {\r\n        spell: SPELLS.MARKED_FOR_DEATH_TALENT,\r\n        category: Abilities.SPELL_CATEGORIES.ROTATIONAL,\r\n        cooldown: 30,\r\n        gcd: null,\r\n        castEfficiency: {\r\n          suggestion: true,\r\n        },\r\n        enabled: combatant.hasTalent(SPELLS.MARKED_FOR_DEATH_TALENT.id),\r\n      },\r\n      {\r\n        spell: SPELLS.CRIMSON_TEMPEST_TALENT,\r\n        category: Abilities.SPELL_CATEGORIES.ROTATIONAL_AOE,\r\n        gcd: {\r\n          static: 1000,\r\n        },\r\n        buffSpellId: SPELLS.CRIMSON_TEMPEST_TALENT.id,\r\n        enabled: combatant.hasTalent(SPELLS.CRIMSON_TEMPEST_TALENT.id),\r\n      },\r\n      // Rotational AOE\r\n      {\r\n        spell: SPELLS.FAN_OF_KNIVES,\r\n        category: Abilities.SPELL_CATEGORIES.ROTATIONAL_AOE,\r\n        gcd: {\r\n          static: 1000,\r\n        },\r\n      },\r\n      // Cooldowns\r\n      {\r\n        spell: SPELLS.VENDETTA,\r\n        category: Abilities.SPELL_CATEGORIES.COOLDOWNS,\r\n        cooldown: 120,\r\n        castEfficiency: {\r\n          suggestion: true,\r\n        },\r\n        gcd: {\r\n          base: 1000,\r\n        },\r\n        buffSpellId: SPELLS.VENDETTA.id,\r\n      },\r\n      {\r\n        spell: SPELLS.VANISH,\r\n        category: Abilities.SPELL_CATEGORIES.COOLDOWNS,\r\n        cooldown: 120,\r\n        castEfficiency: {\r\n          suggestion: true,\r\n        },\r\n        buffSpellId: combatant.hasTalent(SPELLS.SUBTERFUGE_TALENT.id)\r\n          ? SPELLS.SUBTERFUGE_BUFF.id\r\n          : SPELLS.MASTER_ASSASSIN_BUFF.id,\r\n      },\r\n      {\r\n        spell: SPELLS.EXSANGUINATE_TALENT,\r\n        category: Abilities.SPELL_CATEGORIES.COOLDOWNS,\r\n        cooldown: 45,\r\n        gcd: {\r\n          static: 1000,\r\n        },\r\n        enabled: combatant.hasTalent(SPELLS.EXSANGUINATE_TALENT.id),\r\n        castEfficiency: {\r\n          suggestion: true,\r\n        },\r\n      },\r\n      // Defensive\r\n      {\r\n        spell: SPELLS.CLOAK_OF_SHADOWS,\r\n        category: Abilities.SPELL_CATEGORIES.DEFENSIVE,\r\n        cooldown: 120,\r\n        gcd: null,\r\n        buffSpellId: SPELLS.CLOAK_OF_SHADOWS.id,\r\n      },\r\n      {\r\n        spell: SPELLS.CRIMSON_VIAL,\r\n        category: Abilities.SPELL_CATEGORIES.DEFENSIVE,\r\n        cooldown: 30,\r\n        gcd: {\r\n          base: 1000,\r\n        },\r\n        buffSpellId: SPELLS.CRIMSON_VIAL.id,\r\n      },\r\n      {\r\n        spell: SPELLS.EVASION,\r\n        category: Abilities.SPELL_CATEGORIES.DEFENSIVE,\r\n        buffSpellId: SPELLS.EVASION.id,\r\n        cooldown: 120,\r\n        gcd: null,\r\n      },\r\n      {\r\n        spell: SPELLS.FEINT,\r\n        category: Abilities.SPELL_CATEGORIES.DEFENSIVE,\r\n        buffSpellId: SPELLS.FEINT.id,\r\n        cooldown: 15,\r\n        gcd: {\r\n          static: 1000,\r\n        },\r\n      },\r\n      // Others\r\n      {\r\n        spell: SPELLS.DEADLY_POISON,\r\n        category: Abilities.SPELL_CATEGORIES.OTHERS,\r\n      },\r\n      {\r\n        spell: SPELLS.WOUND_POISON,\r\n        category: Abilities.SPELL_CATEGORIES.OTHERS,\r\n      },\r\n      {\r\n        spell: SPELLS.CRIPPLING_POISON,\r\n        category: Abilities.SPELL_CATEGORIES.OTHERS,\r\n      },\r\n      // Utility\r\n      {\r\n        spell: SPELLS.SHADOWSTEP,\r\n        category: Abilities.SPELL_CATEGORIES.UTILITY,\r\n        cooldown: 30,\r\n        gcd: null,\r\n        buffSpellId: SPELLS.SHADOWSTEP.id,\r\n      },\r\n      {\r\n        spell: SPELLS.SPRINT,\r\n        category: Abilities.SPELL_CATEGORIES.UTILITY,\r\n        cooldown: 60,\r\n        gcd: null,\r\n        buffSpellId: SPELLS.SPRINT.id,\r\n      },\r\n      {\r\n        spell: SPELLS.TRICKS_OF_THE_TRADE,\r\n        category: Abilities.SPELL_CATEGORIES.UTILITY,\r\n        cooldown: 30,\r\n        gcd: null,\r\n      },\r\n      {\r\n        spell: SPELLS.BLIND,\r\n        category: Abilities.SPELL_CATEGORIES.UTILITY,\r\n        cooldown: 120,\r\n        gcd: {\r\n          static: 1000,\r\n        },\r\n        buffSpellId: SPELLS.BLIND.id,\r\n      },\r\n      {\r\n        spell: SPELLS.CHEAP_SHOT,\r\n        category: Abilities.SPELL_CATEGORIES.UTILITY,\r\n        gcd: {\r\n          static: 1000,\r\n        },\r\n        buffSpellId: SPELLS.CHEAP_SHOT.id,\r\n      },\r\n      {\r\n        spell: SPELLS.DISTRACT,\r\n        category: Abilities.SPELL_CATEGORIES.UTILITY,\r\n        cooldown: 30,\r\n        gcd: {\r\n          static: 1000,\r\n        },\r\n      },\r\n      {\r\n        spell: SPELLS.KICK,\r\n        category: Abilities.SPELL_CATEGORIES.UTILITY,\r\n        cooldown: 15,\r\n        gcd: null,\r\n      },\r\n      {\r\n        spell: SPELLS.KIDNEY_SHOT,\r\n        category: Abilities.SPELL_CATEGORIES.UTILITY,\r\n        cooldown: 20,\r\n        gcd: {\r\n          static: 1000,\r\n        },\r\n        buffSpellId: SPELLS.KIDNEY_SHOT.id,\r\n      },\r\n      {\r\n        spell: SPELLS.SHROUD_OF_CONCEALMENT,\r\n        category: Abilities.SPELL_CATEGORIES.UTILITY,\r\n        cooldown: 6 * 60,\r\n        gcd: {\r\n          base: 1000,\r\n        },\r\n        buffSpellId: SPELLS.SHROUD_OF_CONCEALMENT.id,\r\n      },\r\n      {\r\n        spell: SPELLS.SAP,\r\n        category: Abilities.SPELL_CATEGORIES.UTILITY,\r\n        buffSpellId: SPELLS.SAP.id,\r\n      },\r\n      {\r\n        spell: SPELLS.PICK_LOCK,\r\n        category: Abilities.SPELL_CATEGORIES.UTILITY,\r\n      },\r\n      {\r\n        spell: SPELLS.PICK_POCKET,\r\n        category: Abilities.SPELL_CATEGORIES.UTILITY,\r\n        // While this actually has a 0.5s CD, it shows up weird in the Abilities tab if we set that\r\n      },\r\n      // Covenant Abilities\r\n      {\r\n        spell: SPELLS.SEPSIS,\r\n        category: Abilities.SPELL_CATEGORIES.COOLDOWNS,\r\n        gcd: {\r\n          base: 1000,\r\n        },\r\n        cooldown: 90,\r\n        enabled: combatant.hasCovenant(COVENANTS.NIGHT_FAE.id),\r\n      },\r\n      {\r\n        spell: SPELLS.FLAGELLATION,\r\n        category: Abilities.SPELL_CATEGORIES.ROTATIONAL,\r\n        gcd: {\r\n          base: 1000,\r\n        },\r\n        enabled: combatant.hasCovenant(COVENANTS.VENTHYR.id),\r\n      },\r\n      {\r\n        spell: SPELLS.ECHOING_REPRIMAND,\r\n        category: Abilities.SPELL_CATEGORIES.ROTATIONAL,\r\n        gcd: {\r\n          base: 1000,\r\n        },\r\n        cooldown: 45,\r\n        enabled: combatant.hasCovenant(COVENANTS.KYRIAN.id),\r\n      },\r\n      {\r\n        spell: SPELLS.SERRATED_BONE_SPIKE,\r\n        category: Abilities.SPELL_CATEGORIES.ROTATIONAL,\r\n        gcd: {\r\n          base: 1000,\r\n        },\r\n        cooldown: 30,\r\n        enabled: combatant.hasCovenant(COVENANTS.NECROLORD.id),\r\n      },\r\n    ];\r\n  }\r\n}\r\n\r\nexport default Abilities;\r\n","import CoreAlwaysBeCasting from 'parser/shared/modules/AlwaysBeCasting';\r\n\r\nclass AlwaysBeCasting extends CoreAlwaysBeCasting {\r\n  get downtimeSuggestionThresholds() {\r\n    return {\r\n      actual: this.downtimePercentage,\r\n      isGreaterThan: {\r\n        minor: 0.4,\r\n        average: 0.45,\r\n        major: 0.5,\r\n      },\r\n      style: 'percentage',\r\n    };\r\n  }\r\n}\r\n\r\nexport default AlwaysBeCasting;\r\n","import SPELLS from 'common/SPELLS';\r\n\r\nimport CoreCooldownThroughputTracker, { BUILT_IN_SUMMARY_TYPES } from 'parser/shared/modules/CooldownThroughputTracker';\r\n\r\nclass CooldownThroughputTracker extends CoreCooldownThroughputTracker {\r\n  static cooldownSpells = [\r\n    ...CoreCooldownThroughputTracker.cooldownSpells,\r\n    {\r\n      spell: SPELLS.VENDETTA,\r\n      summary: [\r\n        BUILT_IN_SUMMARY_TYPES.DAMAGE,\r\n      ],\r\n    },\r\n    {\r\n      spell: SPELLS.SUBTERFUGE_BUFF,\r\n      summary: [\r\n        BUILT_IN_SUMMARY_TYPES.DAMAGE,\r\n      ],\r\n    },\r\n    {\r\n      spell: SPELLS.MASTER_ASSASSIN_BUFF,\r\n      summary: [\r\n        BUILT_IN_SUMMARY_TYPES.DAMAGE,\r\n      ],\r\n    },\r\n  ];\r\n}\r\n\r\nexport default CooldownThroughputTracker;\r\n","import React from 'react';\r\n\r\nimport SPELLS from 'common/SPELLS';\r\nimport SpellLink from 'common/SpellLink';\r\nimport SpellIcon from 'common/SpellIcon';\r\nimport { formatPercentage } from 'common/format';\r\n\r\nimport Analyzer from 'parser/core/Analyzer';\r\nimport Enemies from 'parser/shared/modules/Enemies';\r\nimport StatisticBox from 'interface/others/StatisticBox';\r\nimport STATISTIC_ORDER from 'interface/others/STATISTIC_ORDER';\r\nimport { i18n } from '@lingui/core';\r\nimport { t } from '@lingui/macro';\r\n\r\nclass GarroteUptime extends Analyzer {\r\n  get percentUptime() {\r\n    return this.enemies.getBuffUptime(SPELLS.GARROTE.id) / this.owner.fightDuration;\r\n  }\r\n\r\n  get suggestionThresholds() {\r\n    return {\r\n      actual: this.percentUptime,\r\n      isLessThan: {\r\n        minor: 0.95,\r\n        average: 0.9,\r\n        major: 0.8,\r\n      },\r\n      style: 'percentage',\r\n    };\r\n  }\r\n\r\n  static dependencies = {\r\n    enemies: Enemies,\r\n  };\r\n\r\n  suggestions(when) {\r\n    when(this.suggestionThresholds).addSuggestion((suggest, actual, recommended) => suggest(<>Your <SpellLink id={SPELLS.GARROTE.id} /> uptime can be improved. Try to pay more attention to your <SpellLink id={SPELLS.GARROTE.id} /> on the boss.</>)\r\n      .icon(SPELLS.GARROTE.icon)\r\n      .actual(i18n._(t('rogue.assassination.suggestions.garrote.uptime')`${formatPercentage(actual)}% Garrote uptime`))\r\n      .recommended(`>${formatPercentage(recommended)}% is recommended`));\r\n  }\r\n\r\n  statistic() {\r\n    return (\r\n      <StatisticBox\r\n        position={STATISTIC_ORDER.CORE(11)}\r\n        icon={<SpellIcon id={SPELLS.GARROTE.id} />}\r\n        value={`${formatPercentage(this.percentUptime)} %`}\r\n        label=\"Garrote uptime\"\r\n      />\r\n    );\r\n  }\r\n\r\n}\r\n\r\nexport default GarroteUptime;\r\n","import React from 'react';\r\n\r\nimport SPELLS from 'common/SPELLS';\r\nimport SpellLink from 'common/SpellLink';\r\nimport SpellIcon from 'common/SpellIcon';\r\nimport { formatPercentage } from 'common/format';\r\n\r\nimport Analyzer from 'parser/core/Analyzer';\r\nimport Enemies from 'parser/shared/modules/Enemies';\r\nimport StatisticBox from 'interface/others/StatisticBox';\r\nimport STATISTIC_ORDER from 'interface/others/STATISTIC_ORDER';\r\nimport { i18n } from '@lingui/core';\r\nimport { t } from '@lingui/macro';\r\n\r\nclass RuptureUptime extends Analyzer {\r\n  get percentUptime() {\r\n    return this.enemies.getBuffUptime(SPELLS.RUPTURE.id) / this.owner.fightDuration;\r\n  }\r\n\r\n  get suggestionThresholds() {\r\n    return {\r\n      actual: this.percentUptime,\r\n      isLessThan: {\r\n        minor: 0.95,\r\n        average: 0.9,\r\n        major: 0.8,\r\n      },\r\n      style: 'percentage',\r\n    };\r\n  }\r\n\r\n  static dependencies = {\r\n    enemies: Enemies,\r\n  };\r\n\r\n  suggestions(when) {\r\n    when(this.suggestionThresholds).addSuggestion((suggest, actual, recommended) => suggest(<>Your <SpellLink id={SPELLS.RUPTURE.id} /> uptime can be improved. Try to pay more attention to your <SpellLink id={SPELLS.RUPTURE.id} /> on the boss.</>)\r\n      .icon(SPELLS.RUPTURE.icon)\r\n      .actual(i18n._(t('rogue.assassination.suggestions.rupture.uptime')`${formatPercentage(actual)}% Rupture uptime`))\r\n      .recommended(`>${formatPercentage(recommended)}% is recommended`));\r\n  }\r\n\r\n  statistic() {\r\n    return (\r\n      <StatisticBox\r\n        position={STATISTIC_ORDER.CORE(10)}\r\n        icon={<SpellIcon id={SPELLS.RUPTURE.id} />}\r\n        value={`${formatPercentage(this.percentUptime)} %`}\r\n        label=\"Rupture uptime\"\r\n      />\r\n    );\r\n  }\r\n\r\n}\r\n\r\nexport default RuptureUptime;\r\n","import React from 'react';\r\nimport { formatPercentage, formatDuration } from 'common/format';\r\nimport SpellLink from 'common/SpellLink';\r\nimport { i18n } from '@lingui/core';\r\nimport { t } from '@lingui/macro';\r\n\r\n  function suggest(when, suggestion) {\r\n    when(suggestion).addSuggestion((suggest, actual, recommended) => suggest(<>You refreshed <SpellLink id={suggestion.spell.id} /> early {suggestion.count} times, resulting in {formatDuration(suggestion.wastedDuration/1000)} seconds lost. The individual casts are highlighted on the timeline.</>)\r\n        .icon(suggestion.spell.icon)\r\n        .actual(i18n._(t('shared.suggestions.dots.earlyRefreshes')`${formatPercentage(actual)}% effective refresh duration`))\r\n        .recommended(`>${formatPercentage(recommended)}% is recommended`));\r\n  }\r\n\r\n  export default suggest;\r\n","import SPELLS from 'common/SPELLS';\r\nimport RESOURCE_TYPES from 'game/RESOURCE_TYPES';\r\n\r\nimport EarlyDotRefreshesCore from 'parser/shared/modules/earlydotrefreshes/EarlyDotRefreshes';\r\nimport suggest from 'parser/shared/modules/earlydotrefreshes/EarlyDotRefreshesSuggestion';\r\nimport Events from 'parser/core/Events';\r\nimport { SELECTED_PLAYER } from 'parser/core/Analyzer';\r\n\r\nconst MINOR_THRESHOLD = 0.975;\r\nconst AVERAGE_THRESHOLD = 0.95;\r\nconst MAJOR_THRESHOLD = 0.9;\r\n\r\nclass EarlyDotRefresh extends EarlyDotRefreshesCore {\r\n  get suggestionThresholdsRuptureEfficiency() {\r\n    return this.makeSuggestionThresholds(SPELLS.RUPTURE, MINOR_THRESHOLD, AVERAGE_THRESHOLD, MAJOR_THRESHOLD);\r\n  }\r\n\r\n  get suggestionThresholdsGarroteEfficiency() {\r\n    return this.makeSuggestionThresholds(SPELLS.GARROTE, MINOR_THRESHOLD, AVERAGE_THRESHOLD, MAJOR_THRESHOLD);\r\n  }\r\n\r\n  static dots = [\r\n    {\r\n      name: 'Rupture',\r\n      debuffId: SPELLS.RUPTURE.id,\r\n      castId: SPELLS.RUPTURE.id,\r\n      duration: 20000,\r\n    },\r\n    {\r\n      name: 'Garrote',\r\n      debuffId: SPELLS.GARROTE.id,\r\n      castId: SPELLS.GARROTE.id,\r\n      duration: 18000,\r\n    },\r\n  ];\r\n\r\n  constructor(options) {\r\n    super(options);\r\n    this.addEventListener(Events.SpendResource.by(SELECTED_PLAYER), this.onSpendResource);\r\n  }\r\n\r\n  onSpendResource(event) {\r\n    const comboPointsSpent = event.resourceChange;\r\n    if (event.resourceChangeType !== RESOURCE_TYPES.COMBO_POINTS.id) {\r\n      return;\r\n    }\r\n\r\n    //Update duration.\r\n    this.getDot(SPELLS.RUPTURE.id).duration = (comboPointsSpent * 4 + 4) * 1000;\r\n  }\r\n\r\n  // Checks the status of the last cast and marks it accordingly.\r\n  getLastBadCastText(event, dot) {\r\n    if (dot.castId === SPELLS.RUPTURE.id) {\r\n      return super.getLastBadCastText(event, dot) + ' *Based on the amount of CPs spent.';\r\n    }\r\n    return super.getLastBadCastText(event, dot);\r\n  }\r\n\r\n  suggestions(when) {\r\n    suggest(when, this.suggestionThresholdsRuptureEfficiency);\r\n    suggest(when, this.suggestionThresholdsGarroteEfficiency);\r\n  }\r\n}\r\n\r\nexport default EarlyDotRefresh;\r\n","import React from 'react';\r\n\r\nimport TalentStatisticBox from 'interface/others/TalentStatisticBox';\r\nimport STATISTIC_ORDER from 'interface/others/STATISTIC_ORDER';\r\nimport SPELLS from 'common/SPELLS';\r\nimport SpellLink from 'common/SpellLink';\r\nimport { formatPercentage } from 'common/format';\r\nimport EnemyInstances from 'parser/shared/modules/EnemyInstances';\r\nimport Analyzer, { SELECTED_PLAYER } from 'parser/core/Analyzer';\r\nimport Events from 'parser/core/Events';\r\nimport { i18n } from '@lingui/core';\r\nimport { t } from '@lingui/macro';\r\n\r\nconst BLINDSIDE_EXECUTE = 0.3;\r\nconst MS_BUFFER = 100;\r\n\r\n/**\r\n * Exploits the vulnerability of foes with less than 30% health.\r\n *\r\n * Mutilate has a 25% chance to make your next Blindside free and usable on any target, regardless of their health.\r\n */\r\nclass Blindside extends Analyzer {\r\n  get efficiency() {\r\n    return (this.casts / this.casts + this.badMutilates) || 1;\r\n  }\r\n\r\n  get suggestionThresholds() {\r\n    return {\r\n      actual: this.efficiency,\r\n      isLessThan: {\r\n        minor: 0.95,\r\n        average: 0.9,\r\n        major: 0.8,\r\n      },\r\n      style: 'percentage',\r\n    };\r\n  }\r\n\r\n  static dependencies = {\r\n    enemies: EnemyInstances,\r\n  };\r\n  casts = 0;\r\n  badMutilates = 0;\r\n\r\n  constructor(...args) {\r\n    super(...args);\r\n    this.active = this.selectedCombatant.hasTalent(SPELLS.BLINDSIDE_TALENT.id);\r\n    this.addEventListener(Events.cast.by(SELECTED_PLAYER).spell([SPELLS.BLINDSIDE_TALENT, SPELLS.MUTILATE]), this.onCast);\r\n  }\r\n\r\n  onCast(event) {\r\n    const spellId = event.ability.guid;\r\n    if (spellId === SPELLS.BLINDSIDE_TALENT.id) {\r\n      this.casts += 1;\r\n    }\r\n    if (spellId !== SPELLS.MUTILATE.id) {\r\n      return;\r\n    }\r\n\r\n    //Sometimes buff event is before the cast.\r\n    if (this.selectedCombatant.hasBuff(SPELLS.BLINDSIDE_BUFF.id, event.timestamp - MS_BUFFER)) {\r\n      this.registerBadMutilate(event, 'you had a Blindside Proc');\r\n    }\r\n    const target = this.enemies.getEntity(event);\r\n    if (target && target.hpPercent < BLINDSIDE_EXECUTE) {\r\n      this.registerBadMutilate(event, `health of your target was < ${BLINDSIDE_EXECUTE}% `);\r\n    }\r\n  }\r\n\r\n  registerBadMutilate(event, reason) {\r\n    this.badMutilates += 1;\r\n    event.meta = event.meta || {};\r\n    event.meta.isInefficientCast = true;\r\n    event.meta.inefficientCastReason = `You could cast Blindside, because ${reason}`;\r\n  }\r\n\r\n  suggestions(when) {\r\n    when(this.suggestionThresholds)\r\n      .addSuggestion((suggest, actual, recommended) => suggest(<>Use <SpellLink id={SPELLS.BLINDSIDE_TALENT.id} /> instead of <SpellLink id={SPELLS.MUTILATE.id} /> when the target is bellow 30% HP or when you have the <SpellLink id={SPELLS.BLINDSIDE_BUFF.id} /> proc. </>)\r\n        .icon(SPELLS.BLINDSIDE_TALENT.icon)\r\n        .actual(i18n._(t('rogue.assassination.suggestions.blindside.efficiency')`You used Mutilate ${this.badMutilates} times when Blindside was available`))\r\n        .recommended(`0 is recommended`));\r\n  }\r\n\r\n  statistic() {\r\n    return (\r\n      <TalentStatisticBox\r\n        talent={SPELLS.BLINDSIDE_TALENT.id}\r\n        position={STATISTIC_ORDER.OPTIONAL(1)}\r\n        value={`${formatPercentage(this.efficiency)} %.`}\r\n        label=\"Blindside efficiency\"\r\n        tooltip=\"The efficiency is the number of Blindside casts divided by the number of Blindside casts plus the number of Mutilate casts while Blindside was available.\"\r\n      />\r\n    );\r\n  }\r\n}\r\n\r\nexport default Blindside;\r\n","import React from 'react';\r\nimport SPELLS from 'common/SPELLS';\r\nimport SpellLink from 'common/SpellLink';\r\nimport { formatPercentage } from 'common/format';\r\nimport Analyzer, { SELECTED_PLAYER } from 'parser/core/Analyzer';\r\nimport { encodeTargetString } from 'parser/shared/modules/EnemyInstances';\r\nimport calculateEffectiveDamage from 'parser/core/calculateEffectiveDamage';\r\nimport Events from 'parser/core/Events';\r\nimport { i18n } from '@lingui/core';\r\nimport { t } from '@lingui/macro';\r\n\r\nconst debug = false;\r\n\r\nconst PANDEMIC_FRACTION = 0.3;\r\n\r\nconst NIGHTSTALKER_MULTIPLIER = 1.5;\r\nconst SUBTERFUGE_MULTIPLIER = 1.8;\r\n\r\n/**\r\n * When you cannot refresh a snapshotted DoT with another snaphshotted one, ideally you'd let it tick down.\r\n * Then at the moment that it expires you'd apply a fresh DoT.\r\n * But exact timing is unrealistic, so give some leeway.\r\n */\r\nconst FORGIVE_LOST_TIME = 500;\r\n\r\n/**\r\n * leeway in ms after loss of bloodtalons/prowl buff to count a cast as being buffed.\r\n * Danger of false positives from buffs fading due to causes other than being used to buff a DoT.\r\n */\r\nconst BUFF_WINDOW_TIME = 60;\r\n\r\n// leeway in ms between a cast event and debuff apply/refresh for them to be associated\r\nconst CAST_WINDOW_TIME = 100;\r\n\r\n/**\r\n * Leeway in ms between when a debuff was expected to wear off and when damage events will no longer be counted\r\n * Largest found in logs is 149ms:\r\n * https://www.warcraftlogs.com/reports/8Ddyzh9nRjrxv3JA/#fight=16&source=21\r\n * Moonfire DoT tick at 8:13.300, expected to expire at 8:13.151\r\n */\r\nconst DAMAGE_AFTER_EXPIRE_WINDOW = 200;\r\n\r\n/**\r\n * Assassination has a snapshotting mechanic which means the effect of some buffs are maintained over the duration of\r\n * some DoTs even after the buff has worn off.\r\n * Players should follow a number of rules with regards when they refresh a DoT and when they do not, depending\r\n * on what buffs the DoT has snapshot and what buffs are currently active.\r\n *\r\n * The Snapshot class is 'abstract', and shouldn't be directly instantiated. Instead classes should extend\r\n * it to examine how well the combatant is making use of the snapshot mechanic.\r\n */\r\nclass Snapshot extends Analyzer {\r\n  get lostSnapshotTimePercent() {\r\n    return (this.lostSnapshotTime / this.snapshotTime) || 0;\r\n  }\r\n\r\n  get suggestionThresholds() {\r\n    return {\r\n      actual: this.lostSnapshotTimePercent,\r\n      isGreaterThan: {\r\n        minor: 0.05,\r\n        average: 0.1,\r\n        major: 0.2,\r\n      },\r\n      style: 'percentage',\r\n    };\r\n  }\r\n\r\n  // extending class should fill these in:\r\n  static spellCastId = null;\r\n  static debuffId = null;\r\n  static spellIcon = null;\r\n  stateByTarget = {};\r\n  lastDoTCastEvent;\r\n  talentName = '';\r\n  multiplier = 1;\r\n  bonusDamage = 0;\r\n  lostSnapshotTime = 0;\r\n  snapshotTime = 0;\r\n\r\n  constructor(...args) {\r\n    super(...args);\r\n    if (!this.constructor.spellCastId || !this.constructor.debuffId) {\r\n      this.active = false;\r\n      throw new Error('Snapshot should be extended and provided with spellCastId, debuffId and spellIcon.');\r\n    }\r\n    if (this.selectedCombatant.hasTalent(SPELLS.NIGHTSTALKER_TALENT.id)) {\r\n      this.talentName = 'Nightstalker';\r\n      this.multiplier = NIGHTSTALKER_MULTIPLIER;\r\n    } else if (this.selectedCombatant.hasTalent(SPELLS.SUBTERFUGE_TALENT.id)) {\r\n      this.talentName = 'Subterfuge';\r\n      this.multiplier = SUBTERFUGE_MULTIPLIER;\r\n    } else {\r\n      this.active = false;\r\n    }\r\n    this.addEventListener(Events.cast.by(SELECTED_PLAYER), this.onCast);\r\n    this.addEventListener(Events.prefiltercd.by(SELECTED_PLAYER), this.onCast);\r\n    this.addEventListener(Events.damage.by(SELECTED_PLAYER), this.onDamage);\r\n    this.addEventListener(Events.removedebuff.by(SELECTED_PLAYER), this.onRemoveDebuff);\r\n    this.addEventListener(Events.applydebuff.by(SELECTED_PLAYER), this.onApplyDebuff);\r\n    this.addEventListener(Events.refreshdebuff.by(SELECTED_PLAYER), this.onRefreshDebuff);\r\n\r\n    this.addEventListener(Events.fightend, this.onFightend);\r\n\r\n  }\r\n\r\n  onFightend() {\r\n    debug && console.log('lost: ' + this.lostSnapshotTime / 1000 + ', total: ' + this.snapshotTime / 1000 + ', bonus damage: ' + this.bonusDamage.toFixed(0));\r\n  }\r\n\r\n  onCast(event) {\r\n    if (this.constructor.spellCastId !== event.ability.guid) {\r\n      return;\r\n    }\r\n    this.lastDoTCastEvent = event;\r\n  }\r\n\r\n  onDamage(event) {\r\n    if (this.constructor.debuffId !== event.ability.guid) {\r\n      return;\r\n    }\r\n    if ((event.amount || 0) + (event.absorbed || 0) === 0) {\r\n      // what buffs a zero-damage tick has doesn't matter, so don't count them (usually means target is currently immune to damage)\r\n      return;\r\n    }\r\n    const state = this.stateByTarget[encodeTargetString(event.targetID, event.targetInstance)];\r\n    if (!state || event.timestamp > state.expireTime + DAMAGE_AFTER_EXPIRE_WINDOW) {\r\n      debug && console.warn(`At ${this.owner.formatTimestamp(event.timestamp, 3)} damage detected from DoT ${this.constructor.debuffId} but no active state recorded for the target. Previous state expired: ${state ? this.owner.formatTimestamp(state.expireTime, 3) : 'n/a'}`);\r\n      return;\r\n    }\r\n\r\n    if (state.buffed) {\r\n      this.bonusDamage += calculateEffectiveDamage(event, this.multiplier - 1);\r\n    }\r\n  }\r\n\r\n  onRemoveDebuff(event) {\r\n    if (this.constructor.debuffId !== event.ability.guid) {\r\n      return;\r\n    }\r\n    const targetString = encodeTargetString(event.targetID, event.targetInstance);\r\n    const stateOld = this.stateByTarget[targetString];\r\n    stateOld.expireTime = event.timestamp;\r\n    if (stateOld.buffed) {\r\n      this.snapshotTime += stateOld.expireTime - stateOld.startTime;\r\n    }\r\n  }\r\n\r\n  onApplyDebuff(event) {\r\n    if (this.constructor.debuffId !== event.ability.guid) {\r\n      return;\r\n    }\r\n    this.dotApplied(event);\r\n  }\r\n\r\n  onRefreshDebuff(event) {\r\n    if (this.constructor.debuffId !== event.ability.guid) {\r\n      return;\r\n    }\r\n    this.dotApplied(event);\r\n  }\r\n\r\n  dotApplied(event) {\r\n    const targetString = encodeTargetString(event.targetID, event.targetInstance);\r\n    const stateOld = this.stateByTarget[targetString];\r\n    const stateNew = this.makeNewState(event, stateOld);\r\n    this.stateByTarget[targetString] = stateNew;\r\n\r\n    debug && console.log(`DoT ${this.constructor.debuffId} applied at ${this.owner.formatTimestamp(event.timestamp, 3)} Buffed:${stateNew.buffed}. Expires at ${this.owner.formatTimestamp(stateNew.expireTime, 3)}`);\r\n\r\n    this.checkRefreshRule(stateNew);\r\n  }\r\n\r\n  makeNewState(debuffEvent, stateOld) {\r\n    const timeRemainOnOld = stateOld ? (stateOld.expireTime - debuffEvent.timestamp) : 0;\r\n    let expireNew = debuffEvent.timestamp + this.durationOfFresh;\r\n    if (timeRemainOnOld > 0) {\r\n      expireNew += Math.min(this.durationOfFresh * PANDEMIC_FRACTION, timeRemainOnOld);\r\n    }\r\n\r\n    const combatant = this.selectedCombatant;\r\n    const stateNew = {\r\n      expireTime: expireNew,\r\n      pandemicTime: expireNew - this.durationOfFresh * PANDEMIC_FRACTION,\r\n      buffed: combatant.hasBuff(SPELLS.STEALTH.id, null, BUFF_WINDOW_TIME) ||\r\n        combatant.hasBuff(SPELLS.SUBTERFUGE_BUFF.id, null, BUFF_WINDOW_TIME) ||\r\n        combatant.hasBuff(SPELLS.STEALTH_BUFF.id, null, BUFF_WINDOW_TIME) ||\r\n        combatant.hasBuff(SPELLS.VANISH_BUFF.id, null, BUFF_WINDOW_TIME),\r\n      startTime: debuffEvent.timestamp,\r\n      castEvent: this.lastDoTCastEvent,\r\n\r\n      // undefined if the first application of this debuff on this target\r\n      prev: stateOld,\r\n    };\r\n\r\n    if (!stateNew.castEvent ||\r\n      stateNew.startTime > stateNew.castEvent.timestamp + CAST_WINDOW_TIME) {\r\n      debug && console.warn(`DoT ${this.constructor.debuffId} applied debuff at ${this.owner.formatTimestamp(debuffEvent.timestamp, 3)} doesn't have a recent matching cast event.`);\r\n    }\r\n\r\n    return stateNew;\r\n  }\r\n\r\n  checkRefreshRule(stateNew) {\r\n    const stateOld = stateNew.prev;\r\n    const event = stateNew.castEvent;\r\n    if (stateNew.buffed) {\r\n      event.meta = event.meta || {};\r\n      event.meta.isEnhancedCast = true;\r\n      event.meta.enhancedCastReason = `This cast snapshotted ` + this.talentName;\r\n    }\r\n    if (!stateOld || stateOld.expireTime < stateNew.startTime) {\r\n      // it's not a refresh, so nothing to check\r\n      return;\r\n    }\r\n    if (stateOld.buffed) {\r\n      this.snapshotTime += stateNew.startTime - stateOld.startTime;\r\n    }\r\n    if (!stateOld.buffed || stateNew.buffed) {\r\n      //didn't overwrite a snapshot with a non snapshot\r\n      return;\r\n    }\r\n    // refresh removed a buffed DoT\r\n    const timeLost = stateOld.expireTime - stateNew.startTime;\r\n    this.lostSnapshotTime += timeLost;\r\n    this.snapshotTime += timeLost;\r\n\r\n    // only mark significant time loss events.\r\n    if (timeLost > FORGIVE_LOST_TIME) {\r\n      event.meta = event.meta || {};\r\n      event.meta.isInefficientCast = true;\r\n      event.meta.inefficientCastReason = `You lost ${(timeLost / 1000).toFixed(1)} seconds of a snapshotted DoT by refreshing early without a buff.`;\r\n    }\r\n  }\r\n\r\n  suggestions(when) {\r\n    when(this.suggestionThresholds).addSuggestion((suggest, actual, recommended) => suggest(<>You overwrote your snapshotted <SpellLink id={this.constructor.spellCastId} />. Try to always let a snapshotted <SpellLink id={this.constructor.spellCastId} /> expire before applying a non buffed one.</>)\r\n      .icon(this.constructor.spellIcon)\r\n      .actual(i18n._(t('rogue.assassination.suggestions.snapshot.timeLost')`${formatPercentage(actual)}% snapshot time lost`))\r\n      .recommended(`<${formatPercentage(recommended)}% is recommended`));\r\n  }\r\n\r\n}\r\n\r\nexport default Snapshot;\r\n","import SPELLS from 'common/SPELLS';\r\n\r\nimport Snapshot from '../core/Snapshot';\r\n\r\nconst GARROTE_BASE_DURATION = 18000;\r\n\r\n/**\r\n * Identify inefficient refreshes of the Garrote DoT.\r\n */\r\nclass GarroteSnapshot extends Snapshot {\r\n  get durationOfFresh() {\r\n    return GARROTE_BASE_DURATION;\r\n  }\r\n\r\n  static spellCastId = SPELLS.GARROTE.id;\r\n  static debuffId = SPELLS.GARROTE.id;\r\n  static spellIcon = SPELLS.GARROTE.icon;\r\n}\r\n\r\nexport default GarroteSnapshot;\r\n","import SPELLS from 'common/SPELLS';\r\nimport Analyzer, { SELECTED_PLAYER } from 'parser/core/Analyzer';\r\nimport Events from 'parser/core/Events';\r\n\r\nconst STEALTH_CHECK_BUFFER_MS = 50;\r\n\r\nclass StealthCasts extends Analyzer {\r\n\r\n  stealthSequences = [];\r\n  latestStealth = null;\r\n  usedStealthOnPull = false;\r\n\r\n  constructor(...args) {\r\n    super(...args);\r\n    this.addEventListener(Events.cast.by(SELECTED_PLAYER), this.evaluateCast);\r\n  }\r\n\r\n  evaluateCast(event) {\r\n    if (this.selectedCombatant.hasBuff(SPELLS.STEALTH_BUFF.id, null, STEALTH_CHECK_BUFFER_MS) ||\r\n      this.selectedCombatant.hasBuff(SPELLS.STEALTH.id, null, STEALTH_CHECK_BUFFER_MS)) {\r\n      this.usedStealthOnPull = true;\r\n    }\r\n    if (!this.selectedCombatant.hasBuff(SPELLS.STEALTH_BUFF.id) &&\r\n      !this.selectedCombatant.hasBuff(SPELLS.STEALTH.id) &&\r\n      !this.selectedCombatant.hasBuff(SPELLS.VANISH_BUFF.id) &&\r\n      !this.selectedCombatant.hasBuff(SPELLS.SUBTERFUGE_BUFF.id) &&\r\n      !this.selectedCombatant.hasBuff(SPELLS.MASTER_ASSASSIN_BUFF.id)) {\r\n\r\n      if (this.latestStealth) {\r\n        this.latestStealth = null;\r\n      }\r\n      return;\r\n    }\r\n    if (!this.latestStealth) {\r\n      this.latestStealth = [];\r\n      this.stealthSequences.push(this.latestStealth);\r\n    }\r\n    this.latestStealth.push(event);\r\n  }\r\n\r\n}\r\n\r\nexport default StealthCasts;\r\n","import React from 'react';\r\n\r\nimport TalentStatisticBox from 'interface/others/TalentStatisticBox';\r\nimport STATISTIC_ORDER from 'interface/others/STATISTIC_ORDER';\r\nimport ItemDamageDone from 'interface/ItemDamageDone';\r\nimport SPELLS from 'common/SPELLS';\r\nimport SpellLink from 'common/SpellLink';\r\nimport { formatPercentage } from 'common/format';\r\nimport { i18n } from '@lingui/core';\r\nimport { t } from '@lingui/macro';\r\n\r\nimport GarroteSnapshot from '../features/GarroteSnapshot';\r\nimport StealthCasts from './StealthCasts';\r\n\r\nclass Subterfuge extends StealthCasts {\r\n  get bonusDamage() {\r\n    return this.garroteSnapshot.bonusDamage;\r\n  }\r\n\r\n  get stealthsWithAtleastOneGarrote() {\r\n    let stealthsWithGarrote = 0;\r\n    this.stealthSequences.forEach(sequence => {\r\n      const firstGarroteCast = sequence.find(e => e.ability.guid === SPELLS.GARROTE.id);\r\n      if (firstGarroteCast) {\r\n        stealthsWithGarrote += 1;\r\n      }\r\n    });\r\n    return stealthsWithGarrote;\r\n  }\r\n\r\n  get stealthCasts() {\r\n    return this.stealthSequences.length;\r\n  }\r\n\r\n  get percentGoodStealthCasts() {\r\n    return (this.stealthsWithAtleastOneGarrote / this.stealthCasts) || 0;\r\n  }\r\n\r\n  get suggestionThresholds() {\r\n    return {\r\n      actual: this.percentGoodStealthCasts,\r\n      isLessThan: {\r\n        minor: 0.95,\r\n        average: 0.9,\r\n        major: 0.8,\r\n      },\r\n      style: 'percentage',\r\n    };\r\n  }\r\n\r\n  static dependencies = {\r\n    garroteSnapshot: GarroteSnapshot,\r\n  };\r\n\r\n  constructor(...args) {\r\n    super(...args);\r\n    this.active = this.selectedCombatant.hasTalent(SPELLS.SUBTERFUGE_TALENT.id);\r\n  }\r\n\r\n  suggestions(when) {\r\n    when(this.suggestionThresholds).addSuggestion((suggest, actual, recommended) => suggest(<>Your failed to cast atleast one <SpellLink id={SPELLS.GARROTE.id} /> during <SpellLink id={SPELLS.SUBTERFUGE_BUFF.id} /> {this.stealthCasts - this.stealthsWithAtleastOneGarrote} time(s). Make sure to prioritize snapshotting <SpellLink id={SPELLS.GARROTE.id} /> during <SpellLink id={SPELLS.SUBTERFUGE_BUFF.id} />.</>)\r\n      .icon(SPELLS.GARROTE.icon)\r\n      .actual(i18n._(t('rogue.assassinations.suggestions.subterfuge.efficiency')`${formatPercentage(actual)}% of Subterfuges with atleast one Garrote cast`))\r\n      .recommended(`>${formatPercentage(recommended)}% is recommended`));\r\n  }\r\n\r\n  statistic() {\r\n    return (\r\n      <TalentStatisticBox\r\n        talent={SPELLS.SUBTERFUGE_TALENT.id}\r\n        position={STATISTIC_ORDER.OPTIONAL(2)}\r\n        value={<ItemDamageDone amount={this.bonusDamage} />}\r\n        tooltip={`You casted atleast one Garrote during Subterfuge ${this.stealthsWithAtleastOneGarrote} times out of ${this.stealthCasts}.`}\r\n      />\r\n    );\r\n  }\r\n\r\n}\r\n\r\nexport default Subterfuge;\r\n","import React from 'react';\r\nimport PropTypes from 'prop-types';\r\n\r\nimport SPELLS from 'common/SPELLS';\r\nimport SpellLink from 'common/SpellLink';\r\nimport Checklist from 'parser/shared/modules/features/Checklist';\r\nimport Rule from 'parser/shared/modules/features/Checklist/Rule';\r\nimport Requirement from 'parser/shared/modules/features/Checklist/Requirement';\r\nimport PreparationRule from 'parser/shared/modules/features/Checklist/PreparationRule';\r\nimport GenericCastEfficiencyRequirement from 'parser/shared/modules/features/Checklist/GenericCastEfficiencyRequirement';\r\n\r\nconst AssassinationRogueChecklist = ({ combatant, castEfficiency, thresholds }) => {\r\n  const AbilityRequirement = props => (\r\n    <GenericCastEfficiencyRequirement\r\n      castEfficiency={castEfficiency.getCastEfficiencyForSpellId(props.spell)}\r\n      {...props}\r\n    />\r\n  );\r\n  AbilityRequirement.propTypes = {\r\n    spell: PropTypes.number.isRequired,\r\n  };\r\n\r\n  return (\r\n    <Checklist>\r\n      <Rule\r\n        name=\"Maintain your DoTs on the boss\"\r\n        description=\"DoTs are a big part of your damage. You should try to keep as high uptime on them as possible, but do not refresh them too early\"\r\n      >\r\n        <Requirement\r\n          name={(\r\n            <>\r\n              <SpellLink id={SPELLS.GARROTE.id} /> uptime\r\n            </>\r\n          )}\r\n          thresholds={thresholds.garroteUptime}\r\n        />\r\n        <Requirement\r\n          name={(\r\n            <>\r\n              <SpellLink id={SPELLS.RUPTURE.id} /> uptime\r\n            </>\r\n          )}\r\n          thresholds={thresholds.ruptureUptime}\r\n        />\r\n        <Requirement\r\n          name={(\r\n            <>\r\n              <SpellLink id={SPELLS.GARROTE.id} /> effective refresh duration\r\n            </>\r\n          )}\r\n          thresholds={thresholds.garroteEfficiency}\r\n        />\r\n        <Requirement\r\n          name={(\r\n            <>\r\n              <SpellLink id={SPELLS.RUPTURE.id} /> effective refresh duration\r\n            </>\r\n          )}\r\n          thresholds={thresholds.ruptureEfficiency}\r\n        />\r\n      </Rule>\r\n      <Rule\r\n        name=\"Do not overcap your resources\"\r\n        description=\"You should try to always avoid overcapping your Energy and Combo Points.\"\r\n      >\r\n        <Requirement name=\"Energy generator efficiency\" thresholds={thresholds.energyEfficiency} />\r\n        <Requirement name=\"Combo Point efficiency\" thresholds={thresholds.comboPointEfficiency} />\r\n        <Requirement name=\"Energy regeneration efficiency\" thresholds={thresholds.energyCapEfficiency} />\r\n        {combatant.hasTalent(SPELLS.BLINDSIDE_TALENT.id) && (\r\n          <Requirement\r\n            name={(\r\n              <>\r\n                <SpellLink id={SPELLS.BLINDSIDE_TALENT.id} /> efficiency\r\n              </>\r\n            )}\r\n            thresholds={thresholds.blindsideEfficiency}\r\n          />\r\n        )}\r\n      </Rule>\r\n      <Rule\r\n        name=\"Use your cooldowns\"\r\n        description=\"Your cooldowns are a major contributor to your DPS, and should be used as frequently as possible throughout a fight. A cooldown should be held on to only if a priority DPS phase is coming soon. Holding cooldowns too long will hurt your DPS.\"\r\n      >\r\n        <AbilityRequirement spell={SPELLS.VENDETTA.id} />\r\n        {combatant.hasTalent(SPELLS.EXSANGUINATE_TALENT.id) && (\r\n          <AbilityRequirement spell={SPELLS.EXSANGUINATE_TALENT.id} />\r\n        )}\r\n        {combatant.hasTalent(SPELLS.MARKED_FOR_DEATH_TALENT.id) && (\r\n          <AbilityRequirement spell={SPELLS.MARKED_FOR_DEATH_TALENT.id} />\r\n        )}\r\n      </Rule>\r\n      <Rule\r\n        name=\"Maximize Vanish usage\"\r\n        description=\"Your level 30 talent turns Vanish into a powerful DPS cooldown, significantly buffing the next 1-3 casts. Making sure to cast the correct abilities during this short window is important to maximizing your DPS. Check Suggestions for more details.\"\r\n      >\r\n        <AbilityRequirement spell={SPELLS.VANISH.id} />\r\n        {combatant.hasTalent(SPELLS.SUBTERFUGE_TALENT.id) && (\r\n          <Requirement\r\n            name={(\r\n              <>\r\n                <SpellLink id={SPELLS.SUBTERFUGE_BUFF.id} />s with atleast one <SpellLink id={SPELLS.GARROTE.id} /> cast\r\n              </>\r\n            )}\r\n            thresholds={thresholds.subterfugeEfficiency}\r\n          />\r\n        )}\r\n        {combatant.hasTalent(SPELLS.MASTER_ASSASSIN_TALENT.id) && (\r\n          <Requirement\r\n            name={(\r\n              <>\r\n                Good casts during <SpellLink id={SPELLS.MASTER_ASSASSIN_TALENT.id} />\r\n              </>\r\n            )}\r\n            thresholds={thresholds.masterAssassinEfficiency}\r\n          />\r\n        )}\r\n        {combatant.hasTalent(SPELLS.NIGHTSTALKER_TALENT.id) && (\r\n          <Requirement\r\n            name={(\r\n              <>\r\n                <SpellLink id={SPELLS.VANISH.id} />es spent on snapshotting <SpellLink id={SPELLS.RUPTURE.id} />\r\n              </>\r\n            )}\r\n            thresholds={thresholds.nightstalkerEfficiency}\r\n          />\r\n        )}\r\n        {combatant.hasTalent(SPELLS.NIGHTSTALKER_TALENT.id) && (\r\n          <Requirement\r\n            name={(\r\n              <>\r\n                On pull opener spent on snapshotting <SpellLink id={SPELLS.RUPTURE.id} /> or <SpellLink id={SPELLS.GARROTE.id} />\r\n              </>\r\n            )}\r\n            thresholds={thresholds.nightstalkerOpenerEfficiency}\r\n          />\r\n        )}\r\n        {(combatant.hasTalent(SPELLS.NIGHTSTALKER_TALENT.id)) && (\r\n          <Requirement\r\n            name={(\r\n              <>\r\n                Lost snapshotted <SpellLink id={SPELLS.RUPTURE.id} /> due to early refreshes\r\n              </>\r\n            )}\r\n            thresholds={thresholds.garroteSnapshotEfficiency}\r\n          />\r\n        )}\r\n        {(combatant.hasTalent(SPELLS.SUBTERFUGE_TALENT.id) || combatant.hasTalent(SPELLS.NIGHTSTALKER_TALENT.id)) && (\r\n          <Requirement\r\n            name={(\r\n              <>\r\n                Lost snapshotted <SpellLink id={SPELLS.GARROTE.id} /> due to early refreshes\r\n              </>\r\n            )}\r\n            thresholds={thresholds.garroteSnapshotEfficiency}\r\n          />\r\n        )}\r\n      </Rule>\r\n      <PreparationRule thresholds={thresholds} />\r\n    </Checklist>\r\n  );\r\n};\r\n\r\nAssassinationRogueChecklist.propTypes = {\r\n  castEfficiency: PropTypes.object.isRequired,\r\n  combatant: PropTypes.shape({\r\n    hasTalent: PropTypes.func.isRequired,\r\n  }).isRequired,\r\n  thresholds: PropTypes.object.isRequired,\r\n};\r\n\r\nexport default AssassinationRogueChecklist;\r\n","import SPELLS from 'common/SPELLS';\r\nimport RESOURCE_TYPES from 'game/RESOURCE_TYPES';\r\n\r\nimport { SELECTED_PLAYER } from 'parser/core/Analyzer';\r\nimport Events from 'parser/core/Events';\r\n\r\nimport Snapshot from '../core/Snapshot';\r\n\r\nconst BASE_DURATION = 4000;\r\nconst COMBO_POINT_DURATION = 4000;\r\n\r\n/**\r\n * Identify inefficient refreshes of the Rupture DoT.\r\n */\r\nclass RuptureSnapshot extends Snapshot {\r\n  get durationOfFresh() {\r\n    return BASE_DURATION + this.comboPointsOnLastCast * COMBO_POINT_DURATION;\r\n  }\r\n\r\n  static spellCastId = SPELLS.RUPTURE.id;\r\n  static debuffId = SPELLS.RUPTURE.id;\r\n  static spellIcon = SPELLS.RUPTURE.icon;\r\n  comboPointsOnLastCast = 0;\r\n\r\n  constructor(...args) {\r\n    super(...args);\r\n    const combatant = this.selectedCombatant;\r\n    if (combatant.hasTalent(SPELLS.SUBTERFUGE_TALENT.id)) {\r\n      this.active = false;\r\n    }\r\n    this.addEventListener(Events.SpendResource.by(SELECTED_PLAYER).spell(SPELLS.RUPTURE), this.onSpendResource);\r\n  }\r\n\r\n  onSpendResource(event) {\r\n    if (event.resourceChangeType === RESOURCE_TYPES.COMBO_POINTS.id) {\r\n      this.comboPointsOnLastCast = event.resourceChange;\r\n    }\r\n  }\r\n}\r\n\r\nexport default RuptureSnapshot;\r\n","import SPELLS from 'common/SPELLS';\r\n\r\n// from https://www.wowhead.com/spell=137037/assassination-rogue\r\nexport const ABILITIES_AFFECTED_BY_DAMAGE_INCREASES = [\r\n  SPELLS.MELEE,\r\n  SPELLS.BLINDSIDE_TALENT,\r\n  SPELLS.CRIMSON_TEMPEST_TALENT,\r\n  SPELLS.ENVENOM,\r\n  SPELLS.FAN_OF_KNIVES,\r\n  SPELLS.GARROTE,\r\n  SPELLS.MUTILATE,\r\n  SPELLS.MUTILATE_MAINHAND,\r\n  SPELLS.MUTILATE_OFFHAND,\r\n  SPELLS.POISON_BOMB,\r\n  SPELLS.POISONED_KNIFE,\r\n  SPELLS.RUPTURE,\r\n  SPELLS.DOUBLE_DOSE,\r\n  SPELLS.INTERNAL_BLEEDING_TALENT,\r\n  SPELLS.DEADLY_POISON_DOT,\r\n  SPELLS.DEADLY_POISON_PROC,\r\n  SPELLS.WOUND_POISON,\r\n];\r\n\r\n// from https://www.wowhead.com/spell=196864/master-poisoner\r\nexport const ABILITIES_AFFECTED_BY_POISON_DAMAGE_INCREASES = [\r\n  SPELLS.DEADLY_POISON_DOT,\r\n  SPELLS.DEADLY_POISON_PROC,\r\n  SPELLS.WOUND_POISON,\r\n];\r\n\r\nexport const NIGHTSTALKER_BLACKLIST = [\r\n  SPELLS.MELEE,\r\n  SPELLS.RUPTURE,\r\n  SPELLS.GARROTE,\r\n  SPELLS.CRIMSON_TEMPEST_TALENT,\r\n  SPELLS.DEADLY_POISON_DOT,\r\n\r\n];\r\n","import React from 'react';\r\n\r\nimport TalentStatisticBox from 'interface/others/TalentStatisticBox';\r\nimport STATISTIC_ORDER from 'interface/others/STATISTIC_ORDER';\r\nimport ItemDamageDone from 'interface/ItemDamageDone';\r\nimport SPELLS from 'common/SPELLS';\r\nimport SpellLink from 'common/SpellLink';\r\nimport { formatPercentage } from 'common/format';\r\nimport calculateEffectiveDamage from 'parser/core/calculateEffectiveDamage';\r\nimport { SELECTED_PLAYER } from 'parser/core/Analyzer';\r\nimport Events from 'parser/core/Events';\r\nimport { i18n } from '@lingui/core';\r\nimport { t } from '@lingui/macro';\r\n\r\nimport StealthCasts from './StealthCasts';\r\nimport { ABILITIES_AFFECTED_BY_DAMAGE_INCREASES, NIGHTSTALKER_BLACKLIST } from '../../constants';\r\nimport GarroteSnapshot from '../features/GarroteSnapshot';\r\nimport RuptureSnapshot from '../features/RuptureSnapshot';\r\n\r\nconst DAMAGE_BONUS = 0.5;\r\n\r\nclass Nightstalker extends StealthCasts {\r\n  get bonusDamageTotal() {\r\n    return this.bonusDamage + this.garroteSnapshot.bonusDamage + this.ruptureSnapshot.bonusDamage;\r\n  }\r\n\r\n  get vanishCastsSpentOnRupture() {\r\n    let vanishWithRupture = 0;\r\n    this.stealthSequences.forEach(sequence => {\r\n      if (this.usedStealthOnPull && sequence === this.stealthSequences[0]) {\r\n        return;\r\n      }\r\n      const firstRuptureCast = sequence.find(e => e.ability.guid === SPELLS.RUPTURE.id);\r\n      if (firstRuptureCast) {\r\n        vanishWithRupture += 1;\r\n      }\r\n    });\r\n    return vanishWithRupture;\r\n  }\r\n\r\n  get goodOpenerCasts() {\r\n    if (!this.usedStealthOnPull || !this.stealthSequences.length) {\r\n      return false;\r\n    }\r\n\r\n    const RuptureOpener = this.stealthSequences[0].find(e => e.ability.guid === SPELLS.RUPTURE.id);\r\n    const GarroteOpener = this.stealthSequences[0].find(e => e.ability.guid === SPELLS.GARROTE.id);\r\n    if (RuptureOpener || GarroteOpener) {\r\n      return true;\r\n    }\r\n    return false;\r\n  }\r\n\r\n  get vanishCasts() {\r\n    return this.stealthSequences.length - (this.usedStealthOnPull ? 1 : 0);\r\n  }\r\n\r\n  get percentGoodVanishCasts() {\r\n    return (this.vanishCastsSpentOnRupture / this.vanishCasts) || 0;\r\n  }\r\n\r\n  get suggestionThresholds() {\r\n    return {\r\n      actual: this.percentGoodVanishCasts,\r\n      isLessThan: {\r\n        minor: 0.95,\r\n        average: 0.9,\r\n        major: 0.8,\r\n      },\r\n      style: 'percentage',\r\n    };\r\n  }\r\n\r\n  get suggestionThresholdsOpener() {\r\n    return {\r\n      actual: this.goodOpenerCasts,\r\n      isEqual: false,\r\n      style: 'boolean',\r\n    };\r\n  }\r\n\r\n  static dependencies = {\r\n    garroteSnapshot: GarroteSnapshot,\r\n    ruptureSnapshot: RuptureSnapshot,\r\n  };\r\n  bonusDamage = 0;\r\n\r\n  constructor(...args) {\r\n    super(...args);\r\n    this.active = this.selectedCombatant.hasTalent(SPELLS.NIGHTSTALKER_TALENT.id);\r\n    if (!this.active) {\r\n      return;\r\n    }\r\n    const allowedAbilities = ABILITIES_AFFECTED_BY_DAMAGE_INCREASES.filter(spell => !NIGHTSTALKER_BLACKLIST.includes(spell));\r\n    this.addEventListener(Events.damage.by(SELECTED_PLAYER).spell(allowedAbilities), this.addBonusDamageIfBuffed);\r\n  }\r\n\r\n  addBonusDamageIfBuffed(event) {\r\n    if (!this.selectedCombatant.hasBuff(SPELLS.STEALTH.id) &&\r\n      !this.selectedCombatant.hasBuff(SPELLS.STEALTH_BUFF.id) &&\r\n      !this.selectedCombatant.hasBuff(SPELLS.VANISH_BUFF.id)) {\r\n      return;\r\n    }\r\n    this.bonusDamage += calculateEffectiveDamage(event, DAMAGE_BONUS);\r\n  }\r\n\r\n  suggestions(when) {\r\n    when(this.suggestionThresholds).addSuggestion((suggest, actual, recommended) => suggest(<>Your failed to cast <SpellLink id={SPELLS.RUPTURE.id} /> after <SpellLink id={SPELLS.VANISH.id} /> {this.vanishCasts - this.vanishCastsSpentOnRupture} time(s). Make sure to prioritize spending your Vanish on snapshotting <SpellLink id={SPELLS.RUPTURE.id} /> when using <SpellLink id={SPELLS.NIGHTSTALKER_TALENT.id} />.</>)\r\n      .icon(SPELLS.GARROTE.icon)\r\n      .actual(i18n._(t('rogue.assassination.suggestions.nightstalker.snapshots')`${formatPercentage(actual)}% of Vanishes used to snapshot Rupture`))\r\n      .recommended(`>${formatPercentage(recommended)}% is recommended`));\r\n    when(this.suggestionThresholdsOpener).isFalse().addSuggestion((suggest, actual, recommended) => suggest(<>You failed to snapshot a <SpellLink id={SPELLS.RUPTURE.id} /> or <SpellLink id={SPELLS.GARROTE.id} /> on pull from stealth. Make sure your first cast when using <SpellLink id={SPELLS.NIGHTSTALKER_TALENT.id} /> is a <SpellLink id={SPELLS.RUPTURE.id} /> or <SpellLink id={SPELLS.GARROTE.id} />.</>)\r\n      .icon(SPELLS.NIGHTSTALKER_TALENT.icon));\r\n  }\r\n\r\n  statistic() {\r\n    return (\r\n      <TalentStatisticBox\r\n        talent={SPELLS.NIGHTSTALKER_TALENT.id}\r\n        position={STATISTIC_ORDER.OPTIONAL(2)}\r\n        value={<ItemDamageDone amount={this.bonusDamageTotal} />}\r\n      />\r\n    );\r\n  }\r\n\r\n}\r\n\r\nexport default Nightstalker;\r\n","import React from 'react';\r\n\r\nimport TalentStatisticBox from 'interface/others/TalentStatisticBox';\r\nimport STATISTIC_ORDER from 'interface/others/STATISTIC_ORDER';\r\nimport ItemDamageDone from 'interface/ItemDamageDone';\r\nimport SPELLS from 'common/SPELLS';\r\nimport SpellLink from 'common/SpellLink';\r\nimport { formatPercentage } from 'common/format';\r\nimport { SELECTED_PLAYER } from 'parser/core/Analyzer';\r\nimport Events from 'parser/core/Events';\r\nimport calculateEffectiveDamage from 'parser/core/calculateEffectiveDamage';\r\nimport StatTracker from 'parser/shared/modules/StatTracker';\r\nimport { i18n } from '@lingui/core';\r\nimport { t } from '@lingui/macro';\r\n\r\nimport StealthCasts from './StealthCasts';\r\nimport { ABILITIES_AFFECTED_BY_DAMAGE_INCREASES } from '../../constants';\r\n\r\nconst CRIT_BONUS = 0.5;\r\n\r\nconst CASTS_POSSIBLE = 3;\r\nconst GOOD_MASTER_ASSASSIN_ABILITIES = [\r\n  SPELLS.MUTILATE.id,\r\n  SPELLS.ENVENOM.id,\r\n  SPELLS.FAN_OF_KNIVES.id,\r\n];\r\nconst GOOD_OPENER_CASTS = [...GOOD_MASTER_ASSASSIN_ABILITIES, SPELLS.GARROTE.id, SPELLS.RUPTURE.id];\r\n\r\nclass MasterAssassin extends StealthCasts {\r\n  get goodStealthCasts() {\r\n    let goodCasts = 0;\r\n    this.stealthSequences.forEach(sequence => {\r\n      const goodSpells = sequence === this.stealthSequences[0] || (this.usedStealthOnPull && sequence === this.stealthSequences[1]) ? GOOD_OPENER_CASTS : GOOD_MASTER_ASSASSIN_ABILITIES;\r\n      let goodCastsSeq = 0;\r\n      sequence.forEach(e => {\r\n        if (goodSpells.includes(e.ability.guid)) {\r\n          goodCastsSeq += 1;\r\n        }\r\n      });\r\n      goodCasts += Math.min(goodCastsSeq, CASTS_POSSIBLE);\r\n    });\r\n    return goodCasts;\r\n  }\r\n\r\n  get stealthCasts() {\r\n    return this.stealthSequences.length;\r\n  }\r\n\r\n  get percentGoodCasts() {\r\n    return (this.goodStealthCasts / (this.stealthCasts * CASTS_POSSIBLE)) || 0;\r\n  }\r\n\r\n  get suggestionThresholds() {\r\n    return {\r\n      actual: this.percentGoodCasts,\r\n      isLessThan: {\r\n        minor: 0.95,\r\n        average: 0.9,\r\n        major: 0.8,\r\n      },\r\n      style: 'percentage',\r\n    };\r\n  }\r\n\r\n  static dependencies = {\r\n    statTracker: StatTracker,\r\n  };\r\n  bonusDamage = 0;\r\n\r\n  constructor(...args) {\r\n    super(...args);\r\n    this.active = this.selectedCombatant.hasTalent(SPELLS.MASTER_ASSASSIN_TALENT.id);\r\n    if (!this.active) {\r\n      return;\r\n    }\r\n    this.addEventListener(Events.damage.by(SELECTED_PLAYER).spell(ABILITIES_AFFECTED_BY_DAMAGE_INCREASES), this.addBonusDamageIfBuffed);\r\n  }\r\n\r\n  addBonusDamageIfBuffed(event) {\r\n    if (!this.selectedCombatant.hasBuff(SPELLS.MASTER_ASSASSIN_BUFF.id)) {\r\n      return;\r\n    }\r\n    const critChance = this.statTracker.currentCritPercentage;\r\n    const critBonusFromMasterAssassin = Math.min(CRIT_BONUS, 1 - critChance);\r\n    const damageBonus = critBonusFromMasterAssassin / (1 + critBonusFromMasterAssassin + critChance);\r\n    this.bonusDamage += calculateEffectiveDamage(event, damageBonus);\r\n  }\r\n\r\n  suggestions(when) {\r\n    when(this.suggestionThresholds).addSuggestion((suggest, actual, recommended) => suggest(<>You failed to take full advantage of <SpellLink id={SPELLS.MASTER_ASSASSIN_TALENT.id} />. Make sure to prioritize spending the buff on <SpellLink id={SPELLS.MUTILATE.id} /> or <SpellLink id={SPELLS.ENVENOM.id} /> (<SpellLink id={SPELLS.FAN_OF_KNIVES.id} /> is acceptable for AOE). During your opener <SpellLink id={SPELLS.GARROTE.id} />, <SpellLink id={SPELLS.RUPTURE.id} /> and <SpellLink id={SPELLS.TOXIC_BLADE_TALENT.id} /> is also okay.</>)\r\n      .icon(SPELLS.MASTER_ASSASSIN_TALENT.icon)\r\n      .actual(i18n._(t('rogue.assassination.suggestions.masterAssassin.efficiency')`${formatPercentage(actual)}% good casts during Master Assassin`))\r\n      .recommended(`>${formatPercentage(recommended)}% is recommended`));\r\n  }\r\n\r\n  statistic() {\r\n    return (\r\n      <TalentStatisticBox\r\n        talent={SPELLS.MASTER_ASSASSIN_TALENT.id}\r\n        position={STATISTIC_ORDER.OPTIONAL(2)}\r\n        value={<ItemDamageDone amount={this.bonusDamage} />}\r\n      />\r\n    );\r\n  }\r\n\r\n}\r\n\r\nexport default MasterAssassin;\r\n","import React from 'react';\r\n\r\nimport BaseChecklist from 'parser/shared/modules/features/Checklist/Module';\r\nimport CastEfficiency from 'parser/shared/modules/CastEfficiency';\r\nimport Combatants from 'parser/shared/modules/Combatants';\r\nimport PreparationRuleAnalyzer from 'parser/shared/modules/features/Checklist/PreparationRuleAnalyzer';\r\n\r\nimport GarroteUptime from '../../spells/GarroteUptime';\r\nimport RuptureUptime from '../../spells/RuptureUptime';\r\nimport EarlyDotRefresh from '../../spells/EarlyDotRefresh';\r\n\r\nimport Blindside from '../../talents/Blindside';\r\n\r\nimport EnergyDetails from '../../../../shared/resources/EnergyDetails';\r\nimport EnergyCapTracker from '../../../../shared/resources/EnergyCapTracker';\r\nimport ComboPointDetails from '../../../../shared/resources/ComboPointDetails';\r\n\r\nimport Subterfuge from '../../talents/Subterfuge';\r\n\r\nimport Component from './Component';\r\nimport GarroteSnapshot from '../GarroteSnapshot';\r\nimport RuptureSnapshot from '../RuptureSnapshot';\r\nimport Nightstalker from '../../talents/Nightstalker';\r\nimport MasterAssassin from '../../talents/MasterAssassin';\r\n\r\nclass Checklist extends BaseChecklist {\r\n  static dependencies = {\r\n    combatants: Combatants,\r\n    castEfficiency: CastEfficiency,\r\n    preparationRuleAnalyzer: PreparationRuleAnalyzer,\r\n\r\n    garroteUptime: GarroteUptime,\r\n    ruptureUptime: RuptureUptime,\r\n    earlyDotRefresh: EarlyDotRefresh,\r\n\r\n    blindside: Blindside,\r\n\r\n    energyDetails: EnergyDetails,\r\n    energyCapTracker: EnergyCapTracker,\r\n    comboPointDetails: ComboPointDetails,\r\n\r\n    subterfuge: Subterfuge,\r\n    nightstalker: Nightstalker,\r\n    masterAssassin: MasterAssassin,\r\n    garroteSnapshot: GarroteSnapshot,\r\n    ruptureSnapshot: RuptureSnapshot,\r\n  };\r\n\r\n  render() {\r\n    return (\r\n      <Component\r\n        combatant={this.combatants.selected}\r\n        castEfficiency={this.castEfficiency}\r\n        thresholds={{\r\n          ...this.preparationRuleAnalyzer.thresholds,\r\n\r\n          garroteUptime: this.garroteUptime.suggestionThresholds,\r\n          ruptureUptime: this.ruptureUptime.suggestionThresholds,\r\n          garroteEfficiency: this.earlyDotRefresh.suggestionThresholdsGarroteEfficiency,\r\n          ruptureEfficiency: this.earlyDotRefresh.suggestionThresholdsRuptureEfficiency,\r\n\r\n          blindsideEfficiency: this.blindside.suggestionThresholds,\r\n\r\n          energyEfficiency: this.energyDetails.suggestionThresholds,\r\n          energyCapEfficiency: this.energyCapTracker.suggestionThresholds,\r\n          comboPointEfficiency: this.comboPointDetails.suggestionThresholds,\r\n\r\n          subterfugeEfficiency: this.subterfuge.suggestionThresholds,\r\n          nightstalkerEfficiency: this.nightstalker.suggestionThresholds,\r\n          nightstalkerOpenerEfficiency: this.nightstalker.suggestionThresholdsOpener,\r\n          masterAssassinEfficiency: this.masterAssassin.suggestionThresholds,\r\n          ruptureSnapshotEfficiency: this.ruptureSnapshot.suggestionThresholds,\r\n          garroteSnapshotEfficiency: this.garroteSnapshot.suggestionThresholds,\r\n        }}\r\n      />\r\n    );\r\n  }\r\n}\r\n\r\nexport default Checklist;\r\n","import SPELLS from 'common/SPELLS';\r\nimport EventsNormalizer from 'parser/core/EventsNormalizer';\r\nimport { EventType } from 'parser/core/Events';\r\n\r\n/**\r\n * For some reason Garrote refreshes sometimes have a removebuff and applybuff event when it should have a refreshbuff event.\r\n *\r\n * @param {Array} events\r\n * @returns {Array} Events possibly with some reordered.\r\n */\r\nclass GarroteNormalizer extends EventsNormalizer {\r\n\r\n  normalize(events) {\r\n    const fixedEvents = [];\r\n    let eventsRemoved = 0;\r\n    events.forEach((event, eventIndex) => {\r\n      fixedEvents.push(event);\r\n\r\n      // find an applybuff event for Garrote\r\n      if (event.type === EventType.ApplyDebuff && event.ability.guid === SPELLS.GARROTE.id) {\r\n\r\n        // look for matching removebuff\r\n        for (let previousEventIndex = (eventIndex - eventsRemoved); previousEventIndex >= 0; previousEventIndex -= 1) {\r\n          const previousEvent = fixedEvents[previousEventIndex];\r\n          if (event.timestamp > previousEvent.timestamp) {\r\n            break;\r\n          }\r\n          if (previousEvent.type === EventType.RemoveDebuff &&\r\n            previousEvent.ability.guid === SPELLS.GARROTE.id) {\r\n            event.type = EventType.RefreshDebuff;\r\n            event.__modified = true;\r\n            fixedEvents.splice(previousEventIndex, 1);\r\n            eventsRemoved += 1;\r\n            break;\r\n          }\r\n        }\r\n      }\r\n    });\r\n\r\n    return fixedEvents;\r\n  }\r\n}\r\n\r\nexport default GarroteNormalizer;\r\n","import SPELLS from 'common/SPELLS';\r\nimport EventsNormalizer from 'parser/core/EventsNormalizer';\r\nimport { EventType } from 'parser/core/Events';\r\n\r\nconst CAST_WINDOW = 100;\r\n\r\n/**\r\n * During the opener garrote casts seems to sometimes appear after the damage and energize event, as well as stealth being removed.\r\n * Moving the cast even to just before the damage event should ensure that we are able to correctly track if the cast happened during stealth.\r\n *\r\n * @param {Array} events\r\n * @returns {Array} Events possibly with some reordered.\r\n */\r\nclass GarroteNormalizer extends EventsNormalizer {\r\n\r\n  normalize(events) {\r\n    const fixedEvents = [];\r\n    events.forEach((event, eventIndex) => {\r\n      fixedEvents.push(event);\r\n\r\n      if (event.type === EventType.Cast && event.ability.guid === SPELLS.GARROTE.id) {\r\n        const castTimestamp = event.timestamp;\r\n\r\n        for (let previousEventIndex = eventIndex; previousEventIndex >= 0; previousEventIndex -= 1) {\r\n          const previousEvent = fixedEvents[previousEventIndex];\r\n          if ((castTimestamp - previousEvent.timestamp) > CAST_WINDOW) {\r\n            break;\r\n          }\r\n          if (previousEvent.type === EventType.Energize && previousEvent.ability.guid === SPELLS.GARROTE.id) {\r\n            event.timestamp = previousEvent.timestamp;\r\n            fixedEvents.splice(eventIndex, 1);\r\n            fixedEvents.splice(previousEventIndex, 0, event);\r\n            event.__modified = true;\r\n            break;\r\n          }\r\n        }\r\n      }\r\n    });\r\n\r\n    return fixedEvents;\r\n  }\r\n}\r\n\r\nexport default GarroteNormalizer;\r\n","import React from 'react';\r\n\r\nimport Analyzer from 'parser/core/Analyzer';\r\nimport SPELLS from 'common/SPELLS';\r\nimport SpellLink from 'common/SpellLink';\r\nimport resourceSuggest from 'parser/shared/modules/resources/resourcetracker/ResourceSuggest';\r\n\r\nimport { When } from 'parser/core/ParseResults';\r\n\r\nimport ComboPointTracker from '../../../shared/resources/ComboPointTracker';\r\n\r\nclass ComboPoints extends Analyzer {\r\n  static dependencies = {\r\n    comboPointTracker: ComboPointTracker,\r\n  };\r\n\r\n  protected comboPointTracker!: ComboPointTracker;\r\n\r\n  makeExtraSuggestion(spellId: number) {\r\n    return (\r\n      <>\r\n        Avoid wasting combo points when casting <SpellLink id={spellId} />. Combo points for Seal\r\n        Fate are not considered.{' '}\r\n      </>\r\n    );\r\n  }\r\n\r\n  suggestions(when: When) {\r\n    resourceSuggest(when, this.comboPointTracker, {\r\n      spell: SPELLS.MARKED_FOR_DEATH_TALENT, // 5 CP\r\n      minor: 0,\r\n      avg: 0.05,\r\n      major: 0.1,\r\n      extraSuggestion: this.makeExtraSuggestion(SPELLS.MARKED_FOR_DEATH_TALENT.id),\r\n    });\r\n    resourceSuggest(when, this.comboPointTracker, {\r\n      spell: SPELLS.MUTILATE, // 2 CP\r\n      minor: 0,\r\n      avg: 0.05,\r\n      major: 0.1,\r\n      extraSuggestion: this.makeExtraSuggestion(SPELLS.MUTILATE.id),\r\n    });\r\n    resourceSuggest(when, this.comboPointTracker, {\r\n      spell: SPELLS.GARROTE, // 1 CP\r\n      minor: 0,\r\n      avg: 0.1,\r\n      major: 0.2,\r\n      extraSuggestion: this.makeExtraSuggestion(SPELLS.GARROTE.id),\r\n    });\r\n    resourceSuggest(when, this.comboPointTracker, {\r\n      spell: SPELLS.FAN_OF_KNIVES, // 1 CP\r\n      minor: 0,\r\n      avg: 0.05,\r\n      major: 0.1,\r\n      extraSuggestion: this.makeExtraSuggestion(SPELLS.FAN_OF_KNIVES.id),\r\n    });\r\n    resourceSuggest(when, this.comboPointTracker, {\r\n      spell: SPELLS.BLINDSIDE_TALENT, // 1 CP\r\n      minor: 0,\r\n      avg: 0.05,\r\n      major: 0.1,\r\n      extraSuggestion: this.makeExtraSuggestion(SPELLS.BLINDSIDE_TALENT.id),\r\n    });\r\n    resourceSuggest(when, this.comboPointTracker, {\r\n      spell: SPELLS.POISONED_KNIFE, // 1 CP\r\n      minor: 0,\r\n      avg: 0.05,\r\n      major: 0.1,\r\n      extraSuggestion: this.makeExtraSuggestion(SPELLS.POISONED_KNIFE.id),\r\n    });\r\n    resourceSuggest(when, this.comboPointTracker, {\r\n      spell: SPELLS.CHEAP_SHOT, // 2 CP\r\n      minor: 0,\r\n      avg: 0.1,\r\n      major: 0.2,\r\n      extraSuggestion: this.makeExtraSuggestion(SPELLS.CHEAP_SHOT.id),\r\n    });\r\n  }\r\n}\r\n\r\nexport default ComboPoints;\r\n","import React from 'react';\r\n\r\nimport Analyzer from 'parser/core/Analyzer';\r\nimport SPELLS from 'common/SPELLS';\r\nimport SpellLink from 'common/SpellLink';\r\nimport resourceSuggest from 'parser/shared/modules/resources/resourcetracker/ResourceSuggest';\r\nimport { When } from 'parser/core/ParseResults';\r\n\r\nimport EnergyTracker from '../../../shared/resources/EnergyTracker';\r\n\r\nclass Energy extends Analyzer {\r\n  static dependencies = {\r\n    energyTracker: EnergyTracker,\r\n  };\r\n  protected energyTracker!: EnergyTracker;\r\n\r\n  // TODO: Urge to kill (vendetta energy regen) currently missing from WCL events. Needs a fix.\r\n  suggestions(when: When) {\r\n    resourceSuggest(when, this.energyTracker, {\r\n      spell: SPELLS.URGE_TO_KILL,\r\n      minor: 0.05,\r\n      avg: 0.1,\r\n      major: 0.15,\r\n      extraSuggestion: <>Try to spend energy before using <SpellLink id={SPELLS.VENDETTA.id} /> </>,\r\n    });\r\n  }\r\n}\r\n\r\nexport default Energy;\r\n","import Analyzer from 'parser/core/Analyzer';\r\nimport EnemyInstances from 'parser/shared/modules/EnemyInstances';\r\nimport Events from 'parser/core/Events';\r\n\r\n/**\r\n * Adds HP Percent information to the Enemy Entity\r\n * @extends Analyzer\r\n */\r\nclass EnemyHpTracker extends Analyzer {\r\n  static dependencies = {\r\n    enemies: EnemyInstances,\r\n  };\r\n\r\n  constructor(options) {\r\n    super(options);\r\n    this.addEventListener(Events.damage, this.onDamage);\r\n  }\r\n\r\n  onDamage(event) {\r\n    if (event.targetIsFriendly) {\r\n      return;\r\n    }\r\n\r\n    const enemy = this.enemies.getEntity(event);\r\n    if (enemy && event.hitPoints && event.maxHitPoints && event.maxHitPoints !== 0) {\r\n      enemy.hpPercent = event.hitPoints / event.maxHitPoints;\r\n    }\r\n  }\r\n}\r\n\r\nexport default EnemyHpTracker;\r\n","import React from 'react';\r\n\r\nimport SPELLS from 'common/SPELLS';\r\n\r\nimport Analyzer from 'parser/core/Analyzer';\r\nimport StatisticBox from 'interface/others/StatisticBox';\r\nimport SpellIcon from 'common/SpellIcon';\r\nimport { formatPercentage } from 'common/format';\r\nimport STATISTIC_ORDER from 'interface/others/STATISTIC_ORDER';\r\n\r\nclass EnvenomUptime extends Analyzer {\r\n\r\n  get percentUptime() {\r\n    return this.selectedCombatant.getBuffUptime(SPELLS.ENVENOM.id) / this.owner.fightDuration;\r\n  }\r\n\r\n  statistic() {\r\n    return (\r\n      <StatisticBox\r\n        position={STATISTIC_ORDER.CORE(12)}\r\n        icon={<SpellIcon id={SPELLS.ENVENOM.id} />}\r\n        value={`${formatPercentage(this.percentUptime)}%`}\r\n        label=\"Envenom uptime\"\r\n      />\r\n    );\r\n  }\r\n\r\n}\r\n\r\nexport default EnvenomUptime;\r\n","import SPELLS from 'common/SPELLS';\r\nimport RESOURCE_TYPES from 'game/RESOURCE_TYPES';\r\n\r\nimport Events from 'parser/core/Events';\r\nimport { SELECTED_PLAYER } from 'parser/core/Analyzer';\r\n\r\nimport Snapshot from '../core/Snapshot';\r\n\r\nconst BASE_DURATION = 2000;\r\nconst COMBO_POINT_DURATION = 2000;\r\n\r\n/**\r\n * Identify inefficient refreshes of the Crimson Tempest DoT.\r\n */\r\nclass CrimsonTempestSnapshot extends Snapshot {\r\n  get durationOfFresh() {\r\n    return BASE_DURATION + this.comboPointsOnLastCast * COMBO_POINT_DURATION;\r\n  }\r\n\r\n  static spellCastId = SPELLS.CRIMSON_TEMPEST_TALENT.id;\r\n  static debuffId = SPELLS.CRIMSON_TEMPEST_TALENT.id;\r\n  static spellIcon = SPELLS.CRIMSON_TEMPEST_TALENT.icon;\r\n  comboPointsOnLastCast = 0;\r\n\r\n  constructor(...args) {\r\n    super(...args);\r\n    const combatant = this.selectedCombatant;\r\n    if (combatant.hasTalent(SPELLS.SUBTERFUGE_TALENT.id) || !combatant.hasTalent(SPELLS.CRIMSON_TEMPEST_TALENT.id)) {\r\n      this.active = false;\r\n    }\r\n    this.addEventListener(Events.SpendResource.by(SELECTED_PLAYER).spell(SPELLS.CRIMSON_TEMPEST_TALENT), this.onSpendResource);\r\n  }\r\n\r\n  onSpendResource(event) {\r\n    if (event.resourceChangeType === RESOURCE_TYPES.COMBO_POINTS.id) {\r\n      this.comboPointsOnLastCast = event.resourceChange;\r\n    }\r\n  }\r\n}\r\n\r\nexport default CrimsonTempestSnapshot;\r\n","import React from 'react';\r\n\r\nimport TalentStatisticBox from 'interface/others/TalentStatisticBox';\r\nimport STATISTIC_ORDER from 'interface/others/STATISTIC_ORDER';\r\nimport ItemDamageDone from 'interface/ItemDamageDone';\r\nimport SPELLS from 'common/SPELLS';\r\nimport { formatPercentage } from 'common/format';\r\nimport Analyzer, { SELECTED_PLAYER } from 'parser/core/Analyzer';\r\nimport Events from 'parser/core/Events';\r\nimport calculateEffectiveDamage from 'parser/core/calculateEffectiveDamage';\r\n\r\nimport { ABILITIES_AFFECTED_BY_DAMAGE_INCREASES } from '../../constants';\r\n\r\nconst DAMAGE_BONUS = 0.1;\r\n\r\nclass ElaboratePlanning extends Analyzer {\r\n\r\n  get percentUptime() {\r\n    return this.selectedCombatant.getBuffUptime(SPELLS.ELABORATE_PLANNING_BUFF.id) / this.owner.fightDuration;\r\n  }\r\n\r\n  bonusDmg = 0;\r\n\r\n  constructor(...args) {\r\n    super(...args);\r\n    this.active = this.selectedCombatant.hasTalent(SPELLS.ELABORATE_PLANNING_TALENT.id);\r\n    if (!this.active) {\r\n      return;\r\n    }\r\n    this.addEventListener(Events.damage.by(SELECTED_PLAYER).spell(ABILITIES_AFFECTED_BY_DAMAGE_INCREASES), this.addBonusDamageIfBuffed);\r\n  }\r\n\r\n  addBonusDamageIfBuffed(event) {\r\n    if (!this.selectedCombatant.hasBuff(SPELLS.ELABORATE_PLANNING_BUFF.id) && !this.selectedCombatant.hasBuff(SPELLS.VANISH_BUFF.id)) {\r\n      return;\r\n    }\r\n    this.bonusDmg += calculateEffectiveDamage(event, DAMAGE_BONUS);\r\n  }\r\n\r\n  statistic() {\r\n    return (\r\n      <TalentStatisticBox\r\n        talent={SPELLS.ELABORATE_PLANNING_TALENT.id}\r\n        position={STATISTIC_ORDER.OPTIONAL(1)}\r\n        value={<ItemDamageDone amount={this.bonusDmg} />}\r\n        tooltip={`${formatPercentage(this.percentUptime)} % uptime.`}\r\n      />\r\n    );\r\n  }\r\n\r\n}\r\n\r\nexport default ElaboratePlanning;\r\n","import React from 'react';\r\n\r\nimport TalentStatisticBox from 'interface/others/TalentStatisticBox';\r\nimport STATISTIC_ORDER from 'interface/others/STATISTIC_ORDER';\r\nimport ItemDamageDone from 'interface/ItemDamageDone';\r\nimport SPELLS from 'common/SPELLS';\r\nimport Analyzer, { SELECTED_PLAYER } from 'parser/core/Analyzer';\r\nimport Events from 'parser/core/Events';\r\nimport calculateEffectiveDamage from 'parser/core/calculateEffectiveDamage';\r\n\r\nimport { ABILITIES_AFFECTED_BY_POISON_DAMAGE_INCREASES } from '../../constants';\r\n\r\nconst DAMAGE_BONUS = 0.3;\r\n\r\nclass MasterPoisoner extends Analyzer {\r\n\r\n  bonusDmg = 0;\r\n\r\n  constructor(...args) {\r\n    super(...args);\r\n    this.active = this.selectedCombatant.hasTalent(SPELLS.MASTER_POISONER_TALENT.id);\r\n    if (!this.active) {\r\n      return;\r\n    }\r\n    this.addEventListener(Events.damage.by(SELECTED_PLAYER).spell(ABILITIES_AFFECTED_BY_POISON_DAMAGE_INCREASES), this.addBonusDamage);\r\n  }\r\n\r\n  addBonusDamage(event) {\r\n    this.bonusDmg += calculateEffectiveDamage(event, DAMAGE_BONUS);\r\n  }\r\n\r\n  statistic() {\r\n    return (\r\n      <TalentStatisticBox\r\n        talent={SPELLS.MASTER_POISONER_TALENT.id}\r\n        position={STATISTIC_ORDER.OPTIONAL(1)}\r\n        value={<ItemDamageDone amount={this.bonusDmg} />}\r\n      />\r\n    );\r\n  }\r\n\r\n}\r\n\r\nexport default MasterPoisoner;\r\n","import React from 'react';\r\nimport Analyzer, { Options, SELECTED_PLAYER } from 'parser/core/Analyzer';\r\nimport Abilities from 'parser/core/modules/Abilities';\r\nimport SPELLS from 'common/SPELLS';\r\nimport Events, { EnergizeEvent } from 'parser/core/Events';\r\nimport RESOURCE_TYPES from 'game/RESOURCE_TYPES';\r\nimport Statistic from 'interface/statistics/Statistic';\r\nimport STATISTIC_CATEGORY from 'interface/others/STATISTIC_CATEGORY';\r\nimport BoringSpellValueText from 'interface/statistics/components/BoringSpellValueText';\r\nimport ResourceIcon from 'common/ResourceIcon';\r\n\r\nclass DashingScoundrel extends Analyzer {\r\n  static dependencies = {\r\n    abilities: Abilities,\r\n  };\r\n\r\n  critCount: number = 0;\r\n  comboPointsGained: number = 0;\r\n  comboPointsWasted: number = 0;\r\n  protected abilities!: Abilities;\r\n\r\n  constructor(options: Options) {\r\n    super(options);\r\n    this.active = this.selectedCombatant.hasLegendaryByBonusID(SPELLS.DASHING_SCOUNDREL.bonusID);\r\n    this.addEventListener(Events.energize.by(SELECTED_PLAYER).spell(SPELLS.DASHING_SCOUNDREL), this.onEnergize);\r\n  }\r\n\r\n  onEnergize(event: EnergizeEvent) {\r\n    this.critCount += 1;\r\n    this.comboPointsGained += event.resourceChange;\r\n    this.comboPointsWasted += event.waste;\r\n  }\r\n\r\n  statistic() {\r\n    return (\r\n      <Statistic\r\n        category={STATISTIC_CATEGORY.ITEMS}\r\n        tooltip={\r\n          <>\r\n            Dashing Scoundrel was responsible for {this.critCount} critical hits resulting in{' '}\r\n            {this.comboPointsGained + this.comboPointsWasted} bonus ComboPoints being earned.\r\n          </>\r\n        }\r\n      >\r\n        <BoringSpellValueText spell={SPELLS.DASHING_SCOUNDREL}>\r\n          <ResourceIcon id={RESOURCE_TYPES.COMBO_POINTS.id} noLink /> {this.comboPointsGained}/{this.comboPointsWasted + this.comboPointsGained} <small> extra Combo Points gained.</small>\r\n        </BoringSpellValueText>\r\n      </Statistic>\r\n    );\r\n  }\r\n}\r\n\r\nexport default DashingScoundrel;\r\n","import React from 'react';\r\nimport Analyzer, { Options, SELECTED_PLAYER } from 'parser/core/Analyzer';\r\nimport SpellUsable from 'parser/shared/modules/SpellUsable';\r\nimport { formatNumber } from 'common/format';\r\nimport SPELLS from 'common/SPELLS';\r\nimport Events, { CastEvent } from 'parser/core/Events';\r\nimport RESOURCE_TYPES from 'game/RESOURCE_TYPES';\r\nimport Statistic from 'interface/statistics/Statistic';\r\nimport STATISTIC_CATEGORY from 'interface/others/STATISTIC_CATEGORY';\r\nimport STATISTIC_ORDER from 'interface/others/STATISTIC_ORDER';\r\nimport BoringSpellValueText from 'interface/statistics/components/BoringSpellValueText';\r\nimport { ASS_VEN_CDR_PER_ENERGY } from 'parser/rogue/shared/constants';\r\n\r\nclass DuskwalkersPatch extends Analyzer {\r\n  static dependencies = {\r\n    spellUsable: SpellUsable,\r\n  };\r\n\r\n  effectiveVendettaReductionMs: number = 0;\r\n  wastedVendettaReductionMs: number = 0;\r\n  lastEnergyCost: number = 0;\r\n  protected spellUsable!: SpellUsable;\r\n\r\n  constructor(options: Options) {\r\n    super(options);\r\n    this.active = this.selectedCombatant.hasLegendaryByBonusID(SPELLS.DUSKWALERS_PATCH.bonusID);\r\n    this.addEventListener(Events.cast.by(SELECTED_PLAYER), this.onCast);\r\n  }\r\n\r\n  onCast(event: CastEvent) {\r\n    const resource = event.classResources?.find(resource => resource.type === RESOURCE_TYPES.FOCUS.id);\r\n    if (!resource) {\r\n      return;\r\n\r\n    }\r\n    this.lastEnergyCost = resource.cost || 0;\r\n    const cooldownReductionMs = ASS_VEN_CDR_PER_ENERGY * (resource.cost || 0);\r\n    const effectiveReductionMs = cooldownReductionMs - this.spellUsable.cooldownRemaining(SPELLS.EXHILERATION.id);\r\n    if (effectiveReductionMs < cooldownReductionMs) {\r\n      this.wastedVendettaReductionMs += (cooldownReductionMs - effectiveReductionMs);\r\n    }\r\n    this.effectiveVendettaReductionMs += this.spellUsable.reduceCooldown(SPELLS.EXHILERATION.id, cooldownReductionMs);\r\n  }\r\n\r\n  statistic() {\r\n    return (\r\n      <Statistic\r\n        position={STATISTIC_ORDER.OPTIONAL(14)}\r\n        size=\"flexible\"\r\n        category={STATISTIC_CATEGORY.ITEMS}\r\n      >\r\n        <BoringSpellValueText spell={SPELLS.DUSKWALKERS_PATCH}>\r\n          {formatNumber(this.effectiveVendettaReductionMs / 1000)}s/{formatNumber((this.wastedVendettaReductionMs + this.effectiveVendettaReductionMs) / 1000)}s <small> cooldown reduction</small>\r\n        </BoringSpellValueText>\r\n      </Statistic>\r\n    );\r\n  }\r\n}\r\n\r\nexport default DuskwalkersPatch;\r\n","import CoreCombatLogParser from 'parser/core/CombatLogParser';\r\n\r\nimport ArcaneTorrent from 'parser/shared/modules/racials/bloodelf/ArcaneTorrent';\r\n\r\nimport Abilities from './modules/Abilities';\r\nimport AlwaysBeCasting from './modules/features/AlwaysBeCasting';\r\nimport CooldownThroughputTracker from './modules/features/CooldownThroughputTracker';\r\nimport Checklist from './modules/features/Checklist/Module';\r\nimport SpellUsable from '../shared/SpellUsable';\r\n\r\n//Normalizers\r\nimport GarroteNormalizer from './normalizers/GarroteNormalizer';\r\nimport GarroteOpenerNormalizer from './normalizers/GarroteOpenerNormalizer';\r\n\r\nimport ComboPointDetails from '../shared/resources/ComboPointDetails';\r\nimport ComboPointTracker from '../shared/resources/ComboPointTracker';\r\nimport ComboPoints from './modules/core/ComboPoints';\r\nimport EnergyDetails from '../shared/resources/EnergyDetails';\r\nimport EnergyTracker from '../shared/resources/EnergyTracker';\r\nimport EnergyCapTracker from '../shared/resources/EnergyCapTracker';\r\nimport Energy from './modules/core/Energy';\r\nimport EnemyHpTracker from '../shared/EnemyHpTracker';\r\nimport SpellEnergyCost from '../shared/resources/SpellEnergyCost';\r\n\r\n//Spells\r\nimport EnvenomUptime from './modules/spells/EnvenomUptime';\r\nimport GarroteUptime from './modules/spells/GarroteUptime';\r\nimport RuptureUptime from './modules/spells/RuptureUptime';\r\nimport EarlyDotRefresh from './modules/spells/EarlyDotRefresh';\r\n\r\nimport GarroteSnapshot from './modules/features/GarroteSnapshot';\r\nimport RuptureSnapshot from './modules/features/RuptureSnapshot';\r\nimport CrimsonTempestSnapshot from './modules/features/CrimsonTempestSnapshot';\r\n\r\n//Talents\r\nimport Blindside from './modules/talents/Blindside';\r\nimport ElaboratePlanning from './modules/talents/ElaboratePlanning';\r\nimport MasterPoisoner from './modules/talents/MasterPoisoner';\r\nimport Nightstalker from './modules/talents/Nightstalker';\r\nimport Subterfuge from './modules/talents/Subterfuge';\r\nimport MasterAssassin from './modules/talents/MasterAssassin';\r\n\r\n// Covenants\r\nimport SerratedBoneSpike from '../shared/shadowlands/covenants/necrolord/SerratedBoneSpike';\r\nimport EchoingReprimand from '../shared/shadowlands/covenants/kyrian/EchoingReprimand';\r\nimport Sepsis from '../shared/shadowlands/covenants/nightfae/Sepsis';\r\nimport Flagellation from '../shared/shadowlands/covenants/venthyr/Flagellation';\r\n\r\n// Legendaries\r\nimport DashingScoundrel from './modules/spells/shadowlands/legendaries/DashingScoundrel';\r\nimport DuskwalkersPatch from './modules/spells/shadowlands/legendaries/DuskwalkersPatch';\r\nimport EssenceOfBloodfang from '../shared/shadowlands/legendaries/EssenceOfBloodfang';\r\nimport InvigoratingShadowdust from '../shared/shadowlands/legendaries/InvigoratingShadowdust';\r\n\r\nclass CombatLogParser extends CoreCombatLogParser {\r\n  static specModules = {\r\n    //Normalizers\r\n    garroteNormalizer: GarroteNormalizer,\r\n    garroteOpenerNormalizer: GarroteOpenerNormalizer,\r\n\r\n    //Trackers\r\n    enemyHpTracker: EnemyHpTracker,\r\n\r\n    //Feature\r\n    abilities: Abilities,\r\n    alwaysBeCasting: AlwaysBeCasting,\r\n    cooldownThroughputTracker: CooldownThroughputTracker,\r\n    checklist: Checklist,\r\n    spellUsable: SpellUsable,\r\n\r\n    //Resource\r\n    comboPointTracker: ComboPointTracker,\r\n    comboPointDetails: ComboPointDetails,\r\n    comboPoints: ComboPoints,\r\n    energyTracker: EnergyTracker,\r\n    energyCapTracker: EnergyCapTracker,\r\n    energyDetails: EnergyDetails,\r\n    energy: Energy,\r\n    spellEnergyCost: SpellEnergyCost,\r\n\r\n    //Core\r\n    envenomUptime: EnvenomUptime,\r\n    garroteUptime: GarroteUptime,\r\n    ruptureUptime: RuptureUptime,\r\n    earlyDotRefresh: EarlyDotRefresh,\r\n\r\n    garroteSnapshot: GarroteSnapshot,\r\n    ruptureSnapshot: RuptureSnapshot,\r\n    crimsonTempestSnapshot: CrimsonTempestSnapshot,\r\n\r\n    //Casts\r\n\r\n    //Talents\r\n    blindside: Blindside,\r\n    elaboratePlanning: ElaboratePlanning,\r\n    masterPoisoner: MasterPoisoner,\r\n    nightstalker: Nightstalker,\r\n    subterfuge: Subterfuge,\r\n    masterAssassin: MasterAssassin,\r\n\r\n    // Covenants\r\n    serratedBoneSpike: SerratedBoneSpike,\r\n    echoingReprimand: EchoingReprimand,\r\n    flagellation: Flagellation,\r\n    sepsis: Sepsis,\r\n\r\n    // Legendaries\r\n    dashingScoundrel: DashingScoundrel,\r\n    duskwalkersPatch: DuskwalkersPatch,\r\n    essenceOfBloodfang: EssenceOfBloodfang,\r\n    invigoratingShadowdust: InvigoratingShadowdust,\r\n\r\n    // Racials\r\n    arcaneTorrent: [ArcaneTorrent, { gcd: 1000 }] as const,\r\n  };\r\n}\r\n\r\nexport default CombatLogParser;\r\n","export default function calculateEffectiveDamage(event, increase) {\r\n  const raw = (event.amount || 0) + (event.absorbed || 0);\r\n  return raw - (raw / (1 + increase));\r\n}\r\n","import React from 'react';\r\nimport PropTypes from 'prop-types';\r\n\r\nimport SpellLink from 'common/SpellLink';\r\nimport SpellIcon from 'common/SpellIcon';\r\n\r\nimport STATISTIC_CATEGORY from './STATISTIC_CATEGORY';\r\nimport StatisticBox from './StatisticBox';\r\n\r\nexport { default as STATISTIC_ORDER } from './STATISTIC_ORDER';\r\n\r\n/**\r\n * @deprecated Use `interface/statistic/Statistic` instead.\r\n */\r\nconst TalentStatisticBox = ({ talent, icon, label, ...others }) => (\r\n  <StatisticBox\r\n    {...others}\r\n    icon={icon || <SpellIcon id={talent} />}\r\n    label={label || <SpellLink id={talent} icon={false} />}\r\n  />\r\n);\r\nTalentStatisticBox.propTypes = {\r\n  talent: PropTypes.number.isRequired,\r\n  /**\r\n   * Override the trait's icon.\r\n   */\r\n  icon: PropTypes.node,\r\n  /**\r\n   * Override the trait's label.\r\n   */\r\n  label: PropTypes.node,\r\n};\r\nTalentStatisticBox.defaultProps = {\r\n  category: STATISTIC_CATEGORY.TALENTS,\r\n};\r\n\r\nexport default TalentStatisticBox;\r\n","import Analyzer, { SELECTED_PLAYER } from 'parser/core/Analyzer';\r\nimport Enemies from 'parser/shared/modules/Enemies';\r\nimport AbilityTracker from 'parser/shared/modules/AbilityTracker';\r\nimport { encodeTargetString } from 'parser/shared/modules/EnemyInstances';\r\nimport { formatDuration } from 'common/format';\r\nimport Events from 'parser/core/Events';\r\n\r\nconst BUFFER_MS = 100;\r\nconst PANDEMIC_WINDOW = 0.3;\r\n\r\n// example dot:\r\n// {\r\n//   name: \"Stellar Flare\", //name of the spell for display\r\n//   debuffId: SPELLS.STELLAR_FLARE_TALENT.id, //id of the dot debuff\r\n//   castId: SPELLS.STELLAR_FLARE_TALENT.id, //id of the dot cast\r\n//   duration: 24000, //duration of the dot in ms\r\n// },\r\n\r\n// Abstract class for early dot refreshes\r\n// See /parser/Druid/Balance/Modules/Features/EarlyDotRefreshes.js for an example implementation.\r\nclass EarlyDotRefreshes extends Analyzer {\r\n  static dependencies = {\r\n    enemies: Enemies,\r\n    abilityTracker: AbilityTracker,\r\n  };\r\n\r\n  static dots = [];\r\n  targets = {};\r\n  lastGCD = null;\r\n  lastCast = null;\r\n  lastCastGoodExtension = false;\r\n  lastCastMinWaste = Number.MAX_SAFE_INTEGER;\r\n  lastCastMaxEffect = 0;\r\n  casts = {};\r\n\r\n  constructor(...args) {\r\n    super(...args);\r\n    this.constructor.dots.forEach(dot => {\r\n      this.targets[dot.debuffId] = {};\r\n      this.casts[dot.castId] = {\r\n        badCasts: 0,\r\n        addedDuration: 0,\r\n        wastedDuration: 0,\r\n      };\r\n    });\r\n    this.addEventListener(Events.refreshdebuff.by(SELECTED_PLAYER), this.onRefreshDebuff);\r\n    this.addEventListener(Events.applydebuff.by(SELECTED_PLAYER), this.onApplyDebuff);\r\n    this.addEventListener(Events.GlobalCooldown.by(SELECTED_PLAYER), this.onGCD);\r\n    this.addEventListener(Events.cast.by(SELECTED_PLAYER), this.onCast);\r\n  }\r\n\r\n  addBadCast(event, text) {\r\n    this.casts[this.lastCast.ability.guid].badCasts += 1;\r\n    this.casts[this.lastCast.ability.guid].wastedDuration += this.lastCastMinWaste;\r\n    event.meta = event.meta || {};\r\n    event.meta.isInefficientCast = true;\r\n    event.meta.inefficientCastReason = text;\r\n  }\r\n\r\n  onRefreshDebuff(event) {\r\n    const dot = this.getDot(event.ability.guid);\r\n    if (!dot) {\r\n      return;\r\n    }\r\n    const targetID = encodeTargetString(event.targetID, event.targetInstance);\r\n    const extensionInfo = this.extendDot(dot.debuffId, targetID, dot.duration, event.timestamp);\r\n    if(this.lastCastGoodExtension){\r\n      return;\r\n    }\r\n    this.lastCastGoodExtension = extensionInfo.wasted === 0;\r\n    this.lastCastMinWaste = Math.min(this.lastCastMinWaste, extensionInfo.wasted);\r\n    this.lastCastMaxEffect = Math.max(this.lastCastMaxEffect, extensionInfo.effective);\r\n  }\r\n\r\n  onApplyDebuff(event) {\r\n    const dot = this.getDot(event.ability.guid);\r\n    if (!dot) {\r\n      return;\r\n    }\r\n    this.targets[dot.debuffId][encodeTargetString(event.targetID, event.targetInstance)] = event.timestamp + dot.duration;\r\n    this.lastCastGoodExtension = true;\r\n    this.lastCastMinWaste = 0;\r\n    this.lastCastMaxEffect = dot.duration;\r\n  }\r\n\r\n  onGCD(event) {\r\n    const dot = this.getDotByCast(event.ability.guid);\r\n    if (!dot) {\r\n      return;\r\n    }\r\n    this.lastGCD = event;\r\n  }\r\n\r\n  onCast(event) {\r\n    this.checkLastCast(event);\r\n    const dot = this.getDotByCast(event.ability.guid);\r\n    if (!dot) {\r\n      return;\r\n    }\r\n    this.lastCast = event;\r\n    this.lastCastGoodExtension = false;\r\n    this.lastCastMinWaste = Number.MAX_SAFE_INTEGER;\r\n    this.lastCastMaxEffect = 0;\r\n    this.afterLastCastSet(event);\r\n  }\r\n\r\n  afterLastCastSet(event) {\r\n    //Extension to help capture state during the \"LastCast\".\r\n  }\r\n\r\n  // Determines whether the last cast should be checked or not.\r\n  checkLastCast(event) {\r\n    if (!this.lastGCD || !this.lastCast) {\r\n      return;\r\n    }\r\n    // We wait roughly a GCD to check, to account for minor travel times.\r\n    const timeSinceCast = event.timestamp - this.lastGCD.timestamp;\r\n    if (timeSinceCast < this.lastCastBuffer){\r\n      return;\r\n    }\r\n    this.casts[this.lastCast.ability.guid].addedDuration += this.lastCastMaxEffect;\r\n    this.isLastCastBad(event);\r\n    this.lastGCD = null;\r\n    this.lastCast = null;\r\n  }\r\n\r\n  get lastCastBuffer() {\r\n    return this.lastGCD.duration * 2 - BUFFER_MS;\r\n  }\r\n\r\n  // Checks the status of the last cast and marks it accordingly.\r\n  isLastCastBad(event) {\r\n    if (this.lastCastGoodExtension) {\r\n      return; // Should not be marked as bad.\r\n    }\r\n    const dot = this.getDotByCast(this.lastCast.ability.guid);\r\n    const text = this.getLastBadCastText(event, dot);\r\n    if (text !== '') {\r\n      this.addBadCast(this.lastCast, text);\r\n    }\r\n  }\r\n\r\n  // Get the suggestion for last bad cast. If empty, cast will be considered good.\r\n  getLastBadCastText(event, dot) {\r\n    return `${dot.name} was refreshed ${formatDuration(this.lastCastMinWaste/1000)} seconds before the pandemic window. It should be refreshed with at most ${formatDuration(PANDEMIC_WINDOW * dot.duration/1000)} left or part of the dot will be wasted.`;\r\n  }\r\n\r\n  //Returns the dot object\r\n  getDot(spellId) {\r\n    const dot = this.constructor.dots.find(element => element.debuffId === spellId);\r\n    return dot;\r\n  }\r\n\r\n  //Returns the dot object\r\n  getDotByCast(spellId) {\r\n    const dot = this.constructor.dots.find(element => element.castId === spellId);\r\n    return dot;\r\n  }\r\n\r\n  // Extends the dot and returns true if it was a good extension (no duration wasted) or false if it was a bad extension.\r\n  extendDot(spellId, targetID, extension, timestamp) {\r\n    const dot = this.getDot(spellId);\r\n    if (!dot) {\r\n      throw new Error(`The spellID ${spellId} is not in the list of dots to track`);\r\n    }\r\n    const remainingDuration = this.targets[dot.debuffId][targetID] - timestamp || 0;\r\n    const newDuration = remainingDuration + extension;\r\n    const maxDuration = (1 + PANDEMIC_WINDOW) * dot.duration;\r\n    const lostDuration = newDuration - maxDuration;\r\n    if (lostDuration <= 0) { //full extension\r\n      this.targets[dot.debuffId][targetID] = timestamp + newDuration;\r\n      return {wasted: 0, effective: extension};\r\n    } // Else not full extension\r\n    this.targets[dot.debuffId][targetID] = timestamp + maxDuration;\r\n    return {wasted: lostDuration, effective: extension - lostDuration};\r\n  }\r\n\r\n  badCastsPercent(spellId) {\r\n    const ability = this.abilityTracker.getAbility(spellId);\r\n    return this.casts[spellId].badCasts / ability.casts || 0;\r\n  }\r\n\r\n  badCastsEffectivePercent(spellId) {\r\n    if(!this.casts[spellId].addedDuration) {return 1;}\r\n    return this.casts[spellId].addedDuration / (this.casts[spellId].addedDuration+this.casts[spellId].wastedDuration);\r\n  }\r\n\r\n  makeSuggestionThresholds(spell, minor, avg, major) {\r\n    return {\r\n      spell: spell,\r\n      count: this.casts[spell.id].badCasts,\r\n      wastedDuration: this.casts[spell.id].wastedDuration,\r\n      actual: this.badCastsEffectivePercent(spell.id),\r\n      isLessThan: {\r\n        minor: minor,\r\n        average: avg,\r\n        major: major,\r\n      },\r\n      style: 'percentage',\r\n    };\r\n  }\r\n}\r\n\r\nexport default EarlyDotRefreshes;\r\n"],"sourceRoot":""}