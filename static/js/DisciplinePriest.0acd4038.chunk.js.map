{"version":3,"sources":["parser/priest/discipline/modules/core/isAtonement.ts","parser/priest/discipline/constants.ts","parser/priest/discipline/normalizers/AtonementSuccessiveDamage.ts","parser/priest/discipline/normalizers/PowerWordRadianceNormalizer.ts","parser/priest/discipline/modules/Abilities.ts","parser/priest/discipline/modules/core/SpellUsable.ts","parser/priest/discipline/modules/core/SpellManaCost.ts","parser/priest/discipline/modules/core/AbilityTracker.ts","parser/core/EventGrouper.ts","parser/priest/discipline/modules/spells/Penance.js","parser/priest/discipline/modules/core/Channeling.ts","parser/priest/discipline/modules/core/GlobalCooldown.ts","parser/priest/discipline/modules/core/AtonementAnalyzer.js","parser/priest/discipline/SuggestionThresholds.ts","parser/priest/discipline/modules/features/AlwaysBeCasting.ts","parser/priest/discipline/modules/features/Checklist/Component.tsx","parser/priest/discipline/modules/features/Checklist/Module.tsx","parser/priest/discipline/modules/features/AtonementApplicationSource.ts","parser/priest/discipline/modules/spells/Atonement.tsx","parser/priest/discipline/modules/features/CooldownThroughputTracker.ts","parser/priest/discipline/modules/features/PowerWordShieldWasted.tsx","parser/priest/discipline/modules/features/AtonementDamageSource.ts","parser/priest/discipline/modules/spells/Helper.ts","parser/priest/discipline/modules/features/AtonementHealingBreakdown.tsx","parser/priest/discipline/modules/features/AtonementHealingDone.tsx","parser/priest/discipline/modules/features/PowerWordBarrier.tsx","parser/priest/discipline/modules/spells/Lenience.tsx","parser/priest/discipline/modules/features/PurgeTheWicked.tsx","parser/priest/discipline/modules/features/AtonementApplicatorBreakdown.tsx","parser/priest/discipline/modules/spells/TwistOfFate.tsx","parser/priest/discipline/modules/spells/Castigation.tsx","parser/priest/discipline/modules/spells/Evangelism.tsx","parser/priest/shared/modules/features/DesperatePrayer.js","parser/priest/discipline/SpellCalculations.ts","parser/priest/discipline/modules/spells/Contrition.tsx","parser/priest/discipline/modules/spells/Grace.tsx","interface/others/DualStatisticBox.js","parser/priest/discipline/modules/spells/SinsOfTheMany.tsx","parser/priest/discipline/modules/spells/Schism.tsx","parser/priest/discipline/modules/shadowlands/covenants/MindGames.tsx","parser/priest/discipline/modules/shadowlands/covenants/BoonOfTheAscended.tsx","parser/priest/discipline/modules/shadowlands/conduits/ShiningRadiance.tsx","parser/priest/discipline/CombatLogParser.ts","interface/statistics/components/BoringSpellValueText/index.tsx","parser/core/calculateEffectiveDamage.js","parser/core/calculateEffectiveHealing.js","interface/statistics/components/ConduitSpellText/index.tsx","common/ResourceIcon.tsx","common/ResourceLink.tsx","../node_modules/react-animate-height/lib/AnimateHeight.js","interface/statistics/components/DonutChart/index.js","interface/others/StatisticsListBox.js","interface/statistics/components/BoringSpellValue/index.tsx","interface/others/LazyLoadStatisticBox.js","parser/priest/shared/normalizers/ShadowfiendNormalizer.js"],"names":["isAtonement","event","SPELLS","ATONEMENT_HEAL_NON_CRIT","id","ATONEMENT_HEAL_CRIT","includes","ability","guid","ABILITIES_AFFECTED_BY_HEALING_INCREASES","POWER_WORD_SHIELD","POWER_WORD_RADIANCE","HALO_TALENT","SHADOW_MEND","LEECH","ATONEMENT_DAMAGE_SOURCES","MAGIC_MELEE","LIGHTSPAWN_MELEE","SMITE","PENANCE","HALO_DAMAGE","SHADOW_WORD_PAIN","PURGE_THE_WICKED_TALENT","PURGE_THE_WICKED_BUFF","POWER_WORD_SOLACE_TALENT","SCHISM_TALENT","DIVINE_STAR_DAMAGE","HOLY_NOVA","MIND_SEAR","MIND_BLAST","MINDGAMES","ASCENDED_BLAST","ASCENDED_NOVA","ASCENDED_ERUPTION","SHINING_RADIANCE_INCREASE","AtonementSuccessiveDamage","events","fixedEvents","_damageEventIndexes","_encounteredTargetIDs","forEach","eventIndex","push","type","EventType","Damage","sourceIsFriendly","targetIsFriendly","Heal","targetID","lastDamageEvent","splice","length","__modified","sourceID","EventsNormalizer","BUFFS_TO_MOVE","ATONEMENT_BUFF","PowerWordRadianceNormalizer","lastRadianceTimestamp","lastRadianceIndex","Cast","timestamp","ApplyBuff","RefreshBuff","ApplyBuffStack","spellId","Abilities","combatant","this","selectedCombatant","spell","PENANCE_CAST","category","SPELL_CATEGORIES","ROTATIONAL","cooldown","gcd","base","charges","castEfficiency","suggestion","EVANGELISM_TALENT","COOLDOWNS","enabled","hasTalent","OTHERS","isDefensive","haste","DIVINE_STAR_TALENT","MINDBENDER_TALENT_SHARED","SHADOWFIEND","RAPTURE","SPIRIT_SHELL_TALENT","PAIN_SUPPRESSION","DESPERATE_PRAYER","POWER_WORD_BARRIER_CAST","LUMINOUS_BARRIER_TALENT","ANGELIC_FEATHER_TALENT","UTILITY","SHINING_FORCE_TALENT","FADE","LEAP_OF_FAITH","MIND_CONTROL","DOMINANT_MIND_TALENT","MASS_DISPEL","DISPEL_MAGIC","PURIFY","SHACKLE_UNDEAD","PSYCHIC_SCREAM","PSYCHIC_VOICE_TALENT","SHADOW_COVENANT_TALENT","LEVITATE","MIND_SOOTHE","POWER_INFUSION","SHADOW_WORD_DEATH","FLESHCRAFT","DEFENSIVE","hasCovenant","COVENANTS","NECROLORD","UNHOLY_NOVA","CoreAbilities","SpellUsable","_previousPenanceTimestamp","PENANCE_HEAL","isNewPenanceCast","beginCooldown","CoreSpellUsable","SpellManaCost","lastPenanceStartTimestamp","hardcodedCost","manaCost","cost","hasBuff","KAM_XIRAFF_BUFF","CoreSpellManaCost","AbilityTracker","abilityInfo","SHADOWFIEND_WITH_GLYPH_OF_THE_SHA","LIGHTSPAWN","cast","getAbility","raptureCasts","CoreAbilityTracker","Symbol","iterator","EventGrouper","threshold","cache","Object","entries","map","item","stemTimestamp","getStemTimestamp","addNewStemTimestamp","keys","Number","filter","withinThreshold","Penance","options","_boltCount","hits","eventGrouper","CASTIGATION_TALENT","addEventListener","Events","damage","by","SELECTED_PLAYER","onDamage","heal","onHeal","reduce","missedBolts","slice","isPenance","processEvent","penanceBoltNumber","currentBoltNumber","Statistic","position","STATISTIC_ORDER","CORE","size","tooltip","SpellLink","casts","BoringSpellValue","value","label","Analyzer","Channeling","owner","fight","start_time","_hasCastigation","_bolt","beginChannel","name","abilityIcon","icon","maxBolts","console","log","endChannel","isChannelingSpell","CoreChanneling","GlobalCooldown","CoreGlobalCooldown","AtonementAnalyzer","_atonementSource","_processAtonement","_processAtonementDamageSource","EventFilter","AtonementDamage","Atonement","damageEvent","validHitTypes","hitType","eventEmitter","fabricateEvent","atonementDamageSourceFilter","eventType","healEvent","atonementEventFilter","dependencies","EventEmitter","HIT_TYPES","NORMAL","CRIT","ABSORB","minor","regular","major","AlwaysBeCasting","_lastCastFinishedTimestamp","castStartTimestamp","globalCooldown","begincast","Math","max","when","totalTimeWasted","fightDuration","isGreaterThan","SuggestionThresholds","addSuggestion","suggest","actual","recommended","i18n","_","formatPercentage","CoreAlwaysBeCastingHealing","HEALING_ABILITIES_ON_GCD","DisciplinePriestChecklist","thresholds","AbilityRequirement","props","GenericCastEfficiencyRequirement","getCastEfficiencyForSpellId","Rule","description","ARCANE_TORRENT_MANA1","Tooltip","content","Requirement","nonHealingTimeSuggestionThresholds","downtimeSuggestionThresholds","ResourceLink","RESOURCE_TYPES","MANA","manaLeft","PreparationRule","Checklist","combatants","alwaysBeCasting","manaValues","preparationRuleAnalyzer","Component","selected","suggestionThresholds","BaseChecklist","Combatants","CastEfficiency","ManaValues","PreparationRuleAnalyzer","AtonementApplicationSource","atonementApplicators","Map","_event","applybuff","onApplyBuff","has","healing","totalAtones","totalAtonementRefreshes","currentAtonementTargets","improperAtonementRefreshes","statisticOrder","OPTIONAL","atonementApplicationSource","active","refreshbuff","onRefreshBuff","removebuff","onRemoveBuff","atonement","target","lastAtonementAppliedTimestamp","atonementExpirationTimestamp","atonementDuration","AtonementApplied","refreshedTarget","find","timeSinceApplication","AtonementRefreshImproper","AtonementRefresh","AtonementFaded","amount","absorbed","improperLength","StatisticBox","SpellIcon","applicatorEvent","applicatorSpellId","duration","get","numAtonementsActive","CooldownThroughputTracker","lastEvangelism","atonementModule","eventHistory","atonedPlayers","addCooldown","summary","BUILT_IN_SUMMARY_TYPES","HEALING","lastAtonementExpiration","end","CoreCooldownThroughputTracker","EventHistory","cooldownSpells","ABSORBS_APPLIED","ABSORBED","PowerWordShieldWasted","wasted","count","totalCount","absorb","formatNumber","AtonementDamageSource","SELECTED_PLAYER_PET","IsPenanceDamageEvent","undefined","AtonementHealingBreakdown","analyzer","totalAtonement","bySource","total","useState","absolute","setAbsolute","onAbsoluteToggle","useCallback","checked","tableBody","useMemo","highestHealing","key","highest","source","effective","sort","a","b","bolts","currentTotal","reason","getReason","style","width","Icon","paddingRight","textAlign","whiteSpace","className","overheal","raw","index","paddingLeft","fontWeight","textTransform","colSpan","defaultChecked","icons","onChange","htmlFor","marginLeft","AtonementHealingDone","_lastPenanceBoltNumber","atonementDamageSource","penance","_totalAtonement","HealingValue","onAbsorb","sourceEvent","_addHealing","add","Panel","title","explanation","pad","PowerWordBarrier","totalDamageTakenDuringPWB","fetchWcl","report","code","start","end_time","POWER_WORD_BARRIER_BUFF","RemoveBuff","then","json","damageTaken","entry","LazyLoadStatisticBox","loader","load","bind","damageReducedDuringPowerWordBarrier","formatThousands","Lenience","totalDamageTakenDuringAtonement","LENIENCE_TALENT","damageReducedDuringLenience","PurgeTheWicked","dotSpell","ptwCasts","ptwApplications","lastCastTarget","ptwCleaveTracker","ptwCleaveDamage","enemies","abilityTracker","onDotCast","applydebuff","onDotApply","refreshdebuff","removedebuff","onDotRemove","onDotDamage","uptime","isLessThan","extraPTWs","getBuffUptime","Enemies","AtonementApplicatorBreakdown","_shadowmendsCasts","_powerWordShieldsCasts","_castsApplyBuffsMap","_lastRadianceCastTimestamp","_atonementHealingFromShadowMends","_atonementHealingFromPowerWordRadiances","_atonementHealingFromPowerWordShields","_prepullApplicatorHealing","handleEvangelismCasts","storeShadowMendsCasts","storePowerWordShieldsCasts","storePowerWordRadiancesCastTimestamp","assignAtonementBuffToApplicator","handleAtonementsHits","set","__fabricated","setWasRefreshedProperty","playerWithAtonement","mostRecentCastApplyBuff","Array","from","reverse","applicatorId","lowerBound","applyBuff","upperBound","extendedByEvangelism","getAtonementDuration","wasRefreshed","atonementEvents","atonementBuffs","values","assignAtonementHit","applyBuffEvent","isRefreshed","atonementBuff","items","color","valueTooltip","DonutChart","renderAtonementApplicatorChart","TwistOfFate","TWIST_OF_FATE_TALENT_DISCIPLINE","TWIST_OF_FATE_BUFF_DISCIPLINE","parseHeal","calculateEffectiveHealing","getPercentageOfTotalHealingDone","tofPercent","tofDamage","getPercentageOfTotalDamageDone","formatItemHealingDone","Castigation","_isCastigationBolt","IsPenanceHealEvent","Evangelism","_previousEvangelismCast","_evangelismStatistics","onCast","atonementSeconds","evangelismStatistics","c","p","evangelism","scope","DesperatePrayer","desperatePrayerUsages","deathsWithDPReady","to","onDamageTaken","death","onDeath","originalHealth","originalMaxHealth","lastDesperatePrayerUsage","hitPoints","maxHitPoints","spellUsable","isOnCooldown","dp","boss","disableDeathSuggestion","spellCalculation","calculateOverhealing","estimateHealing","OffensivePenanceBoltEstimation","stats","currentIntellect","currentIntellectRating","currentVers","currentVersatilityPercentage","currentMastery","currentMasteryPercentage","penanceBoltDamage","round","boltDamage","boltHealing","args","Contrition","damagePenalty","penanceBoltEstimation","statTracker","CONTRITION_TALENT","CONTRITION_HEAL","estimatedBoltHealing","estimatedOverhealing","StatTracker","PRIEST_WHITELIST","PRIEST_SPELLS","PRIEST_TALENTS","Grace","applyAbsorbEvents","graceHealing","graceHealingToAtonement","healingUnaffectedByMastery","healingUnbuffedByMastery","healingBuffedByMastery","getEntity","absorbApplicationWasMasteryBuffed","getGraceHealing","arr","fn","applyEvent","x","masteryBuffed","eventsAssociated","graceHealingPerc","healingUnaffectedByMasteryPerc","healingUnbuffedByMasteryPerc","healingBuffedByMasteryPerc","atonementPerc","nonAtonementPerc","GRACE","DualStatisticBox","footer","alignIcon","others","marginTop","display","alignItems","minWidth","val","i","defaultProps","STATISTIC_CATEGORY","GENERAL","BONUS_DAMAGE_ARRAY","SinsOfTheMany","bonusDamage","bonusHealing","SINS_OF_THE_MANY_TALENT","calculateEffectiveDamage","currentBonus","activeBuffs","Schism","_lastSchismCast","_badSchisms","directDamage","damageFromBuff","sins","handleSynergy","processSchismBuffDamage","smiteDamage","smiteEstimation","atonenementDamageEvent","buffActive","byPlayerPet","bonus","processSchismAtonement","error","synergisticAbilities","estimatedSmiteRawHealing","smiteHealing","estimatedSmiteHealing","badSchismThresholds","n","badSchismCount","average","ThresholdStyle","NUMBER","Mindgames","atonementHealing","directHealing","preventedDamage","VENTHYR","MINDGAMES_ABSORB","onMindgamesAbsorbed","MINDGAMES_HEAL","BoringSpellValueText","ItemHealingDone","BoonOfTheAscended","KYRIAN","BOON_OF_THE_ASCENDED","ShiningRadiance","conduitRank","conduitIncrease","bonusRadianceHealing","conduitRankBySpellID","SHINING_RADIANCE","onRadianceHeal","ConduitSpellText","rank","CombatLogParser","CoreCombatLogParser","abilitiesAffectedByHealingIncreases","specModules","atonementSuccessiveDamage","AtonementSuccessiveDamageNormalizer","shadowfiendNormalizer","ShadowfiendNormalizer","powerWordRadianceNormalizer","spellManaCost","lowHealthHealing","LowHealthHealing","abilities","channeling","atonementAnalyzer","manaLevelChart","ManaLevelChart","manaUsageChart","ManaUsageChart","checklist","cooldownThroughputTracker","powerWordShieldWasted","atonementHealingDone","powerWordBarrier","lenience","purgeTheWicked","atonementApplicatorBreakdown","twistOfFate","castigation","desperatePrayer","contrition","grace","sinsOfTheMany","schism","mindgames","boonOfTheAscended","shiningRadiance","children","increase","relativeHealIncrease","effectiveHealing","ResourceIcon","noLink","alt","elem","setElem","useEffect","TooltipProvider","refresh","other","href","resource","rel","ref","defineProperty","exports","_typeof","obj","constructor","prototype","_extends","assign","arguments","hasOwnProperty","call","_createClass","defineProperties","descriptor","enumerable","configurable","writable","Constructor","protoProps","staticProps","_react2","_interopRequireDefault","require","_propTypes2","_classnames2","__esModule","default","_defineProperty","ANIMATION_STATE_CLASSES","animating","animatingUp","animatingDown","animatingToHeightZero","animatingToHeightAuto","animatingToHeightSpecific","static","staticHeightZero","staticHeightAuto","staticHeightSpecific","PROPS_TO_OMIT","omit","_len","_key","res","objectKeys","indexOf","cancelAnimationFrames","requestAnimationFrameIDs","cancelAnimationFrame","isNumber","isNaN","parseFloat","isFinite","isPercentage","height","search","substr","runCallback","callback","params","AnimateHeight","_React$Component","instance","TypeError","_classCallCheck","_this","self","ReferenceError","_possibleConstructorReturn","__proto__","getPrototypeOf","animationFrameIDs","overflow","animationStateClasses","getStaticStateClasses","state","shouldUseTransitions","subClass","superClass","create","setPrototypeOf","_inherits","contentElement","hideContent","prevProps","prevState","_this2","_props","delay","onAnimationEnd","onAnimationStart","_cx","showContent","contentHeight","offsetHeight","totalDuration","newHeight","timeoutState","isCurrentHeightAuto","timeoutAnimationStateClasses","setState","clearTimeout","timeoutID","animationClassesTimeoutID","requestAnimationFrame","startAnimationHelper","setTimeout","_cx2","_cx3","_this3","_props2","animateOpacity","applyInlineTransitions","contentClassName","easing","_state","componentStyle","transition","WebkitTransition","contentStyle","opacity","componentClasses","ariaHidden","createElement","apply","concat","el","propTypes","bool","object","any","isRequired","string","number","propName","componentName","func","sum","background","chartSize","innerRadiusFactor","data","spec","mark","innerRadius","encoding","theta","field","legend","scale","domain","range","view","stroke","renderLegend","renderChart","React","PureComponent","StatisticsListBox","bodyStyle","extra","loaded","loading","handleClick","result","context","updateResults","onClick","cursor","contextTypes","PropTypes","VOIDLING","oldGuid"],"mappings":"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","file":"static/js/DisciplinePriest.0acd4038.chunk.js","sourcesContent":["import SPELLS from 'common/SPELLS';\r\nimport { HealEvent } from 'parser/core/Events';\r\n\r\nexport default function isAtonement(event: HealEvent) {\r\n  return [SPELLS.ATONEMENT_HEAL_NON_CRIT.id, SPELLS.ATONEMENT_HEAL_CRIT.id].includes(event.ability.guid);\r\n}\r\n","import SPELLS from 'common/SPELLS';\r\n\r\nexport const ABILITIES_AFFECTED_BY_HEALING_INCREASES = [\r\n  SPELLS.ATONEMENT_HEAL_NON_CRIT.id,\r\n  SPELLS.ATONEMENT_HEAL_CRIT.id,\r\n  SPELLS.POWER_WORD_SHIELD.id,\r\n  SPELLS.POWER_WORD_RADIANCE.id,\r\n  SPELLS.HALO_TALENT.id,\r\n  SPELLS.SHADOW_MEND.id,\r\n  // While the following spells don't double dip in healing increases, they gain the same percentual bonus from the transfer\r\n  SPELLS.LEECH.id,\r\n];\r\n\r\nexport const ATONEMENT_DAMAGE_SOURCES = {\r\n  [SPELLS.MAGIC_MELEE.id]: true, // Shadow Fiend Melee\r\n  [SPELLS.LIGHTSPAWN_MELEE.id]: true, // Lightspawn Melee\r\n  [SPELLS.SMITE.id]: true,\r\n  [SPELLS.PENANCE.id]: true,\r\n  [SPELLS.HALO_DAMAGE.id]: true,\r\n  [SPELLS.SHADOW_WORD_PAIN.id]: true,\r\n  [SPELLS.PURGE_THE_WICKED_TALENT.id]: true,\r\n  [SPELLS.PURGE_THE_WICKED_BUFF.id]: true,\r\n  [SPELLS.POWER_WORD_SOLACE_TALENT.id]: true,\r\n  [SPELLS.SCHISM_TALENT.id]: true,\r\n  [SPELLS.DIVINE_STAR_DAMAGE.id]: true,\r\n  [SPELLS.HOLY_NOVA.id]: true,\r\n  [SPELLS.MIND_SEAR.id]: true,\r\n  [SPELLS.MIND_BLAST.id]: true,\r\n  [SPELLS.MINDGAMES.id]: true,\r\n  [SPELLS.ASCENDED_BLAST.id]: true,\r\n  [SPELLS.ASCENDED_NOVA.id]: true,\r\n  [SPELLS.ASCENDED_ERUPTION.id]: true,\r\n};\r\n\r\nexport const ATONEMENT_COEFFICIENT = 0.50;\r\nexport const POWER_WORD_RADIANCE_COEFFICIENT = 0.625;\r\n\r\nexport const PENANCE_COEFFICIENCT = 0.4;\r\nexport const SMITE_COEFFICIENT = 0.47;\r\n\r\nexport const POWER_WORD_SHIELD_ATONEMENT_DUR = 15000;\r\nexport const POWER_WORD_RADIANCE_ATONEMENT_DUR = 9000;\r\nexport const SHADOW_MEND_ATONEMENT_DUR = 15000;\r\n\r\n// https://www.wowhead.com/spell=137032/discipline-priest\r\nexport const DISC_PRIEST_DAMAGE_REDUCTION = 0.67;\r\n\r\nexport const SHINING_RADIANCE_INCREASE = [0, 0.4, 0.44, 0.48, 0.52, 0.56, 0.60, 0.64, 0.68, 0.72, 0.76, 0.80, 0.84, 0.88, 0.92, 0.96];\r\n","import { AnyEvent, EventType } from 'parser/core/Events';\r\nimport EventsNormalizer from 'parser/core/EventsNormalizer';\r\n\r\nimport isAtonement from '../modules/core/isAtonement';\r\nimport { ATONEMENT_DAMAGE_SOURCES } from '../constants';\r\n\r\nclass AtonementSuccessiveDamage extends EventsNormalizer {\r\n  normalize(events: AnyEvent[]) {\r\n    const fixedEvents: AnyEvent[] = [];\r\n    const _damageEventIndexes: number[] = [];\r\n\r\n    let _encounteredTargetIDs: number[] = [];\r\n\r\n    events.forEach((event: AnyEvent, eventIndex) => {\r\n      fixedEvents.push(event);\r\n\r\n      if (\r\n        event.type === EventType.Damage &&\r\n        event.sourceIsFriendly &&\r\n        !event.targetIsFriendly &&\r\n        ATONEMENT_DAMAGE_SOURCES[event.ability.guid]\r\n      ) {\r\n        _damageEventIndexes.push(eventIndex);\r\n        _encounteredTargetIDs = [];\r\n        return;\r\n      }\r\n\r\n      if (event.type === EventType.Heal && isAtonement(event)) {\r\n        // We encountered a targetID we already encountered since the last damage\r\n        // event. We push down the last damage event here\r\n        if (_encounteredTargetIDs.includes(event.targetID)) {\r\n          const lastDamageEvent: AnyEvent = fixedEvents.splice(\r\n            _damageEventIndexes[_damageEventIndexes.length - 1],\r\n            1,\r\n          )[0];\r\n          lastDamageEvent.__modified = true;\r\n          fixedEvents.splice(fixedEvents.length - 1, 0, lastDamageEvent);\r\n          _encounteredTargetIDs = [];\r\n          return;\r\n        }\r\n\r\n        //  We ignore atonement on self in the handling of repeating targetIDs\r\n        //  Because of latency issues, the atonement on self does not follow\r\n        //  the same rules normal atonement does. We will handle these cases\r\n        //  in another normalizer\r\n        if (event.sourceID !== event.targetID) {\r\n          _encounteredTargetIDs.push(event.targetID);\r\n        }\r\n      }\r\n    });\r\n    return fixedEvents;\r\n  }\r\n}\r\n\r\nexport default AtonementSuccessiveDamage;\r\n","import EventsNormalizer from 'parser/core/EventsNormalizer';\r\n\r\nimport SPELLS from 'common/SPELLS';\r\nimport { AnyEvent, EventType } from 'parser/core/Events';\r\n\r\nconst BUFFS_TO_MOVE = [\r\n  SPELLS.ATONEMENT_BUFF.id,\r\n];\r\nconst MAX_TIME_SINCE_CAST = 250; // ms\r\n\r\n/**\r\n Because of latency, after casting Power Word: Radiance, the atonement applications\r\n don't always register right away and an instant cast spell can be recorded before\r\n the atonements. Example: Evangelism casted right after a Power Word Radiance will\r\n be before the applications of the atonements. For this reason we reorder the\r\n events so that the applications are always right after the cast.\r\n */\r\nclass PowerWordRadianceNormalizer extends EventsNormalizer {\r\n  normalize(events: AnyEvent[]) {\r\n    const fixedEvents: AnyEvent[] = [];\r\n\r\n    let lastRadianceTimestamp = 0;\r\n    let lastRadianceIndex = 0;\r\n\r\n    events.forEach((event, eventIndex) => {\r\n      fixedEvents.push(event);\r\n\r\n      if (event.type === EventType.Cast) {\r\n        const spellId = event.ability.guid;\r\n        if (spellId === SPELLS.POWER_WORD_RADIANCE.id) {\r\n          lastRadianceTimestamp = event.timestamp;\r\n          lastRadianceIndex = eventIndex;\r\n        }\r\n      }\r\n\r\n      if (event.type === EventType.ApplyBuff || event.type === EventType.RefreshBuff || event.type === EventType.ApplyBuffStack) {\r\n        const spellId = event.ability.guid;\r\n        if ((event.timestamp - lastRadianceTimestamp) < MAX_TIME_SINCE_CAST && BUFFS_TO_MOVE.includes(spellId)) {\r\n          event.timestamp = lastRadianceTimestamp;\r\n          event.__modified = true;\r\n          fixedEvents.splice(lastRadianceIndex + 1, 0, event);\r\n          fixedEvents.splice(-1, 1);\r\n        }\r\n      }\r\n    });\r\n\r\n    return fixedEvents;\r\n  }\r\n}\r\n\r\nexport default PowerWordRadianceNormalizer;\r\n","import SPELLS from 'common/SPELLS';\r\nimport CoreAbilities from 'parser/core/modules/Abilities';\r\nimport { SpellbookAbility } from 'parser/core/modules/Ability';\r\nimport COVENANTS from 'game/shadowlands/COVENANTS';\r\n\r\nclass Abilities extends CoreAbilities {\r\n  spellbook(): SpellbookAbility[] {\r\n    const combatant = this.selectedCombatant;\r\n    return [\r\n      {\r\n        spell: [SPELLS.PENANCE_CAST, SPELLS.PENANCE],\r\n        category: Abilities.SPELL_CATEGORIES.ROTATIONAL,\r\n        cooldown: 9,\r\n        gcd: {\r\n          base: 1500,\r\n        },\r\n      },\r\n      {\r\n        spell: SPELLS.POWER_WORD_RADIANCE,\r\n        category: Abilities.SPELL_CATEGORIES.ROTATIONAL,\r\n        cooldown: 20,\r\n        charges: 2,\r\n        gcd: {\r\n          base: 1500,\r\n        },\r\n        castEfficiency: {\r\n          suggestion: true,\r\n        },\r\n      },\r\n      {\r\n        spell: SPELLS.EVANGELISM_TALENT,\r\n        category: Abilities.SPELL_CATEGORIES.COOLDOWNS,\r\n        cooldown: 90,\r\n        gcd: {\r\n          base: 1500,\r\n        },\r\n        enabled: combatant.hasTalent(SPELLS.EVANGELISM_TALENT.id),\r\n        castEfficiency: {\r\n          suggestion: true,\r\n        },\r\n      },\r\n      {\r\n        spell: SPELLS.POWER_WORD_SHIELD,\r\n        category: Abilities.SPELL_CATEGORIES.OTHERS,\r\n        isDefensive: true,\r\n        gcd: {\r\n          base: 1500,\r\n        },\r\n      },\r\n      {\r\n        spell: SPELLS.SCHISM_TALENT,\r\n        category: Abilities.SPELL_CATEGORIES.ROTATIONAL,\r\n        cooldown: 24,\r\n        gcd: {\r\n          base: 1500,\r\n        },\r\n        enabled: combatant.hasTalent(SPELLS.SCHISM_TALENT.id),\r\n        castEfficiency: {\r\n          suggestion: true,\r\n        },\r\n      },\r\n      {\r\n        spell: SPELLS.POWER_WORD_SOLACE_TALENT,\r\n        category: Abilities.SPELL_CATEGORIES.ROTATIONAL,\r\n        cooldown: haste => 15 / (1 + haste),\r\n        gcd: {\r\n          base: 1500,\r\n        },\r\n        enabled: combatant.hasTalent(SPELLS.POWER_WORD_SOLACE_TALENT.id),\r\n        castEfficiency: {\r\n          suggestion: true,\r\n        },\r\n      },\r\n      {\r\n        spell: SPELLS.DIVINE_STAR_TALENT,\r\n        category: Abilities.SPELL_CATEGORIES.ROTATIONAL,\r\n        cooldown: 15,\r\n        gcd: {\r\n          base: 1500,\r\n        },\r\n        enabled: combatant.hasTalent(SPELLS.DIVINE_STAR_TALENT.id),\r\n        castEfficiency: {\r\n          suggestion: true,\r\n        },\r\n      },\r\n      {\r\n        spell: SPELLS.HALO_TALENT,\r\n        category: Abilities.SPELL_CATEGORIES.ROTATIONAL,\r\n        cooldown: 40,\r\n        gcd: {\r\n          base: 1500,\r\n        },\r\n        enabled: combatant.hasTalent(SPELLS.HALO_TALENT.id),\r\n        castEfficiency: {\r\n          suggestion: true,\r\n        },\r\n      },\r\n\r\n      {\r\n        spell: SPELLS.MINDBENDER_TALENT_SHARED,\r\n        category: Abilities.SPELL_CATEGORIES.COOLDOWNS,\r\n        cooldown: 60,\r\n        gcd: {\r\n          base: 1500,\r\n        },\r\n        enabled: combatant.hasTalent(SPELLS.MINDBENDER_TALENT_SHARED.id),\r\n        castEfficiency: {\r\n          suggestion: true,\r\n        },\r\n      },\r\n      {\r\n        spell: SPELLS.SHADOWFIEND,\r\n        category: Abilities.SPELL_CATEGORIES.COOLDOWNS,\r\n        cooldown: 180,\r\n        gcd: {\r\n          base: 1500,\r\n        },\r\n        enabled: !combatant.hasTalent(SPELLS.MINDBENDER_TALENT_SHARED.id),\r\n        castEfficiency: {\r\n          suggestion: true,\r\n        },\r\n      },\r\n      {\r\n        spell: SPELLS.RAPTURE,\r\n        category: Abilities.SPELL_CATEGORIES.COOLDOWNS,\r\n        cooldown: 90,\r\n        gcd: {\r\n          base: 1500,\r\n        },\r\n        enabled: !combatant.hasTalent(SPELLS.SPIRIT_SHELL_TALENT.id),\r\n        castEfficiency: {\r\n          suggestion: true,\r\n        },\r\n      },\r\n      {\r\n        spell: SPELLS.PAIN_SUPPRESSION,\r\n        category: Abilities.SPELL_CATEGORIES.COOLDOWNS,\r\n        cooldown: 3 * 60,\r\n      },\r\n      {\r\n        spell: SPELLS.DESPERATE_PRAYER,\r\n        category: Abilities.SPELL_CATEGORIES.COOLDOWNS,\r\n        cooldown: 90,\r\n      },\r\n      {\r\n        spell: SPELLS.POWER_WORD_BARRIER_CAST,\r\n        category: Abilities.SPELL_CATEGORIES.COOLDOWNS,\r\n        cooldown: 3 * 60,\r\n        gcd: {\r\n          base: 1500,\r\n        },\r\n        enabled: !combatant.hasTalent(SPELLS.LUMINOUS_BARRIER_TALENT.id),\r\n      },\r\n      {\r\n        spell: SPELLS.SHADOW_WORD_PAIN,\r\n        category: Abilities.SPELL_CATEGORIES.OTHERS,\r\n        enabled: !combatant.hasTalent(SPELLS.PURGE_THE_WICKED_TALENT.id),\r\n        gcd: {\r\n          base: 1500,\r\n        },\r\n      },\r\n      {\r\n        spell: SPELLS.PURGE_THE_WICKED_TALENT,\r\n        category: Abilities.SPELL_CATEGORIES.OTHERS,\r\n        enabled: combatant.hasTalent(SPELLS.PURGE_THE_WICKED_TALENT.id),\r\n        gcd: {\r\n          base: 1500,\r\n        },\r\n      },\r\n      {\r\n        spell: SPELLS.SMITE,\r\n        category: Abilities.SPELL_CATEGORIES.OTHERS,\r\n        gcd: {\r\n          base: 1500,\r\n        },\r\n      },\r\n\r\n      {\r\n        spell: SPELLS.ANGELIC_FEATHER_TALENT,\r\n        category: Abilities.SPELL_CATEGORIES.UTILITY,\r\n        cooldown: 20,\r\n        charges: 3,\r\n        gcd: {\r\n          base: 1500,\r\n        },\r\n        enabled: combatant.hasTalent(SPELLS.ANGELIC_FEATHER_TALENT.id),\r\n      },\r\n      {\r\n        spell: SPELLS.SHINING_FORCE_TALENT,\r\n        category: Abilities.SPELL_CATEGORIES.UTILITY,\r\n        cooldown: 45,\r\n        gcd: {\r\n          base: 1500,\r\n        },\r\n        enabled: combatant.hasTalent(SPELLS.SHINING_FORCE_TALENT.id),\r\n      },\r\n      {\r\n        spell: SPELLS.FADE,\r\n        category: Abilities.SPELL_CATEGORIES.UTILITY,\r\n        cooldown: 30,\r\n      },\r\n      {\r\n        spell: SPELLS.LEAP_OF_FAITH,\r\n        category: Abilities.SPELL_CATEGORIES.UTILITY,\r\n        cooldown: 150,\r\n      },\r\n      {\r\n        spell: SPELLS.MIND_CONTROL,\r\n        category: Abilities.SPELL_CATEGORIES.UTILITY,\r\n        cooldown: combatant.hasTalent(SPELLS.DOMINANT_MIND_TALENT.id) ? 120 : 0,\r\n      },\r\n      {\r\n        spell: SPELLS.MASS_DISPEL,\r\n        category: Abilities.SPELL_CATEGORIES.UTILITY,\r\n        cooldown: 15,\r\n        gcd: {\r\n          base: 1500,\r\n        },\r\n      },\r\n      {\r\n        spell: SPELLS.DISPEL_MAGIC,\r\n        category: Abilities.SPELL_CATEGORIES.UTILITY,\r\n        gcd: {\r\n          base: 1500,\r\n        },\r\n      },\r\n      {\r\n        spell: SPELLS.PURIFY,\r\n        category: Abilities.SPELL_CATEGORIES.UTILITY,\r\n        cooldown: 8,\r\n        gcd: {\r\n          base: 1500,\r\n        },\r\n      },\r\n      {\r\n        spell: SPELLS.SHACKLE_UNDEAD,\r\n        category: Abilities.SPELL_CATEGORIES.UTILITY,\r\n        gcd: {\r\n          base: 1500,\r\n        },\r\n      },\r\n      {\r\n        spell: SPELLS.PSYCHIC_SCREAM,\r\n        category: Abilities.SPELL_CATEGORIES.UTILITY,\r\n        cooldown: 60 - (combatant.hasTalent(SPELLS.PSYCHIC_VOICE_TALENT.id) ? 30 : 0),\r\n      },\r\n      {\r\n        spell: SPELLS.SHADOW_MEND,\r\n        category: Abilities.SPELL_CATEGORIES.UTILITY,\r\n        gcd: {\r\n          base: 1500,\r\n        },\r\n      },\r\n      {\r\n        spell: SPELLS.SHADOW_COVENANT_TALENT,\r\n        category: Abilities.SPELL_CATEGORIES.UTILITY,\r\n        gcd: {\r\n          base: 1500,\r\n        },\r\n        cooldown: 12,\r\n        castEfficiency: {\r\n          suggestion: true,\r\n        },\r\n        enabled: combatant.hasTalent(SPELLS.SHADOW_COVENANT_TALENT.id),\r\n      },\r\n      {\r\n        spell: SPELLS.LEVITATE,\r\n        category: Abilities.SPELL_CATEGORIES.UTILITY,\r\n        gcd: {\r\n          base: 1500,\r\n        },\r\n      },\r\n      {\r\n        spell: SPELLS.MIND_BLAST,\r\n        category: Abilities.SPELL_CATEGORIES.OTHERS,\r\n        gcd: {\r\n          base: 1500,\r\n        },\r\n      },\r\n      {\r\n        spell: SPELLS.MIND_SEAR,\r\n        category: Abilities.SPELL_CATEGORIES.OTHERS,\r\n        gcd: {\r\n          base: 1500,\r\n        },\r\n      },\r\n      {\r\n        spell: SPELLS.MIND_SOOTHE,\r\n        category: Abilities.SPELL_CATEGORIES.OTHERS,\r\n        gcd: {\r\n          base: 1500,\r\n        },\r\n      },\r\n      {\r\n        spell: SPELLS.POWER_INFUSION,\r\n        category: Abilities.SPELL_CATEGORIES.COOLDOWNS,\r\n        gcd: {\r\n          base: 1500,\r\n        },\r\n      },\r\n      {\r\n        spell: SPELLS.SHADOW_WORD_DEATH,\r\n        category: Abilities.SPELL_CATEGORIES.OTHERS,\r\n        gcd: {\r\n          base: 1500,\r\n        },\r\n      },\r\n      {\r\n        spell: SPELLS.FLESHCRAFT,\r\n        category: Abilities.SPELL_CATEGORIES.DEFENSIVE,\r\n        cooldown: 120,\r\n        enabled: combatant.hasCovenant(COVENANTS.NECROLORD.id),\r\n      },\r\n      {\r\n        spell: SPELLS.UNHOLY_NOVA,\r\n        category: Abilities.SPELL_CATEGORIES.ROTATIONAL,\r\n        cooldown: 120,\r\n        enabled: combatant.hasCovenant(COVENANTS.NECROLORD.id),\r\n      },\r\n    ];\r\n  }\r\n}\r\n\r\nexport default Abilities;\r\n","import SPELLS from 'common/SPELLS';\r\nimport CoreSpellUsable from 'parser/shared/modules/SpellUsable';\r\nimport { CastEvent } from 'parser/core/Events';\r\n\r\nconst PENANCE_MINIMUM_RECAST_TIME = 3500; // Minimum duration from one Penance to Another\r\n\r\nclass SpellUsable extends CoreSpellUsable {\r\n  _previousPenanceTimestamp: number = 0;\r\n\r\n  onCast(event: CastEvent) {\r\n    const spellId = event.ability.guid;\r\n    if (spellId !== SPELLS.PENANCE.id && spellId !== SPELLS.PENANCE_HEAL.id) {\r\n      super.onCast(event);\r\n      return;\r\n    }\r\n\r\n    if (this.isNewPenanceCast(event.timestamp)) {\r\n      this._previousPenanceTimestamp = event.timestamp;\r\n      this.beginCooldown(SPELLS.PENANCE.id, event);\r\n    }\r\n  }\r\n\r\n  isNewPenanceCast(timestamp: number) {\r\n    return (\r\n      !this._previousPenanceTimestamp ||\r\n      timestamp - this._previousPenanceTimestamp > PENANCE_MINIMUM_RECAST_TIME\r\n    );\r\n  }\r\n}\r\n\r\nexport default SpellUsable;\r\n","import SPELLS from 'common/SPELLS';\r\n\r\nimport CoreSpellManaCost from 'parser/shared/modules/SpellManaCost';\r\nimport { CastEvent } from 'parser/core/Events';\r\n// import Penance from '../Spells/Penance';\r\n\r\n/** The amount of time during which it's impossible a second Penance could have started */\r\nconst PENANCE_CHANNEL_TIME_BUFFER = 2500;\r\n\r\nconst debug = false;\r\n\r\nclass SpellManaCost extends CoreSpellManaCost {\r\n  // static dependencies = {\r\n  //   penance: Penance, // we need this to add `penanceBoltNumber` to the cast event\r\n  // };\r\n\r\n  lastPenanceStartTimestamp: number = 0;\r\n\r\n  getHardcodedManaCost(event: CastEvent) {\r\n    const spellId = event.ability.guid;\r\n    let hardcodedCost = super.getHardcodedManaCost(event);\r\n    // Penance does not include the mana cost in the spellId :(\r\n    if (spellId === SPELLS.PENANCE.id) {\r\n      if (!this.lastPenanceStartTimestamp || (event.timestamp - this.lastPenanceStartTimestamp) > PENANCE_CHANNEL_TIME_BUFFER) {\r\n        this.lastPenanceStartTimestamp = event.timestamp;\r\n        // if (event.isInitialPenanceCast) {\r\n        hardcodedCost = SPELLS.PENANCE.manaCost;\r\n      } else {\r\n        // This is a second or later bolt from Penance, it doesn't cost mana.\r\n        hardcodedCost = 0;\r\n      }\r\n    }\r\n    return hardcodedCost;\r\n  }\r\n\r\n  getResourceCost(event: CastEvent) {\r\n    let cost = super.getResourceCost(event);\r\n    if (cost === 0) {\r\n      return cost;\r\n    }\r\n\r\n    // Kam Xi'raff reduces the mana cost of damaging spells by 75%\r\n    if (!event.targetIsFriendly && this.selectedCombatant.hasBuff(SPELLS.KAM_XIRAFF_BUFF.id, event.timestamp)) {\r\n      debug && console.log('Hostile spell and', SPELLS.KAM_XIRAFF_BUFF.name, 'is active, reducing cost (', cost, ') by 75%');\r\n      cost *= 0.25;\r\n    }\r\n\r\n    return cost;\r\n  }\r\n}\r\n\r\nexport default SpellManaCost;\r\n","import SPELLS from 'common/SPELLS';\r\n\r\nimport CoreAbilityTracker, { TrackedAbility } from 'parser/shared/modules/AbilityTracker';\r\nimport { Ability, CastEvent } from 'parser/core/Events';\r\n\r\ninterface TrackedDisciplineAbility extends TrackedAbility {\r\n  raptureCasts?: number;\r\n}\r\n\r\nclass AbilityTracker extends CoreAbilityTracker {\r\n  getAbility(spellId: number, abilityInfo: Ability | null = null): TrackedDisciplineAbility {\r\n    if (\r\n      spellId === SPELLS.SHADOWFIEND_WITH_GLYPH_OF_THE_SHA.id ||\r\n      spellId === SPELLS.LIGHTSPAWN.id\r\n    ) {\r\n      return super.getAbility(SPELLS.SHADOWFIEND.id, abilityInfo);\r\n    }\r\n    return super.getAbility(spellId, abilityInfo);\r\n  }\r\n\r\n  onCast(event: CastEvent) {\r\n    super.onCast(event);\r\n    const spellId = event.ability.guid;\r\n    const cast = this.getAbility(spellId, event.ability);\r\n\r\n    if (spellId === SPELLS.POWER_WORD_SHIELD.id) {\r\n      const hasRapture = this.selectedCombatant.hasBuff(SPELLS.RAPTURE.id, event.timestamp);\r\n\r\n      if (hasRapture) {\r\n        cast.raptureCasts = (cast.raptureCasts || 0) + 1;\r\n      }\r\n    }\r\n  }\r\n}\r\n\r\nexport default AbilityTracker;\r\n","import { AnyEvent } from 'parser/core/Events';\r\n\r\n/**\r\n * Groups events based on a given timestamp threshold\r\n * e.g.\r\n *   { timestamp: 0 }, { timestamp: 100 }, { timestamp: 200 }, { timestamp: 300 }\r\n * with a threshold of 100 would result in:\r\n * 0: [ { timestamp: 0 }, { timestamp: 100 } ]\r\n * 200: [ { timestamp: 200 }, { timestamp: 300 } ]\r\n */\r\n\r\nexport default class EventGrouper {\r\n  threshold: number;\r\n  cache: { [stem: number]: AnyEvent[] };\r\n\r\n  constructor(threshold: number) {\r\n    this.threshold = threshold;\r\n    this.cache = {};\r\n  }\r\n\r\n  [Symbol.iterator]() {\r\n    return Object.entries(this.cache).map(item => item[1])[Symbol.iterator]();\r\n  }\r\n\r\n  processEvent(event: AnyEvent) {\r\n    const stemTimestamp = this.getStemTimestamp(event);\r\n    if (!stemTimestamp) {\r\n      this.addNewStemTimestamp(event);\r\n      return;\r\n    }\r\n\r\n    this.cache[stemTimestamp] = [\r\n      ...this.cache[stemTimestamp],\r\n      event,\r\n    ];\r\n  }\r\n\r\n  getStemTimestamp(event: AnyEvent) {\r\n    return Object.keys(this.cache).map(Number).filter(this.withinThreshold(event.timestamp))[0] || null;\r\n  }\r\n\r\n  withinThreshold(timestamp: number) {\r\n    return (stemTimestamp: number) => (timestamp <= (stemTimestamp + this.threshold)) && (timestamp > stemTimestamp);\r\n  }\r\n\r\n  addNewStemTimestamp(event: AnyEvent) {\r\n    this.cache[event.timestamp] = [event];\r\n  }\r\n}\r\n","import React from 'react';\r\n\r\nimport SPELLS from 'common/SPELLS';\r\nimport Analyzer, { SELECTED_PLAYER } from 'parser/core/Analyzer';\r\nimport Statistic from 'interface/statistics/Statistic';\r\nimport BoringSpellValue from 'interface/statistics/components/BoringSpellValue';\r\nimport EventGrouper from 'parser/core/EventGrouper';\r\nimport STATISTIC_ORDER from 'interface/others/STATISTIC_ORDER';\r\nimport SpellLink from 'common/SpellLink';\r\nimport Events from 'parser/core/Events';\r\n\r\nconst PENANCE_MINIMUM_RECAST_TIME = 3500; // Minimum duration from one Penance to Another\r\n\r\nclass Penance extends Analyzer {\r\n  get missedBolts() {\r\n    return [...this.eventGrouper].reduce(\r\n      (missedBolts, cast) => missedBolts + (this._boltCount - cast.length),\r\n      0,\r\n    );\r\n  }\r\n\r\n  get casts() {\r\n    return [...this.eventGrouper].length;\r\n  }\r\n\r\n  get currentBoltNumber() {\r\n    return [...this.eventGrouper].slice(-1)[0].length - 1; // -1 here for legacy code\r\n  }\r\n\r\n  _boltCount = 3;\r\n  hits = 0;\r\n  eventGrouper = new EventGrouper(PENANCE_MINIMUM_RECAST_TIME);\r\n\r\n  constructor(options) {\r\n    super(options);\r\n\r\n    // Castigation Penance bolt count to 4 (from 3)\r\n    this._boltCount = this.selectedCombatant.hasTalent(SPELLS.CASTIGATION_TALENT.id) ? 4 : 3;\r\n    this.addEventListener(Events.damage.by(SELECTED_PLAYER), this.onDamage);\r\n    this.addEventListener(Events.heal.by(SELECTED_PLAYER), this.onHeal);\r\n  }\r\n\r\n  static isPenance = (spellId) =>\r\n    spellId === SPELLS.PENANCE.id || spellId === SPELLS.PENANCE_HEAL.id || spellId === SPELLS.PENANCE_CAST.id;\r\n\r\n  onDamage(event) {\r\n    if (!Penance.isPenance(event.ability.guid)) {\r\n      return;\r\n    }\r\n\r\n    this.eventGrouper.processEvent(event);\r\n\r\n    event.penanceBoltNumber = this.currentBoltNumber;\r\n  }\r\n\r\n  onHeal(event) {\r\n    if (!Penance.isPenance(event.ability.guid)) {\r\n      return;\r\n    }\r\n\r\n    this.eventGrouper.processEvent(event);\r\n\r\n    event.penanceBoltNumber = this.currentBoltNumber;\r\n  }\r\n\r\n  statistic() {\r\n    return (\r\n      <Statistic\r\n        position={STATISTIC_ORDER.CORE(13)}\r\n        size=\"small\"\r\n        tooltip={(\r\n          <>\r\n            Each <SpellLink id={SPELLS.PENANCE.id} /> cast has 3 bolts (4 if you're using <SpellLink id={SPELLS.CASTIGATION_TALENT.id} />). You should try to let this channel finish as much as possible. You channeled Penance {this.casts} times.\r\n          </>\r\n        )}\r\n      >\r\n        <BoringSpellValue\r\n          spell={SPELLS.PENANCE}\r\n          value={this.missedBolts}\r\n          label={(\r\n            <>\r\n              Wasted <SpellLink id={SPELLS.PENANCE.id} /> bolts\r\n            </>\r\n          )}\r\n        />\r\n      </Statistic>\r\n    );\r\n  }\r\n}\r\n\r\nexport default Penance;\r\n","import SPELLS from 'common/SPELLS';\r\nimport CoreChanneling from 'parser/shared/modules/Channeling';\r\nimport { Ability, CastEvent, EndChannelEvent } from 'parser/core/Events';\r\nimport { Options } from 'parser/core/Module';\r\n\r\nimport Penance from '../spells/Penance';\r\n\r\nconst PENANCE_MINIMUM_RECAST_TIME = 3500; // Minimum duration from one Penance to Another\r\n\r\nconst debug = false;\r\n\r\nclass Channeling extends CoreChanneling {\r\n  _previousPenanceTimestamp = this.owner.fight.start_time - PENANCE_MINIMUM_RECAST_TIME;\r\n  _hasCastigation: boolean = false;\r\n  _bolt: number = 0;\r\n\r\n  constructor(options: Options) {\r\n    super(options);\r\n    this._hasCastigation = this.selectedCombatant.hasTalent(\r\n      SPELLS.CASTIGATION_TALENT.id,\r\n    );\r\n  }\r\n\r\n  isNewPenanceCast(timestamp: number) {\r\n    return timestamp - this._previousPenanceTimestamp > PENANCE_MINIMUM_RECAST_TIME;\r\n  }\r\n\r\n  onCast(event: CastEvent) {\r\n    if (!Penance.isPenance(event.ability.guid)) {\r\n      super.onCast(event);\r\n      return;\r\n    }\r\n\r\n    // Handle the first bolt of each cast\r\n    if (this.isNewPenanceCast(event.timestamp)) {\r\n      this._bolt = 0;\r\n      this._previousPenanceTimestamp = event.timestamp;\r\n      this.beginChannel(event, {\r\n        guid: SPELLS.PENANCE.id,\r\n        name: SPELLS.PENANCE.name,\r\n        type: 2,\r\n        abilityIcon: SPELLS.PENANCE.icon,\r\n      });\r\n\r\n      return;\r\n    }\r\n\r\n    // Handle following bolts\r\n    const maxBolts = this._hasCastigation ? 4 : 3;\r\n    this._bolt += 1;\r\n\r\n    // Bolt is 0 indexed, so we've fired all bolts when _bolt equals maxBolts - 1\r\n    if (this._bolt === maxBolts - 1) {\r\n      console.log('Ending Penance channel due to last bolt being fired');\r\n      this.endChannel(event);\r\n    }\r\n  }\r\n\r\n  cancelChannel(event: EndChannelEvent, ability: Ability) {\r\n    if (this.isChannelingSpell(SPELLS.PENANCE.id)) {\r\n      // If a channeling spell is \"canceled\" it was actually just ended, so if it looks canceled then instead just mark it as ended\r\n      debug && this.debug(\r\n        'Marking',\r\n        this._currentChannel.ability.name,\r\n        'as ended since we started casting something else:',\r\n        event.ability.name,\r\n      );\r\n      this.endChannel(event);\r\n    } else {\r\n      super.cancelChannel(event, ability);\r\n    }\r\n  }\r\n}\r\n\r\nexport default Channeling;\r\n","import CoreGlobalCooldown from 'parser/shared/modules/GlobalCooldown';\r\nimport { CastEvent } from 'parser/core/Events';\r\n\r\nimport Penance from '../spells/Penance';\r\n\r\n/**\r\n * Mind Flay has ticks marked as \"cast\", and we fix its channel in Channeling. This also fixes its GCD.\r\n */\r\nclass GlobalCooldown extends CoreGlobalCooldown {\r\n  onCast(event: CastEvent) {\r\n    if (Penance.isPenance(event.ability.guid)) {\r\n      // This GCD gets handled by the `beginchannel` event\r\n      return;\r\n    }\r\n    super.onCast(event);\r\n  }\r\n}\r\n\r\nexport default GlobalCooldown;\r\n","import Analyzer, { SELECTED_PLAYER } from 'parser/core/Analyzer';\r\nimport Events, { EventType } from 'parser/core/Events';\r\nimport EventEmitter from 'parser/core/modules/EventEmitter';\r\nimport EventFilter from 'parser/core/EventFilter';\r\nimport HIT_TYPES from 'game/HIT_TYPES';\r\n\r\nimport { ATONEMENT_DAMAGE_SOURCES } from '../../constants';\r\nimport isAtonement from './isAtonement';\r\n\r\nexport default class AtonementAnalyzer extends Analyzer {\r\n  /**\r\n   * Event filter for damage events that will cause\r\n   */\r\n  get atonementDamageSourceFilter() {\r\n    return new EventFilter(EventType.AtonementDamage);\r\n  }\r\n\r\n  /**\r\n   * Event filter for atonement\r\n   * Contains both the healEvent and damageEvent\r\n   */\r\n  get atonementEventFilter() {\r\n    return new EventFilter(EventType.Atonement);\r\n  }\r\n\r\n  static dependencies = {\r\n    eventEmitter: EventEmitter,\r\n  };\r\n  static validHitTypes = {\r\n    [HIT_TYPES.NORMAL]: true,\r\n    [HIT_TYPES.CRIT]: true,\r\n    [HIT_TYPES.ABSORB]: true,\r\n  };\r\n  _atonementSource = null;\r\n\r\n  constructor(options) {\r\n    super(options);\r\n\r\n    this.addEventListener(Events.heal.by(SELECTED_PLAYER), this._processAtonement);\r\n    this.addEventListener(Events.damage, this._processAtonementDamageSource);\r\n  }\r\n\r\n  /**\r\n   * Filters damage events for those that could cause Atonement, and emits\r\n   * the event for use by other modules\r\n   *\r\n   * @param {Object} damageEvent A damaging event\r\n   */\r\n  _processAtonementDamageSource(damageEvent) {\r\n    if (!ATONEMENT_DAMAGE_SOURCES[damageEvent.ability.guid]) {\r\n      return;\r\n    }\r\n    if (damageEvent.targetIsFriendly) {\r\n      return;\r\n    } // Friendly fire doesn't cause atonement\r\n    if (!AtonementAnalyzer.validHitTypes[damageEvent.hitType]) {\r\n      return;\r\n    }\r\n\r\n    this._atonementSource = damageEvent;\r\n\r\n    this.eventEmitter.fabricateEvent({\r\n      ...damageEvent,\r\n      type: this.atonementDamageSourceFilter.eventType,\r\n    });\r\n  }\r\n\r\n  /**\r\n   * Filters all healing events, and emits an event that contains both the\r\n   * atonement event itself, and the associated damaging event\r\n   *\r\n   * @param {Object} healEvent A healing event\r\n   */\r\n  _processAtonement(healEvent) {\r\n    const damageEvent = this._atonementSource;\r\n    if (!damageEvent) {\r\n      return;\r\n    }\r\n    if (!isAtonement(healEvent)) {\r\n      return;\r\n    }\r\n\r\n    this.eventEmitter.fabricateEvent({\r\n      healEvent,\r\n      damageEvent,\r\n      sourceID: healEvent.sourceID,\r\n      type: this.atonementEventFilter.eventType,\r\n    });\r\n  }\r\n}\r\n","export default {\r\n  ABC_NOT_HEALING: {\r\n    minor: 0.30,\r\n    regular: 0.40,\r\n    major: 1.00,\r\n  },\r\n  ABC_NOT_CASTING: {\r\n    minor: 0.20,\r\n    regular: 0.35,\r\n    major: 1.00,\r\n  },\r\n  PURGE_THE_WICKED_UPTIME: {\r\n    minor: 0.97,\r\n    regular: 0.85,\r\n    major: 0.70,\r\n  },\r\n};\r\n","import SPELLS from 'common/SPELLS';\r\nimport CoreAlwaysBeCastingHealing from 'parser/shared/modules/AlwaysBeCastingHealing';\r\nimport { formatPercentage } from 'common/format';\r\nimport { SuggestionFactory, When } from 'parser/core/ParseResults';\r\nimport { CastEvent } from 'parser/core/Events';\r\nimport { i18n } from '@lingui/core';\r\nimport { t } from '@lingui/macro';\r\n\r\nimport SuggestionThresholds from '../../SuggestionThresholds';\r\n\r\nconst debug = false;\r\n\r\n/** The amount of time during which it's impossible a second Penance could have started */\r\nconst PENANCE_CHANNEL_TIME_BUFFER = 2500;\r\n\r\nclass AlwaysBeCasting extends CoreAlwaysBeCastingHealing {\r\n// counting damaging abilities here because of atonement mechanics\r\n  static HEALING_ABILITIES_ON_GCD = [\r\n    SPELLS.POWER_WORD_SHIELD.id,\r\n    SPELLS.POWER_WORD_RADIANCE.id,\r\n    SPELLS.SHADOW_MEND.id,\r\n    SPELLS.HALO_TALENT.id,\r\n    SPELLS.DIVINE_STAR_TALENT.id,\r\n    SPELLS.MASS_DISPEL.id,\r\n    SPELLS.DISPEL_MAGIC.id,\r\n    SPELLS.POWER_WORD_BARRIER_CAST.id,\r\n    SPELLS.PURIFY.id,\r\n    SPELLS.POWER_WORD_SOLACE_TALENT.id,\r\n    SPELLS.SHADOW_COVENANT_TALENT.id,\r\n    SPELLS.EVANGELISM_TALENT.id,\r\n  ];\r\n\r\n  lastPenanceStartTimestamp: number = 0;\r\n  _lastCastFinishedTimestamp: number = 0;\r\n\r\n  // TODO: Fix me\r\n  recordCastTime(\r\n    castStartTimestamp: number,\r\n    globalCooldown: number,\r\n    begincast: number,\r\n    cast: CastEvent,\r\n    spellId: number,\r\n  ) {\r\n    if (spellId === SPELLS.PENANCE.id || spellId === SPELLS.PENANCE_HEAL.id) {\r\n      if (!this.lastPenanceStartTimestamp || (castStartTimestamp - this.lastPenanceStartTimestamp) > PENANCE_CHANNEL_TIME_BUFFER) {\r\n        debug && console.log('%cABC: New penance channel started', 'color: orange');\r\n        this.lastPenanceStartTimestamp = castStartTimestamp;\r\n      } else {\r\n        // This is a follow up from an existing Penance channel, it doesn't start its own GCD but the last cast is always after the initial GCD. This makes it so the last cast is still considered a valid cast.\r\n        debug && console.log('%cABC: Follow up penance cast, ignoring time wasted', 'color: gray');\r\n        this._lastCastFinishedTimestamp = Math.max(this._lastCastFinishedTimestamp, cast.timestamp);\r\n        return; // by returning here we don't get an invalid time wasted added\r\n      }\r\n    }\r\n  }\r\n\r\n  suggestions(when: When) {\r\n    const deadTimePercentage = this.totalTimeWasted / this.owner.fightDuration;\r\n\r\n    when(deadTimePercentage).isGreaterThan(SuggestionThresholds.ABC_NOT_CASTING.minor)\r\n      .addSuggestion((suggest: SuggestionFactory, actual: number, recommended: number) => suggest('Your downtime can be improved. Try to Always Be Casting (ABC); try to reduce the delay between casting spells and when you\\'re not healing try to contribute some damage.')\r\n        .icon('spell_mage_altertime')\r\n        .actual(i18n._(t('priest.discipline.suggestions.alwaysBeCasting.downtime')`${formatPercentage(actual)}% downtime`))\r\n        .recommended(`<${formatPercentage(recommended)}% is recommended`)\r\n        .regular(SuggestionThresholds.ABC_NOT_CASTING.regular)\r\n        .major(SuggestionThresholds.ABC_NOT_CASTING.major));\r\n  }\r\n}\r\n\r\nexport default AlwaysBeCasting;\r\n","import React from 'react';\r\nimport PropTypes from 'prop-types';\r\n\r\nimport SPELLS from 'common/SPELLS';\r\n// import ITEMS from 'common/ITEMS';\r\nimport SpellLink from 'common/SpellLink';\r\n// import ItemLink from 'common/ItemLink';\r\nimport ResourceLink from 'common/ResourceLink';\r\nimport RESOURCE_TYPES from 'game/RESOURCE_TYPES';\r\nimport { TooltipElement } from 'common/Tooltip';\r\nimport Checklist from 'parser/shared/modules/features/Checklist';\r\nimport Rule from 'parser/shared/modules/features/Checklist/Rule';\r\nimport Requirement from 'parser/shared/modules/features/Checklist/Requirement';\r\nimport PreparationRule from 'parser/shared/modules/features/Checklist/PreparationRule';\r\nimport GenericCastEfficiencyRequirement from 'parser/shared/modules/features/Checklist/GenericCastEfficiencyRequirement';\r\nimport Combatant from 'parser/core/Combatant';\r\nimport CastEfficiency from 'parser/shared/modules/CastEfficiency';\r\n\r\nconst DisciplinePriestChecklist = ({ combatant, castEfficiency, thresholds }: { combatant: Combatant, castEfficiency: CastEfficiency, thresholds: any }) => {\r\n  const AbilityRequirement = (props: { spell: number }) => (\r\n    <GenericCastEfficiencyRequirement\r\n      castEfficiency={castEfficiency.getCastEfficiencyForSpellId(props.spell)}\r\n      {...props}\r\n    />\r\n  );\r\n  AbilityRequirement.propTypes = {\r\n    spell: PropTypes.number.isRequired,\r\n  };\r\n\r\n  return (\r\n    <Checklist>\r\n      <Rule\r\n        name=\"Use core abilities as often as possible\"\r\n        description={(\r\n          <>\r\n            Using your core abilities as often as possible will typically result in better performance, remember to <SpellLink id={SPELLS.SMITE.id} /> as often as you can!\r\n          </>\r\n        )}\r\n      >\r\n        <AbilityRequirement spell={SPELLS.PENANCE_CAST.id} />\r\n        {combatant.hasTalent(SPELLS.SCHISM_TALENT.id) && (\r\n          <AbilityRequirement spell={SPELLS.SCHISM_TALENT.id} />\r\n        )}\r\n        {combatant.hasTalent(SPELLS.POWER_WORD_SOLACE_TALENT.id) && (\r\n          <AbilityRequirement spell={SPELLS.POWER_WORD_SOLACE_TALENT.id} />\r\n        )}\r\n        {combatant.hasTalent(SPELLS.DIVINE_STAR_TALENT.id) && (\r\n          <AbilityRequirement spell={SPELLS.DIVINE_STAR_TALENT.id} />\r\n        )}\r\n        {combatant.hasTalent(SPELLS.SHADOW_COVENANT_TALENT.id) && (\r\n          <AbilityRequirement spell={SPELLS.SHADOW_COVENANT_TALENT.id} />\r\n        )}\r\n      </Rule>\r\n\r\n      <Rule\r\n        name=\"Use cooldowns effectively\"\r\n        description={(\r\n          <>\r\n            Cooldowns are an important part of healing, try to use them to counter fight mechanics. For example if a boss has burst damage every 1.5 minutes, <SpellLink id={SPELLS.RAPTURE.id} /> should be used to counter it.\r\n          </>\r\n        )}\r\n      >\r\n        <AbilityRequirement spell={SPELLS.RAPTURE.id} />\r\n        {!combatant.hasTalent(SPELLS.LUMINOUS_BARRIER_TALENT.id) && (\r\n          <AbilityRequirement spell={SPELLS.POWER_WORD_BARRIER_CAST.id} />\r\n        )}\r\n        {!combatant.hasTalent(SPELLS.MINDBENDER_TALENT_SHARED.id) && (\r\n          <AbilityRequirement spell={SPELLS.SHADOWFIEND.id} />\r\n        )}\r\n        {combatant.hasTalent(SPELLS.MINDBENDER_TALENT_SHARED.id) && (\r\n          <AbilityRequirement spell={SPELLS.MINDBENDER_TALENT_SHARED.id} />\r\n        )}\r\n        {combatant.hasTalent(SPELLS.HALO_TALENT.id) && (\r\n          <AbilityRequirement spell={SPELLS.HALO_TALENT.id} />\r\n        )}\r\n        {combatant.hasTalent(SPELLS.LUMINOUS_BARRIER_TALENT.id) && (\r\n          <AbilityRequirement spell={SPELLS.LUMINOUS_BARRIER_TALENT.id} />\r\n        )}\r\n        {combatant.hasTalent(SPELLS.EVANGELISM_TALENT.id) && (\r\n          <AbilityRequirement spell={SPELLS.EVANGELISM_TALENT.id} />\r\n        )}\r\n        {/* We can't detect race, so disable this when it has never been cast. */}\r\n        {castEfficiency.getCastEfficiencyForSpellId(SPELLS.ARCANE_TORRENT_MANA1.id) && (\r\n          <AbilityRequirement spell={SPELLS.ARCANE_TORRENT_MANA1.id} />\r\n        )}\r\n      </Rule>\r\n\r\n      <Rule\r\n        name=\"Use your supportive abilities\"\r\n        description=\"While you shouldn't aim to cast defensives and externals on cooldown, be aware of them and try to use them whenever effective. Not using them at all indicates you might not be aware of them enough or not utilizing them optimally.\"\r\n      >\r\n        <AbilityRequirement spell={SPELLS.PAIN_SUPPRESSION.id} />\r\n        <AbilityRequirement spell={SPELLS.LEAP_OF_FAITH.id} />\r\n        <AbilityRequirement spell={SPELLS.DESPERATE_PRAYER.id} />\r\n      </Rule>\r\n\r\n      <Rule\r\n        name=\"Try to avoid being inactive for a large portion of the fight\"\r\n        description={(\r\n          <>\r\n            High downtime is inexcusable, while it may be tempting to not cast and save mana, Discipline's damage fillers such as <SpellLink id={SPELLS.SMITE.id} /> are extremely cheap. You can reduce your downtime by reducing the delay between casting spells, anticipating movement, moving during the GCD, and <TooltipElement content=\"You can ignore this while learning Discipline, but contributing DPS whilst healing is a major part of becoming a better than average player.\">when you're not healing try to contribute some damage.*</TooltipElement>.\r\n          </>\r\n        )}\r\n      >\r\n        <Requirement name=\"Non healing time\" thresholds={thresholds.nonHealingTimeSuggestionThresholds} />\r\n        <Requirement name=\"Downtime\" thresholds={thresholds.downtimeSuggestionThresholds} />\r\n      </Rule>\r\n\r\n      <Rule\r\n        name={<>Use all of your <ResourceLink id={RESOURCE_TYPES.MANA.id} /> effectively</>}\r\n        description=\"If you have a large amount of mana left at the end of the fight that's mana you could have turned into healing. Try to use all your mana during a fight. A good rule of thumb is to try to match your mana level with the boss's health.\"\r\n      >\r\n        <Requirement name=\"Mana left\" thresholds={thresholds.manaLeft} />\r\n      </Rule>\r\n      <PreparationRule thresholds={thresholds} />\r\n    </Checklist>\r\n  );\r\n};\r\n\r\nDisciplinePriestChecklist.propTypes = {\r\n  castEfficiency: PropTypes.object.isRequired,\r\n  combatant: PropTypes.shape({\r\n    hasTalent: PropTypes.func.isRequired,\r\n  }).isRequired,\r\n  thresholds: PropTypes.object.isRequired,\r\n};\r\n\r\nexport default DisciplinePriestChecklist;\r\n","import React from 'react';\r\n\r\nimport BaseChecklist from 'parser/shared/modules/features/Checklist/Module';\r\nimport CastEfficiency from 'parser/shared/modules/CastEfficiency';\r\nimport Combatants from 'parser/shared/modules/Combatants';\r\nimport ManaValues from 'parser/shared/modules/ManaValues';\r\nimport PreparationRuleAnalyzer from 'parser/shared/modules/features/Checklist/PreparationRuleAnalyzer';\r\n\r\nimport AlwaysBeCasting from '../AlwaysBeCasting';\r\n\r\nimport Component from './Component';\r\n\r\nclass Checklist extends BaseChecklist {\r\n  static dependencies = {\r\n    combatants: Combatants,\r\n    castEfficiency: CastEfficiency,\r\n    alwaysBeCasting: AlwaysBeCasting,\r\n    manaValues: ManaValues,\r\n    preparationRuleAnalyzer: PreparationRuleAnalyzer,\r\n  };\r\n\r\n  protected combatants!: Combatants;\r\n  protected castEfficiency!: CastEfficiency;\r\n  protected alwaysBeCasting!: AlwaysBeCasting;\r\n  protected manaValues!: ManaValues;\r\n  protected preparationRuleAnalyzer!: PreparationRuleAnalyzer;\r\n\r\n  render() {\r\n    return (\r\n      <Component\r\n        combatant={this.combatants.selected}\r\n        castEfficiency={this.castEfficiency}\r\n        thresholds={{\r\n          ...this.preparationRuleAnalyzer.thresholds,\r\n\r\n          nonHealingTimeSuggestionThresholds: this.alwaysBeCasting.nonHealingTimeSuggestionThresholds,\r\n          downtimeSuggestionThresholds: this.alwaysBeCasting.downtimeSuggestionThresholds,\r\n          manaLeft: this.manaValues.suggestionThresholds,\r\n        }}\r\n      />\r\n    );\r\n  }\r\n}\r\n\r\nexport default Checklist;\r\n","import SPELLS from 'common/SPELLS';\r\nimport Analyzer, { Options, SELECTED_PLAYER } from 'parser/core/Analyzer';\r\nimport Events, { ApplyBuffEvent, HealEvent } from 'parser/core/Events';\r\nimport { POWER_WORD_RADIANCE_ATONEMENT_DUR, POWER_WORD_SHIELD_ATONEMENT_DUR, SHADOW_MEND_ATONEMENT_DUR } from 'parser/priest/discipline/constants';\r\n\r\nclass AtonementApplicationSource extends Analyzer {\r\n  // Spells that apply atonement\r\n  atonementApplicators = new Map([\r\n    [SPELLS.POWER_WORD_RADIANCE.id, POWER_WORD_RADIANCE_ATONEMENT_DUR],\r\n    [SPELLS.POWER_WORD_SHIELD.id, POWER_WORD_SHIELD_ATONEMENT_DUR],\r\n    [SPELLS.SHADOW_MEND.id, SHADOW_MEND_ATONEMENT_DUR],\r\n  ]);\r\n\r\n  constructor(options: Options) {\r\n    super(options);\r\n    this.addEventListener(Events.applybuff.by(SELECTED_PLAYER), this.onApplyBuff);\r\n    this.addEventListener(Events.heal.by(SELECTED_PLAYER), this.onHeal);\r\n  }\r\n\r\n  get duration() {\r\n    return this.atonementApplicators;\r\n  }\r\n\r\n  _event: ApplyBuffEvent | HealEvent | null = null;\r\n\r\n  get event() {\r\n    return this._event;\r\n  }\r\n\r\n  onApplyBuff(event: ApplyBuffEvent) {\r\n    if (this.atonementApplicators.has(event.ability.guid)) {\r\n      this._event = event;\r\n    }\r\n  }\r\n\r\n  onHeal(event: HealEvent) {\r\n    if (this.atonementApplicators.has(event.ability.guid)) {\r\n      this._event = event;\r\n    }\r\n  }\r\n}\r\n\r\nexport default AtonementApplicationSource;\r\n","import React from 'react';\r\n\r\nimport SPELLS from 'common/SPELLS';\r\nimport SpellIcon from 'common/SpellIcon';\r\n\r\nimport Analyzer, { SELECTED_PLAYER } from 'parser/core/Analyzer';\r\nimport Combatants from 'parser/shared/modules/Combatants';\r\nimport EventEmitter from 'parser/core/modules/EventEmitter';\r\nimport StatisticBox, { STATISTIC_ORDER } from 'interface/others/StatisticBox';\r\nimport { formatPercentage } from 'common/format';\r\nimport Events, { ApplyBuffEvent, EventType, HealEvent, RefreshBuffEvent, RemoveBuffEvent } from 'parser/core/Events';\r\nimport { Options } from 'parser/core/Module';\r\n\r\nimport isAtonement from '../core/isAtonement';\r\nimport AtonementApplicationSource from '../features/AtonementApplicationSource';\r\n\r\nconst debug = false;\r\n\r\n/** The amount of time (in ms) left on a refresh Atonement for it to be considered inefficient. */\r\nconst IMPROPER_REFRESH_TIME = 3000;\r\n\r\ninterface AtonementTarget {\r\n  target: number;\r\n  lastAtonementAppliedTimestamp: number;\r\n  atonementExpirationTimestamp: number;\r\n}\r\n\r\nclass Atonement extends Analyzer {\r\n  static dependencies = {\r\n    eventEmitter: EventEmitter,\r\n    combatants: Combatants,\r\n    atonementApplicationSource: AtonementApplicationSource,\r\n  };\r\n  healing = 0;\r\n  totalAtones = 0;\r\n  totalAtonementRefreshes = 0;\r\n  currentAtonementTargets: AtonementTarget[] = [];\r\n  improperAtonementRefreshes: AtonementTarget[] = [];\r\n  statisticOrder = STATISTIC_ORDER.OPTIONAL();\r\n  protected eventEmitter!: EventEmitter;\r\n  protected combatants!: Combatants;\r\n  protected atonementApplicationSource!: AtonementApplicationSource;\r\n\r\n  constructor(options: Options) {\r\n    super(options);\r\n    this.active = true;\r\n    this.addEventListener(Events.applybuff.by(SELECTED_PLAYER).spell(SPELLS.ATONEMENT_BUFF), this.onApplyBuff);\r\n    this.addEventListener(Events.refreshbuff.by(SELECTED_PLAYER).spell(SPELLS.ATONEMENT_BUFF), this.onRefreshBuff);\r\n    this.addEventListener(Events.removebuff.by(SELECTED_PLAYER).spell(SPELLS.ATONEMENT_BUFF), this.onRemoveBuff);\r\n    this.addEventListener(Events.heal.by(SELECTED_PLAYER), this.onHeal);\r\n  }\r\n\r\n  get atonementDuration() {\r\n    const applicatorEvent = this.atonementApplicationSource.event;\r\n    if (!applicatorEvent) {\r\n      return 15;\r\n    }\r\n    const applicatorSpellId = applicatorEvent.ability.guid;\r\n    let duration = this.atonementApplicationSource.duration.get(applicatorSpellId) || 0;\r\n\r\n    if (applicatorSpellId === SPELLS.POWER_WORD_SHIELD.id && this.selectedCombatant.hasBuff(SPELLS.RAPTURE.id, applicatorEvent.timestamp)) {\r\n      duration += 6;\r\n    }\r\n\r\n    return duration;\r\n  }\r\n\r\n  get numAtonementsActive() {\r\n    return this.currentAtonementTargets.length;\r\n  }\r\n\r\n  get giftActive() {\r\n    return this.numAtonementsActive >= 3;\r\n  }\r\n\r\n  onApplyBuff(event: ApplyBuffEvent) {\r\n    const atonement = {\r\n      target: event.targetID,\r\n      lastAtonementAppliedTimestamp: event.timestamp,\r\n      atonementExpirationTimestamp: event.timestamp + this.atonementDuration,\r\n    };\r\n\r\n    this.currentAtonementTargets = this.currentAtonementTargets.filter(id => id.target !== atonement.target);\r\n    this.currentAtonementTargets.push(atonement);\r\n    this.totalAtones += 1;\r\n    debug && console.log(`%c${this.combatants.players[atonement.target].name} gained an atonement`, 'color:green', this.currentAtonementTargets);\r\n    this.eventEmitter.fabricateEvent({\r\n      ...event,\r\n      type: EventType.AtonementApplied,\r\n    }, event);\r\n  }\r\n\r\n  onRefreshBuff(event: RefreshBuffEvent) {\r\n    // Check if Atonement was refreshed too early\r\n    let refreshedTarget: AtonementTarget | undefined = this.currentAtonementTargets.find(id => id.target === event.targetID);\r\n    if (!refreshedTarget) {\r\n      refreshedTarget = {\r\n        target: event.targetID,\r\n        lastAtonementAppliedTimestamp: this.owner.fight.start_time,\r\n        atonementExpirationTimestamp: 0,\r\n      };\r\n      debug && console.warn('Atonement: was applied prior to combat');\r\n    }\r\n    const timeSinceApplication = event.timestamp - refreshedTarget.lastAtonementAppliedTimestamp;\r\n    if (timeSinceApplication < ((this.atonementDuration) - IMPROPER_REFRESH_TIME)) {\r\n      this.improperAtonementRefreshes.push(refreshedTarget);\r\n      debug && console.log(`%c${this.combatants.players[event.targetID].name} refreshed an atonement too early %c${timeSinceApplication}`, 'color:red', this.currentAtonementTargets);\r\n      this.eventEmitter.fabricateEvent({\r\n        ...event,\r\n        type: EventType.AtonementRefreshImproper,\r\n      }, event);\r\n    }\r\n\r\n    const atonement = {\r\n      target: event.targetID,\r\n      lastAtonementAppliedTimestamp: event.timestamp,\r\n      // Refreshing an Atonement will never reduce its duration\r\n      atonementExpirationTimestamp: Math.max(refreshedTarget.atonementExpirationTimestamp, event.timestamp + this.atonementDuration),\r\n    };\r\n    this.currentAtonementTargets = this.currentAtonementTargets.filter(item => item.target !== atonement.target);\r\n    this.currentAtonementTargets.push(atonement);\r\n\r\n    this.totalAtones += 1;\r\n    this.totalAtonementRefreshes += 1;\r\n    debug && console.log(`%c${this.combatants.players[atonement.target].name} refreshed an atonement`, 'color:orange', this.currentAtonementTargets);\r\n    this.eventEmitter.fabricateEvent({\r\n      ...event,\r\n      type: EventType.AtonementRefresh,\r\n    }, event);\r\n  }\r\n\r\n  onRemoveBuff(event: RemoveBuffEvent) {\r\n    const atonement = {\r\n      target: event.targetID,\r\n      lastAtonementAppliedTimestamp: event.timestamp,\r\n    };\r\n    this.currentAtonementTargets = this.currentAtonementTargets.filter(id => id.target !== atonement.target);\r\n    debug && console.log(`%c${this.combatants.players[atonement.target].name} lost an atonement`, 'color:red', this.currentAtonementTargets);\r\n    this.eventEmitter.fabricateEvent({\r\n      ...event,\r\n      type: EventType.AtonementFaded,\r\n    }, event);\r\n  }\r\n\r\n  onHeal(event: HealEvent) {\r\n    if (isAtonement(event)) {\r\n      return;\r\n    }\r\n\r\n    debug && console.log('Atonement:', event.amount + (event.absorbed || 0), 'healing done to', event.targetID);\r\n    this.healing += event.amount + (event.absorbed || 0);\r\n  }\r\n\r\n  statistic() {\r\n    const improperLength = this.improperAtonementRefreshes.length || 0;\r\n    const totalAtonementRefreshes = this.totalAtonementRefreshes || 0;\r\n    const totalAtones = this.totalAtones || 0;\r\n\r\n    return (\r\n      <StatisticBox\r\n        icon={<SpellIcon id={SPELLS.ATONEMENT_HEAL_NON_CRIT.id} />}\r\n        value={improperLength}\r\n        label={(\r\n          <>\r\n            Early Atonement refreshes\r\n          </>\r\n        )}\r\n        tooltip={`The amount of Atonement instances that were refreshed earlier than within 3 seconds of the buff expiring. You applied Atonement ${totalAtones} times in total, ${totalAtonementRefreshes} (${formatPercentage((totalAtonementRefreshes / totalAtones), 2)}%) of them were refreshes of existing Atonement instances, and ${improperLength} (${formatPercentage((improperLength / totalAtones), 2)}%) of them were considered early.`}\r\n      />\r\n    );\r\n  }\r\n}\r\n\r\nexport default Atonement;\r\n","import SPELLS from 'common/SPELLS';\r\nimport CoreCooldownThroughputTracker, { BUILT_IN_SUMMARY_TYPES, TrackedCooldown } from 'parser/shared/modules/CooldownThroughputTracker';\r\nimport { CastEvent, HealEvent } from 'parser/core/Events';\r\nimport EventHistory from 'parser/shared/modules/EventHistory';\r\n\r\nimport isAtonement from '../core/isAtonement';\r\nimport Atonement from '../spells/Atonement';\r\n\r\nconst EVANGELISM_ADDED_DURATION = 6000;\r\n\r\nclass CooldownThroughputTracker extends CoreCooldownThroughputTracker {\r\n  static dependencies = {\r\n    atonementModule: Atonement,\r\n    eventHistory: EventHistory,\r\n  };\r\n  static cooldownSpells = [\r\n    ...CoreCooldownThroughputTracker.cooldownSpells,\r\n    {\r\n      spell: SPELLS.RAPTURE,\r\n      summary: [\r\n        BUILT_IN_SUMMARY_TYPES.ABSORBS_APPLIED,\r\n        BUILT_IN_SUMMARY_TYPES.ABSORBED,\r\n        BUILT_IN_SUMMARY_TYPES.MANA,\r\n      ],\r\n    },\r\n  ];\r\n  lastEvangelism: TrackedCooldown | null = null;\r\n  protected atonementModule!: Atonement;\r\n  protected eventHistory!: EventHistory;\r\n\r\n  onCast(event: CastEvent) {\r\n    const spellId = event.ability.guid;\r\n    if (spellId === SPELLS.EVANGELISM_TALENT.id) {\r\n      // When Evangelism is cast we want to see it in our cooldowns, but since it isn't a buff we can't use the regular `cooldownSpells`.\r\n      const atonedPlayers = this.atonementModule.numAtonementsActive;\r\n\r\n      this.lastEvangelism = this.addCooldown({\r\n        spell: SPELLS.EVANGELISM_TALENT,\r\n        summary: [\r\n          BUILT_IN_SUMMARY_TYPES.HEALING,\r\n          {\r\n            value: atonedPlayers,\r\n            label: 'Atonements',\r\n            tooltip: 'The amount of atonements that were up at time of casting Evangelism.',\r\n          },\r\n          {\r\n            value: `${atonedPlayers * 6}s`,\r\n            label: 'Duration gained',\r\n            tooltip: 'The total Atonement duration gained from casting Evangelism.',\r\n          },\r\n        ],\r\n      }, event.timestamp);\r\n\r\n      // Since Evangelism isn't a buff it doesn't really have a duration, for the sake of still providing somewhat useful info we just set the end to the last moment that Evangelism's effect did something\r\n      let lastAtonementExpiration = event.timestamp;\r\n      this.atonementModule.currentAtonementTargets.forEach((target) => {\r\n        if (lastAtonementExpiration === null || target.atonementExpirationTimestamp > lastAtonementExpiration) {\r\n          lastAtonementExpiration = target.atonementExpirationTimestamp;\r\n        }\r\n      });\r\n      this.lastEvangelism.end = lastAtonementExpiration + EVANGELISM_ADDED_DURATION;\r\n    }\r\n    if (this.lastEvangelism && this.lastEvangelism.end && this.lastEvangelism && event.timestamp < this.lastEvangelism.end) {\r\n      this.lastEvangelism.events.push(event);\r\n    }\r\n\r\n    super.onCast(event);\r\n  }\r\n\r\n  onHeal(event: HealEvent) {\r\n    if (this.lastEvangelism && isAtonement(event)) {\r\n      const target = this.atonementModule.currentAtonementTargets.find(item => item.target === event.targetID);\r\n      // Pets, guardians, etc.\r\n      if (!target) {\r\n        return;\r\n      }\r\n\r\n      // Add all healing that shouldn't exist due to expiration\r\n      if (event.timestamp > target.atonementExpirationTimestamp) {\r\n        this.lastEvangelism.events.push(event);\r\n      }\r\n    }\r\n\r\n    super.onHeal(event);\r\n  }\r\n}\r\n\r\nexport default CooldownThroughputTracker;\r\n","import React from 'react';\r\n\r\nimport StatisticBox, { STATISTIC_ORDER } from 'interface/others/StatisticBox';\r\nimport { formatNumber } from 'common/format';\r\nimport SpellIcon from 'common/SpellIcon';\r\nimport { TooltipElement } from 'common/Tooltip';\r\n\r\nimport SPELLS from 'common/SPELLS';\r\nimport Analyzer, { Options, SELECTED_PLAYER } from 'parser/core/Analyzer';\r\nimport Events, { RemoveBuffEvent } from 'parser/core/Events';\r\n\r\nclass PowerWordShieldWasted extends Analyzer {\r\n  wasted = 0;\r\n  count = 0;\r\n  totalCount = 0;\r\n  statisticOrder = STATISTIC_ORDER.CORE(10);\r\n\r\n  constructor(options: Options) {\r\n    super(options);\r\n    this.addEventListener(Events.removebuff.by(SELECTED_PLAYER).spell(SPELLS.POWER_WORD_SHIELD), this.onRemoveBuff);\r\n  }\r\n\r\n  onRemoveBuff(event: RemoveBuffEvent) {\r\n    if (event.absorb && event.absorb > 0) {\r\n      this.wasted += event.absorb;\r\n      this.count += 1;\r\n    }\r\n    this.totalCount += 1;\r\n  }\r\n\r\n  statistic() {\r\n    const wasted = this.wasted || 0;\r\n    const count = this.count || 0;\r\n    const totalCount = this.totalCount || 0;\r\n\r\n    return (\r\n      <StatisticBox\r\n        icon={<SpellIcon id={SPELLS.POWER_WORD_SHIELD.id} />}\r\n        value={`${formatNumber(wasted / this.owner.fightDuration * 1000)} HPS`}\r\n        label={(\r\n          <TooltipElement content={`The amount of shield absorb remaining on Power Word: Shield instances that have expired. There was a total of ${formatNumber(wasted)} unused Power Word: Shield absorb from ${count} shields with absorb remaining (a total of ${totalCount} shields were applied).`}>\r\n            Unused PW:S absorb\r\n          </TooltipElement>\r\n        )}\r\n      />\r\n    );\r\n  }\r\n}\r\n\r\nexport default PowerWordShieldWasted;\r\n","import Analyzer, { Options, SELECTED_PLAYER, SELECTED_PLAYER_PET } from 'parser/core/Analyzer';\r\nimport Events, { DamageEvent } from 'parser/core/Events';\r\n\r\nimport { ATONEMENT_DAMAGE_SOURCES } from '../../constants';\r\n\r\nclass AtonementDamageSource extends Analyzer {\r\n  constructor(options: Options) {\r\n    super(options);\r\n    this.addEventListener(Events.damage.by(SELECTED_PLAYER | SELECTED_PLAYER_PET), this.onDamage);\r\n  }\r\n\r\n  _event: DamageEvent | null = null;\r\n\r\n  get event() {\r\n    return this._event;\r\n  }\r\n\r\n  onDamage(event: DamageEvent) {\r\n    if (!ATONEMENT_DAMAGE_SOURCES[event.ability.guid]) {\r\n      return;\r\n    }\r\n    if (event.targetIsFriendly) {\r\n      // Friendly fire doesn't atonement transfer - I think. The only place I could find this is Aura of Sacrifice so it might also be restricted by spells not owned by the player (even though the player is the damage source), but that seems less likely.\r\n      return;\r\n    }\r\n    // The next Atonement healing will be caused by this spell\r\n    this._event = event;\r\n  }\r\n}\r\n\r\nexport default AtonementDamageSource;\r\n","import { DamageEvent, HealEvent } from 'parser/core/Events';\r\n\r\nexport function IsPenanceDamageEvent(event: DamageEvent): event is PenanceDamageEvent {\r\n  return (event as PenanceDamageEvent).penanceBoltNumber !== undefined;\r\n}\r\n\r\nexport interface PenanceDamageEvent extends DamageEvent {\r\n  penanceBoltNumber: number;\r\n}\r\n\r\nexport function IsPenanceHealEvent(event: HealEvent): event is PenanceHealEvent {\r\n  return (event as PenanceHealEvent).penanceBoltNumber !== undefined;\r\n}\r\n\r\nexport interface PenanceHealEvent extends HealEvent {\r\n  penanceBoltNumber: number;\r\n}\r\n","import React, { ChangeEvent, useCallback, useMemo, useState } from 'react';\r\nimport Toggle from 'react-toggle';\r\n\r\nimport Icon from 'common/Icon';\r\nimport SPELLS from 'common/SPELLS';\r\nimport SpellLink from 'common/SpellLink';\r\nimport { formatNumber, formatPercentage } from 'common/format';\r\nimport { TooltipElement } from 'common/Tooltip';\r\nimport AtonementHealingDone from 'parser/priest/discipline/modules/features/AtonementHealingDone';\r\nimport CombatLogParser from 'parser/core/CombatLogParser';\r\n\r\ninterface Props {\r\n  analyzer: AtonementHealingDone;\r\n  owner: CombatLogParser;\r\n}\r\n\r\nconst getReason = (spellId: string) => {\r\n  switch (Number(spellId)) {\r\n    case -2: // Melee\r\n      return <SpellLink id={SPELLS.LIGHTSPAWN.id} />;\r\n    default:\r\n      return null;\r\n  }\r\n};\r\n\r\nconst AtonementHealingBreakdown = ({\r\n  analyzer: { totalAtonement, bySource, total },\r\n  owner: { fightDuration },\r\n}: Props) => {\r\n  const [absolute, setAbsolute] = useState(false);\r\n\r\n  const onAbsoluteToggle = useCallback((event: ChangeEvent<HTMLInputElement>) => {\r\n    setAbsolute(event.target.checked);\r\n  }, []);\r\n\r\n  const tableBody = useMemo(() => {\r\n    const highestHealing = Object.keys(bySource)\r\n      .map((key) => bySource[key])\r\n      .reduce((highest, source) => Math.max(highest, source.healing.effective), 1);\r\n\r\n    return (\r\n      <tbody>\r\n        {bySource &&\r\n        Object.keys(bySource)\r\n          .sort((a, b) => bySource[b].healing.effective - bySource[a].healing.effective)\r\n          .map((spellId) => {\r\n            const { ability, healing, bolts } = bySource[spellId];\r\n\r\n            const currentTotal = absolute ? total : totalAtonement.effective;\r\n            const reason = getReason(spellId);\r\n\r\n            return (\r\n              <>\r\n                <tr key={ability.guid}>\r\n                  <td style={{ width: '30%' }}>\r\n                    <SpellLink id={ability.guid} icon={false}>\r\n                      <Icon icon={ability.abilityIcon} /> {ability.name}\r\n                    </SpellLink>\r\n                    {reason && <> ({reason})</>}\r\n                  </td>\r\n                  <td style={{ paddingRight: 5, textAlign: 'right', whiteSpace: 'nowrap' }}>\r\n                    {formatPercentage(healing.effective / currentTotal)} %\r\n                  </td>\r\n                  <td style={{ width: '70%' }}>\r\n                    {/* TODO: Color the bar based on the damage type, physical = yellow, chaos = gradient, etc. idk */}\r\n                    <div\r\n                      className=\"performance-bar\"\r\n                      style={{ width: `${(healing.effective / highestHealing) * 100}%` }}\r\n                    />\r\n                  </td>\r\n                  <td style={{ textAlign: 'right', whiteSpace: 'nowrap' }}>\r\n                    <TooltipElement content={`Total: ${formatNumber(healing.effective)}`}>\r\n                      {formatNumber((healing.effective / fightDuration) * 1000)} HPS\r\n                    </TooltipElement>\r\n                  </td>\r\n                  <td style={{ textAlign: 'right', whiteSpace: 'nowrap' }}>\r\n                    {formatPercentage(healing.overheal / healing.raw)} %\r\n                  </td>\r\n                </tr>\r\n\r\n                {bolts &&\r\n                bolts.map((value: any, index: number) => {\r\n                  if (!value) {\r\n                    return null;\r\n                  }\r\n\r\n                  return (\r\n                    <tr key={index}>\r\n                      <td style={{ width: '30%', paddingLeft: 50 }}>\r\n                        <SpellLink id={ability.guid} icon={false}>\r\n                          <Icon icon={ability.abilityIcon} /> {ability.name} bolt {index + 1}\r\n                        </SpellLink>\r\n                      </td>\r\n                      <td style={{ paddingRight: 5, textAlign: 'right', whiteSpace: 'nowrap' }}>\r\n                        {formatPercentage(value.effective / currentTotal)} %\r\n                      </td>\r\n                      <td style={{ width: '70%', paddingLeft: 50 }}>\r\n                        <div\r\n                          className=\"performance-bar\"\r\n                          style={{ width: `${(value.effective / healing.effective) * 100}%` }}\r\n                        />\r\n                      </td>\r\n                      <td style={{ textAlign: 'right', whiteSpace: 'nowrap' }}>\r\n                        <TooltipElement content={`Total: ${formatNumber(value.effective)}`}>\r\n                          {formatNumber((value.effective / fightDuration) * 1000)} HPS\r\n                        </TooltipElement>\r\n                      </td>\r\n                      <td style={{ textAlign: 'right', whiteSpace: 'nowrap' }}>\r\n                        {formatPercentage(value.overheal / healing.raw)} %\r\n                      </td>\r\n                    </tr>\r\n                  );\r\n                })}\r\n              </>\r\n            );\r\n          })}\r\n      </tbody>\r\n    );\r\n  }, [totalAtonement, bySource, total, fightDuration, absolute]);\r\n\r\n  return (\r\n    <div>\r\n      <table className=\"data-table\">\r\n        <thead>\r\n          <tr>\r\n            <th style={{ fontWeight: 700, textTransform: 'uppercase' }}>Name</th>\r\n            <th style={{ fontWeight: 700, textTransform: 'uppercase' }}>Healing</th>\r\n            <th colSpan={2}>\r\n              <div className=\"text-right toggle-control\">\r\n                <Toggle\r\n                  defaultChecked={false}\r\n                  icons={false}\r\n                  onChange={onAbsoluteToggle}\r\n                  id=\"absolute-toggle\"\r\n                />\r\n                <label htmlFor=\"absolute-toggle\" style={{ marginLeft: '0.5em' }}>\r\n                  relative to total healing\r\n                </label>\r\n              </div>\r\n            </th>\r\n            <th style={{ fontWeight: 700, textTransform: 'uppercase' }}>Overheal</th>\r\n          </tr>\r\n        </thead>\r\n        {tableBody}\r\n      </table>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default AtonementHealingBreakdown;\r\n","import React from 'react';\r\n\r\nimport SPELLS from 'common/SPELLS';\r\nimport SpellLink from 'common/SpellLink';\r\nimport Panel from 'interface/statistics/Panel';\r\nimport Analyzer, { Options, SELECTED_PLAYER } from 'parser/core/Analyzer';\r\nimport HealingValue from 'parser/shared/modules/HealingValue';\r\nimport Events, { Ability, AbsorbedEvent, DamageEvent, HealEvent } from 'parser/core/Events';\r\nimport { IsPenanceDamageEvent } from 'parser/priest/discipline/modules/spells/Helper';\r\n\r\nimport isAtonement from '../core/isAtonement';\r\nimport AtonementDamageSource from './AtonementDamageSource';\r\nimport AtonementHealingBreakdown from './AtonementHealingBreakdown';\r\nimport Penance from '../spells/Penance';\r\n\r\nclass AtonementHealingDone extends Analyzer {\r\n  static dependencies = {\r\n    atonementDamageSource: AtonementDamageSource,\r\n    penance: Penance,\r\n  };\r\n  total = 0;\r\n  _lastPenanceBoltNumber = 0;\r\n  bySource: Record<string, {\r\n    ability: Ability;\r\n    healing: HealingValue;\r\n    bolts?: HealingValue[];\r\n  }> = {};\r\n  protected atonementDamageSource!: AtonementDamageSource;\r\n  protected penance!: Penance;\r\n\r\n  constructor(options: Options) {\r\n    super(options);\r\n    this.addEventListener(Events.absorbed.by(SELECTED_PLAYER), this.onAbsorb);\r\n    this.addEventListener(Events.damage.by(SELECTED_PLAYER).spell(SPELLS.PENANCE), this.onDamage);\r\n    this.addEventListener(Events.heal.by(SELECTED_PLAYER), this.onHeal);\r\n  }\r\n\r\n  _totalAtonement = new HealingValue();\r\n\r\n  get totalAtonement() {\r\n    return this._totalAtonement;\r\n  }\r\n\r\n  onAbsorb(event: AbsorbedEvent) {\r\n    this.total += event.amount || 0;\r\n  }\r\n\r\n  onDamage(event: DamageEvent) {\r\n    if (IsPenanceDamageEvent(event)) {\r\n      this._lastPenanceBoltNumber = event.penanceBoltNumber;\r\n    }\r\n  }\r\n\r\n  onHeal(event: HealEvent) {\r\n    this.total += event.amount || 0;\r\n    this.total += event.absorbed || 0;\r\n\r\n    if (!isAtonement(event)) {\r\n      return;\r\n    }\r\n\r\n    const sourceEvent = this.atonementDamageSource.event;\r\n    if (sourceEvent) {\r\n      this._addHealing(sourceEvent, event.amount, event.absorbed, event.overheal);\r\n    }\r\n  }\r\n\r\n  // FIXME: 'byAbility()' added to HealingDone, this should no longer require custom code\r\n  _addHealing(source: DamageEvent, amount = 0, absorbed = 0, overheal = 0) {\r\n    const ability = source.ability;\r\n    const spellId = ability.guid;\r\n    this._totalAtonement = this._totalAtonement.add(amount, absorbed, overheal);\r\n    this.bySource[spellId] = this.bySource[spellId] || {};\r\n    this.bySource[spellId].ability = ability;\r\n    this.bySource[spellId].healing = (this.bySource[spellId].healing || new HealingValue()).add(amount, absorbed, overheal);\r\n\r\n    if (spellId === SPELLS.PENANCE.id) {\r\n      const source = this.bySource[SPELLS.PENANCE.id];\r\n      if (!source.bolts) {\r\n        source.bolts = [];\r\n      }\r\n\r\n      if (!source.bolts[this._lastPenanceBoltNumber]) {\r\n        source.bolts[this._lastPenanceBoltNumber] = new HealingValue();\r\n      }\r\n      source.bolts[this._lastPenanceBoltNumber] = source.bolts[this._lastPenanceBoltNumber].add(amount, absorbed, overheal);\r\n    }\r\n  }\r\n\r\n  statistic() {\r\n    return (\r\n      <Panel\r\n        title=\"Atonement sources\"\r\n        explanation={(\r\n          <>\r\n            This shows a breakdown of the damage that caused <SpellLink id={SPELLS.ATONEMENT_BUFF.id} /> healing.\r\n          </>\r\n        )}\r\n        position={90}\r\n        pad={false}\r\n      >\r\n        <AtonementHealingBreakdown analyzer={this} owner={this.owner} />\r\n      </Panel>\r\n    );\r\n  }\r\n}\r\n\r\nexport default AtonementHealingDone;\r\n","import React from 'react';\r\n\r\nimport SPELLS from 'common/SPELLS';\r\nimport fetchWcl from 'common/fetchWclApi';\r\nimport SpellIcon from 'common/SpellIcon';\r\nimport { formatNumber, formatThousands } from 'common/format';\r\n\r\nimport LazyLoadStatisticBox from 'interface/others/LazyLoadStatisticBox';\r\n\r\nimport Analyzer from 'parser/core/Analyzer';\r\nimport { EventType } from 'parser/core/Events';\r\n\r\nconst POWER_WORD_BARRIER_REDUCTION = 0.25;\r\n\r\nclass PowerWordBarrier extends Analyzer {\r\n\r\n  totalDamageTakenDuringPWB = 0;\r\n\r\n  get damageReducedDuringPowerWordBarrier() {\r\n    return this.totalDamageTakenDuringPWB / (1 - POWER_WORD_BARRIER_REDUCTION) * POWER_WORD_BARRIER_REDUCTION;\r\n  }\r\n\r\n  get damageReduced() {\r\n    return this.damageReducedDuringPowerWordBarrier;\r\n  }\r\n\r\n  load() {\r\n    return fetchWcl(`report/tables/damage-taken/${this.owner.report.code}`, {\r\n      start: this.owner.fight.start_time,\r\n      end: this.owner.fight.end_time,\r\n      filter: `IN RANGE FROM type='${EventType.ApplyBuff}' AND ability.id=${SPELLS.POWER_WORD_BARRIER_BUFF.id} TO type='${EventType.RemoveBuff}' AND ability.id=${SPELLS.POWER_WORD_BARRIER_BUFF.id} GROUP BY target ON target END`,\r\n    })\r\n      .then((json: any) => {\r\n        this.totalDamageTakenDuringPWB = json.entries.reduce((damageTaken: number, entry: any) => damageTaken + entry.total, 0);\r\n      });\r\n  }\r\n\r\n  statistic() {\r\n    const fightDuration = this.owner.fightDuration;\r\n\r\n    return (\r\n      <LazyLoadStatisticBox\r\n        loader={this.load.bind(this)}\r\n        icon={<SpellIcon id={SPELLS.POWER_WORD_BARRIER_BUFF.id} />}\r\n        value={`≈${formatNumber(this.damageReducedDuringPowerWordBarrier / fightDuration * 1000)} DRPS`}\r\n        label=\"Barrier DRPS\"\r\n        tooltip={\r\n          `The total Damage Reduced by Power Word: Barrier was ${formatThousands(this.damageReducedDuringPowerWordBarrier)} (${formatNumber(this.damageReducedDuringPowerWordBarrier / fightDuration * 1000)} per second average). This includes values from other priests in your raid due to technical limitations.`\r\n        }\r\n      />\r\n    );\r\n  }\r\n}\r\n\r\nexport default PowerWordBarrier;\r\n","import React from 'react';\r\n\r\nimport SPELLS from 'common/SPELLS';\r\nimport fetchWcl from 'common/fetchWclApi';\r\nimport SpellIcon from 'common/SpellIcon';\r\nimport { formatNumber, formatThousands } from 'common/format';\r\nimport { Options } from 'parser/core/Module';\r\n\r\nimport LazyLoadStatisticBox from 'interface/others/LazyLoadStatisticBox';\r\n\r\nimport Analyzer from 'parser/core/Analyzer';\r\nimport { EventType } from 'parser/core/Events';\r\n\r\nconst LENIENCE_DR = 0.03;\r\n\r\nclass Lenience extends Analyzer {\r\n  totalDamageTakenDuringAtonement = 0;\r\n\r\n  constructor(options: Options) {\r\n    super(options);\r\n    this.active = this.selectedCombatant.hasTalent(SPELLS.LENIENCE_TALENT.id);\r\n  }\r\n\r\n  get damageReducedDuringLenience() {\r\n    return this.totalDamageTakenDuringAtonement / (1 - LENIENCE_DR) * LENIENCE_DR;\r\n  }\r\n\r\n  load() {\r\n    return fetchWcl(`report/tables/damage-taken/${this.owner.report.code}`, {\r\n      start: this.owner.fight.start_time,\r\n      end: this.owner.fight.end_time,\r\n      filter: `(IN RANGE FROM type='${EventType.ApplyBuff}' AND ability.id=${SPELLS.ATONEMENT_BUFF.id} AND source.name='${this.selectedCombatant.name}' TO type='${EventType.RemoveBuff}' AND ability.id=${SPELLS.ATONEMENT_BUFF.id} AND source.name='${this.selectedCombatant.name}' GROUP BY target ON target END)`,\r\n    })\r\n      .then((json: any) => {\r\n        console.log('Received LR damage taken', json);\r\n        this.totalDamageTakenDuringAtonement = json.entries.reduce((damageTaken: number, entry: any) => damageTaken + entry.total, 0);\r\n      });\r\n  }\r\n\r\n  statistic() {\r\n    const fightDuration = this.owner.fightDuration;\r\n\r\n    return (\r\n      <LazyLoadStatisticBox\r\n        loader={this.load.bind(this)}\r\n        icon={<SpellIcon id={SPELLS.LENIENCE_TALENT.id} />}\r\n        value={`>=${formatNumber(this.damageReducedDuringLenience / fightDuration * 1000)} DRPS`}\r\n        label=\"Damage reduced\"\r\n        tooltip={\r\n          `The estimated damage reduced by Lenience's damage reduction was ${formatThousands(this.damageReducedDuringLenience)} (${formatNumber(this.damageReducedDuringLenience / fightDuration * 1000)} per second average). This is the lowest possible value. This value is 100% accurate for this log if you are looking at the actual gain over not having the Lenience bonus at all, but the gain may end up higher when taking interactions with other damage reductions into account.`\r\n        }\r\n      />\r\n    );\r\n  }\r\n}\r\n\r\nexport default Lenience;\r\n","import React from 'react';\r\nimport StatisticBox, { STATISTIC_ORDER } from 'interface/others/StatisticBox';\r\nimport { formatPercentage, formatThousands } from 'common/format';\r\nimport SpellIcon from 'common/SpellIcon';\r\nimport SpellLink from 'common/SpellLink';\r\nimport SPELLS from 'common/SPELLS';\r\nimport Analyzer, { SELECTED_PLAYER } from 'parser/core/Analyzer';\r\nimport Enemies from 'parser/shared/modules/Enemies';\r\nimport Events, { ApplyDebuffEvent, CastEvent, DamageEvent, RefreshDebuffEvent, RemoveDebuffEvent } from 'parser/core/Events';\r\nimport AbilityTracker from 'parser/shared/modules/AbilityTracker';\r\nimport { SuggestionFactory, When } from 'parser/core/ParseResults';\r\nimport { Options } from 'parser/core/Module';\r\n\r\nimport { i18n } from '@lingui/core';\r\nimport { t } from '@lingui/macro';\r\n\r\nimport SuggestionThresholds from '../../SuggestionThresholds';\r\n\r\nclass PurgeTheWicked extends Analyzer {\r\n  static dependencies = {\r\n    enemies: Enemies,\r\n    abilityTracker: AbilityTracker,\r\n  };\r\n  dotSpell: any;\r\n  ptwCasts = 0;\r\n  ptwApplications = 0;\r\n  lastCastTarget: number = 0;\r\n  ptwCleaveTracker: any = {};\r\n  ptwCleaveDamage = 0;\r\n  statisticOrder = STATISTIC_ORDER.CORE(10);\r\n  protected enemies!: Enemies;\r\n  protected abilityTracker!: AbilityTracker;\r\n\r\n  constructor(options: Options) {\r\n    super(options);\r\n    if (this.selectedCombatant.hasTalent(SPELLS.PURGE_THE_WICKED_TALENT.id)) {\r\n      this.dotSpell = SPELLS.PURGE_THE_WICKED_BUFF;\r\n    } else {\r\n      this.dotSpell = SPELLS.SHADOW_WORD_PAIN;\r\n    }\r\n\r\n    this.addEventListener(Events.cast.by(SELECTED_PLAYER).spell([SPELLS.PURGE_THE_WICKED_TALENT]), this.onDotCast);\r\n    this.addEventListener(Events.applydebuff.by(SELECTED_PLAYER).spell(SPELLS.PURGE_THE_WICKED_BUFF), this.onDotApply);\r\n    this.addEventListener(Events.refreshdebuff.by(SELECTED_PLAYER).spell(SPELLS.PURGE_THE_WICKED_BUFF), this.onDotApply);\r\n    this.addEventListener(Events.removedebuff.by(SELECTED_PLAYER).spell(SPELLS.PURGE_THE_WICKED_BUFF), this.onDotRemove);\r\n    this.addEventListener(Events.damage.by(SELECTED_PLAYER).spell(SPELLS.PURGE_THE_WICKED_BUFF), this.onDotDamage);\r\n  }\r\n\r\n  get uptime() {\r\n    return this.enemies.getBuffUptime(this.dotSpell.id) / this.owner.fightDuration;\r\n  }\r\n\r\n  get extraPTWs() {\r\n    return this.ptwApplications - this.ptwCasts;\r\n  }\r\n\r\n  onDotCast(event: CastEvent) {\r\n    this.ptwCasts += 1;\r\n    if (event.targetID) {\r\n      this.lastCastTarget = event.targetID;\r\n    }\r\n  }\r\n\r\n  onDotApply(event: ApplyDebuffEvent | RefreshDebuffEvent) {\r\n    this.ptwApplications += 1;\r\n\r\n    if (event.targetID !== this.lastCastTarget) {\r\n      this.ptwCleaveTracker[event.targetID] = 1;\r\n    }\r\n  }\r\n\r\n  onDotRemove(event: RemoveDebuffEvent) {\r\n    delete (this.ptwCleaveTracker[event.targetID]);\r\n  }\r\n\r\n  onDotDamage(event: DamageEvent) {\r\n    if (this.ptwCleaveTracker[event.targetID]) {\r\n      this.ptwCleaveDamage += event.amount + (event.absorbed || 0);\r\n    }\r\n  }\r\n\r\n  suggestions(when: When) {\r\n    const uptime = this.uptime || 0;\r\n\r\n    when(uptime).isLessThan(SuggestionThresholds.PURGE_THE_WICKED_UPTIME.minor)\r\n      .addSuggestion((suggest: SuggestionFactory, actual: number, recommended: number) => suggest(<span>Your <SpellLink id={this.dotSpell.id} /> uptime can be improved.</span>)\r\n        .icon(this.dotSpell.icon)\r\n        .actual(i18n._(t('priest.discipline.suggestions.purgeTheWicked.uptime')`${formatPercentage(uptime)}% uptime`))\r\n        .recommended(`>${formatPercentage(recommended, 0)}% is recommended`)\r\n        .regular(SuggestionThresholds.PURGE_THE_WICKED_UPTIME.regular).major(SuggestionThresholds.PURGE_THE_WICKED_UPTIME.major));\r\n  }\r\n\r\n  statistic() {\r\n    const uptime = this.uptime || 0;\r\n\r\n    if (this.dotSpell === SPELLS.PURGE_THE_WICKED_BUFF) {\r\n      return (\r\n        <StatisticBox\r\n          icon={<SpellIcon id={this.dotSpell.id} />}\r\n          value={(\r\n            <>\r\n              {formatPercentage(uptime)}% Uptime <br />\r\n              {this.extraPTWs} Extra DOTs<br />\r\n            </>\r\n          )}\r\n          tooltip={`The additional dots contributed ${formatThousands(this.ptwCleaveDamage)} damage.`}\r\n          label={`${this.dotSpell.name}`}\r\n        />\r\n      );\r\n    } else {\r\n      return (\r\n        <StatisticBox\r\n          icon={<SpellIcon id={this.dotSpell.id} />}\r\n          value={`${formatPercentage(uptime)} %`}\r\n          label={`${this.dotSpell.name} Uptime`}\r\n        />\r\n      );\r\n    }\r\n\r\n  }\r\n\r\n}\r\n\r\nexport default PurgeTheWicked;\r\n","import React from 'react';\r\n\r\nimport SPELLS from 'common/SPELLS';\r\n\r\nimport SpellLink from 'common/SpellLink';\r\nimport { formatThousands } from 'common/format';\r\n\r\nimport Analyzer, { SELECTED_PLAYER } from 'parser/core/Analyzer';\r\nimport { Options } from 'parser/core/Module';\r\n\r\nimport { STATISTIC_ORDER } from 'interface/others/StatisticsListBox';\r\nimport DonutChart from 'interface/statistics/components/DonutChart';\r\nimport Statistic from 'interface/statistics/Statistic';\r\nimport Events, { ApplyBuffEvent, CastEvent, HealEvent, RefreshBuffEvent } from 'parser/core/Events';\r\nimport { POWER_WORD_RADIANCE_ATONEMENT_DUR, POWER_WORD_SHIELD_ATONEMENT_DUR, SHADOW_MEND_ATONEMENT_DUR } from 'parser/priest/discipline/constants';\r\n\r\nconst EVANGELISM_BONUS_MS = 6000;\r\n\r\n//Needed to count healing for the rare situations where atonement heal events happens at the exact moment it expires\r\nconst FAIL_SAFE_MS = 300;\r\n\r\nclass AtonementApplicatorBreakdown extends Analyzer {\r\n  _shadowmendsCasts = [];\r\n  _powerWordShieldsCasts = [];\r\n\r\n  _castsApplyBuffsMap = new Map(); // Keys = Cast, Values = Atonement buff associated to the cast\r\n  _lastRadianceCastTimestamp = 0; // Setting a dummy timestamp to 0\r\n\r\n  _atonementHealingFromShadowMends = 0;\r\n  _atonementHealingFromPowerWordRadiances = 0;\r\n  _atonementHealingFromPowerWordShields = 0;\r\n  _prepullApplicatorHealing = 0;\r\n\r\n  constructor(options: Options) {\r\n    super(options);\r\n\r\n    this.addEventListener(Events.cast.by(SELECTED_PLAYER).spell(SPELLS.EVANGELISM_TALENT), this.handleEvangelismCasts);\r\n    this.addEventListener(Events.cast.by(SELECTED_PLAYER).spell(SPELLS.SHADOW_MEND), this.storeShadowMendsCasts);\r\n    this.addEventListener(Events.cast.by(SELECTED_PLAYER).spell(SPELLS.POWER_WORD_SHIELD), this.storePowerWordShieldsCasts);\r\n    this.addEventListener(Events.cast.by(SELECTED_PLAYER).spell(SPELLS.POWER_WORD_RADIANCE), this.storePowerWordRadiancesCastTimestamp);\r\n    this.addEventListener(Events.applybuff.by(SELECTED_PLAYER).spell(SPELLS.ATONEMENT_BUFF), this.assignAtonementBuffToApplicator);\r\n    this.addEventListener(Events.refreshbuff.by(SELECTED_PLAYER).spell(SPELLS.ATONEMENT_BUFF), this.assignAtonementBuffToApplicator);\r\n    this.addEventListener(Events.heal.by(SELECTED_PLAYER).spell(SPELLS.ATONEMENT_HEAL_NON_CRIT), this.handleAtonementsHits);\r\n    this.addEventListener(Events.heal.by(SELECTED_PLAYER).spell(SPELLS.ATONEMENT_HEAL_CRIT), this.handleAtonementsHits);\r\n  }\r\n\r\n  storeShadowMendsCasts(event: CastEvent) {\r\n    this._castsApplyBuffsMap.set({\r\n      'event': event,\r\n      'applicatorId': SPELLS.SHADOW_MEND.id,\r\n    }, null);\r\n  }\r\n\r\n  storePowerWordShieldsCasts(event: CastEvent) {\r\n    this._castsApplyBuffsMap.set({\r\n      'event': event,\r\n      'applicatorId': SPELLS.POWER_WORD_SHIELD.id,\r\n    }, null);\r\n  }\r\n\r\n  storePowerWordRadiancesCastTimestamp(event: CastEvent) {\r\n    this._lastRadianceCastTimestamp = event.timestamp;\r\n  }\r\n\r\n  assignAtonementBuffToApplicator(event: ApplyBuffEvent | RefreshBuffEvent) {\r\n    if (event.__fabricated === true) {\r\n      return;\r\n    }\r\n\r\n    if (event.timestamp === this._lastRadianceCastTimestamp) { // Power Word: Radiance\r\n\r\n      //Set the wasRefreshed property of the old atonement on the same target to true\r\n      //so we can stop attributing atonement healing to the old atonement\r\n      if (event.type === 'refreshbuff') {\r\n        this.setWasRefreshedProperty(event, true);\r\n      }\r\n\r\n      //Putting a custom event object for Radiances since there is only 1 cast for 5 buffs\r\n      this._castsApplyBuffsMap.set(\r\n        {\r\n          'event': {\r\n            'timestamp': this._lastRadianceCastTimestamp,\r\n          },\r\n          'applicatorId': SPELLS.POWER_WORD_RADIANCE.id,\r\n        },\r\n        {\r\n          'applyBuff': event,\r\n          'atonementEvents': [],\r\n          'extendedByEvangelism': false,\r\n          'wasRefreshed': false,\r\n        },\r\n      );\r\n    } else { //Shadow Mend and Power Word: Shield\r\n      if (event.type === 'refreshbuff') {\r\n        this.setWasRefreshedProperty(event, true);\r\n      }\r\n\r\n      //Get the latest cast with the corresponding targetID\r\n      const playerWithAtonement = event.targetID;\r\n      const reversedMapKeys = Array.from(this._castsApplyBuffsMap.keys()).slice().reverse();\r\n      const mostRecentCastApplyBuff = reversedMapKeys.find(cast => cast.event && cast.event.targetID === playerWithAtonement);\r\n      if (mostRecentCastApplyBuff) {\r\n        this._castsApplyBuffsMap.set(mostRecentCastApplyBuff, {\r\n          'applyBuff': event,\r\n          'atonementEvents': [],\r\n          'extendedByEvangelism': false,\r\n          'wasRefreshed': false,\r\n        });\r\n      }\r\n    }\r\n  }\r\n\r\n  getAtonementDuration(cast: any) {\r\n    let duration = 0;\r\n    if (cast.applicatorId === SPELLS.POWER_WORD_RADIANCE.id) {\r\n      duration += POWER_WORD_RADIANCE_ATONEMENT_DUR;\r\n    } else if (cast.applicatorId === SPELLS.POWER_WORD_SHIELD.id) {\r\n      duration += POWER_WORD_SHIELD_ATONEMENT_DUR;\r\n    } else if (cast.applicatorId === SPELLS.SHADOW_MEND.id) {\r\n      duration += SHADOW_MEND_ATONEMENT_DUR;\r\n    }\r\n    return (duration + FAIL_SAFE_MS);\r\n  }\r\n\r\n  assignAtonementHit(cast: any, atonement: any, healEvent: HealEvent) {\r\n    const lowerBound = atonement.applyBuff.timestamp;\r\n    const upperBound = atonement.applyBuff.timestamp\r\n      + (atonement.extendedByEvangelism ? EVANGELISM_BONUS_MS : 0)\r\n      + this.getAtonementDuration(cast);\r\n    if (healEvent.targetID === atonement.applyBuff.targetID && healEvent.timestamp > lowerBound && healEvent.timestamp < upperBound) {\r\n      if (!atonement.wasRefreshed) {\r\n        atonement.atonementEvents.push(healEvent);\r\n        return healEvent.amount;\r\n      }\r\n    }\r\n\r\n    return 0;\r\n  }\r\n\r\n  handleAtonementsHits(event: HealEvent) {\r\n    //Healing from atonements pre-applied before entering combat\r\n    //will assume PW:S as the applicator since it's usually the most common one used pre-pull,\r\n    const atonementBuffs = this._castsApplyBuffsMap.values();\r\n    if (Array.from(atonementBuffs).find(atonement => atonement === null || atonement.applyBuff.targetID === event.targetID) === undefined) {\r\n      this._prepullApplicatorHealing += event.amount;\r\n    }\r\n\r\n    this._castsApplyBuffsMap.forEach((atonement, cast) => {\r\n      //Sometimes an atonement heal event from the already active atonements happens after an applicator cast and before the next atonement buff is applied\r\n      //so this null check is necessary\r\n      if (atonement === null) {\r\n        return;\r\n      }\r\n\r\n      if (cast.applicatorId === SPELLS.POWER_WORD_RADIANCE.id) {\r\n        this._atonementHealingFromPowerWordRadiances += this.assignAtonementHit(cast, atonement, event);\r\n      } else if (cast.applicatorId === SPELLS.POWER_WORD_SHIELD.id) {\r\n        this._atonementHealingFromPowerWordShields += this.assignAtonementHit(cast, atonement, event);\r\n      } else if (cast.applicatorId === SPELLS.SHADOW_MEND.id) {\r\n        this._atonementHealingFromShadowMends += this.assignAtonementHit(cast, atonement, event);\r\n      }\r\n    });\r\n  }\r\n\r\n  handleEvangelismCasts(event: CastEvent) {\r\n    this._castsApplyBuffsMap.forEach((atonement, cast) => {\r\n      if (atonement === null) {\r\n        return;\r\n      }\r\n\r\n      if (cast.applicatorId === SPELLS.POWER_WORD_RADIANCE.id) {\r\n        if (event.timestamp > atonement.applyBuff.timestamp\r\n          && event.timestamp < atonement.applyBuff.timestamp + POWER_WORD_RADIANCE_ATONEMENT_DUR) {\r\n          atonement.extendedByEvangelism = true;\r\n        }\r\n      } else if (cast.applicatorId === SPELLS.POWER_WORD_SHIELD.id) {\r\n        if (event.timestamp > atonement.applyBuff.timestamp\r\n          && event.timestamp < atonement.applyBuff.timestamp + POWER_WORD_SHIELD_ATONEMENT_DUR) {\r\n          atonement.extendedByEvangelism = true;\r\n        }\r\n      } else if (cast.applicatorId === SPELLS.SHADOW_MEND.id) {\r\n        if (event.timestamp > atonement.applyBuff.timestamp\r\n          && event.timestamp < atonement.applyBuff.timestamp + SHADOW_MEND_ATONEMENT_DUR) {\r\n          atonement.extendedByEvangelism = true;\r\n        }\r\n      }\r\n    });\r\n  }\r\n\r\n  setWasRefreshedProperty(applyBuffEvent: ApplyBuffEvent | RefreshBuffEvent, isRefreshed: boolean) {\r\n    const playerWithAtonement = applyBuffEvent.targetID;\r\n    const reversedMapKeys = Array.from(this._castsApplyBuffsMap.keys()).slice().reverse();\r\n\r\n    const mostRecentCastApplyBuff = reversedMapKeys.find(cast => cast.event && cast.event.targetID === playerWithAtonement);\r\n    if (mostRecentCastApplyBuff) {\r\n      const atonementBuff = this._castsApplyBuffsMap.get(mostRecentCastApplyBuff);\r\n      if (atonementBuff !== null) {\r\n        atonementBuff.wasRefreshed = isRefreshed;\r\n      }\r\n    }\r\n  }\r\n\r\n  renderAtonementApplicatorChart() {\r\n    const items = [\r\n      {\r\n        color: '#fff',\r\n        label: 'Power Word: Shield',\r\n        spellId: SPELLS.POWER_WORD_SHIELD.id,\r\n        value: (this._atonementHealingFromPowerWordShields + this._prepullApplicatorHealing),\r\n        valueTooltip: formatThousands(this._atonementHealingFromPowerWordShields + this._prepullApplicatorHealing),\r\n      },\r\n      {\r\n        color: '#fcba03',\r\n        label: 'Power Word: Radiance',\r\n        spellId: SPELLS.POWER_WORD_RADIANCE.id,\r\n        value: (this._atonementHealingFromPowerWordRadiances),\r\n        valueTooltip: formatThousands(this._atonementHealingFromPowerWordRadiances),\r\n      },\r\n      {\r\n        color: '#772bb5',\r\n        label: 'Shadow Mend',\r\n        spellId: SPELLS.SHADOW_MEND.id,\r\n        value: (this._atonementHealingFromShadowMends),\r\n        valueTooltip: formatThousands(this._atonementHealingFromShadowMends),\r\n      },\r\n    ];\r\n\r\n    return (<DonutChart items={items} />);\r\n  }\r\n\r\n  statistic() {\r\n    return (\r\n      <Statistic\r\n        position={STATISTIC_ORDER.CORE(20)}\r\n        size=\"flexible\"\r\n        tooltip=\"The Atonement healing contributed by each Atonement applicator.\"\r\n      >\r\n        <div className=\"pad\">\r\n          <label><SpellLink id={SPELLS.ATONEMENT_BUFF.id}>Atonement</SpellLink> applicators breakdown</label>\r\n          {this.renderAtonementApplicatorChart()}\r\n        </div>\r\n      </Statistic>\r\n    );\r\n  }\r\n}\r\n\r\nexport default AtonementApplicatorBreakdown;\r\n","import React from 'react';\r\n\r\nimport SPELLS from 'common/SPELLS';\r\nimport SpellIcon from 'common/SpellIcon';\r\nimport SpellLink from 'common/SpellLink';\r\nimport { formatNumber, formatPercentage } from 'common/format';\r\nimport { TooltipElement } from 'common/Tooltip';\r\nimport Analyzer, { SELECTED_PLAYER } from 'parser/core/Analyzer';\r\nimport calculateEffectiveHealing from 'parser/core/calculateEffectiveHealing';\r\nimport StatisticBox, { STATISTIC_ORDER } from 'interface/others/StatisticBox';\r\nimport Events, { AbsorbedEvent, DamageEvent, HealEvent } from 'parser/core/Events';\r\nimport { SuggestionFactory, When } from 'parser/core/ParseResults';\r\nimport { Options } from 'parser/core/Module';\r\nimport { i18n } from '@lingui/core';\r\nimport { t } from '@lingui/macro';\r\n\r\nimport { ABILITIES_AFFECTED_BY_HEALING_INCREASES } from '../../constants';\r\n\r\nconst TWIST_OF_FATE_HEALING_INCREASE = 0.2;\r\n\r\nclass TwistOfFate extends Analyzer {\r\n  healing = 0;\r\n  damage = 0;\r\n  statisticOrder = STATISTIC_ORDER.OPTIONAL();\r\n\r\n  constructor(options: Options) {\r\n    super(options);\r\n    this.active = this.selectedCombatant.hasTalent(SPELLS.TWIST_OF_FATE_TALENT_DISCIPLINE.id);\r\n    this.addEventListener(Events.damage.by(SELECTED_PLAYER), this.onDamage);\r\n    this.addEventListener(Events.heal.by(SELECTED_PLAYER), this.onHeal);\r\n    this.addEventListener(Events.absorbed.by(SELECTED_PLAYER), this.onAbsorb);\r\n  }\r\n\r\n  onDamage(event: DamageEvent) {\r\n    if (!this.selectedCombatant.hasBuff(SPELLS.TWIST_OF_FATE_BUFF_DISCIPLINE.id, event.timestamp)) {\r\n      return;\r\n    }\r\n\r\n    const raw = event.amount + (event.absorbed || 0);\r\n    this.damage += raw - raw / 1.2;\r\n  }\r\n\r\n  onHeal(event: HealEvent) {\r\n    this.parseHeal(event);\r\n  }\r\n\r\n  onAbsorb(event: AbsorbedEvent) {\r\n    this.parseHeal(event);\r\n  }\r\n\r\n  parseHeal(event: HealEvent | AbsorbedEvent) {\r\n    const spellId = event.ability.guid;\r\n    if (!ABILITIES_AFFECTED_BY_HEALING_INCREASES.includes(spellId)) {\r\n      return;\r\n    }\r\n    if (!this.selectedCombatant.hasBuff(SPELLS.TWIST_OF_FATE_BUFF_DISCIPLINE.id, event.timestamp)) {\r\n      return;\r\n    }\r\n\r\n    this.healing += calculateEffectiveHealing(event, TWIST_OF_FATE_HEALING_INCREASE);\r\n  }\r\n\r\n  suggestions(when: When) {\r\n    when(this.owner.getPercentageOfTotalHealingDone(this.healing)).isLessThan(0.05)\r\n      .addSuggestion((suggest: SuggestionFactory, actual: number, recommended: number) => suggest(<span>Consider picking a different talent than <SpellLink id={SPELLS.TWIST_OF_FATE_TALENT_DISCIPLINE.id} />. Castigation will give a consistent 3-5% increase and Schism provides a significant DPS increase if more healing is not needed.</span>)\r\n        .icon(SPELLS.TWIST_OF_FATE_TALENT_DISCIPLINE.icon)\r\n        .actual(i18n._(t('priest.discipline.suggestions.twistOfFate.efficiency')`${formatPercentage(actual)}% of total healing`))\r\n        .recommended(`>${formatPercentage(recommended)}% is recommended.`)\r\n        .regular(0.045)\r\n        .major(0.025));\r\n\r\n  }\r\n\r\n  statistic() {\r\n    if (!this.active) {\r\n      return null;\r\n    }\r\n\r\n    const healing = this.healing || 0;\r\n    const damage = this.damage || 0;\r\n    const tofPercent = this.owner.getPercentageOfTotalHealingDone(healing);\r\n    const tofDamage = this.owner.getPercentageOfTotalDamageDone(damage);\r\n\r\n    return (\r\n      <StatisticBox\r\n        icon={<SpellIcon id={SPELLS.TWIST_OF_FATE_TALENT_DISCIPLINE.id} />}\r\n        value={this.owner.formatItemHealingDone(healing)}\r\n        label={(\r\n          <TooltipElement\r\n            content={\r\n              `The effective healing contributed by Twist of Fate was ${formatPercentage(tofPercent)}% of total healing done. Twist of Fate also contributed ${formatNumber(damage / this.owner.fightDuration * 1000)} DPS (${formatPercentage(tofDamage)}% of total damage); the healing gain of this damage was included in the shown numbers.`\r\n            }\r\n          >\r\n            Twist of Fate Healing\r\n          </TooltipElement>\r\n        )}\r\n      />\r\n    );\r\n  }\r\n}\r\n\r\nexport default TwistOfFate;\r\n","import React from 'react';\r\n\r\nimport SPELLS from 'common/SPELLS';\r\nimport SpellIcon from 'common/SpellIcon';\r\nimport { TooltipElement } from 'common/Tooltip';\r\nimport StatisticBox, { STATISTIC_ORDER } from 'interface/others/StatisticBox';\r\nimport { formatNumber, formatPercentage } from 'common/format';\r\nimport Analyzer, { SELECTED_PLAYER } from 'parser/core/Analyzer';\r\nimport Events, { DamageEvent, HealEvent } from 'parser/core/Events';\r\nimport { Options } from 'parser/core/Module';\r\n\r\nimport { IsPenanceDamageEvent, IsPenanceHealEvent } from 'parser/priest/discipline/modules/spells/Helper';\r\n\r\nimport isAtonement from '../core/isAtonement';\r\nimport Penance from './Penance';\r\n\r\nclass Castigation extends Analyzer {\r\n  static dependencies = {\r\n    penance: Penance, // we need this to add `penanceBoltNumber` to the damage and heal events\r\n  };\r\n\r\n  healing = 0;\r\n  damage = 0;\r\n\r\n  _isCastigationBolt = false;\r\n  statisticOrder = STATISTIC_ORDER.OPTIONAL();\r\n\r\n  constructor(options: Options) {\r\n    super(options);\r\n    this.active = this.selectedCombatant.hasTalent(SPELLS.CASTIGATION_TALENT.id);\r\n    this.addEventListener(Events.damage.by(SELECTED_PLAYER), this.onDamage);\r\n    this.addEventListener(Events.heal.by(SELECTED_PLAYER), this.onHeal);\r\n  }\r\n\r\n  onDamage(event: DamageEvent) {\r\n    if (!IsPenanceDamageEvent(event)) {\r\n      return;\r\n    }\r\n\r\n    if (event.ability.guid !== SPELLS.PENANCE.id || event.penanceBoltNumber !== 3) {\r\n      this._isCastigationBolt = false;\r\n      return;\r\n    }\r\n\r\n    this._isCastigationBolt = true;\r\n    this.damage += event.amount;\r\n  }\r\n\r\n  onHeal(event: HealEvent) {\r\n    if (!IsPenanceHealEvent(event)) {\r\n      return;\r\n    }\r\n\r\n    const spellId = event.ability.guid;\r\n\r\n    // Friendly Penance Healing\r\n    if (spellId === SPELLS.PENANCE_HEAL.id) {\r\n      if (event.penanceBoltNumber === 3) {\r\n        this.healing += event.amount;\r\n      }\r\n    }\r\n\r\n    // Offensive Penance Healing\r\n    if (isAtonement(event)) {\r\n      if (this._isCastigationBolt) {\r\n        this.healing += event.amount;\r\n      }\r\n    }\r\n  }\r\n\r\n  statistic() {\r\n    const healing = this.healing || 0;\r\n    const damage = this.damage || 0;\r\n\r\n    return (\r\n      <StatisticBox\r\n        icon={<SpellIcon id={SPELLS.CASTIGATION_TALENT.id} />}\r\n        value={`${formatNumber(healing / this.owner.fightDuration * 1000)} HPS`}\r\n        label={(\r\n          <TooltipElement content={`The effective healing contributed by Castigation (${formatPercentage(this.owner.getPercentageOfTotalHealingDone(healing))}% of total healing done). Castigation also contributed ${formatNumber(damage / this.owner.fightDuration * 1000)} DPS (${formatPercentage(this.owner.getPercentageOfTotalDamageDone(damage))}% of total damage done), the healing gain of this damage was included in the shown numbers.`}>\r\n            Castigation healing\r\n          </TooltipElement>\r\n        )}\r\n      />\r\n    );\r\n  }\r\n}\r\n\r\nexport default Castigation;\r\n","import React from 'react';\r\n\r\nimport SPELLS from 'common/SPELLS';\r\nimport SpellIcon from 'common/SpellIcon';\r\nimport { TooltipElement } from 'common/Tooltip';\r\nimport StatisticBox, { STATISTIC_ORDER } from 'interface/others/StatisticBox';\r\nimport Events, { CastEvent, HealEvent } from 'parser/core/Events';\r\nimport { formatNumber, formatPercentage } from 'common/format';\r\nimport Analyzer, { SELECTED_PLAYER } from 'parser/core/Analyzer';\r\nimport { Options } from 'parser/core/Module';\r\n\r\nimport isAtonement from '../core/isAtonement';\r\nimport Atonement from './Atonement';\r\n\r\nconst EVANGELISM_DURATION = 6;\r\n\r\nclass Evangelism extends Analyzer {\r\n  static dependencies = {\r\n    atonementModule: Atonement,\r\n  };\r\n  _previousEvangelismCast: CastEvent | null = null;\r\n  statisticOrder = STATISTIC_ORDER.CORE(2);\r\n  protected atonementModule!: Atonement;\r\n\r\n  constructor(options: Options) {\r\n    super(options);\r\n    this.active = this.selectedCombatant.hasTalent(SPELLS.EVANGELISM_TALENT.id);\r\n    this.addEventListener(Events.cast.by(SELECTED_PLAYER).spell(SPELLS.EVANGELISM_TALENT), this.onCast);\r\n    this.addEventListener(Events.heal.by(SELECTED_PLAYER), this.onHeal);\r\n  }\r\n\r\n  _evangelismStatistics: {\r\n    [timestamp: number]: {\r\n      count: number,\r\n      atonementSeconds: number,\r\n      healing: number,\r\n    }\r\n  } = {};\r\n\r\n  get evangelismStatistics() {\r\n    return Object.keys(this._evangelismStatistics).map(Number).map((key: number) => this._evangelismStatistics[key]);\r\n  }\r\n\r\n  onCast(event: CastEvent) {\r\n    this._previousEvangelismCast = event;\r\n    const atonedPlayers = this.atonementModule.numAtonementsActive;\r\n\r\n    this._evangelismStatistics[event.timestamp] = {\r\n      count: atonedPlayers,\r\n      atonementSeconds: atonedPlayers * EVANGELISM_DURATION,\r\n      healing: 0,\r\n    };\r\n  }\r\n\r\n  onHeal(event: HealEvent) {\r\n    if (isAtonement(event)) {\r\n      const target = this.atonementModule.currentAtonementTargets.find(id => id.target === event.targetID);\r\n      // Pets, guardians, etc.\r\n      if (!target) {\r\n        return;\r\n      }\r\n\r\n      // Add all healing that shouldn't exist to expiration\r\n      if (event.timestamp > target.atonementExpirationTimestamp && this._previousEvangelismCast) {\r\n        this._evangelismStatistics[this._previousEvangelismCast.timestamp].healing += (event.amount + (event.absorbed || 0));\r\n      }\r\n    }\r\n  }\r\n\r\n  statistic() {\r\n    const evangelismStatistics = this.evangelismStatistics;\r\n\r\n    return (\r\n      <StatisticBox\r\n        icon={<SpellIcon id={SPELLS.EVANGELISM_TALENT.id} />}\r\n        value={`${formatNumber(evangelismStatistics.reduce((total, c) => total + c.healing, 0) / this.owner.fightDuration * 1000)} HPS`}\r\n        label={(\r\n          <TooltipElement content={`Evangelism accounted for approximately ${formatPercentage(this.owner.getPercentageOfTotalHealingDone(evangelismStatistics.reduce((p, c) => p + c.healing, 0)))}% of your healing.`}>\r\n            Evangelism contribution\r\n          </TooltipElement>\r\n        )}\r\n      >\r\n        <table className=\"table table-condensed\">\r\n          <thead>\r\n            <tr>\r\n              <th>Cast</th>\r\n              <th>Healing</th>\r\n              <th>Duration</th>\r\n              <th>Count</th>\r\n            </tr>\r\n          </thead>\r\n          <tbody>\r\n            {\r\n              this.evangelismStatistics\r\n                .map((evangelism, index) => (\r\n                  <tr key={index}>\r\n                    <th scope=\"row\">{index + 1}</th>\r\n                    <td>{formatNumber(evangelism.healing)}</td>\r\n                    <td>{evangelism.atonementSeconds}s</td>\r\n                    <td>{evangelism.count}</td>\r\n                  </tr>\r\n                ))\r\n            }\r\n          </tbody>\r\n        </table>\r\n      </StatisticBox>\r\n    );\r\n  }\r\n}\r\n\r\nexport default Evangelism;\r\n","import React from 'react';\r\nimport StatisticBox from 'interface/others/StatisticBox';\r\n\r\nimport SPELLS from 'common/SPELLS';\r\nimport SpellIcon from 'common/SpellIcon';\r\nimport SpellLink from 'common/SpellLink';\r\nimport { formatPercentage } from 'common/format';\r\n\r\nimport Analyzer, { SELECTED_PLAYER } from 'parser/core/Analyzer';\r\nimport SpellUsable from 'parser/shared/modules/SpellUsable';\r\nimport Events from 'parser/core/Events';\r\n\r\nimport { i18n } from '@lingui/core';\r\nimport { t } from '@lingui/macro';\r\n\r\nclass DesperatePrayer extends Analyzer {\r\n\r\n  get lastDesperatePrayerUsage() {\r\n    return this.desperatePrayerUsages[this.desperatePrayerUsages.length - 1];\r\n  }\r\n\r\n  static dependencies = {\r\n    spellUsable: SpellUsable,\r\n  };\r\n  desperatePrayerUsages = [];\r\n  deathsWithDPReady = 0;\r\n\r\n  constructor(options) {\r\n    super(options);\r\n    this.addEventListener(Events.applybuff.by(SELECTED_PLAYER).spell(SPELLS.DESPERATE_PRAYER), this.onApplyBuff);\r\n    this.addEventListener(Events.heal.to(SELECTED_PLAYER).spell(SPELLS.DESPERATE_PRAYER), this.onHeal);\r\n    this.addEventListener(Events.damage.to(SELECTED_PLAYER), this.onDamageTaken);\r\n    this.addEventListener(Events.death.to(SELECTED_PLAYER), this.onDeath);\r\n  }\r\n\r\n  onApplyBuff(event) {\r\n    this.desperatePrayerUsages.push({\r\n      damageTaken: 0,\r\n      originalHealth: 0,\r\n      originalMaxHealth: 0,\r\n    });\r\n  }\r\n\r\n  onHeal(event) {\r\n    this.lastDesperatePrayerUsage.originalHealth = event.hitPoints - event.amount;\r\n    this.lastDesperatePrayerUsage.originalMaxHealth = event.maxHitPoints;\r\n  }\r\n\r\n  onDamageTaken(event) {\r\n    if (!this.selectedCombatant.hasBuff(SPELLS.DESPERATE_PRAYER.id)) {\r\n      return;\r\n    }\r\n\r\n    this.lastDesperatePrayerUsage.damageTaken += event.amount + event.absorbed;\r\n  }\r\n\r\n  onDeath(event) {\r\n    if (!this.spellUsable.isOnCooldown(SPELLS.DESPERATE_PRAYER.id)) {\r\n      this.deathsWithDPReady += 1;\r\n    }\r\n  }\r\n\r\n  statistic() {\r\n    return (\r\n      <StatisticBox\r\n        value={`${this.desperatePrayerUsages.length}`}\r\n        label=\"Desperate Prayer Usage(s)\"\r\n        icon={<SpellIcon id={SPELLS.DESPERATE_PRAYER.id} />}\r\n      >\r\n        <table className=\"table table-condensed\">\r\n          <thead>\r\n            <tr>\r\n              <th>Cast</th>\r\n              <th>Damage Taken</th>\r\n              <th>Health When Used</th>\r\n            </tr>\r\n          </thead>\r\n          <tbody>\r\n            {\r\n              this.desperatePrayerUsages\r\n                .map((dp, index) => (\r\n                  <tr key={index}>\r\n                    <th scope=\"row\">{index + 1}</th>\r\n                    <td>{formatPercentage(dp.damageTaken / dp.originalMaxHealth)} %</td>\r\n                    <td>{formatPercentage(dp.originalHealth / dp.originalMaxHealth)} %</td>\r\n                  </tr>\r\n                ))\r\n            }\r\n          </tbody>\r\n        </table>\r\n      </StatisticBox>\r\n    );\r\n  }\r\n\r\n  suggestions(when) {\r\n    const boss = this.owner.boss;\r\n    if (!boss || !boss.fight.disableDeathSuggestion) {\r\n      when(this.deathsWithDPReady).isGreaterThan(0)\r\n        .addSuggestion((suggest, actual, recommended) => suggest(<>You died with <SpellLink id={SPELLS.DESPERATE_PRAYER.id} /> available.</>)\r\n          .icon(SPELLS.DESPERATE_PRAYER.icon)\r\n          .actual(i18n._(t('priest.shared.suggestions.DesperatePrayer.efficiency')`You died ${this.deathsWithDPReady} time(s) with Desperate Prayer available.`))\r\n          .recommended(`0 is recommended`));\r\n    }\r\n  }\r\n}\r\n\r\nexport default DesperatePrayer;\r\n","import StatTracker from 'parser/shared/modules/StatTracker';\r\nimport SinsOfTheMany from 'parser/priest/discipline/modules/spells/SinsOfTheMany';\r\n\r\nimport { ATONEMENT_COEFFICIENT, PENANCE_COEFFICIENCT, SMITE_COEFFICIENT } from './constants';\r\n\r\n// 50% dmg increase passive\r\nconst SMITE_DAMAGE_BUFF = 0.5;\r\n\r\n/*\r\n * Wraps a spell calculation to accept the stats module\r\n * Essentially lets you compose modules with spell estimations\r\n */\r\nconst statWrapper = (spellCalculation: any) => (stats: StatTracker) => (...args: any[]) => spellCalculation(stats, ...args);\r\n\r\n// Returns the overhealing of a given spell\r\nexport const calculateOverhealing = (estimateHealing: number, healing: number, overhealing: number = 0) => {\r\n  if (estimateHealing - healing < 0) {\r\n    return 0;\r\n  }\r\n\r\n  return estimateHealing - healing;\r\n};\r\n\r\n// Estimation of how much output an offensive penance bolt will do\r\nexport const OffensivePenanceBoltEstimation = statWrapper(\r\n  (stats: StatTracker) => {\r\n    const currentIntellect = stats.currentIntellectRating;\r\n    const currentVers = 1 + stats.currentVersatilityPercentage;\r\n    const currentMastery = 1 + stats.currentMasteryPercentage;\r\n    const penanceCoefficient = PENANCE_COEFFICIENCT;\r\n\r\n    const penanceBoltDamage = Math.round(\r\n      currentIntellect * penanceCoefficient * currentVers,\r\n    );\r\n\r\n    const penanceBoltHealing = Math.round(\r\n      penanceBoltDamage * ATONEMENT_COEFFICIENT * currentMastery,\r\n    );\r\n\r\n    return {\r\n      boltDamage: penanceBoltDamage,\r\n      boltHealing: penanceBoltHealing,\r\n    };\r\n  },\r\n);\r\n\r\n// Estimation of how much output a Smite will do\r\nexport const SmiteEstimation = (stats: StatTracker, sins: SinsOfTheMany) => () => {\r\n    const currentIntellect = stats.currentIntellectRating;\r\n    const currentVers = 1 + stats.currentVersatilityPercentage;\r\n    const currentMastery = 1 + stats.currentMasteryPercentage;\r\n    const smiteCoefficient = SMITE_COEFFICIENT;\r\n\r\n    let smiteDamage = currentIntellect * smiteCoefficient;\r\n\r\n    smiteDamage = Math.round(\r\n      smiteDamage * currentVers * (1 + sins.currentBonus) * (1 + SMITE_DAMAGE_BUFF),\r\n    );\r\n\r\n    const smiteHealing = Math.round(\r\n      smiteDamage * ATONEMENT_COEFFICIENT * currentMastery,\r\n    );\r\n\r\n    return {\r\n      smiteDamage,\r\n      smiteHealing,\r\n    };\r\n  }\r\n","import React from 'react';\r\n\r\nimport SPELLS from 'common/SPELLS';\r\nimport SpellIcon from 'common/SpellIcon';\r\nimport StatTracker from 'parser/shared/modules/StatTracker';\r\nimport { TooltipElement } from 'common/Tooltip';\r\nimport StatisticBox, { STATISTIC_ORDER } from 'interface/others/StatisticBox';\r\nimport { formatNumber, formatPercentage } from 'common/format';\r\nimport Analyzer, { SELECTED_PLAYER } from 'parser/core/Analyzer';\r\nimport Events, { HealEvent } from 'parser/core/Events';\r\nimport { Options } from 'parser/core/Module';\r\n\r\nimport Penance from './Penance';\r\nimport { calculateOverhealing, OffensivePenanceBoltEstimation } from '../../SpellCalculations';\r\n\r\nclass Contrition extends Analyzer {\r\n  static dependencies = {\r\n    statTracker: StatTracker,\r\n    penance: Penance, // we need this to add `penanceBoltNumber` to the damage and heal events\r\n  };\r\n  healing = 0;\r\n  damagePenalty = 0;\r\n  penanceBoltEstimation: any;\r\n  statisticOrder = STATISTIC_ORDER.OPTIONAL();\r\n  protected statTracker!: StatTracker;\r\n  protected penance!: Penance;\r\n\r\n  constructor(options: Options) {\r\n    super(options);\r\n    this.active = this.selectedCombatant.hasTalent(\r\n      SPELLS.CONTRITION_TALENT.id,\r\n    );\r\n    this.penanceBoltEstimation = OffensivePenanceBoltEstimation(\r\n      this.statTracker,\r\n    );\r\n    this.addEventListener(Events.heal.by(SELECTED_PLAYER).spell([SPELLS.CONTRITION_HEAL, SPELLS.PENANCE_HEAL]), this.onHeal);\r\n  }\r\n\r\n  /**\r\n   * Theory behind this is as follows\r\n   * By casting a contrition penance, you lose an offensive penance worth of healing\r\n   * To hone in on the true value of contrition, we estimate the healing of an offensive\r\n   * penance hit, and subtract that from the contrition amount.\r\n   *\r\n   * We keep the penance heal as that is a true gain from choosing a contrition\r\n   * penance over a regular offensive one.\r\n   */\r\n  onHeal(event: HealEvent) {\r\n    // Add the healing to our count\r\n    this.healing += event.amount;\r\n\r\n    // Get an estimated amount of damage and healing for a bolt\r\n    const { boltDamage, boltHealing } = this.penanceBoltEstimation();\r\n\r\n    // Calculate the difference between contrition and an offensive penance\r\n    if (event.ability.guid === SPELLS.CONTRITION_HEAL.id) {\r\n      const estimatedBoltHealing = boltHealing * event.hitType;\r\n      const estimatedOverhealing = calculateOverhealing(\r\n        estimatedBoltHealing,\r\n        event.amount,\r\n        event.overheal,\r\n      );\r\n\r\n      this.healing -= estimatedBoltHealing - estimatedOverhealing;\r\n    }\r\n\r\n    // Calculate (if applicable), the damage penalty per bolt of friendly penance\r\n    if (event.ability.guid === SPELLS.PENANCE_HEAL.id) {\r\n      this.damagePenalty += boltDamage;\r\n    }\r\n  }\r\n\r\n  statistic() {\r\n    const healing = this.healing || 0;\r\n\r\n    return (\r\n      <StatisticBox\r\n        icon={<SpellIcon id={SPELLS.CONTRITION_TALENT.id} />}\r\n        value={`${formatNumber(healing / this.owner.fightDuration * 1000)} HPS`}\r\n        label={(\r\n          <TooltipElement\r\n            content={\r\n              `The effective healing contributed by Contrition (${formatPercentage(this.owner.getPercentageOfTotalHealingDone(healing))}% of total healing done).\r\n              You lost roughly ${formatNumber(this.damagePenalty / this.owner.fightDuration * 1000)} DPS, or ${formatPercentage(this.owner.getPercentageOfTotalDamageDone(this.damagePenalty))}% more damage.`\r\n            }\r\n          >\r\n            Contrition healing\r\n          </TooltipElement>\r\n        )}\r\n      />\r\n    );\r\n  }\r\n}\r\n\r\nexport default Contrition;\r\n","import React from 'react';\r\n\r\nimport SPELLS from 'common/SPELLS';\r\nimport SpellIcon from 'common/SpellIcon';\r\nimport Combatants from 'parser/shared/modules/Combatants';\r\nimport StatTracker from 'parser/shared/modules/StatTracker';\r\nimport Analyzer, { Options, SELECTED_PLAYER } from 'parser/core/Analyzer';\r\nimport StatisticBox, { STATISTIC_ORDER } from 'interface/others/StatisticBox';\r\nimport { formatNumber, formatPercentage } from 'common/format';\r\nimport calculateEffectiveHealing from 'parser/core/calculateEffectiveHealing';\r\nimport PRIEST_SPELLS from 'common/SPELLS/priest';\r\nimport PRIEST_TALENTS from 'common/SPELLS/talents/priest';\r\nimport Events, { AbsorbedEvent, ApplyBuffEvent, HealEvent } from 'parser/core/Events';\r\n\r\nimport isAtonement from '../core/isAtonement';\r\n\r\n// Use the priest spell list to whitelist abilities\r\nconst PRIEST_WHITELIST = Object.entries({\r\n  ...PRIEST_SPELLS,\r\n  ...PRIEST_TALENTS,\r\n}).map(ability => ability[1].id);\r\n\r\nclass Grace extends Analyzer {\r\n  static dependencies = {\r\n    combatants: Combatants,\r\n    statTracker: StatTracker,\r\n  };\r\n  applyAbsorbEvents: Array<{\r\n    applyBuffEvent: ApplyBuffEvent,\r\n    masteryBuffed: boolean,\r\n    eventsAssociated: ApplyBuffEvent[],\r\n  }> = [];\r\n  graceHealing = 0;\r\n  graceHealingToAtonement = 0;\r\n  healingUnaffectedByMastery = 0;\r\n  healingUnbuffedByMastery = 0;\r\n  healingBuffedByMastery = 0;\r\n  atonement = 0;\r\n  statisticOrder = STATISTIC_ORDER.CORE(3);\r\n  private combatants!: Combatants;\r\n  private statTracker!: StatTracker;\r\n\r\n  constructor(options: Options) {\r\n    super(options);\r\n    this.addEventListener(Events.absorbed.by(SELECTED_PLAYER), this.onAbsorb);\r\n    this.addEventListener(Events.applybuff.by(SELECTED_PLAYER), this.onApplyBuff);\r\n    this.addEventListener(Events.heal.by(SELECTED_PLAYER), this.onHeal);\r\n  }\r\n\r\n  getGraceHealing(event: HealEvent | AbsorbedEvent) {\r\n    const currentMastery = this.statTracker.currentMasteryPercentage;\r\n    const masteryContribution = calculateEffectiveHealing(\r\n      event,\r\n      currentMastery,\r\n    );\r\n    return masteryContribution;\r\n  }\r\n\r\n  onAbsorb(event: AbsorbedEvent) {\r\n    const spellId = event.ability.guid;\r\n\r\n    if (!PRIEST_WHITELIST.includes(spellId)) {\r\n      this.healingUnaffectedByMastery += event.amount;\r\n      return;\r\n    }\r\n\r\n    const target = this.combatants.getEntity(event);\r\n    if (!target) {\r\n      return;\r\n    }\r\n\r\n    if (this.absorbApplicationWasMasteryBuffed(event)) {\r\n      this.graceHealing += this.getGraceHealing(event);\r\n      this.healingBuffedByMastery += event.amount;\r\n    } else {\r\n      this.healingUnbuffedByMastery += event.amount;\r\n    }\r\n  }\r\n\r\n  absorbApplicationWasMasteryBuffed(event: AbsorbedEvent) {\r\n    const findRight = (arr: any, fn: any) => [...arr].reverse().find(fn);\r\n    const applyEvent = findRight(\r\n      this.applyAbsorbEvents,\r\n      (x: any) => x.applyBuffEvent.targetID === event.targetID && x.applyBuffEvent.ability.guid === event.ability.guid,\r\n    );\r\n    return applyEvent ? applyEvent.masteryBuffed : false;\r\n  }\r\n\r\n  onApplyBuff(event: ApplyBuffEvent) {\r\n    const spellId = event.ability.guid;\r\n\r\n    if (!(PRIEST_WHITELIST.includes(spellId) && event.absorb)) {\r\n      return;\r\n    }\r\n\r\n    const target = this.combatants.getEntity(event);\r\n    if (!target) {\r\n      return;\r\n    }\r\n\r\n    this.applyAbsorbEvents.push({\r\n      applyBuffEvent: event,\r\n      masteryBuffed: target.hasBuff(SPELLS.ATONEMENT_BUFF.id),\r\n      eventsAssociated: [],\r\n    });\r\n\r\n  }\r\n\r\n  onHeal(event: HealEvent) {\r\n    const spellId = event.ability.guid;\r\n\r\n    if (!PRIEST_WHITELIST.includes(spellId)) {\r\n      this.healingUnaffectedByMastery += event.amount;\r\n      return;\r\n    }\r\n\r\n    const target = this.combatants.getEntity(event);\r\n    if (!target) {\r\n      return;\r\n    }\r\n\r\n    if (!target.hasBuff(SPELLS.ATONEMENT_BUFF.id)) {\r\n      this.healingUnbuffedByMastery += event.amount;\r\n      return;\r\n    }\r\n\r\n    if (isAtonement(event)) {\r\n      this.atonement += event.amount;\r\n      this.graceHealingToAtonement += this.getGraceHealing(event);\r\n    }\r\n    this.healingBuffedByMastery += event.amount;\r\n    this.graceHealing += this.getGraceHealing(event);\r\n  }\r\n\r\n  statistic() {\r\n    const graceHealingPerc = this.owner.getPercentageOfTotalHealingDone(this.graceHealing);\r\n    const healingUnaffectedByMasteryPerc = this.owner.getPercentageOfTotalHealingDone(this.healingUnaffectedByMastery);\r\n    const healingUnbuffedByMasteryPerc = this.owner.getPercentageOfTotalHealingDone(this.healingUnbuffedByMastery);\r\n    const healingBuffedByMasteryPerc = this.owner.getPercentageOfTotalHealingDone(this.healingBuffedByMastery - this.graceHealing);\r\n    const atonementPerc = this.owner.getPercentageOfTotalHealingDone(this.atonement - this.graceHealingToAtonement);\r\n    const nonAtonementPerc = this.owner.getPercentageOfTotalHealingDone((this.healingBuffedByMastery - this.graceHealing) - (this.atonement - this.graceHealingToAtonement));\r\n\r\n    return (\r\n      <StatisticBox\r\n        icon={<SpellIcon id={SPELLS.GRACE.id} />}\r\n        value={`${formatNumber(\r\n          this.graceHealing / this.owner.fightDuration * 1000,\r\n        )} HPS`}\r\n        label=\"Mastery Healing\"\r\n        tooltip={(\r\n          <>\r\n            Your mastery provided <strong>{formatPercentage(graceHealingPerc)}%</strong> healing\r\n            <ul>\r\n              <li><strong>{formatPercentage(healingBuffedByMasteryPerc)}%</strong> of your healing was buffed by mastery\r\n                <ul>\r\n                  <li>Atonement: <strong>{formatPercentage(atonementPerc)}%</strong></li>\r\n                  <li>Non-Atonement: <strong>{formatPercentage(nonAtonementPerc)}%</strong></li>\r\n                </ul>\r\n              </li>\r\n              <li><strong>{formatPercentage(healingUnbuffedByMasteryPerc)}%</strong> of your healing was spells unbuffed by mastery</li>\r\n              <li><strong>{formatPercentage(healingUnaffectedByMasteryPerc)}%</strong> of your healing was spells unaffected by mastery</li>\r\n            </ul>\r\n            <br />\r\n            <strong>Unbuffed</strong> healing is healing done to targets without atonement with spells that can benefit from mastery. <br />\r\n            <strong>Unaffected</strong> healing is healing done with spells that can't benefit from mastery (Trinkets, procs, etc...)\r\n          </>\r\n        )}\r\n      />\r\n    );\r\n  }\r\n}\r\n\r\nexport default Grace;\r\n","import React from 'react';\r\nimport PropTypes from 'prop-types';\r\n\r\nimport Statistic from 'interface/statistics/Statistic';\r\n\r\nimport STATISTIC_CATEGORY from './STATISTIC_CATEGORY';\r\n\r\nexport { default as STATISTIC_ORDER } from './STATISTIC_ORDER';\r\n\r\n/**\r\n * @deprecated Use `interface/statistics/*` instead (add a component to display dual spell values and use that instead).\r\n */\r\nconst DualStatisticBox = ({\r\n  icon,\r\n  values,\r\n  footer,\r\n  alignIcon,\r\n  ...others\r\n}) => (\r\n  <Statistic {...others}>\r\n    <div className=\"pad\">\r\n      <small>{footer}</small>\r\n\r\n      <div className=\"flex\" style={{ marginTop: 15 }}>\r\n        <div\r\n          className=\"flex-sub\"\r\n          style={{ display: 'flex', alignItems: alignIcon, minWidth: 30 }}\r\n        >\r\n          {icon}\r\n        </div>\r\n        <div className=\"flex-main flex horizontal\">\r\n          {values.map((val, i) => (\r\n            <div key={`${i}${val}`} className=\"panel-cell value\">\r\n              {val}\r\n            </div>\r\n          ))}\r\n        </div>\r\n        </div>\r\n    </div>\r\n  </Statistic>\r\n);\r\nDualStatisticBox.propTypes = {\r\n  icon: PropTypes.node.isRequired,\r\n  values: PropTypes.node.isRequired,\r\n  alignIcon: PropTypes.string,\r\n  footer: PropTypes.node,\r\n};\r\nDualStatisticBox.defaultProps = {\r\n  alignIcon: 'center',\r\n  category: STATISTIC_CATEGORY.GENERAL,\r\n};\r\n\r\nexport default DualStatisticBox;\r\n","import React from 'react';\r\n\r\nimport SPELLS from 'common/SPELLS';\r\nimport SpellIcon from 'common/SpellIcon';\r\nimport SpellLink from 'common/SpellLink';\r\nimport { formatNumber, formatPercentage } from 'common/format';\r\nimport DualStatisticBox, { STATISTIC_ORDER } from 'interface/others/DualStatisticBox';\r\nimport Combatants from 'parser/shared/modules/Combatants';\r\nimport Analyzer, { SELECTED_PLAYER, SELECTED_PLAYER_PET } from 'parser/core/Analyzer';\r\nimport Events, { DamageEvent, HealEvent } from 'parser/core/Events';\r\nimport calculateEffectiveDamage from 'parser/core/calculateEffectiveDamage';\r\nimport calculateEffectiveHealing from 'parser/core/calculateEffectiveHealing';\r\nimport { Options } from 'parser/core/Module';\r\n\r\nimport isAtonement from '../core/isAtonement';\r\nimport Atonement from './Atonement';\r\n\r\nconst SINS_OF_THE_MANY_FLOOR_BONUS = 0.03;\r\n\r\n/**\r\n * Sins isn't linear,\r\n * it allows you to have one Atonement active whilst keeping the full bonus\r\n * from the passive and from 6 onwards it only decreases 0.005.\r\n * Hence this map with the values for each Atonement count.\r\n */\r\nconst BONUS_DAMAGE_ARRAY = [\r\n  0.12,\r\n  0.12,\r\n  0.10,\r\n  0.08,\r\n  0.07,\r\n  0.06,\r\n  0.055,\r\n  0.05,\r\n  0.045,\r\n  0.04,\r\n];\r\n\r\nclass SinsOfTheMany extends Analyzer {\r\n  static dependencies = {\r\n    combatants: Combatants,\r\n    atonement: Atonement,\r\n  };\r\n  bonusDamage = 0;\r\n  bonusHealing = 0;\r\n  statisticOrder = STATISTIC_ORDER.OPTIONAL();\r\n  protected atonement!: Atonement;\r\n  protected combatants!: Combatants;\r\n\r\n  constructor(options: Options) {\r\n    super(options);\r\n    this.active = this.selectedCombatant.hasTalent(SPELLS.SINS_OF_THE_MANY_TALENT.id);\r\n    this.addEventListener(Events.damage.by(SELECTED_PLAYER), this.onDamage);\r\n    this.addEventListener(Events.damage.by(SELECTED_PLAYER_PET), this.onDamage);\r\n    this.addEventListener(Events.heal.by(SELECTED_PLAYER), this.onHeal);\r\n  }\r\n\r\n  get currentBonus() {\r\n    const activeBuffs = this.atonement.numAtonementsActive;\r\n\r\n    // Return an override, if necessary\r\n    if (BONUS_DAMAGE_ARRAY[activeBuffs]) {\r\n      return BONUS_DAMAGE_ARRAY[activeBuffs];\r\n    }\r\n\r\n    // Return the floor if we have more atonements than in the map\r\n    return SINS_OF_THE_MANY_FLOOR_BONUS;\r\n  }\r\n\r\n  /**\r\n   * Sins of the Many buffs all of your damage, there is no whitelist\r\n   */\r\n  onDamage(event: DamageEvent) {\r\n    this.bonusDamage += calculateEffectiveDamage(event, this.currentBonus);\r\n  }\r\n\r\n  /**\r\n   * This is whitelisted by virtue of Atonement naturally not occuring\r\n   * from abilities not in the whitelist.\r\n   */\r\n  onHeal(event: HealEvent) {\r\n    if (!isAtonement(event)) {\r\n      return;\r\n    }\r\n\r\n    this.bonusHealing += calculateEffectiveHealing(event, this.currentBonus);\r\n  }\r\n\r\n  statistic() {\r\n    return (\r\n      <DualStatisticBox\r\n        icon={<SpellIcon id={SPELLS.SINS_OF_THE_MANY_TALENT.id} />}\r\n        values={[\r\n          `${formatNumber((this.bonusHealing / this.owner.fightDuration) * 1000)} HPS`,\r\n          `${formatNumber((this.bonusDamage / this.owner.fightDuration) * 1000)} DPS`,\r\n        ]}\r\n        footer={(\r\n          <>\r\n            <SpellLink id={SPELLS.SINS_OF_THE_MANY_TALENT.id} /> throughput\r\n          </>\r\n        )}\r\n        tooltip={(\r\n          <>\r\n            The effective healing contributed by Sins of the Many was {formatPercentage(this.owner.getPercentageOfTotalHealingDone(this.bonusHealing))}% of total healing done.<br />\r\n            The direct damage contributed by Sins of the Many was {formatPercentage(this.owner.getPercentageOfTotalDamageDone(this.bonusDamage))}% of total damage done.\r\n          </>\r\n        )}\r\n        alignIcon=\"center\"\r\n      />\r\n    );\r\n  }\r\n}\r\n\r\nexport default SinsOfTheMany;\r\n","import React from 'react';\r\n\r\nimport SPELLS from 'common/SPELLS';\r\nimport SpellIcon from 'common/SpellIcon';\r\nimport SpellLink from 'common/SpellLink';\r\nimport { formatNumber, formatPercentage } from 'common/format';\r\nimport DualStatisticBox, { STATISTIC_ORDER } from 'interface/others/DualStatisticBox';\r\nimport Analyzer, { SELECTED_PLAYER } from 'parser/core/Analyzer';\r\nimport StatTracker from 'parser/shared/modules/StatTracker';\r\nimport Enemies from 'parser/shared/modules/Enemies';\r\nimport calculateEffectiveHealing from 'parser/core/calculateEffectiveHealing';\r\nimport calculateEffectiveDamage from 'parser/core/calculateEffectiveDamage';\r\nimport { SuggestionFactory, ThresholdStyle, When } from 'parser/core/ParseResults';\r\nimport Enemy from 'parser/core/Enemy';\r\nimport Events, { DamageEvent, HealEvent } from 'parser/core/Events';\r\nimport { Options } from 'parser/core/Module';\r\nimport { i18n } from '@lingui/core';\r\nimport { t } from '@lingui/macro';\r\n\r\nimport isAtonement from '../core/isAtonement';\r\nimport Penance from './Penance';\r\nimport AtonementDamageSource from '../features/AtonementDamageSource';\r\nimport { calculateOverhealing, SmiteEstimation } from '../../SpellCalculations';\r\nimport Atonement from './Atonement';\r\nimport SinsOfTheMany from './SinsOfTheMany';\r\n\r\nclass Schism extends Analyzer {\r\n  static dependencies = {\r\n    enemies: Enemies,\r\n    statTracker: StatTracker,\r\n    atonementDamageSource: AtonementDamageSource,\r\n    penance: Penance,\r\n    atonement: Atonement,\r\n    sins: SinsOfTheMany,\r\n  };\r\n  // Spell metadata\r\n  static bonus = 0.25;\r\n  static duration = 9000;\r\n  static synergisticAbilities = [\r\n    SPELLS.HALO_TALENT.id,\r\n    SPELLS.POWER_WORD_SOLACE_TALENT.id,\r\n    SPELLS.PENANCE.id,\r\n  ];\r\n  // Privates\r\n  _lastSchismCast: DamageEvent | null = null;\r\n  _badSchisms: any = {};\r\n  // Schism data\r\n  directDamage = 0;\r\n  damageFromBuff = 0;\r\n  healing = 0;\r\n  target: Enemy | null = null;\r\n  statisticOrder = STATISTIC_ORDER.OPTIONAL();\r\n  protected enemies!: Enemies;\r\n  protected statTracker!: StatTracker;\r\n  protected atonementDamageSource!: AtonementDamageSource;\r\n  protected penance!: Penance;\r\n  protected atonement!: Atonement;\r\n  protected sins!: SinsOfTheMany;\r\n\r\n  // Methods\r\n  constructor(options: Options) {\r\n    super(options);\r\n\r\n    this.active = this.selectedCombatant.hasTalent(\r\n      SPELLS.SCHISM_TALENT.id,\r\n    );\r\n    this.addEventListener(Events.damage.by(SELECTED_PLAYER), this.onDamage);\r\n    this.addEventListener(Events.heal.by(SELECTED_PLAYER), this.onHeal);\r\n  }\r\n\r\n  get smiteEstimation() {\r\n    return SmiteEstimation(this.statTracker, this.sins);\r\n  }\r\n\r\n  get buffActive() {\r\n    return this.target && this.target.hasBuff(SPELLS.SCHISM_TALENT.id);\r\n  }\r\n\r\n  get badSchismCount() {\r\n    return Object.entries(this._badSchisms).reduce(\r\n      (n, [e, isBadSchism]) => n + (isBadSchism ? 1 : 0),\r\n      0,\r\n    );\r\n  }\r\n\r\n  get badSchismThresholds() {\r\n    return {\r\n      actual: this.badSchismCount,\r\n      isGreaterThan: {\r\n        minor: 0,\r\n        average: 1,\r\n        major: 3,\r\n      },\r\n      style: ThresholdStyle.NUMBER,\r\n    };\r\n  }\r\n\r\n  onDamage(event: DamageEvent) {\r\n    const spellId = event.ability.guid;\r\n\r\n    // Handle non-schism events\r\n    if (spellId !== SPELLS.SCHISM_TALENT.id) {\r\n      this.handleSynergy(event);\r\n      this.processSchismBuffDamage(event);\r\n      return;\r\n    }\r\n\r\n    // Set the target for schism\r\n    this.target = this.enemies.getEntity(event);\r\n\r\n    // Set the last time schism was cast\r\n    this._lastSchismCast = event;\r\n\r\n    // Assume every schism is bad\r\n    this._badSchisms[event.timestamp] = true;\r\n\r\n    // Calculate direct schism damage\r\n    const { smiteDamage } = this.smiteEstimation();\r\n\r\n    // Substract smite damage (because that is what we would be casting if we didn't pick Schism)\r\n    this.directDamage += event.amount + (event.absorbed || 0) - smiteDamage;\r\n  }\r\n\r\n  onHeal(event: HealEvent) {\r\n    if (!isAtonement(event)) {\r\n      return;\r\n    }\r\n    const atonenementDamageEvent = this.atonementDamageSource.event;\r\n    if (!atonenementDamageEvent) {\r\n      this.error('Atonement damage event unknown for Atonement heal:', event);\r\n      return;\r\n    }\r\n\r\n    // Schism doesn't buff itself, but we need to handle this for better estimations\r\n    if (atonenementDamageEvent.ability.guid === SPELLS.SCHISM_TALENT.id) {\r\n      this.processSchismAtonement(event);\r\n      return;\r\n    }\r\n\r\n    // If the Schism debuff isn't active, or the damage isn't our target we don't process it\r\n    if (!this.buffActive || !this.target || atonenementDamageEvent.targetID !== this.target.id) {\r\n      return;\r\n    }\r\n\r\n    // Schism doesn't buff pet damage - yet\r\n    if (this.atonementDamageSource.event && this.owner.byPlayerPet(this.atonementDamageSource.event)) {\r\n      return;\r\n    }\r\n\r\n    this.healing += calculateEffectiveHealing(event, Schism.bonus);\r\n  }\r\n\r\n  // Flags a Schism as being bad due to lack of synergistic abilities used\r\n  handleSynergy(event: DamageEvent) {\r\n    if (!this._lastSchismCast) {\r\n      return;\r\n    }\r\n    if (!Schism.synergisticAbilities.includes(event.ability.guid)) {\r\n      return;\r\n    }\r\n\r\n    // Return early if the ability isn't cast during Schism\r\n    if (this._lastSchismCast.timestamp + Schism.duration <= event.timestamp) {\r\n      return;\r\n    }\r\n\r\n    this._badSchisms[this._lastSchismCast.timestamp] = false;\r\n  }\r\n\r\n  // The Atonement from Schism's direct damage component\r\n  processSchismAtonement(event: HealEvent) {\r\n    const { smiteHealing } = this.smiteEstimation();\r\n    const estimatedSmiteRawHealing = smiteHealing * event.hitType;\r\n\r\n    const estimatedOverhealing = calculateOverhealing(\r\n      estimatedSmiteRawHealing,\r\n      event.amount,\r\n      event.overheal,\r\n    );\r\n\r\n    const estimatedSmiteHealing =\r\n      estimatedSmiteRawHealing - estimatedOverhealing;\r\n\r\n    this.healing += event.amount - estimatedSmiteHealing;\r\n  }\r\n\r\n  // The damage from the Schism buff\r\n  processSchismBuffDamage(event: DamageEvent) {\r\n    if (!this.buffActive || !this.target || event.targetID !== this.target.id) {\r\n      return;\r\n    }\r\n\r\n    this.damageFromBuff += calculateEffectiveDamage(event, Schism.bonus);\r\n  }\r\n\r\n  statistic() {\r\n    return (\r\n      <DualStatisticBox\r\n        icon={<SpellIcon id={SPELLS.SCHISM_TALENT.id} />}\r\n        values={[\r\n          `${formatNumber((this.healing / this.owner.fightDuration) * 1000)} HPS`,\r\n          `${formatNumber(((this.directDamage + this.damageFromBuff) / this.owner.fightDuration) * 1000)} DPS`,\r\n        ]}\r\n        footer={(\r\n          <>\r\n            <SpellLink id={SPELLS.SCHISM_TALENT.id} /> throughput\r\n          </>\r\n        )}\r\n        tooltip={(\r\n          <>\r\n            The effective healing contributed by Schism was {formatPercentage(this.owner.getPercentageOfTotalHealingDone(this.healing))}% of total healing done.<br />\r\n            The direct damage contributed by the Schism talent was {formatPercentage(this.owner.getPercentageOfTotalDamageDone(this.directDamage))}% of total damage done.<br />\r\n            The effective damage contributed by the Schism bonus was {formatPercentage(this.owner.getPercentageOfTotalDamageDone(this.damageFromBuff))}% of total damage done. <br />\r\n          </>\r\n        )}\r\n        alignIcon=\"center\"\r\n      />\r\n    );\r\n  }\r\n\r\n  suggestions(when: When) {\r\n    when(this.badSchismThresholds).addSuggestion((suggest: SuggestionFactory, actual: number, recommended: number) => suggest(\r\n      <>\r\n        Don't cast <SpellLink id={SPELLS.SCHISM_TALENT.id} /> without also\r\n        casting <SpellLink id={SPELLS.PENANCE.id} />,{' '}\r\n        <SpellLink id={SPELLS.HALO_TALENT.id} />, or{' '}\r\n        <SpellLink id={SPELLS.POWER_WORD_SOLACE_TALENT.id} />{' '}\r\n      </>,\r\n      )\r\n        .icon(SPELLS.SCHISM_TALENT.icon)\r\n        .actual(i18n._(t('priest.discipline.suggestions.schism.efficiency')`You cast Schism ${actual} times without pairing it with strong damaging abilities, such as Penance, Halo, or Power Word: Solace.`))\r\n        .recommended(`${recommended} is recommended`),\r\n    );\r\n  }\r\n}\r\n\r\nexport default Schism;\r\n","import React from 'react';\r\n\r\nimport ItemHealingDone from 'interface/ItemHealingDone';\r\nimport Statistic from 'interface/statistics/Statistic';\r\nimport STATISTIC_CATEGORY from 'interface/others/STATISTIC_CATEGORY';\r\nimport BoringSpellValueText from 'interface/statistics/components/BoringSpellValueText';\r\n\r\nimport SPELLS from 'common/SPELLS';\r\nimport { formatNumber } from 'common/format';\r\nimport COVENANTS from 'game/shadowlands/COVENANTS';\r\n\r\nimport Analyzer, { SELECTED_PLAYER } from 'parser/core/Analyzer';\r\nimport Events, { AbsorbedEvent, HealEvent } from 'parser/core/Events';\r\nimport { Options } from 'parser/core/Module';\r\n\r\nimport AtonementDamageSource from '../../features/AtonementDamageSource';\r\nimport isAtonement from '../../core/isAtonement';\r\n\r\nclass Mindgames extends Analyzer {\r\n  static dependencies = {\r\n    atonementDamageSource: AtonementDamageSource,\r\n  };\r\n  atonementHealing = 0;\r\n  directHealing = 0;\r\n  preventedDamage = 0;\r\n  protected atonementDamageSource!: AtonementDamageSource;\r\n\r\n  constructor(options: Options) {\r\n    super(options);\r\n    this.active = this.selectedCombatant.hasCovenant(COVENANTS.VENTHYR.id);\r\n\r\n    this.addEventListener(Events.heal.by(SELECTED_PLAYER), this.onHeal);\r\n    this.addEventListener(Events.absorbed.by(SELECTED_PLAYER).spell(SPELLS.MINDGAMES_ABSORB), this.onMindgamesAbsorbed);\r\n  }\r\n\r\n  onHeal(event: HealEvent) {\r\n    if (isAtonement(event)) {\r\n\r\n      const atonenementDamageEvent = this.atonementDamageSource.event;\r\n      if (!atonenementDamageEvent || atonenementDamageEvent.ability.guid !== SPELLS.MINDGAMES.id) {\r\n        return;\r\n      }\r\n\r\n      this.atonementHealing += event.amount + (event.absorbed || 0);\r\n      return;\r\n    }\r\n\r\n    const spellId = event.ability.guid;\r\n    if (spellId === SPELLS.MINDGAMES_HEAL.id) {\r\n      this.directHealing += event.amount + (event.absorbed || 0);\r\n      return;\r\n    }\r\n  }\r\n\r\n  onMindgamesAbsorbed(event: AbsorbedEvent) {\r\n    this.preventedDamage += event.amount;\r\n  }\r\n\r\n  statistic() {\r\n    return (\r\n      <Statistic\r\n        size=\"flexible\"\r\n        tooltip={(\r\n          <>\r\n            Healing Breakdown:\r\n            <ul>\r\n              <li>{formatNumber(this.atonementHealing)} Atonement Healing</li>\r\n              <li>{formatNumber(this.directHealing)} Direct Healing</li>\r\n              <li>{formatNumber(this.preventedDamage)} Prevented Damage</li>\r\n            </ul>\r\n          </>\r\n        )}\r\n        category={STATISTIC_CATEGORY.COVENANTS}\r\n      >\r\n        <BoringSpellValueText spell={SPELLS.MINDGAMES}>\r\n          <>\r\n            <ItemHealingDone amount={this.atonementHealing + this.directHealing + this.preventedDamage} />\r\n          </>\r\n        </BoringSpellValueText>\r\n      </Statistic>\r\n    );\r\n  }\r\n}\r\n\r\nexport default Mindgames;\r\n","import React from 'react';\r\n\r\nimport ItemHealingDone from 'interface/ItemHealingDone';\r\nimport Statistic from 'interface/statistics/Statistic';\r\nimport STATISTIC_CATEGORY from 'interface/others/STATISTIC_CATEGORY';\r\nimport BoringSpellValueText from 'interface/statistics/components/BoringSpellValueText';\r\n\r\nimport SPELLS from 'common/SPELLS';\r\nimport { formatNumber } from 'common/format';\r\nimport COVENANTS from 'game/shadowlands/COVENANTS';\r\n\r\nimport Analyzer, { SELECTED_PLAYER } from 'parser/core/Analyzer';\r\nimport Events, { HealEvent } from 'parser/core/Events';\r\nimport { Options } from 'parser/core/Module';\r\n\r\nimport AtonementDamageSource from '../../features/AtonementDamageSource';\r\nimport isAtonement from '../../core/isAtonement';\r\n\r\nclass BoonOfTheAscended extends Analyzer {\r\n  static dependencies = {\r\n    atonementDamageSource: AtonementDamageSource,\r\n  };\r\n\r\n  protected atonementDamageSource!: AtonementDamageSource;\r\n\r\n  atonementHealing = 0;\r\n  directHealing = 0;\r\n\r\n  constructor(options: Options) {\r\n    super(options);\r\n    this.active = this.selectedCombatant.hasCovenant(COVENANTS.KYRIAN.id);\r\n\r\n    this.addEventListener(Events.heal.by(SELECTED_PLAYER).spell([SPELLS.ASCENDED_BLAST, SPELLS.ASCENDED_NOVA, SPELLS.ASCENDED_ERUPTION]), this.onHeal);\r\n  }\r\n\r\n  onHeal(event: HealEvent) {\r\n    if (isAtonement(event)) {\r\n\r\n      const atonenementDamageEvent = this.atonementDamageSource.event;\r\n\r\n      if (!atonenementDamageEvent) {\r\n        return;\r\n      }\r\n      this.atonementHealing += event.amount + (event.absorbed || 0);\r\n    } else {\r\n      this.directHealing += event.amount + (event.absorbed || 0);\r\n    }\r\n  }\r\n\r\n  statistic() {\r\n    return (\r\n      <Statistic\r\n        size=\"flexible\"\r\n        tooltip={(\r\n          <>\r\n            Healing Breakdown:\r\n            <ul>\r\n              <li>{formatNumber(this.atonementHealing)} Atonement Healing</li>\r\n              <li>{formatNumber(this.directHealing)} Direct Healing</li>\r\n            </ul>\r\n          </>\r\n        )}\r\n        category={STATISTIC_CATEGORY.COVENANTS}\r\n      >\r\n        <BoringSpellValueText spell={SPELLS.BOON_OF_THE_ASCENDED}>\r\n          <>\r\n            <ItemHealingDone amount={this.atonementHealing + this.directHealing} />\r\n          </>\r\n        </BoringSpellValueText>\r\n      </Statistic>\r\n    );\r\n  }\r\n}\r\n\r\nexport default BoonOfTheAscended;\r\n","import React from 'react';\r\n\r\nimport SPELLS from 'common/SPELLS';\r\n\r\nimport Analyzer, { SELECTED_PLAYER } from 'parser/core/Analyzer';\r\nimport calculateEffectiveHealing from 'parser/core/calculateEffectiveHealing';\r\nimport Events, { HealEvent } from 'parser/core/Events';\r\nimport { Options } from 'parser/core/Module';\r\nimport { SHINING_RADIANCE_INCREASE } from 'parser/priest/discipline/constants';\r\n\r\nimport Statistic from 'interface/statistics/Statistic';\r\nimport STATISTIC_ORDER from 'interface/others/STATISTIC_ORDER';\r\nimport STATISTIC_CATEGORY from 'interface/others/STATISTIC_CATEGORY';\r\nimport ConduitSpellText from 'interface/statistics/components/ConduitSpellText';\r\nimport ItemHealingDone from 'interface/ItemHealingDone';\r\n\r\nclass ShiningRadiance extends Analyzer {\r\n\r\n  conduitRank: number = 0;\r\n  conduitIncrease: number = 0;\r\n  bonusRadianceHealing: number = 0;\r\n\r\n  constructor(options: Options) {\r\n    super(options);\r\n\r\n    this.conduitRank = this.selectedCombatant.conduitRankBySpellID(SPELLS.SHINING_RADIANCE.id);\r\n    if (!this.conduitRank) {\r\n      this.active = false;\r\n      return;\r\n    }\r\n    this.conduitIncrease = SHINING_RADIANCE_INCREASE[this.conduitRank];\r\n\r\n    this.addEventListener(Events.heal.by(SELECTED_PLAYER).spell(SPELLS.POWER_WORD_RADIANCE), this.onRadianceHeal);\r\n  }\r\n\r\n  onRadianceHeal(event: HealEvent) {\r\n    this.bonusRadianceHealing += calculateEffectiveHealing(event, this.conduitIncrease);\r\n  }\r\n\r\n  statistic() {\r\n    return (\r\n      <Statistic\r\n        position={STATISTIC_ORDER.OPTIONAL(13)}\r\n        size=\"flexible\"\r\n        category={STATISTIC_CATEGORY.COVENANTS}\r\n      >\r\n        <ConduitSpellText spell={SPELLS.SHINING_RADIANCE} rank={this.conduitRank}>\r\n          <>\r\n            <ItemHealingDone amount={this.bonusRadianceHealing} />\r\n          </>\r\n        </ConduitSpellText>\r\n      </Statistic>\r\n    );\r\n  }\r\n\r\n}\r\n\r\nexport default ShiningRadiance;\r\n","import CoreCombatLogParser from 'parser/core/CombatLogParser';\r\nimport LowHealthHealing from 'parser/shared/modules/features/LowHealthHealing';\r\nimport ManaLevelChart from 'parser/shared/modules/resources/mana/ManaLevelChart';\r\nimport ManaUsageChart from 'parser/shared/modules/resources/mana/ManaUsageChart';\r\n\r\nimport AtonementSuccessiveDamageNormalizer from './normalizers/AtonementSuccessiveDamage';\r\nimport ShadowfiendNormalizer from '../shared/normalizers/ShadowfiendNormalizer';\r\nimport PowerWordRadianceNormalizer from './normalizers/PowerWordRadianceNormalizer';\r\n\r\nimport Abilities from './modules/Abilities';\r\nimport SpellUsable from './modules/core/SpellUsable';\r\nimport SpellManaCost from './modules/core/SpellManaCost';\r\nimport AbilityTracker from './modules/core/AbilityTracker';\r\nimport Channeling from './modules/core/Channeling';\r\nimport GlobalCooldown from './modules/core/GlobalCooldown';\r\nimport AtonementAnalyzer from './modules/core/AtonementAnalyzer';\r\n\r\nimport AlwaysBeCasting from './modules/features/AlwaysBeCasting';\r\nimport Checklist from './modules/features/Checklist/Module';\r\nimport CooldownThroughputTracker from './modules/features/CooldownThroughputTracker';\r\nimport PowerWordShieldWasted from './modules/features/PowerWordShieldWasted';\r\nimport AtonementApplicationSource from './modules/features/AtonementApplicationSource';\r\nimport AtonementDamageSource from './modules/features/AtonementDamageSource';\r\nimport AtonementHealingDone from './modules/features/AtonementHealingDone';\r\nimport PowerWordBarrier from './modules/features/PowerWordBarrier';\r\nimport Lenience from './modules/spells/Lenience';\r\nimport PurgeTheWicked from './modules/features/PurgeTheWicked';\r\nimport AtonementApplicatorBreakdown from './modules/features/AtonementApplicatorBreakdown';\r\n\r\nimport TwistOfFate from './modules/spells/TwistOfFate';\r\nimport Castigation from './modules/spells/Castigation';\r\nimport Atonement from './modules/spells/Atonement';\r\nimport Evangelism from './modules/spells/Evangelism';\r\nimport Penance from './modules/spells/Penance';\r\nimport DesperatePrayer from '../shared/modules/features/DesperatePrayer';\r\nimport Contrition from './modules/spells/Contrition';\r\nimport Grace from './modules/spells/Grace';\r\nimport Schism from './modules/spells/Schism';\r\nimport SinsOfTheMany from './modules/spells/SinsOfTheMany';\r\n\r\nimport Mindgames from './modules/shadowlands/covenants/MindGames';\r\nimport BoonOfTheAscended from './modules/shadowlands/covenants/BoonOfTheAscended';\r\n\r\nimport ShiningRadiance from './modules/shadowlands/conduits/ShiningRadiance';\r\n\r\nimport { ABILITIES_AFFECTED_BY_HEALING_INCREASES } from './constants';\r\n\r\nclass CombatLogParser extends CoreCombatLogParser {\r\n  static abilitiesAffectedByHealingIncreases = ABILITIES_AFFECTED_BY_HEALING_INCREASES;\r\n\r\n  static specModules = {\r\n    // Normalizers\r\n    atonementSuccessiveDamage: AtonementSuccessiveDamageNormalizer,\r\n    shadowfiendNormalizer: ShadowfiendNormalizer,\r\n    powerWordRadianceNormalizer: PowerWordRadianceNormalizer,\r\n\r\n    spellUsable: SpellUsable,\r\n    spellManaCost: SpellManaCost,\r\n    abilityTracker: AbilityTracker,\r\n    lowHealthHealing: LowHealthHealing,\r\n    abilities: Abilities,\r\n    channeling: Channeling,\r\n    globalCooldown: GlobalCooldown,\r\n    atonementAnalyzer: AtonementAnalyzer,\r\n\r\n    // Generic healer things\r\n    manaLevelChart: ManaLevelChart,\r\n    manaUsageChart: ManaUsageChart,\r\n\r\n    // Features\r\n    checklist: Checklist,\r\n\r\n    // Abilities\r\n    penance: Penance,\r\n    alwaysBeCasting: AlwaysBeCasting,\r\n    cooldownThroughputTracker: CooldownThroughputTracker,\r\n    powerWordShieldWasted: PowerWordShieldWasted,\r\n    atonementApplicationSource: AtonementApplicationSource,\r\n    atonementDamageSource: AtonementDamageSource,\r\n    atonementHealingDone: AtonementHealingDone,\r\n    powerWordBarrier: PowerWordBarrier,\r\n    lenience: Lenience,\r\n    purgeTheWicked: PurgeTheWicked,\r\n    atonementApplicatorBreakdown: AtonementApplicatorBreakdown,\r\n\r\n    // Spells (talents and traits):\r\n    twistOfFate: TwistOfFate,\r\n    castigation: Castigation,\r\n    atonement: Atonement,\r\n    evangelism: Evangelism,\r\n    desperatePrayer: DesperatePrayer,\r\n    contrition: Contrition,\r\n    grace: Grace,\r\n    sinsOfTheMany: SinsOfTheMany,\r\n    schism: Schism,\r\n\r\n    // Covenants\r\n    mindgames: Mindgames,\r\n    boonOfTheAscended: BoonOfTheAscended,\r\n\r\n    // Conduits\r\n    shiningRadiance: ShiningRadiance,\r\n  };\r\n}\r\n\r\nexport default CombatLogParser;\r\n","/**\r\n * A simple component that shows the spell value in the most plain way possible.\r\n * Use this only as the very last resort.\r\n */\r\nimport React from 'react';\r\n\r\nimport SpellIcon from 'common/SpellIcon';\r\nimport SpellLink from 'common/SpellLink';\r\nimport Spell from 'common/SPELLS/Spell';\r\n\r\ntype Props = {\r\n  spell: Spell;\r\n  children: React.ReactNode;\r\n  className?: string;\r\n}\r\n\r\nconst BoringSpellValueText = ({ spell, children, className }: Props) => (\r\n  <div className={`pad boring-text ${className || ''}`}>\r\n    <label>\r\n      <SpellIcon id={spell.id} /> <SpellLink id={spell.id} icon={false} />\r\n    </label>\r\n    <div className=\"value\">\r\n      {children}\r\n    </div>\r\n  </div>\r\n);\r\n\r\nexport default BoringSpellValueText;\r\n","export default function calculateEffectiveDamage(event, increase) {\r\n  const raw = (event.amount || 0) + (event.absorbed || 0);\r\n  return raw - (raw / (1 + increase));\r\n}\r\n","/**\r\n * Velen's is a static 15% healing increase to the raw healing going out. If that increase turns out to be overhealing it is worthless, so my approach of reducing the healing gain by the overhealing really only gives you the gain in healing that actually did something. An implementation that ignores overhealing and acts like Velen's contributed 15% of the effective healing will be inaccurate if there was any overhealing.\r\n *\r\n * I'll try to explain this PoV with an example:\r\n * Normal spell heals for 1,000 raw\r\n * With Velen's this is 1,150 raw. So Velen's increased the heal by 150 raw healing, that healing is on top of the original 1,000 raw healing the spell normally does.\r\n * Then comes overhealing;\r\n * If the spell overheals for 50, then the spell will have healed for 1,100. At this point Velen's effectively contributes 100 healing.\r\n * If the spell overheals for 100, then the spell will have healed for 1,050. So velen's effectiveness is 50;\r\n * If the spell overheals for 150, then the spell will have healed for the original 1,000 and Velen's increase was completely wasted.\r\n * If the spell overheals for 200, then 50 healing of the original spell was already overhealing, and the increased healing from Velen's did nothing (0).\r\n *\r\n * If you ignore raw healing and look at the actual healing done you may see the last 950 healing and think 15% of that was contributed by Velen's, while in fact it was 0.\r\n */\r\n\r\nexport default function calculateEffectiveHealing(event, relativeHealIncrease) {\r\n  const amount = event.amount;\r\n  const absorbed = event.absorbed || 0;\r\n  const overheal = event.overheal || 0;\r\n  const raw = amount + absorbed + overheal;\r\n  const relativeHealingIncreaseFactor = 1 + relativeHealIncrease;\r\n  const healingIncrease = raw - raw / relativeHealingIncreaseFactor;\r\n  const effectiveHealing = healingIncrease - overheal;\r\n\r\n  return Math.max(0, effectiveHealing);\r\n}\r\n","import React from 'react';\r\n\r\nimport SpellIcon from 'common/SpellIcon';\r\nimport SpellLink from 'common/SpellLink';\r\nimport Spell from 'common/SPELLS/Spell';\r\n\r\ntype Props = {\r\n  spell: Spell;\r\n  rank: number;\r\n  children: React.ReactNode;\r\n  className?: string;\r\n}\r\n\r\nconst ConduitSpellText = ({ spell, rank, children, className }: Props) => (\r\n  <div className={`pad boring-text ${className || ''}`}>\r\n    <label>\r\n      <SpellIcon id={spell.id} /> <SpellLink id={spell.id} icon={false} /> - Rank {rank}\r\n    </label>\r\n    <div className=\"value\">\r\n      {children}\r\n    </div>\r\n  </div>\r\n);\r\n\r\nexport default ConduitSpellText;\r\n","import React from 'react';\r\nimport RESOURCE_TYPES from 'game/RESOURCE_TYPES';\r\n\r\nimport ResourceLink from './ResourceLink';\r\nimport Icon from './Icon';\r\n\r\ninterface Props extends Omit<React.ComponentProps<typeof Icon>, 'id' | 'icon'> {\r\n  id: number;\r\n  noLink?: boolean;\r\n}\r\n\r\nconst ResourceIcon = ({ id, noLink, ...others }: Props) => {\r\n  if (process.env.NODE_ENV === 'development' && !RESOURCE_TYPES[id]) {\r\n    throw new Error(`Unknown spell: ${id}`);\r\n  }\r\n\r\n  const spell = RESOURCE_TYPES[id] || {\r\n    name: 'Spell not recognized',\r\n    icon: 'inv_misc_questionmark',\r\n  };\r\n\r\n  const icon = (\r\n    <Icon\r\n      icon={spell.icon}\r\n      alt={spell.name}\r\n      {...others}\r\n    />\r\n  );\r\n\r\n  if (noLink) {\r\n    return icon;\r\n  }\r\n\r\n  return (\r\n    <ResourceLink id={id} icon={false}>\r\n      {icon}\r\n    </ResourceLink>\r\n  );\r\n};\r\n\r\nexport default ResourceIcon;\r\n","import React, {useEffect, useState} from 'react';\r\n\r\nimport TooltipProvider from 'interface/common/TooltipProvider';\r\n\r\nimport RESOURCE_TYPES from 'game/RESOURCE_TYPES';\r\n\r\nimport ResourceIcon from './ResourceIcon';\r\n\r\ninterface Props {\r\n  id: number;\r\n  children?: React.ReactNode;\r\n  category?: string;\r\n  icon?: boolean,\r\n}\r\n\r\nconst ResourceLink = ({icon = true, ...props}: Props) => {\r\n\r\n  const [elem, setElem] = useState<HTMLAnchorElement | null>(null);\r\n\r\n  useEffect(() => {TooltipProvider.refresh(elem);})\r\n\r\n  const { id, children, category = undefined, ...other } = props;\r\n\r\n  if (process.env.NODE_ENV === 'development' && !children && !RESOURCE_TYPES[id]) {\r\n    throw new Error(`Unknown spell: ${id}`);\r\n  }\r\n\r\n  return (\r\n    <a\r\n      href={TooltipProvider.resource(id)}\r\n      target=\"_blank\"\r\n      rel=\"noopener noreferrer\"\r\n      className={category}\r\n      ref={elem => {setElem(elem);}}\r\n      {...other}\r\n    >\r\n      {icon && <ResourceIcon id={id} noLink />}{' '}\r\n      {children || RESOURCE_TYPES[id].name}\r\n    </a>\r\n  );\r\n}\r\n\r\nexport default ResourceLink;\r\n","'use strict';\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\n\nvar _typeof = typeof Symbol === \"function\" && typeof Symbol.iterator === \"symbol\" ? function (obj) { return typeof obj; } : function (obj) { return obj && typeof Symbol === \"function\" && obj.constructor === Symbol && obj !== Symbol.prototype ? \"symbol\" : typeof obj; };\n\nvar _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; };\n\nvar _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if (\"value\" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();\n\nvar _react = require('react');\n\nvar _react2 = _interopRequireDefault(_react);\n\nvar _propTypes = require('prop-types');\n\nvar _propTypes2 = _interopRequireDefault(_propTypes);\n\nvar _classnames = require('classnames');\n\nvar _classnames2 = _interopRequireDefault(_classnames);\n\nfunction _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }\n\nfunction _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }\n\nfunction _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError(\"Cannot call a class as a function\"); } }\n\nfunction _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError(\"this hasn't been initialised - super() hasn't been called\"); } return call && (typeof call === \"object\" || typeof call === \"function\") ? call : self; }\n\nfunction _inherits(subClass, superClass) { if (typeof superClass !== \"function\" && superClass !== null) { throw new TypeError(\"Super expression must either be null or a function, not \" + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }\n\nvar ANIMATION_STATE_CLASSES = {\n  animating: 'rah-animating',\n  animatingUp: 'rah-animating--up',\n  animatingDown: 'rah-animating--down',\n  animatingToHeightZero: 'rah-animating--to-height-zero',\n  animatingToHeightAuto: 'rah-animating--to-height-auto',\n  animatingToHeightSpecific: 'rah-animating--to-height-specific',\n  static: 'rah-static',\n  staticHeightZero: 'rah-static--height-zero',\n  staticHeightAuto: 'rah-static--height-auto',\n  staticHeightSpecific: 'rah-static--height-specific'\n};\n\nvar PROPS_TO_OMIT = ['animateOpacity', 'animationStateClasses', 'applyInlineTransitions', 'children', 'contentClassName', 'delay', 'duration', 'easing', 'height', 'onAnimationEnd', 'onAnimationStart'];\n\nfunction omit(obj) {\n  for (var _len = arguments.length, keys = Array(_len > 1 ? _len - 1 : 0), _key = 1; _key < _len; _key++) {\n    keys[_key - 1] = arguments[_key];\n  }\n\n  if (!keys.length) {\n    return obj;\n  }\n\n  var res = {};\n  var objectKeys = Object.keys(obj);\n\n  for (var i = 0; i < objectKeys.length; i++) {\n    var key = objectKeys[i];\n\n    if (keys.indexOf(key) === -1) {\n      res[key] = obj[key];\n    }\n  }\n\n  return res;\n}\n\n// Start animation helper using nested requestAnimationFrames\nfunction startAnimationHelper(callback) {\n  var requestAnimationFrameIDs = [];\n\n  requestAnimationFrameIDs[0] = requestAnimationFrame(function () {\n    requestAnimationFrameIDs[1] = requestAnimationFrame(function () {\n      callback();\n    });\n  });\n\n  return requestAnimationFrameIDs;\n}\n\nfunction cancelAnimationFrames(requestAnimationFrameIDs) {\n  requestAnimationFrameIDs.forEach(function (id) {\n    return cancelAnimationFrame(id);\n  });\n}\n\nfunction isNumber(n) {\n  return !isNaN(parseFloat(n)) && isFinite(n);\n}\n\nfunction isPercentage(height) {\n  // Percentage height\n  return typeof height === 'string' && height.search('%') === height.length - 1 && isNumber(height.substr(0, height.length - 1));\n}\n\nfunction runCallback(callback, params) {\n  if (callback && typeof callback === 'function') {\n    callback(params);\n  }\n}\n\nvar AnimateHeight = function (_React$Component) {\n  _inherits(AnimateHeight, _React$Component);\n\n  function AnimateHeight(props) {\n    _classCallCheck(this, AnimateHeight);\n\n    var _this = _possibleConstructorReturn(this, (AnimateHeight.__proto__ || Object.getPrototypeOf(AnimateHeight)).call(this, props));\n\n    _this.animationFrameIDs = [];\n\n    var height = 'auto';\n    var overflow = 'visible';\n\n    if (isNumber(props.height)) {\n      // If value is string \"0\" make sure we convert it to number 0\n      height = props.height < 0 || props.height === '0' ? 0 : props.height;\n      overflow = 'hidden';\n    } else if (isPercentage(props.height)) {\n      // If value is string \"0%\" make sure we convert it to number 0\n      height = props.height === '0%' ? 0 : props.height;\n      overflow = 'hidden';\n    }\n\n    _this.animationStateClasses = _extends({}, ANIMATION_STATE_CLASSES, props.animationStateClasses);\n\n    var animationStateClasses = _this.getStaticStateClasses(height);\n\n    _this.state = {\n      animationStateClasses: animationStateClasses,\n      height: height,\n      overflow: overflow,\n      shouldUseTransitions: false\n    };\n    return _this;\n  }\n\n  _createClass(AnimateHeight, [{\n    key: 'componentDidMount',\n    value: function componentDidMount() {\n      var height = this.state.height;\n\n      // Hide content if height is 0 (to prevent tabbing into it)\n      // Check for contentElement is added cause this would fail in tests (react-test-renderer)\n      // Read more here: https://github.com/Stanko/react-animate-height/issues/17\n\n      if (this.contentElement && this.contentElement.style) {\n        this.hideContent(height);\n      }\n    }\n  }, {\n    key: 'componentDidUpdate',\n    value: function componentDidUpdate(prevProps, prevState) {\n      var _this2 = this;\n\n      var _props = this.props,\n          delay = _props.delay,\n          duration = _props.duration,\n          height = _props.height,\n          onAnimationEnd = _props.onAnimationEnd,\n          onAnimationStart = _props.onAnimationStart;\n\n      // Check if 'height' prop has changed\n\n      if (this.contentElement && height !== prevProps.height) {\n        var _cx;\n\n        // Remove display: none from the content div\n        // if it was hidden to prevent tabbing into it\n        this.showContent(prevState.height);\n\n        // Cache content height\n        this.contentElement.style.overflow = 'hidden';\n        var contentHeight = this.contentElement.offsetHeight;\n        this.contentElement.style.overflow = '';\n\n        // set total animation time\n        var totalDuration = duration + delay;\n\n        var newHeight = null;\n        var timeoutState = {\n          height: null, // it will be always set to either 'auto' or specific number\n          overflow: 'hidden'\n        };\n        var isCurrentHeightAuto = prevState.height === 'auto';\n\n        if (isNumber(height)) {\n          // If value is string \"0\" make sure we convert it to number 0\n          newHeight = height < 0 || height === '0' ? 0 : height;\n          timeoutState.height = newHeight;\n        } else if (isPercentage(height)) {\n          // If value is string \"0%\" make sure we convert it to number 0\n          newHeight = height === '0%' ? 0 : height;\n          timeoutState.height = newHeight;\n        } else {\n          // If not, animate to content height\n          // and then reset to auto\n          newHeight = contentHeight; // TODO solve contentHeight = 0\n          timeoutState.height = 'auto';\n          timeoutState.overflow = null;\n        }\n\n        if (isCurrentHeightAuto) {\n          // This is the height to be animated to\n          timeoutState.height = newHeight;\n\n          // If previous height was 'auto'\n          // set starting height explicitly to be able to use transition\n          newHeight = contentHeight;\n        }\n\n        // Animation classes\n        var animationStateClasses = (0, _classnames2.default)((_cx = {}, _defineProperty(_cx, this.animationStateClasses.animating, true), _defineProperty(_cx, this.animationStateClasses.animatingUp, prevProps.height === 'auto' || height < prevProps.height), _defineProperty(_cx, this.animationStateClasses.animatingDown, height === 'auto' || height > prevProps.height), _defineProperty(_cx, this.animationStateClasses.animatingToHeightZero, timeoutState.height === 0), _defineProperty(_cx, this.animationStateClasses.animatingToHeightAuto, timeoutState.height === 'auto'), _defineProperty(_cx, this.animationStateClasses.animatingToHeightSpecific, timeoutState.height > 0), _cx));\n\n        // Animation classes to be put after animation is complete\n        var timeoutAnimationStateClasses = this.getStaticStateClasses(timeoutState.height);\n\n        // Set starting height and animating classes\n        // We are safe to call set state as it will not trigger infinite loop\n        // because of the \"height !== prevProps.height\" check\n        this.setState({ // eslint-disable-line react/no-did-update-set-state\n          animationStateClasses: animationStateClasses,\n          height: newHeight,\n          overflow: 'hidden',\n          // When animating from 'auto' we first need to set fixed height\n          // that change should be animated\n          shouldUseTransitions: !isCurrentHeightAuto\n        });\n\n        // Clear timeouts\n        clearTimeout(this.timeoutID);\n        clearTimeout(this.animationClassesTimeoutID);\n\n        if (isCurrentHeightAuto) {\n          // When animating from 'auto' we use a short timeout to start animation\n          // after setting fixed height above\n          timeoutState.shouldUseTransitions = true;\n\n          cancelAnimationFrames(this.animationFrameIDs);\n          this.animationFrameIDs = startAnimationHelper(function () {\n            _this2.setState(timeoutState);\n\n            // ANIMATION STARTS, run a callback if it exists\n            runCallback(onAnimationStart, { newHeight: timeoutState.height });\n          });\n\n          // Set static classes and remove transitions when animation ends\n          this.animationClassesTimeoutID = setTimeout(function () {\n            _this2.setState({\n              animationStateClasses: timeoutAnimationStateClasses,\n              shouldUseTransitions: false\n            });\n\n            // ANIMATION ENDS\n            // Hide content if height is 0 (to prevent tabbing into it)\n            _this2.hideContent(timeoutState.height);\n            // Run a callback if it exists\n            runCallback(onAnimationEnd, { newHeight: timeoutState.height });\n          }, totalDuration);\n        } else {\n          // ANIMATION STARTS, run a callback if it exists\n          runCallback(onAnimationStart, { newHeight: newHeight });\n\n          // Set end height, classes and remove transitions when animation is complete\n          this.timeoutID = setTimeout(function () {\n            timeoutState.animationStateClasses = timeoutAnimationStateClasses;\n            timeoutState.shouldUseTransitions = false;\n\n            _this2.setState(timeoutState);\n\n            // ANIMATION ENDS\n            // If height is auto, don't hide the content\n            // (case when element is empty, therefore height is 0)\n            if (height !== 'auto') {\n              // Hide content if height is 0 (to prevent tabbing into it)\n              _this2.hideContent(newHeight); // TODO solve newHeight = 0\n            }\n            // Run a callback if it exists\n            runCallback(onAnimationEnd, { newHeight: newHeight });\n          }, totalDuration);\n        }\n      }\n    }\n  }, {\n    key: 'componentWillUnmount',\n    value: function componentWillUnmount() {\n      cancelAnimationFrames(this.animationFrameIDs);\n\n      clearTimeout(this.timeoutID);\n      clearTimeout(this.animationClassesTimeoutID);\n\n      this.timeoutID = null;\n      this.animationClassesTimeoutID = null;\n      this.animationStateClasses = null;\n    }\n  }, {\n    key: 'showContent',\n    value: function showContent(height) {\n      if (height === 0) {\n        this.contentElement.style.display = '';\n      }\n    }\n  }, {\n    key: 'hideContent',\n    value: function hideContent(newHeight) {\n      if (newHeight === 0) {\n        this.contentElement.style.display = 'none';\n      }\n    }\n  }, {\n    key: 'getStaticStateClasses',\n    value: function getStaticStateClasses(height) {\n      var _cx2;\n\n      return (0, _classnames2.default)((_cx2 = {}, _defineProperty(_cx2, this.animationStateClasses.static, true), _defineProperty(_cx2, this.animationStateClasses.staticHeightZero, height === 0), _defineProperty(_cx2, this.animationStateClasses.staticHeightSpecific, height > 0), _defineProperty(_cx2, this.animationStateClasses.staticHeightAuto, height === 'auto'), _cx2));\n    }\n  }, {\n    key: 'render',\n    value: function render() {\n      var _cx3,\n          _this3 = this;\n\n      var _props2 = this.props,\n          animateOpacity = _props2.animateOpacity,\n          applyInlineTransitions = _props2.applyInlineTransitions,\n          children = _props2.children,\n          className = _props2.className,\n          contentClassName = _props2.contentClassName,\n          delay = _props2.delay,\n          duration = _props2.duration,\n          easing = _props2.easing,\n          id = _props2.id,\n          style = _props2.style;\n      var _state = this.state,\n          height = _state.height,\n          overflow = _state.overflow,\n          animationStateClasses = _state.animationStateClasses,\n          shouldUseTransitions = _state.shouldUseTransitions;\n\n\n      var componentStyle = _extends({}, style, {\n        height: height,\n        overflow: overflow || style.overflow\n      });\n\n      if (shouldUseTransitions && applyInlineTransitions) {\n        componentStyle.transition = 'height ' + duration + 'ms ' + easing + ' ' + delay + 'ms';\n\n        // Include transition passed through styles\n        if (style.transition) {\n          componentStyle.transition = style.transition + ', ' + componentStyle.transition;\n        }\n\n        // Add webkit vendor prefix still used by opera, blackberry...\n        componentStyle.WebkitTransition = componentStyle.transition;\n      }\n\n      var contentStyle = {};\n\n      if (animateOpacity) {\n        contentStyle.transition = 'opacity ' + duration + 'ms ' + easing + ' ' + delay + 'ms';\n        // Add webkit vendor prefix still used by opera, blackberry...\n        contentStyle.WebkitTransition = contentStyle.transition;\n\n        if (height === 0) {\n          contentStyle.opacity = 0;\n        }\n      }\n\n      var componentClasses = (0, _classnames2.default)((_cx3 = {}, _defineProperty(_cx3, animationStateClasses, true), _defineProperty(_cx3, className, className), _cx3));\n\n      // Check if user passed aria-hidden prop\n      var hasAriaHiddenProp = typeof this.props['aria-hidden'] !== 'undefined';\n      var ariaHidden = hasAriaHiddenProp ? this.props['aria-hidden'] : height === 0;\n\n      return _react2.default.createElement(\n        'div',\n        _extends({}, omit.apply(undefined, [this.props].concat(PROPS_TO_OMIT)), {\n          'aria-hidden': ariaHidden,\n          className: componentClasses,\n          id: id,\n          style: componentStyle\n        }),\n        _react2.default.createElement(\n          'div',\n          {\n            className: contentClassName,\n            style: contentStyle,\n            ref: function ref(el) {\n              return _this3.contentElement = el;\n            }\n          },\n          children\n        )\n      );\n    }\n  }]);\n\n  return AnimateHeight;\n}(_react2.default.Component);\n\nvar heightPropType = function heightPropType(props, propName, componentName) {\n  var value = props[propName];\n\n  if (typeof value === 'number' && value >= 0 || isPercentage(value) || value === 'auto') {\n    return null;\n  }\n\n  return new TypeError('value \"' + value + '\" of type \"' + (typeof value === 'undefined' ? 'undefined' : _typeof(value)) + '\" is invalid type for ' + propName + ' in ' + componentName + '. ' + 'It needs to be a positive number, string \"auto\" or percentage string (e.g. \"15%\").');\n};\n\nAnimateHeight.propTypes = {\n  'aria-hidden': _propTypes2.default.bool,\n  animateOpacity: _propTypes2.default.bool,\n  animationStateClasses: _propTypes2.default.object,\n  applyInlineTransitions: _propTypes2.default.bool,\n  children: _propTypes2.default.any.isRequired,\n  className: _propTypes2.default.string,\n  contentClassName: _propTypes2.default.string,\n  delay: _propTypes2.default.number,\n  duration: _propTypes2.default.number,\n  easing: _propTypes2.default.string,\n  height: heightPropType,\n  id: _propTypes2.default.string,\n  onAnimationEnd: _propTypes2.default.func,\n  onAnimationStart: _propTypes2.default.func,\n  style: _propTypes2.default.object\n};\n\nAnimateHeight.defaultProps = {\n  animateOpacity: false,\n  animationStateClasses: ANIMATION_STATE_CLASSES,\n  applyInlineTransitions: true,\n  duration: 250,\n  delay: 0,\n  easing: 'ease',\n  style: {}\n};\n\nexports.default = AnimateHeight;","import React from 'react';\r\nimport PropTypes from 'prop-types';\r\nimport BaseChart from 'interface/others/BaseChart';\r\n\r\nimport { formatPercentage } from 'common/format';\r\nimport SpellLink from 'common/SpellLink';\r\nimport { TooltipElement } from 'common/Tooltip';\r\n\r\nimport './style.scss';\r\n\r\nclass DonutChart extends React.PureComponent {\r\n  static propTypes = {\r\n    items: PropTypes.arrayOf(PropTypes.shape({\r\n      value: PropTypes.number.isRequired,\r\n      label: PropTypes.node.isRequired,\r\n      color: PropTypes.string.isRequired,\r\n      tooltip: PropTypes.node,\r\n      spellId: PropTypes.number,\r\n      valueTooltip: PropTypes.node,\r\n    })).isRequired,\r\n    // While you could change the chart size, I strongly recommend you do not for consistency and to avoid breaking whenever this component is modified. Do you really need to adjust the size?\r\n    chartSize: PropTypes.number,\r\n    innerRadiusFactor: PropTypes.number,\r\n  };\r\n  static defaultProps = {\r\n    chartSize: 90,\r\n    innerRadiusFactor: 0.28,\r\n  };\r\n\r\n  renderLegend(items) {\r\n    const total = items.reduce((sum, item) => sum + item.value, 0);\r\n\r\n    return (\r\n      <div className=\"legend\">\r\n        {items.map(({ color, label, tooltip, value, spellId, valueTooltip }, index) => {\r\n          label = tooltip ? (\r\n            <TooltipElement content={tooltip}>{label}</TooltipElement>\r\n          ) : label;\r\n          label = spellId ? (\r\n            <SpellLink id={spellId}>{label}</SpellLink>\r\n          ) : label;\r\n          return (\r\n            <div key={index} className=\"flex\">\r\n              <div className=\"flex-sub\">\r\n                <div className=\"circle\" style={{ background: color }} />\r\n              </div>\r\n              <div className=\"flex-main\">\r\n                {label}\r\n              </div>\r\n              <div className=\"flex-sub\">\r\n                <TooltipElement content={valueTooltip ? valueTooltip : value}>\r\n                  {formatPercentage(value / total, 0)}%\r\n                </TooltipElement>\r\n              </div>\r\n            </div>\r\n          );\r\n        })}\r\n      </div>\r\n    );\r\n  }\r\n  renderChart(items, chartSize, innerRadiusFactor) {\r\n    const innerRadius = chartSize * innerRadiusFactor;\r\n\r\n    const data = {\r\n      items,\r\n    };\r\n    const spec = {\r\n      data: {\r\n        name: 'items',\r\n      },\r\n      mark: {\r\n        type: 'arc',\r\n        innerRadius,\r\n      },\r\n      encoding: {\r\n        theta: {\r\n          field: 'value',\r\n          type: 'quantitative',\r\n        },\r\n        color: {\r\n          field: 'label',\r\n          type: 'nominal',\r\n          legend: null,\r\n          scale: {\r\n            domain: items.map(({label}) => label),\r\n            range: items.map(({color}) => color),\r\n          },\r\n        },\r\n      },\r\n      view: {\r\n        stroke: null,\r\n      },\r\n    };\r\n    return (\r\n      <div className=\"chart\">\r\n        <BaseChart\r\n          width={chartSize}\r\n          height={chartSize}\r\n          spec={spec}\r\n          data={data}\r\n        />\r\n      </div>\r\n    );\r\n  }\r\n  render() {\r\n    const { items, chartSize, innerRadiusFactor } = this.props;\r\n\r\n    return (\r\n      <div className=\"donut-chart\">\r\n        {this.renderLegend(items)}\r\n        {this.renderChart(items, chartSize, innerRadiusFactor)}\r\n      </div>\r\n    );\r\n  }\r\n}\r\n\r\nexport default DonutChart;\r\n","import React from 'react';\r\nimport PropTypes from 'prop-types';\r\n\r\nimport { TooltipElement } from 'common/Tooltip';\r\n\r\nimport './StatisticBox.css';\r\nimport STATISTIC_CATEGORY from './STATISTIC_CATEGORY';\r\n\r\nexport { default as STATISTIC_ORDER } from './STATISTIC_ORDER';\r\n\r\n/**\r\n * @deprecated Use `interface/statistic/Statistic` instead.\r\n */\r\nconst StatisticsListBox = ({ title, tooltip, children, bodyStyle, ...others }) => {\r\n  delete others.category;\r\n  delete others.position;\r\n  return (\r\n    <div className=\"col-lg-3 col-md-4 col-sm-6 col-xs-12\">\r\n      <div className=\"panel statistic statistic-box statistic-box-list\" {...others}>\r\n        {title && (\r\n          <div className=\"panel-heading\">\r\n            <h2>{tooltip ? <TooltipElement content={tooltip}>{title}</TooltipElement> : title}</h2>\r\n          </div>\r\n        )}\r\n        <div className=\"panel-body items\" style={bodyStyle}>\r\n          {children}\r\n        </div>\r\n      </div>\r\n    </div>\r\n  );\r\n};\r\nStatisticsListBox.propTypes = {\r\n  title: PropTypes.node,\r\n  children: PropTypes.node.isRequired,\r\n  tooltip: PropTypes.node,\r\n  bodyStyle: PropTypes.object,\r\n  category: PropTypes.string,\r\n  position: PropTypes.number,\r\n};\r\nStatisticsListBox.defaultProps = {\r\n  category: STATISTIC_CATEGORY.GENERAL,\r\n};\r\n\r\nexport default StatisticsListBox;\r\n","/**\r\n * A simple component that shows the spell icon left and a value right.\r\n * Use this only for things that the player certainly should be familiar with, such as their own spells.\r\n * Do NOT use for items or azerite powers.\r\n */\r\nimport React from 'react';\r\n\r\nimport SpellIcon from 'common/SpellIcon';\r\n\r\nimport '../BoringValue.scss';\r\nimport Spell from 'common/SPELLS/Spell';\r\n\r\ntype Props = {\r\n  spell: Spell;\r\n  value: React.ReactNode;\r\n  label: React.ReactNode;\r\n  extra?: React.ReactNode;\r\n  className?: string;\r\n}\r\n\r\nconst BoringSpellValue = ({ spell, value, label, extra, className }: Props) => (\r\n  <div className={`flex boring-value ${className || ''}`}>\r\n    <div className=\"flex-sub icon\">\r\n      <SpellIcon id={spell.id} />\r\n    </div>\r\n    <div className=\"flex-main value\">\r\n      <div>{value}</div>\r\n      <small>{label}</small>\r\n      {extra}\r\n    </div>\r\n  </div>\r\n);\r\n\r\nexport default BoringSpellValue;\r\n","import React from 'react';\r\nimport PropTypes from 'prop-types';\r\n\r\nimport StatisticBox from './StatisticBox';\r\n\r\nexport { STATISTIC_ORDER } from './StatisticBox';\r\n\r\n/**\r\n * @deprecated Use `interface/statistic/Statistic` instead.\r\n */\r\nclass LazyLoadStatisticBox extends React.PureComponent {\r\n  static propTypes = {\r\n    loader: PropTypes.func.isRequired,\r\n    value: PropTypes.node.isRequired,\r\n    children: PropTypes.node,\r\n  };\r\n  static contextTypes = {\r\n    updateResults: PropTypes.func.isRequired,\r\n  };\r\n\r\n  constructor() {\r\n    super();\r\n    this.state = {\r\n      loaded: false,\r\n      loading: false,\r\n    };\r\n    this.handleClick = this.handleClick.bind(this);\r\n  }\r\n\r\n  handleClick() {\r\n    if (this.state.loaded) {\r\n      return;\r\n    }\r\n\r\n    this.setState({\r\n      loading: true,\r\n    });\r\n    this.props.loader().then((result) => {\r\n      this.setState({\r\n        loading: false,\r\n        loaded: true,\r\n      });\r\n      this.context.updateResults();\r\n      return result;\r\n    });\r\n  }\r\n\r\n  render() {\r\n    const { value, children, ...others } = this.props;\r\n    delete others.loader;\r\n    delete others.children;\r\n\r\n    return (\r\n      <StatisticBox\r\n        onClick={this.handleClick}\r\n        value={this.state.loaded ? value : (this.state.loading ? 'Loading...' : 'Click to load')}\r\n        style={{ cursor: this.state.loaded ? undefined : 'pointer' }}\r\n        {...others}\r\n      >\r\n        {this.state.loaded ? children : null}\r\n      </StatisticBox>\r\n    );\r\n  }\r\n}\r\n\r\nexport default LazyLoadStatisticBox;\r\n","import EventsNormalizer from 'parser/core/EventsNormalizer';\r\n\r\nimport SPELLS from 'common/SPELLS';\r\nimport { EventType } from 'parser/core/Events';\r\n\r\nclass ShadowfiendNormalizer extends EventsNormalizer {\r\n\r\n  normalize(events) {\r\n    events.forEach((event, eventIndex) => {\r\n      if (event.type === EventType.Cast) {\r\n        const spellId = event.ability.guid;\r\n        if (spellId === SPELLS.SHADOWFIEND_WITH_GLYPH_OF_THE_SHA.id || spellId === SPELLS.LIGHTSPAWN.id || spellId === SPELLS.VOIDLING.id) {\r\n          event.ability.oldGuid = event.ability.guid;\r\n          event.ability.guid = SPELLS.SHADOWFIEND.id;\r\n          event.__modified = true;\r\n        }\r\n      }\r\n    });\r\n    return events;\r\n  }\r\n}\r\n\r\nexport default ShadowfiendNormalizer;\r\n"],"sourceRoot":""}