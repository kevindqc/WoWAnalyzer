{"version":3,"sources":["parser/druid/balance/modules/core/Haste.js","parser/druid/balance/modules/core/GlobalCooldown.js","parser/druid/balance/normalizers/EmpowermentNormalizer.js","parser/druid/balance/normalizers/LunarEmpowermentNormalizer.js","parser/druid/balance/normalizers/SolarEmpowermentNormalizer.js","parser/druid/balance/modules/features/CancelledCasts.js","parser/druid/balance/modules/features/AlwaysBeCasting.js","parser/druid/balance/modules/features/MoonfireUptime.js","parser/druid/balance/modules/features/SunfireUptime.js","parser/druid/balance/modules/talents/StellarFlareUptime.js","parser/druid/balance/modules/features/Empowerment.js","parser/druid/balance/modules/features/LunarEmpowerment.js","parser/druid/balance/modules/features/SolarEmpowerment.js","parser/druid/balance/modules/features/EarlyDotRefreshes.js","parser/shared/modules/earlydotrefreshes/EarlyDotRefreshesInstants.js","parser/shared/modules/earlydotrefreshes/EarlyDotRefreshesInstantsSuggestion.js","parser/druid/balance/modules/features/EarlyDotRefreshesInstants.js","parser/druid/balance/modules/resourcetracker/AstralPowerTracker.js","parser/druid/balance/modules/resourcetracker/AstralPowerDetails.js","parser/druid/balance/modules/features/Checklist/Component.js","parser/druid/balance/modules/features/Checklist/Module.js","parser/druid/balance/modules/Abilities.js","parser/druid/balance/modules/features/CooldownThroughputTracker.js","parser/druid/balance/modules/features/UnempoweredLunarStrike.js","parser/druid/balance/modules/talents/TwinMoons.js","parser/druid/balance/modules/talents/StellarDrift.js","parser/druid/balance/modules/talents/Starlord.js","parser/druid/balance/CombatLogParser.js","parser/core/calculateEffectiveDamage.js","interface/icons/Uptime.js","interface/statistics/components/BoringValueText/index.tsx","parser/shared/modules/helpers/Stacks.tsx","parser/shared/modules/CancelledCasts.tsx","parser/shared/modules/earlydotrefreshes/EarlyDotRefreshes.js","parser/shared/modules/earlydotrefreshes/EarlyDotRefreshesSuggestionByCount.js"],"names":["Haste","CoreHaste","HASTE_BUFFS","SPELLS","STARLORD","id","hastePerStack","INCARNATION_CHOSEN_OF_ELUNE_TALENT","CELESTIAL_ALIGNMENT","GlobalCooldown","spellId","gcd","SOLAR_WRATH_MOONKIN","this","selectedCombatant","hasBuff","SOLAR_EMP_BUFF","LUNAR_STRIKE","LUNAR_EMP_BUFF","Math","max","NEW_MOON_TALENT","CoreGlobalCooldown","EmpowermentNormalizer","empowermentBuff","events","fixedEvents","forEach","event","eventIndex","push","type","EventType","Cast","ability","guid","STARSURGE_MOONKIN","castTimestamp","timestamp","previousEventIndex","previousEvent","ApplyBuff","ApplyBuffStack","splice","__modified","EventsNormalizer","LunarEmpowermentNormalizer","args","SolarEmpowermentNormalizer","CancelledCasts","statisticOrder","STATISTIC_ORDER","CORE","when","suggestionThresholds","addSuggestion","suggest","actual","recommended","formatPercentage","icon","i18n","_","castsCancelled","totalCasts","isGreaterThan","minor","average","major","style","CoreCancelledCasts","AlwaysBeCasting","downtimePercentage","CoreAlwaysBeCasting","MoonfireUptime","SpellLink","MOONFIRE_BEAR","moonfireUptime","enemies","getBuffUptime","owner","fightDuration","Statistic","position","size","BoringSpellValueText","spell","Uptime","isLessThan","Analyzer","dependencies","Enemies","SunfireUptime","SUNFIRE","sunfireUptime","StellarFlareUptime","OPTIONAL","active","hasTalent","STELLAR_FLARE_TALENT","stellarFlareUptime","Empowerment","options","empoweredSpell","empowermentPrefix","spellGenerateAmount","resource","RESOURCE_TYPES","ASTRAL_POWER","wasted","generated","addEventListener","Events","cast","by","SELECTED_PLAYER","onCast","applybuff","to","onApplyBuff","applybuffstack","onApplyBuffStack","wastedPercentage","buff","getBuff","stacks","suggestionThresholdsInverted","tooltip","name","label","SpellIcon","LunarEmpowerment","SolarEmpowerment","DOTS","debuffId","castId","duration","EarlyDotRefreshes","count","casts","badCasts","badCastsPercent","suggestionThresholdsStellarFlare","EarlyDotRefreshesCore","dots","EarlyDotRefreshesInstants","dot","text","movedSinceCast","castWhileMovingBuffName","couldCastWhileMoving","lastCast","betterFillers","betterFillersAvailable","length","fillers","i","timeSinceCast","lastGCD","timeSinceLastMovement","distanceMoved","castEvent","endEvent","constructor","filter","targets","encodeTargetString","targetID","targetInstance","DistanceMoved","suggestion","MOONFIRE","movementFiller","SUNFIRE_CAST","STELLAR_DRIFT","suggestionThresholdsMoonfire","suggestionThresholdsSunfire","CoreEarlyDotRefreshesInstants","statTracker","StatTracker","AstralPowerTracker","WARRIOR_OF_ELUNE_TALENT","resourceChangeType","gain","resourceChange","eluneRaw","eluneWaste","min","waste","baseWaste","baseGain","eluneGain","_applyBuilder","getResource","cost","STARFALL_CAST","SOUL_OF_THE_FOREST_TALENT_BALANCE","ResourceTracker","AstralPowerDetails","suggestionThresholdsWasted","total","BoringResourceValue","value","wastedPercent","title","url","render","Panel","ResourceBreakdown","tracker","astralPowerTracker","showSpenders","BalanceDruidChecklist","combatant","castEfficiency","thresholds","AbilityRequirement","props","GenericCastEfficiencyRequirement","getCastEfficiencyForSpellId","Rule","description","Requirement","downtime","cancelledCasts","moonfireRefresh","sunfireRefresh","stellarFlareRefresh","astralPowerEfficiency","solarEmpowermentEfficiency","lunarEmpowermentEfficiency","FORCE_OF_NATURE_TALENT","FURY_OF_ELUNE_TALENT","INNERVATE","BARKSKIN","RENEWAL_TALENT","PreparationRule","Checklist","Component","combatants","selected","preparationRuleAnalyzer","alwaysBeCasting","earlyDotRefreshesInstants","suggestionThresholdsMoonfireEfficiency","suggestionThresholdsSunfireEfficiency","earlyDotRefreshes","suggestionThresholdsStellarFlareEfficiency","astralPowerDetails","solarEmpowerment","lunarEmpowerment","BaseModule","Combatants","CastEfficiency","PreparationRuleAnalyzer","Abilities","category","SPELL_CATEGORIES","ROTATIONAL","base","timelineSortIndex","buffSpellId","enabled","COOLDOWNS","cooldown","recommendedEfficiency","HALF_MOON","FULL_MOON","charges","averageIssueEfficiency","majorIssueEfficiency","extraSuggestion","UTILITY","DEFENSIVE","importance","ISSUE_IMPORTANCE","MINOR","TIGER_DASH_TALENT","WILD_CHARGE_TALENT","WILD_CHARGE_MOONKIN","WILD_CHARGE_CAT","WILD_CHARGE_BEAR","WILD_CHARGE_TRAVEL","MIGHTY_BASH_TALENT","MASS_ENTANGLEMENT_TALENT","TYPHOON","TYPHOON_TALENT","ENTANGLING_ROOTS","DASH","SOLAR_BEAM","REMOVE_CORRUPTION","REBIRTH","GROWL","BEAR_FORM","CAT_FORM","MOONKIN_FORM","TRAVEL_FORM","REGROWTH","FRENZIED_REGENERATION","GUARDIAN_AFFINITY_TALENT_SHARED","SWIFTMEND","RESTORATION_AFFINITY_TALENT","REJUVENATION","WILD_GROWTH","HIBERNATE","SOOTHE","CoreAbilities","CooldownThroughputTracker","CoreCooldownThroughputTracker","cooldownSpells","summary","BUILT_IN_SUMMARY_TYPES","DAMAGE","UnempoweredLunarStrike","lastCastBuffed","hits","damage","onDamage","fightend","onFightend","badCastsPerMinute","meta","isInefficientCast","inefficientCastReason","checkCast","OWLKIN_FRENZY","SOLAR_WRATH","toFixed","TwinMoons","moonfireCasts","moonfireHits","TWIN_MOONS_TALENT","tick","percentTwoHits","StellarDrift","bonusDamage","STELLAR_DRIFT_TALENT","STARFALL","getPercentageOfTotalDamageDone","calculateEffectiveDamage","formatNumber","perSecond","damagePercent","Starlord","buffStacks","lastStacks","lastUpdate","fight","start_time","STARLORD_TALENT","Array","from","MAX_STACKS","x","handleStacks","removebuff","removebuffstack","avgStacks","elem","index","reduce","a","b","FightEnd","currentStacks","dropdown","className","map","e","key","formatDuration","averageHaste","CombatLogParser","MainCombatLogParser","specModules","haste","globalCooldown","lunarEmpowermentNormalizer","solarEmpowermentNormalizer","checklist","abilities","cooldownThroughputTracker","unempoweredLunarStrike","twinMoons","stellarDrift","starlord","increase","raw","amount","absorbed","Icon","other","xmlns","viewBox","d","BoringValue","children","RemoveBuff","RemoveDebuff","ApplyDebuff","RemoveBuffStack","ApplyDebuffStack","RemoveDebuffStack","stack","Error","castsFinished","beginCastSpell","undefined","wasCastStarted","cancelledSpellList","IGNORED_ABILITIES","begincast","onBeginCast","includes","CASTS_THAT_ARENT_CASTS","CASTABLE_WHILE_CASTING_SPELLS","addToCancelledList","beginCastAbility","cancelledPercentage","ThresholdStyle","PERCENTAGE","lastCastGoodExtension","lastCastMinWaste","Number","MAX_SAFE_INTEGER","lastCastMaxEffect","addedDuration","wastedDuration","refreshdebuff","onRefreshDebuff","applydebuff","onApplyDebuff","onGCD","getDot","extensionInfo","extendDot","effective","getDotByCast","checkLastCast","afterLastCastSet","lastCastBuffer","isLastCastBad","getLastBadCastText","addBadCast","find","element","extension","newDuration","maxDuration","lostDuration","abilityTracker","getAbility","avg","badCastsEffectivePercent","AbilityTracker"],"mappings":"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","file":"static/js/BalanceDruid.c00320bb.chunk.js","sourcesContent":["import SPELLS from 'common/SPELLS';\r\n\r\nimport CoreHaste from 'parser/shared/modules/Haste';\r\n\r\nclass Haste extends CoreHaste {\r\n  static HASTE_BUFFS = {\r\n    ...CoreHaste.HASTE_BUFFS,\r\n    // Moonkin specific\r\n    [SPELLS.STARLORD.id]: {\r\n      hastePerStack: 0.03,\r\n    },\r\n    [SPELLS.INCARNATION_CHOSEN_OF_ELUNE_TALENT.id]: 0.15,\r\n    [SPELLS.CELESTIAL_ALIGNMENT.id]: 0.15,\r\n  };\r\n}\r\n\r\nexport default Haste;\r\n","import SPELLS from 'common/SPELLS';\r\nimport CoreGlobalCooldown from 'parser/shared/modules/GlobalCooldown';\r\n\r\nconst STARLORD_MULTIPLIER = 0.85;\r\nconst NEW_MOON_MULTIPLIER = 2 / 3;\r\n\r\n/**\r\n * The talent Starlord reduces GCD and cast time of empowered Lunar Strikes and Solar Wraths by 20%.\r\n * Since Solar Wrath cast time == GCD the GCD needs to be reduced.\r\n */\r\nclass GlobalCooldown extends CoreGlobalCooldown {\r\n  getGlobalCooldownDuration(spellId) {\r\n    const gcd = super.getGlobalCooldownDuration(spellId);\r\n    if ((spellId === SPELLS.SOLAR_WRATH_MOONKIN.id && this.selectedCombatant.hasBuff(SPELLS.SOLAR_EMP_BUFF.id))\r\n      || (spellId === SPELLS.LUNAR_STRIKE.id && this.selectedCombatant.hasBuff(SPELLS.LUNAR_EMP_BUFF.id))) {\r\n      return Math.max(gcd * STARLORD_MULTIPLIER, 750);\r\n    }\r\n    if (spellId === SPELLS.NEW_MOON_TALENT.id) {\r\n      return Math.max(gcd * NEW_MOON_MULTIPLIER, 750); // New Moon GCD is 1s reduced by haste but Half Moon and Full Moon are both 1.5s\r\n    }\r\n    return gcd;\r\n  }\r\n}\r\n\r\nexport default GlobalCooldown;\r\n","import SPELLS from 'common/SPELLS';\r\nimport EventsNormalizer from 'parser/core/EventsNormalizer';\r\nimport { EventType } from 'parser/core/Events';\r\n\r\nconst CAST_WINDOW = 100;\r\n\r\n/**\r\n * Abstract class used by Solar Empowerment and Lunar Empowerment.\r\n * Always place the empowerment buff after the Starsurge cast that generated them in the combatlog.\r\n *\r\n * @param {Array} events\r\n * @returns {Array} Events possibly with some reordered.\r\n */\r\nclass EmpowermentNormalizer extends EventsNormalizer {\r\n\r\n  empowermentBuff = null;\r\n\r\n  normalize(events) {\r\n    const fixedEvents = [];\r\n    events.forEach((event, eventIndex) => {\r\n      fixedEvents.push(event);\r\n\r\n      // find a cast event for Starsurge\r\n      if (event.type === EventType.Cast && event.ability.guid === SPELLS.STARSURGE_MOONKIN.id) {\r\n        const castTimestamp = event.timestamp;\r\n\r\n        // look for matching recent applybuff or applybuffstack\r\n        for (let previousEventIndex = eventIndex; previousEventIndex >= 0; previousEventIndex -= 1) {\r\n          const previousEvent = fixedEvents[previousEventIndex];\r\n          if ((castTimestamp - previousEvent.timestamp) > CAST_WINDOW) {\r\n            break;\r\n          }\r\n          if ((previousEvent.type === EventType.ApplyBuff || previousEvent.type === EventType.ApplyBuffStack) &&\r\n            previousEvent.ability.guid === this.empowermentBuff.id) {\r\n            fixedEvents.splice(previousEventIndex, 1);\r\n            fixedEvents.push(previousEvent);\r\n            previousEvent.__modified = true;\r\n            break;\r\n          }\r\n        }\r\n      }\r\n    });\r\n\r\n    return fixedEvents;\r\n  }\r\n}\r\n\r\nexport default EmpowermentNormalizer;\r\n","import SPELLS from 'common/SPELLS';\r\n\r\nimport EmpowermentNormalizer from './EmpowermentNormalizer';\r\n\r\nclass LunarEmpowermentNormalizer extends EmpowermentNormalizer {\r\n\r\n  constructor(...args) {\r\n    super(...args);\r\n    this.empowermentBuff = SPELLS.LUNAR_EMP_BUFF;\r\n  }\r\n\r\n}\r\n\r\nexport default LunarEmpowermentNormalizer;\r\n","import SPELLS from 'common/SPELLS';\r\n\r\nimport EmpowermentNormalizer from './EmpowermentNormalizer';\r\n\r\nclass SolarEmpowermentNormalizer extends EmpowermentNormalizer {\r\n\r\n  constructor(...args) {\r\n    super(...args);\r\n    this.empowermentBuff = SPELLS.SOLAR_EMP_BUFF;\r\n  }\r\n\r\n}\r\n\r\nexport default SolarEmpowermentNormalizer;\r\n","import CoreCancelledCasts from 'parser/shared/modules/CancelledCasts';\r\nimport { formatPercentage } from 'common/format';\r\nimport { STATISTIC_ORDER } from 'interface/others/StatisticBox';\r\nimport { i18n } from '@lingui/core';\r\nimport { t } from '@lingui/macro';\r\n\r\nclass CancelledCasts extends CoreCancelledCasts {\r\n  get suggestionThresholds() {\r\n    return {\r\n      actual: this.castsCancelled / this.totalCasts,\r\n      isGreaterThan: {\r\n        minor: 0.05,\r\n        average: 0.075,\r\n        major: 0.1,\r\n      },\r\n      style: 'percentage',\r\n    };\r\n  }\r\n\r\n  statisticOrder = STATISTIC_ORDER.CORE(8);\r\n\r\n  suggestions(when) {\r\n    when(this.suggestionThresholds).addSuggestion((suggest, actual, recommended) => suggest(`You cancelled ${formatPercentage(actual)}% of your spells. While it is expected that you will have to cancel a few casts to react to a boss mechanic or to move, you should try to ensure that you are cancelling as few casts as possible.`)\r\n      .icon('inv_misc_map_01')\r\n      .actual(i18n._(t('druid.balance.suggestions.castsCancelled')`${formatPercentage(actual)}% casts cancelled`))\r\n      .recommended(`<${formatPercentage(recommended)}% is recommended`));\r\n  }\r\n}\r\n\r\nexport default CancelledCasts;\r\n","import { formatPercentage } from 'common/format';\r\nimport { STATISTIC_ORDER } from 'interface/others/StatisticBox';\r\n\r\nimport CoreAlwaysBeCasting from 'parser/shared/modules/AlwaysBeCasting';\r\nimport { i18n } from '@lingui/core';\r\nimport { t } from '@lingui/macro';\r\n\r\nclass AlwaysBeCasting extends CoreAlwaysBeCasting {\r\n  get suggestionThresholds() {\r\n    return {\r\n      actual: this.downtimePercentage,\r\n      isGreaterThan: {\r\n        minor: 0.05,\r\n        average: 0.075,\r\n        major: 0.1,\r\n      },\r\n      style: 'percentage',\r\n    };\r\n  }\r\n\r\n  statisticOrder = STATISTIC_ORDER.CORE(4);\r\n\r\n  suggestions(when) {\r\n    when(this.suggestionThresholds).addSuggestion((suggest, actual, recommended) => suggest('Your downtime can be improved. Try to Always Be Casting (ABC)...')\r\n      .icon('spell_mage_altertime')\r\n      .actual(i18n._(t('druid.balance.suggestions.alwaysBeCasting.downtime')`${formatPercentage(actual)}% downtime`))\r\n      .recommended(`${formatPercentage(recommended)}% or less is recommended`));\r\n  }\r\n}\r\n\r\nexport default AlwaysBeCasting;\r\n","import React from 'react';\r\n\r\nimport Analyzer from 'parser/core/Analyzer';\r\nimport Enemies from 'parser/shared/modules/Enemies';\r\n\r\nimport SpellLink from 'common/SpellLink';\r\nimport SPELLS from 'common/SPELLS';\r\nimport { formatPercentage } from 'common/format';\r\nimport STATISTIC_ORDER from 'interface/others/STATISTIC_ORDER';\r\nimport Statistic from 'interface/statistics/Statistic';\r\nimport BoringSpellValueText from 'interface/statistics/components/BoringSpellValueText';\r\nimport UptimeIcon from 'interface/icons/Uptime';\r\nimport { i18n } from '@lingui/core';\r\nimport { t } from '@lingui/macro';\r\n\r\nclass MoonfireUptime extends Analyzer {\r\n  get suggestionThresholds() {\r\n    const moonfireUptime = this.enemies.getBuffUptime(SPELLS.MOONFIRE_BEAR.id) / this.owner.fightDuration;\r\n    return {\r\n      actual: moonfireUptime,\r\n      isLessThan: {\r\n        minor: 0.95,\r\n        average: 0.9,\r\n        major: 0.8,\r\n      },\r\n      style: 'percentage',\r\n    };\r\n  }\r\n\r\n  static dependencies = {\r\n    enemies: Enemies,\r\n  };\r\n  statisticOrder = STATISTIC_ORDER.CORE(4);\r\n\r\n  suggestions(when) {\r\n    when(this.suggestionThresholds).addSuggestion((suggest, actual, recommended) => suggest(<>Your <SpellLink id={SPELLS.MOONFIRE_BEAR.id} /> uptime can be improved. Try to pay more attention to your Moonfire on the boss.</>)\r\n      .icon(SPELLS.MOONFIRE_BEAR.icon)\r\n      .actual(i18n._(t('druid.balance.suggestions.moonfire.uptime')`${formatPercentage(actual)}% Moonfire uptime`))\r\n      .recommended(`>${formatPercentage(recommended)}% is recommended`));\r\n  }\r\n\r\n  statistic() {\r\n    const moonfireUptime = this.enemies.getBuffUptime(SPELLS.MOONFIRE_BEAR.id) / this.owner.fightDuration;\r\n    return (\r\n      <Statistic\r\n        position={STATISTIC_ORDER.CORE(4)}\r\n        size=\"flexible\"\r\n      >\r\n        <BoringSpellValueText spell={SPELLS.MOONFIRE_BEAR}>\r\n          <>\r\n            <UptimeIcon /> {formatPercentage(moonfireUptime)} % <small>uptime</small>\r\n          </>\r\n        </BoringSpellValueText>\r\n      </Statistic>\r\n    );\r\n  }\r\n}\r\n\r\nexport default MoonfireUptime;\r\n","import React from 'react';\r\n\r\nimport Analyzer from 'parser/core/Analyzer';\r\nimport Enemies from 'parser/shared/modules/Enemies';\r\n\r\nimport SpellLink from 'common/SpellLink';\r\nimport SPELLS from 'common/SPELLS';\r\nimport { formatPercentage } from 'common/format';\r\nimport STATISTIC_ORDER from 'interface/others/STATISTIC_ORDER';\r\nimport Statistic from 'interface/statistics/Statistic';\r\nimport BoringSpellValueText from 'interface/statistics/components/BoringSpellValueText';\r\nimport UptimeIcon from 'interface/icons/Uptime';\r\nimport { i18n } from '@lingui/core';\r\nimport { t } from '@lingui/macro';\r\n\r\nclass SunfireUptime extends Analyzer {\r\n  get suggestionThresholds() {\r\n    const sunfireUptime = this.enemies.getBuffUptime(SPELLS.SUNFIRE.id) / this.owner.fightDuration;\r\n    return {\r\n      actual: sunfireUptime,\r\n      isLessThan: {\r\n        minor: 0.95,\r\n        average: 0.9,\r\n        major: 0.8,\r\n      },\r\n      style: 'percentage',\r\n    };\r\n  }\r\n\r\n  static dependencies = {\r\n    enemies: Enemies,\r\n  };\r\n  statisticOrder = STATISTIC_ORDER.CORE(7);\r\n\r\n  suggestions(when) {\r\n    when(this.suggestionThresholds).addSuggestion((suggest, actual, recommended) => suggest(<>Your <SpellLink id={SPELLS.SUNFIRE.id} /> uptime can be improved. Try to pay more attention to your Sunfire on the boss.</>)\r\n      .icon(SPELLS.SUNFIRE.icon)\r\n      .actual(i18n._(t('druid.balance.suggestions.sunfire.uptime')`${formatPercentage(actual)}% Sunfire uptime`))\r\n      .recommended(`>${formatPercentage(recommended)}% is recommended`));\r\n  }\r\n\r\n  statistic() {\r\n    const sunfireUptime = this.enemies.getBuffUptime(SPELLS.SUNFIRE.id) / this.owner.fightDuration;\r\n    return (\r\n      <Statistic\r\n        position={STATISTIC_ORDER.CORE(4)}\r\n        size=\"flexible\"\r\n      >\r\n        <BoringSpellValueText spell={SPELLS.SUNFIRE}>\r\n          <>\r\n            <UptimeIcon /> {formatPercentage(sunfireUptime)} % <small>uptime</small>\r\n          </>\r\n        </BoringSpellValueText>\r\n\r\n      </Statistic>\r\n    );\r\n  }\r\n}\r\n\r\nexport default SunfireUptime;\r\n","import React from 'react';\r\n\r\nimport Analyzer from 'parser/core/Analyzer';\r\nimport Enemies from 'parser/shared/modules/Enemies';\r\n\r\nimport SpellLink from 'common/SpellLink';\r\nimport SPELLS from 'common/SPELLS';\r\nimport { formatPercentage } from 'common/format';\r\nimport { i18n } from '@lingui/core';\r\nimport { t } from '@lingui/macro';\r\n\r\nimport STATISTIC_ORDER from 'interface/others/STATISTIC_ORDER';\r\nimport Statistic from 'interface/statistics/Statistic';\r\nimport BoringSpellValueText from 'interface/statistics/components/BoringSpellValueText';\r\nimport UptimeIcon from 'interface/icons/Uptime';\r\n\r\nclass StellarFlareUptime extends Analyzer {\r\n  get suggestionThresholds() {\r\n    const stellarFlareUptime = this.enemies.getBuffUptime(SPELLS.STELLAR_FLARE_TALENT.id) / this.owner.fightDuration;\r\n    return {\r\n      actual: stellarFlareUptime,\r\n      isLessThan: {\r\n        minor: 0.95,\r\n        average: 0.9,\r\n        major: 0.8,\r\n      },\r\n      style: 'percentage',\r\n    };\r\n  }\r\n\r\n  static dependencies = {\r\n    enemies: Enemies,\r\n  };\r\n  statisticOrder = STATISTIC_ORDER.OPTIONAL();\r\n\r\n  constructor(...args) {\r\n    super(...args);\r\n    this.active = this.selectedCombatant.hasTalent(SPELLS.STELLAR_FLARE_TALENT.id);\r\n  }\r\n\r\n  suggestions(when) {\r\n    when(this.suggestionThresholds).addSuggestion((suggest, actual, recommended) => suggest(<>Your <SpellLink id={SPELLS.STELLAR_FLARE_TALENT.id} /> uptime can be improved. Try to pay more attention to your Stellar Flare on the boss.</>)\r\n      .icon(SPELLS.STELLAR_FLARE_TALENT.icon)\r\n      .actual(i18n._(t('druid.balance.suggestions.stellarFlare.uptime')`${formatPercentage(actual)}% Stellar Flare uptime`))\r\n      .recommended(`>${formatPercentage(recommended)}% is recommended`));\r\n  }\r\n\r\n  statistic() {\r\n    const stellarFlareUptime = this.enemies.getBuffUptime(SPELLS.STELLAR_FLARE_TALENT.id) / this.owner.fightDuration;\r\n    return (\r\n      <Statistic\r\n        position={STATISTIC_ORDER.CORE(7)}\r\n        size=\"flexible\"\r\n      >\r\n        <BoringSpellValueText spell={SPELLS.STELLAR_FLARE_TALENT}>\r\n          <>\r\n            <UptimeIcon /> {formatPercentage(stellarFlareUptime)} % <small>uptime</small>\r\n          </>\r\n        </BoringSpellValueText>\r\n      </Statistic>\r\n    );\r\n  }\r\n}\r\n\r\nexport default StellarFlareUptime;\r\n","import React from 'react';\r\nimport SPELLS from 'common/SPELLS';\r\nimport SpellLink from 'common/SpellLink';\r\nimport { formatPercentage } from 'common/format';\r\nimport RESOURCE_TYPES from 'game/RESOURCE_TYPES';\r\nimport STATISTIC_ORDER from 'interface/others/STATISTIC_ORDER';\r\nimport Statistic from 'interface/statistics/Statistic';\r\nimport Analyzer, { SELECTED_PLAYER } from 'parser/core/Analyzer';\r\nimport Events from 'parser/core/Events';\r\nimport { i18n } from '@lingui/core';\r\nimport { t } from '@lingui/macro';\r\nimport BoringValue from 'interface/statistics/components/BoringValueText';\r\nimport SpellIcon from 'common/SpellIcon';\r\n\r\n// Abstract class used for lunar & solar empowerments.\r\nclass Empowerment extends Analyzer {\r\n  get wastedPercentage() {\r\n    return this.wasted / this.generated;\r\n  }\r\n\r\n  get suggestionThresholds() {\r\n    return {\r\n      actual: 1 - this.wastedPercentage,\r\n      isLessThan: {\r\n        minor: 0.98,\r\n        average: 0.95,\r\n        major: 0.9,\r\n      },\r\n      style: 'percentage',\r\n    };\r\n  }\r\n\r\n  get suggestionThresholdsInverted() {\r\n    return {\r\n      actual: this.wastedPercentage,\r\n      isGreaterThan: {\r\n        minor: 0.02,\r\n        average: 0.05,\r\n        major: 0.1,\r\n      },\r\n      style: 'percentage',\r\n    };\r\n  }\r\n\r\n  empowermentBuff = null;\r\n  empoweredSpell = null;\r\n  empowermentPrefix = null;\r\n  spellGenerateAmount = 0;\r\n  icon = null;\r\n  resource = RESOURCE_TYPES.ASTRAL_POWER;\r\n  wasted = 0;\r\n  generated = 0;\r\n\r\n  constructor(options) {\r\n    super(options);\r\n    this.addEventListener(Events.cast.by(SELECTED_PLAYER).spell(SPELLS.STARSURGE_MOONKIN), this.onCast);\r\n    this.addEventListener(Events.applybuff.to(SELECTED_PLAYER).spell(this.empowermentBuff), this.onApplyBuff);\r\n    this.addEventListener(Events.applybuffstack.to(SELECTED_PLAYER).spell(this.empowermentBuff), this.onApplyBuffStack);\r\n  }\r\n\r\n  onCast(event) {\r\n    const buff = this.selectedCombatant.getBuff(this.empowermentBuff.id);\r\n    if (!buff) {\r\n      return;\r\n    }\r\n    if (buff.stacks < 3) { // Did not overcap\r\n      return;\r\n    }\r\n    this.wasted += 1;\r\n    this.generated += 1;\r\n  }\r\n\r\n  onApplyBuff(event) {\r\n    this.generated += 1;\r\n  }\r\n\r\n  onApplyBuffStack(event) {\r\n    this.generated += 1;\r\n  }\r\n\r\n  suggestions(when) {\r\n    when(this.suggestionThresholdsInverted).addSuggestion((suggest, actual, recommended) => suggest(<>You overcapped {this.wasted} {this.empowermentPrefix} Empowerments by casting <SpellLink id={SPELLS.STARSURGE_MOONKIN.id} /> while already at 3 stacks. Try to always spend your empowerments before casting <SpellLink id={SPELLS.STARSURGE_MOONKIN.id} /> if you are not going to overcap Astral Power.</>)\r\n      .icon(this.icon)\r\n      .actual(i18n._(t('druid.balance.suggestions.empowerment.overcapped')`${formatPercentage(actual)}% overcapped ${this.empowermentPrefix} Empowerments`))\r\n      .recommended(`<${formatPercentage(recommended)}% is recommended`));\r\n  }\r\n\r\n  statistic() {\r\n    return (\r\n      <Statistic\r\n        position={STATISTIC_ORDER.CORE(3)}\r\n        size=\"flexible\"\r\n        tooltip={`${this.wasted} out of ${this.generated} ${this.empowermentPrefix} Empowerments wasted. ${this.empowermentPrefix} Empowerment overcapping should never occur when it is possible to cast a ${this.empoweredSpell.name} without overcapping Astral Power.`}\r\n      >\r\n        <BoringValue label={<>Overcapped <SpellIcon id={this.empoweredSpell.id} /> {this.empowermentPrefix} Empowerments </>}>\r\n          <>\r\n            {formatPercentage(this.wastedPercentage)} % <small>wasted</small>\r\n          </>\r\n        </BoringValue>\r\n      </Statistic>\r\n    );\r\n  }\r\n}\r\n\r\nexport default Empowerment;\r\n","import { STATISTIC_ORDER } from 'interface/others/StatisticBox';\r\nimport SPELLS from 'common/SPELLS';\r\n\r\nimport Empowerment from './Empowerment';\r\n\r\nclass LunarEmpowerment extends Empowerment {\r\n\r\n  empowermentBuff = SPELLS.LUNAR_EMP_BUFF;\r\n  statisticOrder = STATISTIC_ORDER.CORE(5);\r\n\r\n  constructor(...args) {\r\n    super(...args);\r\n    this.empoweredSpell = SPELLS.LUNAR_STRIKE;\r\n    this.empowermentPrefix = 'Lunar';\r\n    this.spellGenerateAmount = 12;\r\n    this.icon = 'ability_druid_eclipse';\r\n  }\r\n}\r\n\r\nexport default LunarEmpowerment;\r\n","import { STATISTIC_ORDER } from 'interface/others/StatisticBox';\r\nimport SPELLS from 'common/SPELLS';\r\n\r\nimport Empowerment from './Empowerment';\r\n\r\nclass SolarEmpowerment extends Empowerment {\r\n  empowermentBuff = SPELLS.SOLAR_EMP_BUFF;\r\n  statisticOrder = STATISTIC_ORDER.CORE(6);\r\n\r\n  constructor(...args) {\r\n    super(...args);\r\n    this.empoweredSpell = SPELLS.SOLAR_WRATH_MOONKIN;\r\n    this.empowermentPrefix = 'Solar';\r\n    this.spellGenerateAmount = 8;\r\n    this.icon = 'ability_druid_eclipseorange';\r\n  }\r\n}\r\n\r\nexport default SolarEmpowerment;\r\n","import SPELLS from 'common/SPELLS';\r\n\r\nimport EarlyDotRefreshesCore from 'parser/shared/modules/earlydotrefreshes/EarlyDotRefreshes';\r\nimport suggest from 'parser/shared/modules/earlydotrefreshes/EarlyDotRefreshesSuggestionByCount';\r\n\r\nconst DOTS = [\r\n  {\r\n    name: 'Stellar Flare',\r\n    debuffId: SPELLS.STELLAR_FLARE_TALENT.id,\r\n    castId: SPELLS.STELLAR_FLARE_TALENT.id,\r\n    duration: 24000,\r\n  },\r\n];\r\n\r\nconst MINOR_THRESHOLD = 0.9;\r\nconst AVERAGE_THRESHOLD = 0.8;\r\nconst MAJOR_THRESHOLD = 0.6;\r\n\r\nclass EarlyDotRefreshes extends EarlyDotRefreshesCore {\r\n  get suggestionThresholdsStellarFlare() {\r\n    return {\r\n      spell: SPELLS.STELLAR_FLARE_TALENT,\r\n      count: this.casts[DOTS[0].castId].badCasts,\r\n      actual: this.badCastsPercent(DOTS[0].castId),\r\n      isGreaterThan: {\r\n        minor: 1 - MINOR_THRESHOLD,\r\n        average: 1 - AVERAGE_THRESHOLD,\r\n        major: 1 - MAJOR_THRESHOLD,\r\n      },\r\n      style: 'percentage',\r\n    };\r\n  }\r\n\r\n  get suggestionThresholdsStellarFlareEfficiency() {\r\n    return {\r\n      spell: SPELLS.STELLAR_FLARE_TALENT,\r\n      actual: 1 - this.badCastsPercent(DOTS[0].castId),\r\n      isLessThan: {\r\n        minor: MINOR_THRESHOLD,\r\n        average: AVERAGE_THRESHOLD,\r\n        major: MAJOR_THRESHOLD,\r\n      },\r\n      style: 'percentage',\r\n    };\r\n  }\r\n\r\n  static dots = DOTS;\r\n\r\n  constructor(...args) {\r\n    super(...args);\r\n    this.active = this.selectedCombatant.hasTalent(SPELLS.STELLAR_FLARE_TALENT.id);\r\n  }\r\n\r\n  suggestions(when) {\r\n    suggest(when, this.suggestionThresholdsStellarFlare);\r\n  }\r\n}\r\n\r\nexport default EarlyDotRefreshes;\r\n","import { encodeTargetString } from 'parser/shared/modules/EnemyInstances';\r\nimport DistanceMoved from 'parser/shared/modules/others/DistanceMoved';\r\n\r\nimport EarlyDotRefreshes from './EarlyDotRefreshes';\r\n\r\nconst BUFFER_MS = 100;\r\nconst PANDEMIC_WINDOW = 0.3;\r\n\r\n// example dot:\r\n// {\r\n//   name: \"Sunfire\", //name of the spell for display\r\n//   debuffId: SPELLS.SUNFIRE.id, //id of the dot debuff\r\n//   castId: SPELLS.SUNFIRE_CAST.id, //id of the dot cast\r\n//   duration: 18000, //duration of the dot in ms\r\n// },\r\n\r\n// Abstract class for tracking bad dot casts.\r\n// See /parser/Druid/Balance/Modules/Features/EarlyDotRefreshesInstants.js for an example implementation.\r\nclass EarlyDotRefreshesInstants extends EarlyDotRefreshes {\r\n  static dependencies = {\r\n    ...EarlyDotRefreshes.dependencies,\r\n    distanceMoved: DistanceMoved,\r\n  };\r\n\r\n  get lastCastBuffer() {\r\n    return this.lastGCD.duration - BUFFER_MS;\r\n  }\r\n\r\n  // Checks the status of the last cast and marks it accordingly.\r\n  getLastBadCastText(event, dot) {\r\n    let text = '';\r\n    if (!this.movedSinceCast(event)) { // Dot was refreshed early while standing still.\r\n      text = `${dot.name} was cast while it had more than 30% of its duration remaining on all targets hit and you were standing still.`;\r\n    }\r\n    const castWhileMovingBuffName = this.couldCastWhileMoving(this.lastCast, event);\r\n    if (castWhileMovingBuffName) { // Dot was refreshed early and player was able to cast on the move.\r\n      text = `${dot.name} was cast while it had more than 30% of its duration remaining on all targets hit and you had ${castWhileMovingBuffName} active, allowing you to cast better spells while moving.`;\r\n    }\r\n    const betterFillers = this.betterFillersAvailable(this.lastCast);\r\n    if (betterFillers && betterFillers.length > 0) { // A better movement filler was available.\r\n      let fillers = '';\r\n      for (let i = 0; i < betterFillers.length; i += 1) {\r\n        fillers += betterFillers[i];\r\n        if (i + 2 < betterFillers.length) {\r\n          fillers += ', ';\r\n        } else if (i + 1 < betterFillers.length) {\r\n          fillers += ' and ';\r\n        }\r\n      }\r\n      text = `${dot.name} was cast while it had more than 30% of its duration remaining on all targets hit and you had ${fillers} available as a better filler.`;\r\n    }\r\n    return text;\r\n  }\r\n\r\n  movedSinceCast(event) {\r\n    const timeSinceCast = event.timestamp - this.lastGCD.timestamp;\r\n    const timeSinceLastMovement = this.distanceMoved.timeSinceLastMovement();\r\n    if (timeSinceLastMovement !== null && timeSinceLastMovement < timeSinceCast) {\r\n      return true;\r\n    }\r\n    return false;\r\n  }\r\n\r\n  // Extend this for your spec and return the name of the buff that allowed you to move while casting at the time of the cast.\r\n  couldCastWhileMoving(castEvent, endEvent) {\r\n    return false;\r\n  }\r\n\r\n  // Extend this for your spec and return an array with the names of the fillers available at the time of the cast.\r\n  betterFillersAvailable(event) {\r\n    const betterFillers = [];\r\n    // If another movement filler had <30% duration remaining on the target, it would have been a better filler.\r\n    // We only check the primary target since the player might not be interested in refreshing the dot on secondary targets.\r\n    this.constructor.dots\r\n      .filter(dot => dot.castId !== event.ability.guid)\r\n      .forEach(dot => {\r\n        const expirationTimestamp = this.targets[dot.debuffId][encodeTargetString(event.targetID, event.targetInstance)] || 0;\r\n        const remainingDuration = expirationTimestamp - event.timestamp;\r\n        if (remainingDuration < dot.duration * PANDEMIC_WINDOW) {\r\n          betterFillers.push(dot.name);\r\n        }\r\n      });\r\n    return betterFillers;\r\n  }\r\n}\r\n\r\nexport default EarlyDotRefreshesInstants;\r\n","import React from 'react';\r\nimport { formatPercentage } from 'common/format';\r\nimport SpellLink from 'common/SpellLink';\r\nimport { i18n } from '@lingui/core';\r\nimport { t } from '@lingui/macro';\r\n\r\n  function suggest(when, suggestion) {\r\n    when(suggestion).addSuggestion((suggest, actual, recommended) => suggest(<>You refreshed <SpellLink id={suggestion.spell.id} /> early {suggestion.count} times when you had better spells to cast. See the highlighted casts on the timeline for more information.</>)\r\n        .icon(suggestion.spell.icon)\r\n        .actual(i18n._(t('shared.suggestions.dots.badRefreshes')`${formatPercentage(actual)}% bad dot refreshes`))\r\n        .recommended(`<${formatPercentage(recommended)}% is recommended`));\r\n  }\r\n\r\n  export default suggest;\r\n","import SPELLS from 'common/SPELLS';\r\n\r\nimport StatTracker from 'parser/shared/modules/StatTracker';\r\nimport CoreEarlyDotRefreshesInstants from 'parser/shared/modules/earlydotrefreshes/EarlyDotRefreshesInstants';\r\nimport suggest from 'parser/shared/modules/earlydotrefreshes/EarlyDotRefreshesInstantsSuggestion';\r\n\r\nconst DOTS = [\r\n  {\r\n    name: 'Moonfire',\r\n    debuffId: SPELLS.MOONFIRE_BEAR.id,\r\n    castId: SPELLS.MOONFIRE.id,\r\n    duration: 22000,\r\n    movementFiller: true,\r\n  },\r\n  {\r\n    name: 'Sunfire',\r\n    debuffId: SPELLS.SUNFIRE.id,\r\n    castId: SPELLS.SUNFIRE_CAST.id,\r\n    duration: 18000,\r\n    movementFiller: true,\r\n  },\r\n];\r\n\r\nconst MINOR_THRESHOLD = 0.9;\r\nconst AVERAGE_THRESHOLD = 0.8;\r\nconst MAJOR_THRESHOLD = 0.6;\r\n\r\nclass EarlyDotRefreshesInstants extends CoreEarlyDotRefreshesInstants {\r\n  get suggestionThresholdsMoonfire() {\r\n    return {\r\n      spell: SPELLS.MOONFIRE_BEAR,\r\n      count: this.casts[DOTS[0].castId].badCasts,\r\n      actual: this.badCastsPercent(DOTS[0].castId),\r\n      isGreaterThan: {\r\n        minor: 1 - MINOR_THRESHOLD,\r\n        average: 1 - AVERAGE_THRESHOLD,\r\n        major: 1 - MAJOR_THRESHOLD,\r\n      },\r\n      style: 'percentage',\r\n    };\r\n  }\r\n\r\n  get suggestionThresholdsSunfire() {\r\n    return {\r\n      spell: SPELLS.SUNFIRE,\r\n      count: this.casts[DOTS[1].castId].badCasts,\r\n      actual: this.badCastsPercent(DOTS[1].castId),\r\n      isGreaterThan: {\r\n        minor: 1 - MINOR_THRESHOLD,\r\n        average: 1 - AVERAGE_THRESHOLD,\r\n        major: 1 - MAJOR_THRESHOLD,\r\n      },\r\n      style: 'percentage',\r\n    };\r\n  }\r\n\r\n  get suggestionThresholdsMoonfireEfficiency() {\r\n    return {\r\n      spell: SPELLS.MOONFIRE_BEAR,\r\n      actual: 1 - this.badCastsPercent(DOTS[0].castId),\r\n      isLessThan: {\r\n        minor: MINOR_THRESHOLD,\r\n        average: AVERAGE_THRESHOLD,\r\n        major: MAJOR_THRESHOLD,\r\n      },\r\n      style: 'percentage',\r\n    };\r\n  }\r\n\r\n  get suggestionThresholdsSunfireEfficiency() {\r\n    return {\r\n      spell: SPELLS.SUNFIRE,\r\n      actual: 1 - this.badCastsPercent(DOTS[1].castId),\r\n      isLessThan: {\r\n        minor: MINOR_THRESHOLD,\r\n        average: AVERAGE_THRESHOLD,\r\n        major: MAJOR_THRESHOLD,\r\n      },\r\n      style: 'percentage',\r\n    };\r\n  }\r\n\r\n  static dependencies = {\r\n    ...CoreEarlyDotRefreshesInstants.dependencies,\r\n    statTracker: StatTracker,\r\n  };\r\n  static dots = DOTS;\r\n\r\n  // Check for Stellar Drift on both the cast event and the next event, since it might have expired mid GCD.\r\n  couldCastWhileMoving(castEvent, endEvent) {\r\n    if (this.selectedCombatant.hasBuff(SPELLS.STELLAR_DRIFT.id, castEvent.timestamp) && this.selectedCombatant.hasBuff(SPELLS.STELLAR_DRIFT.id, endEvent.timestamp)) {\r\n      return SPELLS.STELLAR_DRIFT.name;\r\n    }\r\n    return false;\r\n  }\r\n\r\n  suggestions(when) {\r\n    suggest(when, this.suggestionThresholdsMoonfire);\r\n    suggest(when, this.suggestionThresholdsSunfire);\r\n  }\r\n}\r\n\r\nexport default EarlyDotRefreshesInstants;\r\n","import RESOURCE_TYPES from 'game/RESOURCE_TYPES';\r\nimport ResourceTracker from 'parser/shared/modules/resources/resourcetracker/ResourceTracker';\r\nimport SPELLS from 'common/SPELLS';\r\n\r\nconst WARRIOR_OF_ELUNE_MULTIPLIER = 0.4;\r\nconst SOUL_OF_THE_FOREST_REDUCTION = 10;\r\n\r\nclass AstralPowerTracker extends ResourceTracker {\r\n  constructor(...args) {\r\n    super(...args);\r\n    this.resource = RESOURCE_TYPES.ASTRAL_POWER;\r\n  }\r\n\r\n  // Split Warrior of Elune Astral Power bonus into it's own entry.\r\n  onEnergize(event) {\r\n    const spellId = event.ability.guid;\r\n    if (spellId !== SPELLS.LUNAR_STRIKE.id || !this.selectedCombatant.hasBuff(SPELLS.WARRIOR_OF_ELUNE_TALENT.id)) {\r\n      super.onEnergize(event);\r\n      return;\r\n    }\r\n    if (event.resourceChangeType !== this.resource.id) {\r\n      return;\r\n    }\r\n    const gain = event.resourceChange;\r\n    const eluneRaw = gain - gain / (1 + WARRIOR_OF_ELUNE_MULTIPLIER);\r\n    const eluneWaste = Math.min(event.waste, eluneRaw);\r\n    const baseWaste = event.waste - eluneWaste;\r\n    const baseGain = gain - eluneRaw - baseWaste;\r\n    const eluneGain = eluneRaw - eluneWaste;\r\n    this._applyBuilder(spellId, this.getResource(event), baseGain, baseWaste);\r\n    this._applyBuilder(SPELLS.WARRIOR_OF_ELUNE_TALENT.id, this.getResource(event), eluneGain, eluneWaste);\r\n  }\r\n\r\n  getReducedCost(event) {\r\n    if (!this.getResource(event).cost) {\r\n      return 0;\r\n    }\r\n    let cost = this.getResource(event).cost / 10;\r\n    const abilityId = event.ability.guid;\r\n    if (abilityId === SPELLS.STARFALL_CAST.id && this.selectedCombatant.hasTalent(SPELLS.SOUL_OF_THE_FOREST_TALENT_BALANCE.id)) {\r\n      cost = cost - SOUL_OF_THE_FOREST_REDUCTION;\r\n    }\r\n    return cost;\r\n  }\r\n}\r\n\r\nexport default AstralPowerTracker;\r\n","import React from 'react';\r\n\r\nimport Panel from 'interface/others/Panel';\r\nimport Statistic from 'interface/statistics/Statistic';\r\nimport ResourceBreakdown from 'parser/shared/modules/resources/resourcetracker/ResourceBreakdown';\r\nimport BoringResourceValue from 'interface/statistics/components/BoringResourceValue';\r\nimport RESOURCE_TYPES from 'game/RESOURCE_TYPES';\r\nimport STATISTIC_ORDER from 'interface/others/STATISTIC_ORDER';\r\n\r\nimport Analyzer from 'parser/core/Analyzer';\r\nimport { formatPercentage } from 'common/format';\r\nimport { i18n } from '@lingui/core';\r\nimport { t } from '@lingui/macro';\r\n\r\nimport AstralPowerTracker from './AstralPowerTracker';\r\n\r\nconst MINOR_THRESHOLD = 0;\r\nconst AVERAGE_THRESHOLD = 0.02;\r\nconst MAJOR_THRESHOLD = 0.05;\r\n\r\nclass AstralPowerDetails extends Analyzer {\r\n  get wasted() {\r\n    return this.astralPowerTracker.wasted || 0;\r\n  }\r\n\r\n  get total() {\r\n    return this.astralPowerTracker.wasted + this.astralPowerTracker.generated || 0;\r\n  }\r\n\r\n  get wastedPerMinute() {\r\n    return (this.wasted / this.owner.fightDuration) * 1000 * 60 || 0;\r\n  }\r\n\r\n  get wastedPercent() {\r\n    return this.wasted / this.total || 0;\r\n  }\r\n\r\n  get suggestionThresholdsWasted() {\r\n    return {\r\n      actual: this.wastedPercent,\r\n      isGreaterThan: {\r\n        minor: MINOR_THRESHOLD,\r\n        average: AVERAGE_THRESHOLD,\r\n        major: MAJOR_THRESHOLD,\r\n      },\r\n      style: 'percentage',\r\n    };\r\n  }\r\n\r\n  get suggestionThresholds() {\r\n    return {\r\n      actual: 1 - this.wastedPercent,\r\n      isLessThan: {\r\n        minor: 1 - MINOR_THRESHOLD,\r\n        average: 1 - AVERAGE_THRESHOLD,\r\n        major: 1 - MAJOR_THRESHOLD,\r\n      },\r\n      style: 'percentage',\r\n    };\r\n  }\r\n\r\n  static dependencies = {\r\n    astralPowerTracker: AstralPowerTracker,\r\n  };\r\n\r\n  suggestions(when) {\r\n    when(this.suggestionThresholdsWasted)\r\n      .addSuggestion((suggest, actual, recommended) => suggest(`You overcapped ${this.wasted} Astral Power. Always prioritize spending it over avoiding the overcap of any other ability.`)\r\n        .icon('ability_druid_cresentburn')\r\n        .actual(i18n._(t('druid.balance.suggestions.astralPower.overcapped')`${formatPercentage(actual)}% overcapped Astral Power`))\r\n        .recommended(`${formatPercentage(recommended)}% is recommended`));\r\n  }\r\n\r\n  statistic() {\r\n    return (\r\n      <Statistic\r\n        position={STATISTIC_ORDER.CORE(1)}\r\n        size=\"small\"\r\n        tooltip={`${this.wasted} out of ${this.total} Astral Power wasted.`}\r\n      >\r\n        <BoringResourceValue\r\n          resource={RESOURCE_TYPES.ASTRAL_POWER}\r\n          value={`${formatPercentage(this.wastedPercent)} %`}\r\n          label=\"Overcapped Astral Power\"\r\n        />\r\n      </Statistic>\r\n    );\r\n  }\r\n\r\n  tab() {\r\n    return {\r\n      title: 'Astral Power usage',\r\n      url: 'astral-power-usage',\r\n      render: () => (\r\n        <Panel>\r\n          <ResourceBreakdown\r\n            tracker={this.astralPowerTracker}\r\n            showSpenders\r\n          />\r\n        </Panel>\r\n      ),\r\n    };\r\n  }\r\n\r\n}\r\n\r\nexport default AstralPowerDetails;\r\n","import React from 'react';\r\nimport PropTypes from 'prop-types';\r\n\r\nimport SPELLS from 'common/SPELLS';\r\nimport SpellLink from 'common/SpellLink';\r\nimport Checklist from 'parser/shared/modules/features/Checklist';\r\nimport Rule from 'parser/shared/modules/features/Checklist/Rule';\r\nimport Requirement from 'parser/shared/modules/features/Checklist/Requirement';\r\nimport PreparationRule from 'parser/shared/modules/features/Checklist/PreparationRule';\r\nimport GenericCastEfficiencyRequirement from 'parser/shared/modules/features/Checklist/GenericCastEfficiencyRequirement';\r\n\r\nconst BalanceDruidChecklist = ({ combatant, castEfficiency, thresholds }) => {\r\n  const AbilityRequirement = props => (\r\n    <GenericCastEfficiencyRequirement\r\n      castEfficiency={castEfficiency.getCastEfficiencyForSpellId(props.spell)}\r\n      {...props}\r\n    />\r\n  );\r\n  AbilityRequirement.propTypes = {\r\n    spell: PropTypes.number.isRequired,\r\n  };\r\n\r\n  return (\r\n    <Checklist>\r\n      <Rule\r\n        name=\"Always be casting\"\r\n        description={(\r\n          <>\r\n            <em><b>Continuously chaining casts throughout an encounter is the single most important thing for achieving good DPS as a caster</b></em>. There shoule be no delay at all between your spell casts, it's better to start casting the wrong spell than to think for a few seconds and then cast the right spell. You should be able to handle a fight's mechanics with the minimum possible interruption to your casting. Some fights (like Argus) have unavoidable downtime due to phase transitions and the like, so in these cases 0% downtime will not be possible.\r\n          </>\r\n        )}\r\n      >\r\n        <Requirement name=\"Downtime\" thresholds={thresholds.downtime} />\r\n        <Requirement name=\"Cancelled Casts\" thresholds={thresholds.cancelledCasts} />\r\n      </Rule>\r\n      <Rule\r\n        name=\"Maintain your DoTs on the boss\"\r\n        description=\"DoTs are a big part of your damage. You should try to keep as high uptime on them as possible.\"\r\n      >\r\n        <Requirement\r\n          name={(\r\n            <>\r\n              <SpellLink id={SPELLS.MOONFIRE_BEAR.id} /> uptime\r\n            </>\r\n          )}\r\n          thresholds={thresholds.moonfireUptime}\r\n        />\r\n        <Requirement\r\n          name={(\r\n            <>\r\n              <SpellLink id={SPELLS.SUNFIRE.id} /> uptime\r\n            </>\r\n          )}\r\n          thresholds={thresholds.sunfireUptime}\r\n        />\r\n        {combatant.hasTalent(SPELLS.STELLAR_FLARE_TALENT.id) && (\r\n          <Requirement\r\n            name={(\r\n              <>\r\n                <SpellLink id={SPELLS.STELLAR_FLARE_TALENT.id} /> uptime\r\n              </>\r\n            )}\r\n            thresholds={thresholds.stellarFlareUptime}\r\n          />\r\n        )}\r\n      </Rule>\r\n      <Rule\r\n        name=\"Avoid refreshing your DoTs too early\"\r\n        description=\"DoTs do very little direct damage, and you should avoid ever refreshing them with more than 30% duration remaining unless you have nothing else to cast while moving.\"\r\n      >\r\n        <Requirement\r\n          name={(\r\n            <>\r\n              <SpellLink id={SPELLS.MOONFIRE_BEAR.id} /> good refreshes\r\n            </>\r\n          )}\r\n          thresholds={thresholds.moonfireRefresh}\r\n        />\r\n        <Requirement\r\n          name={(\r\n            <>\r\n              <SpellLink id={SPELLS.SUNFIRE.id} /> good refreshes\r\n            </>\r\n          )}\r\n          thresholds={thresholds.sunfireRefresh}\r\n        />\r\n        {combatant.hasTalent(SPELLS.STELLAR_FLARE_TALENT.id) && (\r\n          <Requirement\r\n            name={(\r\n              <>\r\n                <SpellLink id={SPELLS.STELLAR_FLARE_TALENT.id} /> good refreshes\r\n              </>\r\n            )}\r\n            thresholds={thresholds.stellarFlareRefresh}\r\n          />\r\n        )}\r\n      </Rule>\r\n      <Rule\r\n        name=\"Do not overcap your resources\"\r\n        description=\"You should try to always avoid overcapping your Astral Power and your solar and lunar empowerments. Sometimes you can not avoid overcapping both of them. In that case, you should prioritize spending the Astral Power.\"\r\n      >\r\n        <Requirement name=\"Astral Power efficiency\" thresholds={thresholds.astralPowerEfficiency} />\r\n        <Requirement name=\"Solar Empowerment efficiency\" thresholds={thresholds.solarEmpowermentEfficiency} />\r\n        <Requirement name=\"Lunar Empowerment efficiency\" thresholds={thresholds.lunarEmpowermentEfficiency} />\r\n      </Rule>\r\n      <Rule\r\n        name=\"Use your cooldowns\"\r\n        description=\"Your cooldowns are a major contributor to your DPS, and should be used as frequently as possible throughout a fight. A cooldown should be held on to only if a priority DPS phase is coming soon. Holding cooldowns too long will hurt your DPS.\"\r\n      >\r\n        {!combatant.hasTalent(SPELLS.INCARNATION_CHOSEN_OF_ELUNE_TALENT.id) && (\r\n          <AbilityRequirement spell={SPELLS.CELESTIAL_ALIGNMENT.id} />\r\n        )}\r\n        {combatant.hasTalent(SPELLS.INCARNATION_CHOSEN_OF_ELUNE_TALENT.id) && (\r\n          <AbilityRequirement spell={SPELLS.INCARNATION_CHOSEN_OF_ELUNE_TALENT.id} />\r\n        )}\r\n        {combatant.hasTalent(SPELLS.FORCE_OF_NATURE_TALENT.id) && (\r\n          <AbilityRequirement spell={SPELLS.FORCE_OF_NATURE_TALENT.id} />\r\n        )}\r\n        {combatant.hasTalent(SPELLS.WARRIOR_OF_ELUNE_TALENT.id) && (\r\n          <AbilityRequirement spell={SPELLS.WARRIOR_OF_ELUNE_TALENT.id} />\r\n        )}\r\n        {combatant.hasTalent(SPELLS.FURY_OF_ELUNE_TALENT.id) && (\r\n          <AbilityRequirement spell={SPELLS.FURY_OF_ELUNE_TALENT.id} />\r\n        )}\r\n        {combatant.hasTalent(SPELLS.NEW_MOON_TALENT.id) && (\r\n          <AbilityRequirement spell={SPELLS.NEW_MOON_TALENT.id} />\r\n        )}\r\n      </Rule>\r\n      <Rule\r\n        name=\"Use your supportive abilities\"\r\n        description=\"While you should not aim to cast defensives and externals on cooldown, be aware of them and try to use them whenever effective. Not using them at all indicates you might not be aware of them enough.\"\r\n      >\r\n        <AbilityRequirement spell={SPELLS.INNERVATE.id} />\r\n        <AbilityRequirement spell={SPELLS.BARKSKIN.id} />\r\n        {combatant.hasTalent(SPELLS.RENEWAL_TALENT.id) && (\r\n          <AbilityRequirement spell={SPELLS.RENEWAL_TALENT.id} />\r\n        )}\r\n      </Rule>\r\n      <PreparationRule thresholds={thresholds} />\r\n    </Checklist>\r\n  );\r\n};\r\n\r\nBalanceDruidChecklist.propTypes = {\r\n  castEfficiency: PropTypes.object.isRequired,\r\n  combatant: PropTypes.shape({\r\n    hasTalent: PropTypes.func.isRequired,\r\n  }).isRequired,\r\n  thresholds: PropTypes.object.isRequired,\r\n};\r\n\r\nexport default BalanceDruidChecklist;\r\n","import React from 'react';\r\n\r\nimport BaseModule from 'parser/shared/modules/features/Checklist/Module';\r\nimport CastEfficiency from 'parser/shared/modules/CastEfficiency';\r\nimport Combatants from 'parser/shared/modules/Combatants';\r\nimport PreparationRuleAnalyzer from 'parser/shared/modules/features/Checklist/PreparationRuleAnalyzer';\r\n\r\nimport CancelledCasts from '../CancelledCasts';\r\nimport AlwaysBeCasting from '../AlwaysBeCasting';\r\nimport MoonfireUptime from '../MoonfireUptime';\r\nimport SunfireUptime from '../SunfireUptime';\r\nimport StellarFlareUptime from '../../talents/StellarFlareUptime';\r\nimport LunarEmpowerment from '../LunarEmpowerment';\r\nimport SolarEmpowerment from '../SolarEmpowerment';\r\nimport EarlyDotRefreshes from '../EarlyDotRefreshes';\r\nimport EarlyDotRefreshesInstants from '../EarlyDotRefreshesInstants';\r\n\r\nimport AstralPowerDetails from '../../resourcetracker/AstralPowerDetails';\r\n\r\nimport Component from './Component';\r\n\r\nclass Checklist extends BaseModule {\r\n  static dependencies = {\r\n    combatants: Combatants,\r\n    castEfficiency: CastEfficiency,\r\n    preparationRuleAnalyzer: PreparationRuleAnalyzer,\r\n    alwaysBeCasting: AlwaysBeCasting,\r\n    cancelledCasts: CancelledCasts,\r\n    moonfireUptime: MoonfireUptime,\r\n    sunfireUptime: SunfireUptime,\r\n    stellarFlareUptime: StellarFlareUptime,\r\n    lunarEmpowerment: LunarEmpowerment,\r\n    solarEmpowerment: SolarEmpowerment,\r\n    earlyDotRefreshes: EarlyDotRefreshes,\r\n    earlyDotRefreshesInstants: EarlyDotRefreshesInstants,\r\n    astralPowerDetails: AstralPowerDetails,\r\n  };\r\n\r\n  render() {\r\n    return (\r\n      <Component\r\n        combatant={this.combatants.selected}\r\n        castEfficiency={this.castEfficiency}\r\n        thresholds={{\r\n          ...this.preparationRuleAnalyzer.thresholds,\r\n\r\n          downtime: this.alwaysBeCasting.suggestionThresholds,\r\n          cancelledCasts: this.cancelledCasts.suggestionThresholds,\r\n          moonfireUptime: this.moonfireUptime.suggestionThresholds,\r\n          sunfireUptime: this.sunfireUptime.suggestionThresholds,\r\n          stellarFlareUptime: this.stellarFlareUptime.suggestionThresholds,\r\n          moonfireRefresh: this.earlyDotRefreshesInstants.suggestionThresholdsMoonfireEfficiency,\r\n          sunfireRefresh: this.earlyDotRefreshesInstants.suggestionThresholdsSunfireEfficiency,\r\n          stellarFlareRefresh: this.earlyDotRefreshes.suggestionThresholdsStellarFlareEfficiency,\r\n          astralPowerEfficiency: this.astralPowerDetails.suggestionThresholds,\r\n          solarEmpowermentEfficiency: this.solarEmpowerment.suggestionThresholds,\r\n          lunarEmpowermentEfficiency: this.lunarEmpowerment.suggestionThresholds,\r\n        }}\r\n      />\r\n    );\r\n  }\r\n}\r\n\r\nexport default Checklist;\r\n","import React from 'react';\r\nimport SPELLS from 'common/SPELLS';\r\nimport SpellLink from 'common/SpellLink';\r\nimport CoreAbilities from 'parser/core/modules/Abilities';\r\nimport ISSUE_IMPORTANCE from 'parser/core/ISSUE_IMPORTANCE';\r\n\r\nclass Abilities extends CoreAbilities {\r\n  spellbook() {\r\n    const combatant = this.selectedCombatant;\r\n    return [\r\n      // Rotational Spells\r\n      {\r\n        spell: SPELLS.STARSURGE_MOONKIN,\r\n        category: Abilities.SPELL_CATEGORIES.ROTATIONAL,\r\n        gcd: {\r\n          base: 1500,\r\n        },\r\n        timelineSortIndex: 2,\r\n      },\r\n      {\r\n        spell: SPELLS.STARFALL_CAST,\r\n        buffSpellId: SPELLS.STARFALL_CAST.id,\r\n        category: Abilities.SPELL_CATEGORIES.ROTATIONAL,\r\n        gcd: {\r\n          base: 1500,\r\n        },\r\n        timelineSortIndex: 3,\r\n      },\r\n      {\r\n        spell: SPELLS.SOLAR_WRATH_MOONKIN,\r\n        category: Abilities.SPELL_CATEGORIES.ROTATIONAL,\r\n        gcd: {\r\n          base: 1500,\r\n        },\r\n        timelineSortIndex: 4,\r\n      },\r\n      {\r\n        spell: SPELLS.LUNAR_STRIKE,\r\n        category: Abilities.SPELL_CATEGORIES.ROTATIONAL,\r\n        gcd: {\r\n          base: 1500,\r\n        },\r\n        timelineSortIndex: 5,\r\n      },\r\n      {\r\n        spell: SPELLS.MOONFIRE,\r\n        buffSpellId: SPELLS.MOONFIRE_BEAR.id,\r\n        category: Abilities.SPELL_CATEGORIES.ROTATIONAL,\r\n        gcd: {\r\n          base: 1500,\r\n        },\r\n        timelineSortIndex: 6,\r\n      },\r\n      {\r\n        spell: SPELLS.SUNFIRE_CAST,\r\n        buffSpellId: SPELLS.SUNFIRE.id,\r\n        category: Abilities.SPELL_CATEGORIES.ROTATIONAL,\r\n        gcd: {\r\n          base: 1500,\r\n        },\r\n        timelineSortIndex: 7,\r\n      },\r\n      {\r\n        spell: SPELLS.STELLAR_FLARE_TALENT,\r\n        buffSpellId: SPELLS.STELLAR_FLARE_TALENT.id,\r\n        category: Abilities.SPELL_CATEGORIES.ROTATIONAL,\r\n        enabled: combatant.hasTalent(SPELLS.STELLAR_FLARE_TALENT.id),\r\n        gcd: {\r\n          base: 1500,\r\n        },\r\n        timelineSortIndex: 8,\r\n      },\r\n\r\n      // Cooldowns\r\n      {\r\n        spell: SPELLS.INCARNATION_CHOSEN_OF_ELUNE_TALENT,\r\n        buffSpellId: SPELLS.INCARNATION_CHOSEN_OF_ELUNE_TALENT.id,\r\n        category: Abilities.SPELL_CATEGORIES.COOLDOWNS,\r\n        cooldown: 180,\r\n        enabled: combatant.hasTalent(SPELLS.INCARNATION_CHOSEN_OF_ELUNE_TALENT.id),\r\n        gcd: {\r\n          base: 1500,\r\n        },\r\n        castEfficiency: {\r\n          suggestion: true,\r\n          recommendedEfficiency: 0.8,\r\n        },\r\n        timelineSortIndex: 9,\r\n      },\r\n      {\r\n        spell: SPELLS.CELESTIAL_ALIGNMENT,\r\n        buffSpellId: SPELLS.CELESTIAL_ALIGNMENT.id,\r\n        category: Abilities.SPELL_CATEGORIES.COOLDOWNS,\r\n        cooldown: 180,\r\n        enabled: !combatant.hasTalent(SPELLS.INCARNATION_CHOSEN_OF_ELUNE_TALENT.id),\r\n        gcd: {\r\n          base: 1500,\r\n        },\r\n        castEfficiency: {\r\n          suggestion: true,\r\n          recommendedEfficiency: 0.8,\r\n        },\r\n        timelineSortIndex: 9,\r\n      },\r\n      {\r\n        spell: SPELLS.WARRIOR_OF_ELUNE_TALENT,\r\n        buffSpellId: SPELLS.WARRIOR_OF_ELUNE_TALENT.id,\r\n        category: Abilities.SPELL_CATEGORIES.COOLDOWNS,\r\n        cooldown: 48,\r\n        enabled: combatant.hasTalent(SPELLS.WARRIOR_OF_ELUNE_TALENT.id),\r\n        castEfficiency: {\r\n          suggestion: true,\r\n          recommendedEfficiency: 0.8,\r\n        },\r\n        timelineSortIndex: 10,\r\n      },\r\n      {\r\n        spell: SPELLS.FORCE_OF_NATURE_TALENT,\r\n        category: Abilities.SPELL_CATEGORIES.COOLDOWNS,\r\n        cooldown: 60,\r\n        enabled: combatant.hasTalent(SPELLS.FORCE_OF_NATURE_TALENT.id),\r\n        gcd: {\r\n          base: 1500,\r\n        },\r\n        castEfficiency: {\r\n          suggestion: true,\r\n          recommendedEfficiency: 0.8,\r\n        },\r\n        timelineSortIndex: 10,\r\n      },\r\n      {\r\n        spell: [SPELLS.NEW_MOON_TALENT, SPELLS.HALF_MOON, SPELLS.FULL_MOON],\r\n        category: Abilities.SPELL_CATEGORIES.COOLDOWNS,\r\n        cooldown: 25,\r\n        enabled: combatant.hasTalent(SPELLS.NEW_MOON_TALENT.id),\r\n        gcd: {\r\n          base: 1500,\r\n        },\r\n        charges: 3,\r\n        castEfficiency: {\r\n          suggestion: true,\r\n          recommendedEfficiency: 0.95,\r\n          averageIssueEfficiency: 0.9,\r\n          majorIssueEfficiency: 0.85,\r\n          extraSuggestion: (\r\n            <>\r\n              Your <SpellLink id={SPELLS.NEW_MOON_TALENT.id} />, <SpellLink id={SPELLS.HALF_MOON.id} /> and <SpellLink id={SPELLS.FULL_MOON.id} /> cast efficiency can be improved, try keeping yourself at low Moon charges at all times; you should (almost) never be at max (3) charges.\r\n            </>\r\n          ),\r\n        },\r\n        timelineSortIndex: 11,\r\n      },\r\n      {\r\n        spell: SPELLS.FURY_OF_ELUNE_TALENT,\r\n        buffSpellId: SPELLS.FURY_OF_ELUNE_TALENT.id,\r\n        category: Abilities.SPELL_CATEGORIES.COOLDOWNS,\r\n        cooldown: 60,\r\n        enabled: combatant.hasTalent(SPELLS.FURY_OF_ELUNE_TALENT.id),\r\n        gcd: {\r\n          base: 1500,\r\n        },\r\n        castEfficiency: {\r\n          suggestion: true,\r\n          recommendedEfficiency: 0.8,\r\n        },\r\n        timelineSortIndex: 11,\r\n      },\r\n\r\n      //Utility\r\n      {\r\n        spell: SPELLS.INNERVATE,\r\n        category: Abilities.SPELL_CATEGORIES.UTILITY,\r\n        cooldown: 180,\r\n        gcd: {\r\n          base: 1500,\r\n        },\r\n        castEfficiency: {\r\n          suggestion: true,\r\n          recommendedEfficiency: 0.70,\r\n          averageIssueEfficiency: 0.50,\r\n          majorIssueEfficiency: 0.30,\r\n        },\r\n        timelineSortIndex: 12,\r\n      },\r\n      {\r\n        spell: SPELLS.BARKSKIN,\r\n        buffSpellId: SPELLS.BARKSKIN.id,\r\n        category: Abilities.SPELL_CATEGORIES.DEFENSIVE,\r\n        cooldown: 60,\r\n        castEfficiency: {\r\n          suggestion: true,\r\n          recommendedEfficiency: 0.50,\r\n          averageIssueEfficiency: 0.35,\r\n          majorIssueEfficiency: 0.25,\r\n          importance: ISSUE_IMPORTANCE.MINOR,\r\n        },\r\n        timelineSortIndex: 13,\r\n      },\r\n      {\r\n        spell: SPELLS.RENEWAL_TALENT,\r\n        category: Abilities.SPELL_CATEGORIES.DEFENSIVE,\r\n        cooldown: 90,\r\n        enabled: combatant.hasTalent(SPELLS.RENEWAL_TALENT.id),\r\n        timelineSortIndex: 14,\r\n      },\r\n      {\r\n        spell: SPELLS.TIGER_DASH_TALENT,\r\n        buffSpellId: SPELLS.TIGER_DASH_TALENT.id,\r\n        category: Abilities.SPELL_CATEGORIES.UTILITY,\r\n        cooldown: 45,\r\n        enabled: combatant.hasTalent(SPELLS.TIGER_DASH_TALENT.id),\r\n        gcd: {\r\n          base: 1500,\r\n        },\r\n        timelineSortIndex: 14,\r\n      },\r\n      {\r\n        spell: [SPELLS.WILD_CHARGE_TALENT, SPELLS.WILD_CHARGE_MOONKIN, SPELLS.WILD_CHARGE_CAT, SPELLS.WILD_CHARGE_BEAR, SPELLS.WILD_CHARGE_TRAVEL],\r\n        category: Abilities.SPELL_CATEGORIES.UTILITY,\r\n        cooldown: 15,\r\n        gcd: null,\r\n        enabled: combatant.hasTalent(SPELLS.WILD_CHARGE_TALENT.id),\r\n        timelineSortIndex: 14,\r\n      },\r\n      {\r\n        spell: SPELLS.MIGHTY_BASH_TALENT,\r\n        category: Abilities.SPELL_CATEGORIES.UTILITY,\r\n        cooldown: 50,\r\n        enabled: combatant.hasTalent(SPELLS.MIGHTY_BASH_TALENT.id),\r\n        gcd: {\r\n          base: 1500,\r\n        },\r\n      },\r\n      {\r\n        spell: SPELLS.MASS_ENTANGLEMENT_TALENT,\r\n        category: Abilities.SPELL_CATEGORIES.UTILITY,\r\n        cooldown: 30,\r\n        enabled: combatant.hasTalent(SPELLS.MASS_ENTANGLEMENT_TALENT.id),\r\n        gcd: {\r\n          base: 1500,\r\n        },\r\n      },\r\n      {\r\n        spell: SPELLS.TYPHOON,\r\n        category: Abilities.SPELL_CATEGORIES.UTILITY,\r\n        cooldown: 30,\r\n        enabled: combatant.hasTalent(SPELLS.TYPHOON_TALENT.id),\r\n        gcd: {\r\n          base: 1500,\r\n        },\r\n      },\r\n      {\r\n        spell: SPELLS.ENTANGLING_ROOTS,\r\n        category: Abilities.SPELL_CATEGORIES.UTILITY,\r\n        gcd: {\r\n          base: 1500,\r\n        },\r\n      },\r\n      {\r\n        spell: SPELLS.DASH,\r\n        buffSpellId: SPELLS.DASH.id,\r\n        category: Abilities.SPELL_CATEGORIES.UTILITY,\r\n        enabled: !combatant.hasTalent(SPELLS.TIGER_DASH_TALENT.id),\r\n        cooldown: 180,\r\n        gcd: {\r\n          base: 1500,\r\n        },\r\n      },\r\n      {\r\n        spell: SPELLS.SOLAR_BEAM,\r\n        category: Abilities.SPELL_CATEGORIES.UTILITY,\r\n        cooldown: 45,\r\n      },\r\n      {\r\n        spell: SPELLS.REMOVE_CORRUPTION,\r\n        category: Abilities.SPELL_CATEGORIES.UTILITY,\r\n        cooldown: 8,\r\n        gcd: {\r\n          base: 1500,\r\n        },\r\n      },\r\n      {\r\n        spell: SPELLS.REBIRTH,\r\n        category: Abilities.SPELL_CATEGORIES.UTILITY,\r\n        gcd: {\r\n          base: 1500,\r\n        },\r\n      },\r\n      {\r\n        spell: SPELLS.GROWL,\r\n        category: Abilities.SPELL_CATEGORIES.UTILITY,\r\n        cooldown: 8,\r\n      },\r\n      {\r\n        spell: SPELLS.BEAR_FORM,\r\n        buffSpellId: SPELLS.BEAR_FORM.id,\r\n        category: Abilities.SPELL_CATEGORIES.DEFENSIVE,\r\n        gcd: {\r\n          base: 1500,\r\n        },\r\n      },\r\n      {\r\n        spell: SPELLS.CAT_FORM,\r\n        buffSpellId: SPELLS.CAT_FORM.id,\r\n        category: Abilities.SPELL_CATEGORIES.UTILITY,\r\n        gcd: {\r\n          base: 1500,\r\n        },\r\n      },\r\n      {\r\n        spell: SPELLS.MOONKIN_FORM,\r\n        buffSpellId: SPELLS.MOONKIN_FORM.id,\r\n        category: Abilities.SPELL_CATEGORIES.UTILITY,\r\n        gcd: {\r\n          base: 1500,\r\n        },\r\n      },\r\n      {\r\n        spell: SPELLS.TRAVEL_FORM,\r\n        buffSpellId: SPELLS.TRAVEL_FORM.id,\r\n        category: Abilities.SPELL_CATEGORIES.UTILITY,\r\n        gcd: {\r\n          base: 1500,\r\n        },\r\n      },\r\n      {\r\n        spell: SPELLS.REGROWTH,\r\n        category: Abilities.SPELL_CATEGORIES.UTILITY,\r\n        gcd: {\r\n          base: 1500,\r\n        },\r\n      },\r\n      {\r\n        spell: SPELLS.FRENZIED_REGENERATION,\r\n        buffSpellId: SPELLS.FRENZIED_REGENERATION.id,\r\n        category: Abilities.SPELL_CATEGORIES.DEFENSIVE,\r\n        cooldown: 36,\r\n        gcd: {\r\n          base: 1500,\r\n        },\r\n        enabled: combatant.hasTalent(SPELLS.GUARDIAN_AFFINITY_TALENT_SHARED.id),\r\n      },\r\n      {\r\n        spell: SPELLS.SWIFTMEND,\r\n        category: Abilities.SPELL_CATEGORIES.DEFENSIVE,\r\n        enabled: combatant.hasTalent(SPELLS.RESTORATION_AFFINITY_TALENT.id),\r\n        gcd: {\r\n          base: 1500,\r\n        },\r\n      },\r\n      {\r\n        spell: SPELLS.REJUVENATION,\r\n        category: Abilities.SPELL_CATEGORIES.UTILITY,\r\n        enabled: combatant.hasTalent(SPELLS.RESTORATION_AFFINITY_TALENT.id),\r\n        gcd: {\r\n          base: 1500,\r\n        },\r\n      },\r\n      {\r\n        spell: SPELLS.WILD_GROWTH,\r\n        category: Abilities.SPELL_CATEGORIES.UTILITY,\r\n        enabled: combatant.hasTalent(SPELLS.RESTORATION_AFFINITY_TALENT.id),\r\n        gcd: {\r\n          base: 1500,\r\n        },\r\n      },\r\n      {\r\n        spell: SPELLS.HIBERNATE,\r\n        category: Abilities.SPELL_CATEGORIES.UTILITY,\r\n        gcd: {\r\n          base: 1500,\r\n        },\r\n      },\r\n      {\r\n        spell: SPELLS.SOOTHE,\r\n        category: Abilities.SPELL_CATEGORIES.UTILITY,\r\n        cooldown: 10,\r\n        gcd: {\r\n          base: 1500,\r\n        },\r\n      },\r\n    ];\r\n  }\r\n}\r\n\r\nexport default Abilities;\r\n","import SPELLS from 'common/SPELLS';\r\nimport CoreCooldownThroughputTracker, { BUILT_IN_SUMMARY_TYPES } from 'parser/shared/modules/CooldownThroughputTracker';\r\n\r\nclass CooldownThroughputTracker extends CoreCooldownThroughputTracker {\r\n  static cooldownSpells = [\r\n    ...CoreCooldownThroughputTracker.cooldownSpells,\r\n    {\r\n      spell: SPELLS.INCARNATION_CHOSEN_OF_ELUNE_TALENT,\r\n      summary: [\r\n        BUILT_IN_SUMMARY_TYPES.DAMAGE,\r\n      ],\r\n    },\r\n    {\r\n      spell: SPELLS.CELESTIAL_ALIGNMENT,\r\n      summary: [\r\n        BUILT_IN_SUMMARY_TYPES.DAMAGE,\r\n      ],\r\n    },\r\n  ];\r\n}\r\n\r\nexport default CooldownThroughputTracker;\r\n","import React from 'react';\r\nimport Analyzer, { SELECTED_PLAYER } from 'parser/core/Analyzer';\r\nimport SPELLS from 'common/SPELLS';\r\nimport SpellLink from 'common/SpellLink';\r\nimport { i18n } from '@lingui/core';\r\nimport { t } from '@lingui/macro';\r\nimport Events from 'parser/core/Events';\r\n\r\nconst TARGETS_FOR_GOOD_CAST = 3;\r\n\r\nclass UnempoweredLunarStrike extends Analyzer {\r\n  get badCastsPerMinute() {\r\n    return ((this.badCasts) / (this.owner.fightDuration / 1000)) * 60;\r\n  }\r\n\r\n  get suggestionThresholds() {\r\n    return {\r\n      actual: this.badCastsPerMinute,\r\n      isGreaterThan: {\r\n        minor: 0,\r\n        average: 1,\r\n        major: 2,\r\n      },\r\n      style: 'number',\r\n    };\r\n  }\r\n\r\n  badCasts = 0;\r\n  lastCast = null;\r\n  lastCastBuffed = false;\r\n  hits = 0;\r\n\r\n  constructor(options) {\r\n    super(options);\r\n    this.addEventListener(Events.cast.by(SELECTED_PLAYER).spell(SPELLS.LUNAR_STRIKE), this.onCast);\r\n    this.addEventListener(Events.damage.by(SELECTED_PLAYER).spell(SPELLS.LUNAR_STRIKE), this.onDamage);\r\n    this.addEventListener(Events.fightend, this.onFightend);\r\n  }\r\n\r\n  checkCast() {\r\n    if (this.lastCastBuffed || this.hits >= TARGETS_FOR_GOOD_CAST || this.lastCast === null) {\r\n      return;\r\n    }\r\n    this.badCasts += 1;\r\n    this.lastCast.meta = this.lastCast.meta || {};\r\n    this.lastCast.meta.isInefficientCast = true;\r\n    this.lastCast.meta.inefficientCastReason = `Lunar Strike was cast without Lunar Empowerment, Owlkin Frenzy and Warrior of Elune and hit less than ${TARGETS_FOR_GOOD_CAST} targets.`;\r\n  }\r\n\r\n  onCast(event) {\r\n    this.checkCast();\r\n    this.lastCast = event;\r\n    this.lastCastBuffed = this.selectedCombatant.hasBuff(SPELLS.LUNAR_EMP_BUFF.id)\r\n      || this.selectedCombatant.hasBuff(SPELLS.OWLKIN_FRENZY.id)\r\n      || this.selectedCombatant.hasBuff(SPELLS.WARRIOR_OF_ELUNE_TALENT.id);\r\n    this.hits = 0;\r\n  }\r\n\r\n  onDamage(event) {\r\n    this.hits += 1;\r\n  }\r\n\r\n  onFightend() {\r\n    this.checkCast();\r\n  }\r\n\r\n  suggestions(when) {\r\n    when(this.suggestionThresholds).addSuggestion((suggest, actual, recommended) => suggest(<>You cast {this.badCasts} unempowered and non instant cast <SpellLink id={SPELLS.LUNAR_STRIKE.id} /> that hit less than {TARGETS_FOR_GOOD_CAST} targets. Always prioritize <SpellLink id={SPELLS.SOLAR_WRATH.id} /> as a filler when none of those conditions are met.</>)\r\n      .icon(SPELLS.LUNAR_STRIKE.icon)\r\n      .actual(i18n._(t('druid.balance.suggestions.lunarStrike.efficiency')`${actual.toFixed(1)} Unempowered Lunar Strikes per minute`))\r\n\r\n      .recommended(`${recommended} is recommended`));\r\n  }\r\n}\r\n\r\nexport default UnempoweredLunarStrike;\r\n","import React from 'react';\r\n\r\nimport SPELLS from 'common/SPELLS';\r\nimport { formatPercentage } from 'common/format';\r\n\r\nimport Analyzer, { SELECTED_PLAYER } from 'parser/core/Analyzer';\r\n\r\nimport STATISTIC_ORDER from 'interface/others/STATISTIC_ORDER';\r\nimport Statistic from 'interface/statistics/Statistic';\r\nimport BoringSpellValueText from 'interface/statistics/components/BoringSpellValueText';\r\nimport Events from 'parser/core/Events';\r\n\r\nclass TwinMoons extends Analyzer {\r\n  get percentTwoHits() {\r\n    return (this.moonfireHits - this.moonfireCasts) / this.moonfireCasts;\r\n  }\r\n\r\n  moonfireCasts = 0;\r\n  moonfireHits = 0;\r\n  statisticOrder = STATISTIC_ORDER.OPTIONAL();\r\n\r\n  constructor(...args) {\r\n    super(...args);\r\n    this.active = this.selectedCombatant.hasTalent(SPELLS.TWIN_MOONS_TALENT.id);\r\n    this.addEventListener(Events.damage.by(SELECTED_PLAYER).spell(SPELLS.MOONFIRE_BEAR), this.onDamage);\r\n    this.addEventListener(Events.cast.by(SELECTED_PLAYER).spell(SPELLS.MOONFIRE), this.onCast);\r\n  }\r\n\r\n  onDamage(event) {\r\n    if (event.tick === true) {\r\n      return;\r\n    }\r\n    this.moonfireHits += 1;\r\n  }\r\n\r\n  onCast(event) {\r\n    this.moonfireCasts += 1;\r\n  }\r\n\r\n  statistic() {\r\n    return (\r\n      <Statistic\r\n        position={STATISTIC_ORDER.CORE(7)}\r\n        size=\"flexible\"\r\n        tooltip={`You hit ${this.moonfireHits} times with ${this.moonfireCasts} casts.`}\r\n      >\r\n        <BoringSpellValueText spell={SPELLS.TWIN_MOONS_TALENT}>\r\n          <>\r\n            ${formatPercentage(this.percentTwoHits)} % <small>double hits</small>\r\n          </>\r\n        </BoringSpellValueText>\r\n      </Statistic>\r\n    );\r\n  }\r\n}\r\n\r\nexport default TwinMoons;\r\n","import React from 'react';\r\n\r\nimport SPELLS from 'common/SPELLS';\r\nimport { formatPercentage, formatNumber } from 'common/format';\r\n\r\nimport Analyzer, { SELECTED_PLAYER } from 'parser/core/Analyzer';\r\nimport calculateEffectiveDamage from 'parser/core/calculateEffectiveDamage';\r\n\r\nimport STATISTIC_ORDER from 'interface/others/STATISTIC_ORDER';\r\nimport Statistic from 'interface/statistics/Statistic';\r\nimport BoringSpellValueText from 'interface/statistics/components/BoringSpellValueText';\r\nimport Events from 'parser/core/Events';\r\n\r\nconst STARFALL_BONUS_DAMAGE = 0.25;\r\n\r\nclass StellarDrift extends Analyzer {\r\n  get damagePercent() {\r\n    return this.owner.getPercentageOfTotalDamageDone(this.bonusDamage);\r\n  }\r\n\r\n  get perSecond() {\r\n    return this.bonusDamage / (this.owner.fightDuration / 1000);\r\n  }\r\n\r\n  bonusDamage = 0;\r\n  statisticOrder = STATISTIC_ORDER.OPTIONAL();\r\n\r\n  constructor(...args) {\r\n    super(...args);\r\n    this.active = this.selectedCombatant.hasTalent(SPELLS.STELLAR_DRIFT_TALENT.id);\r\n    this.addEventListener(Events.damage.by(SELECTED_PLAYER).spell(SPELLS.STARFALL), this.onDamage);\r\n  }\r\n\r\n  onDamage(event) {\r\n    this.bonusDamage += calculateEffectiveDamage(event, STARFALL_BONUS_DAMAGE);\r\n  }\r\n\r\n  statistic() {\r\n    return (\r\n      <Statistic\r\n        position={STATISTIC_ORDER.CORE(7)}\r\n        size=\"flexible\"\r\n        tooltip={`Contributed ${formatNumber(this.perSecond)} DPS (${formatNumber(this.bonusDamage)} total damage). This does not account for any extra damage gained from the increased radius or the ability to move while casting.`}\r\n      >\r\n        <BoringSpellValueText spell={SPELLS.STELLAR_DRIFT_TALENT}>\r\n          <>\r\n            {formatPercentage(this.damagePercent)} % <small>of total damage</small>\r\n          </>\r\n        </BoringSpellValueText>\r\n      </Statistic>\r\n    );\r\n  }\r\n}\r\n\r\nexport default StellarDrift;\r\n","import React from 'react';\r\n\r\nimport SPELLS from 'common/SPELLS';\r\nimport { formatDuration, formatPercentage } from 'common/format';\r\nimport Analyzer, { SELECTED_PLAYER } from 'parser/core/Analyzer';\r\n\r\nimport STATISTIC_ORDER from 'interface/others/STATISTIC_ORDER';\r\nimport Statistic from 'interface/statistics/Statistic';\r\nimport BoringSpellValueText from 'interface/statistics/components/BoringSpellValueText';\r\nimport Events, { EventType } from 'parser/core/Events';\r\nimport { currentStacks } from 'parser/shared/modules/helpers/Stacks';\r\nimport HasteIcon from 'interface/icons/Haste';\r\n\r\nconst MAX_STACKS = 3;\r\nconst HASTE_PER_STACK = 3;\r\n\r\nclass Starlord extends Analyzer {\r\n\r\n  get averageHaste() {\r\n    let avgStacks = 0;\r\n    this.buffStacks.forEach((elem, index) => {\r\n      avgStacks += elem.reduce((a, b) => a + b) / this.owner.fightDuration * index;\r\n    });\r\n    return (avgStacks * HASTE_PER_STACK).toFixed(2);\r\n  }\r\n\r\n  buffStacks = [];\r\n  lastStacks = 0;\r\n  lastUpdate = this.owner.fight.start_time;\r\n  statisticOrder = STATISTIC_ORDER.OPTIONAL(5);\r\n\r\n  constructor(...args) {\r\n    super(...args);\r\n    this.active = this.selectedCombatant.hasTalent(SPELLS.STARLORD_TALENT.id);\r\n    this.buffStacks = Array.from({ length: MAX_STACKS + 1 }, x => [0]);\r\n\r\n    this.addEventListener(Events.applybuff.by(SELECTED_PLAYER).spell(SPELLS.STARLORD), this.handleStacks);\r\n    this.addEventListener(Events.applybuffstack.by(SELECTED_PLAYER).spell(SPELLS.STARLORD), this.handleStacks);\r\n    this.addEventListener(Events.removebuff.by(SELECTED_PLAYER).spell(SPELLS.STARLORD), this.handleStacks);\r\n    this.addEventListener(Events.removebuffstack.by(SELECTED_PLAYER).spell(SPELLS.STARLORD), this.handleStacks);\r\n    this.addEventListener(Events.fightend, this.handleStacks);\r\n  }\r\n\r\n  handleStacks(event, stack = null) {\r\n    this.buffStacks[this.lastStacks].push(event.timestamp - this.lastUpdate);\r\n    if (event.type === EventType.FightEnd) {\r\n      return;\r\n    }\r\n    this.lastUpdate = event.timestamp;\r\n    this.lastStacks = currentStacks(event);\r\n  }\r\n\r\n  statistic() {\r\n    return (\r\n      <Statistic\r\n        position={STATISTIC_ORDER.CORE(7)}\r\n        size=\"flexible\"\r\n        dropdown={(\r\n          <>\r\n            <table className=\"table table-condensed\">\r\n              <thead>\r\n                <tr>\r\n                  <th>Haste-Bonus</th>\r\n                  <th>Time (s)</th>\r\n                  <th>Time (%)</th>\r\n                </tr>\r\n              </thead>\r\n              <tbody>\r\n                {this.buffStacks.map((e, i) => (\r\n                  <tr key={i}>\r\n                    <th>{(i * HASTE_PER_STACK).toFixed(0)}%</th>\r\n                    <td>{formatDuration(e.reduce((a, b) => a + b, 0) / 1000)}</td>\r\n                    <td>{formatPercentage(e.reduce((a, b) => a + b, 0) / this.owner.fightDuration)}%</td>\r\n                  </tr>\r\n                ))}\r\n              </tbody>\r\n            </table>\r\n          </>\r\n        )}\r\n      >\r\n        <BoringSpellValueText spell={SPELLS.STARLORD_TALENT}>\r\n          <>\r\n            <HasteIcon /> {this.averageHaste} % <small>average haste gained</small>\r\n          </>\r\n        </BoringSpellValueText>\r\n      </Statistic>\r\n    );\r\n  }\r\n}\r\n\r\nexport default Starlord;\r\n","import MainCombatLogParser from 'parser/core/CombatLogParser';\r\n\r\nimport Haste from './modules/core/Haste';\r\nimport GlobalCooldown from './modules/core/GlobalCooldown';\r\n\r\n//Normalizers\r\nimport LunarEmpowermentNormalizer from './normalizers/LunarEmpowermentNormalizer';\r\nimport SolarEmpowermentNormalizer from './normalizers/SolarEmpowermentNormalizer';\r\n\r\n//Features\r\nimport Checklist from './modules/features/Checklist/Module';\r\nimport AlwaysBeCasting from './modules/features/AlwaysBeCasting';\r\nimport CancelledCasts from './modules/features/CancelledCasts';\r\nimport Abilities from './modules/Abilities';\r\nimport LunarEmpowerment from './modules/features/LunarEmpowerment';\r\nimport SolarEmpowerment from './modules/features/SolarEmpowerment';\r\nimport CooldownThroughputTracker from './modules/features/CooldownThroughputTracker';\r\nimport MoonfireUptime from './modules/features/MoonfireUptime';\r\nimport SunfireUptime from './modules/features/SunfireUptime';\r\nimport UnempoweredLunarStrike from './modules/features/UnempoweredLunarStrike';\r\nimport EarlyDotRefreshes from './modules/features/EarlyDotRefreshes';\r\nimport EarlyDotRefreshesInstants from './modules/features/EarlyDotRefreshesInstants';\r\n\r\n//Talents\r\nimport StellarFlareUptime from './modules/talents/StellarFlareUptime';\r\nimport TwinMoons from './modules/talents/TwinMoons';\r\nimport StellarDrift from './modules/talents/StellarDrift';\r\nimport Starlord from './modules/talents/Starlord';\r\n\r\n//Resources\r\nimport AstralPowerDetails from './modules/resourcetracker/AstralPowerDetails';\r\nimport AstralPowerTracker from './modules/resourcetracker/AstralPowerTracker';\r\n\r\nclass CombatLogParser extends MainCombatLogParser {\r\n  static specModules = {\r\n    haste: Haste,\r\n    globalCooldown: GlobalCooldown,\r\n\r\n    //Normalizers\r\n    lunarEmpowermentNormalizer: LunarEmpowermentNormalizer,\r\n    solarEmpowermentNormalizer: SolarEmpowermentNormalizer,\r\n\r\n    //Features\r\n    checklist: Checklist,\r\n    alwaysBeCasting: AlwaysBeCasting,\r\n    cancelledCasts: CancelledCasts,\r\n    abilities: Abilities,\r\n    lunarEmpowerment: LunarEmpowerment,\r\n    solarEmpowerment: SolarEmpowerment,\r\n    cooldownThroughputTracker: CooldownThroughputTracker,\r\n    moonfireUptime: MoonfireUptime,\r\n    sunfireUptime: SunfireUptime,\r\n    unempoweredLunarStrike: UnempoweredLunarStrike,\r\n    earlyDotRefreshes: EarlyDotRefreshes,\r\n    earlyDotRefreshesInstants: EarlyDotRefreshesInstants,\r\n\r\n    //Talents\r\n    stellarFlareUptime: StellarFlareUptime,\r\n    twinMoons: TwinMoons,\r\n    stellarDrift: StellarDrift,\r\n    starlord: Starlord,\r\n\r\n    //Resources\r\n    astralPowerTracker: AstralPowerTracker,\r\n    astralPowerDetails: AstralPowerDetails,\r\n  };\r\n}\r\n\r\nexport default CombatLogParser;\r\n","export default function calculateEffectiveDamage(event, increase) {\r\n  const raw = (event.amount || 0) + (event.absorbed || 0);\r\n  return raw - (raw / (1 + increase));\r\n}\r\n","import React from 'react';\r\n\r\n// https://thenounproject.com/term/duration/370713/\r\n// duration by Bohdan Burmich from the Noun Project\r\nconst Icon = ({ ...other }) => (\r\n  <svg xmlns=\"http://www.w3.org/2000/svg\" viewBox=\"10 10 80 80\" className=\"icon\" {...other}>\r\n    <path d=\"M50,86.4865c17.4361,0,31.6216-14.1855,31.6216-31.6216c0-16.6168-12.8865-30.2714-29.1892-31.5189v-4.9677h7.2973v-4.8649  H40.2703v4.8649h7.2973v4.9677c-16.3027,1.2475-29.1892,14.902-29.1892,31.5189C18.3784,72.3009,32.5639,86.4865,50,86.4865z M52.4324,28.2236c3.1101,0.2817,6.0664,1.0982,8.7798,2.356l-8.7798,15.2073V28.2236z M47.5676,28.2236v26.6412 c0,1.1008,0.7393,2.0647,1.8029,2.3497c0.209,0.0561,0.4205,0.0827,0.6295,0.0827c0.8533,0,1.6642-0.4504,2.1065-1.2162 l13.3146-23.0616c6.8507,4.8503,11.3357,12.8315,11.3357,21.8454c0,14.7537-12.0031,26.7567-26.7568,26.7567 s-26.7568-12.003-26.7568-26.7567C23.2432,40.9315,33.9501,29.4573,47.5676,28.2236z\" />\r\n  </svg>\r\n);\r\n\r\nexport default Icon;\r\n","/**\r\n * A simple component that shows a value in the most plain way possible.\r\n * Use this only as the very last resort.\r\n */\r\nimport React from 'react';\r\n\r\ntype Props = {\r\n  label: React.ReactNode;\r\n  children: React.ReactNode;\r\n  className?: string;\r\n}\r\n\r\nconst BoringValue = ({ label, children, className }: Props) => (\r\n  <div className={`pad boring-text ${className || ''}`}>\r\n    <label>\r\n      {label}\r\n    </label>\r\n    <div className=\"value\">\r\n      {children}\r\n    </div>\r\n  </div>\r\n);\r\n\r\nexport default BoringValue;\r\n","import { ApplyBuffEvent, ApplyBuffStackEvent, ApplyDebuffEvent, ApplyDebuffStackEvent, EventType, RemoveBuffEvent, RemoveBuffStackEvent, RemoveDebuffEvent, RemoveDebuffStackEvent } from 'parser/core/Events';\r\n\r\n/**\r\n * Returns the current stacks on a given event\r\n * @param event\r\n */\r\nexport function currentStacks(event: RemoveBuffEvent | RemoveDebuffEvent | ApplyBuffEvent | ApplyDebuffEvent | ApplyBuffStackEvent | RemoveBuffStackEvent | ApplyDebuffStackEvent | RemoveDebuffStackEvent) {\r\n  switch (event.type) {\r\n    case EventType.RemoveBuff:\r\n    case EventType.RemoveDebuff:\r\n      return 0;\r\n    case EventType.ApplyBuff:\r\n    case EventType.ApplyDebuff:\r\n      return 1;\r\n    case EventType.ApplyBuffStack:\r\n    case EventType.RemoveBuffStack:\r\n    case EventType.ApplyDebuffStack:\r\n    case EventType.RemoveDebuffStack:\r\n      return event.stack;\r\n  }\r\n  throw new Error(\"Invalid event type for currentStacks\");\r\n}\r\n","import React from 'react';\r\n\r\nimport {\r\n  formatMilliseconds,\r\n  formatNumber,\r\n  formatPercentage,\r\n} from 'common/format';\r\nimport Analyzer, { Options, SELECTED_PLAYER } from 'parser/core/Analyzer';\r\nimport { ThresholdStyle } from 'parser/core/ParseResults';\r\nimport CrossIcon from 'interface/icons/Cross';\r\nimport Statistic from 'interface/statistics/Statistic';\r\nimport BoringValueText from 'interface/statistics/components/BoringValueText';\r\nimport STATISTIC_ORDER from 'interface/others/STATISTIC_ORDER';\r\nimport CASTS_THAT_ARENT_CASTS from 'parser/core/CASTS_THAT_ARENT_CASTS';\r\nimport CASTABLE_WHILE_CASTING_SPELLS from 'parser/core/CASTABLE_WHILE_CASTING_SPELLS';\r\n\r\nimport Events, { CastEvent, BeginCastEvent } from '../../core/Events';\r\n\r\nconst debug = false;\r\nconst MS_BUFFER = 100;\r\n\r\nclass CancelledCasts extends Analyzer {\r\n  castsCancelled = 0;\r\n  castsFinished = 0;\r\n  beginCastSpell: BeginCastEvent | undefined = undefined;\r\n  wasCastStarted: boolean = false;\r\n  cancelledSpellList: {\r\n    [key: number]: {\r\n      spellName: string,\r\n      amount: number\r\n    }\r\n  } = {};\r\n  IGNORED_ABILITIES: number[] = [];\r\n\r\n  constructor(options: Options){\r\n    super(options);\r\n    this.addEventListener(Events.begincast.by(SELECTED_PLAYER), this.onBeginCast);\r\n    this.addEventListener(Events.cast.by(SELECTED_PLAYER), this.onCast);\r\n    this.addEventListener(Events.fightend, this.onFightend);\r\n  }\r\n\r\n  onBeginCast(event: BeginCastEvent) {\r\n    const spellId = event.ability.guid;\r\n    if (this.IGNORED_ABILITIES.includes(spellId) || CASTS_THAT_ARENT_CASTS.includes(spellId) || CASTABLE_WHILE_CASTING_SPELLS.includes(spellId)) {\r\n      return;\r\n    }\r\n    if (this.wasCastStarted && this.beginCastSpell !== undefined &&\r\n      event.timestamp -\r\n      this.beginCastSpell.timestamp >\r\n      MS_BUFFER) {\r\n      this.castsCancelled += 1;\r\n      this.addToCancelledList();\r\n    }\r\n    this.beginCastSpell = event;\r\n    this.wasCastStarted = true;\r\n  }\r\n\r\n  onCast(event: CastEvent) {\r\n    const spellId = event.ability.guid;\r\n    const beginCastAbility = this.beginCastSpell && this.beginCastSpell.ability;\r\n    if (this.IGNORED_ABILITIES.includes(spellId) || CASTS_THAT_ARENT_CASTS.includes(spellId) || CASTABLE_WHILE_CASTING_SPELLS.includes(spellId) || !beginCastAbility) {\r\n      return;\r\n    }\r\n    if (beginCastAbility.guid !== spellId && this.wasCastStarted) {\r\n      this.castsCancelled += 1;\r\n      this.addToCancelledList();\r\n    }\r\n    if (beginCastAbility.guid === spellId && this.wasCastStarted) {\r\n      this.castsFinished += 1;\r\n    }\r\n    this.wasCastStarted = false;\r\n  }\r\n\r\n  addToCancelledList() {\r\n    if (!this.beginCastSpell) {\r\n      return;\r\n    }\r\n    const beginCastAbility = this.beginCastSpell.ability;\r\n    if (!this.cancelledSpellList[beginCastAbility.guid]) {\r\n      this.cancelledSpellList[beginCastAbility.guid] = {\r\n        'spellName': beginCastAbility.name,\r\n        'amount': 1,\r\n      };\r\n    } else {\r\n      this.cancelledSpellList[beginCastAbility.guid].amount += 1;\r\n    }\r\n    debug && this.log(beginCastAbility.name + ' cast cancelled');\r\n  }\r\n  get totalCasts() {\r\n    return this.castsCancelled + this.castsFinished;\r\n  }\r\n\r\n  get cancelledPercentage() {\r\n    return this.castsCancelled / this.totalCasts;\r\n  }\r\n\r\n  get cancelledCastSuggestionThresholds() {\r\n    return {\r\n      actual: this.cancelledPercentage,\r\n      isGreaterThan: {\r\n        minor: 0.02,\r\n        average: 0.05,\r\n        major: 0.15,\r\n      },\r\n      style: ThresholdStyle.PERCENTAGE,\r\n    };\r\n  }\r\n\r\n  onFightend() {\r\n    debug &&\r\n    console.log(\r\n      formatMilliseconds(this.owner.fightDuration),\r\n      'Casts Finished:',\r\n      `${formatNumber(this.castsFinished)}`,\r\n    );\r\n    debug &&\r\n    console.log(\r\n      formatMilliseconds(this.owner.fightDuration),\r\n      'Casts Cancelled:',\r\n      `${formatNumber(this.castsCancelled)}`,\r\n    );\r\n  }\r\n\r\n  statistic() {\r\n    return (\r\n      <Statistic\r\n        position={STATISTIC_ORDER.CORE(10)}\r\n        size=\"small\"\r\n        className=\"value\"\r\n        tooltip={(\r\n          <>\r\n            You cast {this.totalCasts} spells.\r\n            <ul>\r\n              <li>{this.castsFinished} casts were completed</li>\r\n              <li>{this.castsCancelled} casts were cancelled</li>\r\n            </ul>\r\n          </>\r\n        )}\r\n      >\r\n        <BoringValueText label=\"Cancelled Casts\">\r\n          <CrossIcon /> {formatPercentage(this.cancelledPercentage)}% <small>Casts Cancelled</small>\r\n        </BoringValueText>\r\n      </Statistic>\r\n    );\r\n  }\r\n}\r\n\r\nexport default CancelledCasts;\r\n","import Analyzer, { SELECTED_PLAYER } from 'parser/core/Analyzer';\r\nimport Enemies from 'parser/shared/modules/Enemies';\r\nimport AbilityTracker from 'parser/shared/modules/AbilityTracker';\r\nimport { encodeTargetString } from 'parser/shared/modules/EnemyInstances';\r\nimport { formatDuration } from 'common/format';\r\nimport Events from 'parser/core/Events';\r\n\r\nconst BUFFER_MS = 100;\r\nconst PANDEMIC_WINDOW = 0.3;\r\n\r\n// example dot:\r\n// {\r\n//   name: \"Stellar Flare\", //name of the spell for display\r\n//   debuffId: SPELLS.STELLAR_FLARE_TALENT.id, //id of the dot debuff\r\n//   castId: SPELLS.STELLAR_FLARE_TALENT.id, //id of the dot cast\r\n//   duration: 24000, //duration of the dot in ms\r\n// },\r\n\r\n// Abstract class for early dot refreshes\r\n// See /parser/Druid/Balance/Modules/Features/EarlyDotRefreshes.js for an example implementation.\r\nclass EarlyDotRefreshes extends Analyzer {\r\n  static dependencies = {\r\n    enemies: Enemies,\r\n    abilityTracker: AbilityTracker,\r\n  };\r\n\r\n  static dots = [];\r\n  targets = {};\r\n  lastGCD = null;\r\n  lastCast = null;\r\n  lastCastGoodExtension = false;\r\n  lastCastMinWaste = Number.MAX_SAFE_INTEGER;\r\n  lastCastMaxEffect = 0;\r\n  casts = {};\r\n\r\n  constructor(...args) {\r\n    super(...args);\r\n    this.constructor.dots.forEach(dot => {\r\n      this.targets[dot.debuffId] = {};\r\n      this.casts[dot.castId] = {\r\n        badCasts: 0,\r\n        addedDuration: 0,\r\n        wastedDuration: 0,\r\n      };\r\n    });\r\n    this.addEventListener(Events.refreshdebuff.by(SELECTED_PLAYER), this.onRefreshDebuff);\r\n    this.addEventListener(Events.applydebuff.by(SELECTED_PLAYER), this.onApplyDebuff);\r\n    this.addEventListener(Events.GlobalCooldown.by(SELECTED_PLAYER), this.onGCD);\r\n    this.addEventListener(Events.cast.by(SELECTED_PLAYER), this.onCast);\r\n  }\r\n\r\n  addBadCast(event, text) {\r\n    this.casts[this.lastCast.ability.guid].badCasts += 1;\r\n    this.casts[this.lastCast.ability.guid].wastedDuration += this.lastCastMinWaste;\r\n    event.meta = event.meta || {};\r\n    event.meta.isInefficientCast = true;\r\n    event.meta.inefficientCastReason = text;\r\n  }\r\n\r\n  onRefreshDebuff(event) {\r\n    const dot = this.getDot(event.ability.guid);\r\n    if (!dot) {\r\n      return;\r\n    }\r\n    const targetID = encodeTargetString(event.targetID, event.targetInstance);\r\n    const extensionInfo = this.extendDot(dot.debuffId, targetID, dot.duration, event.timestamp);\r\n    if(this.lastCastGoodExtension){\r\n      return;\r\n    }\r\n    this.lastCastGoodExtension = extensionInfo.wasted === 0;\r\n    this.lastCastMinWaste = Math.min(this.lastCastMinWaste, extensionInfo.wasted);\r\n    this.lastCastMaxEffect = Math.max(this.lastCastMaxEffect, extensionInfo.effective);\r\n  }\r\n\r\n  onApplyDebuff(event) {\r\n    const dot = this.getDot(event.ability.guid);\r\n    if (!dot) {\r\n      return;\r\n    }\r\n    this.targets[dot.debuffId][encodeTargetString(event.targetID, event.targetInstance)] = event.timestamp + dot.duration;\r\n    this.lastCastGoodExtension = true;\r\n    this.lastCastMinWaste = 0;\r\n    this.lastCastMaxEffect = dot.duration;\r\n  }\r\n\r\n  onGCD(event) {\r\n    const dot = this.getDotByCast(event.ability.guid);\r\n    if (!dot) {\r\n      return;\r\n    }\r\n    this.lastGCD = event;\r\n  }\r\n\r\n  onCast(event) {\r\n    this.checkLastCast(event);\r\n    const dot = this.getDotByCast(event.ability.guid);\r\n    if (!dot) {\r\n      return;\r\n    }\r\n    this.lastCast = event;\r\n    this.lastCastGoodExtension = false;\r\n    this.lastCastMinWaste = Number.MAX_SAFE_INTEGER;\r\n    this.lastCastMaxEffect = 0;\r\n    this.afterLastCastSet(event);\r\n  }\r\n\r\n  afterLastCastSet(event) {\r\n    //Extension to help capture state during the \"LastCast\".\r\n  }\r\n\r\n  // Determines whether the last cast should be checked or not.\r\n  checkLastCast(event) {\r\n    if (!this.lastGCD || !this.lastCast) {\r\n      return;\r\n    }\r\n    // We wait roughly a GCD to check, to account for minor travel times.\r\n    const timeSinceCast = event.timestamp - this.lastGCD.timestamp;\r\n    if (timeSinceCast < this.lastCastBuffer){\r\n      return;\r\n    }\r\n    this.casts[this.lastCast.ability.guid].addedDuration += this.lastCastMaxEffect;\r\n    this.isLastCastBad(event);\r\n    this.lastGCD = null;\r\n    this.lastCast = null;\r\n  }\r\n\r\n  get lastCastBuffer() {\r\n    return this.lastGCD.duration * 2 - BUFFER_MS;\r\n  }\r\n\r\n  // Checks the status of the last cast and marks it accordingly.\r\n  isLastCastBad(event) {\r\n    if (this.lastCastGoodExtension) {\r\n      return; // Should not be marked as bad.\r\n    }\r\n    const dot = this.getDotByCast(this.lastCast.ability.guid);\r\n    const text = this.getLastBadCastText(event, dot);\r\n    if (text !== '') {\r\n      this.addBadCast(this.lastCast, text);\r\n    }\r\n  }\r\n\r\n  // Get the suggestion for last bad cast. If empty, cast will be considered good.\r\n  getLastBadCastText(event, dot) {\r\n    return `${dot.name} was refreshed ${formatDuration(this.lastCastMinWaste/1000)} seconds before the pandemic window. It should be refreshed with at most ${formatDuration(PANDEMIC_WINDOW * dot.duration/1000)} left or part of the dot will be wasted.`;\r\n  }\r\n\r\n  //Returns the dot object\r\n  getDot(spellId) {\r\n    const dot = this.constructor.dots.find(element => element.debuffId === spellId);\r\n    return dot;\r\n  }\r\n\r\n  //Returns the dot object\r\n  getDotByCast(spellId) {\r\n    const dot = this.constructor.dots.find(element => element.castId === spellId);\r\n    return dot;\r\n  }\r\n\r\n  // Extends the dot and returns true if it was a good extension (no duration wasted) or false if it was a bad extension.\r\n  extendDot(spellId, targetID, extension, timestamp) {\r\n    const dot = this.getDot(spellId);\r\n    if (!dot) {\r\n      throw new Error(`The spellID ${spellId} is not in the list of dots to track`);\r\n    }\r\n    const remainingDuration = this.targets[dot.debuffId][targetID] - timestamp || 0;\r\n    const newDuration = remainingDuration + extension;\r\n    const maxDuration = (1 + PANDEMIC_WINDOW) * dot.duration;\r\n    const lostDuration = newDuration - maxDuration;\r\n    if (lostDuration <= 0) { //full extension\r\n      this.targets[dot.debuffId][targetID] = timestamp + newDuration;\r\n      return {wasted: 0, effective: extension};\r\n    } // Else not full extension\r\n    this.targets[dot.debuffId][targetID] = timestamp + maxDuration;\r\n    return {wasted: lostDuration, effective: extension - lostDuration};\r\n  }\r\n\r\n  badCastsPercent(spellId) {\r\n    const ability = this.abilityTracker.getAbility(spellId);\r\n    return this.casts[spellId].badCasts / ability.casts || 0;\r\n  }\r\n\r\n  badCastsEffectivePercent(spellId) {\r\n    if(!this.casts[spellId].addedDuration) {return 1;}\r\n    return this.casts[spellId].addedDuration / (this.casts[spellId].addedDuration+this.casts[spellId].wastedDuration);\r\n  }\r\n\r\n  makeSuggestionThresholds(spell, minor, avg, major) {\r\n    return {\r\n      spell: spell,\r\n      count: this.casts[spell.id].badCasts,\r\n      wastedDuration: this.casts[spell.id].wastedDuration,\r\n      actual: this.badCastsEffectivePercent(spell.id),\r\n      isLessThan: {\r\n        minor: minor,\r\n        average: avg,\r\n        major: major,\r\n      },\r\n      style: 'percentage',\r\n    };\r\n  }\r\n}\r\n\r\nexport default EarlyDotRefreshes;\r\n","import React from 'react';\r\nimport { formatPercentage } from 'common/format';\r\nimport SpellLink from 'common/SpellLink';\r\nimport { i18n } from '@lingui/core';\r\nimport { t } from '@lingui/macro';\r\n\r\n  function suggest(when, suggestion) {\r\n    when(suggestion).addSuggestion((suggest, actual, recommended) => suggest(<>You refreshed <SpellLink id={suggestion.spell.id} /> early {suggestion.count} times. The individual casts are highlighted on the timeline.</>)\r\n        .icon(suggestion.spell.icon)\r\n        .actual(i18n._(t('shared.suggestions.dots.countEarlyRefreshes')`${formatPercentage(actual)}% effective duration`))\r\n        .recommended(`<${formatPercentage(recommended)}% is recommended`));\r\n  }\r\n\r\n  export default suggest;\r\n"],"sourceRoot":""}