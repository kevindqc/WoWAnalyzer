{"version":3,"sources":["parser/warrior/fury/modules/Abilities.ts","parser/warrior/fury/modules/features/AlwaysBeCasting.tsx","parser/warrior/fury/modules/features/Channeling.ts","parser/warrior/fury/modules/core/RageTracker.tsx","parser/warrior/fury/modules/core/RageDetails.tsx","parser/warrior/fury/modules/spells/MissedRampage.tsx","parser/warrior/fury/modules/features/checklist/Component.tsx","parser/warrior/fury/modules/talents/Siegebreaker.tsx","parser/warrior/fury/modules/talents/Bladestorm.tsx","parser/warrior/fury/modules/talents/DragonRoar.tsx","parser/warrior/fury/modules/spells/Whirlwind.tsx","parser/warrior/fury/modules/features/checklist/Module.tsx","parser/warrior/fury/modules/features/CooldownThroughputTracker.ts","parser/warrior/fury/modules/features/SpellUsable.ts","parser/warrior/fury/modules/normalizers/Enrage.ts","parser/warrior/fury/modules/buffdebuff/Enrage.tsx","parser/warrior/fury/modules/spells/Recklessness.tsx","parser/warrior/fury/modules/talents/AngerManagement.tsx","parser/warrior/fury/modules/talents/Carnage.tsx","parser/warrior/fury/modules/talents/EndlessRage.tsx","parser/warrior/fury/modules/talents/FrothingBerserker.tsx","parser/warrior/fury/modules/talents/FuriousSlashTimesByStacks.tsx","parser/warrior/fury/modules/talents/FuriousSlashUptime.tsx","parser/warrior/fury/modules/talents/ImpendingVictory.tsx","parser/warrior/fury/modules/talents/MeatCleaver.tsx","parser/warrior/fury/modules/talents/RecklessAbandon.tsx","parser/warrior/fury/modules/talents/SuddenDeath.tsx","parser/warrior/fury/modules/talents/Warpaint.tsx","parser/warrior/fury/modules/features/Buffs.ts","parser/warrior/fury/CombatLogParser.ts","parser/core/calculateEffectiveDamage.js","interface/icons/Uptime.js"],"names":["Abilities","combatant","this","selectedCombatant","spell","SPELLS","BLOODTHIRST","category","SPELL_CATEGORIES","ROTATIONAL","cooldown","haste","gcd","base","castEfficiency","suggestion","recommendedEfficiency","RAGING_BLOW","hasTalent","INNER_RAGE_TALENT","id","charges","RAMPAGE","EXECUTE_FURY","EXECUTE_FURY_MASSACRE","FURIOUS_SLASH_TALENT","enabled","SIEGEBREAKER_TALENT","WHIRLWIND_FURY","ROTATIONAL_AOE","DRAGON_ROAR_TALENT","VICTORY_RUSH","OTHERS","IMPENDING_VICTORY_TALENT","RECKLESSNESS","COOLDOWNS","BLADESTORM_TALENT","ENRAGED_REGENERATION","DEFENSIVE","buffSpellId","importance","ISSUE_IMPORTANCE","MINOR","extraSuggestion","RALLYING_CRY","RALLYING_CRY_BUFF","CHARGE","UTILITY","DOUBLE_TIME_TALENT","HEROIC_LEAP","BOUNDING_STRIDE_BUFF","BOUNDING_STRIDE_TALENT","STORM_BOLT_TALENT","PUMMEL","BERSERKER_RAGE","HEROIC_THROW","INTIMIDATING_SHOUT","PIERCING_HOWL","BATTLE_SHOUT","TAUNT","CoreAbilities","AlwaysBeCasting","statisticOrder","STATISTIC_ORDER","CORE","when","downtimeSuggestionThresholds","addSuggestion","suggest","actual","recommended","SpellLink","icon","i18n","_","formatPercentage","regular","major","downtimePercentage","isGreaterThan","minor","average","style","ThresholdStyle","PERCENTAGE","CoreAlwaysBeCasting","Channeling","options","addEventListener","Events","applybuff","by","SELECTED_PLAYER","onApplyBuff","removebuff","onRemoveBuff","event","ability","guid","beginChannel","endChannel","CoreChanneling","dependencies","RageTracker","vengeanceRageSaved","lastMeleeTaken","maxResource","resource","RESOURCE_TYPES","RAGE","damage","MELEE","onDamage","onDamageTaken","cost","getResource","abilityId","REVENGE","hasBuff","VENGEANCE_REVENGE","timestamp","newCost","IGNORE_PAIN","VENGEANCE_IGNORE_PAIN","processInvisibleEnergize","RAGE_AUTO_ATTACKS","hitType","HIT_TYPES","DODGE","PARRY","RAGE_DAMAGE_TAKEN","toFixed","ResourceTracker","RageDetails","rageTracker","suggestionThresholds","wastedPercent","Statistic","position","size","tooltip","wasted","generated","BoringResourceValue","value","label","title","url","render","Panel","ResourceBreakdown","tracker","showSpenders","isLessThan","Analyzer","RAGE_GENERATORS","MissedRampage","missedRampages","hasFB","cast","onCast","classResources","find","type","amount","ENRAGE","NUMBER","FuryWarriorChecklist","thresholds","AbilityRequirement","props","GenericCastEfficiencyRequirement","getCastEfficiencyForSpellId","Rule","name","description","Requirement","siegeBreaker","bladeStorm","dragonRoar","whirlWind","ARCANE_TORRENT_RAGE","missedRampage","ResourceLink","rageDetails","PreparationRule","Siegebreaker","goodRecklessness","recklessnessCasted","inValidRecklessness","siegeCasted","lastRecklessness","enemies","active","onPlayerDamage","siegeTurnOn","playerCastedRecklessness","buffCheck","fightend","meta","isInefficientCast","inefficientCastReason","enemy","getEntity","SIEGEBREAKER_DEBUFF","calculateEffectiveDamage","STATISTIC_CATEGORY","TALENTS","formatThousands","damagePercent","BoringSpellValueText","dpsValue","owner","getPercentageOfTotalDamageDone","fightDuration","Enemies","Bladestorm","totalDamage","rageGained","goodCast","totalCasts","enrageCheck","BLADESTORM_DAMAGE","BLADESTORM_OH_DAMAGE","onBladestormDamage","energize","onBladestormEnergize","absorbed","resourceChange","percentageDamage","formatNumber","DragonRoar","targetsSlowed","onDragonRoarDamage","onDragonRoarEnergize","applydebuff","onDragonRoarSlow","Whirlwind","hasDragonsRoar","hasBladeStorm","lastCastWW","drWasAvailable","bsWasAvailable","btWasAvailable","ramWasAvailable","rbWasAvailable","exWasAvailable","lastEvent","enemiesHitWW","wasEnraged","executeThreshold","wwCast","badWWCast","hasWWBuff","rampageCost","spellUsable","MASSACRE_TALENT_FURY","CARNAGE_TALENT","FROTHING_BERSERKER_TALENT","spellCheck","WHIRLWIND_FURY_DAMAGE_MH","WHIRLWIND_FURY_DAMAGE_OH","wwDamage","WHIRLWIND_BUFF","noHadBuff","applybuffstack","hadBuff","wasValidWW","isAvailable","current","isExecuteBelowThreshold","targetID","targetInstance","includes","push","hitPoints","maxHitPoints","badCast","length","threshold","SpellUsable","Checklist","combatants","preparationRuleAnalyzer","alwaysBeCasting","Component","selected","BaseChecklist","Combatants","CastEfficiency","PreparationRuleAnalyzer","SiegeBreaker","WhirlWind","CooldownThroughputTracker","CoreCooldownThroughputTracker","cooldownSpells","summary","BUILT_IN_SUMMARY_TYPES","DAMAGE","FURY_EXECUTES","hasSuddenDeath","lastPotentialTriggerForRagingBlow","lastExecute","executeCdrEvents","SUDDEN_DEATH_TALENT_FURY","spellId","cooldownTriggerEvent","isOnCooldown","endCooldown","undefined","cooldownRemaining","CoreSpellUsable","Enrage","events","fixedEvents","forEach","eventIndex","EventType","ApplyBuff","castTimestamp","previousEventIndex","previousEvent","Cast","sourceID","splice","__modified","EventsNormalizer","statTracker","currentMasteryPercentage","damageTotalPercent","dpsIncrease","Uptime","uptime","getBuffUptime","StatTracker","Recklessness","reckRageGen","totalRageGen","reckDamage","to","onPlayerEnergize","ratioReckRageGen","reckDPS","AngerManagement","effectiveReduction","wastedReduction","ANGER_MANAGEMENT_TALENT","onPlayerCast","rage","e","reduction","reduceCooldown","Carnage","rampageCasts","onRampageCast","RAMPAGE_1","RAMPAGE_2","RAMPAGE_3","RAMPAGE_4","onRampageDamage","additionalRampageCasts","Math","floor","EndlessRage","rageGen","ENDLESS_RAGE_TALENT","ENDLESS_RAGE_ENERGISE","onPlayerBuff","FrothingBerserker","FROTHING_BERSERKER","uptimePercent","abilityTracker","AbilityTracker","FuriousSlashTimesByStacks","furiousSlashStacks","lastFuriousSlashStack","lastFuriousSlashUpdate","fight","start_time","Array","from","MAX_FURIOUS_SLASH_STACKS","FURIOUS_SLASH_TALENT_BUFF","stack","FuriousSlashUptime","furiousSlashTimesByStacks","uptimeSuggestionThresholds","dropdown","className","Object","values","furiousSlashTimesByStack","map","i","key","formatDuration","reduce","a","b","stacks","shift","numberTimesDropped","ImpendingVicory","totalHeal","heal","IMPENDING_VICTORY_TALENT_HEAL","onImpendingVictoryHeal","onImpendingVictoryDamage","MeatCleaver","whirlwindEvents","lastWhirlwindCast","MEAT_CLEAVER_TALENT","WHIRLWIND_FURY_ENERGIZE","onWhirlwindEnergize","onWhirlwindDamage","onEnrage","triggeredEnrage","targetsHit","isFirstRoundOfDamage","hasRecklessness","numberOfEnrageTriggers","rageGainedByMeatCleaver","filter","total","rageFromMeatCleaver","RAGE_GAIN_WW_ON_USE","RAGE_GAIN_WW_ON_HIT","RecklessAbandon","instantRageGained","RECKLESS_ABANDON_TALENT","onRecklessAbandonEnergize","reck","getBuff","start","hasLast4SecondsOfRecklessness","SuddenDeath","suddenDeathProcs","suddenDeathProcsUsed","executeDamageEvents","lastExecuteCast","lastSuddenDeathExecuteCast","lastSuddenDeathTargetID","onExecuteCast","EXECUTE_DAMAGE_FURY","EXECUTE_DAMAGE_OH_FURY","onExecuteDamage","SUDDEN_DEATH_TALENT_FURY_BUFF","onSuddenDeathProc","refreshbuff","damageDone","isMainTargetAboveThreshold","isSuddenDeath","isExecuteAboveThreshold","damageAboveThreshold","executeCastsAboveThreshold","effectiveExecuteCDR","cdrValue","index","Warpaint","damageMitigated","damageTaken","WARPAINT_TALENT","onPlayerDamageTaken","eventDamageTaken","preMitigatedDamage","damageMitigatedPercent","Buffs","keys","BLOODLUST_BUFFS","item","Number","timelineHighlight","CoreBuffs","CombatLogParser","CoreCombatLogParser","specModules","abilities","channeling","checklist","cooldownThroughputTracker","buffs","enrageNormalizer","EnrageNormalizer","enrageUptime","recklessness","angerManagement","bladestorm","carnage","endlessRage","frothingBerserker","furiousSlashUptime","impendingVictory","meatCleaver","recklessAbandon","siegebreaker","suddenDeath","warpaint","increase","raw","Icon","other","xmlns","viewBox","d"],"mappings":"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","file":"static/js/FuryWarrior.db04dcc7.chunk.js","sourcesContent":["import SPELLS from 'common/SPELLS';\r\nimport CoreAbilities from 'parser/core/modules/Abilities';\r\nimport ISSUE_IMPORTANCE from 'parser/core/ISSUE_IMPORTANCE';\r\n\r\n//https://www.warcraftlogs.com/reports/9Vw8TvjHNfXgWyP7#fight=19&type=summary&source=21 2+ cold steel hot blood\r\n\r\nclass Abilities extends CoreAbilities {\r\n  spellbook() {\r\n    const combatant = this.selectedCombatant;\r\n    return [\r\n      // Rotational\r\n      {\r\n        spell: SPELLS.BLOODTHIRST,\r\n        category: Abilities.SPELL_CATEGORIES.ROTATIONAL,\r\n        cooldown: (haste: number) => 4.5 / (1 + haste),\r\n        gcd: {\r\n          base: 1500,\r\n        },\r\n        castEfficiency: {\r\n          suggestion: true,\r\n          recommendedEfficiency: 0.3,\r\n        },\r\n      },\r\n      {\r\n        spell: SPELLS.RAGING_BLOW,\r\n        category: Abilities.SPELL_CATEGORIES.ROTATIONAL,\r\n        cooldown: (haste: number) => (8 - (combatant.hasTalent(SPELLS.INNER_RAGE_TALENT.id) ? 1 : 0)) / (1 + haste),\r\n        charges: 2,\r\n        gcd: {\r\n          base: 1500,\r\n        },\r\n      },\r\n      {\r\n        spell: SPELLS.RAMPAGE,\r\n        category: Abilities.SPELL_CATEGORIES.ROTATIONAL, // Needs 85 rage, if using Frothing Berserker one should only Rampage whilst at 100 rage.\r\n        gcd: {\r\n          base: 1500,\r\n        },\r\n      },\r\n      {\r\n        spell: [SPELLS.EXECUTE_FURY, SPELLS.EXECUTE_FURY_MASSACRE],\r\n        category: Abilities.SPELL_CATEGORIES.ROTATIONAL,\r\n        cooldown: (haste: number) => 6 / (1 + haste),\r\n        gcd: {\r\n          base: 1500,\r\n        },\r\n      },\r\n      {\r\n        spell: SPELLS.FURIOUS_SLASH_TALENT,\r\n        category: Abilities.SPELL_CATEGORIES.ROTATIONAL,\r\n        gcd: {\r\n          base: 1500,\r\n        },\r\n        enabled: combatant.hasTalent(SPELLS.FURIOUS_SLASH_TALENT.id),\r\n      },\r\n      {\r\n        spell: SPELLS.SIEGEBREAKER_TALENT,\r\n        category: Abilities.SPELL_CATEGORIES.ROTATIONAL,\r\n        cooldown: 30,\r\n        gcd: {\r\n          base: 1500,\r\n        },\r\n        castEfficiency: {\r\n          suggestion: true,\r\n          recommendedEfficiency: 0.95,\r\n        },\r\n        enabled: combatant.hasTalent(SPELLS.SIEGEBREAKER_TALENT.id),\r\n      },\r\n      // Rotational AOE\r\n      {\r\n        spell: SPELLS.WHIRLWIND_FURY,\r\n        category: Abilities.SPELL_CATEGORIES.ROTATIONAL_AOE,\r\n        gcd: {\r\n          base: 1500,\r\n        },\r\n      },\r\n      {\r\n        spell: SPELLS.DRAGON_ROAR_TALENT,\r\n        category: Abilities.SPELL_CATEGORIES.ROTATIONAL_AOE,\r\n        cooldown: 35,\r\n        gcd: {\r\n          base: 1500,\r\n        },\r\n        enabled: combatant.hasTalent(SPELLS.DRAGON_ROAR_TALENT.id),\r\n        castEfficiency: {\r\n          suggestion: true,\r\n          recommendedEfficiency: 0.8,\r\n        },\r\n      },\r\n      // Others\r\n      {\r\n        spell: SPELLS.VICTORY_RUSH,\r\n        category: Abilities.SPELL_CATEGORIES.OTHERS,\r\n        gcd: {\r\n          base: 1500,\r\n        },\r\n        enabled: !combatant.hasTalent(SPELLS.IMPENDING_VICTORY_TALENT.id),\r\n      },\r\n      {\r\n        spell: SPELLS.IMPENDING_VICTORY_TALENT,\r\n        category: Abilities.SPELL_CATEGORIES.OTHERS,\r\n        cooldown: 30,\r\n        gcd: {\r\n          base: 1500,\r\n        },\r\n        enabled: combatant.hasTalent(SPELLS.IMPENDING_VICTORY_TALENT.id),\r\n      },\r\n      // Cooldown\r\n      {\r\n        spell: SPELLS.RECKLESSNESS,\r\n        category: Abilities.SPELL_CATEGORIES.COOLDOWNS,\r\n        cooldown: 90,\r\n        gcd: {\r\n          base: 1500,\r\n        },\r\n        castEfficiency: {\r\n          suggestion: true,\r\n          recommendedEfficiency: 0.95,\r\n        },\r\n      },\r\n      {\r\n        spell: SPELLS.BLADESTORM_TALENT,\r\n        category: Abilities.SPELL_CATEGORIES.COOLDOWNS,\r\n        cooldown: 60,\r\n        gcd: {\r\n          base: 1500,\r\n        },\r\n        enabled: combatant.hasTalent(SPELLS.BLADESTORM_TALENT.id),\r\n        castEfficiency: {\r\n          suggestion: true,\r\n          recommendedEfficiency: 0.8,\r\n        },\r\n      },\r\n      // Defensive\r\n      {\r\n        spell: SPELLS.ENRAGED_REGENERATION,\r\n        category: Abilities.SPELL_CATEGORIES.DEFENSIVE,\r\n        buffSpellId: SPELLS.ENRAGED_REGENERATION.id,\r\n        cooldown: 120,\r\n        gcd: null,\r\n        castEfficiency: {\r\n          suggestion: true,\r\n          importance: ISSUE_IMPORTANCE.MINOR,\r\n          extraSuggestion: 'Use it to reduce damage taken for a short period.',\r\n        },\r\n      },\r\n      {\r\n        spell: SPELLS.RALLYING_CRY,\r\n        category: Abilities.SPELL_CATEGORIES.DEFENSIVE,\r\n        buffSpellId: SPELLS.RALLYING_CRY_BUFF.id,\r\n        cooldown: 180,\r\n        gcd: {\r\n          base: 1500,\r\n        },\r\n        castEfficiency: {\r\n          suggestion: true,\r\n          recommendedEfficiency: 0.6,\r\n          importance: ISSUE_IMPORTANCE.MINOR,\r\n          extraSuggestion: 'Use it preemptively as a buffer against large AOE, or reactively if you notice your raid is getting dangerously low on health.',\r\n        },\r\n      },\r\n      // Utility\r\n      {\r\n        spell: SPELLS.CHARGE,\r\n        category: Abilities.SPELL_CATEGORIES.UTILITY,\r\n        cooldown: 20 - (combatant.hasTalent(SPELLS.DOUBLE_TIME_TALENT.id) ? 3 : 0),\r\n        charges: 1 + (combatant.hasTalent(SPELLS.DOUBLE_TIME_TALENT.id) ? 1 : 0),\r\n      },\r\n      {\r\n        spell: SPELLS.HEROIC_LEAP,\r\n        category: Abilities.SPELL_CATEGORIES.UTILITY,\r\n        buffSpellId: SPELLS.BOUNDING_STRIDE_BUFF.id,\r\n        cooldown: 45 - (combatant.hasTalent(SPELLS.BOUNDING_STRIDE_TALENT.id) ? 15 : 0),\r\n        charges: 1,\r\n        gcd: null,\r\n      },\r\n      {\r\n        spell: SPELLS.STORM_BOLT_TALENT,\r\n        category: Abilities.SPELL_CATEGORIES.UTILITY,\r\n        cooldown: 30,\r\n        gcd: {\r\n          base: 1500,\r\n        },\r\n        castEfficiency: {\r\n          suggestion: true,\r\n          recommendedEfficiency: 0.4,\r\n          extraSuggestion: 'If you\\'re picking a utility talent over something that increases your mobility or survivability, you better use it.',\r\n        },\r\n        enabled: combatant.hasTalent(SPELLS.STORM_BOLT_TALENT.id),\r\n      },\r\n      {\r\n        spell: SPELLS.PUMMEL,\r\n        category: Abilities.SPELL_CATEGORIES.UTILITY,\r\n        cooldown: 15,\r\n        gcd: null,\r\n      },\r\n      {\r\n        spell: SPELLS.BERSERKER_RAGE,\r\n        category: Abilities.SPELL_CATEGORIES.UTILITY,\r\n        buffSpellId: SPELLS.BERSERKER_RAGE.id,\r\n        cooldown: 60,\r\n        gcd: null,\r\n      },\r\n      {\r\n        spell: SPELLS.HEROIC_THROW,\r\n        category: Abilities.SPELL_CATEGORIES.UTILITY,\r\n        cooldown: 6,\r\n        gcd: {\r\n          base: 1500,\r\n        },\r\n      },\r\n      {\r\n        spell: SPELLS.INTIMIDATING_SHOUT,\r\n        category: Abilities.SPELL_CATEGORIES.UTILITY,\r\n        cooldown: 90,\r\n        gcd: {\r\n          base: 1500,\r\n        },\r\n      },\r\n      {\r\n        spell: SPELLS.PIERCING_HOWL,\r\n        category: Abilities.SPELL_CATEGORIES.UTILITY,\r\n        gcd: {\r\n          base: 1500,\r\n        },\r\n      },\r\n      {\r\n        spell: SPELLS.BATTLE_SHOUT,\r\n        category: Abilities.SPELL_CATEGORIES.UTILITY,\r\n        cooldown: 15,\r\n        gcd: {\r\n          base: 1500,\r\n        },\r\n      },\r\n      {\r\n        spell: SPELLS.TAUNT,\r\n        category: Abilities.SPELL_CATEGORIES.UTILITY,\r\n        cooldown: 8,\r\n        gcd: null,\r\n      },\r\n    ];\r\n  }\r\n}\r\n\r\nexport default Abilities;\r\n","import React from 'react';\r\n\r\nimport CoreAlwaysBeCasting from 'parser/shared/modules/AlwaysBeCasting';\r\n\r\nimport SPELLS from 'common/SPELLS';\r\nimport SpellLink from 'common/SpellLink';\r\nimport { formatPercentage } from 'common/format';\r\nimport { STATISTIC_ORDER } from 'interface/others/StatisticBox';\r\nimport { ThresholdStyle, When } from 'parser/core/ParseResults';\r\nimport { i18n } from '@lingui/core';\r\nimport { t } from '@lingui/macro';\r\n\r\nclass AlwaysBeCasting extends CoreAlwaysBeCasting {\r\n  statisticOrder = STATISTIC_ORDER.CORE(1);\r\n\r\n  get downtimeSuggestionThresholds() {\r\n    return {\r\n      actual: this.downtimePercentage,\r\n      isGreaterThan: {\r\n        minor: 0.10,\r\n        average: 0.15,\r\n        major: 0.20,\r\n      },\r\n      style: ThresholdStyle.PERCENTAGE,\r\n    };\r\n  }\r\n\r\n  suggestions(when: When) {\r\n\r\n    when(this.downtimeSuggestionThresholds)\r\n      .addSuggestion((suggest, actual, recommended) => suggest(<span>Your downtime can be improved. Try to Always Be Casting (ABC). It's better to cast low-priority abilities such as <SpellLink id={SPELLS.WHIRLWIND_FURY.id} /> than it is to do nothing.</span>)\r\n        .icon('spell_mage_altertime')\r\n        .actual(i18n._(t('warrior.fury.suggestions.alwaysBeCasting.downtime')`${formatPercentage(actual)}% downtime`))\r\n        .recommended(`<${formatPercentage(recommended)}% is recommended`)\r\n        .regular(recommended + 0.15).major(recommended + 0.2));\r\n  }\r\n}\r\n\r\nexport default AlwaysBeCasting;\r\n","import SPELLS from 'common/SPELLS';\r\nimport CoreChanneling from 'parser/shared/modules/Channeling';\r\nimport Events, { ApplyBuffEvent, CastEvent, RemoveBuffEvent } from 'parser/core/Events';\r\nimport { Options, SELECTED_PLAYER } from 'parser/core/Analyzer';\r\n\r\nclass Channeling extends CoreChanneling {\r\n  static dependencies = {\r\n    ...CoreChanneling.dependencies,\r\n  };\r\n\r\n  constructor(options: Options) {\r\n    super(options);\r\n    this.addEventListener(Events.applybuff.by(SELECTED_PLAYER), this.onApplyBuff);\r\n    this.addEventListener(Events.removebuff.by(SELECTED_PLAYER), this.onRemoveBuff);\r\n  }\r\n\r\n  onApplyBuff(event: ApplyBuffEvent) {\r\n    // Begin channeling when the bladestorm buff is applied.\r\n    if (SPELLS.BLADESTORM_TALENT.id === event.ability.guid) {\r\n      this.beginChannel(event);\r\n      return;\r\n    }\r\n\r\n    super.onCast(event);\r\n  }\r\n\r\n  onRemoveBuff(event: RemoveBuffEvent) {\r\n    // End channeling when the bladestorm buff is removed.\r\n    if (SPELLS.BLADESTORM_TALENT.id === event.ability.guid) {\r\n      this.endChannel(event);\r\n    }\r\n  }\r\n\r\n  onCast(event: CastEvent) {\r\n    // Bladestorm triggers multiple cast successes after the buff is applied which would cancel the channel, so we manually ignore those here.\r\n    if (SPELLS.BLADESTORM_TALENT.id !== event.ability.guid) {\r\n      super.onCast(event);\r\n    }\r\n  }\r\n}\r\n\r\nexport default Channeling;\r\n","import RESOURCE_TYPES from 'game/RESOURCE_TYPES';\r\nimport ResourceTracker from 'parser/shared/modules/resources/resourcetracker/ResourceTracker';\r\nimport SPELLS from 'common/SPELLS';\r\nimport HIT_TYPES from 'game/HIT_TYPES';\r\nimport Events, { CastEvent, DamageEvent } from 'parser/core/Events';\r\nimport { Options, SELECTED_PLAYER } from 'parser/core/Analyzer';\r\n\r\nconst VENGEANCE_RAGE_REDUCTION = 0.33; //percent\r\nconst RAGE_GEN_FROM_MELEE_HIT_ICD = 1000; //ms\r\nconst RAGE_PER_MELEE_HIT = 2;\r\nconst RAGE_PER_MELEE_HIT_TAKEN = 3;\r\n\r\nclass RageTracker extends ResourceTracker {\r\n  vengeanceRageSaved: number = 0;\r\n  lastMeleeTaken: number = 0;\r\n\r\n  maxResource: number = 100;\r\n\r\n  constructor(options: Options) {\r\n    super(options);\r\n    this.resource = RESOURCE_TYPES.RAGE;\r\n    this.addEventListener(Events.damage.by(SELECTED_PLAYER).spell(SPELLS.MELEE), this.onDamage);\r\n    this.addEventListener(Events.damage.by(SELECTED_PLAYER).spell(SPELLS.MELEE), this.onDamageTaken);\r\n  }\r\n\r\n  get rageSavedByVengeance() {\r\n    return this.vengeanceRageSaved.toFixed(0);\r\n  }\r\n\r\n  getReducedCost(event: CastEvent) {\r\n    let cost = this.getResource(event)?.cost;\r\n    if (!cost) {\r\n      return 0;\r\n    }\r\n    cost /= 10;\r\n    const abilityId = event.ability.guid;\r\n    if (abilityId === SPELLS.REVENGE.id) {\r\n      if (this.selectedCombatant.hasBuff(SPELLS.VENGEANCE_REVENGE.id, event.timestamp)) {\r\n        const newCost = cost * (1 - VENGEANCE_RAGE_REDUCTION);\r\n        this.vengeanceRageSaved += cost - newCost;\r\n        cost = newCost;\r\n      }\r\n    } else if (abilityId === SPELLS.IGNORE_PAIN.id) {\r\n      if (this.selectedCombatant.hasBuff(SPELLS.VENGEANCE_IGNORE_PAIN.id, event.timestamp)) {\r\n        const newCost = cost * (1 - VENGEANCE_RAGE_REDUCTION);\r\n        this.vengeanceRageSaved += cost - newCost;\r\n        cost = newCost;\r\n      }\r\n    }\r\n    return cost;\r\n  }\r\n\r\n  onDamage(event: DamageEvent) {\r\n    this.processInvisibleEnergize(SPELLS.RAGE_AUTO_ATTACKS.id, RAGE_PER_MELEE_HIT);\r\n  }\r\n\r\n  onDamageTaken(event: DamageEvent) {\r\n    if (event.hitType === HIT_TYPES.DODGE || event.hitType === HIT_TYPES.PARRY) {\r\n      return;\r\n    }\r\n\r\n    if (event.timestamp - this.lastMeleeTaken >= RAGE_GEN_FROM_MELEE_HIT_ICD) {\r\n      this.processInvisibleEnergize(SPELLS.RAGE_DAMAGE_TAKEN.id, RAGE_PER_MELEE_HIT_TAKEN);\r\n      this.lastMeleeTaken = event.timestamp;\r\n    }\r\n  }\r\n}\r\n\r\nexport default RageTracker;\r\n","import React from 'react';\r\n\r\nimport Analyzer from 'parser/core/Analyzer';\r\nimport { ThresholdStyle, When } from 'parser/core/ParseResults';\r\nimport Panel from 'interface/others/Panel';\r\nimport Statistic from 'interface/statistics/Statistic';\r\nimport { STATISTIC_ORDER } from 'interface/others/StatisticBox';\r\nimport { formatPercentage } from 'common/format';\r\nimport ResourceBreakdown from 'parser/shared/modules/resources/resourcetracker/ResourceBreakdown';\r\nimport BoringResourceValue from 'interface/statistics/components/BoringResourceValue';\r\nimport RESOURCE_TYPES from 'game/RESOURCE_TYPES';\r\nimport { i18n } from '@lingui/core';\r\nimport { t } from '@lingui/macro';\r\n\r\nimport RageTracker from './RageTracker';\r\n\r\nclass RageDetails extends Analyzer {\r\n  static dependencies = {\r\n    rageTracker: RageTracker,\r\n  };\r\n\r\n  protected rageTracker!: RageTracker;\r\n\r\n  get wastedPercent() {\r\n    return this.rageTracker.wasted / (this.rageTracker.wasted + this.rageTracker.generated) || 0;\r\n  }\r\n\r\n  get efficiencySuggestionThresholds() {\r\n    return {\r\n      actual: 1 - this.wastedPercent,\r\n      isLessThan: {\r\n        minor: 0.95,\r\n        average: 0.90,\r\n        major: .85,\r\n      },\r\n      style: ThresholdStyle.PERCENTAGE,\r\n    };\r\n  }\r\n\r\n  get suggestionThresholds() {\r\n    return {\r\n      actual: this.wastedPercent,\r\n      isGreaterThan: {\r\n        minor: 0.05,\r\n        average: 0.1,\r\n        major: .15,\r\n      },\r\n      style: ThresholdStyle.PERCENTAGE,\r\n    };\r\n  }\r\n\r\n  suggestions(when: When) {\r\n    when(this.suggestionThresholds).addSuggestion((suggest, actual, recommended) => suggest(`You wasted ${formatPercentage(this.wastedPercent)}% of your Rage.`)\r\n      .icon('spell_nature_reincarnation')\r\n      .actual(i18n._(t('warrior.fury.suggestions.rage.wasted')`${formatPercentage(actual)}% wasted`))\r\n      .recommended(`<${formatPercentage(recommended)}% is recommended`));\r\n  }\r\n\r\n  statistic() {\r\n    return (\r\n      <Statistic\r\n        position={STATISTIC_ORDER.CORE(3)}\r\n        size=\"flexible\"\r\n        tooltip={`${this.rageTracker.wasted} out of ${this.rageTracker.wasted + this.rageTracker.generated} Rage wasted.`}\r\n      >\r\n        <BoringResourceValue\r\n          resource={RESOURCE_TYPES.RAGE}\r\n          value={`${formatPercentage(this.wastedPercent)} %`}\r\n          label=\"Rage wasted\"\r\n        />\r\n      </Statistic>\r\n    );\r\n  }\r\n\r\n  tab() {\r\n    return {\r\n      title: 'Rage usage',\r\n      url: 'rage-usage',\r\n      render: () => (\r\n        <Panel>\r\n          <ResourceBreakdown\r\n            tracker={this.rageTracker}\r\n            showSpenders\r\n          />\r\n        </Panel>\r\n      ),\r\n    };\r\n  }\r\n\r\n}\r\n\r\nexport default RageDetails;\r\n","import React from 'react';\r\n\r\nimport Analyzer, { Options, SELECTED_PLAYER } from 'parser/core/Analyzer';\r\n\r\nimport SPELLS from 'common/SPELLS';\r\nimport RESOURCE_TYPES from 'game/RESOURCE_TYPES';\r\nimport Events, { CastEvent } from 'parser/core/Events';\r\nimport { ThresholdStyle, When } from 'parser/core/ParseResults';\r\nimport { i18n } from '@lingui/core';\r\nimport { t } from '@lingui/macro';\r\n\r\nimport SpellLink from 'common/SpellLink';\r\n\r\n/*  Example log:\r\n *  https://www.warcraftlogs.com/reports/KhynM7v96cZkTBdg#fight=6&type=damage-done&source=78\r\n */\r\n\r\nconst RAGE_GENERATORS = [\r\n  SPELLS.RAGING_BLOW,\r\n  SPELLS.BLOODTHIRST,\r\n  SPELLS.EXECUTE_FURY,\r\n  SPELLS.WHIRLWIND_FURY,\r\n  SPELLS.FURIOUS_SLASH_TALENT,\r\n  SPELLS.SIEGEBREAKER_TALENT,\r\n  SPELLS.DRAGON_ROAR_TALENT,\r\n  SPELLS.BLADESTORM_TALENT,\r\n];\r\n\r\n// This whole module is kind of messed up on the theorycrafting level. As of 8.3 there are a lot of times that Rampage isn't the top priority if you have to keep Bloodthirst up for gushing wounds or cast whirlwind before rampage to cleave. TBD in shadowlands\r\nclass MissedRampage extends Analyzer {\r\n  missedRampages: number = 0;\r\n  hasFB: boolean = false;\r\n\r\n  constructor(options: Options) {\r\n    super(options);\r\n    this.addEventListener(Events.cast.by(SELECTED_PLAYER).spell([...RAGE_GENERATORS]), this.onCast);\r\n  }\r\n\r\n  get suggestionThresholds() {\r\n    if (this.hasFB) {\r\n      return {\r\n        actual: this.missedRampages,\r\n        isGreaterThan: {\r\n          minor: 0,\r\n          average: 0,\r\n          major: 0,\r\n        },\r\n        style: ThresholdStyle.NUMBER,\r\n      };\r\n    } else {\r\n      return {\r\n        actual: this.missedRampages,\r\n        isGreaterThan: {\r\n          minor: 0,\r\n          average: 5,\r\n          major: 10,\r\n        },\r\n        style: ThresholdStyle.NUMBER,\r\n      };\r\n    }\r\n  }\r\n\r\n  onCast(event: CastEvent) {\r\n    if (!event.classResources) {\r\n      return;\r\n    }\r\n\r\n    if (!event.classResources.find(classResources => classResources.type === RESOURCE_TYPES.RAGE.id)) {\r\n      return;\r\n    }\r\n\r\n    const rage = event.classResources[0].amount / 10;\r\n    if (rage >= 90) {\r\n      this.missedRampages += 1;\r\n    }\r\n  }\r\n\r\n  suggestions(when: When) {\r\n    when(this.suggestionThresholds).addSuggestion((suggest, actual, recommended) => suggest(\r\n      <>\r\n        There were {actual} times you casted a rage generating ability when you should have cast <SpellLink id={SPELLS.RAMPAGE.id} />.\r\n        <SpellLink id={SPELLS.RAMPAGE.id} /> is your 2nd highest damage ability behind <SpellLink id={SPELLS.EXECUTE_FURY.id} /> and causes you to <SpellLink id={SPELLS.ENRAGE.id} />, increasing all of your damage done.\r\n        You should never hold a <SpellLink id={SPELLS.RAMPAGE.id} />, unless you are casting <SpellLink id={SPELLS.WHIRLWIND_FURY.id} /> to cleave it.\r\n      </>,\r\n    )\r\n      .icon(SPELLS.RAMPAGE.icon)\r\n      .actual(i18n._(t('warrior.fury.suggestions.rampages.missed')`${actual} missed Rampages.`))\r\n      .recommended(`${recommended} is recommended.`));\r\n  }\r\n}\r\n\r\nexport default MissedRampage;\r\n","import React from 'react';\r\nimport PropTypes from 'prop-types';\r\n\r\nimport SPELLS from 'common/SPELLS';\r\nimport SpellLink from 'common/SpellLink';\r\nimport Checklist from 'parser/shared/modules/features/Checklist';\r\nimport ResourceLink from 'common/ResourceLink';\r\nimport RESOURCE_TYPES from 'game/RESOURCE_TYPES';\r\nimport Rule from 'parser/shared/modules/features/Checklist/Rule';\r\nimport Requirement from 'parser/shared/modules/features/Checklist/Requirement';\r\nimport PreparationRule from 'parser/shared/modules/features/Checklist/PreparationRule';\r\nimport GenericCastEfficiencyRequirement from 'parser/shared/modules/features/Checklist/GenericCastEfficiencyRequirement';\r\n\r\nconst FuryWarriorChecklist = ({ combatant, castEfficiency, thresholds }: any) => {\r\n  const AbilityRequirement = (props: any) => (\r\n    <GenericCastEfficiencyRequirement\r\n      castEfficiency={castEfficiency.getCastEfficiencyForSpellId(props.spell)}\r\n      {...props}\r\n    />\r\n  );\r\n  AbilityRequirement.propTypes = {\r\n    spell: PropTypes.number.isRequired,\r\n  };\r\n\r\n  return (\r\n    <Checklist>\r\n      <Rule\r\n        name=\"Use cooldowns effectively\"\r\n        description=\"Your cooldowns are an important contributor to your damage throughput. Try to get in as many efficient casts as the fight allows.\"\r\n      >\r\n        {combatant.hasTalent(SPELLS.SIEGEBREAKER_TALENT.id) && (<AbilityRequirement spell={SPELLS.SIEGEBREAKER_TALENT.id} />)}\r\n        {combatant.hasTalent(SPELLS.SIEGEBREAKER_TALENT.id) && <Requirement name={(<><SpellLink id={SPELLS.RECKLESSNESS.id} /> casts with <SpellLink id={SPELLS.SIEGEBREAKER_TALENT.id} />  </>)} thresholds={thresholds.siegeBreaker} />}\r\n        {combatant.hasTalent(SPELLS.BLADESTORM_TALENT.id) && (<AbilityRequirement spell={SPELLS.BLADESTORM_TALENT.id} />)}\r\n        {combatant.hasTalent(SPELLS.BLADESTORM_TALENT.id) && <Requirement name={(<><SpellLink id={SPELLS.BLADESTORM_TALENT.id} /> casts inside of Enrage </>)} thresholds={thresholds.bladeStorm} />}\r\n        {combatant.hasTalent(SPELLS.DRAGON_ROAR_TALENT.id) && (<AbilityRequirement spell={SPELLS.DRAGON_ROAR_TALENT.id} />)}\r\n        {combatant.hasTalent(SPELLS.DRAGON_ROAR_TALENT.id) && <Requirement name={(<><SpellLink id={SPELLS.DRAGON_ROAR_TALENT.id} /> casts inside of Enrage </>)} thresholds={thresholds.dragonRoar} />}\r\n        <AbilityRequirement spell={SPELLS.RECKLESSNESS.id} />\r\n        <Requirement name={(<><SpellLink id={SPELLS.WHIRLWIND_FURY.id} />  </>)} thresholds={thresholds.whirlWind} />\r\n        {/* We can't detect race, so disable this when it has never been cast. */}\r\n        {castEfficiency.getCastEfficiencyForSpellId(SPELLS.ARCANE_TORRENT_RAGE.id) && (<AbilityRequirement spell={SPELLS.ARCANE_TORRENT_RAGE.id} />)}\r\n      </Rule>\r\n      <Rule\r\n        name=\"Use Rampage\"\r\n        description={(\r\n          <>\r\n            Using <SpellLink id={SPELLS.RAMPAGE.id} /> is an important part of the Fury rotation. If you aren't Enraged, <SpellLink id={SPELLS.RAMPAGE.id} /> should be used as soon as you have enough rage. Also, use <SpellLink id={SPELLS.RAMPAGE.id} /> if you would reach maximum rage otherwise.\r\n          </>\r\n        )}\r\n      >\r\n        <Requirement\r\n          name={(\r\n            <>\r\n              Number of missed <SpellLink id={SPELLS.RAMPAGE.id} /> casts\r\n            </>\r\n          )}\r\n          thresholds={thresholds.missedRampage}\r\n        />\r\n      </Rule>\r\n      <Rule\r\n        name=\"Use your defensive cooldowns\"\r\n        description=\"While you shouldn't cast these defensives on cooldown, be aware of them and use them whenever effective. Not using them at all indicates you might not be aware of them or not using them optimally.\"\r\n      >\r\n        <AbilityRequirement spell={SPELLS.ENRAGED_REGENERATION.id} />\r\n        <AbilityRequirement spell={SPELLS.RALLYING_CRY.id} />\r\n      </Rule>\r\n      <Rule\r\n        name=\"Avoid downtime\"\r\n        description={(\r\n          <>\r\n            As a melee DPS, it is important to stay within range of the target and cast your abiltiies promptly. If you find yourself out of range, try using <SpellLink id={SPELLS.CHARGE.id} /> and <SpellLink id={SPELLS.HEROIC_LEAP.id} /> to get back more quickly.\r\n          </>\r\n        )}\r\n      >\r\n        <Requirement name=\"Downtime\" thresholds={thresholds.downtimeSuggestionThresholds} />\r\n      </Rule>\r\n      <Rule\r\n        name=\"Don't get too angry\"\r\n        description={(\r\n          <>\r\n            Minimizing your wasted <ResourceLink id={RESOURCE_TYPES.RAGE.id} /> should be top priority as a Fury Warrior, so be sure to use <SpellLink id={SPELLS.RAMPAGE.id} /> to avoid this.\r\n          </>\r\n        )}\r\n      >\r\n        <Requirement name=\"Lost Rage\" thresholds={thresholds.rageDetails} />\r\n      </Rule>\r\n\r\n      <PreparationRule thresholds={thresholds} />\r\n    </Checklist>\r\n  );\r\n};\r\n\r\nFuryWarriorChecklist.propTypes = {\r\n  castEfficiency: PropTypes.object.isRequired,\r\n  combatant: PropTypes.shape({\r\n    hasTalent: PropTypes.func.isRequired,\r\n  }).isRequired,\r\n  thresholds: PropTypes.object.isRequired,\r\n};\r\n\r\nexport default FuryWarriorChecklist;\r\n","import React from 'react';\r\nimport Analyzer, { Options, SELECTED_PLAYER } from 'parser/core/Analyzer';\r\nimport SPELLS from 'common/SPELLS';\r\nimport { formatPercentage, formatThousands } from 'common/format';\r\nimport { ThresholdStyle, When } from 'parser/core/ParseResults';\r\nimport Statistic from 'interface/statistics/Statistic';\r\nimport STATISTIC_CATEGORY from 'interface/others/STATISTIC_CATEGORY';\r\nimport BoringSpellValueText from 'interface/statistics/components/BoringSpellValueText';\r\nimport Events, { CastEvent, DamageEvent } from 'parser/core/Events';\r\nimport Enemies from 'parser/shared/modules/Enemies';\r\nimport calculateEffectiveDamage from 'parser/core/calculateEffectiveDamage';\r\nimport SpellLink from 'common/SpellLink';\r\nimport { i18n } from '@lingui/core';\r\nimport { t } from '@lingui/macro';\r\n\r\nconst SIEGEBREAKER_DAMAGE_MODIFIER = 0.15;\r\n\r\n// Example log: https://www.warcraftlogs.com/reports/QHjLTpxknR47CZhm#fight=6&type=damage-done&source=5\r\nclass Siegebreaker extends Analyzer {\r\n  static dependencies = {\r\n    enemies: Enemies,\r\n  };\r\n  damage: number = 0;\r\n  goodRecklessness: number = 0;\r\n  recklessnessCasted: number = 0;\r\n  inValidRecklessness: boolean = false;\r\n  siegeCasted: boolean = false;\r\n  lastRecklessness: CastEvent | null = null;\r\n  protected enemies!: Enemies;\r\n\r\n  constructor(options: Options) {\r\n    super(options);\r\n    this.active = this.selectedCombatant.hasTalent(SPELLS.SIEGEBREAKER_TALENT.id);\r\n\r\n    if (!this.active) {\r\n      return;\r\n    }\r\n\r\n    this.addEventListener(Events.damage.by(SELECTED_PLAYER), this.onPlayerDamage);\r\n    this.addEventListener(Events.cast.by(SELECTED_PLAYER).spell(SPELLS.SIEGEBREAKER_TALENT), this.siegeTurnOn);\r\n    this.addEventListener(Events.cast.by(SELECTED_PLAYER).spell(SPELLS.RECKLESSNESS), this.playerCastedRecklessness);\r\n    this.addEventListener(Events.removebuff.by(SELECTED_PLAYER).spell(SPELLS.RECKLESSNESS), this.buffCheck);\r\n    this.addEventListener(Events.fightend, this.buffCheck);\r\n  }\r\n\r\n  get damagePercent() {\r\n    return this.owner.getPercentageOfTotalDamageDone(this.damage);\r\n  }\r\n\r\n  get dpsValue() {\r\n    return this.damage / (this.owner.fightDuration / 1000);\r\n  }\r\n\r\n  get suggestionThresholds() {\r\n    return {\r\n      actual: (this.goodRecklessness / this.recklessnessCasted),\r\n      isLessThan: {\r\n        minor: .9,\r\n        average: .8,\r\n        major: .7,\r\n      },\r\n      style: ThresholdStyle.PERCENTAGE,\r\n    };\r\n  }\r\n\r\n  playerCastedRecklessness(event: CastEvent) {\r\n    this.inValidRecklessness = true;\r\n    this.recklessnessCasted += 1;\r\n    this.lastRecklessness = event;\r\n  }\r\n\r\n  siegeTurnOn() {\r\n    if (this.inValidRecklessness) {\r\n      this.siegeCasted = true;\r\n    }\r\n  }\r\n\r\n  buffCheck() {\r\n    if (this.inValidRecklessness && this.siegeCasted) {\r\n      this.goodRecklessness += 1;\r\n    } else if (this.inValidRecklessness) {\r\n      // lastRecklessness cant be null when validRecklesness is true\r\n      this.lastRecklessness!.meta = {\r\n        isInefficientCast: true,\r\n        inefficientCastReason: `You didn't cast Siege Breaker during this Recklessness.`,\r\n      };\r\n    }\r\n    this.inValidRecklessness = false;\r\n    this.siegeCasted = false;\r\n  }\r\n\r\n  onPlayerDamage(event: DamageEvent) {\r\n    const enemy = this.enemies.getEntity(event);\r\n    if (enemy && enemy.hasBuff(SPELLS.SIEGEBREAKER_DEBUFF.id)) {\r\n      this.damage += calculateEffectiveDamage(event, SIEGEBREAKER_DAMAGE_MODIFIER);\r\n    }\r\n  }\r\n\r\n  suggestions(when: When) {\r\n    when(this.suggestionThresholds).addSuggestion((suggest, actual, recommended) => suggest(<>You're not casting <SpellLink id={SPELLS.SIEGEBREAKER_TALENT.id} /> and <SpellLink id={SPELLS.RECKLESSNESS.id} /> together.</>)\r\n      .icon(SPELLS.SIEGEBREAKER_TALENT.icon)\r\n      .actual(i18n._(t('warrior.fury.suggestions.siegeBreaker.efficiency')`${formatPercentage(actual)}% of Recklessnesses casts without a Siegebreaker cast`))\r\n      .recommended(`${formatPercentage(recommended)}+% is recommended`));\r\n  }\r\n\r\n  statistic() {\r\n    return (\r\n      <Statistic\r\n        category={STATISTIC_CATEGORY.TALENTS}\r\n        size=\"flexible\"\r\n        tooltip={<><strong>{formatThousands(this.damage)} ({formatPercentage(this.damagePercent)}%)</strong> of your damage can be attributed to Siegebreaker's damage bonus.</>}\r\n      >\r\n        <BoringSpellValueText spell={SPELLS.SIEGEBREAKER_TALENT}>\r\n          <>\r\n            {formatThousands(this.dpsValue)} DPS\r\n          </>\r\n        </BoringSpellValueText>\r\n      </Statistic>\r\n    );\r\n  }\r\n}\r\n\r\nexport default Siegebreaker;\r\n","import React from 'react';\r\nimport Analyzer, { Options, SELECTED_PLAYER } from 'parser/core/Analyzer';\r\nimport { ThresholdStyle, When } from 'parser/core/ParseResults';\r\nimport SPELLS from 'common/SPELLS';\r\nimport { formatNumber, formatPercentage, formatThousands } from 'common/format';\r\nimport Statistic from 'interface/statistics/Statistic';\r\nimport STATISTIC_CATEGORY from 'interface/others/STATISTIC_CATEGORY';\r\nimport BoringSpellValueText from 'interface/statistics/components/BoringSpellValueText';\r\nimport Events, { CastEvent, DamageEvent, EnergizeEvent } from 'parser/core/Events';\r\nimport SpellLink from 'common/SpellLink';\r\nimport { i18n } from '@lingui/core';\r\nimport { t } from '@lingui/macro';\r\n\r\n// Example log: /reports/P3FbCaGB4DMyNQxA#fight=47&type=damage-done\r\nclass Bladestorm extends Analyzer {\r\n\r\n  totalDamage: number = 0;\r\n  rageGained: number = 0;\r\n  goodCast: number = 0;\r\n  totalCasts: number = 0;\r\n\r\n  constructor(options: Options) {\r\n    super(options);\r\n    this.active = this.selectedCombatant.hasTalent(SPELLS.BLADESTORM_TALENT.id);\r\n\r\n    if (!this.active) {\r\n      return;\r\n    }\r\n\r\n    this.addEventListener(Events.cast.by(SELECTED_PLAYER).spell(SPELLS.BLADESTORM_TALENT), this.enrageCheck);\r\n    this.addEventListener(Events.damage.by(SELECTED_PLAYER).spell([SPELLS.BLADESTORM_DAMAGE, SPELLS.BLADESTORM_OH_DAMAGE]), this.onBladestormDamage);\r\n    this.addEventListener(Events.energize.by(SELECTED_PLAYER).spell(SPELLS.BLADESTORM_TALENT), this.onBladestormEnergize);\r\n  }\r\n\r\n  get percentageDamage() {\r\n    return this.owner.getPercentageOfTotalDamageDone(this.totalDamage);\r\n  }\r\n\r\n  get suggestionThresholds() {\r\n    return {\r\n      actual: (this.goodCast / this.totalCasts),\r\n      isLessThan: {\r\n        minor: .9,\r\n        average: .8,\r\n        major: .7,\r\n      },\r\n      style: ThresholdStyle.PERCENTAGE,\r\n    };\r\n  }\r\n\r\n  enrageCheck(event: CastEvent) {\r\n    if (this.selectedCombatant.hasBuff(SPELLS.ENRAGE.id)) {\r\n      this.goodCast += 1;\r\n    } else {\r\n      event.meta = event.meta || {};\r\n      event.meta.isInefficientCast = true;\r\n      event.meta.inefficientCastReason = `You casted Bladestorm outside of Enrage.`;\r\n    }\r\n    this.totalCasts += 1;\r\n  }\r\n\r\n  onBladestormDamage(event: DamageEvent) {\r\n    this.totalDamage += event.amount + (event.absorbed || 0);\r\n  }\r\n\r\n  onBladestormEnergize(event: EnergizeEvent) {\r\n    this.rageGained += event.resourceChange;\r\n  }\r\n\r\n  suggestions(when: When) {\r\n    when(this.suggestionThresholds).addSuggestion((suggest, actual, recommended) => suggest(<>You're casting <SpellLink id={SPELLS.BLADESTORM_TALENT.id} /> outside of enrage.</>)\r\n      .icon(SPELLS.SIEGEBREAKER_TALENT.icon)\r\n      .actual(i18n._(t('warrior.fury.suggestions.bladestorm.castsEnrage')`${formatPercentage(1 - actual)}% of Bladestorm casts outside of enrage`))\r\n      .recommended(`${formatPercentage(recommended)}+% is recommended`));\r\n  }\r\n\r\n  statistic() {\r\n    return (\r\n      <Statistic\r\n        category={STATISTIC_CATEGORY.TALENTS}\r\n        size=\"flexible\"\r\n        tooltip={<><strong>{formatThousands(this.totalDamage)} ({formatPercentage(this.percentageDamage)}%)</strong> damage was done by Bladestorm, and <strong>{formatThousands(this.rageGained)}</strong> rage was generated.</>}\r\n      >\r\n        <BoringSpellValueText spell={SPELLS.BLADESTORM_TALENT}>\r\n          <>\r\n            {formatNumber(this.totalDamage / this.owner.fightDuration * 1000)} DPS\r\n          </>\r\n        </BoringSpellValueText>\r\n      </Statistic>\r\n    );\r\n  }\r\n}\r\n\r\nexport default Bladestorm;\r\n","import React from 'react';\r\nimport Analyzer, { Options, SELECTED_PLAYER } from 'parser/core/Analyzer';\r\nimport { ThresholdStyle, When } from 'parser/core/ParseResults';\r\nimport SPELLS from 'common/SPELLS';\r\nimport { formatNumber, formatPercentage, formatThousands } from 'common/format';\r\nimport Statistic from 'interface/statistics/Statistic';\r\nimport STATISTIC_CATEGORY from 'interface/others/STATISTIC_CATEGORY';\r\nimport BoringSpellValueText from 'interface/statistics/components/BoringSpellValueText';\r\nimport Events, { CastEvent, DamageEvent, EnergizeEvent } from 'parser/core/Events';\r\nimport SpellLink from 'common/SpellLink';\r\nimport { i18n } from '@lingui/core';\r\nimport { t } from '@lingui/macro';\r\n\r\n// Example log: /reports/tBFv8P9R3kdDgHKJ#fight=1&type=damage-done&source=19\r\nclass DragonRoar extends Analyzer {\r\n\r\n  targetsSlowed: number = 0;\r\n  totalDamage: number = 0;\r\n  rageGained: number = 0;\r\n  goodCast: number = 0;\r\n  totalCasts: number = 0;\r\n\r\n  constructor(options: Options) {\r\n    super(options);\r\n    this.active = this.selectedCombatant.hasTalent(SPELLS.DRAGON_ROAR_TALENT.id);\r\n\r\n    if (!this.active) {\r\n      return;\r\n    }\r\n\r\n    this.addEventListener(Events.cast.by(SELECTED_PLAYER).spell(SPELLS.DRAGON_ROAR_TALENT), this.enrageCheck);\r\n    this.addEventListener(Events.damage.by(SELECTED_PLAYER).spell(SPELLS.DRAGON_ROAR_TALENT), this.onDragonRoarDamage);\r\n    this.addEventListener(Events.energize.by(SELECTED_PLAYER).spell(SPELLS.DRAGON_ROAR_TALENT), this.onDragonRoarEnergize);\r\n    this.addEventListener(Events.applydebuff.by(SELECTED_PLAYER).spell(SPELLS.DRAGON_ROAR_TALENT), this.onDragonRoarSlow);\r\n  }\r\n\r\n  get percentageDamage() {\r\n    return this.owner.getPercentageOfTotalDamageDone(this.totalDamage);\r\n  }\r\n\r\n  get suggestionThresholds() {\r\n    return {\r\n      actual: (this.goodCast / this.totalCasts),\r\n      isLessThan: {\r\n        minor: .9,\r\n        average: .8,\r\n        major: .7,\r\n      },\r\n      style: ThresholdStyle.PERCENTAGE,\r\n    };\r\n  }\r\n\r\n  enrageCheck(event: CastEvent) {\r\n    if (this.selectedCombatant.hasBuff(SPELLS.ENRAGE.id)) {\r\n      this.goodCast += 1;\r\n    } else {\r\n      event.meta = event.meta || {};\r\n      event.meta.isInefficientCast = true;\r\n      event.meta.inefficientCastReason = `You casted Dragons Roar outside of Enrage.`;\r\n    }\r\n    this.totalCasts += 1;\r\n  }\r\n\r\n  onDragonRoarDamage(event: DamageEvent) {\r\n    this.totalDamage += event.amount + (event.absorbed || 0);\r\n  }\r\n\r\n  onDragonRoarEnergize(event: EnergizeEvent) {\r\n    this.rageGained += event.resourceChange;\r\n  }\r\n\r\n  onDragonRoarSlow() {\r\n    this.targetsSlowed += 1;\r\n  }\r\n\r\n  suggestions(when: When) {\r\n    when(this.suggestionThresholds).addSuggestion((suggest, actual, recommended) => suggest(<>You're casting <SpellLink id={SPELLS.BLADESTORM_TALENT.id} /> outside of enrage.</>)\r\n      .icon(SPELLS.SIEGEBREAKER_TALENT.icon)\r\n      .actual(i18n._(t('warrior.fury.suggestions.dragonRoar.efficiency')`${formatPercentage(1 - actual)}% of Bladestorm casts outside of enrage`))\r\n      .recommended(`${formatPercentage(recommended)}+% is recommended`));\r\n  }\r\n\r\n  statistic() {\r\n    return (\r\n      <Statistic\r\n        category={STATISTIC_CATEGORY.TALENTS}\r\n        size=\"flexible\"\r\n        tooltip={(\r\n          <>\r\n            Damage done: <strong>{formatThousands(this.totalDamage)} ({formatPercentage(this.percentageDamage)}%)</strong><br />\r\n            Rage gained: <strong>{formatThousands(this.rageGained)}</strong><br />\r\n            Enemies slowed: <strong>{formatThousands(this.targetsSlowed)}</strong>\r\n          </>\r\n        )}\r\n      >\r\n        <BoringSpellValueText spell={SPELLS.DRAGON_ROAR_TALENT}>\r\n          <>\r\n            {formatNumber(this.totalDamage / this.owner.fightDuration * 1000)} DPS\r\n          </>\r\n        </BoringSpellValueText>\r\n      </Statistic>\r\n    );\r\n  }\r\n}\r\n\r\nexport default DragonRoar;\r\n","import React from 'react';\r\n\r\nimport Analyzer, { Options } from 'parser/core/Analyzer';\r\n\r\nimport SPELLS from 'common/SPELLS/index';\r\nimport { formatPercentage } from 'common/format';\r\nimport Events, { CastEvent, DamageEvent } from 'parser/core/Events';\r\nimport { SELECTED_PLAYER } from 'parser/core/EventFilter';\r\nimport SpellLink from 'common/SpellLink';\r\nimport { ThresholdStyle, When } from 'parser/core/ParseResults';\r\n\r\nimport SpellUsable from 'parser/shared/modules/SpellUsable';\r\nimport { i18n } from '@lingui/core';\r\nimport { t } from '@lingui/macro';\r\n\r\nimport RageTracker from '../core/RageTracker';\r\n\r\nclass Whirlwind extends Analyzer {\r\n  static dependencies = {\r\n    spellUsable: SpellUsable,\r\n    rageTracker: RageTracker,\r\n  };\r\n  hasDragonsRoar: boolean = false;\r\n  hasBladeStorm: boolean = false;\r\n  lastCastWW: boolean = false;\r\n  drWasAvailable: boolean = false;//dragons roar\r\n  bsWasAvailable: boolean = false;//blade storm\r\n  btWasAvailable: boolean = false;//bloodthirst\r\n  ramWasAvailable: boolean = false;//rampage\r\n  rbWasAvailable: boolean = false;//raging blow\r\n  exWasAvailable: boolean = false;//execute\r\n  lastEvent: CastEvent | null = null;\r\n  enemiesHitWW: string[] = [];\r\n  wasEnraged = false;\r\n  executeThreshold = 0;\r\n  wwCast = 0;\r\n  badWWCast = 0;\r\n  hasWWBuff = false;\r\n  rampageCost = 0;\r\n  protected spellUsable!: SpellUsable;\r\n  protected rageTracker!: RageTracker;\r\n\r\n  constructor(options: Options) {\r\n    super(options);\r\n    this.hasDragonsRoar = this.selectedCombatant.hasTalent(SPELLS.DRAGON_ROAR_TALENT.id);\r\n    this.hasBladeStorm = this.selectedCombatant.hasTalent(SPELLS.BLADESTORM_TALENT.id);\r\n    this.executeThreshold = this.selectedCombatant.hasTalent(SPELLS.MASSACRE_TALENT_FURY.id) ? 0.35 : 0.2;\r\n    this.rampageCost = this.selectedCombatant.hasTalent(SPELLS.CARNAGE_TALENT.id) ? 75 : 85;\r\n    this.rampageCost = this.selectedCombatant.hasTalent(SPELLS.FROTHING_BERSERKER_TALENT.id) ? 95 : this.rampageCost;\r\n\r\n    this.addEventListener(Events.cast.by(SELECTED_PLAYER).spell(SPELLS.WHIRLWIND_FURY), this.spellCheck);\r\n    this.addEventListener(Events.damage.by(SELECTED_PLAYER).spell([SPELLS.WHIRLWIND_FURY_DAMAGE_MH, SPELLS.WHIRLWIND_FURY_DAMAGE_OH]), this.wwDamage);\r\n\r\n    this.addEventListener(Events.applybuff.by(SELECTED_PLAYER).spell(SPELLS.WHIRLWIND_BUFF), this.noHadBuff);\r\n    this.addEventListener(Events.applybuffstack.by(SELECTED_PLAYER).spell(SPELLS.WHIRLWIND_BUFF), this.hadBuff);\r\n\r\n    this.addEventListener(Events.cast.by(SELECTED_PLAYER), this.wasValidWW);\r\n  }\r\n\r\n  get threshold() {\r\n    return ((this.wwCast - this.badWWCast) / this.wwCast);\r\n  }\r\n\r\n  get suggestionThresholds() {\r\n    return {\r\n      actual: this.threshold,\r\n      isLessThan: {\r\n        minor: .9,\r\n        average: .8,\r\n        major: .7,\r\n      },\r\n      style: ThresholdStyle.PERCENTAGE,\r\n    };\r\n  }\r\n\r\n  noHadBuff() {\r\n    this.hasWWBuff = false;\r\n  }\r\n\r\n  hadBuff() {\r\n    this.hasWWBuff = true;\r\n  }\r\n\r\n  //just check what else they could have casted\r\n  spellCheck(event: CastEvent) {\r\n    this.lastEvent = event;\r\n\r\n    this.btWasAvailable = this.spellUsable.isAvailable(SPELLS.BLOODTHIRST.id);\r\n    this.rbWasAvailable = this.spellUsable.isAvailable(SPELLS.RAGING_BLOW.id);\r\n    this.ramWasAvailable = this.rageTracker.current >= this.rampageCost ? this.spellUsable.isAvailable(SPELLS.RAMPAGE.id) : false;\r\n    this.exWasAvailable = this.isExecuteBelowThreshold(event) ? this.spellUsable.isAvailable(SPELLS.EXECUTE_FURY.id) : false;\r\n\r\n    this.bsWasAvailable = this.hasBladeStorm ? this.spellUsable.isAvailable(SPELLS.BLADESTORM_TALENT.id) : false;\r\n    this.drWasAvailable = this.hasDragonsRoar ? this.spellUsable.isAvailable(SPELLS.DRAGON_ROAR_TALENT.id) : false;\r\n\r\n    this.wasEnraged = this.selectedCombatant.hasBuff(SPELLS.ENRAGE.id);\r\n\r\n    this.enemiesHitWW = [];\r\n    this.wwCast += 1;\r\n    this.lastCastWW = true;\r\n  }\r\n\r\n  wwDamage(event: DamageEvent) {\r\n    const enemy = `${event.targetID} ${event.targetInstance || 0}`;\r\n\r\n    if (!this.enemiesHitWW.includes(enemy)) {\r\n      this.enemiesHitWW.push(enemy);\r\n    }\r\n  }\r\n\r\n  isExecuteBelowThreshold(event: CastEvent) {\r\n    if (!event.hitPoints || !event.maxHitPoints) {\r\n      return;\r\n    }\r\n    return event.hitPoints / event.maxHitPoints < this.executeThreshold;\r\n  }\r\n\r\n  wasValidWW(event: CastEvent) {\r\n    if (!this.lastEvent) {\r\n      this.lastEvent = event;\r\n      this.lastEvent.timestamp += 750;\r\n    }\r\n\r\n    if (!this.lastCastWW || event === this.lastEvent || event.timestamp - 750 < this.lastEvent.timestamp) {\r\n      return;\r\n    }\r\n\r\n    this.lastCastWW = false;\r\n\r\n    let badCast = this.btWasAvailable || this.rbWasAvailable || this.ramWasAvailable || this.exWasAvailable;\r\n\r\n    if (this.wasEnraged) {\r\n      badCast = badCast || (this.hasBladeStorm ? this.bsWasAvailable : false);\r\n      badCast = badCast || (this.hasDragonsRoar ? this.drWasAvailable : false);\r\n    }\r\n\r\n    if (this.enemiesHitWW.length >= 2 && !this.hasWWBuff) {\r\n      badCast = false;\r\n    }\r\n\r\n    if (badCast) {\r\n      this.lastEvent.meta = event.meta || {};\r\n      this.lastEvent.meta.isInefficientCast = true;\r\n      this.badWWCast += 1;\r\n    }\r\n  }\r\n\r\n  suggestions(when: When) {\r\n    when(this.suggestionThresholds).addSuggestion((suggest, actual, recommended) => suggest(<>You're casting <SpellLink id={SPELLS.WHIRLWIND_FURY.id} /> poorly. Try to only use it if your other abilities are on cooldown.</>)\r\n      .icon(SPELLS.SIEGEBREAKER_TALENT.icon)\r\n      .actual(i18n._(t('warrior.fury.suggestions.whirlwind.badCasts')`${formatPercentage(actual)}% of bad Whirlwind casts`))\r\n      .recommended(`${formatPercentage(recommended)}+% is recommended`));\r\n  }\r\n\r\n}\r\n\r\nexport default Whirlwind;\r\n","import React from 'react';\r\n\r\nimport BaseChecklist from 'parser/shared/modules/features/Checklist/Module';\r\nimport CastEfficiency from 'parser/shared/modules/CastEfficiency';\r\nimport Combatants from 'parser/shared/modules/Combatants';\r\nimport PreparationRuleAnalyzer from 'parser/shared/modules/features/Checklist/PreparationRuleAnalyzer';\r\n\r\nimport RageDetails from '../../core/RageDetails';\r\nimport RageTracker from '../../core/RageTracker';\r\n\r\nimport AlwaysBeCasting from '../AlwaysBeCasting';\r\nimport MissedRampage from '../../spells/MissedRampage';\r\n\r\nimport Component from './Component';\r\n\r\nimport SiegeBreaker from '../../talents/Siegebreaker';\r\nimport Bladestorm from '../../talents/Bladestorm';\r\nimport DragonRoar from '../../talents/DragonRoar';\r\nimport WhirlWind from '../../spells/Whirlwind';\r\n\r\nclass Checklist extends BaseChecklist {\r\n  static dependencies = {\r\n    alwaysBeCasting: AlwaysBeCasting,\r\n    combatants: Combatants,\r\n    castEfficiency: CastEfficiency,\r\n    rageDetails: RageDetails,\r\n    rageTracker: RageTracker,\r\n    missedRampage: MissedRampage,\r\n    preparationRuleAnalyzer: PreparationRuleAnalyzer,\r\n    siegeBreaker: SiegeBreaker,\r\n    bladeStorm: Bladestorm,\r\n    dragonRoar: DragonRoar,\r\n    whirlWind: WhirlWind,\r\n  };\r\n\r\n  // Core\r\n  protected combatants!: Combatants;\r\n  protected castEfficiency!: CastEfficiency;\r\n  protected preparationRuleAnalyzer!: PreparationRuleAnalyzer;\r\n  protected alwaysBeCasting!: AlwaysBeCasting;\r\n\r\n  // Spells\r\n  protected whirlWind!: WhirlWind;\r\n\r\n  // Talents\r\n  protected siegeBreaker!: SiegeBreaker;\r\n  protected bladeStorm!: Bladestorm;\r\n  protected dragonRoar!: DragonRoar;\r\n\r\n  // Resources\r\n  protected rageDetails!: RageDetails;\r\n  protected missedRampage!: MissedRampage;\r\n\r\n  render() {\r\n    return (\r\n      <Component\r\n        combatant={this.combatants.selected}\r\n        castEfficiency={this.castEfficiency}\r\n        thresholds={{\r\n          ...this.preparationRuleAnalyzer.thresholds,\r\n          rageDetails: this.rageDetails.suggestionThresholds,\r\n          siegeBreaker: this.siegeBreaker.suggestionThresholds,\r\n          bladeStorm: this.bladeStorm.suggestionThresholds,\r\n          dragonRoar: this.dragonRoar.suggestionThresholds,\r\n          downtimeSuggestionThresholds: this.alwaysBeCasting.downtimeSuggestionThresholds,\r\n          missedRampage: this.missedRampage.suggestionThresholds,\r\n          whirlWind: this.whirlWind.suggestionThresholds,\r\n        }}\r\n      />\r\n    );\r\n  }\r\n}\r\n\r\nexport default Checklist;\r\n","import SPELLS from 'common/SPELLS';\r\n\r\nimport CoreCooldownThroughputTracker, { BUILT_IN_SUMMARY_TYPES } from 'parser/shared/modules/CooldownThroughputTracker';\r\n\r\nclass CooldownThroughputTracker extends CoreCooldownThroughputTracker {\r\n  static cooldownSpells = [\r\n    ...CoreCooldownThroughputTracker.cooldownSpells,\r\n    {\r\n      spell: SPELLS.RECKLESSNESS,\r\n      summary: [\r\n        BUILT_IN_SUMMARY_TYPES.DAMAGE,\r\n      ],\r\n    },\r\n  ];\r\n}\r\n\r\nexport default CooldownThroughputTracker;\r\n","import SPELLS from 'common/SPELLS';\r\nimport { Options } from 'parser/core/Analyzer';\r\nimport CoreSpellUsable from 'parser/shared/modules/SpellUsable';\r\nimport { CastEvent, DamageEvent } from 'parser/core/Events';\r\n\r\nconst FURY_EXECUTES = [SPELLS.EXECUTE_FURY.id, SPELLS.EXECUTE_FURY_MASSACRE.id];\r\n\r\nclass SpellUsable extends CoreSpellUsable {\r\n  hasSuddenDeath = false;\r\n  lastPotentialTriggerForRagingBlow: CastEvent | null = null;\r\n  lastExecute: number | null = null;\r\n  executeCdrEvents: number[] = [];\r\n\r\n  constructor(options: Options) {\r\n    super(options);\r\n    this.hasSuddenDeath = this.selectedCombatant.hasTalent(SPELLS.SUDDEN_DEATH_TALENT_FURY.id);\r\n  }\r\n\r\n  onCast(event: CastEvent) {\r\n    super.onCast(event);\r\n\r\n    const spellId = event.ability.guid;\r\n    if (spellId === SPELLS.RAGING_BLOW.id) {\r\n      this.lastPotentialTriggerForRagingBlow = event;\r\n    }\r\n\r\n    if (FURY_EXECUTES.includes(spellId)) {\r\n      this.lastExecute = event.timestamp;\r\n    }\r\n  }\r\n\r\n  beginCooldown(spellId: number, cooldownTriggerEvent: CastEvent | DamageEvent) {\r\n    if (spellId === SPELLS.RAGING_BLOW.id) {\r\n      // Raging Blow has a 20% chance to reset its own cooldown when cast. The combatlog has no events for this, so we have to do this hack to account for it. This ends the cooldown upon a new cast if it turns out to still be on cooldown so it looks to be working ok.\r\n      if (this.isOnCooldown(spellId)) {\r\n        this.endCooldown(\r\n          spellId,\r\n          undefined,\r\n          this.lastPotentialTriggerForRagingBlow\r\n            ? this.lastPotentialTriggerForRagingBlow.timestamp\r\n            : undefined,\r\n        );\r\n      }\r\n    }\r\n    if (this.hasSuddenDeath && FURY_EXECUTES.includes(spellId)) {\r\n      if (this.isOnCooldown(spellId) && this.lastExecute) {\r\n        this.executeCdrEvents[this.lastExecute] = this.cooldownRemaining(spellId);\r\n        this.endCooldown(spellId);\r\n      }\r\n    }\r\n\r\n    // We must do this after ending the cd or it will trigger an error\r\n    super.beginCooldown(spellId, cooldownTriggerEvent);\r\n  }\r\n}\r\n\r\nexport default SpellUsable;\r\n","import SPELLS from 'common/SPELLS';\r\n\r\nimport EventsNormalizer from 'parser/core/EventsNormalizer';\r\nimport { AnyEvent, EventType } from 'parser/core/Events';\r\n\r\nclass Enrage extends EventsNormalizer {\r\n  /**\r\n   * The applybuff from enrage is logged after the cast of Bloodthirst if it procs\r\n   * This ensures the enrage buff comes before the cast of Bloodthirst so the haste effect of Enrage updates the GCD correctly\r\n   * @param {Array} events\r\n   * @returns {Array}\r\n   **/\r\n\r\n  normalize(events: AnyEvent[]) {\r\n    const fixedEvents: AnyEvent[] = [];\r\n    events.forEach((event, eventIndex) => {\r\n      fixedEvents.push(event);\r\n\r\n      if (event.type === EventType.ApplyBuff && event.ability.guid === SPELLS.ENRAGE.id) {\r\n        const castTimestamp = event.timestamp;\r\n\r\n        for (let previousEventIndex = eventIndex; previousEventIndex >= 0; previousEventIndex -= 1) {\r\n          const previousEvent = fixedEvents[previousEventIndex];\r\n          if ((castTimestamp - previousEvent.timestamp) > 50) {\r\n            break;\r\n          }\r\n          if (previousEvent.type === EventType.Cast && previousEvent.ability.guid === SPELLS.BLOODTHIRST.id && previousEvent.sourceID === event.sourceID) {\r\n            fixedEvents.splice(previousEventIndex, 1);\r\n            fixedEvents.push(previousEvent);\r\n            previousEvent.__modified = true;\r\n            break;\r\n          }\r\n        }\r\n      }\r\n    });\r\n\r\n    return fixedEvents;\r\n  }\r\n}\r\n\r\nexport default Enrage;\r\n","import React from 'react';\r\n\r\nimport Analyzer, { Options, SELECTED_PLAYER } from 'parser/core/Analyzer';\r\nimport { ThresholdStyle, When } from 'parser/core/ParseResults';\r\n\r\nimport StatTracker from 'parser/shared/modules/StatTracker';\r\nimport Events, { DamageEvent } from 'parser/core/Events';\r\nimport SPELLS from 'common/SPELLS';\r\nimport SpellLink from 'common/SpellLink';\r\nimport { formatNumber, formatPercentage, formatThousands } from 'common/format';\r\nimport Statistic from 'interface/statistics/Statistic';\r\nimport UptimeIcon from 'interface/icons/Uptime';\r\nimport BoringSpellValueText from 'interface/statistics/components/BoringSpellValueText';\r\nimport calculateEffectiveDamage from 'parser/core/calculateEffectiveDamage';\r\nimport { i18n } from '@lingui/core';\r\nimport { t } from '@lingui/macro';\r\n\r\nclass Enrage extends Analyzer {\r\n  static dependencies = {\r\n    statTracker: StatTracker,\r\n  };\r\n  totalDamage: number = 0;\r\n  damage: number = 0;\r\n  protected statTracker!: StatTracker;\r\n\r\n  constructor(options: Options) {\r\n    super(options);\r\n\r\n    this.addEventListener(Events.damage.by(SELECTED_PLAYER), this.onPlayerDamage);\r\n  }\r\n\r\n  get uptime() {\r\n    return this.selectedCombatant.getBuffUptime(SPELLS.ENRAGE.id) / this.owner.fightDuration;\r\n  }\r\n\r\n  get dpsIncrease() {\r\n    return this.damage / (this.owner.fightDuration / 1000);\r\n  }\r\n\r\n  get damageTotalPercent() {\r\n    return this.owner.getPercentageOfTotalDamageDone(this.damage);\r\n  }\r\n\r\n  get suggestionThresholds() {\r\n    return {\r\n      actual: this.uptime,\r\n      isLessThan: {\r\n        minor: 0.7,\r\n        average: 0.65,\r\n        major: 0.6,\r\n      },\r\n      style: ThresholdStyle.PERCENTAGE,\r\n    };\r\n  }\r\n\r\n  onPlayerDamage(event: DamageEvent) {\r\n    if (this.selectedCombatant.hasBuff(SPELLS.ENRAGE.id)) {\r\n      this.damage += calculateEffectiveDamage(event, this.statTracker.currentMasteryPercentage);\r\n      this.totalDamage += event.amount;\r\n    }\r\n  }\r\n\r\n  suggestions(when: When) {\r\n    when(this.suggestionThresholds)\r\n      .addSuggestion((suggest, actual, recommended) => suggest(<>Your <SpellLink id={SPELLS.ENRAGE.id} /> uptime can be improved.</>)\r\n        .icon(SPELLS.ENRAGE.icon)\r\n        .actual(i18n._(t('warrior.fury.suggestions.enrage.uptime')`${formatPercentage(actual)}% Enrage uptime`))\r\n        .recommended(`>${formatPercentage(recommended)}% is recommended`));\r\n  }\r\n\r\n  statistic() {\r\n    return (\r\n      <Statistic\r\n        size=\"flexible\"\r\n        tooltip={<>You did <strong>{formatThousands(this.damage)} ({formatPercentage(this.damageTotalPercent)}%)</strong> damage while enraged, contributing <strong>{formatNumber(this.dpsIncrease)}</strong> DPS.</>}\r\n      >\r\n        <BoringSpellValueText spell={SPELLS.ENRAGE}>\r\n          <>\r\n            <UptimeIcon /> {formatPercentage(this.uptime)}% <small>uptime</small>\r\n          </>\r\n        </BoringSpellValueText>\r\n      </Statistic>\r\n    );\r\n  }\r\n}\r\n\r\nexport default Enrage;\r\n","import React from 'react';\r\n\r\nimport Analyzer, { Options, SELECTED_PLAYER } from 'parser/core/Analyzer';\r\nimport Events, { DamageEvent, EnergizeEvent } from 'parser/core/Events';\r\n\r\nimport SPELLS from 'common/SPELLS';\r\nimport RESOURCE_TYPES from 'game/RESOURCE_TYPES';\r\nimport { formatPercentage, formatThousands } from 'common/format';\r\nimport UptimeIcon from 'interface/icons/Uptime';\r\nimport Statistic from 'interface/statistics/Statistic';\r\nimport BoringSpellValueText from 'interface/statistics/components/BoringSpellValueText';\r\n\r\nclass Recklessness extends Analyzer {\r\n  reckRageGen: number = 0;\r\n  totalRageGen: number = 0;\r\n  reckDamage: number = 0;\r\n\r\n  constructor(options: Options) {\r\n    super(options);\r\n\r\n    this.addEventListener(Events.energize.by(SELECTED_PLAYER).to(SELECTED_PLAYER), this.onPlayerEnergize);\r\n    this.addEventListener(Events.damage.by(SELECTED_PLAYER), this.onPlayerDamage);\r\n  }\r\n\r\n  get uptime() {\r\n    return this.selectedCombatant.getBuffUptime(SPELLS.RECKLESSNESS.id) / this.owner.fightDuration;\r\n  }\r\n\r\n  get ratioReckRageGen() {\r\n    return this.reckRageGen / this.totalRageGen;\r\n  }\r\n\r\n  get reckDPS() {\r\n    return this.owner.getPercentageOfTotalDamageDone(this.reckDamage);\r\n  }\r\n\r\n  onPlayerEnergize(event: EnergizeEvent) {\r\n    const resource = event.classResources && event.classResources.find(classResources => classResources.type === RESOURCE_TYPES.RAGE.id);\r\n\r\n    if (!resource) {\r\n      return;\r\n    }\r\n\r\n    if (this.selectedCombatant.hasBuff(SPELLS.RECKLESSNESS.id)) {\r\n      this.reckRageGen += event.resourceChange / 2;\r\n    }\r\n\r\n    this.totalRageGen += event.resourceChange;\r\n  }\r\n\r\n  onPlayerDamage(event: DamageEvent) {\r\n    if (this.selectedCombatant.hasBuff(SPELLS.RECKLESSNESS.id)) {\r\n      this.reckDamage += event.amount;\r\n    }\r\n  }\r\n\r\n  statistic() {\r\n    return (\r\n      <Statistic\r\n        size=\"flexible\"\r\n        tooltip={(\r\n          <>\r\n            <strong>Extra Rage Generated:</strong> {this.reckRageGen}<br />\r\n            <strong>Percent of total rage generated during recklessness:</strong> {formatPercentage(this.ratioReckRageGen)}%<br />\r\n            <strong>Percent of total damage done during recklessness:</strong> {formatPercentage(this.reckDPS)}% ({formatThousands(this.reckDamage)})\r\n          </>\r\n        )}\r\n      >\r\n        <BoringSpellValueText spell={SPELLS.RECKLESSNESS}>\r\n          <>\r\n            <UptimeIcon /> {formatPercentage(this.uptime)}% <small>uptime</small>\r\n          </>\r\n        </BoringSpellValueText>\r\n      </Statistic>\r\n    );\r\n  }\r\n}\r\n\r\nexport default Recklessness;\r\n","import React from 'react';\r\nimport Analyzer, { Options, SELECTED_PLAYER } from 'parser/core/Analyzer';\r\nimport SPELLS from 'common/SPELLS';\r\nimport { formatNumber } from 'common/format';\r\nimport Statistic from 'interface/statistics/Statistic';\r\nimport STATISTIC_CATEGORY from 'interface/others/STATISTIC_CATEGORY';\r\nimport BoringSpellValueText from 'interface/statistics/components/BoringSpellValueText';\r\nimport RESOURCE_TYPES from 'game/RESOURCE_TYPES';\r\nimport SpellUsable from 'parser/shared/modules/SpellUsable';\r\nimport Events, { CastEvent } from 'parser/core/Events';\r\n\r\nconst RAGE_NEEDED_FOR_PROC = 20;\r\nconst CDR_PER_PROC = 1000; // ms\r\n\r\n// Example log: /reports/41TzG8jMBNkvxg7f#fight=9&type=damage-done\r\nclass AngerManagement extends Analyzer {\r\n  static dependencies = {\r\n    spellUsable: SpellUsable,\r\n  };\r\n\r\n  effectiveReduction: number = 0;\r\n  wastedReduction: number = 0;\r\n\r\n  protected spellUsable!: SpellUsable;\r\n\r\n  constructor(options: Options) {\r\n    super(options);\r\n    this.active = this.selectedCombatant.hasTalent(SPELLS.ANGER_MANAGEMENT_TALENT.id);\r\n\r\n    if (!this.active) {\r\n      return;\r\n    }\r\n\r\n    this.addEventListener(Events.cast.by(SELECTED_PLAYER), this.onPlayerCast);\r\n  }\r\n\r\n  onPlayerCast(event: CastEvent) {\r\n    if (!event || !event.classResources || !event.classResources[0].cost) {\r\n      return;\r\n    }\r\n\r\n    const rage = event.classResources.find(e => e.type === RESOURCE_TYPES.RAGE.id);\r\n    if (!rage || !rage.cost) {\r\n      return;\r\n    }\r\n\r\n    const rageSpent = rage.cost / 10;\r\n    const reduction = rageSpent / RAGE_NEEDED_FOR_PROC * CDR_PER_PROC;\r\n\r\n    if (!this.spellUsable.isOnCooldown(SPELLS.RECKLESSNESS.id)) {\r\n      this.wastedReduction += reduction;\r\n    } else {\r\n      const effectiveReduction = this.spellUsable.reduceCooldown(SPELLS.RECKLESSNESS.id, reduction);\r\n      this.effectiveReduction += effectiveReduction;\r\n      this.wastedReduction += reduction - effectiveReduction;\r\n    }\r\n  }\r\n\r\n  statistic() {\r\n    return (\r\n      <Statistic\r\n        category={STATISTIC_CATEGORY.TALENTS}\r\n        size=\"flexible\"\r\n        tooltip={`${formatNumber(this.wastedReduction / 1000)}s missed CDR`}\r\n      >\r\n        <BoringSpellValueText spell={SPELLS.ANGER_MANAGEMENT_TALENT}>\r\n          <>\r\n            {formatNumber(this.effectiveReduction / 1000)}s Recklessness CDR\r\n          </>\r\n        </BoringSpellValueText>\r\n      </Statistic>\r\n    );\r\n  }\r\n}\r\n\r\nexport default AngerManagement;\r\n","import React from 'react';\r\nimport Analyzer, { Options, SELECTED_PLAYER } from 'parser/core/Analyzer';\r\nimport SPELLS from 'common/SPELLS';\r\nimport { formatNumber, formatPercentage } from 'common/format';\r\nimport Statistic from 'interface/statistics/Statistic';\r\nimport STATISTIC_CATEGORY from 'interface/others/STATISTIC_CATEGORY';\r\nimport BoringSpellValueText from 'interface/statistics/components/BoringSpellValueText';\r\nimport calculateEffectiveDamage from 'parser/core/calculateEffectiveDamage';\r\nimport Events, { DamageEvent } from 'parser/core/Events';\r\n\r\nconst DAMAGE_BONUS = 0.15;\r\nconst RAGE_REDUCTION_RATIO = 75 / 85;\r\n\r\n// Example log: /reports/tBFv8P9R3kdDgHKJ#fight=1&type=damage-done\r\nclass Carnage extends Analyzer {\r\n  damage: number = 0;\r\n  rampageCasts: number = 0;\r\n\r\n  constructor(options: Options) {\r\n    super(options);\r\n\r\n    this.active = this.selectedCombatant.hasTalent(SPELLS.CARNAGE_TALENT.id);\r\n\r\n    if (!this.active) {\r\n      return;\r\n    }\r\n\r\n    this.addEventListener(Events.cast.by(SELECTED_PLAYER).spell(SPELLS.RAMPAGE), this.onRampageCast);\r\n    this.addEventListener(Events.damage.by(SELECTED_PLAYER).spell([SPELLS.RAMPAGE_1, SPELLS.RAMPAGE_2, SPELLS.RAMPAGE_3, SPELLS.RAMPAGE_4]), this.onRampageDamage);\r\n  }\r\n\r\n  get damagePercent() {\r\n    return this.owner.getPercentageOfTotalDamageDone(this.damage);\r\n  }\r\n\r\n  get additionalRampageCasts() {\r\n    return this.rampageCasts - Math.floor(this.rampageCasts * RAGE_REDUCTION_RATIO);\r\n  }\r\n\r\n  onRampageCast() {\r\n    this.rampageCasts += 1;\r\n  }\r\n\r\n  onRampageDamage(event: DamageEvent) {\r\n    this.damage += calculateEffectiveDamage(event, DAMAGE_BONUS);\r\n  }\r\n\r\n  statistic() {\r\n    return (\r\n      <Statistic\r\n        category={STATISTIC_CATEGORY.TALENTS}\r\n        size=\"flexible\"\r\n        tooltip={<>Carnage allowed you to use Rampage <strong>~{this.additionalRampageCasts}</strong> additional times and contributed to <strong>{formatPercentage(this.damagePercent)}%</strong> of your overall damage.</>}\r\n      >\r\n        <BoringSpellValueText spell={SPELLS.CARNAGE_TALENT}>\r\n          <>\r\n            {formatNumber(this.damage)} damage\r\n          </>\r\n        </BoringSpellValueText>\r\n      </Statistic>\r\n    );\r\n  }\r\n}\r\n\r\nexport default Carnage;\r\n","import React from 'react';\r\nimport SPELLS from 'common/SPELLS';\r\nimport Statistic from 'interface/statistics/Statistic';\r\nimport STATISTIC_CATEGORY from 'interface/others/STATISTIC_CATEGORY';\r\nimport BoringSpellValueText from 'interface/statistics/components/BoringSpellValueText';\r\nimport Analyzer, { Options, SELECTED_PLAYER } from 'parser/core/Analyzer';\r\nimport Events, { EnergizeEvent } from 'parser/core/Events';\r\n\r\nclass EndlessRage extends Analyzer {\r\n  rageGen: number = 0;\r\n\r\n  constructor(options: Options) {\r\n    super(options);\r\n\r\n    this.active = this.selectedCombatant.hasTalent(SPELLS.ENDLESS_RAGE_TALENT.id);\r\n\r\n    if (!this.active) {\r\n      return;\r\n    }\r\n\r\n    this.addEventListener(Events.energize.by(SELECTED_PLAYER).spell(SPELLS.ENDLESS_RAGE_ENERGISE), this.onPlayerBuff);\r\n  }\r\n\r\n  onPlayerBuff(event: EnergizeEvent) {\r\n    this.rageGen += event.resourceChange;\r\n  }\r\n\r\n  statistic() {\r\n    return (\r\n      <Statistic\r\n        category={STATISTIC_CATEGORY.TALENTS}\r\n        size=\"flexible\"\r\n      >\r\n        <BoringSpellValueText spell={SPELLS.ENDLESS_RAGE_TALENT}>\r\n          <>\r\n            {this.rageGen} rage generated\r\n          </>\r\n        </BoringSpellValueText>\r\n      </Statistic>\r\n    );\r\n  }\r\n}\r\n\r\nexport default EndlessRage;\r\n","import React from 'react';\r\nimport SPELLS from 'common/SPELLS';\r\nimport SpellLink from 'common/SpellLink';\r\nimport { formatPercentage } from 'common/format';\r\nimport Statistic from 'interface/statistics/Statistic';\r\nimport STATISTIC_CATEGORY from 'interface/others/STATISTIC_CATEGORY';\r\nimport BoringSpellValueText from 'interface/statistics/components/BoringSpellValueText';\r\nimport AbilityTracker from 'parser/shared/modules/AbilityTracker';\r\nimport Analyzer, { Options, SELECTED_PLAYER } from 'parser/core/Analyzer';\r\nimport { ThresholdStyle, When } from 'parser/core/ParseResults';\r\nimport calculateEffectiveDamage from 'parser/core/calculateEffectiveDamage';\r\nimport Events, { DamageEvent } from 'parser/core/Events';\r\nimport { i18n } from '@lingui/core';\r\nimport { t } from '@lingui/macro';\r\n\r\n/*  Example log:\r\n *  https://www.warcraftlogs.com/reports/jz4KrnGBmahcfxt9#fight=43&type=summary&source=9\r\n */\r\n\r\nconst DAMAGE_BONUS = 0.1;\r\n\r\nclass FrothingBerserker extends Analyzer {\r\n  static dependencies = {\r\n    abilityTracker: AbilityTracker,\r\n  };\r\n\r\n  damage: number = 0;\r\n\r\n  constructor(options: Options) {\r\n    super(options);\r\n\r\n    this.active = this.selectedCombatant.hasTalent(SPELLS.FROTHING_BERSERKER_TALENT.id);\r\n\r\n    this.addEventListener(Events.damage.by(SELECTED_PLAYER), this.onPlayerDamage);\r\n  }\r\n\r\n  get damagePercent() {\r\n    return this.owner.getPercentageOfTotalDamageDone(this.damage);\r\n  }\r\n\r\n  get damageIncreasePercent() {\r\n    return this.damagePercent / (1 - this.damagePercent);\r\n  }\r\n\r\n  get uptimePercent() {\r\n    const uptime = this.selectedCombatant.getBuffUptime(SPELLS.FROTHING_BERSERKER.id) / 1000;\r\n    const fightLengthSec = this.owner.fightDuration / 1000;\r\n\r\n    return uptime / fightLengthSec;\r\n  }\r\n\r\n  get suggestionThresholds() {\r\n    return {\r\n      actual: this.uptimePercent,\r\n      isLessThan: {\r\n        minor: 0.65,\r\n        average: 0.6,\r\n        major: 0.55,\r\n      },\r\n      style: ThresholdStyle.PERCENTAGE,\r\n    };\r\n  }\r\n\r\n  onPlayerDamage(event: DamageEvent) {\r\n    if (this.selectedCombatant.hasBuff(SPELLS.FROTHING_BERSERKER.id)) {\r\n      this.damage += calculateEffectiveDamage(event, DAMAGE_BONUS);\r\n    }\r\n  }\r\n\r\n  suggestions(when: When) {\r\n    when(this.suggestionThresholds)\r\n      .addSuggestion((suggest, actual, recommended) => suggest(<>Your <SpellLink id={SPELLS.FROTHING_BERSERKER.id} /> uptime can be improved.</>)\r\n        .icon(SPELLS.FROTHING_BERSERKER.icon)\r\n        .actual(i18n._(t('warrior.fury.suggestions.frothingBerserker.uptime')`${formatPercentage(actual)}% Frothing Berserker uptime`))\r\n        .recommended(`>${formatPercentage(recommended)}% is recommended`));\r\n  }\r\n\r\n  statistic() {\r\n    return (\r\n      <Statistic\r\n        category={STATISTIC_CATEGORY.TALENTS}\r\n        size=\"flexible\"\r\n        tooltip={<>Frothing Berserker contributed to {formatPercentage(this.damagePercent)}% of your overall DPS.</>}\r\n      >\r\n        <BoringSpellValueText spell={SPELLS.FROTHING_BERSERKER_TALENT}>\r\n          <>\r\n            {formatPercentage(this.uptimePercent)}% uptime\r\n          </>\r\n        </BoringSpellValueText>\r\n      </Statistic>\r\n    );\r\n  }\r\n}\r\n\r\nexport default FrothingBerserker;\r\n","import SPELLS from 'common/SPELLS';\r\nimport Analyzer, { Options, SELECTED_PLAYER } from 'parser/core/Analyzer';\r\nimport HIT_TYPES from 'game/HIT_TYPES';\r\nimport Events, { DamageEvent, RemoveBuffEvent } from 'parser/core/Events';\r\n\r\nconst MAX_FURIOUS_SLASH_STACKS = 3;\r\n\r\n/**\r\n furiousSlashTimesByStacks() returns an array with the durations of each FS buff stack\r\n */\r\nclass FuriousSlashTimesByStacks extends Analyzer {\r\n  furiousSlashStacks: number[][] = [];\r\n  lastFuriousSlashStack: number = 0;\r\n  lastFuriousSlashUpdate: number = this.owner.fight.start_time;\r\n\r\n  constructor(options: Options) {\r\n    super(options);\r\n    this.active = this.selectedCombatant.hasTalent(SPELLS.FURIOUS_SLASH_TALENT.id);\r\n    this.furiousSlashStacks = Array.from({ length: MAX_FURIOUS_SLASH_STACKS + 1 }, () => []);\r\n    this.addEventListener(Events.damage.by(SELECTED_PLAYER).spell(SPELLS.FURIOUS_SLASH_TALENT), this.onDamage);\r\n    this.addEventListener(Events.removebuff.by(SELECTED_PLAYER).spell(SPELLS.FURIOUS_SLASH_TALENT_BUFF), this.onRemoveBuff);\r\n  }\r\n\r\n  get furiousSlashTimesByStacks() {\r\n    return this.furiousSlashStacks;\r\n  }\r\n\r\n  onDamage(event: DamageEvent) {\r\n    if (event.hitType === HIT_TYPES.DODGE) {\r\n      return;\r\n    }\r\n    let stack = null;\r\n    if (!this.lastFuriousSlashStack) {\r\n      stack = 1;\r\n    } else {\r\n      if (this.lastFuriousSlashStack < MAX_FURIOUS_SLASH_STACKS) {\r\n        stack = this.lastFuriousSlashStack + 1;\r\n      } else {\r\n        stack = MAX_FURIOUS_SLASH_STACKS;\r\n      }\r\n    }\r\n    this.furiousSlashStacks[this.lastFuriousSlashStack].push(event.timestamp - this.lastFuriousSlashUpdate);\r\n    this.lastFuriousSlashUpdate = event.timestamp;\r\n    this.lastFuriousSlashStack = stack;\r\n  }\r\n\r\n  onRemoveBuff(event: RemoveBuffEvent) {\r\n    this.furiousSlashStacks[this.lastFuriousSlashStack].push(event.timestamp - this.lastFuriousSlashUpdate);\r\n    this.lastFuriousSlashUpdate = event.timestamp;\r\n    this.lastFuriousSlashStack = 0;\r\n  }\r\n}\r\n\r\nexport default FuriousSlashTimesByStacks;\r\n","import React from 'react';\r\nimport Analyzer, { Options } from 'parser/core/Analyzer';\r\nimport { ThresholdStyle, When } from 'parser/core/ParseResults';\r\nimport SPELLS from 'common/SPELLS';\r\nimport SpellLink from 'common/SpellLink';\r\nimport { formatDuration, formatNumber, formatPercentage } from 'common/format';\r\nimport Statistic from 'interface/statistics/Statistic';\r\nimport STATISTIC_CATEGORY from 'interface/others/STATISTIC_CATEGORY';\r\nimport BoringSpellValueText from 'interface/statistics/components/BoringSpellValueText';\r\nimport StatTracker from 'parser/shared/modules/StatTracker';\r\nimport { i18n } from '@lingui/core';\r\nimport { t } from '@lingui/macro';\r\n\r\nimport FuriousSlashTimesByStacks from './FuriousSlashTimesByStacks';\r\n\r\nclass FuriousSlashUptime extends Analyzer {\r\n  static dependencies = {\r\n    statTracker: StatTracker,\r\n    furiousSlashTimesByStacks: FuriousSlashTimesByStacks,\r\n  };\r\n  protected furiousSlashTimesByStacks!: FuriousSlashTimesByStacks;\r\n\r\n  constructor(options: Options) {\r\n    super(options);\r\n    this.active = this.selectedCombatant.hasTalent(SPELLS.FURIOUS_SLASH_TALENT.id);\r\n  }\r\n\r\n  get furiousSlashTimesByStack() {\r\n    return this.furiousSlashTimesByStacks.furiousSlashTimesByStacks;\r\n  }\r\n\r\n  get numberTimesDropped() {\r\n    return this.furiousSlashTimesByStack[0].length - 1;\r\n  }\r\n\r\n  get uptime() {\r\n    const stacks = Object.values(this.furiousSlashTimesByStack).map((e) => e.reduce((a, b) => a + b, 0));\r\n    stacks.shift();\r\n    let value = 0;\r\n    stacks.forEach(function(i) {\r\n      value += i;\r\n    });\r\n    return value;\r\n    //find the highest stack count possible, and return the uptime at that amount of stacks\r\n  }\r\n\r\n  get uptimeSuggestionThresholds() {\r\n    return {\r\n      actual: this.numberTimesDropped,\r\n      isGreaterThan: {\r\n        minor: 0,\r\n        average: 1,\r\n        major: 2,\r\n      },\r\n      style: ThresholdStyle.NUMBER,\r\n    };\r\n  }\r\n\r\n  suggestions(when: When) {\r\n    when(this.uptimeSuggestionThresholds)\r\n      .addSuggestion((suggest, actual, recommended) => suggest(<>You dropped <SpellLink id={SPELLS.FURIOUS_SLASH_TALENT.id} /> multiply times throughout the fight. This can be improved.</>)\r\n        .icon(SPELLS.FURIOUS_SLASH_TALENT.icon)\r\n        .actual(i18n._(t('warrior.fury.suggestions.furiousSlash.uptime')`${formatNumber(actual)} times Furious Slash dropped`))\r\n        .recommended(`${formatNumber(recommended)} is recommended`));\r\n  }\r\n\r\n  statistic() {\r\n    return (\r\n      <Statistic\r\n        category={STATISTIC_CATEGORY.TALENTS}\r\n        size=\"flexible\"\r\n        dropdown={(\r\n          <table className=\"table table-condensed\">\r\n            <thead>\r\n              <tr>\r\n                <th>Stacks</th>\r\n                <th>Time (s)</th>\r\n                <th>Time (%)</th>\r\n              </tr>\r\n            </thead>\r\n            <tbody>\r\n              {Object.values(this.furiousSlashTimesByStack).map((e, i) => (\r\n                <tr key={i}>\r\n                  <th>{i}</th>\r\n                  <td>{formatDuration(e.reduce((a, b) => a + b, 0) / 1000)}</td>\r\n                  <td>{formatPercentage(e.reduce((a, b) => a + b, 0) / this.owner.fightDuration)}%</td>\r\n                </tr>\r\n              ))}\r\n            </tbody>\r\n          </table>\r\n        )}\r\n      >\r\n        <BoringSpellValueText spell={SPELLS.FURIOUS_SLASH_TALENT}>\r\n          <>\r\n            {formatPercentage(this.uptime / this.owner.fightDuration)}% stack uptime\r\n          </>\r\n        </BoringSpellValueText>\r\n      </Statistic>\r\n    );\r\n  }\r\n}\r\n\r\nexport default FuriousSlashUptime;\r\n","import React from 'react';\r\nimport SPELLS from 'common/SPELLS';\r\nimport { formatNumber, formatPercentage, formatThousands } from 'common/format';\r\nimport Statistic from 'interface/statistics/Statistic';\r\nimport STATISTIC_CATEGORY from 'interface/others/STATISTIC_CATEGORY';\r\nimport BoringSpellValueText from 'interface/statistics/components/BoringSpellValueText';\r\nimport Analyzer, { Options, SELECTED_PLAYER } from 'parser/core/Analyzer';\r\nimport Events, { DamageEvent, HealEvent } from 'parser/core/Events';\r\n\r\n// Example Log: https://www.warcraftlogs.com/reports/NcRzTFqvyxaYDMBb#fight=8&type=healing&source=7\r\nclass ImpendingVicory extends Analyzer {\r\n  totalDamage: number = 0;\r\n  totalHeal: number = 0;\r\n\r\n  constructor(options: Options) {\r\n    super(options);\r\n    this.active = this.selectedCombatant.hasTalent(SPELLS.IMPENDING_VICTORY_TALENT.id);\r\n\r\n    if (!this.active) {\r\n      return;\r\n    }\r\n\r\n    this.addEventListener(Events.heal.by(SELECTED_PLAYER).spell(SPELLS.IMPENDING_VICTORY_TALENT_HEAL), this.onImpendingVictoryHeal);\r\n    this.addEventListener(Events.damage.by(SELECTED_PLAYER).spell(SPELLS.IMPENDING_VICTORY_TALENT), this.onImpendingVictoryDamage);\r\n  }\r\n\r\n  get percentageDamage() {\r\n    return this.owner.getPercentageOfTotalDamageDone(this.totalDamage);\r\n  }\r\n\r\n  onImpendingVictoryDamage(event: DamageEvent) {\r\n    this.totalDamage += event.amount + (event.absorbed || 0);\r\n  }\r\n\r\n  onImpendingVictoryHeal(event: HealEvent) {\r\n    this.totalHeal += event.amount;\r\n  }\r\n\r\n  statistic() {\r\n    return (\r\n      <Statistic\r\n        category={STATISTIC_CATEGORY.TALENTS}\r\n        size=\"flexible\"\r\n        tooltip={<><strong>{formatThousands(this.totalDamage)} ({formatPercentage(this.percentageDamage)}%)</strong> damage was done by Impending Victory.</>}\r\n      >\r\n        <BoringSpellValueText spell={SPELLS.IMPENDING_VICTORY_TALENT}>\r\n          <>\r\n            {formatNumber(this.totalHeal)} Healing\r\n          </>\r\n        </BoringSpellValueText>\r\n      </Statistic>\r\n    );\r\n  }\r\n}\r\n\r\nexport default ImpendingVicory;\r\n","import React from 'react';\r\nimport Analyzer, { Options, SELECTED_PLAYER } from 'parser/core/Analyzer';\r\nimport Statistic from 'interface/statistics/Statistic';\r\nimport STATISTIC_CATEGORY from 'interface/others/STATISTIC_CATEGORY';\r\nimport BoringSpellValueText from 'interface/statistics/components/BoringSpellValueText';\r\nimport Events, { ApplyBuffEvent, DamageEvent, EnergizeEvent } from 'parser/core/Events';\r\nimport SPELLS from 'common/SPELLS';\r\n\r\nconst BUFFER_MS = 50;\r\n\r\nconst RAGE_GAIN_WW_ON_USE = 3;\r\nconst RAGE_GAIN_WW_ON_HIT = 1;\r\nconst WW_ON_HIT_RAGE_CAP = 5;\r\n\r\ntype WhirlwindInfo = {\r\n  resourceChange: number,\r\n  triggeredEnrage: boolean,\r\n  targetsHit: number,\r\n  isFirstRoundOfDamage: boolean,\r\n  hasRecklessness: boolean,\r\n}\r\n\r\n// Example log: https://www.warcraftlogs.com/reports/6xwyNCLRkrtahfWg#fight=24&type=damage-done\r\nclass MeatCleaver extends Analyzer {\r\n  whirlwindEvents: WhirlwindInfo[] = [];\r\n  lastWhirlwindCast: number = 0;\r\n\r\n  constructor(options: Options) {\r\n    super(options);\r\n    this.active = this.selectedCombatant.hasTalent(SPELLS.MEAT_CLEAVER_TALENT.id);\r\n    if (!this.active) {\r\n      return;\r\n    }\r\n\r\n    this.addEventListener(Events.energize.to(SELECTED_PLAYER).spell(SPELLS.WHIRLWIND_FURY_ENERGIZE), this.onWhirlwindEnergize);\r\n    this.addEventListener(Events.damage.by(SELECTED_PLAYER).spell([SPELLS.WHIRLWIND_FURY_DAMAGE_MH, SPELLS.WHIRLWIND_FURY_DAMAGE_OH]), this.onWhirlwindDamage);\r\n    this.addEventListener(Events.applybuff.to(SELECTED_PLAYER).spell(SPELLS.ENRAGE), this.onEnrage);\r\n  }\r\n\r\n  get numberOfEnrageTriggers() {\r\n    return this.whirlwindEvents.filter((e) => e.triggeredEnrage).length;\r\n  }\r\n\r\n  get rageGainedByMeatCleaver() {\r\n    return this.whirlwindEvents.reduce((total: number, event) => {\r\n      const rageGained = event.resourceChange;\r\n      // WW generates 3 rage on cast (6 during recklessness). Subtract this to get rage gained from hitting targets\r\n      const rageFromHit = rageGained - (event.hasRecklessness ? RAGE_GAIN_WW_ON_USE * 2 : RAGE_GAIN_WW_ON_USE);\r\n      // WW generates 1 rage per target hit (2 during recklessness) up to 5 targets. Subtract this to get rage gained from trait\r\n      const rageFromMeatCleaver = rageFromHit - (event.targetsHit > WW_ON_HIT_RAGE_CAP ? WW_ON_HIT_RAGE_CAP : event.targetsHit) * (event.hasRecklessness ? RAGE_GAIN_WW_ON_HIT * 2 : RAGE_GAIN_WW_ON_HIT);\r\n      // Due to calculating this backwards, if WW was cast near to full rage, rageFromMeatCleaver could be negative but should just be 0.\r\n      return rageFromMeatCleaver < 0 ? total : total + rageFromMeatCleaver;\r\n    }, 0);\r\n  }\r\n\r\n  // The Energize event ligns up with the cast, so using it for both the rage gain, and timings of the cast.\r\n  onWhirlwindEnergize(event: EnergizeEvent) {\r\n    this.lastWhirlwindCast = event.timestamp;\r\n    this.whirlwindEvents[this.lastWhirlwindCast] = {\r\n      resourceChange: event.resourceChange,\r\n      triggeredEnrage: false,\r\n      targetsHit: 0,\r\n      isFirstRoundOfDamage: true,\r\n      hasRecklessness: this.selectedCombatant.hasBuff(SPELLS.RECKLESSNESS.id),\r\n    };\r\n  }\r\n\r\n  onEnrage(event: ApplyBuffEvent) {\r\n    if (event.timestamp - this.lastWhirlwindCast <= BUFFER_MS) {\r\n      this.whirlwindEvents[this.lastWhirlwindCast].triggeredEnrage = true;\r\n    }\r\n  }\r\n\r\n  onWhirlwindDamage(event: DamageEvent) {\r\n    // Whirlwind triggers damage 3 times. We only need to count the number of targets hit on the first set of MH damage\r\n    if (this.whirlwindEvents[this.lastWhirlwindCast].isFirstRoundOfDamage) {\r\n      if (event.ability.guid === SPELLS.WHIRLWIND_FURY_DAMAGE_MH.id) {\r\n        this.whirlwindEvents[this.lastWhirlwindCast].targetsHit += 1;\r\n      } else {\r\n        this.whirlwindEvents[this.lastWhirlwindCast].isFirstRoundOfDamage = false;\r\n      }\r\n    }\r\n  }\r\n\r\n  statistic() {\r\n    return (\r\n      <Statistic\r\n        category={STATISTIC_CATEGORY.TALENTS}\r\n        size=\"flexible\"\r\n        tooltip={<>Enrage was triggered <strong>{this.numberOfEnrageTriggers}</strong> times by Meat Cleaver.</>}\r\n      >\r\n        <BoringSpellValueText spell={SPELLS.MEAT_CLEAVER_TALENT}>\r\n          <>\r\n            {this.rageGainedByMeatCleaver} rage gained\r\n          </>\r\n        </BoringSpellValueText>\r\n      </Statistic>\r\n    );\r\n  }\r\n}\r\n\r\nexport default MeatCleaver;\r\n","import React from 'react';\r\nimport SPELLS from 'common/SPELLS';\r\nimport { formatNumber, formatPercentage } from 'common/format';\r\nimport Analyzer, { Options, SELECTED_PLAYER } from 'parser/core/Analyzer';\r\nimport Events, { DamageEvent, EnergizeEvent } from 'parser/core/Events';\r\nimport Statistic from 'interface/statistics/Statistic';\r\nimport STATISTIC_CATEGORY from 'interface/others/STATISTIC_CATEGORY';\r\nimport BoringSpellValueText from 'interface/statistics/components/BoringSpellValueText';\r\n\r\nconst BASE_RECKLESSNESS_DURATION = 10 * 1000; // 10 seconds;\r\n\r\n// Example log: https://www.warcraftlogs.com/reports/q3gKvAx6TCaMLyFb#fight=22&type=damage-done&source=28\r\nclass RecklessAbandon extends Analyzer {\r\n  damage: number = 0;\r\n  instantRageGained: number = 0;\r\n  rageGained: number = 0;\r\n\r\n  constructor(options: Options) {\r\n    super(options);\r\n\r\n    this.active = this.selectedCombatant.hasTalent(SPELLS.RECKLESS_ABANDON_TALENT.id);\r\n\r\n    if (!this.active) {\r\n      return;\r\n    }\r\n\r\n    this.addEventListener(Events.energize.by(SELECTED_PLAYER).spell(SPELLS.RECKLESSNESS), this.onRecklessAbandonEnergize);\r\n    this.addEventListener(Events.energize.by(SELECTED_PLAYER).to(SELECTED_PLAYER), this.onPlayerEnergize);\r\n    this.addEventListener(Events.damage.by(SELECTED_PLAYER), this.onPlayerDamage);\r\n  }\r\n\r\n  get damagePercent() {\r\n    return this.owner.getPercentageOfTotalDamageDone(this.damage);\r\n  }\r\n\r\n  hasLast4SecondsOfRecklessness(event: EnergizeEvent | DamageEvent) {\r\n    const reck = this.selectedCombatant.getBuff(SPELLS.RECKLESSNESS.id);\r\n    return reck && ((event.timestamp - reck.start) > BASE_RECKLESSNESS_DURATION);\r\n  }\r\n\r\n  onRecklessAbandonEnergize(event: EnergizeEvent) {\r\n    this.instantRageGained += event.resourceChange;\r\n  }\r\n\r\n  onPlayerEnergize(event: EnergizeEvent) {\r\n    if (this.hasLast4SecondsOfRecklessness(event)) {\r\n      this.rageGained += event.resourceChange / 2;\r\n    }\r\n  }\r\n\r\n  onPlayerDamage(event: DamageEvent) {\r\n    if (this.hasLast4SecondsOfRecklessness(event)) {\r\n      this.damage += event.amount + (event.absorbed || 0);\r\n    }\r\n  }\r\n\r\n  statistic() {\r\n    return (\r\n      <Statistic\r\n        category={STATISTIC_CATEGORY.TALENTS}\r\n        size=\"flexible\"\r\n        tooltip={(\r\n          <>\r\n            In the 4 additional seconds of Recklessness caused by Reckless Abandon:<br />\r\n            Additional rage generated: <strong>{this.rageGained}</strong><br />\r\n            Damage dealt: <strong>{formatNumber(this.damage)} ({formatPercentage(this.damagePercent)}%)</strong>\r\n          </>\r\n        )}\r\n      >\r\n        <BoringSpellValueText spell={SPELLS.RECKLESS_ABANDON_TALENT}>\r\n          <>\r\n            {formatNumber(this.instantRageGained)} instant rage\r\n          </>\r\n        </BoringSpellValueText>\r\n      </Statistic>\r\n    );\r\n  }\r\n}\r\n\r\nexport default RecklessAbandon;\r\n","import React from 'react';\r\nimport SPELLS from 'common/SPELLS';\r\nimport { formatPercentage, formatThousands } from 'common/format';\r\nimport Statistic from 'interface/statistics/Statistic';\r\nimport STATISTIC_CATEGORY from 'interface/others/STATISTIC_CATEGORY';\r\nimport BoringSpellValueText from 'interface/statistics/components/BoringSpellValueText';\r\nimport Analyzer, { Options, SELECTED_PLAYER } from 'parser/core/Analyzer';\r\nimport Events, { CastEvent, DamageEvent } from 'parser/core/Events';\r\n\r\nimport SpellUsable from '../features/SpellUsable';\r\n\r\n/**\r\n * Your attacks have a chance to reset the cooldown of Execute\r\n * and make it usable on any target, regardless of their health.\r\n */\r\n\r\ntype ExecuteDamageTracker = {\r\n  damageDone: number,\r\n  isMainTargetAboveThreshold: boolean,\r\n  isSuddenDeath: boolean,\r\n}\r\n\r\nclass SuddenDeath extends Analyzer {\r\n  static dependencies = {\r\n    spellUsable: SpellUsable,\r\n  };\r\n  suddenDeathProcs: number = 0;\r\n  suddenDeathProcsUsed: number = 0;\r\n  executeDamageEvents: ExecuteDamageTracker[] = [];\r\n  lastExecuteCast: number = 0;\r\n  lastSuddenDeathExecuteCast: number = 0;\r\n  lastSuddenDeathTargetID: number | undefined = 0;\r\n  executeThreshold: number = 0.2;\r\n  protected spellUsable!: SpellUsable;\r\n\r\n  constructor(options: Options) {\r\n    super(options);\r\n\r\n    this.active = this.selectedCombatant.hasTalent(SPELLS.SUDDEN_DEATH_TALENT_FURY.id);\r\n    this.executeThreshold = this.selectedCombatant.hasTalent(SPELLS.MASSACRE_TALENT_FURY.id) ? 0.35 : this.executeThreshold;\r\n\r\n    if (!this.active) {\r\n      return;\r\n    }\r\n\r\n    this.addEventListener(Events.cast.by(SELECTED_PLAYER).spell([SPELLS.EXECUTE_FURY, SPELLS.EXECUTE_FURY_MASSACRE]), this.onExecuteCast);\r\n    this.addEventListener(Events.damage.by(SELECTED_PLAYER).spell([SPELLS.EXECUTE_DAMAGE_FURY, SPELLS.EXECUTE_DAMAGE_OH_FURY]), this.onExecuteDamage);\r\n    this.addEventListener(Events.applybuff.by(SELECTED_PLAYER).spell(SPELLS.SUDDEN_DEATH_TALENT_FURY_BUFF), this.onSuddenDeathProc);\r\n    this.addEventListener(Events.refreshbuff.by(SELECTED_PLAYER).spell(SPELLS.SUDDEN_DEATH_TALENT_FURY_BUFF), this.onSuddenDeathProc);\r\n  }\r\n\r\n  get damageAboveThreshold() {\r\n    return this.executeDamageEvents.reduce((total, event) => event.isMainTargetAboveThreshold ? total + event.damageDone : total, 0);\r\n  }\r\n\r\n  get damagePercent() {\r\n    return this.owner.getPercentageOfTotalDamageDone(this.damageAboveThreshold);\r\n  }\r\n\r\n  get executeCastsAboveThreshold() {\r\n    return this.executeDamageEvents.filter(e => e.isMainTargetAboveThreshold && e.isSuddenDeath).length;\r\n  }\r\n\r\n  get effectiveExecuteCDR() {\r\n    return this.spellUsable.executeCdrEvents.reduce((total, cdrValue, index) => this.executeDamageEvents[index] && !this.executeDamageEvents[index].isMainTargetAboveThreshold ? total + cdrValue : total, 0);\r\n  }\r\n\r\n  onExecuteCast(event: CastEvent) {\r\n    if (this.selectedCombatant.hasBuff(SPELLS.SUDDEN_DEATH_TALENT_FURY_BUFF.id)) {\r\n      this.lastSuddenDeathExecuteCast = event.timestamp;\r\n      this.suddenDeathProcsUsed += 1;\r\n      this.lastSuddenDeathTargetID = event.targetID;\r\n    }\r\n    this.lastExecuteCast = event.timestamp;\r\n  }\r\n\r\n  onExecuteDamage(event: DamageEvent) {\r\n    if (!this.executeDamageEvents[this.lastExecuteCast]) {\r\n      this.executeDamageEvents[this.lastExecuteCast] = {\r\n        damageDone: 0,\r\n        isMainTargetAboveThreshold: false,\r\n        isSuddenDeath: this.lastExecuteCast === this.lastSuddenDeathExecuteCast,\r\n      };\r\n    }\r\n    this.executeDamageEvents[this.lastExecuteCast].damageDone += event.amount + (event.absorbed || 0);\r\n\r\n    if (event.targetID === this.lastSuddenDeathTargetID && this.isExecuteAboveThreshold(event)) {\r\n      this.executeDamageEvents[this.lastExecuteCast].isMainTargetAboveThreshold = true;\r\n    }\r\n  }\r\n\r\n  isExecuteAboveThreshold(event: DamageEvent) {\r\n    if (!event.hitPoints || !event.maxHitPoints) {\r\n      return false;\r\n    }\r\n    return event.hitPoints / event.maxHitPoints > this.executeThreshold;\r\n  }\r\n\r\n  onSuddenDeathProc() {\r\n    this.suddenDeathProcs += 1;\r\n  }\r\n\r\n  statistic() {\r\n    return (\r\n      <Statistic\r\n        category={STATISTIC_CATEGORY.TALENTS}\r\n        size=\"flexible\"\r\n        tooltip={(\r\n          <>\r\n            Sudden Death usage on targets above {formatPercentage(this.executeThreshold)}%<br />\r\n            Damage done: <strong>{formatThousands(this.damageAboveThreshold)} ({formatPercentage(this.damagePercent)}%)</strong><br />\r\n            Execute casts: <strong>{formatThousands(this.executeCastsAboveThreshold)}</strong><br /><br />\r\n\r\n            Sudden Death usage on targets below <u>{formatPercentage(this.executeThreshold)}%</u><br />\r\n            Effective CDR: <strong>{(this.effectiveExecuteCDR / 1000).toFixed(2)}s</strong>\r\n          </>\r\n        )}\r\n      >\r\n        <BoringSpellValueText spell={SPELLS.SUDDEN_DEATH_TALENT_FURY}>\r\n          <>\r\n            {this.suddenDeathProcsUsed} / {this.suddenDeathProcs} procs used\r\n          </>\r\n        </BoringSpellValueText>\r\n      </Statistic>\r\n    );\r\n  }\r\n}\r\n\r\nexport default SuddenDeath;\r\n","import React from 'react';\r\nimport SPELLS from 'common/SPELLS';\r\nimport { formatPercentage, formatThousands } from 'common/format';\r\nimport Analyzer, { Options, SELECTED_PLAYER } from 'parser/core/Analyzer';\r\nimport Events, { DamageEvent } from 'parser/core/Events';\r\nimport Statistic from 'interface/statistics/Statistic';\r\nimport STATISTIC_CATEGORY from 'interface/others/STATISTIC_CATEGORY';\r\nimport BoringSpellValueText from 'interface/statistics/components/BoringSpellValueText';\r\n\r\nconst REDUCTION_BONUS = 0.1;\r\n\r\n// Example Log: https://www.warcraftlogs.com/reports/tBFv8P9R3kdDgHKJ#fight=1&type=damage-done\r\nclass Warpaint extends Analyzer {\r\n\r\n  damageMitigated: number = 0;\r\n  damageTaken: number = 0;\r\n\r\n  constructor(options: Options) {\r\n    super(options);\r\n\r\n    this.active = this.selectedCombatant.hasTalent(SPELLS.WARPAINT_TALENT.id);\r\n\r\n    if (!this.active) {\r\n      return;\r\n    }\r\n\r\n    this.addEventListener(Events.damage.to(SELECTED_PLAYER), this.onPlayerDamageTaken);\r\n  }\r\n\r\n  get damageMitigatedPercent() {\r\n    if (this.damageTaken === 0) {\r\n      return 0;\r\n    }\r\n\r\n    return this.damageMitigated / this.damageTaken;\r\n  }\r\n\r\n  onPlayerDamageTaken(event: DamageEvent) {\r\n    const eventDamageTaken = ((event.amount || 0) + (event.absorbed || 0));\r\n    if (this.selectedCombatant.hasBuff(SPELLS.ENRAGE.id)) {\r\n      const preMitigatedDamage = eventDamageTaken / (1 - REDUCTION_BONUS);\r\n      this.damageMitigated += preMitigatedDamage * REDUCTION_BONUS;\r\n    }\r\n\r\n    this.damageTaken += eventDamageTaken;\r\n  }\r\n\r\n  statistic() {\r\n    return (\r\n      <Statistic\r\n        category={STATISTIC_CATEGORY.TALENTS}\r\n        size=\"flexible\"\r\n        tooltip={<>Warpaint mitigated a total of <strong>{formatThousands(this.damageMitigated)}</strong> damage.</>}\r\n      >\r\n        <BoringSpellValueText spell={SPELLS.WARPAINT_TALENT}>\r\n          <>\r\n            {formatPercentage(this.damageMitigatedPercent)}% <small>damage mitigated</small>\r\n          </>\r\n        </BoringSpellValueText>\r\n      </Statistic>\r\n    );\r\n  }\r\n}\r\n\r\nexport default Warpaint;\r\n","import SPELLS from 'common/SPELLS';\r\nimport CoreBuffs from 'parser/core/modules/Buffs';\r\nimport BLOODLUST_BUFFS from 'game/BLOODLUST_BUFFS';\r\n\r\nclass Buffs extends CoreBuffs {\r\n  buffs() {\r\n    //const combatant = this.selectedCombatant;\r\n\r\n    // This should include ALL buffs that can be applied by your spec.\r\n    // This data can be used by various kinds of modules to improve their results, and modules added in the future may rely on buffs that aren't used today.\r\n    return [\r\n      {\r\n        spellId: Object.keys(BLOODLUST_BUFFS).map(item => Number(item)),\r\n        timelineHighlight: true,\r\n      },\r\n      {\r\n        spellId: SPELLS.ENRAGE.id,\r\n        timelineHighlight: true,\r\n      },\r\n      {\r\n        spellId: SPELLS.RECKLESSNESS.id,\r\n        timelineHighlight: true,\r\n      },\r\n      {\r\n        spellId: SPELLS.SIEGEBREAKER_TALENT.id,\r\n        timelineHighlight: true,\r\n      },\r\n    ];\r\n  }\r\n}\r\n\r\nexport default Buffs;\r\n","import CoreCombatLogParser from 'parser/core/CombatLogParser';\r\n\r\nimport Abilities from './modules/Abilities';\r\nimport AlwaysBeCasting from './modules/features/AlwaysBeCasting';\r\nimport Channeling from './modules/features/Channeling';\r\nimport Checklist from './modules/features/checklist/Module';\r\nimport CooldownThroughputTracker from './modules/features/CooldownThroughputTracker';\r\nimport SpellUsable from './modules/features/SpellUsable';\r\n\r\nimport EnrageNormalizer from './modules/normalizers/Enrage';\r\n\r\nimport Enrage from './modules/buffdebuff/Enrage';\r\n\r\nimport MissedRampage from './modules/spells/MissedRampage';\r\nimport Recklessness from './modules/spells/Recklessness';\r\n\r\nimport AngerManagement from './modules/talents/AngerManagement';\r\nimport Bladestorm from './modules/talents/Bladestorm';\r\nimport Carnage from './modules/talents/Carnage';\r\nimport DragonRoar from './modules/talents/DragonRoar';\r\nimport EndlessRage from './modules/talents/EndlessRage';\r\nimport FrothingBerserker from './modules/talents/FrothingBerserker';\r\nimport FuriousSlashTimesByStacks from './modules/talents/FuriousSlashTimesByStacks';\r\nimport FuriousSlashUptime from './modules/talents/FuriousSlashUptime';\r\nimport ImpendingVicory from './modules/talents/ImpendingVictory';\r\nimport MeatCleaver from './modules/talents/MeatCleaver';\r\nimport RecklessAbandon from './modules/talents/RecklessAbandon';\r\nimport Siegebreaker from './modules/talents/Siegebreaker';\r\nimport SuddenDeath from './modules/talents/SuddenDeath';\r\nimport Warpaint from './modules/talents/Warpaint';\r\n\r\nimport RageTracker from './modules/core/RageTracker';\r\nimport RageDetails from './modules/core/RageDetails';\r\nimport Buffs from './modules/features/Buffs';\r\nimport WhirlWind from './modules/spells/Whirlwind';\r\n\r\nclass CombatLogParser extends CoreCombatLogParser {\r\n  static specModules = {\r\n    abilities: Abilities,\r\n    alwaysBeCasting: AlwaysBeCasting,\r\n    channeling: Channeling,\r\n    checklist: Checklist,\r\n    cooldownThroughputTracker: CooldownThroughputTracker,\r\n    spellUsable: SpellUsable,\r\n    buffs: Buffs,\r\n\r\n    whirlWind: WhirlWind,\r\n    rageTracker: RageTracker,\r\n    rageDetails: RageDetails,\r\n\r\n    enrageNormalizer: EnrageNormalizer,\r\n\r\n    enrageUptime: Enrage,\r\n\r\n    missedRampage: MissedRampage,\r\n    recklessness: Recklessness,\r\n\r\n    angerManagement: AngerManagement,\r\n    bladestorm: Bladestorm,\r\n    carnage: Carnage,\r\n    dragonRoar: DragonRoar,\r\n    endlessRage: EndlessRage,\r\n    frothingBerserker: FrothingBerserker,\r\n    furiousSlashTimesByStacks: FuriousSlashTimesByStacks,\r\n    furiousSlashUptime: FuriousSlashUptime,\r\n    impendingVictory: ImpendingVicory,\r\n    meatCleaver: MeatCleaver,\r\n    recklessAbandon: RecklessAbandon,\r\n    siegebreaker: Siegebreaker,\r\n    suddenDeath: SuddenDeath,\r\n    warpaint: Warpaint,\r\n  };\r\n}\r\n\r\nexport default CombatLogParser;\r\n","export default function calculateEffectiveDamage(event, increase) {\r\n  const raw = (event.amount || 0) + (event.absorbed || 0);\r\n  return raw - (raw / (1 + increase));\r\n}\r\n","import React from 'react';\r\n\r\n// https://thenounproject.com/term/duration/370713/\r\n// duration by Bohdan Burmich from the Noun Project\r\nconst Icon = ({ ...other }) => (\r\n  <svg xmlns=\"http://www.w3.org/2000/svg\" viewBox=\"10 10 80 80\" className=\"icon\" {...other}>\r\n    <path d=\"M50,86.4865c17.4361,0,31.6216-14.1855,31.6216-31.6216c0-16.6168-12.8865-30.2714-29.1892-31.5189v-4.9677h7.2973v-4.8649  H40.2703v4.8649h7.2973v4.9677c-16.3027,1.2475-29.1892,14.902-29.1892,31.5189C18.3784,72.3009,32.5639,86.4865,50,86.4865z M52.4324,28.2236c3.1101,0.2817,6.0664,1.0982,8.7798,2.356l-8.7798,15.2073V28.2236z M47.5676,28.2236v26.6412 c0,1.1008,0.7393,2.0647,1.8029,2.3497c0.209,0.0561,0.4205,0.0827,0.6295,0.0827c0.8533,0,1.6642-0.4504,2.1065-1.2162 l13.3146-23.0616c6.8507,4.8503,11.3357,12.8315,11.3357,21.8454c0,14.7537-12.0031,26.7567-26.7568,26.7567 s-26.7568-12.003-26.7568-26.7567C23.2432,40.9315,33.9501,29.4573,47.5676,28.2236z\" />\r\n  </svg>\r\n);\r\n\r\nexport default Icon;\r\n"],"sourceRoot":""}