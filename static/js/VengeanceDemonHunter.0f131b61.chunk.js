(this.webpackJsonpwowanalyzer=this.webpackJsonpwowanalyzer||[]).push([[54],{734:function(e,t,a){"use strict";a.r(t);var n=a(8),s=a(10),i=a(11),l=a(776),c=a(9),r=a(88),o=function(e){Object(s.a)(a,e);var t=Object(i.a)(a);function a(){var e;Object(n.a)(this,a);for(var s=arguments.length,i=new Array(s),l=0;l<s;l++)i[l]=arguments[l];return(e=t.call.apply(t,[this].concat(i))).resource=r.a.PAIN,e}return Object(c.a)(a,[{key:"getReducedCost",value:function(e){return this.getResource(e).cost?this.getResource(e).cost/10:0}}]),a}(a(773).a),u=a(0),d=a.n(u),h=a(43),m=a(49),E=a(33),f=a(781),g=a(13),T=a(746),b=a(747),p=a(808),O=function(e){Object(s.a)(a,e);var t=Object(i.a)(a);function a(){return Object(n.a)(this,a),t.apply(this,arguments)}return Object(c.a)(a,[{key:"suggestions",value:function(e){var t=this;e(this.suggestionThresholds).addSuggestion((function(e,a,n){return e("You wasted ".concat(Object(E.e)(t.wastedPercent),"% of your Pain.")).icon("ability_demonhunter_demonspikes").actual(g.i18n._({id:"demonhunter.vengeance.suggestions.pain.wasted",defaults:"{0}% wasted",values:{0:Object(E.e)(a)}})).recommended("<".concat(Object(E.e)(n),"% is recommended"))}))}},{key:"statistic",value:function(){return d.a.createElement(T.a,{position:b.a.CORE(1),size:"small",tooltip:"".concat(this.painTracker.wasted," out of ").concat(this.painTracker.wasted+this.painTracker.generated," pain wasted.")},d.a.createElement(p.a,{resource:r.a.PAIN,value:"".concat(Object(E.e)(this.wastedPercent)," %"),label:"Pain wasted"}))}},{key:"tab",value:function(){var e=this;return{title:"Pain usage",url:"pain-usage",render:function(){return d.a.createElement(m.a,null,d.a.createElement(f.a,{tracker:e.painTracker,showSpenders:!0}))}}}},{key:"wastedPercent",get:function(){return this.painTracker.wasted/(this.painTracker.wasted+this.painTracker.generated)||0}},{key:"efficiencySuggestionThresholds",get:function(){return{actual:1-this.wastedPercent,isLessThan:{minor:.95,average:.9,major:.85},style:"percentage"}}},{key:"suggestionThresholds",get:function(){return{actual:this.wastedPercent,isGreaterThan:{minor:.05,average:.1,major:.15},style:"percentage"}}}]),a}(h.c);O.dependencies={painTracker:o};var y=O,A=function(e){Object(s.a)(a,e);var t=Object(i.a)(a);function a(){return Object(n.a)(this,a),t.apply(this,arguments)}return Object(c.a)(a,[{key:"suggestions",value:function(e){e(this.totalTimeWasted/this.owner.fightDuration).isGreaterThan(.2).addSuggestion((function(e,t,a){return e("Your downtime can be improved. Try to Always Be Casting (ABC); try to reduce the delay between casting spells and when you're not healing try to contribute some damage.").icon("spell_mage_altertime").actual(g.i18n._({id:"demonhunter.vengeance.suggestions.alwaysBeCasting.downtime",defaults:"{0}% downtime",values:{0:Object(E.e)(t)}})).recommended("<".concat(Object(E.e)(a),"% is recommended")).regular(a+.05).major(a+.15)}))}}]),a}(a(780).a),S=a(3),_=a(4),v=function(e){Object(s.a)(a,e);var t=Object(i.a)(a);function a(){return Object(n.a)(this,a),t.apply(this,arguments)}return Object(c.a)(a,[{key:"spellbook",value:function(){var e=this.selectedCombatant;return[{spell:S.a.IMMOLATION_AURA,category:a.SPELL_CATEGORIES.ROTATIONAL,cooldown:function(e){return 15/(1+e)},gcd:{base:1500},castEfficiency:{suggestion:!0,recommendedEfficiency:.9,extraSuggestion:d.a.createElement(d.a.Fragment,null,"This is a great Pain filler spell. Try to always cast it on cooldown, specially when using the ",d.a.createElement(_.a,{id:S.a.FALLOUT_TALENT.id})," talent in order to maximize your ",d.a.createElement(_.a,{id:S.a.SOUL_FRAGMENT.id})," generation.")}},{spell:[e.hasTalent(S.a.FRACTURE_TALENT.id)?S.a.FRACTURE_TALENT:S.a.SHEAR],category:a.SPELL_CATEGORIES.ROTATIONAL,cooldown:e.hasTalent(S.a.FRACTURE_TALENT.id)?function(e){return 4.5/(1+e)}:0,charges:e.hasTalent(S.a.FRACTURE_TALENT.id)?2:0,castEfficiency:{suggestion:e.hasTalent(S.a.FRACTURE_TALENT.id),recommendedEfficiency:.9},gcd:{base:1500}},{spell:S.a.SOUL_CLEAVE,category:a.SPELL_CATEGORIES.ROTATIONAL_AOE,gcd:{base:1500},isDefensive:!0},{spell:S.a.METAMORPHOSIS_TANK,buffSpellId:S.a.METAMORPHOSIS_TANK.id,category:a.SPELL_CATEGORIES.DEFENSIVE,cooldown:180,castEfficiency:{suggestion:!0,recommendedEfficiency:.5},isDefensive:!0},{spell:S.a.FIERY_BRAND,buffSpellId:S.a.FIERY_BRAND_DEBUFF.id,category:a.SPELL_CATEGORIES.DEFENSIVE,cooldown:60,gcd:{base:1500},castEfficiency:{suggestion:!0,recommendedEfficiency:.5,extraSuggestion:d.a.createElement(d.a.Fragment,null,"Powerful CD. Use it during high damage moments.")},isDefensive:!0},{spell:S.a.DEMON_SPIKES,category:a.SPELL_CATEGORIES.DEFENSIVE,cooldown:function(e){return 20/(1+e)},charges:2,isDefensive:!0},{spell:S.a.SIGIL_OF_CHAINS_TALENT,category:a.SPELL_CATEGORIES.UTILITY,enabled:e.hasTalent(S.a.SIGIL_OF_CHAINS_TALENT.id),cooldown:90,gcd:{base:1500}},{spell:S.a.SPIRIT_BOMB_TALENT,buffSpellId:S.a.FRAILTY_SPIRIT_BOMB_DEBUFF.id,category:a.SPELL_CATEGORIES.ROTATIONAL,gcd:{base:1500}},{spell:S.a.SOUL_BARRIER_TALENT,buffSpellId:S.a.SOUL_BARRIER_TALENT.id,enabled:e.hasTalent(S.a.SOUL_BARRIER_TALENT.id),category:a.SPELL_CATEGORIES.DEFENSIVE,cooldown:30,gcd:{base:1500},castEfficiency:{suggestion:!0,recommendedEfficiency:.8},isDefensive:!0},{spell:S.a.FELBLADE_TALENT,enabled:e.hasTalent(S.a.FELBLADE_TALENT.id),category:a.SPELL_CATEGORIES.ROTATIONAL,cooldown:function(e){return 15/(1+e)},gcd:{base:1500},castEfficiency:{suggestion:!0,recommendedEfficiency:.9,extraSuggestion:d.a.createElement(d.a.Fragment,null,"This is a great Pain generator spell. ")}},{spell:S.a.FEL_DEVASTATION_TALENT,enabled:e.hasTalent(S.a.FEL_DEVASTATION_TALENT.id),category:a.SPELL_CATEGORIES.ROTATIONAL_AOE,cooldown:60,gcd:{base:1500},castEfficiency:{suggestion:!0,recommendedEfficiency:.8,extraSuggestion:d.a.createElement(d.a.Fragment,null,"This is a great healing and AoE damage burst spell. The only moment you can delay it's cast is if your ",d.a.createElement(_.a,{id:S.a.FIERY_BRAND.id})," (with the ",d.a.createElement(_.a,{id:S.a.CHARRED_FLESH_TALENT.id})," talent) is almost available. ")},isDefensive:!0},{spell:[S.a.SIGIL_OF_SILENCE_CONCENTRATED,S.a.SIGIL_OF_SILENCE_QUICKENED],category:a.SPELL_CATEGORIES.UTILITY,cooldown:60*(1-(e.hasTalent(S.a.QUICKENED_SIGILS_TALENT.id)?.2:0)),gcd:{base:1500}},{spell:[S.a.SIGIL_OF_MISERY_CONCENTRATED,S.a.SIGIL_OF_MISERY_QUICKENED],category:a.SPELL_CATEGORIES.UTILITY,cooldown:60*(1-(e.hasTalent(S.a.QUICKENED_SIGILS_TALENT.id)?.2:0)),gcd:{base:1500}},{spell:[S.a.SIGIL_OF_FLAME_CONCENTRATED,S.a.SIGIL_OF_FLAME_QUICKENED],buffSpellId:S.a.SIGIL_OF_FLAME_DEBUFF.id,category:a.SPELL_CATEGORIES.ROTATIONAL_AOE,cooldown:30*(1-(e.hasTalent(S.a.QUICKENED_SIGILS_TALENT.id)?.2:0)),gcd:{base:1500},castEfficiency:{suggestion:!0,recommendedEfficiency:.9,extraSuggestion:e.hasTalent(S.a.FLAME_CRASH_TALENT.id)?d.a.createElement(d.a.Fragment,null,"Line this up with ",d.a.createElement(_.a,{id:S.a.INFERNAL_STRIKE.id})," to double stack ",d.a.createElement(_.a,{id:S.a.SIGIL_OF_FLAME_CONCENTRATED.id})," because of the ",d.a.createElement(_.a,{id:S.a.FLAME_CRASH_TALENT.id})," talent."):"Cast on cooldown for a dps increase."}},{spell:S.a.INFERNAL_STRIKE,category:a.SPELL_CATEGORIES.UTILITY,cooldown:e.hasTalent(S.a.ABYSSAL_STRIKE_TALENT.id)?12:20,charges:2},{spell:S.a.IMPRISON,category:a.SPELL_CATEGORIES.UTILITY,cooldown:15,gcd:{base:1500}},{spell:S.a.TORMENT,category:a.SPELL_CATEGORIES.UTILITY,cooldown:8},{spell:S.a.CONSUME_MAGIC,category:a.SPELL_CATEGORIES.UTILITY,cooldown:10,gcd:{base:1500}},{spell:S.a.DISRUPT,category:a.SPELL_CATEGORIES.UTILITY,cooldown:15},{spell:S.a.THROW_GLAIVE,category:a.SPELL_CATEGORIES.UTILITY,cooldown:function(e){return 3/(1+e)},gcd:{base:1500}},{spell:S.a.GLIDE,category:a.SPELL_CATEGORIES.UTILITY,gcd:null},{spell:S.a.SOUL_FRAGMENT,category:a.SPELL_CATEGORIES.HIDDEN,gcd:null}]}}]),a}(a(753).a),L=a(26),I=a(785),k=function(e){Object(s.a)(a,e);var t=Object(i.a)(a);function a(){return Object(n.a)(this,a),t.apply(this,arguments)}return a}(I.b);k.cooldownSpells=[].concat(Object(L.a)(I.b.cooldownSpells),[{spell:S.a.METAMORPHOSIS_TANK,summary:[I.a.DAMAGE,I.a.ABSORBED,I.a.HEALING]}]);var C=k,R=function(e){Object(s.a)(a,e);var t=Object(i.a)(a);function a(){var e;Object(n.a)(this,a);for(var s=arguments.length,i=new Array(s),l=0;l<s;l++)i[l]=arguments[l];return(e=t.call.apply(t,[this].concat(i))).buffCheckPhysical=[S.a.DEMON_SPIKES_BUFF.id],e.buffCheckPhysAndMag=[S.a.METAMORPHOSIS_TANK.id],e.debuffCheckPhysAndMag=[S.a.FIERY_BRAND_DEBUFF.id],e}return a}(a(849).a),F=a(7),j=a(203),N=a(767),w=a(757),D=a(777),M=a(755),B=a(756),P=a(748),U=a(760),G=a(58),H=function(e){Object(s.a)(a,e);var t=Object(i.a)(a);function a(){var e;Object(n.a)(this,a);for(var s=arguments.length,i=new Array(s),l=0;l<s;l++)i[l]=arguments[l];return(e=t.call.apply(t,[this].concat(i))).active=e.selectedCombatant.hasTalent(S.a.SPIRIT_BOMB_TALENT.id),e}return Object(c.a)(a,[{key:"uptime",get:function(){return this.enemies.getBuffUptime(S.a.FRAILTY_SPIRIT_BOMB_DEBUFF.id)/this.owner.fightDuration}},{key:"uptimeSuggestionThresholds",get:function(){return{actual:this.uptime,isLessThan:{minor:.9,average:.85,major:.8},style:"percentage"}}}]),Object(c.a)(a,[{key:"suggestions",value:function(e){e(this.uptimeSuggestionThresholds).addSuggestion((function(e,t,a){return e(d.a.createElement(d.a.Fragment,null,"Your ",d.a.createElement(_.a,{id:S.a.FRAILTY_SPIRIT_BOMB_DEBUFF.id})," uptime can be improved. This is easy to maintain and an important source of healing.")).icon(S.a.FRAILTY_SPIRIT_BOMB_DEBUFF.icon).actual(g.i18n._({id:"demonhunter.vengeance.spiritBombFrailtyBuff.uptime",defaults:"{0}% Frailty uptime",values:{0:Object(E.e)(t)}})).recommended(">".concat(Object(E.e)(a),"% is recommended"))}))}},{key:"statistic",value:function(){var e=this.enemies.getBuffUptime(S.a.FRAILTY_SPIRIT_BOMB_DEBUFF.id),t=this.abilityTracker.getAbility(S.a.SPIRIT_BOMB_DAMAGE.id).damageEffective;return d.a.createElement(T.a,{position:b.a.CORE(5),category:G.a.TALENTS,size:"flexible",tooltip:d.a.createElement(d.a.Fragment,null,"Total damage was ",Object(E.f)(t),".",d.a.createElement("br",null),"Total uptime was ",Object(E.a)(e/1e3),".")},d.a.createElement(P.a,{spell:S.a.SPIRIT_BOMB_TALENT},d.a.createElement(d.a.Fragment,null,d.a.createElement(U.a,null)," ",Object(E.e)(this.uptime),"% ",d.a.createElement("small",null,"uptime"))))}}]),a}(h.c);H.dependencies={abilityTracker:M.a,enemies:B.a};var Y=H,K=a(774),V=function(e){Object(s.a)(a,e);var t=Object(i.a)(a);function a(){var e;Object(n.a)(this,a);for(var s=arguments.length,i=new Array(s),l=0;l<s;l++)i[l]=arguments[l];return(e=t.call.apply(t,[this].concat(i))).active=e.selectedCombatant.hasTalent(S.a.VOID_REAVER_TALENT.id),e}return Object(c.a)(a,[{key:"uptime",get:function(){return this.enemies.getBuffUptime(S.a.VOID_REAVER_DEBUFF.id)/this.owner.fightDuration}},{key:"uptimeSuggestionThresholds",get:function(){return{actual:this.uptime,isLessThan:{minor:.9,average:.8,major:.7},style:"percentage"}}}]),Object(c.a)(a,[{key:"suggestions",value:function(e){e(this.uptimeSuggestionThresholds).addSuggestion((function(e,t,a){return e(d.a.createElement(d.a.Fragment,null,"Your ",d.a.createElement(_.a,{id:S.a.VOID_REAVER_DEBUFF.id})," uptime can be improved.")).icon(S.a.VOID_REAVER_TALENT.icon).actual(g.i18n._({id:"demonhunter.vengeance.suggestions.voidReaver.uptime",defaults:"{0}% Void Reaver uptime",values:{0:Object(E.e)(t)}})).recommended(">".concat(Object(E.e)(a),"% is recommended"))}))}},{key:"statistic",value:function(){return d.a.createElement(K.a,{talent:S.a.VOID_REAVER_TALENT.id,position:b.a.CORE(5),value:"".concat(Object(E.e)(this.uptime)," %"),label:"Void Reaver uptime"})}}]),a}(h.c);V.dependencies={enemies:B.a};var W=V,x=a(15),z=function(e){Object(s.a)(a,e);var t=Object(i.a)(a);function a(){var e;Object(n.a)(this,a);for(var s=arguments.length,i=new Array(s),l=0;l<s;l++)i[l]=arguments[l];return(e=t.call.apply(t,[this].concat(i))).castTimestamp=0,e.castSoulsConsumed=0,e.cast=0,e.soulsConsumedByAmount=Array.from({length:6},(function(e){return 0})),e.active=e.selectedCombatant.hasTalent(S.a.SPIRIT_BOMB_TALENT.id)&&!e.selectedCombatant.hasTalent(S.a.FEED_THE_DEMON_TALENT.id),e.addEventListener(x.f.cast.by(h.a).spell(S.a.SPIRIT_BOMB_TALENT),e.onCast),e.addEventListener(x.f.changebuffstack.by(h.a).spell(S.a.SOUL_FRAGMENT_STACK),e.onChangeBuffStack),e.addEventListener(x.f.fightend,e.onFightend),e}return Object(c.a)(a,[{key:"totalGoodCasts",get:function(){return this.soulsConsumedByAmount[4]+this.soulsConsumedByAmount[5]}},{key:"totalCasts",get:function(){return Object.values(this.soulsConsumedByAmount).reduce((function(e,t){return e+t}),0)}},{key:"percentGoodCasts",get:function(){return this.totalGoodCasts/this.totalCasts}},{key:"suggestionThresholdsEfficiency",get:function(){return{actual:this.percentGoodCasts,isLessThan:{minor:.9,average:.85,major:.8},style:"percentage"}}}]),Object(c.a)(a,[{key:"onCast",value:function(e){this.cast>0&&this.countHits(),this.castTimestamp=e.timestamp,this.cast+=1}},{key:"onChangeBuffStack",value:function(e){if(!(e.oldStacks<e.newStacks)&&e.timestamp-this.castTimestamp<100){var t=e.oldStacks-e.newStacks;this.castSoulsConsumed+=t}}},{key:"countHits",value:function(){if(!this.soulsConsumedByAmount[this.castSoulsConsumed])return this.soulsConsumedByAmount[this.castSoulsConsumed]=1,void(this.castSoulsConsumed=0);this.soulsConsumedByAmount[this.castSoulsConsumed]+=1,this.castSoulsConsumed=0}},{key:"onFightend",value:function(){this.countHits()}},{key:"suggestions",value:function(e){var t=this;e(this.suggestionThresholdsEfficiency).addSuggestion((function(e,a,n){return e(d.a.createElement(d.a.Fragment,null,"Try to cast ",d.a.createElement(_.a,{id:S.a.SPIRIT_BOMB_TALENT.id})," at 4 or 5 souls.")).icon(S.a.SPIRIT_BOMB_TALENT.icon).actual(g.i18n._({id:"demonhunter.vengeance.suggestions.spiritBomb.soulsConsumed",defaults:"{0}% of casts at 4+ souls.",values:{0:Object(E.e)(t.percentGoodCasts)}})).recommended(">".concat(Object(E.e)(n),"% is recommended"))}))}},{key:"statistic",value:function(){return d.a.createElement(T.a,{position:b.a.CORE(6),category:G.a.TALENTS,size:"flexible",dropdown:d.a.createElement(d.a.Fragment,null,d.a.createElement("table",{className:"table table-condensed"},d.a.createElement("thead",null,d.a.createElement("tr",null,d.a.createElement("th",null,"Stacks"),d.a.createElement("th",null,"Casts"))),d.a.createElement("tbody",null,Object.values(this.soulsConsumedByAmount).map((function(e,t){return d.a.createElement("tr",{key:t},d.a.createElement("th",null,t),d.a.createElement("td",null,e))})))))},d.a.createElement(P.a,{spell:S.a.SPIRIT_BOMB_TALENT},d.a.createElement(d.a.Fragment,null,Object(E.e)(this.percentGoodCasts),"% ",d.a.createElement("small",null,"good casts"))))}}]),a}(h.c),Q=function(e){Object(s.a)(a,e);var t=Object(i.a)(a);function a(){var e;Object(n.a)(this,a);for(var s=arguments.length,i=new Array(s),l=0;l<s;l++)i[l]=arguments[l];return(e=t.call.apply(t,[this].concat(i))).casts=0,e.totalAbsorbed=0,e.buffApplied=0,e.buffRemoved=0,e.buffLength=0,e.avgBuffLength=0,e.totalBuffLength=0,e.active=e.selectedCombatant.hasTalent(S.a.SOUL_BARRIER_TALENT.id),e.addEventListener(x.f.applybuff.to(h.a).spell(S.a.SOUL_BARRIER_TALENT),e.onApplyBuff),e.addEventListener(x.f.absorbed.to(h.a).spell(S.a.SOUL_BARRIER_TALENT),e.onAbsorb),e.addEventListener(x.f.removebuff.to(h.a).spell(S.a.SOUL_BARRIER_TALENT),e.onRemoveBuff),e}return Object(c.a)(a,[{key:"uptime",get:function(){return this.selectedCombatant.getBuffUptime(S.a.SOUL_BARRIER_TALENT.id)/this.owner.fightDuration}},{key:"suggestionThresholdsEfficiency",get:function(){return{actual:this.uptime,isLessThan:{minor:.35,average:.3,major:.25},style:"percentage"}}}]),Object(c.a)(a,[{key:"onApplyBuff",value:function(e){this.casts+=1,this.buffApplied=e.timestamp}},{key:"onAbsorb",value:function(e){this.totalAbsorbed+=e.amount}},{key:"onRemoveBuff",value:function(e){e.ability.guid===S.a.SOUL_BARRIER_TALENT.id&&(this.buffRemoved=e.timestamp,this.buffLength=this.buffRemoved-this.buffApplied,this.totalBuffLength+=this.buffLength)}},{key:"suggestions",value:function(e){e(this.suggestionThresholdsEfficiency).addSuggestion((function(e,t,a){return e(d.a.createElement(d.a.Fragment,null,"Your uptime with ",d.a.createElement(_.a,{id:S.a.SOUL_BARRIER_TALENT.id})," can be improved.")).icon(S.a.SOUL_BARRIER_TALENT.icon).actual(g.i18n._({id:"demonhunter.vengeance.suggestions.soulBarrier.uptime",defaults:"{0}% Soul Barrier",values:{0:Object(E.e)(t)}})).recommended(">".concat(Object(E.e)(a),"% is recommended"))}))}},{key:"statistic",value:function(){var e=this.totalBuffLength/this.casts/1e3;return d.a.createElement(K.a,{talent:S.a.SOUL_BARRIER_TALENT.id,position:b.a.CORE(7),value:"".concat(Object(E.e)(this.uptime)," %"),label:"Soul Barrier uptime",tooltip:d.a.createElement(d.a.Fragment,null,"Average Buff Length: ",d.a.createElement("strong",null,Object(E.d)(e)," seconds"),d.a.createElement("br",null),"Total Damage Absorbed: ",d.a.createElement("strong",null,Object(E.d)(this.totalAbsorbed)),d.a.createElement("br",null),"Healing ",d.a.createElement("strong",null,this.owner.formatItemHealingDone(this.totalAbsorbed)),d.a.createElement("br",null),"Total Casts: ",d.a.createElement("strong",null,this.casts))})}}]),a}(h.c);Q.dependencies={damageTracker:M.a,enemies:B.a};var Z=Q,J=function(e){Object(s.a)(a,e);var t=Object(i.a)(a);function a(e){var s;return Object(n.a)(this,a),(s=t.call(this,e)).soulsGenerated=0,s.overcap=0,s.soulsSpent=0,s.currentSouls=0,s.addEventListener(x.f.changebuffstack.by(h.a).spell(S.a.SOUL_FRAGMENT_STACK),s.onChangeBuffStack),s}return Object(c.a)(a,[{key:"onChangeBuffStack",value:function(e){if(this.currentSouls=e.newStacks,!(e.oldStacks>5))if(e.oldStacks>e.newStacks){var t=e.oldStacks-e.newStacks;this.soulsSpent+=t}else{var a=e.newStacks-e.oldStacks;this.soulsGenerated+=a,e.newStacks>5&&(this.overcap+=e.newStacks-5)}}}]),a}(h.c),q=function(e){Object(s.a)(a,e);var t=Object(i.a)(a);function a(e){var s;return Object(n.a)(this,a),(s=t.call(this,e)).castTimestamp=void 0,s.totalSoulsConsumedBySpells=0,s.soulsConsumedBySpell={},s.addEventListener(x.f.cast.by(h.a).spell([S.a.SPIRIT_BOMB_TALENT,S.a.SOUL_CLEAVE,S.a.SOUL_BARRIER_TALENT]),s.onCast),s.addEventListener(x.f.changebuffstack.by(h.a).spell(S.a.SOUL_FRAGMENT_STACK),s.onChangeBuffStack),s}return Object(c.a)(a,[{key:"onCast",value:function(e){var t=e.ability.guid;this.soulsConsumedBySpell[t]||(this.soulsConsumedBySpell[t]={name:e.ability.name,souls:0}),this.castTimestamp=e.timestamp,this.trackedSpell=t}},{key:"onChangeBuffStack",value:function(e){if(!(e.oldStacks<e.newStacks||e.oldStacks>J)&&void 0!==this.castTimestamp&&e.timestamp-this.castTimestamp<100){var t=e.oldStacks-e.newStacks;this.soulsConsumedBySpell[this.trackedSpell].souls+=t,this.totalSoulsConsumedBySpells+=t}}},{key:"soulCleaveSouls",value:function(){return void 0===this.soulsConsumedBySpell[S.a.SOUL_CLEAVE.id]?0:this.soulsConsumedBySpell[S.a.SOUL_CLEAVE.id].souls}},{key:"statistic",value:function(){var e=this.soulFragmentsTracker.soulsGenerated-this.totalSoulsConsumedBySpells;return d.a.createElement(T.a,{position:b.a.CORE(6),size:"small",dropdown:d.a.createElement(d.a.Fragment,null,d.a.createElement("table",{className:"table table-condensed"},d.a.createElement("thead",null,d.a.createElement("tr",null,d.a.createElement("th",null,"Name"),d.a.createElement("th",null,"Souls Consumed"))),d.a.createElement("tbody",null,Object.values(this.soulsConsumedBySpell).map((function(e,t){return d.a.createElement("tr",{key:t},d.a.createElement("th",null,e.name),d.a.createElement("td",null,e.souls))})),d.a.createElement("tr",null,d.a.createElement("th",null,"Overcapped"),d.a.createElement("td",null,this.soulFragmentsTracker.overcap)),d.a.createElement("tr",null,d.a.createElement("th",null,"By Touch"),d.a.createElement("td",null,e)))))},d.a.createElement(P.a,{spell:S.a.SOUL_FRAGMENT_STACK},d.a.createElement(d.a.Fragment,null,this.soulFragmentsTracker.soulsSpent," ",d.a.createElement("small",null,"Souls"))))}}]),a}(h.c);q.dependencies={soulFragmentsTracker:J};var X=q,$=function(e){Object(s.a)(a,e);var t=Object(i.a)(a);function a(){var e;Object(n.a)(this,a);for(var s=arguments.length,i=new Array(s),l=0;l<s;l++)i[l]=arguments[l];return(e=t.call.apply(t,[this].concat(i))).active=e.selectedCombatant.hasTalent(S.a.SPIRIT_BOMB_TALENT.id)&&!e.selectedCombatant.hasTalent(S.a.FEED_THE_DEMON_TALENT.id),e}return Object(c.a)(a,[{key:"suggestionThresholdsEfficiency",get:function(){var e=this.soulFragmentsTracker.soulsGenerated-this.soulFragmentsTracker.soulsWasted;return{actual:0===e?0:this.soulFragmentsConsume.soulCleaveSouls()/e,isGreaterThan:{minor:.1,average:.15,major:.2},style:"percentage"}}}]),Object(c.a)(a,[{key:"suggestions",value:function(e){e(this.suggestionThresholdsEfficiency).addSuggestion((function(e,t,a){return e(d.a.createElement(d.a.Fragment,null,"You should avoid consuming souls with ",d.a.createElement(_.a,{id:S.a.SOUL_CLEAVE.id})," and instead try to consume them only with ",d.a.createElement(_.a,{id:S.a.SPIRIT_BOMB_TALENT.id})," for the increased dps. Your talent choices suggests your going for a balanced approch versus a defensive one with ",d.a.createElement(_.a,{id:S.a.FEED_THE_DEMON_TALENT.id}),".")).icon(S.a.SOUL_CLEAVE.icon).actual(g.i18n._({id:"demonhunter.vengeance.suggestions.soulCleave.soulsConsumed",defaults:"{0}% of souls consumed.",values:{0:Object(E.e)(t)}})).recommended("<".concat(Object(E.e)(a),"% is recommended"))}))}}]),a}(h.c);$.dependencies={soulFragmentsConsume:X,soulFragmentsTracker:J};var ee=$,te=a(754),ae=a(826),ne=function(e){Object(s.a)(a,e);var t=Object(i.a)(a);function a(e){var s;return Object(n.a)(this,a),(s=t.call(this,e)).hitsWithDS=0,s.hitsWithoutDS=0,s.hitsWithDSOffCD=0,s.addEventListener(x.f.damage.to(h.a),s.onDamageTaken),s}return Object(c.a)(a,[{key:"mitigatedUptime",get:function(){return Object(E.e)(this.hitsWithDS/(this.hitsWithDS+this.hitsWithoutDS))}},{key:"hitsWithDSOffCDPercent",get:function(){return this.hitsWithDSOffCD/(this.hitsWithDS+this.hitsWithoutDS)}},{key:"suggestionThresholdsEfficiency",get:function(){return{actual:this.hitsWithDSOffCDPercent,isGreaterThan:{minor:.2,average:.3,major:.4},style:"percentage"}}}]),Object(c.a)(a,[{key:"onDamageTaken",value:function(e){e.ability.type===ae.a.ids.PHYSICAL&&(this.selectedCombatant.hasBuff(S.a.DEMON_SPIKES_BUFF.id,e.timestamp)?this.hitsWithDS+=1:(this.hitsWithoutDS+=1,this.spellUsable.isAvailable(S.a.DEMON_SPIKES.id)&&(this.hitsWithDSOffCD+=1)))}},{key:"suggestions",value:function(e){var t=this;e(this.suggestionThresholdsEfficiency).addSuggestion((function(e,a,n){return e(d.a.createElement(d.a.Fragment,null," Cast ",d.a.createElement(_.a,{id:S.a.DEMON_SPIKES.id})," more regularly while actively tanking the boss or when they use a big phsyical attack. You missed having it up for ",Object(E.e)(t.hitsWithDSOffCDPercent),"% of physical hits.")).icon(S.a.DEMON_SPIKES.icon).actual(g.i18n._({id:"demonhunter.vengeance.suggestions.demonSpikes.unmitgatedHits",defaults:"{0}% unmitigated physical hits",values:{0:Object(E.e)(a)}})).recommended("<".concat(Object(E.e)(n),"% is recommended"))}))}},{key:"statistic",value:function(){var e=this.selectedCombatant.getBuffUptime(S.a.DEMON_SPIKES_BUFF.id)/this.owner.fightDuration;return d.a.createElement(T.a,{position:b.a.CORE(2),size:"flexible",tooltip:d.a.createElement(d.a.Fragment,null,"Demon Spikes usage breakdown:",d.a.createElement("ul",null,d.a.createElement("li",null,"You were hit ",d.a.createElement("strong",null,this.hitsWithDS)," times with your Demon Spikes buff."),d.a.createElement("li",null,"You were hit ",d.a.createElement("strong",null,this.hitsWithoutDS)," times ",d.a.createElement("strong",null,d.a.createElement("em",null,"without"))," your Demon Spikes buff."),d.a.createElement("li",null,"You were hit ",d.a.createElement("strong",null,this.hitsWithDSOffCD)," times ",d.a.createElement("strong",null,d.a.createElement("em",null,"with"))," Demon Spikes avalible for use but not used.")),d.a.createElement("b",null,"Your overall uptime was ",Object(E.e)(e),"%"),".")},d.a.createElement(P.a,{spell:S.a.DEMON_SPIKES},d.a.createElement(d.a.Fragment,null,this.mitigatedUptime,"% ",d.a.createElement("small",null,"hits mitigated"))))}}]),a}(h.c);ne.dependencies={spellUsable:te.b};var se=ne,ie=function(e){Object(s.a)(a,e);var t=Object(i.a)(a);function a(){var e;Object(n.a)(this,a);for(var s=arguments.length,i=new Array(s),l=0;l<s;l++)i[l]=arguments[l];return(e=t.call.apply(t,[this].concat(i))).active=e.selectedCombatant.hasTalent(S.a.SPIRIT_BOMB_TALENT.id)&&!e.selectedCombatant.hasTalent(S.a.FEED_THE_DEMON_TALENT.id),e}return Object(c.a)(a,[{key:"suggestionThresholdsEfficiency",get:function(){return{actual:this.wasterPerGenerated(),isGreaterThan:{minor:.05,average:.1,major:.15},style:"percentage"}}}]),Object(c.a)(a,[{key:"wasterPerGenerated",value:function(){return this.soulFragmentsTracker.soulsWasted/this.soulFragmentsTracker.soulsGenerated}},{key:"suggestions",value:function(e){var t=this;e(this.suggestionThresholdsEfficiency).addSuggestion((function(e,a,n){return e(d.a.createElement(d.a.Fragment,null,"You are generating ",d.a.createElement(_.a,{id:S.a.SOUL_FRAGMENT.id}),"s when you are already at 5 souls. These are auto consumed. You are missing out on the extra damage consuming them with ",d.a.createElement(_.a,{id:S.a.SPIRIT_BOMB_TALENT.id})," provides.")).icon(S.a.SOUL_FRAGMENT.icon).actual(g.i18n._({id:"demonhunter.vengeance.suggestions.souls.wasted",defaults:"{0}% wasted Soul Fragments.",values:{0:Object(E.e)(t.wasterPerGenerated())}})).recommended("".concat(Object(E.e)(n),"% or less is recommended"))}))}},{key:"statistic",value:function(){return d.a.createElement(T.a,{position:b.a.CORE(5),size:"flexible",tooltip:d.a.createElement(d.a.Fragment,null,"You generated ",Object(E.d)(this.soulFragmentsTracker.soulsWasted)," souls at cap. These are absorbed automatically and aren't avalible to boost Spirit Bomb's damage.",d.a.createElement("br",null),"Total Soul Fragments generated: ",Object(E.d)(this.soulFragmentsTracker.soulsGenerated),d.a.createElement("br",null),"Total Soul Fragments spent: ",Object(E.d)(this.soulFragmentsTracker.soulsSpent),d.a.createElement("br",null),"At the end of the fight, you had ",Object(E.d)(this.soulFragmentsTracker.currentSouls)," unused Soul Fragments.")},d.a.createElement(P.a,{spell:S.a.SOUL_FRAGMENT},d.a.createElement(d.a.Fragment,null,Object(E.e)(this.wasterPerGenerated()),"% ",d.a.createElement("small",null,"souls"))))}}]),a}(h.c);ie.dependencies={abilityTracker:M.a,soulFragmentsTracker:J};var le=ie,ce=a(770),re=a(762),oe=a(772),ue=a(771),de=a(763),he=function(e){var t=e.combatant,a=e.castEfficiency,n=e.thresholds,s=function(e){return d.a.createElement(oe.a,Object.assign({castEfficiency:a.getCastEfficiencyForSpellId(e.spell)},e))};return d.a.createElement(ce.a,null,d.a.createElement(re.c,{name:"Use your short cooldowns",description:d.a.createElement(d.a.Fragment,null,"These should generally always be on recharge to maximize DPS, HPS and efficiency.",d.a.createElement("br",null),d.a.createElement("a",{href:"http://www.wowhead.com/vengeance-demon-hunter-rotation-guide#rotation-priority-list",target:"_blank",rel:"noopener noreferrer"},"More info."))},d.a.createElement(s,{spell:S.a.IMMOLATION_AURA.id}),d.a.createElement(s,{spell:S.a.SIGIL_OF_FLAME_CONCENTRATED.id}),t.hasTalent(S.a.FRACTURE_TALENT.id)&&d.a.createElement(s,{spell:S.a.FRACTURE_TALENT.id}),t.hasTalent(S.a.FELBLADE_TALENT.id)&&d.a.createElement(s,{spell:S.a.FELBLADE_TALENT.id}),t.hasTalent(S.a.FEL_DEVASTATION_TALENT.id)&&d.a.createElement(s,{spell:S.a.FEL_DEVASTATION_TALENT.id})),d.a.createElement(re.c,{name:"Use your rotational defensive/healing abilities",description:d.a.createElement(d.a.Fragment,null,"Use these to block damage spikes and keep damage smooth to reduce external healing required.",d.a.createElement("br",null),d.a.createElement("a",{href:"http://www.wowhead.com/vengeance-demon-hunter-rotation-guide#rotation-priority-list",target:"_blank",rel:"noopener noreferrer"},"More info."))},d.a.createElement(de.a,{name:d.a.createElement(d.a.Fragment,null,d.a.createElement(_.a,{id:S.a.DEMON_SPIKES.id})),thresholds:n.demonSpikes}),t.hasTalent(S.a.SPIRIT_BOMB_TALENT.id)&&!t.hasTalent(S.a.FEED_THE_DEMON_TALENT.id)&&d.a.createElement(de.a,{name:d.a.createElement(d.a.Fragment,null,d.a.createElement(_.a,{id:S.a.SPIRIT_BOMB_TALENT.id})," 4+ souls casts"),thresholds:n.spiritBombSoulsConsume}),!t.hasTalent(S.a.FEED_THE_DEMON_TALENT.id)&&t.hasTalent(S.a.SPIRIT_BOMB_TALENT.id)&&d.a.createElement(de.a,{name:d.a.createElement(d.a.Fragment,null,d.a.createElement(_.a,{id:S.a.SOUL_CLEAVE.id})," souls consumed"),thresholds:n.soulCleaveSoulsConsumed}),t.hasTalent(S.a.SOUL_BARRIER_TALENT.id)&&d.a.createElement(s,{spell:S.a.SOUL_BARRIER_TALENT.id})),d.a.createElement(re.c,{name:"Use your long defensive/healing cooldowns",description:d.a.createElement(d.a.Fragment,null,"Use these to mitigate large damage spikes or in emergency situations.",d.a.createElement("br",null),d.a.createElement("a",{href:"http://www.wowhead.com/vengeance-demon-hunter-rotation-guide#rotation-priority-list",target:"_blank",rel:"noopener noreferrer"},"More info."))},d.a.createElement(s,{spell:S.a.METAMORPHOSIS_TANK.id}),d.a.createElement(s,{spell:S.a.FIERY_BRAND.id})),(t.hasTalent(S.a.SPIRIT_BOMB_TALENT.id)||t.hasTalent(S.a.VOID_REAVER_TALENT.id))&&d.a.createElement(re.c,{name:"Maintain your buffs and debuffs",description:d.a.createElement(d.a.Fragment,null,"It is important to maintain these as they contribute a large amount to your DPS and HPS.",d.a.createElement("br",null),d.a.createElement("a",{href:"http://www.wowhead.com/vengeance-demon-hunter-rotation-guide#rotation-priority-list",target:"_blank",rel:"noopener noreferrer"},"More info."))},t.hasTalent(S.a.SPIRIT_BOMB_TALENT.id)&&d.a.createElement(de.a,{name:d.a.createElement(d.a.Fragment,null,d.a.createElement(_.a,{id:S.a.FRAILTY_SPIRIT_BOMB_DEBUFF.id})," debuff uptime"),thresholds:n.spiritBombFrailtyDebuff}),t.hasTalent(S.a.VOID_REAVER_TALENT.id)&&d.a.createElement(de.a,{name:d.a.createElement(d.a.Fragment,null,d.a.createElement(_.a,{id:S.a.VOID_REAVER_TALENT.id})," debuff uptime"),thresholds:n.voidReaverDebuff})),d.a.createElement(ue.a,{thresholds:n}))},me=function(e){Object(s.a)(a,e);var t=Object(i.a)(a);function a(){return Object(n.a)(this,a),t.apply(this,arguments)}return Object(c.a)(a,[{key:"render",value:function(){return d.a.createElement(he,{combatant:this.combatants.selected,castEfficiency:this.castEfficiency,thresholds:Object(F.a)(Object(F.a)({},this.preparationRuleAnalyzer.thresholds),{},{downtimeSuggestionThresholds:this.alwaysBeCasting.downtimeSuggestionThresholds,spiritBombFrailtyDebuff:this.spiritBombFrailtyDebuff.uptimeSuggestionThresholds,voidReaverDebuff:this.voidReaverDebuff.uptimeSuggestionThresholds,spiritBombSoulsConsume:this.spiritBombSoulsConsume.suggestionThresholdsEfficiency,soulBarrier:this.soulBarrier.suggestionThresholdsEfficiency,soulCleaveSoulsConsumed:this.soulCleaveSoulsConsumed.suggestionThresholdsEfficiency,demonSpikes:this.demonSpikes.suggestionThresholdsEfficiency,painDetails:this.painDetails.suggestionThresholds,soulsOvercap:this.soulsOvercap.suggestionThresholdsEfficiency})})}}]),a}(j.a);me.dependencies={combatants:w.a,castEfficiency:N.a,alwaysBeCasting:A,preparationRuleAnalyzer:D.a,spiritBombFrailtyDebuff:Y,voidReaverDebuff:W,spiritBombSoulsConsume:z,soulBarrier:Z,soulCleaveSoulsConsumed:ee,demonSpikes:se,painDetails:y,soulsOvercap:le};var Ee=me,fe=function(e){Object(s.a)(a,e);var t=Object(i.a)(a);function a(){var e;Object(n.a)(this,a);for(var s=arguments.length,i=new Array(s),l=0;l<s;l++)i[l]=arguments[l];return(e=t.call.apply(t,[this].concat(i))).casts=0,e.totalCooldownReductionWasted=0,e.totalCooldownReduction=0,e.active=e.selectedCombatant.hasTalent(S.a.FEED_THE_DEMON_TALENT.id),e.addEventListener(x.f.heal.by(h.a).spell(S.a.CONSUME_SOUL_VDH),e.onHeal),e}return Object(c.a)(a,[{key:"FTDReduction",get:function(){return this.totalCooldownReduction}},{key:"FTDReductionWasted",get:function(){return this.totalCooldownReductionWasted}},{key:"reduction",get:function(){return this.FTDReduction/1e3}},{key:"wastedReduction",get:function(){return this.FTDReductionWasted/1e3}},{key:"averageReduction",get:function(){var e=this.abilityTracker.getAbility(S.a.DEMON_SPIKES.id).casts;return this.reduction/e||0}},{key:"wastedPercent",get:function(){return this.wastedReduction/(this.wastedReduction+this.reduction)}}]),Object(c.a)(a,[{key:"onHeal",value:function(e){if(this.spellUsable.isOnCooldown(S.a.DEMON_SPIKES.id)){var t=this.spellUsable.reduceCooldown(S.a.DEMON_SPIKES.id,500);this.totalCooldownReduction+=t,this.totalCooldownReductionWasted+=500-t}else this.totalCooldownReductionWasted+=500}},{key:"statistic",value:function(){return d.a.createElement(K.a,{talent:S.a.FEED_THE_DEMON_TALENT.id,position:b.a.CORE(6),value:"".concat(Object(E.d)(this.averageReduction)," sec"),label:"Feed the Demon average reduction",tooltip:d.a.createElement(d.a.Fragment,null,Object(E.d)(this.reduction)," sec total effective reduction.",d.a.createElement("br",null),Object(E.d)(this.wastedReduction)," sec (",Object(E.e)(this.wastedPercent),"%) wasted reduction.")})}}]),a}(h.c);fe.dependencies={abilityTracker:M.a,spellUsable:te.b};var ge=fe,Te=function(e){Object(s.a)(a,e);var t=Object(i.a)(a);function a(){var e;Object(n.a)(this,a);for(var s=arguments.length,i=new Array(s),l=0;l<s;l++)i[l]=arguments[l];return(e=t.call.apply(t,[this].concat(i))).buffCasts=0,e.metaCast=0,e.active=e.selectedCombatant.hasTalent(S.a.GLUTTONY_TALENT.id),e.addEventListener(x.f.applybuff.to(h.a).spell(S.a.METAMORPHOSIS_TANK),e.onApplyBuff),e.addEventListener(x.f.cast.by(h.a).spell(S.a.METAMORPHOSIS_TANK),e.onCast),e}return Object(c.a)(a,[{key:"gluttonyProcs",get:function(){return this.buffCasts-this.metaCast}}]),Object(c.a)(a,[{key:"onApplyBuff",value:function(e){this.buffCasts+=1}},{key:"onCast",value:function(e){this.metaCast+=1}},{key:"statistic",value:function(){return d.a.createElement(K.a,{talent:S.a.GLUTTONY_TALENT.id,position:b.a.CORE(7),value:"".concat(this.gluttonyProcs),label:"Gluttony procs"})}}]),a}(h.c),be=function(e){Object(s.a)(a,e);var t=Object(i.a)(a);function a(){var e;Object(n.a)(this,a);for(var s=arguments.length,i=new Array(s),l=0;l<s;l++)i[l]=arguments[l];return(e=t.call.apply(t,[this].concat(i))).damage=0,e.active=e.selectedCombatant.hasTalent(S.a.BURNING_ALIVE_TALENT.id),e.addEventListener(x.f.damage.by(h.a).spell(S.a.FIERY_BRAND_DOT),e.onDamage),e}return Object(c.a)(a,[{key:"onDamage",value:function(e){this.damage+=e.amount}},{key:"statistic",value:function(){return d.a.createElement(K.a,{talent:S.a.BURNING_ALIVE_TALENT.id,position:b.a.CORE(10),value:this.owner.formatItemDamageDone(this.damage),tooltip:d.a.createElement(d.a.Fragment,null,"This shows the extra dps that the talent provides.",d.a.createElement("br",null),d.a.createElement("strong",null,"Total extra damage:")," ",Object(E.d)(this.damage))})}}]),a}(h.c),pe=function(e){Object(s.a)(a,e);var t=Object(i.a)(a);function a(){var e;Object(n.a)(this,a);for(var s=arguments.length,i=new Array(s),l=0;l<s;l++)i[l]=arguments[l];return(e=t.call.apply(t,[this].concat(i))).heal=0,e.overHeal=0,e.active=e.selectedCombatant.hasTalent(S.a.FEAST_OF_SOULS_TALENT.id),e.addEventListener(x.f.heal.by(h.a).spell(S.a.FEAST_OF_SOULS_HEAL),e.onHeal),e}return Object(c.a)(a,[{key:"onHeal",value:function(e){this.heal+=e.amount,this.overHeal+=e.overheal||0}},{key:"statistic",value:function(){var e=this.overHeal/(this.overHeal+this.heal);return d.a.createElement(K.a,{talent:S.a.FEAST_OF_SOULS_TALENT.id,position:b.a.CORE(8),value:this.owner.formatItemHealingDone(this.heal),tooltip:d.a.createElement(d.a.Fragment,null,"This shows the extra hps that the talent provides.",d.a.createElement("br",null),d.a.createElement("strong",null,"Effective healing:")," ",Object(E.d)(this.heal),d.a.createElement("br",null),d.a.createElement("strong",null,"Overhealing:")," ",Object(E.d)(this.overHeal)," | ",Object(E.e)(e),"%")})}}]),a}(h.c),Oe=a(752),ye=function(e){Object(s.a)(a,e);var t=Object(i.a)(a);function a(){var e;Object(n.a)(this,a);for(var s=arguments.length,i=new Array(s),l=0;l<s;l++)i[l]=arguments[l];return(e=t.call.apply(t,[this].concat(i))).damage=0,e.active=e.selectedCombatant.hasTalent(S.a.AGONIZING_FLAMES_TALENT.id),e.addEventListener(x.f.damage.by(h.a).spell([S.a.IMMOLATION_AURA_FIRST_STRIKE,S.a.IMMOLATION_AURA]),e.onDamage),e}return Object(c.a)(a,[{key:"onDamage",value:function(e){this.damage+=Object(Oe.a)(e,.2)}},{key:"statistic",value:function(){return d.a.createElement(K.a,{talent:S.a.AGONIZING_FLAMES_TALENT.id,position:b.a.CORE(9),value:this.owner.formatItemDamageDone(this.damage),tooltip:d.a.createElement(d.a.Fragment,null,"This shows the extra dps that the talent provides.",d.a.createElement("br",null),d.a.createElement("strong",null,"Total extra damage:")," ",Object(E.d)(this.damage))})}}]),a}(h.c),Ae=function(e){Object(s.a)(a,e);var t=Object(i.a)(a);function a(){var e;Object(n.a)(this,a);for(var s=arguments.length,i=new Array(s),l=0;l<s;l++)i[l]=arguments[l];return(e=t.call.apply(t,[this].concat(i))).damage=0,e.active=e.selectedCombatant.hasTalent(S.a.RAZOR_SPIKES_TALENT.id),e.addEventListener(x.f.damage.by(h.a),e.onDamage),e}return Object(c.a)(a,[{key:"onDamage",value:function(e){e.ability.type===ae.a.ids.PHYSICAL&&this.selectedCombatant.hasBuff(S.a.DEMON_SPIKES_BUFF.id,e.timestamp)&&(this.damage+=Object(Oe.a)(e,.15))}},{key:"statistic",value:function(){return d.a.createElement(K.a,{talent:S.a.RAZOR_SPIKES_TALENT.id,position:b.a.CORE(5),value:this.owner.formatItemDamageDone(this.damage),tooltip:d.a.createElement(d.a.Fragment,null,"This shows the extra dps that the talent provides.",d.a.createElement("br",null),d.a.createElement("strong",null,"Total extra damage:")," ",Object(E.d)(this.damage))})}}]),a}(h.c),Se=function(e){Object(s.a)(a,e);var t=Object(i.a)(a);function a(){return Object(n.a)(this,a),t.apply(this,arguments)}return Object(c.a)(a,[{key:"statistic",value:function(){var e=this.selectedCombatant.getBuffUptime(S.a.IMMOLATION_AURA.id),t=e/this.owner.fightDuration;return this.immolationAuraDamage=this.abilityTracker.getAbility(S.a.IMMOLATION_AURA_FIRST_STRIKE.id).damageEffective+this.abilityTracker.getAbility(S.a.IMMOLATION_AURA.id).damageEffective,d.a.createElement(T.a,{position:b.a.CORE(4),size:"flexible",tooltip:d.a.createElement(d.a.Fragment,null,"The Immolation Aura total damage was ",Object(E.f)(this.immolationAuraDamage),".",d.a.createElement("br",null),"The Immolation Aura total uptime was ",Object(E.a)(e/1e3))},d.a.createElement(P.a,{spell:S.a.IMMOLATION_AURA},d.a.createElement(d.a.Fragment,null,d.a.createElement(U.a,null)," ",Object(E.e)(t),"% ",d.a.createElement("small",null,"uptime"))))}}]),a}(h.c);Se.dependencies={abilityTracker:M.a};var _e=Se,ve=function(e){Object(s.a)(a,e);var t=Object(i.a)(a);function a(e){var s;return Object(n.a)(this,a),(s=t.call(this,e)).successfulStack=0,s.lastApplicationTimestamp=0,s.currentApplicationTimestamp=0,s.addEventListener(x.f.applydebuff.by(h.a).spell(S.a.SIGIL_OF_FLAME_DEBUFF),s.onApplyDebuff),s}return Object(c.a)(a,[{key:"onApplyDebuff",value:function(e){0!==this.lastApplicationTimestamp?(this.currentApplicationTimestamp=e.timestamp,(this.currentApplicationTimestamp-this.lastApplicationTimestamp)/1e3<3&&(this.successfulStack+=1),this.lastApplicationTimestamp=this.currentApplicationTimestamp):this.lastApplicationTimestamp=e.timestamp}},{key:"statistic",value:function(){var e=this.enemies.getBuffUptime(S.a.SIGIL_OF_FLAME_DEBUFF.id),t=e/this.owner.fightDuration,a=this.abilityTracker.getAbility(S.a.SIGIL_OF_FLAME_DEBUFF.id).damageEffective;return d.a.createElement(T.a,{position:b.a.CORE(5),size:"flexible",tooltip:d.a.createElement(d.a.Fragment,null,"Having two stacks of Sigil Of Flames on the boss is a damage increase.",d.a.createElement("br",null),d.a.createElement("br",null),"Sigil of Flame uptime: ",Object(E.e)(t),"% / (",Object(E.a)(e/1e3),")",d.a.createElement("br",null),"Sigil of Flame total damage: ",Object(E.f)(a),".")},d.a.createElement(P.a,{spell:S.a.SIGIL_OF_FLAME_CONCENTRATED},d.a.createElement(d.a.Fragment,null,this.successfulStack," ",d.a.createElement("small",null,"times"))))}}]),a}(h.c);ve.dependencies={abilityTracker:M.a,enemies:B.a};var Le=ve,Ie=function(e){Object(s.a)(a,e);var t=Object(i.a)(a);function a(){return Object(n.a)(this,a),t.apply(this,arguments)}return a}(l.a);Ie.specModules={mitigationCheck:R,alwaysBeCasting:A,abilities:v,cooldownThroughputTracker:C,soulFragmentsTracker:J,checklist:Ee,painTracker:o,painDetails:y,SpiritBombFrailtyDebuff:Y,soulBarrier:Z,spiritBombSoulsConsume:z,feedTheDemon:ge,gluttony:Te,burningAlive:be,feastOfSouls:pe,agonizingFlames:ye,razorSpikes:Ae,immolationAura:_e,demonSpikes:se,sigilOfFlame:Le,soulCleaveSoulsConsumed:ee,voidReaverDebuff:W,soulsOvercap:le,soulFragmentsConsume:X};t.default=Ie},752:function(e,t,a){"use strict";function n(e,t){var a=(e.amount||0)+(e.absorbed||0);return a-a/(1+t)}a.d(t,"a",(function(){return n}))},760:function(e,t,a){"use strict";var n=a(0),s=a.n(n);t.a=function(e){var t=Object.assign({},e);return s.a.createElement("svg",Object.assign({xmlns:"http://www.w3.org/2000/svg",viewBox:"10 10 80 80",className:"icon"},t),s.a.createElement("path",{d:"M50,86.4865c17.4361,0,31.6216-14.1855,31.6216-31.6216c0-16.6168-12.8865-30.2714-29.1892-31.5189v-4.9677h7.2973v-4.8649  H40.2703v4.8649h7.2973v4.9677c-16.3027,1.2475-29.1892,14.902-29.1892,31.5189C18.3784,72.3009,32.5639,86.4865,50,86.4865z M52.4324,28.2236c3.1101,0.2817,6.0664,1.0982,8.7798,2.356l-8.7798,15.2073V28.2236z M47.5676,28.2236v26.6412 c0,1.1008,0.7393,2.0647,1.8029,2.3497c0.209,0.0561,0.4205,0.0827,0.6295,0.0827c0.8533,0,1.6642-0.4504,2.1065-1.2162 l13.3146-23.0616c6.8507,4.8503,11.3357,12.8315,11.3357,21.8454c0,14.7537-12.0031,26.7567-26.7568,26.7567 s-26.7568-12.003-26.7568-26.7567C23.2432,40.9315,33.9501,29.4573,47.5676,28.2236z"}))}},774:function(e,t,a){"use strict";var n=a(27),s=a(0),i=a.n(s),l=a(4),c=a(53),r=a(58),o=a(750),u=(a(747),function(e){var t=e.talent,a=e.icon,s=e.label,r=Object(n.a)(e,["talent","icon","label"]);return i.a.createElement(o.b,Object.assign({},r,{icon:a||i.a.createElement(c.a,{id:t}),label:s||i.a.createElement(l.a,{id:t,icon:!1})}))});u.defaultProps={category:r.a.TALENTS},t.a=u},849:function(e,t,a){"use strict";var n=a(26),s=a(8),i=a(9),l=a(119),c=a(10),r=a(11),o=a(0),u=a.n(o),d=a(43),h=a(3),m=a(53),E=a(33),f=a(4),g=a(756),T=a(54),b=a(750),p=a(766),O=a(826),y=a(15),A=function(e){Object(c.a)(a,e);var t=Object(r.a)(a);function a(){var e;Object(s.a)(this,a);for(var i=arguments.length,c=new Array(i),r=0;r<i;r++)c[r]=arguments[r];if((e=t.call.apply(t,[this].concat(c))).checksPassedMap=new Map,e.checksFailedMap=new Map,e.checksPhysical=[],e.checksMagical=[],e.buffCheckPhysical=[],e.buffCheckMagical=[],e.buffCheckPhysAndMag=[],e.debuffCheckPhysical=[],e.debuffCheckMagical=[],e.debuffCheckPhysAndMag=[],null==e.owner.boss)return e.active=!1,Object(l.a)(e);var o=Object(T.a)(e.owner.boss.id);return o.fight.softMitigationChecks&&o.fight.softMitigationChecks.physical&&o.fight.softMitigationChecks.magical?(e.checksPhysical=o.fight.softMitigationChecks.physical,e.checksMagical=o.fight.softMitigationChecks.magical,void 0!==e.checksPhysical&&void 0!==e.checksMagical||(e.checksPhysical=[],e.checksMagical=[])):(e.checksPhysical=[],e.checksMagical=[],e.buffCheckPhysical=[],e.buffCheckMagical=[],e.buffCheckPhysAndMag=[],e.debuffCheckPhysical=[],e.debuffCheckMagical=[],e.debuffCheckPhysAndMag=[]),[].concat(Object(n.a)(e.checksPhysical),Object(n.a)(e.checksMagical)).forEach((function(t){e.checksPassedMap.set(t,0),e.checksFailedMap.set(t,0)})),e.addEventListener(y.f.damage.to(d.a),e.onDamageTaken),e}return Object(i.a)(a,[{key:"onDamageTaken",value:function(e){var t=this,a=e.ability.guid,s=[],i=[],l=[];if(e.ability.type===O.a.ids.PHYSICAL?(s=this.checksPhysical,i=[].concat(Object(n.a)(this.buffCheckPhysical),Object(n.a)(this.buffCheckPhysAndMag)),l=[].concat(Object(n.a)(this.debuffCheckPhysical),Object(n.a)(this.debuffCheckPhysAndMag))):(s=this.checksMagical,i=[].concat(Object(n.a)(this.buffCheckMagical),Object(n.a)(this.buffCheckPhysAndMag)),l=[].concat(Object(n.a)(this.debuffCheckMagical),Object(n.a)(this.debuffCheckPhysAndMag))),s.includes(a)&&!e.tick)if(i.some((function(e){return t.selectedCombatant.hasBuff(e)}))||e.hitType===p.a.IMMUNE)this.checksPassedMap.set(a,this.checksPassedMap.get(a)+1);else{var c=this.enemies.getEntities()[e.sourceID];c&&l.some((function(t){return c.hasBuff(t,e.timestamp)}))?this.checksPassedMap.set(a,this.checksPassedMap.get(a)+1):this.checksFailedMap.set(a,this.checksFailedMap.get(a)+1)}}},{key:"statistic",value:function(){var e=this,t=Array.from(this.checksFailedMap.values()).reduce((function(e,t){return e+t}),0),a=Array.from(this.checksPassedMap.values()).reduce((function(e,t){return e+t}),0);if(t+a===0)return null;var s,i=[].concat(Object(n.a)(this.buffCheckPhysical),Object(n.a)(this.buffCheckMagical),Object(n.a)(this.buffCheckPhysAndMag));s=i.length>0?i[0]:h.a.SHIELD_BLOCK_BUFF.id;var l=this.physicalChecks.length>0?u.a.createElement(u.a.Fragment,null,u.a.createElement("thead",null,u.a.createElement("tr",null,u.a.createElement("th",null,"Physical"),u.a.createElement("th",null,"Ability"),u.a.createElement("th",null,"Passed"),u.a.createElement("th",null,"Failed"))),u.a.createElement("tbody",null,this.physicalChecks.map((function(t){return u.a.createElement("tr",{key:t},u.a.createElement("td",null),u.a.createElement("th",{scope:"row"},u.a.createElement(f.a,{id:t,style:{height:"2.5em"}})),u.a.createElement("td",null,Object(E.d)(e.checksPassedMap.get(t))),u.a.createElement("td",null,Object(E.d)(e.checksFailedMap.get(t))))})))):null,c={borderTop:"none"},r=this.magicalChecks.length>0?u.a.createElement(u.a.Fragment,null,u.a.createElement("thead",null,u.a.createElement("tr",null,u.a.createElement("th",{style:c},"Magical"),u.a.createElement("th",{style:c},"Ability"),u.a.createElement("th",{style:c},"Passed"),u.a.createElement("th",{style:c},"Failed"))),u.a.createElement("tbody",null,this.magicalChecks.map((function(t){return u.a.createElement("tr",{key:t},u.a.createElement("td",null),u.a.createElement("th",{scope:"row"},u.a.createElement(f.a,{id:t,style:{height:"2.5em"}})),u.a.createElement("td",null,Object(E.d)(e.checksPassedMap.get(t))),u.a.createElement("td",null,Object(E.d)(e.checksFailedMap.get(t))))})))):null;return u.a.createElement(b.b,{icon:u.a.createElement(m.a,{id:s}),value:"".concat(Object(E.e)(a/(a+t))," %"),label:"Soft mitigation checks passed.",tooltip:u.a.createElement(u.a.Fragment,null,"Checks if one of the following buffs or debuffs were up during the mechanic:",u.a.createElement("ul",null,this.tooltip))},u.a.createElement("table",{className:"table table-condensed",style:{fontWeight:"bold"}},l,r))}},{key:"tooltip",get:function(){return[].concat(Object(n.a)(this.buffCheckPhysical),Object(n.a)(this.buffCheckMagical),Object(n.a)(this.buffCheckPhysAndMag),Object(n.a)(this.debuffCheckPhysical),Object(n.a)(this.debuffCheckMagical),Object(n.a)(this.debuffCheckPhysAndMag)).map((function(e){return u.a.createElement("li",{key:e},h.a[e].name)}))}},{key:"physicalChecks",get:function(){var e=this;return this.checksPhysical.filter((function(t){return e.checksPassedMap.get(t)+e.checksFailedMap.get(t)>0}))}},{key:"magicalChecks",get:function(){var e=this;return this.checksMagical.filter((function(t){return e.checksPassedMap.get(t)+e.checksFailedMap.get(t)>0}))}}]),a}(d.c);A.dependencies={enemies:g.a},t.a=A}}]);
//# sourceMappingURL=VengeanceDemonHunter.0f131b61.chunk.js.map