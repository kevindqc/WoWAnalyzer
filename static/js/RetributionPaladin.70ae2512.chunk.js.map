{"version":3,"sources":["parser/paladin/retribution/modules/Abilities.tsx","parser/paladin/retribution/modules/features/AlwaysBeCasting.js","parser/paladin/retribution/modules/Buffs.js","parser/paladin/retribution/modules/features/CooldownThroughputTracker.js","parser/paladin/retribution/modules/core/ArtOfWar.tsx","parser/paladin/retribution/modules/talents/Crusade.tsx","parser/paladin/retribution/modules/talents/RighteousVerdict.tsx","parser/paladin/retribution/modules/core/ShieldOfVengeance.tsx","parser/paladin/retribution/modules/features/Checklist/Component.js","parser/paladin/retribution/modules/features/Checklist/Module.js","parser/paladin/retribution/modules/core/BladeofJustice.tsx","parser/paladin/retribution/modules/core/CrusaderStrike.tsx","parser/paladin/retribution/modules/core/WakeofAshes.tsx","parser/paladin/retribution/modules/core/Consecration.tsx","parser/paladin/retribution/modules/core/HammerofWrath.tsx","parser/paladin/retribution/constants.tsx","parser/paladin/retribution/modules/talents/ExecutionSentence.tsx","parser/paladin/retribution/modules/talents/EmpyreanPower.tsx","parser/paladin/retribution/modules/talents/SanctifiedWrath.tsx","parser/paladin/retribution/CombatLogParser.js","parser/core/calculateEffectiveDamage.js","interface/statistics/components/BoringValueText/index.tsx","interface/others/charts/OneVariableBinomialChart.js","parser/shared/modules/helpers/Probability.tsx","interface/statistics/components/BoringSpellValue/index.tsx","parser/paladin/shared/holypower/HolyPowerTracker.js","parser/paladin/shared/holypower/HolyPowerDetails.js","parser/paladin/shared/spells/Judgment.tsx","parser/paladin/shared/talents/HolyAvenger.tsx","parser/paladin/shared/talents/DivinePurpose.tsx","parser/paladin/shared/constants.ts"],"names":["Abilities","combatant","this","selectedCombatant","spell","SPELLS","WAKE_OF_ASHES","category","SPELL_CATEGORIES","COOLDOWNS","cooldown","gcd","base","castEfficiency","suggestion","recommendedEfficiency","extraSuggestion","CRUSADE_TALENT","buffSpellId","id","enabled","hasTalent","importance","ISSUE_IMPORTANCE","MAJOR","AVENGING_WRATH","CRUSADER_STRIKE","ROTATIONAL","charges","haste","FIRES_OF_JUSTICE_TALENT","HAMMER_OF_WRATH","JUDGMENT_CAST","BLADE_OF_JUSTICE","TEMPLARS_VERDICT","DIVINE_STORM","EXECUTION_SENTENCE_TALENT","CONSECRATION_CAST","SHIELD_OF_VENGEANCE","DEFENSIVE","UNBREAKABLE_SPIRIT_TALENT","MINOR","JUSTICARS_VENGEANCE_TALENT","UTILITY","EYE_FOR_AN_EYE_TALENT","WORD_OF_GLORY","BLINDING_LIGHT_TALENT","REPENTANCE_TALENT","DIVINE_STEED","CAVALIER_TALENT","LAY_ON_HANDS","isDefensive","BLESSING_OF_FREEDOM","BLESSING_OF_PROTECTION","HAMMER_OF_JUSTICE","HAND_OF_RECKONING","REBUKE","SERAPHIM_TALENT","SEMI_DEFENSIVE","DIVINE_SHIELD","FLASH_OF_LIGHT","channel","BLESSING_OF_SACRIFICE","CLEANSE","CRUSADER_AURA","RETRIBUTION_AURA","CONCENTRATION_AURA","DEVOTION_AURA","TURN_EVIL","SENSE_UNDEAD","HAND_OF_HINDRANCE","SHIELD_OF_THE_RIGHTEOUS","CoreAbilities","AlwaysBeCasting","statisticOrder","STATISTIC_ORDER","CORE","when","boss","owner","fight","disableDowntimeSuggestion","suggestionThresholds","addSuggestion","suggest","actual","recommended","SpellLink","icon","i18n","_","formatPercentage","downtimePercentage","isGreaterThan","minor","average","major","style","CoreAlwaysBeCasting","icons","activeTime","downtime","Buffs","spellId","EMPYREAN_POWER_TALENT_BUFF","EMPYREAN_POWER_TALENT","timelineHighlight","DIVINE_PURPOSE_BUFF","DIVINE_PURPOSE_TALENT","FIRES_OF_JUSTICE_BUFF","RIGHTEOUS_VERDICT_BUFF","DIVINE_STEED_BUFF","DIVINE_STEED_BUFF_ALT","DIVINE_STEED_BUFF_ALT_2","DIVINE_STEED_BUFF_ALT_3","triggeredBySpellId","Object","keys","BLOODLUST_BUFFS","map","item","Number","CoreBuffs","CooldownThroughputTracker","CoreCooldownThroughputTracker","cooldownSpells","summary","BUILT_IN_SUMMARY_TYPES","DAMAGE","AoWProcTracker","options","spellUsable","consumedAoWProcs","wastedAoWProcs","totalAoWProcs","lastAoWProcTime","addEventListener","Events","applybuff","by","SELECTED_PLAYER","BLADE_OF_WRATH_PROC","onApplyBuff","refreshbuff","onRefreshBuff","cast","onCast","event","isOnCooldown","endCooldown","timestamp","AoWTimeframe","consumedProcsPercent","ART_OF_WAR","StatisticBox","position","OPTIONAL","SpellIcon","value","label","tooltip","isLessThan","ThresholdStyle","PERCENTAGE","Analyzer","dependencies","combatants","Combatants","SpellUsable","Crusade","abilityTracker","globalCooldown","holyPowerTracker","crusadeCastTimestamp","badFirstGlobal","gcdBuffer","active","onCrusadeCast","applybuffstack","onCrusadeBuffStack","getGlobalCooldownDuration","current","meta","isInefficientCast","inefficientCastReason","undefined","formatNumber","getAbility","casts","badGlobalPercent","AbilityTracker","GlobalCooldown","HolyPowerTracker","RighteousVerdict","damageDone","spendersInsideBuff","totalSpenders","RIGHTEOUS_VERDICT_TALENT","damage","TEMPLARS_VERDICT_DAMAGE","onDamage","hasBuff","calculateEffectiveDamage","getPercentageOfTotalDamageDone","ShieldOfVengeance","statTracker","healingDone","totalPossibleAbsorb","maxHitPoints","currentVersatilityPercentage","pctAbsorbUsed","byAbility","effective","HealingDone","StatTracker","RetributionPaladinChecklist","thresholds","AbilityRequirement","props","GenericCastEfficiencyRequirement","getCastEfficiencyForSpellId","Rule","name","description","Requirement","alwaysBeCasting","crusade","artOfWar","judgment","righteousVerdict","holyPowerDetails","PreparationRule","shieldOfVengeance","Checklist","Component","selected","preparationRuleAnalyzer","BaseChecklist","CastEfficiency","PreparationRuleAnalyzer","HolyPowerDetails","ArtOfWar","Judgment","BladeofJustice","wastedHP","onBladeOfJusticeCast","energize","onBladeOfJusticeEnergize","waste","CrusaderStrike","wasteHP","onCrusaderStrikeCast","onCrusaderStrikeEnergize","WakeofAshes","totalHits","badCasts","wakeCast","onWakeofAshesDamage","onWakeofAshesCast","onWakeofAshesEnergize","fightend","onFinished","badCastsThresholds","averageHitPerCast","toFixed","NUMBER","Consecration","CONSECRATION_DAMAGE","onConsecrationDamage","HammerofWrath","onHammerofWrathCast","onHammerofWrathEnergize","ABILITIES_AFFECTED_BY_HOLY_DAMAGE_INCREASES","DIVINE_STORM_DAMAGE","ZEAL_DAMAGE","SANCTIFIED_WRATH_DAMAGE","ExecutionSentence","enemies","damageIncrease","onAffectedDamage","enemy","getEntity","EXECUTION_SENTENCE_DEBUFF","Statistic","size","totalDamage","directDps","indirectDps","BoringSpellValueText","ItemDamageDone","amount","damageEffective","directDamage","fightDuration","Enemies","EmpyreanPower","averageTimeTillBuffConsumed","hasProc","procsWasted","procsGained","buffAppliedTimestamp","buffRemovedTimestamp","totalChances","procProbabilities","castCounter","divineStormDamage","applyBuff","removebuff","removeBuff","push","absorbed","STATISTIC_CATEGORY","TALENTS","formatDuration","plotOneVariableBinomChart","SanctifiedWrath","SANCTIFIED_WRATH_TALENT_RETRIBUTION","hist","getBuffHistory","length","totalIncrease","forEach","buff","idx","duration","end","currentTimestamp","start","increase","Math","max","damageAbsorbed","CombatLogParser","CoreCombatLogParser","specModules","abilities","buffs","cooldownThroughputTracker","checklist","bladeofJustice","crusaderStrike","divinePurpose","DivinePurpose","wakeofAshes","consecration","hammerofWrathRetribution","HammerofWrathRetribution","executionSentence","holyAvenger","HolyAvenger","empyreanPower","sanctifiedWrath","raw","BoringValue","children","className","OneVariableBinomialChart","state","hover","probabilities","actualEvent","xAxis","yAxis","yDomain","data","spec","encoding","x","field","type","title","axis","grid","format","tickFormat","y","scale","domain","layer","mark","color","line","strokeWidth","filled","disableHeight","width","BaseChart","height","React","expectedProcCount","procChance","procAttempts","binomialPMF","k","n","p","numerator","denominator","i","binomialDistribution","pow","binomialCDF","probability","findMax","pmf","maxP","resetProbabilityArray","actualProcs","Array","from","_x","poissonBinomialPMF","setMinMaxProbabilities","threshold","rangeMin","findIndex","rangeMax","slice","Ekj","j","lookup","Error","fill","trackedName","tooltipText","actualEventY","BoringSpellValue","extra","args","resource","RESOURCE_TYPES","HOLY_POWER","getResource","cost","ResourceTracker","wasted","wastedHolyPowerPercent","key","pad","tracker","resourceName","showSpenders","generated","DAMAGE_MODIFIER","retHolyPowerAbilities","protHolyPowerAbilities","judgmentSpells","JUDGMENT_CAST_PROTECTION","allHolyPowerAbilities","supportedSpecIds","SPECS","PROTECTION_PALADIN","RETRIBUTION_PALADIN","spellCastMap","Map","spellDamageMap","totalJudgmentConsumptions","totalJudgmentCasts","includes","specId","trackDamageEvent","trackJudgmentCasts","find","JUDGMENT_DEBUFF","holyPowerDamageSpell","getSupportedSpellWithId","ability","guid","oldCastNumber","get","set","extraJudgmentDamage","oldDamageNumber","tooltipRows","castNum","percentageJudgmentsConsumed","DEFAULT","getStatisticTooltip","EnemyInstances","wastedHolyPower","gainedHolyPower","HOLY_AVENGER_TALENT","getHolyPower","resourceChangeType","baseAmount","resourceChange","formHA","gain","HEALING_HOLY_POWER_SPELLS","LIGHT_OF_DAWN_CAST","LIGHT_OF_DAWN_HEAL","DAMAGE_HOLY_POWER_SPELLS","BUFF_HOLY_POWER_SPELLS","ALL_HOLY_POWER_SPELLS","overhealingDone","holyPowerDamage","heal","holyPowerHeal","overheal","ItemHealingDone"],"mappings":"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","file":"static/js/RetributionPaladin.70ae2512.chunk.js","sourcesContent":["import SPELLS from 'common/SPELLS';\r\nimport CoreAbilities from 'parser/core/modules/Abilities';\r\nimport ISSUE_IMPORTANCE from 'parser/core/ISSUE_IMPORTANCE';\r\n\r\nclass Abilities extends CoreAbilities {\r\n  spellbook(){\r\n    const combatant = this.selectedCombatant;\r\n    return [\r\n      {\r\n        spell: SPELLS.WAKE_OF_ASHES,\r\n        category: Abilities.SPELL_CATEGORIES.COOLDOWNS,\r\n        cooldown: 45,\r\n        gcd: {\r\n          base: 1500,\r\n        },\r\n        castEfficiency: {\r\n          suggestion: true,\r\n          recommendedEfficiency: 0.85,\r\n          extraSuggestion: 'It has a high damage per execute time and generates a lot of Holy Power. Only hold the ability if adds are coming out in 15 seconds or less.',\r\n        },\r\n      },\r\n      {\r\n        spell: SPELLS.CRUSADE_TALENT,\r\n        category: Abilities.SPELL_CATEGORIES.COOLDOWNS,\r\n        buffSpellId: SPELLS.CRUSADE_TALENT.id,\r\n        cooldown: 120,\r\n        enabled: combatant.hasTalent(SPELLS.CRUSADE_TALENT.id),\r\n        castEfficiency: {\r\n          suggestion: true,\r\n          recommendedEfficiency: 0.9,\r\n          importance: ISSUE_IMPORTANCE.MAJOR,\r\n          extraSuggestion: 'This is our only cooldown and where most of our damage comes from. You really want to not lose a cast of this over a fight.',\r\n        },\r\n      },\r\n      {\r\n        spell: SPELLS.AVENGING_WRATH,\r\n        category: Abilities.SPELL_CATEGORIES.COOLDOWNS,\r\n        buffSpellId: SPELLS.AVENGING_WRATH.id,\r\n        cooldown: 120,\r\n        enabled: !combatant.hasTalent(SPELLS.CRUSADE_TALENT.id),\r\n        castEfficiency: {\r\n          suggestion: true,\r\n          recommendedEfficiency: 0.9,\r\n          importance: ISSUE_IMPORTANCE.MAJOR,\r\n          extraSuggestion: 'This is our only cooldown and where most of our damage comes from. You really want to not lose a cast of this over a fight.',\r\n        },\r\n      },\r\n      {\r\n        spell: SPELLS.CRUSADER_STRIKE,\r\n        category: Abilities.SPELL_CATEGORIES.ROTATIONAL,\r\n        charges: 2,\r\n        cooldown: (haste: number) => (6/(1+haste)) * (1 - (combatant.hasTalent(SPELLS.FIRES_OF_JUSTICE_TALENT.id) ? .85 : 0)),\r\n        gcd: {\r\n          base: 1500,\r\n        },\r\n        castEfficiency: {\r\n          suggestion: true,\r\n        },\r\n      },\r\n      {\r\n        spell: SPELLS.HAMMER_OF_WRATH,\r\n        category: Abilities.SPELL_CATEGORIES.ROTATIONAL,\r\n        cooldown: (haste: number) => (7.5 / (1 + haste)),\r\n        gcd: {\r\n          base: 1500,\r\n        },\r\n        castEfficiency: {\r\n          suggestion: false,\r\n        },\r\n      },\r\n      {\r\n        spell: SPELLS.JUDGMENT_CAST,\r\n        category: Abilities.SPELL_CATEGORIES.ROTATIONAL,\r\n        cooldown: (haste: number) => (12 / (1 + haste)),\r\n        gcd: {\r\n          base: 1500,\r\n        },\r\n        castEfficiency: {\r\n          suggestion: true,\r\n        },\r\n      },\r\n      {\r\n        spell: SPELLS.BLADE_OF_JUSTICE,\r\n        category: Abilities.SPELL_CATEGORIES.ROTATIONAL,\r\n        cooldown: (haste: number) => (12 / (1 + haste)),\r\n        gcd: {\r\n          base: 1500,\r\n        },\r\n        castEfficiency: {\r\n          suggestion: true,\r\n          recommendedEfficiency: 0.75,\r\n        },\r\n      },\r\n      {\r\n        spell: SPELLS.TEMPLARS_VERDICT,\r\n        category: Abilities.SPELL_CATEGORIES.ROTATIONAL,\r\n        gcd: {\r\n          base: 1500,\r\n        },\r\n      },\r\n      {\r\n        spell: SPELLS.DIVINE_STORM,\r\n        category: Abilities.SPELL_CATEGORIES.ROTATIONAL,\r\n        gcd: {\r\n          base: 1500,\r\n        },\r\n      },\r\n      {\r\n        spell: SPELLS.EXECUTION_SENTENCE_TALENT,\r\n        category: Abilities.SPELL_CATEGORIES.ROTATIONAL,\r\n        cooldown: 60,\r\n        gcd: {\r\n          base: 1500,\r\n        },\r\n        enabled: combatant.hasTalent(SPELLS.EXECUTION_SENTENCE_TALENT.id),\r\n        castEfficiency: {\r\n          suggestion: true,\r\n        },\r\n      },\r\n      {\r\n        spell: SPELLS.CONSECRATION_CAST,\r\n        category: Abilities.SPELL_CATEGORIES.ROTATIONAL,\r\n        cooldown: 9,\r\n        gcd: {\r\n          base: 1500,\r\n        },\r\n      },\r\n      //Utility\r\n      {\r\n        spell: SPELLS.SHIELD_OF_VENGEANCE,\r\n        buffSpellId: SPELLS.SHIELD_OF_VENGEANCE.id,\r\n        category: Abilities.SPELL_CATEGORIES.DEFENSIVE,\r\n        cooldown: combatant.hasTalent(SPELLS.UNBREAKABLE_SPIRIT_TALENT.id) ? 84 : 120,\r\n        gcd: {\r\n          base: 1500,\r\n        },\r\n        castEfficiency: {\r\n          suggestion: true,\r\n          recommendedEfficiency: 0.5,\r\n          importance: ISSUE_IMPORTANCE.MINOR,\r\n        },\r\n      },\r\n      {\r\n        spell: SPELLS.JUSTICARS_VENGEANCE_TALENT,\r\n        category: Abilities.SPELL_CATEGORIES.UTILITY,\r\n        gcd: {\r\n          base: 1500,\r\n        },\r\n        enabled: combatant.hasTalent(SPELLS.JUSTICARS_VENGEANCE_TALENT.id),\r\n      },\r\n      {\r\n        spell: SPELLS.EYE_FOR_AN_EYE_TALENT,\r\n        buffSpellId: SPELLS.EYE_FOR_AN_EYE_TALENT.id,\r\n        category: Abilities.SPELL_CATEGORIES.DEFENSIVE,\r\n        cooldown: 60,\r\n        gcd: {\r\n          base: 1500,\r\n        },\r\n        enabled: combatant.hasTalent(SPELLS.EYE_FOR_AN_EYE_TALENT.id),\r\n      },\r\n      {\r\n        spell: SPELLS.WORD_OF_GLORY,\r\n        category: Abilities.SPELL_CATEGORIES.UTILITY,\r\n        gcd: {\r\n          base: 1500,\r\n        },\r\n      },\r\n      {\r\n        spell: SPELLS.BLINDING_LIGHT_TALENT,\r\n        category: Abilities.SPELL_CATEGORIES.UTILITY,\r\n        cooldown: 90,\r\n        gcd: {\r\n          base: 1500,\r\n        },\r\n        enabled: combatant.hasTalent(SPELLS.BLINDING_LIGHT_TALENT.id),\r\n      },\r\n      {\r\n        spell: SPELLS.REPENTANCE_TALENT,\r\n        category: Abilities.SPELL_CATEGORIES.UTILITY,\r\n        cooldown: 15,\r\n        gcd: {\r\n          base: 1500,\r\n        },\r\n        enabled: combatant.hasTalent(SPELLS.REPENTANCE_TALENT.id),\r\n      },\r\n      {\r\n        spell: SPELLS.DIVINE_STEED,\r\n        category: Abilities.SPELL_CATEGORIES.UTILITY,\r\n        charges: combatant.hasTalent(SPELLS.CAVALIER_TALENT.id) ? 2 : 1,\r\n        cooldown: 45,\r\n        gcd: {\r\n          base: 1500,\r\n        },\r\n      },\r\n      {\r\n        spell: SPELLS.LAY_ON_HANDS,\r\n        isDefensive: true,\r\n        category: Abilities.SPELL_CATEGORIES.UTILITY,\r\n        cooldown: combatant.hasTalent(SPELLS.UNBREAKABLE_SPIRIT_TALENT.id) ? 420 : 600,\r\n        castEfficiency: {\r\n          recommendedEfficiency: 0.1,\r\n        },\r\n      },\r\n      {\r\n        spell: SPELLS.BLESSING_OF_FREEDOM,\r\n        category: Abilities.SPELL_CATEGORIES.UTILITY,\r\n        cooldown: 25,\r\n        gcd: {\r\n          base: 1500,\r\n        },\r\n      },\r\n      {\r\n        spell: SPELLS.BLESSING_OF_PROTECTION,\r\n        buffSpellId: SPELLS.BLESSING_OF_PROTECTION.id,\r\n        isDefensive: true,\r\n        category: Abilities.SPELL_CATEGORIES.UTILITY,\r\n        cooldown: 300,\r\n        gcd: {\r\n          base: 1500,\r\n        },\r\n      },\r\n      {\r\n        spell: SPELLS.HAMMER_OF_JUSTICE,\r\n        category: Abilities.SPELL_CATEGORIES.UTILITY,\r\n        cooldown: 60,\r\n        gcd: {\r\n          base: 1500,\r\n        },\r\n      },\r\n      {\r\n        spell: SPELLS.HAND_OF_RECKONING,\r\n        category: Abilities.SPELL_CATEGORIES.UTILITY,\r\n        cooldown: 8,\r\n      },\r\n      {\r\n        spell: SPELLS.REBUKE,\r\n        category: Abilities.SPELL_CATEGORIES.UTILITY,\r\n        cooldown: 15,\r\n      },\r\n      {\r\n        spell: SPELLS.SERAPHIM_TALENT,\r\n        buffSpellId: SPELLS.SERAPHIM_TALENT.id,\r\n        category: Abilities.SPELL_CATEGORIES.SEMI_DEFENSIVE,\r\n        cooldown: 45,\r\n        gcd: {\r\n          base: 1500,\r\n        },\r\n        enabled: combatant.hasTalent(SPELLS.SERAPHIM_TALENT.id),\r\n        castEfficiency: {\r\n          suggestion: true,\r\n        },\r\n      },\r\n      {\r\n        spell: SPELLS.DIVINE_SHIELD,\r\n        buffSpellId: SPELLS.DIVINE_SHIELD.id,\r\n        category: Abilities.SPELL_CATEGORIES.DEFENSIVE,\r\n        cooldown: combatant.hasTalent(SPELLS.UNBREAKABLE_SPIRIT_TALENT.id) ? 210 : 300,\r\n        gcd: {\r\n          base: 1500,\r\n        },\r\n      },\r\n      {\r\n        spell: SPELLS.FLASH_OF_LIGHT,\r\n        category: Abilities.SPELL_CATEGORIES.UTILITY,\r\n        channel: (haste: number) => (1.5 / (1 + haste)),\r\n        gcd: {\r\n          base: 1500,\r\n        },\r\n      },\r\n      {\r\n        spell: SPELLS.BLESSING_OF_SACRIFICE,\r\n        category: Abilities.SPELL_CATEGORIES.UTILITY,\r\n        cooldown: 120,\r\n      },\r\n      {\r\n        spell: SPELLS.CLEANSE,\r\n        category: Abilities.SPELL_CATEGORIES.UTILITY,\r\n        cooldown: 8,\r\n        gcd: {\r\n          base: 1500,\r\n        },\r\n      },\r\n      {\r\n        spell: SPELLS.CRUSADER_AURA,\r\n        category: Abilities.SPELL_CATEGORIES.UTILITY,\r\n        gcd: {\r\n          base: 1500,\r\n        },\r\n      },\r\n      {\r\n        spell: SPELLS.RETRIBUTION_AURA,\r\n        category: Abilities.SPELL_CATEGORIES.UTILITY,\r\n        gcd: {\r\n          base: 1500,\r\n        },\r\n      },\r\n      {\r\n        spell: SPELLS.CONCENTRATION_AURA,\r\n        category: Abilities.SPELL_CATEGORIES.UTILITY,\r\n        gcd: {\r\n          base: 1500,\r\n        },\r\n      },\r\n      {\r\n        spell: SPELLS.DEVOTION_AURA,\r\n        category: Abilities.SPELL_CATEGORIES.UTILITY,\r\n        gcd: {\r\n          base: 1500,\r\n        },\r\n      },\r\n      {\r\n        spell: SPELLS.TURN_EVIL,\r\n        category: Abilities.SPELL_CATEGORIES.UTILITY,\r\n        cooldown: 15,\r\n        channel: (haste: number) => (1.5 / (1 + haste)),\r\n        gcd: {\r\n          base: 1500,\r\n        },\r\n      },\r\n      {\r\n        spell: SPELLS.SENSE_UNDEAD,\r\n        category: Abilities.SPELL_CATEGORIES.UTILITY,\r\n        gcd: {\r\n          base: 1500,\r\n        },\r\n      },\r\n      {\r\n        spell: SPELLS.HAND_OF_HINDRANCE,\r\n        category: Abilities.SPELL_CATEGORIES.UTILITY,\r\n        cooldown: 30,\r\n        gcd: {\r\n          base: 1500,\r\n        },\r\n      },\r\n      {\r\n        spell: SPELLS.SHIELD_OF_THE_RIGHTEOUS,\r\n        category: Abilities.SPELL_CATEGORIES.UTILITY,\r\n        cooldown: 1,\r\n      },\r\n    ];\r\n  }\r\n}\r\n\r\nexport default Abilities;\r\n","import React from 'react';\r\nimport SPELLS from 'common/SPELLS';\r\nimport SpellLink from 'common/SpellLink';\r\n\r\nimport { formatPercentage } from 'common/format';\r\n\r\nimport CoreAlwaysBeCasting from 'parser/shared/modules/AlwaysBeCasting';\r\n\r\nimport { STATISTIC_ORDER } from 'interface/others/StatisticBox';\r\n\r\nimport { i18n } from '@lingui/core';\r\nimport { t } from '@lingui/macro';\r\n\r\nclass AlwaysBeCasting extends CoreAlwaysBeCasting {\r\n  get suggestionThresholds() {\r\n    return {\r\n      actual: this.downtimePercentage,\r\n      isGreaterThan: {\r\n        minor: 0.15,\r\n        average: 0.25,\r\n        major: 0.35,\r\n      },\r\n      style: 'percentage',\r\n    };\r\n  }\r\n\r\n  suggestions(when) {\r\n    const boss = this.owner.boss;\r\n\r\n    if (!boss || !boss.fight.disableDowntimeSuggestion) {\r\n      when(this.suggestionThresholds).addSuggestion((suggest, actual, recommended) => suggest(<>Your downtime can be improved. Try to Always Be Casting (ABC), try to reduce the delay between casting spells. Even if you have to move, try casting something instant with range like <SpellLink id={SPELLS.JUDGMENT_CAST.id} icon /> or <SpellLink id={SPELLS.BLADE_OF_JUSTICE.id} icon />.</>)\r\n          .icon('spell_mage_altertime')\r\n          .actual(i18n._(t('paladin.retribution.alwaysBeCasting.downtime')`${formatPercentage(actual)}% downtime`))\r\n          .recommended(`<${formatPercentage(recommended)}% is recommended`));\r\n    }\r\n  }\r\n\r\n  static icons = {\r\n    activeTime: '/img/wheelchair.png',\r\n    downtime: '/img/afk.png',\r\n  };\r\n  statisticOrder = STATISTIC_ORDER.CORE(1);\r\n}\r\n\r\nexport default AlwaysBeCasting;\r\n","import SPELLS from 'common/SPELLS';\r\nimport CoreBuffs from 'parser/core/modules/Buffs';\r\nimport BLOODLUST_BUFFS from 'game/BLOODLUST_BUFFS';\r\n\r\nclass Buffs extends CoreBuffs {\r\n  buffs() {\r\n    const combatant = this.selectedCombatant;\r\n    return [\r\n      {\r\n        spellId: SPELLS.EMPYREAN_POWER_TALENT_BUFF.id,\r\n        enabled: combatant.hasTalent(SPELLS.EMPYREAN_POWER_TALENT.id),\r\n        timelineHighlight: true,\r\n      },\r\n      {\r\n        spellId: SPELLS.DIVINE_PURPOSE_BUFF.id,\r\n        enabled: combatant.hasTalent(SPELLS.DIVINE_PURPOSE_TALENT),\r\n        timelineHighlight: true,\r\n      },\r\n      {\r\n        spellId: SPELLS.FIRES_OF_JUSTICE_BUFF.id,\r\n      },\r\n      {\r\n        spellId: SPELLS.RIGHTEOUS_VERDICT_BUFF.id,\r\n      },\r\n      // Throughput cooldowns\r\n      {\r\n        spellId: SPELLS.AVENGING_WRATH.id,\r\n        enabled: !combatant.hasTalent(SPELLS.CRUSADE_TALENT),\r\n        timelineHighlight: true,\r\n      },\r\n      {\r\n        spellId: SPELLS.CRUSADE_TALENT.id,\r\n        enabled: combatant.hasTalent(SPELLS.CRUSADE_TALENT),\r\n        timelineHighlight: true,\r\n      },\r\n      // Utility\r\n      {\r\n        spellId: [SPELLS.DIVINE_STEED_BUFF.id, SPELLS.DIVINE_STEED_BUFF_ALT.id, SPELLS.DIVINE_STEED_BUFF_ALT_2.id, SPELLS.DIVINE_STEED_BUFF_ALT_3.id],\r\n        triggeredBySpellId: SPELLS.DIVINE_STEED.id,\r\n      },\r\n      {\r\n        spellId: SPELLS.DIVINE_SHIELD.id,\r\n      },\r\n      {\r\n        spellId: SPELLS.SHIELD_OF_VENGEANCE.id,\r\n      },\r\n      {\r\n        spellId: SPELLS.EYE_FOR_AN_EYE_TALENT.id,\r\n        enabled: combatant.hasTalent(SPELLS.EYE_FOR_AN_EYE_TALENT),\r\n      },\r\n      {\r\n        spellId: SPELLS.BLESSING_OF_FREEDOM.id,\r\n      },\r\n      {\r\n        spellId: SPELLS.BLESSING_OF_PROTECTION.id,\r\n      },\r\n      {\r\n        spellId: Object.keys(BLOODLUST_BUFFS).map(item => Number(item)),\r\n        timelineHighlight: true,\r\n      },\r\n    ];\r\n  }\r\n}\r\n\r\nexport default Buffs;\r\n","import SPELLS from 'common/SPELLS';\r\nimport CoreCooldownThroughputTracker, { BUILT_IN_SUMMARY_TYPES } from 'parser/shared/modules/CooldownThroughputTracker';\r\n\r\nclass CooldownThroughputTracker extends CoreCooldownThroughputTracker {\r\n  static cooldownSpells = [\r\n    ...CoreCooldownThroughputTracker.cooldownSpells,\r\n    {\r\n      spell: SPELLS.AVENGING_WRATH,\r\n      summary: [\r\n        BUILT_IN_SUMMARY_TYPES.DAMAGE,\r\n      ],\r\n    },\r\n    {\r\n      spell: SPELLS.CRUSADE_TALENT,\r\n      summary: [\r\n        BUILT_IN_SUMMARY_TYPES.DAMAGE,\r\n      ],\r\n    },\r\n    {\r\n    spell: SPELLS.EXECUTION_SENTENCE_TALENT,\r\n    summary: [\r\n      BUILT_IN_SUMMARY_TYPES.DAMAGE,\r\n      ],\r\n    },\r\n  ];\r\n}\r\n\r\nexport default CooldownThroughputTracker;\r\n","import React from 'react';\r\n\r\nimport SPELLS from 'common/SPELLS';\r\nimport SpellLink from 'common/SpellLink';\r\nimport SpellIcon from 'common/SpellIcon';\r\nimport { formatPercentage } from 'common/format';\r\nimport StatisticBox, { STATISTIC_ORDER } from 'interface/others/StatisticBox';\r\nimport Combatants from 'parser/shared/modules/Combatants';\r\nimport Analyzer, { SELECTED_PLAYER, Options } from 'parser/core/Analyzer';\r\nimport SpellUsable from 'parser/shared/modules/SpellUsable';\r\nimport Events, {ApplyBuffEvent, RefreshBuffEvent, CastEvent} from 'parser/core/Events';\r\nimport { i18n } from '@lingui/core';\r\nimport { t } from '@lingui/macro';\r\nimport { ThresholdStyle, When } from 'parser/core/ParseResults';\r\n\r\nconst ART_OF_WAR_DURATION = 10000;\r\n\r\nclass AoWProcTracker extends Analyzer {\r\n  static dependencies = {\r\n    combatants: Combatants,\r\n    spellUsable: SpellUsable,\r\n  };\r\n\r\n  protected spellUsable!: SpellUsable;\r\n\r\n  consumedAoWProcs = 0;\r\n  wastedAoWProcs = 0;\r\n  totalAoWProcs = 0;\r\n  lastAoWProcTime: null | number = null;\r\n\r\n  constructor(options: Options){\r\n    super(options);\r\n    this.addEventListener(Events.applybuff.by(SELECTED_PLAYER).spell(SPELLS.BLADE_OF_WRATH_PROC), this.onApplyBuff);\r\n    this.addEventListener(Events.refreshbuff.by(SELECTED_PLAYER).spell(SPELLS.BLADE_OF_WRATH_PROC), this.onRefreshBuff);\r\n    this.addEventListener(Events.cast.by(SELECTED_PLAYER).spell(SPELLS.BLADE_OF_JUSTICE), this.onCast);\r\n  }\r\n\r\n  onApplyBuff(event: ApplyBuffEvent) {\r\n    this.totalAoWProcs += 1;\r\n    if (this.spellUsable.isOnCooldown(SPELLS.BLADE_OF_JUSTICE.id)) {\r\n      this.spellUsable.endCooldown(SPELLS.BLADE_OF_JUSTICE.id);\r\n      this.lastAoWProcTime= event.timestamp;\r\n    }\r\n  }\r\n\r\n  onRefreshBuff(event: RefreshBuffEvent) {\r\n    this.wastedAoWProcs += 1;\r\n    this.totalAoWProcs += 1;\r\n  }\r\n\r\n  get consumedProcsPercent() {\r\n    return this.consumedAoWProcs / this.totalAoWProcs;\r\n  }\r\n\r\n  get suggestionThresholds() {\r\n    return {\r\n      actual: this.consumedProcsPercent,\r\n      isLessThan: {\r\n        minor: 0.95,\r\n        average: 0.9,\r\n        major: 0.85,\r\n      },\r\n      style: ThresholdStyle.PERCENTAGE,\r\n    };\r\n  }\r\n\r\n  onCast(event: CastEvent) {\r\n    if (this.lastAoWProcTime !== event.timestamp) {\r\n      if (this.lastAoWProcTime === null) {\r\n        return;\r\n      }\r\n      const AoWTimeframe = this.lastAoWProcTime + ART_OF_WAR_DURATION;\r\n      if (event.timestamp <= AoWTimeframe) {\r\n        this.consumedAoWProcs += 1;\r\n        this.lastAoWProcTime = null;\r\n      }\r\n    }\r\n  }\r\n\r\n  suggestions(when: When) {\r\n    when(this.suggestionThresholds).addSuggestion((suggest, actual, recommended) => suggest(<>You used {formatPercentage(this.consumedProcsPercent)}% of your <SpellLink id={SPELLS.ART_OF_WAR.id} icon /> procs.</>)\r\n        .icon(SPELLS.ART_OF_WAR.icon)\r\n        .actual(i18n._(t('paladin.retribution.suggestions.artOfWar.procsUsed')`${formatPercentage(this.consumedProcsPercent)}% proc(s) used.`))\r\n        .recommended(`Using >${formatPercentage(recommended)}% is recommended`));\r\n  }\r\n\r\n  statistic() {\r\n    return (\r\n      <StatisticBox\r\n        position={STATISTIC_ORDER.OPTIONAL(2)}\r\n        icon={<SpellIcon id={SPELLS.ART_OF_WAR.id} />}\r\n        value={`${formatPercentage(this.consumedProcsPercent)}%`}\r\n        label=\"Art of War Procs Used\"\r\n        tooltip={`You got ${this.totalAoWProcs} Art of War procs and used ${this.consumedAoWProcs} of them.`}\r\n      />\r\n    );\r\n  }\r\n}\r\n\r\nexport default AoWProcTracker;\r\n","import React from 'react';\r\n\r\nimport SPELLS from 'common/SPELLS';\r\nimport SpellLink from 'common/SpellLink';\r\nimport { formatNumber } from 'common/format';\r\nimport Analyzer, { SELECTED_PLAYER, Options } from 'parser/core/Analyzer';\r\nimport Events, {CastEvent, ApplyBuffStackEvent} from 'parser/core/Events';\r\nimport AbilityTracker from 'parser/shared/modules/AbilityTracker';\r\nimport GlobalCooldown from 'parser/shared/modules/GlobalCooldown';\r\nimport HolyPowerTracker from 'parser/paladin/shared/holypower/HolyPowerTracker';\r\nimport { i18n } from '@lingui/core';\r\nimport { t } from '@lingui/macro';\r\nimport { ThresholdStyle, When } from 'parser/core/ParseResults';\r\n\r\nconst CAST_BUFFER = 500;\r\n\r\nclass Crusade extends Analyzer {\r\n  static dependencies = {\r\n    abilityTracker: AbilityTracker,\r\n    globalCooldown: GlobalCooldown,\r\n    holyPowerTracker: HolyPowerTracker,\r\n  };\r\n\r\n  protected abilityTracker!: AbilityTracker;\r\n  protected globalCooldown!: GlobalCooldown;\r\n  protected holyPowerTracker!: HolyPowerTracker;\r\n\r\n  constructor(options: Options) {\r\n    super(options);\r\n    this.active = this.selectedCombatant.hasTalent(SPELLS.CRUSADE_TALENT.id);\r\n    if (!this.active) {\r\n      return;\r\n    }\r\n    this.addEventListener(Events.cast.by(SELECTED_PLAYER).spell(SPELLS.CRUSADE_TALENT), this.onCrusadeCast);\r\n    this.addEventListener(Events.applybuffstack.by(SELECTED_PLAYER).spell(SPELLS.CRUSADE_TALENT), this.onCrusadeBuffStack);\r\n  }\r\n\r\n  crusadeCastTimestamp?: number;\r\n  badFirstGlobal = 0;\r\n  gcdBuffer = 0;\r\n\r\n  onCrusadeCast(event: CastEvent) {\r\n    this.crusadeCastTimestamp = event.timestamp;\r\n    this.gcdBuffer = this.globalCooldown.getGlobalCooldownDuration(SPELLS.CRUSADE_TALENT.id);\r\n    if (this.holyPowerTracker.current < 3) {\r\n      event.meta = event.meta || {};\r\n      event.meta.isInefficientCast = true;\r\n      event.meta.inefficientCastReason = 'Make sure to have at least 3 Holy Power before using Crusade. Ideally you should have 5 Holy Power before using Crusade after your first use.';\r\n    }\r\n  }\r\n\r\n  onCrusadeBuffStack(event: ApplyBuffStackEvent) {\r\n    if (this.crusadeCastTimestamp && event.timestamp > (this.crusadeCastTimestamp + CAST_BUFFER + this.gcdBuffer)) {\r\n      this.badFirstGlobal += 1;\r\n    }\r\n    this.crusadeCastTimestamp = undefined;\r\n  }\r\n\r\n  get badGlobalPercent() {\r\n    return this.badFirstGlobal / this.abilityTracker.getAbility(SPELLS.CRUSADE_TALENT.id).casts;\r\n  }\r\n\r\n  get suggestionThresholds() {\r\n    return {\r\n      actual: 1 - this.badGlobalPercent,\r\n      isLessThan: {\r\n        minor: 1,\r\n        average: 0.75,\r\n        major: 0.5,\r\n      },\r\n      style: ThresholdStyle.PERCENTAGE,\r\n    };\r\n  }\r\n\r\n  suggestions(when: When) {\r\n    when(this.suggestionThresholds).addSuggestion((suggest, actual) => suggest(<>You want to build stacks of <SpellLink id={SPELLS.CRUSADE_TALENT.id} icon /> as quickly as possible. Make sure you are using <SpellLink id={SPELLS.TEMPLARS_VERDICT.id} icon /> or <SpellLink id={SPELLS.DIVINE_STORM.id} icon /> immediately after casting <SpellLink id={SPELLS.CRUSADE_TALENT.id} icon />.</>)\r\n        .icon(SPELLS.CRUSADE_TALENT.icon)\r\n        .actual(i18n._(t('paladin.retribution.suggestions.Crusade.efficiency')`${formatNumber(this.badFirstGlobal)} bad first global(s)`))\r\n        .recommended(`0 is recommended`));\r\n  }\r\n}\r\n\r\nexport default Crusade;\r\n","import React from 'react';\r\n\r\nimport SPELLS from 'common/SPELLS';\r\nimport SpellLink from 'common/SpellLink';\r\nimport SpellIcon from 'common/SpellIcon';\r\nimport StatisticBox, { STATISTIC_ORDER } from 'interface/others/StatisticBox';\r\nimport { formatNumber, formatPercentage } from 'common/format';\r\n\r\nimport Analyzer, { SELECTED_PLAYER, Options } from 'parser/core/Analyzer';\r\n\r\nimport calculateEffectiveDamage from 'parser/core/calculateEffectiveDamage';\r\nimport Events, {CastEvent, DamageEvent} from 'parser/core/Events';\r\n\r\nimport { i18n } from '@lingui/core';\r\nimport { t } from '@lingui/macro';\r\nimport { ThresholdStyle, When } from 'parser/core/ParseResults';\r\n\r\nconst RIGHTEOUS_VERDICT_MODIFIER = 0.15;\r\n\r\nclass RighteousVerdict extends Analyzer {\r\n  damageDone = 0;\r\n  spendersInsideBuff = 0;\r\n  totalSpenders = 0;\r\n\r\n  constructor(options: Options) {\r\n    super(options);\r\n    this.active = this.selectedCombatant.hasTalent(SPELLS.RIGHTEOUS_VERDICT_TALENT.id);\r\n    this.addEventListener(Events.cast.by(SELECTED_PLAYER).spell(SPELLS.TEMPLARS_VERDICT), this.onCast);\r\n    this.addEventListener(Events.damage.by(SELECTED_PLAYER).spell(SPELLS.TEMPLARS_VERDICT_DAMAGE), this.onDamage);\r\n  }\r\n\r\n  onCast(event: CastEvent) {\r\n    this.totalSpenders += 1;\r\n  }\r\n\r\n  onDamage(event: DamageEvent) {\r\n    if (this.selectedCombatant.hasBuff(SPELLS.RIGHTEOUS_VERDICT_BUFF.id)) {\r\n      this.spendersInsideBuff += 1;\r\n      this.damageDone += calculateEffectiveDamage(event, RIGHTEOUS_VERDICT_MODIFIER);\r\n    }\r\n  }\r\n\r\n  get suggestionThresholds() {\r\n    return {\r\n      actual: this.spendersInsideBuff / this.totalSpenders,\r\n      isLessThan: {\r\n        minor: 0.80,\r\n        average: 0.75,\r\n        major: 0.70,\r\n      },\r\n      style: ThresholdStyle.PERCENTAGE,\r\n    };\r\n  }\r\n\r\n  suggestions(when: When) {\r\n    when(this.suggestionThresholds).addSuggestion((suggest, actual, recommended) => suggest(<>Your usage of <SpellLink id={SPELLS.RIGHTEOUS_VERDICT_TALENT.id} icon /> can be improved.  Do not cast <SpellLink id={SPELLS.TEMPLARS_VERDICT.id} icon /> early to try and keep the buff active. Maintaining a proper roatation will passively lead to good <SpellLink id={SPELLS.RIGHTEOUS_VERDICT_TALENT.id} icon /> efficiency. Consider using another talent if the fight mechanics are preventing you from getting high enough efficiency.</>)\r\n        .icon(SPELLS.RIGHTEOUS_VERDICT_TALENT.icon)\r\n        .actual(i18n._(t('paladin.retribution.suggestions.righteousVerdict.efficiency')`${formatPercentage(actual)}% of Templars Verdicts with the buff.`))\r\n        .recommended(`>${formatPercentage(recommended)}% is recommended`));\r\n  }\r\n\r\n  statistic() {\r\n    return (\r\n      <StatisticBox\r\n        position={STATISTIC_ORDER.CORE(7)}\r\n        icon={<SpellIcon id={SPELLS.RIGHTEOUS_VERDICT_TALENT.id} />}\r\n        value={formatNumber(this.damageDone)}\r\n        label=\"Damage Done\"\r\n        tooltip={(\r\n          <>\r\n            The effective damage contributed by Righteous Verdict.<br />\r\n            Total Damage: {formatNumber(this.damageDone)} ({formatPercentage(this.owner.getPercentageOfTotalDamageDone(this.damageDone))} %)<br />\r\n            Buffed Casts: {formatNumber(this.spendersInsideBuff)} ({formatPercentage(this.spendersInsideBuff / this.totalSpenders)}%)\r\n          </>\r\n        )}\r\n      />\r\n    );\r\n  }\r\n}\r\n\r\nexport default RighteousVerdict;\r\n","import React from 'react';\r\nimport SPELLS from 'common/SPELLS';\r\nimport SpellIcon from 'common/SpellIcon';\r\nimport SpellLink from 'common/SpellLink';\r\nimport { formatPercentage } from 'common/format';\r\nimport Analyzer, { SELECTED_PLAYER, Options } from 'parser/core/Analyzer';\r\nimport HealingDone from 'parser/shared/modules/throughput/HealingDone';\r\nimport StatisticBox, { STATISTIC_ORDER } from 'interface/others/StatisticBox';\r\nimport StatTracker from 'parser/shared/modules/StatTracker';\r\nimport Events, {CastEvent} from 'parser/core/Events';\r\nimport { i18n } from '@lingui/core';\r\nimport { t } from '@lingui/macro';\r\nimport { ThresholdStyle, When } from 'parser/core/ParseResults';\r\n\r\nconst SHIELD_OF_VENGEANCE_HEALTH_SCALING = 0.3;\r\n\r\nclass ShieldOfVengeance extends Analyzer {\r\n  static dependencies = {\r\n    healingDone: HealingDone,\r\n    statTracker: StatTracker,\r\n  };\r\n\r\n  protected statTracker!: StatTracker;\r\n  protected healingDone!: HealingDone;\r\n\r\n  totalPossibleAbsorb = 0;\r\n\r\n  constructor(options: Options){\r\n    super(options);\r\n    this.addEventListener(Events.cast.by(SELECTED_PLAYER).spell(SPELLS.SHIELD_OF_VENGEANCE), this.onCast);\r\n  }\r\n\r\n  onCast(event: CastEvent) {\r\n    if (!event.maxHitPoints) {\r\n      return false;\r\n    }\r\n    this.totalPossibleAbsorb += event.maxHitPoints * SHIELD_OF_VENGEANCE_HEALTH_SCALING * (1+this.statTracker.currentVersatilityPercentage);\r\n  }\r\n\r\n  get pctAbsorbUsed() {\r\n    return this.healingDone.byAbility(SPELLS.SHIELD_OF_VENGEANCE.id).effective / this.totalPossibleAbsorb;\r\n  }\r\n\r\n  get suggestionThresholds() {\r\n    return {\r\n      actual: this.pctAbsorbUsed,\r\n      isLessThan: {\r\n        minor: 0.8,\r\n        average: 0.65,\r\n        major: 0.5,\r\n      },\r\n      style: ThresholdStyle.PERCENTAGE,\r\n    };\r\n  }\r\n\r\n  suggestions(when: When) {\r\n    when(this.suggestionThresholds).addSuggestion((suggest, actual, recommended) => suggest(<>You consumed a low amount of your total <SpellLink id={SPELLS.SHIELD_OF_VENGEANCE.id} /> absorb. It's best used when you can take enough damage to consume most of the absorb. Getting full absorb usage can be difficult on lower difficulty encounters.</>)\r\n        .icon(SPELLS.SHIELD_OF_VENGEANCE.icon)\r\n        .actual(i18n._(t('paladin.retribution.suggestions.shieldOfVengeance.absorbUsed')`${formatPercentage(actual)}% Shield of Vengeance absorb used`))\r\n        .recommended(`>${formatPercentage(recommended)}% is recommended`));\r\n  }\r\n\r\n  statistic() {\r\n    return (\r\n      <StatisticBox\r\n        position={STATISTIC_ORDER.OPTIONAL(2)}\r\n        icon={<SpellIcon id={SPELLS.SHIELD_OF_VENGEANCE.id} />}\r\n        value={`${formatPercentage(this.pctAbsorbUsed)}%`}\r\n        label=\"Shield of Vengeance Absorb Used\"\r\n        tooltip=\"This does not account for possible absorb from missed Shield of Vengeance casts.\"\r\n        />\r\n    );\r\n  }\r\n}\r\n\r\nexport default ShieldOfVengeance;\r\n","import React from 'react';\r\nimport PropTypes from 'prop-types';\r\n\r\nimport SPELLS from 'common/SPELLS';\r\nimport SpellLink from 'common/SpellLink';\r\nimport Checklist from 'parser/shared/modules/features/Checklist';\r\nimport Rule from 'parser/shared/modules/features/Checklist/Rule';\r\nimport Requirement from 'parser/shared/modules/features/Checklist/Requirement';\r\nimport PreparationRule from 'parser/shared/modules/features/Checklist/PreparationRule';\r\nimport GenericCastEfficiencyRequirement from 'parser/shared/modules/features/Checklist/GenericCastEfficiencyRequirement';\r\n\r\nconst RetributionPaladinChecklist = ({ combatant, castEfficiency, thresholds }) => {\r\n  const AbilityRequirement = props => (\r\n    <GenericCastEfficiencyRequirement\r\n      castEfficiency={castEfficiency.getCastEfficiencyForSpellId(props.spell)}\r\n      {...props}\r\n    />\r\n  );\r\n  AbilityRequirement.propTypes = {\r\n    spell: PropTypes.number.isRequired,\r\n  };\r\n\r\n  return (\r\n    <Checklist>\r\n      <Rule\r\n        name=\"Always be casting\"\r\n        description={(\r\n          <>\r\n            You should try to avoid doing nothing during the fight. If you have to move, use your <SpellLink id={SPELLS.DIVINE_STEED.id} icon /> to minimize downtime. Also use ranged abilities like <SpellLink id={SPELLS.JUDGMENT_CAST.id} icon /> or <SpellLink id={SPELLS.BLADE_OF_JUSTICE.id} icon /> if you are out of melee range for extended periods of time.\r\n          </>\r\n        )}\r\n        >\r\n        <Requirement name=\"Downtime\" thresholds={thresholds.alwaysBeCasting} />\r\n      </Rule>\r\n      <Rule\r\n        name=\"Use core abilities as often as possible\"\r\n        description={(\r\n          <>\r\n            Spells with short cooldowns like <SpellLink id={SPELLS.JUDGMENT_CAST.id} icon />, <SpellLink id={SPELLS.BLADE_OF_JUSTICE.id} icon />, and <SpellLink id={SPELLS.CRUSADER_STRIKE.id} icon /> should be used as often as possible.\r\n          </>\r\n        )}\r\n      >\r\n        <AbilityRequirement spell={SPELLS.CRUSADER_STRIKE.id} />\r\n        <AbilityRequirement spell={SPELLS.JUDGMENT_CAST.id} />\r\n        <AbilityRequirement spell={SPELLS.BLADE_OF_JUSTICE.id} />\r\n        <AbilityRequirement spell={SPELLS.CONSECRATION_CAST.id} />\r\n      </Rule>\r\n      <Rule\r\n        name=\"Use your cooldowns\"\r\n        description={(\r\n          <>\r\n            Retribution Paladin is a very cooldown dependant spec. Make sure you are keeping spells like <SpellLink id={combatant.hasTalent(SPELLS.CRUSADE_TALENT.id) ? SPELLS.CRUSADE_TALENT.id : SPELLS.AVENGING_WRATH.id} icon /> and <SpellLink id={SPELLS.WAKE_OF_ASHES.id} /> on cooldown.\r\n          </>\r\n        )}\r\n      >\r\n        {combatant.hasTalent(SPELLS.CRUSADE_TALENT.id) && <AbilityRequirement spell={SPELLS.CRUSADE_TALENT.id} />}\r\n        {!combatant.hasTalent(SPELLS.CRUSADE_TALENT.id) && <AbilityRequirement spell={SPELLS.AVENGING_WRATH.id} />}\r\n        {combatant.hasTalent(SPELLS.WAKE_OF_ASHES.id) && <AbilityRequirement spell={SPELLS.WAKE_OF_ASHES.id} />}\r\n        {combatant.hasTalent(SPELLS.EXECUTION_SENTENCE_TALENT.id) && <AbilityRequirement spell={SPELLS.EXECUTION_SENTENCE_TALENT.id} />}\r\n        {combatant.hasTalent(SPELLS.CRUSADE_TALENT.id) && (\r\n          <Requirement\r\n            name={(\r\n              <>\r\n                Good first global with <SpellLink id={SPELLS.CRUSADE_TALENT.id} icon />\r\n              </>\r\n            )}\r\n            thresholds={thresholds.crusade}\r\n          />\r\n        )}\r\n      </Rule>\r\n      <Rule\r\n        name=\"Use procs and buffs efficiently\"\r\n        description={(\r\n          <>\r\n            Buffs and procs like <SpellLink id={SPELLS.ART_OF_WAR.id} icon /> and <SpellLink id={SPELLS.RIGHTEOUS_VERDICT_TALENT.id} icon /> have a significant impact on your damage, use them well.\r\n        </>\r\n        )}\r\n      >\r\n        <Requirement\r\n          name={(\r\n            <>\r\n              <SpellLink id={SPELLS.ART_OF_WAR.id} icon /> procs used\r\n            </>\r\n          )}\r\n          thresholds={thresholds.artOfWar}\r\n        />\r\n        <Requirement\r\n          name={(\r\n            <>\r\n              <SpellLink id={SPELLS.JUDGMENT_CAST.id} icon /> debuffs consumed\r\n            </>\r\n          )}\r\n          thresholds={thresholds.judgment}\r\n        />\r\n        {combatant.hasTalent(SPELLS.RIGHTEOUS_VERDICT_TALENT.id) && (\r\n          <Requirement\r\n            name={(\r\n              <>\r\n                <SpellLink id={SPELLS.RIGHTEOUS_VERDICT_TALENT.id} icon /> efficiency\r\n              </>\r\n            )}\r\n            thresholds={thresholds.righteousVerdict}\r\n          />\r\n        )}\r\n      </Rule>\r\n      <Rule\r\n        name=\"Use your Holy Power efficently\"\r\n        description=\"Holy Power is your main resource, it's very important not to waste it.\"\r\n      >\r\n        <Requirement\r\n          name=\"Holy Power efficiency\"\r\n          thresholds={thresholds.holyPowerDetails}\r\n        />\r\n      </Rule>\r\n      <PreparationRule thresholds={thresholds} />\r\n      <Rule\r\n        name=\"Use your utility and defensive spells\"\r\n        description={(\r\n          <>\r\n            Use other spells in your toolkit to your advantage. For example, you can use <SpellLink id={SPELLS.SHIELD_OF_VENGEANCE.id} icon /> to mitigate some damage and <SpellLink id={SPELLS.LAY_ON_HANDS.id} icon /> to save your own or someone elses life.\r\n          </>\r\n        )}\r\n      >\r\n        <AbilityRequirement spell={SPELLS.SHIELD_OF_VENGEANCE.id} />\r\n        <AbilityRequirement spell={SPELLS.LAY_ON_HANDS.id} />\r\n        <Requirement\r\n          name={(\r\n            <>\r\n              <SpellLink id={SPELLS.SHIELD_OF_VENGEANCE.id} icon /> Absorb Used\r\n            </>\r\n          )}\r\n          thresholds={thresholds.shieldOfVengeance}\r\n        />\r\n      </Rule>\r\n    </Checklist>\r\n  );\r\n};\r\n\r\nRetributionPaladinChecklist.propTypes = {\r\n  castEfficiency: PropTypes.object.isRequired,\r\n  combatant: PropTypes.shape({\r\n    hasTalent: PropTypes.func.isRequired,\r\n  }).isRequired,\r\n  thresholds: PropTypes.object.isRequired,\r\n};\r\n\r\nexport default RetributionPaladinChecklist;\r\n","import React from 'react';\r\n\r\nimport BaseChecklist from 'parser/shared/modules/features/Checklist/Module';\r\nimport CastEfficiency from 'parser/shared/modules/CastEfficiency';\r\nimport Combatants from 'parser/shared/modules/Combatants';\r\nimport PreparationRuleAnalyzer from 'parser/shared/modules/features/Checklist/PreparationRuleAnalyzer';\r\nimport Judgment from 'parser/paladin/shared/spells/Judgment';\r\n\r\nimport AlwaysBeCasting from '../AlwaysBeCasting';\r\nimport HolyPowerDetails from '../../../../shared/holypower/HolyPowerDetails';\r\nimport ArtOfWar from '../../core/ArtOfWar';\r\nimport Crusade from '../../talents/Crusade';\r\nimport RighteousVerdict from '../../talents/RighteousVerdict';\r\nimport ShieldOfVengeance from '../../core/ShieldOfVengeance';\r\n\r\nimport Component from './Component';\r\n\r\nclass Checklist extends BaseChecklist {\r\n  static dependencies = {\r\n    combatants: Combatants,\r\n    castEfficiency: CastEfficiency,\r\n    preparationRuleAnalyzer: PreparationRuleAnalyzer,\r\n\r\n    alwaysBeCasting: AlwaysBeCasting,\r\n    holyPowerDetails: HolyPowerDetails,\r\n    artOfWar: ArtOfWar,\r\n    judgment: Judgment,\r\n    crusade: Crusade,\r\n    righteousVerdict: RighteousVerdict,\r\n    shieldOfVengeance: ShieldOfVengeance,\r\n  };\r\n  render() {\r\n    return (\r\n      <Component\r\n        combatant={this.combatants.selected}\r\n        castEfficiency={this.castEfficiency}\r\n        thresholds={{\r\n          ...this.preparationRuleAnalyzer.thresholds,\r\n\r\n          alwaysBeCasting: this.alwaysBeCasting.suggestionThresholds,\r\n          holyPowerDetails: this.holyPowerDetails.suggestionThresholds,\r\n          artOfWar: this.artOfWar.suggestionThresholds,\r\n          crusade: this.crusade.suggestionThresholds,\r\n          judgment: this.judgment.suggestionThresholds,\r\n          righteousVerdict: this.righteousVerdict.suggestionThresholds,\r\n          shieldOfVengeance: this.shieldOfVengeance.suggestionThresholds,\r\n        }}\r\n      />\r\n    );\r\n  }\r\n}\r\n\r\nexport default Checklist;\r\n","import Analyzer, { SELECTED_PLAYER, Options } from 'parser/core/Analyzer';\r\nimport Events, {EnergizeEvent, CastEvent} from 'parser/core/Events';\r\nimport SPELLS from 'common/SPELLS';\r\n\r\nclass BladeofJustice extends Analyzer {\r\n\r\n  wastedHP = 0;\r\n\r\n  constructor(options: Options) {\r\n    super(options);\r\n    this.addEventListener(Events.cast.by(SELECTED_PLAYER).spell(SPELLS.BLADE_OF_JUSTICE), this.onBladeOfJusticeCast);\r\n    this.addEventListener(Events.energize.by(SELECTED_PLAYER).spell(SPELLS.BLADE_OF_JUSTICE), this.onBladeOfJusticeEnergize);\r\n  }\r\n\r\n  onBladeOfJusticeEnergize(event: EnergizeEvent) {\r\n    if (event.waste > 0) {\r\n      this.wastedHP = event.waste;\r\n    }\r\n  }\r\n\r\n  onBladeOfJusticeCast(event: CastEvent) {\r\n    if (this.wastedHP > 0) {\r\n      event.meta = event.meta || {};\r\n      event.meta.isInefficientCast = true;\r\n      event.meta.inefficientCastReason = `Blade of Justice was cast while at ${this.wastedHP === 1 ? '4 Holy Power' : 'max Holy Power'}. Make sure to either use a ${this.wastedHP === 1 ? '1 Holy Power Generator or' : ''} Holy Power spender first to avoid overcapping.`;\r\n      this.wastedHP = 0;\r\n    }\r\n  }\r\n}\r\n\r\nexport default BladeofJustice;\r\n","import Analyzer, { SELECTED_PLAYER, Options } from 'parser/core/Analyzer';\r\nimport Events, {EnergizeEvent, CastEvent} from 'parser/core/Events';\r\nimport SPELLS from 'common/SPELLS';\r\n\r\nclass CrusaderStrike extends Analyzer {\r\n\r\n  wasteHP = false;\r\n\r\n  constructor(options: Options) {\r\n    super(options);\r\n    this.addEventListener(Events.cast.by(SELECTED_PLAYER).spell(SPELLS.CRUSADER_STRIKE), this.onCrusaderStrikeCast);\r\n    this.addEventListener(Events.energize.by(SELECTED_PLAYER).spell(SPELLS.CRUSADER_STRIKE), this.onCrusaderStrikeEnergize);\r\n  }\r\n\r\n  onCrusaderStrikeEnergize(event: EnergizeEvent) {\r\n    if (event.waste > 0) {\r\n      this.wasteHP = true;\r\n    }\r\n  }\r\n\r\n  onCrusaderStrikeCast(event: CastEvent) {\r\n    if (this.wasteHP) {\r\n      event.meta = event.meta || {};\r\n      event.meta.isInefficientCast = true;\r\n      event.meta.inefficientCastReason = 'Crusader Strike was cast while at max Holy Power. Make sure to use a Holy Power spender first to avoid overcapping.';\r\n      this.wasteHP = false;\r\n    }\r\n  }\r\n}\r\n\r\nexport default CrusaderStrike;\r\n","import React from 'react';\r\nimport Analyzer, { SELECTED_PLAYER, Options } from 'parser/core/Analyzer';\r\nimport AbilityTracker from 'parser/shared/modules/AbilityTracker';\r\nimport SPELLS from 'common/SPELLS';\r\nimport Events, {DamageEvent, CastEvent, EnergizeEvent, FightEndEvent} from 'parser/core/Events';\r\nimport SpellLink from 'common/SpellLink';\r\nimport SpellIcon from 'common/SpellIcon';\r\nimport SpellUsable from 'parser/shared/modules/SpellUsable';\r\nimport StatisticBox, { STATISTIC_ORDER } from 'interface/others/StatisticBox';\r\nimport { i18n } from '@lingui/core';\r\nimport { t } from '@lingui/macro';\r\nimport { ThresholdStyle, When } from 'parser/core/ParseResults';\r\n\r\nclass WakeofAshes extends Analyzer {\r\n    static dependencies = {\r\n        abilityTracker: AbilityTracker,\r\n        spellUsable: SpellUsable,\r\n    };\r\n\r\n    protected abilityTracker!: AbilityTracker;\r\n\r\n    totalHits = 0;\r\n    badCasts = 0;\r\n    wakeCast = false;\r\n    wasteHP = false;\r\n\r\n    constructor(options: Options) {\r\n        super(options);\r\n        this.addEventListener(Events.damage.by(SELECTED_PLAYER).spell(SPELLS.WAKE_OF_ASHES), this.onWakeofAshesDamage);\r\n        this.addEventListener(Events.cast.by(SELECTED_PLAYER).spell(SPELLS.WAKE_OF_ASHES), this.onWakeofAshesCast);\r\n        this.addEventListener(Events.energize.by(SELECTED_PLAYER).spell(SPELLS.WAKE_OF_ASHES), this.onWakeofAshesEnergize);\r\n        this.addEventListener(Events.fightend, this.onFinished);\r\n    }\r\n\r\n    onWakeofAshesDamage(event: DamageEvent) {\r\n        this.totalHits += 1;\r\n        this.wakeCast = false;\r\n    }\r\n\r\n    onWakeofAshesEnergize(event: EnergizeEvent) {\r\n        if (event.waste > 0 ){\r\n            this.wasteHP = true;\r\n        }\r\n    }\r\n\r\n    onWakeofAshesCast(event: CastEvent) {\r\n        if (this.wakeCast) {\r\n            this.badCasts += 1;\r\n        }\r\n        this.wakeCast = true;\r\n        if (this.wasteHP) {\r\n            event.meta = event.meta || {};\r\n            event.meta.isInefficientCast = true;\r\n            event.meta.inefficientCastReason = '1 Holy Power or more wasted. You should be at 2 Holy Power or less before using Wake.';\r\n            this.wasteHP = false;\r\n        }\r\n    }\r\n\r\n    onFinished(event: FightEndEvent) {\r\n        if (this.wakeCast) {\r\n            this.badCasts += 1;\r\n        }\r\n    }\r\n\r\n    get averageHitPerCast() {\r\n        return this.totalHits / this.abilityTracker.getAbility(SPELLS.WAKE_OF_ASHES.id).casts;\r\n    }\r\n\r\n    get badCastsThresholds() {\r\n        return {\r\n            actual: this.badCasts,\r\n            isGreaterThan: {\r\n                minor: 0,\r\n                average: 0,\r\n                major: 0,\r\n            },\r\n            style: ThresholdStyle.NUMBER,\r\n        };\r\n    }\r\n\r\n    suggestions(when: When) {\r\n        when(this.badCastsThresholds)\r\n            .addSuggestion((suggest, actual, recommended) => suggest(<><SpellLink id={SPELLS.WAKE_OF_ASHES.id} /> hit 0 targets {actual} time(s). <SpellLink id={SPELLS.BLADE_OF_JUSTICE.id} /> has the same range of 12yds. You can use this as a guideline to tell if targets will be in range.</>)\r\n                    .icon(SPELLS.WAKE_OF_ASHES.icon)\r\n                    .actual(i18n._(t('paladin.retribution.suggestions.wakeOfAshes.efficiency')`${actual} casts with no targets hit.`))\r\n                    .recommended(`${recommended} is recommended`));\r\n    }\r\n\r\n    statistic() {\r\n        return (\r\n            <StatisticBox\r\n              position={STATISTIC_ORDER.CORE()}\r\n              icon={<SpellIcon id={SPELLS.WAKE_OF_ASHES.id} />}\r\n              value={(\r\n                    <>\r\n                        {(this.averageHitPerCast.toFixed(2))} Average<br />\r\n                        {`${this.badCasts > 0 ? `${this.badCasts} Missed` : ''} `}\r\n                    </>\r\n                )}\r\n              label=\"Targets Hit\"\r\n              tooltip={`You averaged ${(this.averageHitPerCast.toFixed(2))} hits per cast of Wake of Ashes. ${this.badCasts > 0 ? `Additionally, you cast Wake of Ashes ${this.badCasts} time(s) without hitting anything.` : ''}`}\r\n            />\r\n        );\r\n    }\r\n}\r\n\r\nexport default WakeofAshes;\r\n","import React from 'react';\r\nimport Analyzer, { SELECTED_PLAYER, Options } from 'parser/core/Analyzer';\r\nimport AbilityTracker from 'parser/shared/modules/AbilityTracker';\r\nimport Events, {DamageEvent, } from 'parser/core/Events';\r\nimport SPELLS from 'common/SPELLS';\r\nimport SpellIcon from 'common/SpellIcon';\r\nimport StatisticBox, { STATISTIC_ORDER } from 'interface/others/StatisticBox';\r\n\r\nclass Consecration extends Analyzer {\r\n  static dependencies = {\r\n    abilityTracker: AbilityTracker,\r\n  };\r\n\r\n  protected abilityTracker!: AbilityTracker;\r\n\r\n  totalHits = 0;\r\n\r\n  constructor(options: Options) {\r\n    super(options);\r\n    this.addEventListener(Events.damage.by(SELECTED_PLAYER).spell(SPELLS.CONSECRATION_DAMAGE), this.onConsecrationDamage);\r\n  }\r\n\r\n  onConsecrationDamage(event: DamageEvent) {\r\n    this.totalHits += 1;\r\n  }\r\n\r\n  get averageHitPerCast() {\r\n    return this.totalHits / this.abilityTracker.getAbility(SPELLS.CONSECRATION_CAST.id).casts;\r\n  }\r\n\r\n  statistic() {\r\n    return (\r\n      <StatisticBox\r\n        position={STATISTIC_ORDER.CORE()}\r\n        icon={<SpellIcon id={SPELLS.CONSECRATION_CAST.id} />}\r\n        value={`${this.averageHitPerCast.toFixed(2)} hits`}\r\n        label=\"Targets Hit\"\r\n        tooltip={`You averaged ${(this.averageHitPerCast.toFixed(2))} hits per cast of Consecration.`}\r\n      />\r\n    );\r\n  }\r\n}\r\n\r\nexport default Consecration;\r\n","import Analyzer, { SELECTED_PLAYER, Options } from 'parser/core/Analyzer';\r\nimport Events, {EnergizeEvent, CastEvent} from 'parser/core/Events';\r\nimport SPELLS from 'common/SPELLS';\r\n\r\n// TODO: Needs updating with ExecuteHelper\r\n\r\nclass HammerofWrath extends Analyzer {\r\n\r\n  wasteHP = false;\r\n\r\n  constructor(options: Options) {\r\n    super(options);\r\n    this.addEventListener(Events.cast.by(SELECTED_PLAYER).spell(SPELLS.HAMMER_OF_WRATH), this.onHammerofWrathCast);\r\n    this.addEventListener(Events.energize.by(SELECTED_PLAYER).spell(SPELLS.HAMMER_OF_WRATH), this.onHammerofWrathEnergize);\r\n  }\r\n\r\n  onHammerofWrathEnergize(event: EnergizeEvent) {\r\n    if (event.waste > 0) {\r\n      this.wasteHP = true;\r\n    }\r\n  }\r\n\r\n  onHammerofWrathCast(event: CastEvent) {\r\n    if (this.wasteHP) {\r\n      event.meta = event.meta || {};\r\n      event.meta.isInefficientCast = true;\r\n      event.meta.inefficientCastReason = 'Hammer of Wrath was cast while at max Holy Power. Make sure to use a Holy Power spender first to avoid overcapping.';\r\n      this.wasteHP = false;\r\n    }\r\n  }\r\n}\r\n\r\nexport default HammerofWrath;","import SPELLS from 'common/SPELLS';\r\n\r\n// Based on spelldata for Avenging Wrath\r\n// Avenging Wrath also increases melee damage by 20% - this is added in their modules.\r\nexport const ABILITIES_AFFECTED_BY_DAMAGE_INCREASES = [\r\n  SPELLS.CRUSADER_STRIKE,\r\n  SPELLS.JUDGMENT_CAST,\r\n  SPELLS.TEMPLARS_VERDICT_DAMAGE,\r\n  SPELLS.BLADE_OF_JUSTICE,\r\n  SPELLS.DIVINE_STORM_DAMAGE,\r\n  SPELLS.EXECUTION_SENTENCE_TALENT,\r\n  SPELLS.CONSECRATION_CAST,\r\n  SPELLS.ZEAL_DAMAGE,\r\n  SPELLS.HAMMER_OF_WRATH,\r\n  SPELLS.WAKE_OF_ASHES,\r\n  SPELLS.JUSTICARS_VENGEANCE_TALENT,\r\n  SPELLS.EYE_FOR_AN_EYE_TALENT,\r\n  SPELLS.SANCTIFIED_WRATH_DAMAGE\r\n];\r\n\r\n// Stuff like Retribution mastery and Execution sentence increases damage done by these sources of holy damage\r\nexport const ABILITIES_AFFECTED_BY_HOLY_DAMAGE_INCREASES = [\r\n  SPELLS.JUDGMENT_CAST,\r\n  SPELLS.TEMPLARS_VERDICT_DAMAGE,\r\n  SPELLS.DIVINE_STORM_DAMAGE,\r\n  SPELLS.CONSECRATION_CAST,\r\n  SPELLS.ZEAL_DAMAGE,\r\n  SPELLS.HAMMER_OF_WRATH,\r\n  SPELLS.WAKE_OF_ASHES,\r\n  SPELLS.JUSTICARS_VENGEANCE_TALENT,\r\n  SPELLS.SANCTIFIED_WRATH_DAMAGE,\r\n];\r\n\r\nexport const EMPYREAN_POWER_CHANCE = .15;\r\n","import React from 'react';\r\n\r\nimport Analyzer, { SELECTED_PLAYER, Options } from 'parser/core/Analyzer';\r\nimport Events, {DamageEvent} from 'parser/core/Events';\r\nimport SPELLS from 'common/SPELLS';\r\nimport calculateEffectiveDamage from 'parser/core/calculateEffectiveDamage';\r\nimport Enemies from 'parser/shared/modules/Enemies';\r\nimport AbilityTracker from 'parser/shared/modules/AbilityTracker';\r\nimport Statistic from 'interface/statistics/Statistic';\r\nimport { STATISTIC_ORDER } from 'interface/others/StatisticBox';\r\nimport BoringSpellValueText from 'interface/statistics/components/BoringSpellValueText/index';\r\nimport ItemDamageDone from 'interface/ItemDamageDone';\r\nimport { formatNumber } from 'common/format';\r\n\r\nimport { ABILITIES_AFFECTED_BY_HOLY_DAMAGE_INCREASES } from '../../constants';\r\n\r\nconst DAMAGE_BONUS = 0.2;\r\n\r\n//TODO: Needs updating for Shadowlands\r\n\r\nclass ExecutionSentence extends Analyzer {\r\n  static dependencies = {\r\n    enemies: Enemies,\r\n    abilityTracker: AbilityTracker,\r\n  };\r\n\r\n  protected abilityTracker!: AbilityTracker;\r\n  protected enemies!: Enemies;\r\n\r\n  damageIncrease = 0;\r\n\r\n  constructor(options: Options) {\r\n    super(options);\r\n    this.active = this.selectedCombatant.hasTalent(SPELLS.EXECUTION_SENTENCE_TALENT.id);\r\n\r\n    // event listeners\r\n    this.addEventListener(Events.damage.by(SELECTED_PLAYER).spell(ABILITIES_AFFECTED_BY_HOLY_DAMAGE_INCREASES), this.onAffectedDamage);\r\n  }\r\n\r\n  onAffectedDamage(event: DamageEvent) {\r\n    const enemy = this.enemies.getEntity(event);\r\n    if (!enemy) {\r\n      return;\r\n    }\r\n    if (enemy.hasBuff(SPELLS.EXECUTION_SENTENCE_DEBUFF.id)) {\r\n      this.damageIncrease += calculateEffectiveDamage(event, DAMAGE_BONUS);\r\n    }\r\n  }\r\n\r\n  get directDamage() {\r\n    return this.abilityTracker.getAbility(SPELLS.EXECUTION_SENTENCE_TALENT.id).damageEffective;\r\n  }\r\n\r\n  get directDps() {\r\n    return this.directDamage / this.owner.fightDuration * 1000;\r\n  }\r\n\r\n  get indirectDps() {\r\n    return this.damageIncrease / this.owner.fightDuration * 1000;\r\n  }\r\n\r\n  get totalDamage() {\r\n    return this.damageIncrease + this.directDamage;\r\n  }\r\n\r\n  get totalDps() {\r\n    return this.totalDamage / this.owner.fightDuration * 1000;\r\n  }\r\n\r\n  statistic() {\r\n    return (\r\n      <Statistic\r\n        position={STATISTIC_ORDER.CORE(12)}\r\n        size=\"flexible\"\r\n        tooltip={(\r\n          <>\r\n            Total damage contributed: {formatNumber(this.totalDamage)} <br />\r\n            DPS from Execution Sentence's direct damage: {formatNumber(this.directDps)} <br />\r\n            DPS gained from Execution Sentence's debuff: {formatNumber(this.indirectDps)}\r\n          </>\r\n        )}\r\n      >\r\n        <BoringSpellValueText spell={SPELLS.EXECUTION_SENTENCE_TALENT}>\r\n          <ItemDamageDone amount={this.totalDamage} />\r\n        </BoringSpellValueText>\r\n      </Statistic>\r\n    );\r\n  }\r\n}\r\n\r\nexport default ExecutionSentence;\r\n","import React from 'react';\r\n\r\nimport SPELLS from 'common/SPELLS';\r\nimport { formatDuration, formatNumber } from 'common/format';\r\nimport BoringSpellValueText from 'interface/statistics/components/BoringSpellValueText';\r\nimport ItemDamageDone from 'interface/ItemDamageDone';\r\nimport Statistic from 'interface/statistics/Statistic';\r\nimport STATISTIC_ORDER from 'interface/others/STATISTIC_ORDER';\r\nimport STATISTIC_CATEGORY from 'interface/others/STATISTIC_CATEGORY';\r\n\r\nimport Analyzer, { Options, SELECTED_PLAYER } from 'parser/core/Analyzer';\r\nimport Events, { ApplyBuffEvent, DamageEvent, RemoveBuffEvent } from 'parser/core/Events';\r\n\r\nimport { plotOneVariableBinomChart } from 'parser/shared/modules/helpers/Probability';\r\n\r\nimport { EMPYREAN_POWER_CHANCE } from '../../constants';\r\n\r\nconst BUFF_TIME: number = 15000 * .95;//add buffer since log events lmao\r\nconst TRACK_BUFFER = 500;\r\n\r\nclass EmpyreanPower extends Analyzer {\r\n\r\n  averageTimeTillBuffConsumed: number = 0;\r\n\r\n  hasProc: boolean = false;\r\n  procsWasted: number = 0;\r\n  procsGained: number = 0;\r\n\r\n  damageDone: number = 0;\r\n\r\n  buffAppliedTimestamp: number = 0;\r\n  buffRemovedTimestamp: number = 0;\r\n\r\n  totalChances: number = 0;\r\n  procProbabilities: number[] = [];\r\n  \r\n  constructor(options: Options) {\r\n    super(options);\r\n    this.active = this.selectedCombatant.hasTalent(SPELLS.EMPYREAN_POWER_TALENT.id);\r\n\r\n    if (!this.active) {\r\n      return;\r\n    }\r\n\r\n    this.addEventListener(Events.cast.by(SELECTED_PLAYER).spell(SPELLS.CRUSADER_STRIKE), this.castCounter);\r\n    this.addEventListener(Events.damage.by(SELECTED_PLAYER).spell(SPELLS.DIVINE_STORM), this.divineStormDamage);\r\n    this.addEventListener(Events.applybuff.by(SELECTED_PLAYER).spell(SPELLS.EMPYREAN_POWER_TALENT_BUFF), this.applyBuff);\r\n    this.addEventListener(Events.removebuff.by(SELECTED_PLAYER).spell(SPELLS.EMPYREAN_POWER_TALENT_BUFF), this.removeBuff);\r\n  }\r\n\r\n  castCounter() {\r\n    this.totalChances += 1;\r\n    this.procProbabilities.push(EMPYREAN_POWER_CHANCE);\r\n  }\r\n\r\n  divineStormDamage(event: DamageEvent) {\r\n    if (this.hasProc || this.buffRemovedTimestamp + TRACK_BUFFER > event.timestamp) {\r\n      this.damageDone += (event.amount || 0) + (event.absorbed || 0);\r\n    }\r\n  }\r\n\r\n  applyBuff(event: ApplyBuffEvent) {\r\n    this.hasProc = true;\r\n    this.procsGained += 1;\r\n    this.buffAppliedTimestamp = event.timestamp;\r\n  }\r\n\r\n  removeBuff(event: RemoveBuffEvent) {\r\n    const lowerRoughTime = (this.buffAppliedTimestamp + BUFF_TIME);\r\n    if (lowerRoughTime < event.timestamp) {\r\n      this.procsWasted += 1;\r\n    }\r\n    this.averageTimeTillBuffConsumed += (event.timestamp - this.buffAppliedTimestamp);\r\n    this.buffRemovedTimestamp = event.timestamp;\r\n    this.hasProc = false;\r\n  }\r\n\r\n  statistic() {\r\n    return (\r\n      <Statistic\r\n        position={STATISTIC_ORDER.CORE(12)}\r\n        size=\"flexible\"\r\n        category={STATISTIC_CATEGORY.TALENTS}\r\n        tooltip={(\r\n          <>\r\n            <ul>\r\n              <li>Average Time Till Buff Consumed: {formatDuration((this.averageTimeTillBuffConsumed /1000) / this.procsGained)}</li>\r\n              <li>Total Buffs: {this.procsGained}</li>\r\n              <li>Damage: {formatNumber(this.damageDone)}</li>\r\n            </ul>\r\n          </>\r\n        )}\r\n      >\r\n        <BoringSpellValueText spell={SPELLS.EMPYREAN_POWER_TALENT}>\r\n          <ItemDamageDone amount={this.damageDone} />\r\n        </BoringSpellValueText>\r\n        {plotOneVariableBinomChart(this.procsGained, this.totalChances, this.procProbabilities)}\r\n      </Statistic>\r\n    );\r\n  }\r\n}\r\n\r\nexport default EmpyreanPower;\r\n","import React from 'react';\r\nimport { formatNumber } from 'common/format';\r\nimport SPELLS from 'common/SPELLS';\r\nimport Analyzer, { Options } from 'parser/core/Analyzer';\r\nimport AbilityTracker from 'parser/shared/modules/AbilityTracker';\r\nimport BoringSpellValueText from 'interface/statistics/components/BoringSpellValueText';\r\nimport ItemDamageDone from 'interface/ItemDamageDone';\r\nimport Statistic from 'interface/statistics/Statistic';\r\nimport STATISTIC_ORDER from 'interface/others/STATISTIC_ORDER';\r\nimport STATISTIC_CATEGORY from 'interface/others/STATISTIC_CATEGORY';\r\nimport SpellIcon from 'common/SpellIcon';\r\n\r\n\r\nconst AW_BASE_DURATION = 20;\r\n\r\nclass SanctifiedWrath extends Analyzer {\r\n  static dependencies = {\r\n    abilityTracker: AbilityTracker,\r\n  };\r\n\r\n  protected abilityTracker!: AbilityTracker;\r\n\r\n  constructor(options: Options) {\r\n    super(options);\r\n    this.active = this.selectedCombatant.hasTalent(SPELLS.SANCTIFIED_WRATH_TALENT_RETRIBUTION.id);\r\n    if (!this.active) {\r\n      return;\r\n    }\r\n  }\r\n\r\n  get damageDone() {\r\n    const spell = this.abilityTracker.getAbility(SPELLS.SANCTIFIED_WRATH_DAMAGE.id);\r\n    return spell.damageEffective + spell.damageAbsorbed;\r\n  }\r\n\r\n  statistic() {\r\n    const hist = this.selectedCombatant.getBuffHistory(SPELLS.AVENGING_WRATH.id);\r\n    if (!hist || hist.length === 0) {\r\n      return null;\r\n    }\r\n\r\n    let totalIncrease = 0;\r\n    hist.forEach((buff: any, idx: any) => {\r\n      const end = buff.end || this.owner.currentTimestamp;\r\n      const duration = (end - buff.start) / 1000;\r\n      // If the buff ended early because of death or fight end, don't blame the talent\r\n      const increase = Math.max(0, duration - AW_BASE_DURATION);\r\n      totalIncrease += increase;\r\n    });\r\n\r\n    return (\r\n      <Statistic\r\n        position={STATISTIC_ORDER.CORE(12)}\r\n        size=\"flexible\"\r\n        category={STATISTIC_CATEGORY.TALENTS}\r\n        tooltip=\"Damage dealt directly and the Avenging Wrath extension provided by Sanctified Wrath.\"\r\n      >\r\n        <BoringSpellValueText spell={SPELLS.SANCTIFIED_WRATH_DAMAGE}>\r\n          <ItemDamageDone amount={this.damageDone} /> <br />\r\n          <><SpellIcon id={SPELLS.AVENGING_WRATH.id} /> +{formatNumber(totalIncrease)} seconds</>\r\n        </BoringSpellValueText>\r\n      </Statistic>\r\n    );\r\n  }\r\n}\r\n\r\nexport default SanctifiedWrath;\r\n","import CoreCombatLogParser from 'parser/core/CombatLogParser';\r\nimport Judgment from 'parser/paladin/shared/spells/Judgment';\r\n\r\nimport Abilities from './modules/Abilities';\r\nimport AlwaysBeCasting from './modules/features/AlwaysBeCasting';\r\nimport Buffs from './modules/Buffs';\r\nimport CooldownThroughputTracker from './modules/features/CooldownThroughputTracker';\r\nimport Checklist from './modules/features/Checklist/Module';\r\nimport ShieldOfVengeance from './modules/core/ShieldOfVengeance';\r\n\r\nimport DivinePurpose from '../shared/talents/DivinePurpose';\r\nimport HolyAvenger from '../shared/talents/HolyAvenger';\r\nimport ArtOfWar from './modules/core/ArtOfWar';\r\nimport BladeofJustice from './modules/core/BladeofJustice';\r\nimport CrusaderStrike from './modules/core/CrusaderStrike';\r\nimport Crusade from './modules/talents/Crusade';\r\nimport WakeofAshes from './modules/core/WakeofAshes';\r\nimport Consecration from './modules/core/Consecration';\r\nimport HammerofWrathRetribution from './modules/core/HammerofWrath';\r\nimport RighteousVerdict from './modules/talents/RighteousVerdict';\r\nimport ExecutionSentence from './modules/talents/ExecutionSentence';\r\nimport EmpyreanPower from './modules/talents/EmpyreanPower';\r\n\r\nimport HolyPowerTracker from '../shared/holypower/HolyPowerTracker';\r\nimport HolyPowerDetails from '../shared/holypower/HolyPowerDetails';\r\nimport SanctifiedWrath from './modules/talents/SanctifiedWrath';\r\n\r\nclass CombatLogParser extends CoreCombatLogParser {\r\n  static specModules = {\r\n    // PaladinCore\r\n    artOfWar: ArtOfWar,\r\n\r\n    // Features\r\n    abilities: Abilities,\r\n    alwaysBeCasting: AlwaysBeCasting,\r\n    buffs: Buffs,\r\n    cooldownThroughputTracker: CooldownThroughputTracker,\r\n    checklist: Checklist,\r\n    bladeofJustice: BladeofJustice,\r\n    crusaderStrike: CrusaderStrike,\r\n    shieldOfVengeance: ShieldOfVengeance,\r\n    judgment: Judgment,\r\n\r\n    // Talents\r\n    divinePurpose: DivinePurpose,\r\n    crusade: Crusade,\r\n    wakeofAshes: WakeofAshes,\r\n    consecration: Consecration,\r\n    hammerofWrathRetribution: HammerofWrathRetribution,\r\n    righteousVerdict: RighteousVerdict,\r\n    executionSentence: ExecutionSentence,\r\n    holyAvenger: HolyAvenger,\r\n    empyreanPower: EmpyreanPower,\r\n    sanctifiedWrath: SanctifiedWrath,\r\n\r\n    // HolyPower\r\n    holyPowerTracker: HolyPowerTracker,\r\n    holyPowerDetails: HolyPowerDetails,\r\n  };\r\n}\r\n\r\nexport default CombatLogParser;\r\n","export default function calculateEffectiveDamage(event, increase) {\r\n  const raw = (event.amount || 0) + (event.absorbed || 0);\r\n  return raw - (raw / (1 + increase));\r\n}\r\n","/**\r\n * A simple component that shows a value in the most plain way possible.\r\n * Use this only as the very last resort.\r\n */\r\nimport React from 'react';\r\n\r\ntype Props = {\r\n  label: React.ReactNode;\r\n  children: React.ReactNode;\r\n  className?: string;\r\n}\r\n\r\nconst BoringValue = ({ label, children, className }: Props) => (\r\n  <div className={`pad boring-text ${className || ''}`}>\r\n    <label>\r\n      {label}\r\n    </label>\r\n    <div className=\"value\">\r\n      {children}\r\n    </div>\r\n  </div>\r\n);\r\n\r\nexport default BoringValue;\r\n","import React from 'react';\r\nimport PropTypes from 'prop-types';\r\nimport { AutoSizer } from 'react-virtualized';\r\nimport BaseChart from 'interface/others/BaseChart';\r\n\r\nclass OneVariableBinomialChart extends React.Component {\r\n  static propTypes = {\r\n    probabilities: PropTypes.arrayOf(\r\n      PropTypes.shape({\r\n        x: PropTypes.number.isRequired,\r\n        y: PropTypes.number.isRequired,\r\n      }),\r\n    ).isRequired,\r\n    actualEvent: PropTypes.shape({\r\n      x: PropTypes.number.isRequired,\r\n      y: PropTypes.number.isRequired,\r\n    }).isRequired,\r\n    xAxis: PropTypes.shape({\r\n      title: PropTypes.string.isRequired,\r\n      tickFormat: PropTypes.string.isRequired,\r\n    }).isRequired,\r\n    yAxis: PropTypes.shape({\r\n      title: PropTypes.string.isRequired,\r\n    }),\r\n    yDomain: PropTypes.arrayOf(PropTypes.number),\r\n    tooltip: PropTypes.string.isRequired,\r\n  };\r\n\r\n  state = {\r\n    hover: null,\r\n  };\r\n\r\n  render() {\r\n    const {\r\n      probabilities,\r\n      actualEvent,\r\n      xAxis,\r\n      yAxis,\r\n      yDomain,\r\n      tooltip,\r\n    } = this.props;\r\n\r\n    const data = {\r\n      probabilities,\r\n      actual: actualEvent,\r\n    };\r\n\r\n    const spec = {\r\n      encoding: {\r\n        x: {\r\n          field: 'x',\r\n          type: 'quantitative',\r\n          title: xAxis.title,\r\n          axis: {\r\n            grid: false,\r\n            format: xAxis.tickFormat,\r\n          },\r\n        },\r\n        y: {\r\n          field: 'y',\r\n          type: 'quantitative',\r\n          title: yAxis.title,\r\n          axis: {\r\n            grid: false,\r\n            format: '.0%',\r\n          },\r\n          scale: {\r\n            domain: yDomain,\r\n          },\r\n        },\r\n      },\r\n      layer: [\r\n        {\r\n          data: {\r\n            name: 'probabilities',\r\n          },\r\n          mark: {\r\n            type: 'area',\r\n            color: 'rgba(250, 183, 0, 0.15)',\r\n            line: {\r\n              color: '#fab700',\r\n              strokeWidth: 1,\r\n            },\r\n          },\r\n        },\r\n        {\r\n          data: {\r\n            name: 'actual',\r\n          },\r\n          mark: {\r\n            type: 'point',\r\n            filled: true,\r\n            color: '#00ff96',\r\n            size: 60,\r\n          },\r\n          encoding: {\r\n            tooltip: [\r\n              { field: 'x', title: tooltip },\r\n            ],\r\n          },\r\n        },\r\n      ],\r\n    };\r\n\r\n\r\n    return (\r\n      <AutoSizer disableHeight>\r\n        {({width}) => (\r\n          <BaseChart\r\n            height={150}\r\n            width={width}\r\n            spec={spec}\r\n            data={data}\r\n          />\r\n        )}\r\n      </AutoSizer>\r\n    );\r\n  }\r\n}\r\n\r\nexport default OneVariableBinomialChart;\r\n","import OneVariableBinomialChart from 'interface/others/charts/OneVariableBinomialChart';\r\nimport React from 'react';\r\n\r\n/**\r\n * pn is the mean value of procs\r\n * @param procChance\r\n * @param procAttempts\r\n */\r\nexport function expectedProcCount(procChance: number, procAttempts: number) {\r\n  return procChance * procAttempts;\r\n}\r\n\r\n/**\r\n * Calculates the probability that out of n tries with probability p, we get exactly k positive outcomes\r\n * @param k {Number} Number of desired positive outcomes\r\n * @param n {Number} Number of tries\r\n * @param p {Number} Probability of positive outcome\r\n */\r\nexport function binomialPMF(k: number, n: number, p: number) {\r\n  return binomialDistribution(n, k) * Math.pow(p, k) * Math.pow(1 - p, n - k);\r\n}\r\n\r\n/**\r\n * Calculates the probability that out of n tries with probability p, we get k or less positive outcomes\r\n * @param k {Number} Number of desired positive outcomes\r\n * @param n {Number} Number of tries\r\n * @param p {Number} Probability of positive outcome\r\n */\r\nexport function binomialCDF(k: number, n: number, p: number) {\r\n  let probability = 0;\r\n  for (let i = 0; i <= k; i += 1) {\r\n    probability += binomialPMF(i, n, p);\r\n  }\r\n  return probability;\r\n}\r\n\r\n/**\r\n * Finds the maximum of PMF of given distribution.\r\n * @param n {Number} Maximum number of tries for given event\r\n * @param {Function} pmf Callback that returns probability of exactly K events happening in N tries. Parameters - K, N\r\n * @returns {{ max: Number, p: Number }} Maximum of given PMF function - argument and probability itself\r\n */\r\nexport function findMax(n: number, pmf: (i: number, n: any) => any) {\r\n  let max = -1;\r\n  let maxP = 0;\r\n  for (let i = 0; i <= n; i += 1) {\r\n    const probability = pmf(i, n);\r\n    if (probability > maxP) {\r\n      max = i;\r\n      maxP = probability;\r\n    }\r\n  }\r\n  return {\r\n    max,\r\n    p: maxP,\r\n  };\r\n}\r\n\r\nfunction binomialDistribution(n: number, k: number) {\r\n  // n! / (k! * (n - k)!)\r\n  // factorials are awful, let's simplify a bit\r\n  // we know k < n:\r\n  // numerator: n! = 1 * 2 * ... * (n - k) * (n - k + 1) * (n - k + 2 ) * ... * n\r\n  // denominator: k! * (n - k)! = k! * 1 * 2 * ... * (n - k)\r\n  // cancelling out 1 * 2 * ... * (n - k) from both we get:\r\n  // (n - k + 1) * (n - k + 2) * ... n / k!\r\n  let numerator = 1;\r\n  let denominator = 1;\r\n  for (let i = n - k + 1; i <= n; i += 1) {\r\n    numerator *= i;\r\n  }\r\n  for (let i = 1; i <= k; i += 1) {\r\n    denominator *= i;\r\n  }\r\n  return numerator / denominator;\r\n}\r\n\r\nfunction resetProbabilityArray(actualProcs: number, procAttempts: number, procChance: number | number[]) {\r\n  const procProbabilities: Array<{ x: number; y: number; }> = Array.from({ length: procAttempts }, (_x, i: number) => {\r\n    if (typeof procChance === 'number') {\r\n      return { x: i, y: binomialPMF(i, procAttempts, procChance) };\r\n    } else {\r\n      return { x: i, y: poissonBinomialPMF(i, procAttempts, procChance) };\r\n    }\r\n  });\r\n\r\n  return procProbabilities;\r\n}\r\n\r\nfunction setMinMaxProbabilities(actualProcs: number, procAttempts: number, procChance: number | number[], threshold: number = 0.001) {\r\n  const procProbabilities = resetProbabilityArray(actualProcs, procAttempts, procChance);\r\n  const rangeMin = procProbabilities.findIndex(({ y }) => y >= threshold);\r\n  const rangeMax = rangeMin + procProbabilities.slice(rangeMin).findIndex(({ y }) => y < threshold);\r\n\r\n  return {\r\n    procProbabilities,\r\n    rangeMin,\r\n    rangeMax,\r\n  };\r\n}\r\n\r\n/**\r\n * Recursive formula for calculating the PMF (probability mass function) of Poisson's Binomial Distribution\r\n * @param k {Number} Number of desired positive outcomes\r\n * @param j {Number} Number of total tries\r\n * @param p {[Number]} Probability vector\r\n * @param lookup {Array} Lookup table\r\n * @returns {Number} Probability\r\n */\r\nfunction Ekj(k: number, j: number, p: number[], lookup: any[][]) {\r\n  if (k === -1) {\r\n    return 0;\r\n  }\r\n  if (k === j + 1) {\r\n    return 0;\r\n  }\r\n  if (k === 0 && j === 0) {\r\n    return 1;\r\n  }\r\n  if (lookup[k][j] !== null) {\r\n    return lookup[k][j];\r\n  }\r\n  // literature uses 1-based indices for probabilities, as we're using an array, we have to use 0 based\r\n  const value: number = (1 - p[j - 1]) * Ekj(k, j - 1, p, lookup) + p[j - 1] * Ekj(k - 1, j - 1, p, lookup);\r\n  lookup[k][j] = value;\r\n  return value;\r\n}\r\n\r\n// Poisson's Binomial Distribution\r\n// Methods based on Wikipedia page and this research paper:\r\n// https://www.researchgate.net/publication/257017356_On_computing_the_distribution_function_for_the_Poisson_binomial_distribution\r\n\r\n/**\r\n * Calculates the probability that out of n tries with p probabilities, we get exactly k positive outcomes\r\n * @param k {Number} Number of desired positive outcomes\r\n * @param n {Number} Number of total tries\r\n * @param p {[Number]} Probability vector\r\n */\r\nexport function poissonBinomialPMF(k: number, n: number, p: any[]) {\r\n  // denoted in the paper as ξk, I'll call it Ek for simplicity\r\n  // using the recursive formula in chapter 2.5\r\n  if (p.length !== n) {\r\n    throw new Error('You must supply a probability vector with the same length as the number of total tries into Poisson Binomial PMF');\r\n  }\r\n  // Using a lookup table to simplify recursion a little bit\r\n  // construct an (n+1) x (n+1) lookup table (because Ek,j uses indexes from 0 to n INCLUSIVE, with this we don't have to subtract indexes all the time)\r\n  // intentionally set tu nulls so we know which values are computed or not\r\n  const lookup = [...Array(n + 1)].map(_ => Array(n + 1).fill(null));\r\n  return Ekj(k, n, p, lookup);\r\n}\r\n\r\n/**\r\n * Calculates the probability that out of n tries with p probabilities, we get less than or equal k positive outcomes\r\n * @param k {Number} Number of desired positive outcomes\r\n * @param n {Number} Number of total tries\r\n * @param p {[Number]} Probability vector\r\n */\r\nexport function poissonBinomialCDF(k: number, n: number, p: number[]) {\r\n  // While technically equal to summing Ei from i = 0 to k, since we use recursion, a better solution is a lookup table\r\n  if (p.length !== n) {\r\n    throw new Error('You must supply a probability vector with the same length as the number of total tries into Poisson Binomial CDF');\r\n  }\r\n  // see comments in poissonBinomialPMF\r\n  const lookup = [...Array(n + 1)].map(_ => Array(n + 1).fill(null));\r\n  let probability = 0;\r\n  // since Ekj uses the values from \"previous row\" (Ekj(k - 1, j - 1, ...)), it's better to iterate from 0\r\n  // this way, it produces the least necessary amount of calculations with the lookup table (only the Ekj(k, j - 1) parts)\r\n  for (let i = 0; i <= k; i += 1) {\r\n    probability += Ekj(i, n, p, lookup);\r\n  }\r\n  return probability;\r\n}\r\n\r\nexport function plotOneVariableBinomChart(\r\n  actualProcs: number,\r\n  procAttempts: number,\r\n  procChance: number | number[],\r\n  trackedName: string = 'Procs',\r\n  tooltipText: string = trackedName,\r\n  yDomain: number[] = [0, 0.4],\r\n  xAxis: any = {\r\n    title: trackedName,\r\n    tickFormat: '~k',\r\n  },\r\n  yAxis: any = {\r\n    title: 'Likelihood',\r\n  },\r\n) {\r\n\r\n  const { procProbabilities, rangeMin, rangeMax } = setMinMaxProbabilities(actualProcs, procAttempts, procChance);\r\n  const actualEventY = typeof procChance === 'number' ? binomialPMF(actualProcs, procAttempts, procChance) : poissonBinomialPMF(actualProcs, procAttempts, procChance);\r\n  return (\r\n    <OneVariableBinomialChart\r\n      probabilities={procProbabilities.slice(rangeMin, rangeMax + 1)}\r\n      actualEvent={{ x: actualProcs, y: actualEventY }}\r\n      yDomain={yDomain}\r\n      xAxis={xAxis}\r\n      yAxis={yAxis}\r\n      tooltip={tooltipText}\r\n    />\r\n  );\r\n}\r\n","/**\r\n * A simple component that shows the spell icon left and a value right.\r\n * Use this only for things that the player certainly should be familiar with, such as their own spells.\r\n * Do NOT use for items or azerite powers.\r\n */\r\nimport React from 'react';\r\n\r\nimport SpellIcon from 'common/SpellIcon';\r\n\r\nimport '../BoringValue.scss';\r\nimport Spell from 'common/SPELLS/Spell';\r\n\r\ntype Props = {\r\n  spell: Spell;\r\n  value: React.ReactNode;\r\n  label: React.ReactNode;\r\n  extra?: React.ReactNode;\r\n  className?: string;\r\n}\r\n\r\nconst BoringSpellValue = ({ spell, value, label, extra, className }: Props) => (\r\n  <div className={`flex boring-value ${className || ''}`}>\r\n    <div className=\"flex-sub icon\">\r\n      <SpellIcon id={spell.id} />\r\n    </div>\r\n    <div className=\"flex-main value\">\r\n      <div>{value}</div>\r\n      <small>{label}</small>\r\n      {extra}\r\n    </div>\r\n  </div>\r\n);\r\n\r\nexport default BoringSpellValue;\r\n","import RESOURCE_TYPES from 'game/RESOURCE_TYPES';\r\nimport ResourceTracker from 'parser/shared/modules/resources/resourcetracker/ResourceTracker';\r\nimport SPELLS from 'common/SPELLS';\r\n\r\nclass HolyPowerTracker extends ResourceTracker {\r\n  constructor(...args) {\r\n    super(...args);\r\n    this.resource = RESOURCE_TYPES.HOLY_POWER;\r\n  }\r\n\r\n  getReducedCost(event) {\r\n    if (!this.getResource(event).cost) {\r\n      return 0;\r\n    }\r\n    let cost = this.getResource(event).cost;\r\n    if (this.selectedCombatant.hasBuff(SPELLS.FIRES_OF_JUSTICE_BUFF.id)) {\r\n      cost = cost - 1;\r\n    }\r\n    return cost;\r\n  }\r\n}\r\n\r\nexport default HolyPowerTracker;\r\n","import React from 'react';\r\n\r\nimport Analyzer from 'parser/core/Analyzer';\r\nimport Panel from 'interface/statistics/Panel';\r\nimport { formatNumber, formatPercentage } from 'common/format';\r\nimport RESOURCE_TYPES from 'game/RESOURCE_TYPES';\r\nimport { STATISTIC_ORDER } from 'interface/others/StatisticBox';\r\nimport BoringResourceValue from 'interface/statistics/components/BoringResourceValue';\r\nimport Statistic from 'interface/statistics/Statistic';\r\nimport ResourceBreakdown from 'parser/shared/modules/resources/resourcetracker/ResourceBreakdown';\r\n\r\nimport { i18n } from '@lingui/core';\r\nimport { t } from '@lingui/macro';\r\n\r\nimport HolyPowerTracker from './HolyPowerTracker';\r\n\r\n\r\nconst holyPowerIcon = 'inv_helmet_96';\r\n\r\nclass HolyPowerDetails extends Analyzer {\r\n  static dependencies = {\r\n    holyPowerTracker: HolyPowerTracker,\r\n  };\r\n\r\n  get wastedHolyPowerPercent() {\r\n    return this.holyPowerTracker.wasted / (this.holyPowerTracker.wasted + this.holyPowerTracker.generated);\r\n  }\r\n\r\n  get suggestionThresholds() {\r\n    return {\r\n      actual: 1 - this.wastedHolyPowerPercent,\r\n      isLessThan: {\r\n        minor: 0.98,\r\n        average: 0.95,\r\n        major: 0.92,\r\n      },\r\n      style: 'percentage',\r\n    };\r\n  }\r\n\r\n  suggestions(when) {\r\n    when(this.suggestionThresholds).addSuggestion((suggest, actual, recommended) => suggest(`You wasted ${formatNumber(this.holyPowerTracker.wasted)} Holy Power.`)\r\n        .icon(holyPowerIcon)\r\n        .actual(i18n._(t('paladin.shared.suggestions.holyPower.wasted')`${formatPercentage(this.wastedHolyPowerPercent)}% Holy Power wasted`))\r\n        .recommended(`Wasting <${formatPercentage(1 - recommended)}% is recommended`));\r\n  }\r\n\r\n  statistic() {\r\n    return [\r\n      (\r\n        <Statistic\r\n          key=\"Statistic\"\r\n          size=\"small\"\r\n          position={STATISTIC_ORDER.CORE(4)}\r\n          tooltip={`${formatPercentage(this.wastedHolyPowerPercent)}% wasted`}\r\n        >\r\n          <BoringResourceValue\r\n            resource={RESOURCE_TYPES.HOLY_POWER}\r\n            value={formatNumber(this.holyPowerTracker.wasted)}\r\n            label=\"Holy Power Wasted\"\r\n          />\r\n        </Statistic>\r\n      ),\r\n      (\r\n        <Panel\r\n          key=\"Panel\"\r\n          title=\"Holy power usage\"\r\n          pad={false}\r\n        >\r\n          <ResourceBreakdown\r\n            tracker={this.holyPowerTracker}\r\n            resourceName=\"Holy Power\"\r\n            showSpenders\r\n          />\r\n        </Panel>\r\n      ),\r\n    ];\r\n  }\r\n}\r\n\r\nexport default HolyPowerDetails;\r\n","import Analyzer, { Options, SELECTED_PLAYER } from 'parser/core/Analyzer';\r\nimport EnemyInstances from 'parser/shared/modules/EnemyInstances';\r\nimport SPELLS from 'common/SPELLS';\r\nimport Spell from 'common/SPELLS/Spell';\r\nimport SPECS from 'game/SPECS';\r\nimport Events, { CastEvent, DamageEvent } from 'parser/core/Events';\r\nimport EnemyInstance from 'parser/core/EnemyInstance';\r\nimport React from 'react';\r\nimport Statistic from 'interface/statistics/Statistic';\r\nimport STATISTIC_ORDER from 'interface/others/STATISTIC_ORDER';\r\nimport BoringSpellValue from 'interface/statistics/components/BoringSpellValue';\r\nimport { formatNumber, formatPercentage } from 'common/format';\r\nimport { NumberThreshold, ThresholdStyle, When } from 'parser/core/ParseResults';\r\nimport { i18n } from '@lingui/core';\r\nimport { t } from '@lingui/macro';\r\nimport SpellLink from 'common/SpellLink';\r\n\r\n/**\r\n * Analyzer to track the extra damage caused by Holy Power abilities after\r\n * a Judgment cast.\r\n */\r\nclass Judgment extends Analyzer {\r\n  static dependencies = {\r\n    enemies: EnemyInstances,\r\n  };\r\n  private enemies!: EnemyInstances;\r\n\r\n  DAMAGE_MODIFIER: number = 0.25;\r\n\r\n  retHolyPowerAbilities: Spell[] = [\r\n    SPELLS.DIVINE_STORM,\r\n    SPELLS.TEMPLARS_VERDICT_DAMAGE,\r\n    SPELLS.EXECUTION_SENTENCE_TALENT,\r\n    SPELLS.JUSTICARS_VENGEANCE_TALENT\r\n  ];\r\n\r\n  protHolyPowerAbilities: Spell[] = [\r\n    SPELLS.SHIELD_OF_THE_RIGHTEOUS\r\n  ];\r\n\r\n  judgmentSpells: Spell[] = [\r\n    SPELLS.JUDGMENT_CAST,\r\n    SPELLS.JUDGMENT_CAST_PROTECTION\r\n  ];\r\n\r\n  allHolyPowerAbilities: Spell[] = [...this.retHolyPowerAbilities, ...this.protHolyPowerAbilities];\r\n\r\n  supportedSpecIds: number[] = [SPECS.PROTECTION_PALADIN.id, SPECS.RETRIBUTION_PALADIN.id];\r\n\r\n  spellCastMap: Map<Spell, number> = new Map<Spell, number>();\r\n  spellDamageMap: Map<Spell, number> = new Map<Spell, number>();\r\n  totalJudgmentConsumptions: number = 0;\r\n  totalJudgmentCasts: number = 0;\r\n\r\n  constructor(options: Options) {\r\n    super(options);\r\n    this.active = this.supportedSpecIds.includes(this.selectedCombatant.specId);\r\n    if (!this.active) {\r\n      return;\r\n    }\r\n    this.addEventListener(Events.damage.by(SELECTED_PLAYER).spell(this.allHolyPowerAbilities), this.trackDamageEvent);\r\n    this.addEventListener(Events.cast.by(SELECTED_PLAYER).spell(this.judgmentSpells), this.trackJudgmentCasts);\r\n  }\r\n\r\n  getSupportedSpellWithId(spellId: number): Spell | undefined {\r\n    return this.allHolyPowerAbilities.find((spell) => spell.id === spellId);\r\n  }\r\n\r\n  trackDamageEvent(event: DamageEvent): void {\r\n    const enemy: null | EnemyInstance = this.enemies.getEntity(event);\r\n    if (!enemy || !enemy.hasBuff(SPELLS.JUDGMENT_DEBUFF.id, null, 250)) {\r\n      return;\r\n    }\r\n    const holyPowerDamageSpell: Spell | undefined = this.getSupportedSpellWithId(event.ability.guid);\r\n    if (holyPowerDamageSpell === undefined) {\r\n      return;\r\n    }\r\n    this.totalJudgmentConsumptions += 1;\r\n    const oldCastNumber: number | undefined = this.spellCastMap.get(holyPowerDamageSpell);\r\n    this.spellCastMap.set(holyPowerDamageSpell, !oldCastNumber ? 1 : oldCastNumber + 1);\r\n    const extraJudgmentDamage: number = event.amount - (event.amount * (1 / (1+ this.DAMAGE_MODIFIER)));\r\n    const oldDamageNumber: number | undefined = this.spellDamageMap.get(holyPowerDamageSpell);\r\n    this.spellDamageMap.set(holyPowerDamageSpell, !oldDamageNumber ? extraJudgmentDamage : oldDamageNumber + extraJudgmentDamage);\r\n  }\r\n\r\n  trackJudgmentCasts(event: CastEvent): void {\r\n    this.totalJudgmentCasts += 1;\r\n  }\r\n\r\n  getStatisticTooltip(): React.ReactNode {\r\n    const tooltipRows: React.ReactNode[] = [];\r\n    this.spellCastMap.forEach((castNum: number, spell: Spell) => {\r\n      tooltipRows.push(<>{spell.name} Judgment Consumptions: {castNum} ({formatNumber(this.spellDamageMap.get(spell) || 0)} total extra damage)<br /></>);\r\n    });\r\n    return (\r\n      <>\r\n        Total Judgments Consumed: {this.totalJudgmentConsumptions} <br />\r\n        {tooltipRows}\r\n      </>\r\n    )\r\n  }\r\n\r\n  get percentageJudgmentsConsumed(): number {\r\n    return this.totalJudgmentConsumptions / this.totalJudgmentCasts;\r\n  }\r\n\r\n  get suggestionThresholds(): NumberThreshold {\r\n    return {\r\n      actual: this.percentageJudgmentsConsumed,\r\n      isLessThan: {\r\n        minor: 0.95,\r\n        average: 0.9,\r\n        major: 0.85,\r\n      },\r\n      style: ThresholdStyle.PERCENTAGE,\r\n    };\r\n  }\r\n\r\n  suggestions(when: When) {\r\n    when(this.suggestionThresholds).addSuggestion((suggest, actual, recommended) => suggest(<>You're not consuming all your <SpellLink id={SPELLS.JUDGMENT_CAST.id} icon /> debuffs.</>)\r\n      .icon(SPELLS.JUDGMENT_DEBUFF.icon)\r\n      .actual(i18n._(t('paladin.retribution.suggestions.judgement.consumed')`${formatPercentage(this.percentageJudgmentsConsumed)}% Judgments consumed`))\r\n      .recommended(`>${formatPercentage(recommended)}% is recommended`));\r\n  }\r\n\r\n  statistic(): React.ReactNode {\r\n    return (\r\n      <Statistic\r\n        position={STATISTIC_ORDER.DEFAULT}\r\n        size=\"flexible\"\r\n        tooltip={this.getStatisticTooltip()}\r\n      >\r\n        <BoringSpellValue\r\n          spell={SPELLS.JUDGMENT_DEBUFF}\r\n          value={`${formatNumber(this.totalJudgmentConsumptions)}`}\r\n          label=\"Judgment Debuffs Consumed\"\r\n        />\r\n      </Statistic>\r\n    );\r\n  }\r\n}\r\n\r\nexport default Judgment;\r\n","import Analyzer, { SELECTED_PLAYER, Options } from 'parser/core/Analyzer';\r\nimport SPELLS from 'common/SPELLS';\r\nimport Events, { EnergizeEvent } from 'parser/core/Events';\r\nimport Statistic from 'interface/statistics/Statistic';\r\nimport STATISTIC_ORDER from 'interface/others/STATISTIC_ORDER';\r\nimport STATISTIC_CATEGORY from 'interface/others/STATISTIC_CATEGORY';\r\nimport SpellIcon from 'common/SpellIcon';\r\nimport React from 'react';\r\nimport BoringValueText from 'interface/statistics/components/BoringValueText';\r\nimport RESOURCE_TYPES from 'game/RESOURCE_TYPES';\r\n\r\nclass HolyAvenger extends Analyzer {\r\n\r\n  wastedHolyPower: number = 0;\r\n  gainedHolyPower: number = 0;\r\n\r\n  constructor(options: Options) {\r\n    super(options);\r\n\r\n    this.active = this.selectedCombatant.hasTalent(SPELLS.HOLY_AVENGER_TALENT.id);\r\n\r\n    if (!this.active) {\r\n      return;\r\n    }\r\n\r\n    this.addEventListener(Events.energize.by(SELECTED_PLAYER), this.getHolyPower);\r\n  }\r\n\r\n  getHolyPower(event: EnergizeEvent){\r\n    if(!this.selectedCombatant.hasBuff(SPELLS.HOLY_AVENGER_TALENT.id)){\r\n      return;\r\n    }\r\n\r\n    if(event.resourceChangeType !== RESOURCE_TYPES.HOLY_POWER.id) {\r\n      return;\r\n    }\r\n\r\n    //holy avenger triples resource generate so we need to find base resource generation from the spell\r\n    const baseAmount = event.resourceChange/3;\r\n    const formHA = event.resourceChange - baseAmount;// this is also baseAmount * 2\r\n\r\n    let waste = event.waste;\r\n    const gain = event.resourceChange - waste;\r\n\r\n    //We only care about what is from HA not the base spell\r\n    if(waste > formHA){\r\n      waste = formHA;\r\n    }\r\n\r\n    this.wastedHolyPower += waste;\r\n    this.gainedHolyPower += Math.max(gain - baseAmount, 0);//Anything gained from HA is baseAmount + n where n >= 1\r\n  }\r\n\r\n  statistic() {\r\n    return (\r\n      <Statistic\r\n        position={STATISTIC_ORDER.CORE()}\r\n        size=\"flexible\"\r\n        category={STATISTIC_CATEGORY.TALENTS}\r\n      >\r\n        <BoringValueText label={<><SpellIcon id={SPELLS.HOLY_AVENGER_TALENT.id} /> Holy Avenger Holy Power</>}>\r\n          {this.gainedHolyPower} Gained<br />\r\n          {this.wastedHolyPower} Wasted\r\n        </BoringValueText>\r\n      </Statistic>\r\n    );\r\n  }\r\n}\r\n\r\nexport default HolyAvenger;\r\n","import React from 'react';\r\n\r\nimport SPELLS from 'common/SPELLS';\r\nimport { formatDuration, formatNumber } from 'common/format';\r\nimport BoringSpellValueText from 'interface/statistics/components/BoringSpellValueText';\r\nimport ItemDamageDone from 'interface/ItemDamageDone';\r\nimport ItemHealingDone from 'interface/ItemHealingDone';\r\nimport Statistic from 'interface/statistics/Statistic';\r\nimport STATISTIC_ORDER from 'interface/others/STATISTIC_ORDER';\r\nimport STATISTIC_CATEGORY from 'interface/others/STATISTIC_CATEGORY';\r\n\r\nimport Analyzer, { Options, SELECTED_PLAYER } from 'parser/core/Analyzer';\r\nimport Events, { ApplyBuffEvent, DamageEvent, HealEvent, RemoveBuffEvent } from 'parser/core/Events';\r\nimport Spell from 'common/SPELLS/Spell';\r\n\r\nimport { plotOneVariableBinomChart } from 'parser/shared/modules/helpers/Probability';\r\n\r\nimport { DIVINE_PURPOSE_CHANCE } from '../constants';\r\n\r\nconst HEALING_HOLY_POWER_SPELLS: Spell[] = [\r\n  SPELLS.WORD_OF_GLORY,\r\n  SPELLS.LIGHT_OF_DAWN_CAST,\r\n  SPELLS.LIGHT_OF_DAWN_HEAL,\r\n];\r\nconst DAMAGE_HOLY_POWER_SPELLS: Spell[] = [\r\n  SPELLS.SHIELD_OF_THE_RIGHTEOUS,\r\n  SPELLS.TEMPLARS_VERDICT,\r\n  SPELLS.TEMPLARS_VERDICT_DAMAGE,\r\n  SPELLS.DIVINE_STORM,\r\n  SPELLS.DIVINE_STORM_DAMAGE,\r\n  SPELLS.EXECUTION_SENTENCE_TALENT,\r\n  SPELLS.JUSTICARS_VENGEANCE_TALENT,\r\n];\r\nconst BUFF_HOLY_POWER_SPELLS: Spell[] = [\r\n  SPELLS.SERAPHIM_TALENT,\r\n];\r\nconst ALL_HOLY_POWER_SPELLS: Spell[] = [\r\n  ...HEALING_HOLY_POWER_SPELLS,\r\n  ...DAMAGE_HOLY_POWER_SPELLS,\r\n  ...BUFF_HOLY_POWER_SPELLS,\r\n];\r\n\r\nconst BUFF_TIME: number = 12000 * .95;//add buffer since log events lmao\r\nconst TRACK_BUFFER = 500;\r\n\r\nclass DivinePurpose extends Analyzer {\r\n\r\n  averageTimeTillBuffConsumed: number = 0;\r\n\r\n  hasProc: boolean = false;\r\n  procsWasted: number = 0;\r\n  procsGained: number = 0;\r\n\r\n  healingDone: number = 0;\r\n  overhealingDone: number = 0;\r\n  damageDone: number = 0;\r\n\r\n  buffAppliedTimestamp: number = 0;\r\n  buffRemovedTimestamp: number = 0;\r\n\r\n  totalChances: number = 0;\r\n  procProbabilities: number[] = [];\r\n  \r\n  constructor(args: Options) {\r\n    super(args);\r\n    this.active = this.selectedCombatant.hasTalent(SPELLS.DIVINE_PURPOSE_TALENT.id);\r\n\r\n    if(!this.active){\r\n      return;\r\n    }\r\n\r\n    this.addEventListener(Events.cast.by(SELECTED_PLAYER).spell(ALL_HOLY_POWER_SPELLS), this.castCounter);\r\n    this.addEventListener(Events.damage.by(SELECTED_PLAYER).spell(DAMAGE_HOLY_POWER_SPELLS), this.holyPowerDamage);\r\n    this.addEventListener(Events.heal.by(SELECTED_PLAYER).spell(HEALING_HOLY_POWER_SPELLS), this.holyPowerHeal);\r\n    this.addEventListener(Events.applybuff.by(SELECTED_PLAYER).spell(SPELLS.DIVINE_PURPOSE_BUFF), this.applyBuff);\r\n    this.addEventListener(Events.removebuff.by(SELECTED_PLAYER).spell(SPELLS.DIVINE_PURPOSE_BUFF), this.removeBuff);\r\n  }\r\n\r\n  castCounter(){\r\n    this.totalChances += 1;\r\n    this.procProbabilities.push(DIVINE_PURPOSE_CHANCE);\r\n  }\r\n\r\n  holyPowerDamage(event: DamageEvent){\r\n    if(this.hasProc || this.buffRemovedTimestamp + TRACK_BUFFER > event.timestamp){\r\n      this.damageDone += (event.amount || 0) + (event.absorbed || 0);\r\n    }\r\n  }\r\n\r\n  holyPowerHeal(event: HealEvent){\r\n    if(this.hasProc || this.buffRemovedTimestamp + TRACK_BUFFER > event.timestamp){\r\n      this.healingDone += (event.amount || 0) + (event.absorbed || 0);\r\n      this.overhealingDone += (event.overheal || 0);\r\n    }\r\n  }\r\n\r\n  applyBuff(event: ApplyBuffEvent){\r\n    this.hasProc = true;\r\n    this.procsGained += 1;\r\n    this.buffAppliedTimestamp = event.timestamp;\r\n  }\r\n\r\n  removeBuff(event: RemoveBuffEvent){\r\n    const lowerRoughTime = (this.buffAppliedTimestamp + BUFF_TIME);\r\n    if(lowerRoughTime < event.timestamp){\r\n      this.procsWasted += 1;\r\n    }\r\n    this.averageTimeTillBuffConsumed += (event.timestamp - this.buffAppliedTimestamp);\r\n    this.buffRemovedTimestamp = event.timestamp;\r\n    this.hasProc = false;\r\n  }\r\n\r\n  statistic() {\r\n    return (\r\n      <Statistic\r\n        position={STATISTIC_ORDER.CORE(12)}\r\n        size=\"flexible\"\r\n        category={STATISTIC_CATEGORY.TALENTS}\r\n        tooltip={(\r\n          <>\r\n            <ul>\r\n              <li>Average Time Till Buff Consumed: {formatDuration((this.averageTimeTillBuffConsumed /1000) / this.procsGained)}</li>\r\n              <li>Total Buffs: {this.procsGained}</li>\r\n              <li>Damage: {formatNumber(this.damageDone)}</li>\r\n              <li>Healing: {formatNumber(this.healingDone)}</li>\r\n              <li>Overhealing: {formatNumber(this.overhealingDone)}</li>\r\n            </ul>\r\n          </>\r\n        )}\r\n      >\r\n        <BoringSpellValueText spell={SPELLS.DIVINE_PURPOSE_TALENT}>\r\n          <ItemDamageDone amount={this.damageDone} /> <br />\r\n          <ItemHealingDone amount={this.healingDone} />\r\n        </BoringSpellValueText>\r\n        {plotOneVariableBinomChart(this.procsGained, this.totalChances, this.procProbabilities)}\r\n      </Statistic>\r\n    );\r\n  }\r\n}\r\n\r\nexport default DivinePurpose;\r\n","export const DIVINE_PURPOSE_CHANCE = .15;"],"sourceRoot":""}