{"version":3,"sources":["parser/hunter/survival/modules/Abilities.tsx","parser/hunter/survival/modules/features/CooldownThroughputTracker.tsx","parser/hunter/survival/modules/features/AlwaysBeCasting.tsx","parser/hunter/survival/modules/Buffs.tsx","parser/hunter/survival/modules/checklist/Component.tsx","parser/hunter/survival/modules/talents/MongooseBite.tsx","parser/hunter/survival/modules/talents/BirdOfPrey.tsx","parser/hunter/survival/modules/checklist/Module.tsx","parser/hunter/survival/normalizers/TipOfTheSpear.ts","parser/hunter/survival/modules/spells/KillCommand.tsx","parser/hunter/survival/modules/spells/ButcheryCarve.tsx","parser/hunter/survival/modules/spells/SerpentSting.tsx","parser/hunter/survival/modules/spells/CoordinatedAssault.tsx","parser/hunter/survival/modules/spells/WildfireBomb.tsx","parser/hunter/survival/modules/spells/RaptorStrike.tsx","parser/hunter/survival/modules/resources/SurvivalFocusCapTracker.tsx","parser/hunter/survival/modules/resources/Focus.tsx","parser/hunter/survival/modules/resources/SurvivalFocusUsage.tsx","parser/hunter/survival/modules/talents/VipersVenom.tsx","parser/hunter/survival/modules/talents/GuerrillaTactics.tsx","parser/hunter/survival/modules/talents/SteelTrap.tsx","parser/hunter/survival/modules/talents/Chakrams.tsx","parser/hunter/survival/modules/talents/WildfireInfusion/PheromoneBomb.tsx","parser/hunter/survival/modules/talents/WildfireInfusion/ShrapnelBomb.tsx","parser/hunter/survival/modules/talents/WildfireInfusion/VolatileBomb.tsx","parser/hunter/survival/modules/talents/AlphaPredator.tsx","parser/hunter/survival/modules/talents/Bloodseeker.tsx","parser/hunter/survival/modules/talents/HydrasBite.tsx","parser/hunter/survival/modules/talents/FlankingStrike.tsx","parser/hunter/survival/modules/talents/TipOfTheSpear.tsx","parser/hunter/survival/modules/spells/conduits/DeadlyTandem.tsx","parser/hunter/survival/modules/spells/conduits/FlameInfusion.tsx","parser/hunter/survival/modules/spells/conduits/StingingStrike.tsx","parser/hunter/survival/modules/spells/conduits/StrengthOfThePack.tsx","parser/hunter/survival/modules/items/NesingwarysTrappingApparatus.tsx","parser/hunter/survival/modules/items/WildfireCluster.tsx","parser/hunter/survival/CombatLogParser.ts","parser/core/calculateEffectiveDamage.js","interface/icons/Uptime.js","interface/statistics/components/ConduitSpellText/index.tsx","parser/hunter/survival/constants.tsx","parser/hunter/beastmastery/constants.tsx","interface/statistics/components/DonutChart/index.js","interface/others/charts/OneVariableBinomialChart.js","parser/shared/modules/helpers/Probability.tsx","parser/shared/ExecuteHelper.ts","interface/others/AverageTargetsHit.js","parser/shared/modules/helpers/Stacks.tsx","parser/shared/modules/resources/resourcetracker/ResourceSuggest.tsx","parser/shared/modules/resources/resourcetracker/RegenResourceCapTracker.js","parser/hunter/shared/modules/resources/FocusTracker.tsx","parser/hunter/shared/modules/spells/covenants/venthyr/FlayedShot.tsx","parser/hunter/shared/modules/resources/FocusDetails.tsx","parser/hunter/shared/modules/resources/FocusCapTracker.tsx","parser/hunter/shared/modules/core/DeathTracker.tsx","parser/hunter/shared/modules/talents/NaturalMending.tsx","parser/hunter/shared/modules/talents/Trailblazer.tsx","parser/hunter/shared/modules/talents/AMurderOfCrows.tsx","parser/hunter/shared/modules/talents/BornToBeWild.tsx","parser/hunter/shared/modules/talents/BindingShot.tsx","parser/hunter/shared/modules/spells/KillShot.tsx","parser/hunter/shared/modules/resources/SpellFocusCost.tsx","parser/hunter/shared/modules/spells/covenants/kyrian/ResonatingArrow.tsx","parser/hunter/shared/modules/spells/covenants/necrolord/DeathChakrams.tsx","parser/hunter/shared/modules/spells/covenants/nightfae/WildSpirits.tsx","parser/hunter/shared/modules/spells/conduits/kyrian/EnfeebledMark.tsx","parser/hunter/shared/modules/spells/conduits/venthyr/EmpoweredRelease.tsx","parser/hunter/shared/modules/spells/conduits/necrolord/NecroticBarrage.tsx","parser/hunter/shared/modules/spells/conduits/nightfae/SpiritAttunement.tsx","parser/hunter/shared/modules/items/SoulforgeEmbers.tsx","parser/shared/modules/resources/ResourceUsage.tsx","parser/hunter/shared/modules/resources/FocusUsage.tsx"],"names":["Abilities","combatant","this","selectedCombatant","spell","SPELLS","KILL_COMMAND_CAST_SV","buffSpellId","FLANKERS_ADVANTAGE","id","category","SPELL_CATEGORIES","ROTATIONAL","charges","hasTalent","ALPHA_PREDATOR_TALENT","cooldown","haste","hastedCooldown","gcd","base","timelineSortIndex","castEfficiency","suggestion","recommendedEfficiency","RAPTOR_STRIKE","RAPTOR_STRIKE_AOTE","enabled","MONGOOSE_BITE_TALENT","WILDFIRE_BOMB","WILDFIRE_INFUSION_TALENT","GUERRILLA_TACTICS_TALENT","SERPENT_STING_SV","VIPERS_VENOM_BUFF","CARVE","ROTATIONAL_AOE","BUTCHERY_TALENT","COORDINATED_ASSAULT","static","MONGOOSE_BITE_TALENT_AOTE","MONGOOSE_FURY","STEEL_TRAP_TALENT","FLANKING_STRIKE_TALENT","FLANKING_STRIKE_PLAYER","VOLATILE_BOMB_WFI","PHEROMONE_BOMB_WFI","SHRAPNEL_BOMB_WFI","shownSpell","CHAKRAMS_TALENT","CAMOUFLAGE_TALENT","UTILITY","EXHILARATION","DEFENSIVE","isDefensive","SURVIVAL_OF_THE_FITTEST","ASPECT_OF_THE_TURTLE","BORN_TO_BE_WILD_TALENT","ASPECT_OF_THE_EAGLE","ASPECT_OF_THE_CHEETAH","HARPOON","MUZZLE","DISENGAGE","FREEZING_TRAP","TAR_TRAP","FLARE","WING_CLIP","MISDIRECTION","HUNTERS_MARK","PRIMAL_RAGE_1","PRIMAL_RAGE_2","MASTERS_CALL","CALL_PET_1","CALL_PET_2","CALL_PET_3","CALL_PET_4","CALL_PET_5","DISMISS_PET","INTIMIDATION","MEND_PET","CoreAbilities","CooldownThroughputTracker","CoreCooldownThroughputTracker","cooldownSpells","summary","BUILT_IN_SUMMARY_TYPES","DAMAGE","ignoredSpells","BINDING_SHOT_TETHER","BINDING_SHOT_ROOT","AlwaysBeCasting","when","suggestionThresholds","addSuggestion","suggest","actual","recommended","SpellLink","icon","i18n","_","formatPercentage","activeTimePercentage","isLessThan","minor","average","major","style","ThresholdStyle","PERCENTAGE","CoreAlwaysBeCasting","Buffs","spellId","timelineHighlight","triggeredBySpellId","Object","keys","BLOODLUST_BUFFS","map","item","Number","CoreBuffs","SurvivalChecklist","thresholds","AbilityRequirement","props","GenericCastEfficiencyRequirement","getCastEfficiencyForSpellId","Rule","name","description","href","target","rel","A_MURDER_OF_CROWS_TALENT","Requirement","ResourceIcon","RESOURCE_TYPES","FOCUS","noLink","mongooseBiteAverageFocusThreshold","mongooseBite5StackHitPercentageThreshold","BIRDS_OF_PREY_TALENT","birdPercentEffectiveness","downtimeSuggestionThresholds","PreparationRule","MongooseBite","options","damage","mongooseBiteStacks","lastMongooseBiteStack","totalWindowsStarted","fiveBiteWindows","aspectOfTheEagleFixed","buffApplicationTimestamp","accumulatedFocusAtMomentOfCast","windowCheckedForFocus","active","Array","from","length","MONGOOSE_BITE_MAX_STACKS","x","addEventListener","Events","by","SELECTED_PLAYER","RAPTOR_MONGOOSE_VARIANTS","handleDamage","cast","onCast","applybuff","handleStacks","applybuffstack","removebuff","event","timestamp","MONGOOSE_BITE_MAX_TRAVEL_TIME","amount","absorbed","currentStacks","type","EventType","ApplyBuff","RemoveBuff","resource","classResources","find","undefined","meta","isEnhancedCast","enhancedCastReason","hasBuff","Statistic","position","STATISTIC_ORDER","OPTIONAL","size","tooltip","toFixed","totalMongooseBites","dropdown","className","values","mongooseBiteByStacks","e","i","key","STATISTIC_CATEGORY","TALENTS","BoringSpellValueText","ItemDamageDone","fiveStackMongooseBites","focusOnMongooseWindowThreshold","formatNumber","mongoose5StackHitThreshold","reduce","totalHits","stackHits","averageFocusOnMongooseWindowStart","NUMBER","percentMaxStacksHit","Analyzer","BirdOfPrey","petTarget","playerTarget","coordinatedAssaultExtended","wastedExtension","timestampAoE","targetsHitAoE","aoeChecked","SELECTED_PLAYER_PET","onPetDamage","onPlayerDamage","onAoECast","fightend","aoeCheck","encodeTargetString","targetID","targetInstance","MS_BUFFER","ability","guid","push","BOP_CA_EXTENSION_PER_CAST","includes","timeExtendedInSeconds","extensionTimeLostInSeconds","percentExtension","Checklist","combatants","preparationRuleAnalyzer","alwaysBeCasting","mongooseBite","birdOfPrey","Component","selected","BaseChecklist","dependencies","Combatants","CastEfficiency","PreparationRuleAnalyzer","TipOfTheSpearNormalizer","events","fixedEvents","forEach","Cast","TIP_OF_THE_SPEAR_CAST","__modified","EventsNormalizer","KillCommand","resets","additionalFocusFromNesingwary","possibleAdditionalFocusFromNesingwary","spellUsable","abilities","globalCooldown","onFlankersProc","hasLegendaryByBonusID","NESINGWARYS_TRAPPING_APPARATUS_EFFECT","bonusID","energize","checkNesingwaryFocusGain","isOnCooldown","getGlobalCooldownDuration","expectedCooldownDuration","getExpectedCooldownDuration","cooldownTriggerEvent","reduceCooldown","NESINGWARYS_TRAPPING_APPARATUS_ENERGIZE","resourceChange","NESINGWARY_FOCUS_GAIN_MULTIPLIER","waste","SV_KILL_COMMAND_FOCUS_GAIN","SpellUsable","GlobalCooldown","ButcheryCarve","reductionAtCurrentCast","effectiveReductionMs","wastedReductionMs","targetsHit","casts","spellKnown","bombSpellKnown","onDamage","BUTCHERY_CARVE_MAX_TARGETS_HIT","checkCooldown","ONE_SECOND_IN_MS","cooldownRemaining","avgTargetsHitThreshold","AverageTargetsHit","hits","DECIMAL","SerpentSting","hasVV","hasBoP","serpentStingTargets","vipersVenomBuffUp","bonusDamage","timesRefreshed","nonPandemicRefresh","nonVVBoPRefresh","enemies","VIPERS_VENOM_TALENT","applydebuff","onApplyDebuff","removedebuff","onRemoveDebuff","refreshdebuff","onRefreshDebuff","isInefficientCast","inefficientCastReason","serpentStingDuringCA","serpentStingTarget","serpentStingDuration","SERPENT_STING_SV_BASE_DURATION","splice","timeRemaining","SERPENT_STING_SV_PANDEMIC","pandemicSerpentStingDuration","Math","min","suggestionText","uptimeThresholdBoP","uptimeThresholdNonBoP","nonPandemicThreshold","Uptime","uptimePercentage","getBuffUptime","owner","fightDuration","isGreaterThan","Enemies","CoordinatedAssault","playerDamage","petDamage","calculateEffectiveDamage","COORDINATED_ASSAULT_DMG_MOD","getPercentageOfTotalDamageDone","totalDamage","percentUptime","WildfireBomb","acceptedCastDueToCapping","currentGCD","badRefreshes","lastRefresh","statTracker","WILDFIRE_BOMB_IMPACT","WILDFIRE_BOMB_LEEWAY_BUFFER","beginCooldown","enemy","getEntity","WILDFIRE_BOMB_DOT","badWFBThresholds","uptimeThresholds","GENERAL","averageTargetsHit","StatTracker","RaptorStrike","SurvivalFocusCapTracker","BASE_FOCUS_REGEN_SV","BASE_MAX_FOCUS_SV","FocusCapTracker","Focus","focusTracker","resourceSuggest","avg","extraSuggestion","FocusTracker","SurvivalFocusUsage","SharedHunterFocusUsage","listOfResourceSpenders","LIST_OF_FOCUS_SPENDERS_SV","spellsThatShouldShowAsOtherSpells","VipersVenom","buffedSerpentSting","procs","lastProcTimestamp","accumulatedTimeFromBuffToCast","wastedProcs","onApplyBuff","refreshbuff","onRefreshBuff","VIPERS_VENOM_DAMAGE_MODIFIER","averageTimeBetweenBuffAndUsage","GuerrillaTactics","AFFECTED_BY_GUERRILLA_TACTICS","GUERRILLA_TACTICS_INIT_HIT_MODIFIER","SteelTrap","STEEL_TRAP_DEBUFF","Chakrams","uniqueTargets","SURVIVAL_CHAKRAM_TYPES","damageTarget","unique","PheromoneBomb","kcCastTimestamp","focusGained","KILL_COMMAND_DAMAGE_SV","PHEROMONE_BOMB_WFI_DOT","PHEROMONE_BOMB_WFI_IMPACT","onBombCast","onKillCommandCast","ShrapnelBomb","bleedDamage","stacks","applications","SHRAPNEL_BOMB_WFI_DOT","SHRAPNEL_BOMB_WFI_IMPACT","INTERNAL_BLEEDING_SV","onDebuffApplication","applydebuffstack","ApplyDebuff","VolatileBomb","extendedSerpentStings","extendedInMs","focusSaved","missedSerpentResets","activeSerpentStings","_serpentApplication","onDebuffRemoval","VOLATILE_BOMB_WFI_DOT","_maybeSerpentStingExtend","VOLATILE_BOMB_WFI_IMPACT","onBombDamage","hastedSerpentStingDuration","currentHastePercentage","targetName","expectedEnd","extendStart","extendExpectedEnd","SV_SERPENT_STING_COST","encoded","formatDuration","missedResetsThresholds","AlphaPredator","ALPHA_DAMAGE_KC_MODIFIER","Bloodseeker","averageStacks","BLOODSEEKER_TALENT","uptime","averageAttackSpeedGain","BLOODSEEKER_BUFF","getStackWeightedBuffUptime","BLOODSEEKER_ATTACK_SPEED_GAIN","HydrasBite","spreadDamage","increasedMainTargetDamage","extraApplications","mainTargets","HYDRAS_BITE_TALENT","HYDRAS_BITE_DOT_MODIFIER","index","indexOf","FlankingStrike","flankingStrikes","sourceID","playerId","effectiveFocus","possibleFocus","FLANKING_STRIKE_PET","onPetEnergize","onPlayerEnergize","petId","foundPet","pet","sourcePet","playerPets","getOrInitializePet","flankingStrikesPlayer","FLANKING_STRIKE_FOCUS_GAIN","foundPlayer","source","total","current","idx","TipOfTheSpear","spenderCasts","usedStacks","wastedStacks","lastApplicationTimestamp","TIP_OF_THE_SPEAR_TALENT","onSpenderCast","changebuffstack","onChangeBuffStack","TIP_MAX_STACKS","TIP_DAMAGE_INCREASE","newStacks","DeadlyTandem","conduitRank","increasedCAUptime","caApplicationTimestamp","fight","start_time","conduitRankBySpellID","DEADLY_TANDOM_CONDUIT","onCACast","onCARemove","onCARefresh","onCAApply","onGenericDamage","DEADLY_TANDEM_CA_DURATION_INCREASE","COORDINATED_ASSAULT_BASELINE_DURATION","COVENANTS","ConduitSpellText","rank","maximumAddedCoordinatedAssaultUptime","FlameInfusion","addedDamage","flameInfusionStacks","spentStacks","potentialStacks","FLAME_INFUSION_CONDUIT","onBombImpact","onApplyFlameInfusion","onApplyStackFlameInfusion","onRemoveFlameInfusion","FLAME_INFUSION_BUFF","FLAME_INFUSION_WFB_DAMAGE_INCREASE","StingingStrike","STINGING_STRIKE_CONDUIT","onRaptorMongooseDamage","STINGING_STRIKE_RS_MB_DMG_INCREASE","StrengthOfThePack","STRENGTH_OF_THE_PACK_CONDUIT","STRENGTH_OF_THE_PACK_BUFF","STRENGTH_OF_THE_PACK_DAMAGE_MODIFIER","NesingwarysTrappingApparatus","focusWasted","killCommand","onEnergize","CORE","ITEMS","WildfireCluster","WILDFIRE_CLUSTER_EFFECT","WILDFIRE_CLUSTER_DAMAGE","CombatLogParser","CoreCombatLogParser","specModules","checklist","cooldownThroughputTracker","buffs","focusDetails","FocusDetails","spellFocusCost","SpellFocusCost","survivalFocusCapTracker","focus","survivalFocusUsage","tipOfTheSpearNormalizer","deathTracker","DeathTracker","butcheryCarve","serpentSting","coordinatedAssault","wildfireBomb","raptorStrike","killShot","KillShot","naturalMending","NaturalMending","trailblazer","Trailblazer","aMurderOfCrows","AMurderOfCrows","vipersVenom","steelTrap","guerrillaTactics","chakrams","bornToBeWild","BornToBeWild","bindingShot","BindingShot","alphaPredator","bloodseeker","hydrasBite","flankingStrike","tipOfTheSpear","pheromoneBomb","shrapnelBomb","volatileBomb","resonatingArrow","ResonatingArrow","deathChakrams","DeathChakrams","wildSpirits","WildSpirits","flayedShot","FlayedShot","empoweredRelease","EmpoweredRelease","enfeebledMark","EnfeebledMark","necroticBarrage","NecroticBarrage","spiritAttunement","SpiritAttunement","deadlyTandem","flameInfusion","stingingStrike","strengthOfThePack","nesingwarysTrappingApparatus","soulforgeEmbers","SoulforgeEmbers","wildfireCluster","arcaneTorrent","ArcaneTorrent","increase","raw","Icon","other","xmlns","viewBox","d","children","BASELINE_AOTE_CD","VIPERS_VENOM_COST_MULTIPLIER","CHAKRAMS_TO_MAINTARGET","CHAKRAMS_BACK_FROM_MAINTARGET","CHAKRAMS_NOT_MAINTARGET","MAX_FRENZY_STACKS","COBRA_SHOT_CDR_MS","COBRA_SHOT_FOCUS_THRESHOLD_TO_WAIT","KILL_COMMAND_BM_FOCUS_COST","BARBED_SHOT_BESTIAL_WRATH_CDR_MS","BESTIAL_WRATH_BASE_CD","AOTW_GCD_REDUCTION_AFFECTED_ABILITIES","KILL_COMMAND_CAST_BM","COBRA_SHOT","BESTIAL_WRATH","MULTISHOT_BM","BARBED_SHOT","ASPECT_OF_THE_WILD","ARCANE_SHOT","BLOODSHED_TALENT","DIRE_BEAST_TALENT","SPITTING_COBRA_TALENT","BARRAGE_TALENT","STAMPEDE_TALENT","CHIMAERA_SHOT_BM_TALENT","WILD_SPIRITS","FLAYED_SHOT","RESONATING_ARROW","DEATH_CHAKRAM_INITIAL_AND_AOE","ASPECT_OF_THE_WILD_FOCUS","SCENT_OF_BLOOD_BARBED_SHOT_RECHARGE","AOTB_MULTIPLIER","AOTB_ABILITIES_NOT_AFFECTED","MELEE","KILL_COMMAND_DAMAGE_BM","STOMP_DAMAGE","KILLER_INSTINCT_THRESHOLD","KILLER_INSTINCT_MULTIPLIER","WILD_CALL_RESET_PERCENT","SPITTING_COBRA_DAMAGE_INCREASE","STAMPEDE_POTENTIAL_HITS","AMOUNT_OF_PETS_WITH_AC","MAX_THRILL_STACKS","CRIT_PER_THRILL_STACK","BASIC_ATTACK_SPELLS","BITE_BASIC_ATTACK","CLAW_BASIC_ATTACK","SMACK_BASIC_ATTACK","MAX_TIME_BETWEEN_BASIC_ATK","MACRO_TIME_BETWEEN_BASIC_ATK","NO_DELAY_TIME_BETWEEN_BASIC_ATK","BEAST_MASTERY_FOCUS_REGEN","BEAST_MASTERY_FOCUS_MAX","FOCUS_THRESHOLD_MINOR","FOCUS_THRESHOLD_AVG","FOCUS_THRESHOLD_MAJOR","BARBED_SHOT_FOCUS_REGEN_BUFFS","BARBED_SHOT_BUFF","BARBED_SHOT_BUFF_2","BARBED_SHOT_BUFF_3","BARBED_SHOT_BUFF_4","BARBED_SHOT_BUFF_5","BARBED_SHOT_BUFF_6","BARBED_SHOT_BUFF_7","BARBED_SHOT_BUFF_8","BARBED_SHOT_FOCUS_REGEN_BUFFS_IDS","BEAST_MASTERY_SPELLS_WITHOUT_WASTE","CHIMAERA_SHOT_FOCUS","BARBED_SHOT_REGEN","AOTW_REGEN","CHIM_REGEN","LIST_OF_FOCUS_SPENDERS_BM","FEROCIOUS_APPETITE_ASPECT_REDUCTION","ONE_WITH_THE_BEAST_DAMAGE_INCREASE","BLOODLETTING_BARBED_DOT_INCREASE","ECHOING_CALL_INCREASED_WILD_CALL_CHANCE","DIRE_COMMAND_PROC_CHANCE","FLAMEWAKERS_PROC_CHANCE","QAPLA_KILL_COMMAND_REDUCTION_MS","RYLAKSTALKERS_PIERCING_FANGS_CRIT_DMG_INCREASE","DonutChart","items","sum","value","color","label","valueTooltip","content","background","chartSize","innerRadiusFactor","data","spec","mark","innerRadius","encoding","theta","field","legend","scale","domain","range","view","stroke","width","height","renderLegend","renderChart","React","PureComponent","defaultProps","OneVariableBinomialChart","state","hover","probabilities","actualEvent","xAxis","yAxis","yDomain","title","axis","grid","format","tickFormat","y","layer","line","strokeWidth","filled","disableHeight","BaseChart","expectedProcCount","procChance","procAttempts","binomialPMF","k","n","p","numerator","denominator","binomialDistribution","pow","binomialCDF","probability","findMax","pmf","max","maxP","resetProbabilityArray","actualProcs","_x","poissonBinomialPMF","setMinMaxProbabilities","threshold","procProbabilities","rangeMin","findIndex","rangeMax","slice","Ekj","j","lookup","Error","fill","plotOneVariableBinomChart","trackedName","tooltipText","actualEventY","ExecuteHelper","inExecuteWindow","inHealthExecuteWindow","executeWindowStart","lastExecuteHitTimestamp","totalExecuteWindowDuration","castsWithExecute","executeSources","onGeneralDamage","executeSpells","onExecuteCast","onExecuteDamage","to","executeOutsideRangeEnablers","applyExecuteEnablerBuff","removeExecuteEnablerBuff","onFightEnd","hitPoints","maxHitPoints","lowerThreshold","upperThreshold","isTargetInExecuteRange","isTargetInReverseExecuteRange","usable","allOnCD","targetIsFriendly","areExecuteSpellsOnCD","isExecuteUsableOutsideExecuteRange","isTargetInHealthExecuteWindow","modifiesDamage","damageModifier","constructor","approximate","averageHits","RemoveDebuff","ApplyBuffStack","RemoveBuffStack","ApplyDebuffStack","RemoveDebuffStack","stack","tracker","tracked","generated","wasted","isArray","newSuggestionSpell","buildersObj","maxGenerated","wastedShare","resourceNameLower","toLowerCase","regular","HIT_TYPES_THAT_REFUND","HIT_TYPES","MISS","DODGE","PARRY","RegenResourceCapTracker","args","atCap","missedRegen","naturalRegen","regenState","prevSpender","hasReportedBelowCap","debugErrorSum","debugGreatestError","debugAccuracyCheckCount","currentMaxResourceWithFallback","regen","naturalRegenRate","onFightend","drain","onDrain","onRemoveBuff","ChangeHaste","onChangeHaste","predictValue","currentTimestamp","baseRegenRate","getBaseRegenRate","isRegenHasted","isNaN","before","gain","applyEnergize","r","resourceType","resourceCost","getResource","cost","buffId","buffHistory","getBuffHistory","Boolean","buff","start","end","updateState","end_time","resourceChangeType","applyCumulatively","energizersToApplyCumulatively","time","eventResource","shouldAccumulate","isLastUpdateRecent","getCost","exemptFromRefund","castsToApplyCumulatively","tick","hitType","refund","floor","resourceRefundOnMiss","getReducedDrain","cumulativeEventWindow","buffsChangeMax","buffChangesResourceMax","buffsChangeRegen","buffChangesRegen","oldState","newState","durationCapped","timeCappedBetweenStates","onBelowCap","reachCap","predictReachValue","Infinity","onAtCap","calculated","currentMaxResource","startTime","startValue","targetValue","elapsed","predicted","fabricateEndCap","fabricateBeginCap","eventEmitter","fabricateEvent","EventEmitter","Haste","spellResourceCost","SpellResourceCost","drainsToApplyCumulatively","_applyBuilder","__fabricated","ResourceTracker","damageTicks","totalProcs","offCDProcs","activeKillShotSpell","SPECS","SURVIVAL_HUNTER","KILL_SHOT_SV","KILL_SHOT_MM_BM","hasCovenant","VENTHYR","add","FLAYERS_MARK","onProc","endCooldown","expectedProcs","FLAYED_SHOT_RESET_CHANCE","padding","wastedPercent","url","render","showSpenders","RESOURCES_HUNTER_MINOR_THRESHOLD","RESOURCES_HUNTER_AVERAGE_THRESHOLD","RESOURCES_HUNTER_MAJOR_THRESHOLD","bySecond","onEnergizeByPlayer","HUNTER_BASE_FOCUS_MAX","secondsIntoFight","focusNaturalRegenWasteThresholds","entries","wide","marginBottom","overflow","large","ultrawide","formatThousands","src","alt","disableWidth","duration","HUNTER_BASE_FOCUS_REGEN","deathTimestamp","ressTimestamp","lastResurrectionTimestamp","deathPercentageOfEncounter","lastDeathTimestamp","TIME_SPENT_DEAD_THRESHOLD","isAlive","deaths","pop","CoreDeathTracker","cdrPerFocus","MM_SV_CDR_PER_FOCUS","effectiveExhilReductionMs","wastedExhilReductionMs","lastFocusCost","NATURAL_MENDING_TALENT","BEAST_MASTERY_HUNTER","BM_CDR_PER_FOCUS","cooldownReductionMS","TRAILBLAZER_TALENT","TRAILBLAZER_BUFF","applicationTimestamp","lastDamageTick","crowsEndingTimestamp","maxCasts","any","checkForReset","A_MURDER_OF_CROWS_DEBUFF","adjustMaxCasts","AMOC_TICK_RATE","AMOC_BASE_DURATION","ceil","_spells","effectiveCDR","lastCast","baseCD","BASELINE_TURTLE_CHEETAH_CD","hasEagle","BORN_TO_BE_WILD_AFFECTED_SPELLS","effectiveTotalCDR","_roots","_applications","_casts","BINDING_SHOT_TALENT","MARKSMANSHIP_HUNTER","onRoot","onTether","DEAD_EYE_TALENT","totalExecuteDuration","KILL_SHOT_EXECUTE_RANGE","lockAndLoad","LOCK_AND_LOAD_TALENT","LOCK_AND_LOAD_BUFF","AIMED_SHOT","LNL_COST_MULTIPLIER","debuffs","KYRIAN","RESONATING_ARROW_DEBUFF","onDebuff","RESONATING_ARROW_DAMAGE","RESONATING_ARROW_CRIT_INCREASE","NECROLORD","DEATH_CHAKRAM_SINGLE_TARGET","DEATH_CHAKRAM_ENERGIZE","ampDamage","NIGHT_FAE","WILD_SPIRITS_DAMAGE","WILD_SPIRITS_DAMAGE_AOE","onWildSpiritsDamage","WILD_MARK","WILD_MARK_DAMAGE_AMP","hasConduitBySpellID","ENFEEBLED_MARK_CONDUIT","ENFEEBLED_MARK_DAMAGE_INCREASE","flayersMarkProcs","aggregatedContribution","EMPOWERED_RELEASE_CONDUIT","flayedShotProc","onKillShotDamage","EMPOWERED_RELEASE_INCREASED_FLAYED_PROC_CHANCE","EMPOWERED_RELEASE_BUFF","EMPOWERED_RELEASE_INCREASE_KS_DAMAGE","averageContributionAbsolute","round","averageContributionPercentage","gainedFocus","wastedFocus","NECROTIC_BARRAGE_CONDUIT","onDeathChakramDamage","NECROTIC_BARRAGE_DAMAGE_INCREASE","wildSpiritsCast","damageAfterOriginalDuration","SPIRIT_ATTUNEMENT_CONDUIT","onWildSpiritsCast","SPIRIT_ATTUNEMENT_DAMAGE_INCREASE","WILD_SPIRITS_BASELINE_DURATION","flareCasts","lastFlareCastTimestamp","tarTrapCasts","lastTarTrapCastTimestamp","lostEmberApplications","SOULFORGE_EMBERS_EFFECT","onFlare","onTarTrap","SOULFORGE_EMBERS_DAMAGE","onEmbersDamage","ResourceUsage","listOfSpellsUsed","ctor","resourceSpenders","spellID","resourceTypeID","resourceUsed","resourceTypeName","a","b","comparison","resourceUsageStatisticOrder","ResourceLink","resourceUsageChart","listOfDefaultColours","statisticOrder","colourIndex","makeResourceUsageTooltip","sort","sortResourceUsage","FocusUsage","LIST_OF_FOCUS_SPENDERS_SHARED"],"mappings":"iMAiWeA,E,0KA1VX,IAAMC,EAAYC,KAAKC,kBACvB,MAAO,CAEL,CACEC,MAAOC,IAAOC,qBACdC,YAAaF,IAAOG,mBAAmBC,GACvCC,SAAUV,EAAUW,iBAAiBC,WACrCC,QAASZ,EAAUa,UAAUT,IAAOU,sBAAsBN,IAAM,EAAI,EACpEO,SAAU,SAAAC,GAAK,OAAIC,YAAe,EAAGD,IACrCE,IAAK,CACHC,KAAM,MAERC,kBAAmB,EACnBC,eAAgB,CACdC,YAAY,EACZC,sBAAuBvB,EAAUa,UAAUT,IAAOU,sBAAsBN,IAAM,IAAO,MAGzF,CACEL,MAAO,CAACC,IAAOoB,cAAepB,IAAOqB,oBACrChB,SAAUV,EAAUW,iBAAiBC,WACrCe,SAAU1B,EAAUa,UAAUT,IAAOuB,qBAAqBnB,IAC1DU,IAAK,CACHC,KAAM,MAERC,kBAAmB,GAErB,CACEjB,MAAOC,IAAOwB,cACdnB,SAAUV,EAAUW,iBAAiBC,WACrCe,SAAU1B,EAAUa,UAAUT,IAAOyB,yBAAyBrB,IAC9DI,QAASZ,EAAUa,UAAUT,IAAO0B,yBAAyBtB,IAAM,EAAI,EACvEO,SAAU,SAAAC,GAAK,OAAIC,YAAe,GAAID,IACtCE,IAAK,CACHC,KAAM,MAERE,eAAgB,CACdC,YAAY,EACZC,sBAAuB,MAG3B,CACEpB,MAAOC,IAAO2B,iBACdzB,YAAaF,IAAO4B,kBAAkBxB,GACtCC,SAAUV,EAAUW,iBAAiBC,WACrCO,IAAK,CACHC,KAAM,MAERC,kBAAmB,GAErB,CACEjB,MAAOC,IAAO6B,MACdxB,SAAUV,EAAUW,iBAAiBwB,eACrCR,SAAU1B,EAAUa,UAAUT,IAAO+B,gBAAgB3B,IACrDO,SAAU,SAAAC,GAAK,OAAI,GAAK,EAAIA,IAC5BE,IAAK,CACHC,KAAM,OAGV,CACEhB,MAAOC,IAAOgC,oBACd9B,YAAaF,IAAOgC,oBAAoB5B,GACxCC,SAAUV,EAAUW,iBAAiBC,WACrCI,SAAU,IACVG,IAAK,CACHmB,OAAQ,GAEVhB,eAAgB,CACdC,YAAY,EACZC,sBAAuB,KAEzBH,kBAAmB,GAKrB,CACEjB,MAAO,CAACC,IAAOuB,qBAAsBvB,IAAOkC,2BAC5ChC,YAAaF,IAAOmC,cAAc/B,GAClCC,SAAUV,EAAUW,iBAAiBC,WACrCe,QAAS1B,EAAUa,UAAUT,IAAOuB,qBAAqBnB,IACzDU,IAAK,CACHC,KAAM,MAERC,kBAAmB,GAErB,CACEjB,MAAOC,IAAOoC,kBACd/B,SAAUV,EAAUW,iBAAiBC,WACrCe,QAAS1B,EAAUa,UAAUT,IAAOoC,kBAAkBhC,IACtDO,SAAU,GACVG,IAAK,CACHC,KAAM,MAERE,eAAgB,CACdC,YAAY,EACZC,sBAAuB,MAG3B,CACEpB,MAAO,CAACC,IAAOqC,uBAAwBrC,IAAOsC,wBAC9CjC,SAAUV,EAAUW,iBAAiBC,WACrCe,QAAS1B,EAAUa,UAAUT,IAAOqC,uBAAuBjC,IAC3DO,SAAU,GACVG,IAAK,CACHC,KAAM,MAERE,eAAgB,CACdC,YAAY,EACZC,sBAAuB,KAG3B,CACEpB,MAAO,CAACC,IAAOuC,kBAAmBvC,IAAOwC,mBAAoBxC,IAAOyC,kBAAmBzC,IAAOyB,0BAC9FiB,WAAY1C,IAAOyB,yBACnBpB,SAAUV,EAAUW,iBAAiBC,WACrCe,QAAS1B,EAAUa,UAAUT,IAAOyB,yBAAyBrB,IAC7DI,QAASZ,EAAUa,UAAUT,IAAO0B,yBAAyBtB,IAAM,EAAI,EACvEO,SAAU,SAAAC,GAAK,OAAIC,YAAe,GAAID,IACtCE,IAAK,CACHC,KAAM,MAERC,kBAAmB,EACnBC,eAAgB,CACdC,YAAY,EACZC,sBAAuB,MAG3B,CACEpB,MAAOC,IAAO2C,gBACdtC,SAAUV,EAAUW,iBAAiBC,WACrCe,QAAS1B,EAAUa,UAAUT,IAAO2C,gBAAgBvC,IACpDO,SAAU,GACVG,IAAK,CACHC,KAAM,MAERE,eAAgB,CACdC,YAAY,EACZC,sBAAuB,KAG3B,CACEpB,MAAOC,IAAO+B,gBACd1B,SAAUV,EAAUW,iBAAiBwB,eACrCR,QAAS1B,EAAUa,UAAUT,IAAO+B,gBAAgB3B,IACpDI,QAAS,EACTG,SAAU,SAAAC,GAAK,OAAIC,YAAe,EAAGD,IACrCE,IAAK,CACHC,KAAM,MAERE,eAAgB,CACdC,YAAY,EACZC,sBAAuB,KAG3B,CACEpB,MAAOC,IAAO4C,kBACdvC,SAAUV,EAAUW,iBAAiBuC,QACrClC,SAAU,GACVW,QAAS1B,EAAUa,UAAUT,IAAO4C,kBAAkBxC,IACtDU,IAAK,CACHC,KAAM,OAMV,CACEhB,MAAOC,IAAO8C,aACdzC,SAAUV,EAAUW,iBAAiByC,UACrCC,aAAa,EACbrC,SAAU,IACVG,IAAK,CACHC,KAAM,OAGV,CACEhB,MAAOC,IAAOiD,wBACd5C,SAAUV,EAAUW,iBAAiByC,UACrCC,aAAa,EACbrC,SAAU,IACVG,IAAK,CACHmB,OAAQ,IAGZ,CACElC,MAAOC,IAAOkD,qBACdhD,YAAaF,IAAOkD,qBAAqB9C,GACzCC,SAAUV,EAAUW,iBAAiByC,UACrCC,aAAa,EACbrC,SAAU,KAAO,GAAKf,EAAUa,UAAUT,IAAOmD,uBAAuB/C,IAAM,GAAM,IACpFU,IAAK,CACHmB,OAAQ,IAMZ,CACElC,MAAOC,IAAOoD,oBACd/C,SAAUV,EAAUW,iBAAiBuC,QACrClC,SAAU,IAAM,GAAKf,EAAUa,UAAUT,IAAOmD,uBAAuB/C,IAAM,GAAM,IACnFU,IAAK,CACHmB,OAAQ,IAGZ,CACElC,MAAOC,IAAOqD,sBACdhD,SAAUV,EAAUW,iBAAiBuC,QACrClC,SAAU,KAAO,GAAKf,EAAUa,UAAUT,IAAOmD,uBAAuB/C,IAAM,GAAM,IACpFU,IAAK,CACHmB,OAAQ,IAGZ,CACElC,MAAOC,IAAOsD,QACdjD,SAAUV,EAAUW,iBAAiBuC,QACrClC,SAAU,GACVG,IAAK,CACHmB,OAAQ,IAGZ,CACElC,MAAOC,IAAOuD,OACdlD,SAAUV,EAAUW,iBAAiBuC,QACrClC,SAAU,GACVG,IAAK,CACHmB,OAAQ,IAGZ,CACElC,MAAOC,IAAOwD,UACdnD,SAAUV,EAAUW,iBAAiBuC,QACrClC,SAAU,GACVG,IAAK,CACHmB,OAAQ,IAGZ,CACElC,MAAOC,IAAOyD,cACdpD,SAAUV,EAAUW,iBAAiBuC,QACrClC,SAAU,GACVG,IAAK,CACHC,KAAM,OAGV,CACEhB,MAAOC,IAAO0D,SACdrD,SAAUV,EAAUW,iBAAiBuC,QACrClC,SAAU,GACVG,IAAK,CACHC,KAAM,OAGV,CACEhB,MAAOC,IAAO2D,MACdtD,SAAUV,EAAUW,iBAAiBuC,QACrClC,SAAU,GACVG,IAAK,CACHC,KAAM,OAGV,CACEhB,MAAOC,IAAO4D,UACdvD,SAAUV,EAAUW,iBAAiBuC,QACrC/B,IAAK,CACHC,KAAM,OAGV,CACEhB,MAAOC,IAAO6D,aACdxD,SAAUV,EAAUW,iBAAiBuC,QACrClC,SAAU,GACVG,IAAK,CACHmB,OAAQ,IAGZ,CACElC,MAAOC,IAAO8D,aACdzD,SAAUV,EAAUW,iBAAiBuC,QACrC/B,IAAK,CACHC,KAAM,MAMV,CACEhB,MAAO,CAACC,IAAO+D,cAAe/D,IAAOgE,eACrC9D,YAAa,CAACF,IAAO+D,cAAc3D,GAAIJ,IAAOgE,cAAc5D,IAC5DC,SAAUV,EAAUW,iBAAiBuC,QACrClC,SAAU,IACVG,IAAK,CACHmB,OAAQ,IAIZ,CACElC,MAAOC,IAAOiE,aACd5D,SAAUV,EAAUW,iBAAiBuC,QACrClC,SAAU,GACVG,IAAK,CACHmB,OAAQ,IAGZ,CACElC,MAAO,CACLC,IAAOkE,WACPlE,IAAOmE,WACPnE,IAAOoE,WACPpE,IAAOqE,WACPrE,IAAOsE,YAETjE,SAAUV,EAAUW,iBAAiBuC,QACrC/B,IAAK,CACHC,KAAM,OAGV,CACEhB,MAAOC,IAAOuE,YACdlE,SAAUV,EAAUW,iBAAiBuC,QACrC/B,IAAK,CACHC,KAAM,OAGV,CACEhB,MAAOC,IAAOwE,aACdnE,SAAUV,EAAUW,iBAAiBuC,QACrClC,SAAU,GACVG,IAAK,CACHC,KAAM,OAGV,CACEhB,MAAOC,IAAOyE,SACdpE,SAAUV,EAAUW,iBAAiBuC,QACrClC,SAAU,GACVG,IAAK,CACHC,KAAM,Y,GApVQ2D,K,iBCDlBC,E,4HAAkCC,KAAlCD,EACGE,e,sBACFD,IAA8BC,gB,CACjC,CACE9E,MAAOC,IAAOgC,oBACd8C,QAAS,CACPC,IAAuBC,WANzBL,EAWGM,c,sBACFL,IAA8BK,e,CACjCjF,IAAOkF,oBAAoB9E,GAC3BJ,IAAOmF,kBAAkB/E,KAIduE,Q,yDCSAS,E,0KARDC,GACVA,EAAKxF,KAAKyF,sBAAsBC,eAAc,SAACC,EAASC,EAAQC,GAAlB,OAAkCF,EAAQ,gKAA2H,kBAACG,EAAA,EAAD,CAAWvF,GAAIJ,IAAOoB,cAAchB,KAA/J,QAA0K,kBAACuF,EAAA,EAAD,CAAWvF,GAAIJ,IAAOuB,qBAAqBnB,KAArN,gEACrFwF,KAAK,wBACLH,OAAOI,OAAKC,EAAE,8FAA4DC,YAAiB,EAAIN,OAC/FC,YAH6E,WAG7DK,YAAiB,EAAIL,GAHwC,0B,2CAZhF,MAAO,CACLD,OAAQ5F,KAAKmG,qBACbC,WAAY,CACVC,MAAO,KACPC,QAAS,KACTC,MAAO,MAETC,MAAOC,IAAeC,gB,GATEC,K,SCefC,E,sKAnBX,MAAO,CACL,CACEC,QAAS1G,IAAOgC,oBAAoB5B,GACpCuG,mBAAmB,EACnBC,mBAAoB5G,IAAOgC,oBAAoB5B,IAEjD,CACEsG,QAAS1G,IAAOkD,qBAAqB9C,GACrCuG,mBAAmB,EACnBC,mBAAoB5G,IAAOkD,qBAAqB9C,IAElD,CACEsG,QAASG,OAAOC,KAAKC,KAAiBC,KAAI,SAAAC,GAAI,OAAIC,OAAOD,MACzDN,mBAAmB,Q,UAfPQ,G,yGCuFLC,EA/EW,SAAC,GAAoD,IAAlDxH,EAAiD,EAAjDA,UAAWqB,EAAsC,EAAtCA,eAAgBoG,EAAsB,EAAtBA,WAChDC,EAAqB,SAACC,GAAD,OACzB,kBAACC,EAAA,EAAD,eACEvG,eAAgBA,EAAewG,4BAA4BF,EAAMxH,QAC7DwH,KAOR,OACE,kBAAC,IAAD,KACE,kBAACG,EAAA,EAAD,CACEC,KAAK,0CACLC,YACE,+WAEG,KACD,uBAAGC,KAAK,qFAAqFC,OAAO,SAASC,IAAI,uBAAjH,gBAIJ,kBAACT,EAAD,CAAoBvH,MAAOC,IAAOC,qBAAqBG,KACvD,kBAACkH,EAAD,CAAoBvH,MAAOC,IAAOgC,oBAAoB5B,KAErDR,EAAUa,UAAUT,IAAOqC,uBAAuBjC,KAAO,kBAACkH,EAAD,CAAoBvH,MAAOC,IAAOqC,uBAAuBjC,KAClHR,EAAUa,UAAUT,IAAOgI,yBAAyB5H,KAAO,kBAACkH,EAAD,CAAoBvH,MAAOC,IAAOgI,yBAAyB5H,KACtHR,EAAUa,UAAUT,IAAOyB,yBAAyBrB,IAAM,kBAACkH,EAAD,CAAoBvH,MAAOC,IAAOyB,yBAAyBrB,KAAS,kBAACkH,EAAD,CAAoBvH,MAAOC,IAAOwB,cAAcpB,KAC9KR,EAAUa,UAAUT,IAAO2C,gBAAgBvC,KAAO,kBAACkH,EAAD,CAAoBvH,MAAOC,IAAO2C,gBAAgBvC,MAGtGR,EAAUa,UAAUT,IAAOuB,qBAAqBnB,IAC/C,kBAACsH,EAAA,EAAD,CACEC,KAAK,sBACLC,YACE,6CACQ,kBAACjC,EAAA,EAAD,CAAWvF,GAAIJ,IAAOuB,qBAAqBnB,KADnD,wEAC8H,kBAACuF,EAAA,EAAD,CAAWvF,GAAIJ,IAAOmC,cAAc/B,KADlK,sDAC2N,kBAACuF,EAAA,EAAD,CAAWvF,GAAIJ,IAAOuB,qBAAqBnB,KADtQ,oEAKF,kBAAC6H,EAAA,EAAD,CAAaN,KAAM,oCAAE,kBAACO,EAAA,EAAD,CAAc9H,GAAI+H,IAAeC,MAAMhI,GAAIiI,QAAQ,IAArD,qBAAgF,kBAAC1C,EAAA,EAAD,CAAWvF,GAAIJ,IAAOmC,cAAc/B,KAApH,oBAA+IiH,WAAYA,EAAWiB,oCACzL,kBAACL,EAAA,EAAD,CAAaN,KAAM,oCAAE,kBAAChC,EAAA,EAAD,CAAWvF,GAAIJ,IAAOuB,qBAAqBnB,KAA7C,0BAA0E,kBAACuF,EAAA,EAAD,CAAWvF,GAAIJ,IAAOmC,cAAc/B,KAA9G,KAA0HiH,WAAYA,EAAWkB,4CAEpK,KAEJ,kBAACb,EAAA,EAAD,CACEC,KAAK,wCACLC,YACE,0RAKDhI,EAAUa,UAAUT,IAAOwI,qBAAqBpI,IAAM,kBAAC6H,EAAA,EAAD,CAAaN,KAAM,oCAAE,kBAAChC,EAAA,EAAD,CAAWvF,GAAIJ,IAAOwI,qBAAqBpI,KAA7C,mBAAuEiH,WAAYA,EAAWoB,2BAA+B,MAEzM,kBAACf,EAAA,EAAD,CACEC,KAAM,kDAAa,kBAACO,EAAA,EAAD,CAAc9H,GAAI+H,IAAeC,MAAMhI,GAAIiI,QAAQ,IAAhE,kBACNT,YACE,yMACqKhI,EAAUa,UAAUT,IAAOuB,qBAAqBnB,IAAM,kBAACuF,EAAA,EAAD,CAAWvF,GAAIJ,IAAOuB,qBAAqBnB,KAAS,kBAACuF,EAAA,EAAD,CAAWvF,GAAIJ,IAAOoB,cAAchB,KADnT,mDAKF,kBAAC6H,EAAA,EAAD,CAAaN,KAAM,oDAAmBN,WAAYA,EAAWqB,gCAE/D,kBAACC,EAAA,EAAD,CAAiBtB,WAAYA,M,8EC8HpBuB,E,kDAvKb,WAAYC,GAAmB,IAAD,8BAC5B,cAAMA,IAXRC,OAAS,EAUqB,EAT9BC,mBAA+B,GASD,EAR9BC,sBAAgC,EAQF,EAP9BC,oBAAsB,EAOQ,EAN9BC,gBAAkB,EAMY,EAL9BC,uBAAwB,EAKM,EAJ9BC,yBAAmC,EAIL,EAH9BC,+BAAiC,EAGH,EAF9BC,uBAAiC,EAK/B,EAAKC,OAAS,EAAKzJ,kBAAkBW,UAAUT,IAAOuB,qBAAqBnB,IAE3E,EAAK2I,mBAAqBS,MAAMC,KAAK,CAAEC,OAAQC,IAA2B,IAAK,SAAAC,GAAC,OAAI,KAEpF,EAAKC,iBAAiBC,IAAOhB,OAAOiB,GAAGC,KAAiBjK,MAAMkK,KAA2B,EAAKC,cAC9F,EAAKL,iBAAiBC,IAAOK,KAAKJ,GAAGC,KAAiBjK,MAAMkK,KAA2B,EAAKG,QAC5F,EAAKP,iBAAiBC,IAAOO,UAAUN,GAAGC,KAAiBjK,MAAMC,IAAOmC,eAAgB,EAAKmI,cAC7F,EAAKT,iBAAiBC,IAAOS,eAAeR,GAAGC,KAAiBjK,MAAMC,IAAOmC,eAAgB,EAAKmI,cAClG,EAAKT,iBAAiBC,IAAOU,WAAWT,GAAGC,KAAiBjK,MAAMC,IAAOmC,eAAgB,EAAKmI,cAXlE,E,yDA0DjBG,GAGwB,IAA/B5K,KAAKmJ,uBAA+ByB,EAAMC,UAAY7K,KAAKuJ,yBAA2BuB,MACxF9K,KAAKmJ,uBAAyB,EAC9BnJ,KAAKsJ,uBAAwB,GAE1BtJ,KAAKkJ,mBAAmBlJ,KAAKmJ,uBAGhCnJ,KAAKkJ,mBAAmBlJ,KAAKmJ,wBAA0B,EAFvDnJ,KAAKkJ,mBAAmBlJ,KAAKmJ,uBAAyB,EAIpDnJ,KAAKsJ,wBACPtJ,KAAKmJ,uBAAyB,EAC9BnJ,KAAKsJ,uBAAwB,GAE/BtJ,KAAKiJ,QAAU2B,EAAMG,QAAUH,EAAMI,UAAY,K,mCAGtCJ,GACX5K,KAAKmJ,sBAAwB8B,YAAcL,GACvC5K,KAAKmJ,wBAA0BW,MACjC9J,KAAKqJ,iBAAmB,GAEtBuB,EAAMM,OAASC,IAAUC,YAC3BpL,KAAKuJ,yBAA2BqB,EAAMC,UACtC7K,KAAKoJ,qBAAuB,GAE1BwB,EAAMM,OAASC,IAAUE,aAC3BrL,KAAKyJ,uBAAwB,K,6BAI1BmB,GACL,IAAK5K,KAAKyJ,sBAAuB,CAAC,IAAD,EACzB6B,EAAQ,UAAGV,EAAMW,sBAAT,aAAG,EAAsBC,MAAK,SAAAF,GAAQ,OAAIA,EAASJ,OAAS5C,IAAeC,MAAMhI,MAC3F+K,IACFtL,KAAKwJ,gCAAkC8B,EAASP,QAAU,GAE5D/K,KAAKyJ,uBAAwB,OAEZgC,IAAfb,EAAMc,OACRd,EAAMc,KAAO,CACXC,gBAAgB,EAChBC,mBAAoB,KAGW,IAA/B5L,KAAKmJ,uBAA+BnJ,KAAKC,kBAAkB4L,QAAQ1L,IAAOmC,cAAc/B,MAC1FqK,EAAMc,KAAKC,gBAAiB,EAC5Bf,EAAMc,KAAKE,mBAAqB,gD,kCAIvB,IAAD,OACV,OACE,kBAACE,EAAA,EAAD,CACEC,SAAUC,IAAgBC,SAAS,GACnCC,KAAK,WACLC,QACE,8DAC0BnM,KAAKkJ,mBAAmBY,KAA4B9J,KAAKqJ,iBAAiB+C,QAAQ,GAD5G,uBACoItC,IADpI,6BACuL,6BADvL,0BAE0B9J,KAAKqM,mBAAqBrM,KAAKoJ,qBAAqBgD,QAAQ,GAFtF,4CAKFE,SACE,oCACE,2BAAOC,UAAU,yBACf,+BACE,4BACE,sCACA,4CACA,0CAGJ,+BACGvF,OAAOwF,OAAOxM,KAAKyM,sBAAsBtF,KAAI,SAACuF,EAAGC,GAAJ,OAC5C,wBAAIC,IAAKD,GACP,4BAAKA,GACL,4BAAKD,GACL,4BAAKxG,YAAiBmB,OAAOqF,GAAK,EAAKL,oBAAvC,YAOZ7L,SAAUqM,IAAmBC,SAE7B,kBAACC,EAAA,EAAD,CAAsB7M,MAAOC,IAAOuB,sBAClC,kBAACsL,EAAA,EAAD,CAAgBjC,OAAQ/K,KAAKiJ,SAD/B,IAC0C,6BACvCjJ,KAAKiN,uBAFR,IAEiCjN,KAAKqM,mBAFtC,IAE0D,oD,kCAOpD7G,GACVA,EAAKxF,KAAKkN,gCAAgCxH,eAAc,SAACC,EAASC,EAAQC,GAAlB,OAAkCF,EAAQ,0DAAqB,kBAACG,EAAA,EAAD,CAAWvF,GAAIJ,IAAOuB,qBAAqBnB,KAAhE,iFAAoJ,kBAACuF,EAAA,EAAD,CAAWvF,GAAIJ,IAAOmC,cAAc/B,KAAxL,8CAAyO,kBAACuF,EAAA,EAAD,CAAWvF,GAAIJ,IAAOuB,qBAAqBnB,KAApR,sBAC/FwF,KAAK5F,IAAOuB,qBAAqBqE,MACjCH,OAAOI,OAAKC,EAAE,iHAA4DkH,YAAavH,OACvFC,YAHuF,WAGvEsH,YAAatH,GAH0D,uBAI1FL,EAAKxF,KAAKoN,4BAA4B1H,eAAc,SAACC,EAASC,EAAQC,GAAlB,OAAkCF,EAAQ,sEAAiC,kBAACG,EAAA,EAAD,CAAWvF,GAAIJ,IAAOuB,qBAAqBnB,KAA5E,8CAA6H,kBAACuF,EAAA,EAAD,CAAWvF,GAAIJ,IAAOmC,cAAc/B,KAAjK,MAC3FwF,KAAK5F,IAAOuB,qBAAqBqE,MACjCH,OAAOI,OAAKC,EAAE,6GAA+DC,YAAiBN,OAC9FC,YAHmF,WAGnEK,YAAiBL,GAHkD,0B,2CAjJtF,OAAO7F,KAAKkJ,qB,yCAIZ,OAAOlJ,KAAKkJ,mBAAmBmE,QAAO,SAACC,EAAmBC,GAApB,OAA0CD,EAAYC,IAAW,K,6CAIvG,OAAOvN,KAAKkJ,mBAAmBY,O,wDAI/B,OAAO9J,KAAKwJ,+BAAiCxJ,KAAKoJ,sB,0CAIlD,OAAOpJ,KAAKkJ,mBAAmBY,KAA4B9J,KAAKqM,qB,qDAIhE,MAAO,CACLzG,OAAQ5F,KAAKwN,kCACbpH,WAAY,CACVC,MAAO,GACPC,QAAS,GACTC,MAAO,IAETC,MAAOC,IAAegH,U,iDAKxB,MAAO,CACL7H,OAAQ5F,KAAK0N,oBACbtH,WAAY,CACVC,MAAO,GACPC,QAAS,IACTC,MAAO,KAETC,MAAOC,IAAeC,gB,GAlEDiH,K,SCoHZC,E,kDA1Gb,WAAY5E,GAAmB,IAAD,8BAC5B,cAAMA,IATR6E,UAAoB,GAQU,EAP9BC,aAAuB,GAOO,EAN9BC,2BAA6B,EAMC,EAL9BC,gBAAkB,EAKY,EAJ9BC,aAAe,EAIe,EAH9BC,cAA2B,GAGG,EAF9BC,YAAa,EAKX,EAAKzE,OAAS,EAAKzJ,kBAAkBW,UAAUT,IAAOwI,qBAAqBpI,IAE3E,EAAKyJ,iBAAiBC,IAAOhB,OAAOiB,GAAGkE,KAAsB,EAAKC,aAClE,EAAKrE,iBAAiBC,IAAOhB,OAAOiB,GAAGC,KAAiBjK,MAAlC,sBAA4CkK,KAA5C,CAAsEjK,IAAO6B,MAAO7B,IAAO+B,mBAAmB,EAAKoM,gBACzI,EAAKtE,iBAAiBC,IAAOK,KAAKJ,GAAGC,KAAiBjK,MAAM,CAACC,IAAO6B,MAAO7B,IAAO+B,kBAAmB,EAAKqM,WAC1G,EAAKvE,iBAAiBC,IAAOuE,SAAU,EAAKC,UARhB,E,wDAoC5BzO,KAAKmO,YAAa,I,kCAGRvD,GACV5K,KAAK6N,UAAYa,YAAmB9D,EAAM+D,SAAU/D,EAAMgE,kB,qCAG7ChE,GAIb,IAHK5K,KAAKmO,YAAcnO,KAAKiO,aAAe,GAAKrD,EAAMC,UAAY7K,KAAKiO,aAAeY,KACrF7O,KAAKyO,WAEFzO,KAAKC,kBAAkB4L,QAAQ1L,IAAOgC,oBAAoB5B,IAA/D,CAGA,IAAMsG,EAAU+D,EAAMkE,QAAQC,KAC9B/O,KAAK8N,aAAeY,YAAmB9D,EAAM+D,SAAU/D,EAAMgE,gBACzD/H,IAAY1G,IAAO6B,MAAMzB,IAAMsG,IAAY1G,IAAO+B,gBAAgB3B,IACpEP,KAAKkO,cAAcc,KAAKhP,KAAK8N,eAAiB9N,KAAK6N,WACnD7N,KAAKiO,aAAerD,EAAMC,WAEtB7K,KAAK8N,eAAiB9N,KAAK6N,UAC7B7N,KAAK+N,4BAA8BkB,IAEnCjP,KAAKgO,iBAAmBiB,O,iCAMxBjP,KAAKkO,cAAcgB,UAAS,GAC9BlP,KAAK+N,4BAA8BkB,IAEnCjP,KAAKgO,iBAAmBiB,IAE1BjP,KAAKkO,cAAgB,GACrBlO,KAAKmO,YAAa,I,kCAGR3I,GACVA,EAAKxF,KAAK4I,0BAA0BlD,eAAc,SAACC,EAASC,EAAQC,GAAlB,OAAkCF,EAAQ,0DAAqB,kBAACG,EAAA,EAAD,CAAWvF,GAAIJ,IAAOwI,qBAAqBpI,KAAhE,4BAA+F,kBAACuF,EAAA,EAAD,CAAWvF,GAAIJ,IAAOoB,cAAchB,KAAnI,KAA2I,kBAACuF,EAAA,EAAD,CAAWvF,GAAIJ,IAAOuB,qBAAqBnB,KAAtL,KAA8L,kBAACuF,EAAA,EAAD,CAAWvF,GAAIJ,IAAO6B,MAAMzB,KAA1N,OAAoO,kBAACuF,EAAA,EAAD,CAAWvF,GAAIJ,IAAO+B,gBAAgB3B,KAA1Q,kDACzFwF,KAAK5F,IAAOwI,qBAAqB5C,MACjCH,OAAOI,OAAKC,EAAE,0IAAyDC,YAAiBN,OACxFC,YAHiF,UAGlEK,YAAiBL,GAHiD,0B,kCAOpF,OACE,kBAACiG,EAAA,EAAD,CACEC,SAAUC,IAAgBC,SAAS,GACnCC,KAAK,WACLC,QACE,oCACE,4BACE,mEAAyCnM,KAAKmP,sBAA9C,aACA,+CAAqBnP,KAAKoP,2BAA1B,oFAIN5O,SAAUqM,IAAmBC,SAE7B,kBAACC,EAAA,EAAD,CAAsB7M,MAAOC,IAAOwI,sBAClC,oCACE,iDADF,IACiC3I,KAAKmP,sBADtC,S,+CArFN,MAAO,CACLvJ,OAAQ5F,KAAKqP,iBACbjJ,WAAY,CACVC,MAAO,IACPC,QAAS,IACTC,MAAO,KAETC,MAAOC,IAAeC,c,4CAKxB,OAAO1G,KAAK+N,2BAA6B,M,iDAIzC,OAAO/N,KAAKgO,gBAAkB,M,uCAI9B,OAAOhO,KAAK+N,4BAA8B/N,KAAK+N,2BAA6B/N,KAAKgO,qB,GA1C5DL,KCZnB2B,E,4MAUMC,gB,IACAnO,oB,IACAoO,6B,IACAC,qB,IACAC,kB,IACAC,gB,yDAGR,OACE,kBAACC,EAAD,CACE7P,UAAWC,KAAKuP,WAAWM,SAC3BzO,eAAgBpB,KAAKoB,eACrBoG,WAAU,2BACLxH,KAAKwP,wBAAwBhI,YADxB,IAERqB,6BAA8B7I,KAAKyP,gBAAgBhK,qBACnDgD,kCAAmCzI,KAAK0P,aAAaxC,+BACrDxE,yCAA0C1I,KAAK0P,aAAatC,2BAC5DxE,yBAA0B5I,KAAK2P,WAAW/G,iC,GA3B5BkH,KAAlBR,EACGS,aAAe,CACpBR,WAAYS,IACZ5O,eAAgB6O,IAChBT,wBAAyBU,IACzBT,gBAAiBlK,EACjBmK,aAAc3G,EACd4G,WAAY/B,GA2BD0B,QCnBAa,G,wKAdHC,GACR,IAAMC,EAA0B,GAShC,OARAD,EAAOE,SAAQ,SAAC1F,GACVA,EAAMM,OAASC,IAAUoF,MAAQ3F,EAAMkE,QAAQC,OAAS5O,IAAOqQ,sBAAsBjQ,KACtFqK,EAAqBM,KAAO,OAC7BN,EAAM6F,YAAa,GAErBJ,EAAYrB,KAAKpE,MAGZyF,M,UAnB2BK,G,8BCiBhCC,G,kDAgBJ,WAAY3H,GAAmB,IAAD,8BAC5B,cAAMA,IAVR4H,OAAS,EASqB,EAP9BC,8BAAgC,EAOF,EAN9BC,sCAAwC,EAMV,EAJpBC,iBAIoB,IAHpBC,eAGoB,IAFpBC,oBAEoB,EAG5B,EAAKjH,iBAAiBC,IAAOO,UAAUN,GAAGC,KAAiBjK,MAAMC,IAAOG,oBAAqB,EAAK4Q,gBAClG,EAAKjR,kBAAkBkR,sBAAsBhR,IAAOiR,sCAAsCC,UAAY,EAAKrH,iBAAiBC,IAAOqH,SAASpH,GAAGC,KAAiBjK,MAAMC,IAAOC,sBAAuB,EAAKmR,0BAJ7K,E,2DAQf3G,GACb,GAAK5K,KAAK+Q,YAAYS,aAAarR,IAAOC,qBAAqBG,IAA/D,CAGAP,KAAK4Q,QAAU,EACf,IAAMK,EAAiBjR,KAAKiR,eAAeQ,0BAA0B7G,EAAMkE,QAAQC,MAC7E2C,EAA2B1R,KAAKgR,UAAUW,4BAA4BxR,IAAOC,qBAAqBG,GAAIP,KAAK+Q,YAAYa,qBAAqBzR,IAAOC,qBAAqBG,KAC1KmR,GACF1R,KAAK+Q,YAAYc,eAAe1R,IAAOC,qBAAqBG,GAAImR,EAA2BT,M,+CAItErG,GACnB5K,KAAKC,kBAAkB4L,QAAQ1L,IAAO2R,wCAAwCvR,MAChFP,KAAK6Q,+BAAiCjG,EAAMmH,gBAAkB,EAAI,EAAIC,KAAoCpH,EAAMqH,MAChHjS,KAAK8Q,uCAAyCoB,O,kCAKhD,OACE,kBAACpG,EAAA,EAAD,CACEC,SAAUC,IAAgBC,SAAS,GACnCC,KAAK,YAEL,kBAACa,EAAA,EAAD,CAAsB7M,MAAOC,IAAOC,sBAClC,oCACGJ,KAAK4Q,OADR,IACgB,+BAAwB,IAAhB5Q,KAAK4Q,OAAe,QAAU,iB,GAnDtCjD,KAApBgD,GACGZ,aAAe,CACpBgB,YAAaoB,KACbnB,UAAWlR,IACXmR,eAAgBmB,MAuDLzB,U,UCrDT0B,G,kDAgBJ,WAAYrJ,GAAmB,IAAD,8BAC5B,cAAMA,IAZRsJ,uBAAiC,EAWH,EAV9BC,qBAA+B,EAUD,EAT9BC,kBAA4B,EASE,EAR9BC,WAAqB,EAQS,EAP9BC,MAAgB,EAOc,EAN9BC,WAAoB,EAAK1S,kBAAkBW,UAAUT,IAAO+B,gBAAgB3B,IAAMJ,IAAO+B,gBAAkB/B,IAAO6B,MAMpF,EAL9BiH,OAAiB,EAKa,EAJ9B2J,eAAyB,EAAK3S,kBAAkBW,UAAUT,IAAOyB,yBAAyBrB,IAAMJ,IAAOyB,yBAAyBrB,GAAKJ,IAAOwB,cAAcpB,GAI5H,EAFpBwQ,iBAEoB,EAG5B,EAAK/G,iBAAiBC,IAAOhB,OAAOiB,GAAGC,KAAiBjK,MAAM,EAAKyS,YAAa,EAAKE,UACrF,EAAK7I,iBAAiBC,IAAOK,KAAKJ,GAAGC,KAAiBjK,MAAM,EAAKyS,YAAa,EAAKpI,QAJvD,E,qDAoB5BvK,KAAK0S,OAAS,EACd1S,KAAKsS,uBAAyB,I,+BAGvB1H,GACP5K,KAAKyS,YAAc,EACnBzS,KAAKiJ,QAAU2B,EAAMG,QAAUH,EAAMI,UAAY,GAC7ChL,KAAKsS,yBAA2BQ,MAGpC9S,KAAKsS,wBAA0B,EAC3BtS,KAAK+Q,YAAYS,aAAaxR,KAAK4S,gBACrC5S,KAAK+S,cAAc/S,KAAK4S,gBAExB5S,KAAKwS,mBAAqBQ,O,oCAIhBnM,GACZ,GAAI7G,KAAK+Q,YAAYkC,kBAAkBpM,GAAWmM,IAAkB,CAClE,IAAMT,EAAuBvS,KAAK+Q,YAAYc,eAAehL,EAASmM,KACtEhT,KAAKuS,sBAAwBA,EAC7BvS,KAAKwS,mBAAsBQ,IAAmBT,OAE9CvS,KAAKuS,sBAAwBvS,KAAK+Q,YAAYc,eAAehL,EAASmM,O,kCAI9DxN,GAAa,IAAD,OAClBxF,KAAK0S,MAAQ,GAEflN,EAAKxF,KAAKkT,wBAAwBxN,eAAc,SAACC,EAASC,EAAQC,GAAlB,OAAkCF,EAAQ,8FAAyD,kBAACG,EAAA,EAAD,CAAWvF,GAAI,EAAKoS,WAAWpS,KAAxF,oDACvFwF,KAAK,EAAK4M,WAAW5M,MACrBH,OAAOI,OAAKC,EAAE,wHAAgEL,aAC9EC,YAH+E,WAG/DA,EAH+D,yB,kCAQpF,OAAI7F,KAAK0S,MAAQ,EAGb,kBAAC5G,EAAA,EAAD,CACEC,SAAUC,IAAgBC,SAAS,GACnCC,KAAK,YAEL,kBAACa,EAAA,EAAD,CAAsB7M,MAAOF,KAAK2S,YAChC,oCACE,kBAAC3F,EAAA,EAAD,CAAgBjC,OAAQ/K,KAAKiJ,SAC7B,6BACA,kBAACkK,GAAA,EAAD,CAAmBT,MAAO1S,KAAK0S,MAAOU,KAAMpT,KAAKyS,gBAMpD,O,6CApEP,MAAO,CACL7M,OAAQyB,QAAQrH,KAAKyS,WAAazS,KAAK0S,OAAOtG,QAAQ,IACtDhG,WAAY,CACVC,MAAO,EACPC,QAAS,EACTC,MAAO,GAETC,MAAOC,IAAe4M,a,GA/BA1F,KAAtB0E,GACGtC,aAAe,CACpBgB,YAAaoB,MA8FFE,U,oBClGTiB,G,kDAwBJ,WAAYtK,GAAmB,IAAD,8BAC5B,cAAMA,IAnBRuK,OAAiB,EAkBa,EAjB9BC,QAAkB,EAiBY,EAd9BC,oBAAkF,GAcpD,EAb9BC,mBAA6B,EAaC,EAV9BhB,MAAgB,EAUc,EAT9BiB,YAAsB,EASQ,EAR9BC,eAAyB,EAQK,EAL9BC,mBAA6B,EAKC,EAJ9BC,gBAA0B,EAII,EAFpBC,aAEoB,EAG5B,EAAKP,OAAS,EAAKvT,kBAAkBW,UAAUT,IAAOwI,qBAAqBpI,IAC3E,EAAKgT,MAAQ,EAAKtT,kBAAkBW,UAAUT,IAAO6T,oBAAoBzT,IAEzE,EAAKyJ,iBAAiBC,IAAOK,KAAKJ,GAAGC,KAAiBjK,MAAMC,IAAO2B,kBAAmB,EAAKyI,QAC3F,EAAKP,iBAAiBC,IAAOhB,OAAOiB,GAAGC,KAAiBjK,MAAMC,IAAO2B,kBAAmB,EAAK+Q,UAC7F,EAAK7I,iBAAiBC,IAAOgK,YAAY/J,GAAGC,KAAiBjK,MAAMC,IAAO2B,kBAAmB,EAAKoS,eAClG,EAAKlK,iBAAiBC,IAAOkK,aAAajK,GAAGC,KAAiBjK,MAAMC,IAAO2B,kBAAmB,EAAKsS,gBACnG,EAAKpK,iBAAiBC,IAAOoK,cAAcnK,GAAGC,KAAiBjK,MAAMC,IAAO2B,kBAAmB,EAAKwS,iBAVxE,E,mDAiFvB1J,GACL5K,KAAK0S,OAAS,OAEKjH,IAAfb,EAAMc,OACRd,EAAMc,KAAO,CACX6I,mBAAmB,EACnB5I,gBAAgB,EAChB6I,sBAAuB,GACvB5I,mBAAoB,KAGpB5L,KAAKC,kBAAkB4L,QAAQ1L,IAAO4B,kBAAkBxB,MAC1DP,KAAK0T,mBAAoB,EACzB9I,EAAMc,KAAKC,gBAAiB,EAC5Bf,EAAMc,KAAKE,mBAAqB,+BAE9B5L,KAAKyU,uBACP7J,EAAMc,KAAK6I,mBAAoB,EAC/B3J,EAAMc,KAAK8I,sBAAwB,oF,+BAI9B5J,GACP5K,KAAK2T,aAAe/I,EAAMG,QAAUH,EAAMI,UAAY,K,oCAG1CJ,GACZ,IAAIgE,EAAiBhE,EAAMgE,oBACJnD,IAAnBmD,IACFA,EAAiB,GAEnB,IAAM8F,EAA0BhG,YAAmB9D,EAAM+D,SAAUC,GACnE5O,KAAKyT,oBAAoBiB,GAAsB,CAAE7J,UAAWD,EAAMC,UAAW8J,qBAAsBC,KAC/F5U,KAAK0T,oBACP1T,KAAK0T,mBAAoB,K,qCAId9I,GACb,IAAIgE,EAAiBhE,EAAMgE,oBACJnD,IAAnBmD,IACFA,EAAiB,GAEnB,IAAM8F,EAA0BhG,YAAmB9D,EAAM+D,SAAUC,GACnE5O,KAAKyT,oBAAoBoB,OAAOH,EAAoB,K,sCAGtC9J,GACd,IAAIgE,EAAiBhE,EAAMgE,oBACJnD,IAAnBmD,IACFA,EAAiB,GAEnB,IAAM8F,EAA0BhG,YAAmB9D,EAAM+D,SAAUC,GACnE5O,KAAK4T,gBAAkB,EAEvB,IAAMkB,EAAgB9U,KAAKyT,oBAAoBiB,GAAoBC,sBAAwB/J,EAAMC,UAAY7K,KAAKyT,oBAAoBiB,GAAoB7J,WAC1J,GAAIiK,EAAiBF,IAAiCG,IACpD/U,KAAK6T,oBAAsB,MACtB,CACL,IAAMmB,EAA+BC,KAAKC,IAAIN,IAAiCG,IAA2BD,GAAiBF,IAC3H5U,KAAKyT,oBAAoBiB,GAAoB7J,UAAYD,EAAMC,UAC/D7K,KAAKyT,oBAAoBiB,GAAoBC,qBAAuBK,EAElEhV,KAAKwT,QAAUxT,KAAKC,kBAAkB4L,QAAQ1L,IAAOgC,oBAAoB5B,MACvEP,KAAK0T,kBACP1T,KAAK0T,mBAAoB,EAEzB1T,KAAK8T,iBAAmB,K,kCAKlBtO,GACV,GAAIxF,KAAKwT,OAAQ,CACf,IAAM2B,EAAiBnV,KAAKuT,MAC1B,wEAAmC,kBAACzN,EAAA,EAAD,CAAWvF,GAAIJ,IAAO2B,iBAAiBvB,KAA1E,mDAAgI,kBAACuF,EAAA,EAAD,CAAWvF,GAAIJ,IAAOgC,oBAAoB5B,KAA1K,2BAAwM,kBAACuF,EAAA,EAAD,CAAWvF,GAAIJ,IAAO6T,oBAAoBzT,KAAlP,WACA,4CAAO,kBAACuF,EAAA,EAAD,CAAWvF,GAAIJ,IAAOwI,qBAAqBpI,KAAlD,yBAA8E,kBAACuF,EAAA,EAAD,CAAWvF,GAAIJ,IAAO6T,oBAAoBzT,KAAxH,qCAAgK,kBAACuF,EAAA,EAAD,CAAWvF,GAAIJ,IAAO2B,iBAAiBvB,KAAvM,WAAqN,kBAACuF,EAAA,EAAD,CAAWvF,GAAIJ,IAAOgC,oBAAoB5B,KAA/P,wEAA0U,kBAACuF,EAAA,EAAD,CAAWvF,GAAIJ,IAAO2B,iBAAiBvB,KAAjX,mCAEFiF,EAAKxF,KAAKoV,oBAAoB1P,eAAc,SAACC,EAASC,EAAQC,GAAlB,OAAkCF,EAAQwP,GACnFpP,KAAK5F,IAAO2B,iBAAiBiE,MAC7BH,OAAOI,OAAKC,EAAE,6GAA+DC,YAAiBN,OAC9FC,YAH2E,WAG3DK,YAAiBL,GAH0C,6BAK9EL,EAAKxF,KAAKqV,uBAAuB3P,eAAc,SAACC,EAASC,EAAQC,GAAlB,OAAkCF,EAAQ,gEAA2B,kBAACG,EAAA,EAAD,CAAWvF,GAAIJ,IAAO2B,iBAAiBvB,KAAlE,qEAA2I2F,YAAiB6O,IAA2B,GAAvL,0BACtFhP,KAAK5F,IAAO2B,iBAAiBiE,MAC7BH,OAAOI,OAAKC,EAAE,qGAAuDC,YAAiBN,OACtFC,YAH8E,WAG9DK,YAAiBL,GAH6C,wBAMnFL,EAAKxF,KAAKsV,sBAAsB5P,eAAc,SAACC,EAASC,EAAQC,GAAlB,OAAkCF,EAAQ,wEAAmC,kBAACG,EAAA,EAAD,CAAWvF,GAAIJ,IAAO2B,iBAAiBvB,KAA1E,yCAAuH2F,YAAiB6O,IAA2B,GAAnK,kCACrFhP,KAAK5F,IAAO2B,iBAAiBiE,MAC7BH,OAAOI,OAAKC,EAAE,8HAAyDL,aACvEC,YAH6E,WAG7DA,EAH6D,yB,kCAOhF,OACE,kBAACiG,EAAA,EAAD,CACEC,SAAUC,IAAgBC,SAAS,GACnCC,KAAK,WACLC,QACE,oCACE,4BACE,iEAAuCnM,KAAK0S,MAA5C,WACA,wDAA8B1S,KAAK4T,eAAnC,WACC5T,KAAK8T,gBAAkB9T,KAAK6T,mBAAqB,GAClD,4BACG7T,KAAK6T,mBAAqB,GAAK,uCAAa7T,KAAK6T,mBAAlB,kFAAqH3N,YAAiB6O,IAA2B,GAAjK,uEAC/B/U,KAAKwT,QAAUxT,KAAKuT,OAASvT,KAAK8T,gBAAkB,GAAK,yHAA+F5N,YAAiB6O,IAA2B,GAA3I,gGAA4O/U,KAAK8T,gBAAjP,WACzD9T,KAAKwT,SAAWxT,KAAKuT,OAASvT,KAAK8T,gBAAkB,GAAK,qLAA2J9T,KAAK8T,gBAAhK,eAMnE,kBAAC/G,EAAA,EAAD,CAAsB7M,MAAOC,IAAO2B,kBAClC,oCACE,kBAACkL,EAAA,EAAD,CAAgBjC,OAAQ/K,KAAK2T,cAC7B,6BACA,kBAAC4B,GAAA,EAAD,MAHF,IAGkBrP,YAAiBlG,KAAKwV,kBAHxC,KAG4D,8C,uCA1LlE,OAAOxV,KAAK+T,QAAQ0B,cAActV,IAAO2B,iBAAiBvB,IAAMP,KAAK0V,MAAMC,gB,2CAI3E,MAAO,CACL/P,OAAQ5F,KAAK6T,mBACb+B,cAAe,CACbvP,MAAO,EACPC,QAAS,EACTC,MAAO,GAETC,MAAOC,IAAegH,U,+CAKxB,MAAO,CACL7H,OAAQ5F,KAAK8T,gBACb8B,cAAe,CACbvP,MAAO,EACPC,QAAS,EACTC,MAAO,GAETC,MAAOC,IAAegH,U,yCAKxB,OAAIzN,KAAKuT,MACA,CACL3N,OAAQ5F,KAAKwV,iBACbpP,WAAY,CACVC,MAAO,GACPC,QAAS,IACTC,MAAO,IAETC,MAAOC,IAAeC,YAGjB,CACLd,OAAQ5F,KAAKwV,iBACbI,cAAe,CACbvP,MAAO,GACPC,QAAS,IACTC,MAAO,IAETC,MAAOC,IAAeC,c,4CAM1B,MAAO,CACLd,OAAQ5F,KAAKwV,iBACbpP,WAAY,CACVC,MAAO,IACPC,QAAS,GACTC,MAAO,KAETC,MAAOC,IAAeC,c,2CAKxB,OAAO1G,KAAKwT,QAAUxT,KAAKC,kBAAkB4L,QAAQ1L,IAAOgC,oBAAoB5B,OAASP,KAAKuT,QAAUvT,KAAK0T,uB,GAtGtF/F,KAArB2F,GACGvD,aAAe,CACpBgE,QAAS8B,MAsOEvC,U,UC1OTwC,G,kDAUJ,WAAY9M,GAAmB,IAAD,8BAC5B,cAAMA,IANR+M,aAAe,EAKe,EAJ9BC,UAAY,EAIkB,EAFpBjF,iBAEoB,EAG5B,EAAK/G,iBAAiBC,IAAOhB,OAAOiB,GAAGC,KAAkB,EAAKmE,gBAC9D,EAAKtE,iBAAiBC,IAAOhB,OAAOiB,GAAGkE,KAAsB,EAAKC,aAJtC,E,wDAelBzD,GACL5K,KAAKC,kBAAkB4L,QAAQ1L,IAAOgC,oBAAoB5B,MAG/DP,KAAKgW,WAAaC,aAAyBrL,EAAOsL,Q,qCAGrCtL,GACR5K,KAAKC,kBAAkB4L,QAAQ1L,IAAOgC,oBAAoB5B,MAG/DP,KAAK+V,cAAgBE,aAAyBrL,EAAOsL,Q,kCAIrD,OACE,kBAACpK,EAAA,EAAD,CACEC,SAAUC,IAAgBC,SAAS,GACnCC,KAAK,WACLC,QACE,uHACmFnM,KAAKC,kBAAkBwV,cAActV,IAAOgC,oBAAoB5B,IAAM,KAAM6L,QAAQ,GADvK,YAEE,6BAFF,0BAIE,4BACE,8CAAoBlG,YAAiBlG,KAAK0V,MAAMS,+BAA+BnW,KAAK+V,eAApF,OAAwG5I,YAAanN,KAAK+V,cAAgB/V,KAAK0V,MAAMC,cAAgB,MAArK,QACA,2CAAiBzP,YAAiBlG,KAAK0V,MAAMS,+BAA+BnW,KAAKgW,YAAjF,OAAkG7I,YAAanN,KAAKgW,WAAahW,KAAK0V,MAAMC,cAAgB,MAA5J,WAKN,kBAAC5I,EAAA,EAAD,CAAsB7M,MAAOC,IAAOgC,qBAClC,oCACE,kBAAC6K,EAAA,EAAD,CAAgBjC,OAAQ/K,KAAKoW,cAC7B,6BACA,kBAACb,GAAA,EAAD,MAHF,IAGkBrP,YAAiBlG,KAAKqW,eAHxC,KAGyD,8C,kCA1C/D,OAAOrW,KAAK+V,aAAe/V,KAAKgW,Y,oCAIhC,OAAOhW,KAAKC,kBAAkBwV,cAActV,IAAOgC,oBAAoB5B,IAAMP,KAAK0V,MAAMC,kB,GAtB3DhI,KAA3BmI,GACG/F,aAAe,CACpBgB,YAAaoB,MAkEF2D,U,UChETQ,G,kDAoBJ,WAAYtN,GAAmB,IAAD,8BAC5B,cAAMA,IAbRuN,0BAA2B,EAYG,EAX9BC,WAAa,EAWiB,EAV9BC,aAAe,EAUe,EAT9BC,YAAc,EASgB,EAR9BhE,MAAQ,EAQsB,EAP9BD,WAAa,EAOiB,EALpBsB,aAKoB,IAJpBhD,iBAIoB,IAHpB4F,iBAGoB,IAFpB1F,oBAEoB,EAG5B,EAAKvH,QAAU,EAAKzJ,kBAAkBW,UAAUT,IAAOyB,yBAAyBrB,IAEhF,EAAKyJ,iBAAiBC,IAAOK,KAAKJ,GAAGC,KAAiBjK,MAAMC,IAAOwB,eAAgB,EAAK4I,QACxF,EAAKP,iBAAiBC,IAAOhB,OAAOiB,GAAGC,KAAiBjK,MAAMC,IAAOyW,sBAAuB,EAAK/D,UANrE,E,mDAyCvBjI,GACL5K,KAAK0S,OAAS,EACd1S,KAAKwW,WAAaxW,KAAKiR,eAAeQ,0BAA0B7G,EAAMkE,QAAQC,QACzE/O,KAAK+Q,YAAYS,aAAarR,IAAOwB,cAAcpB,KAAOP,KAAK+Q,YAAYkC,kBAAkB9S,IAAOwB,cAAcpB,IAAMsW,IAA8B7W,KAAKwW,cAC9JxW,KAAKuW,0BAA2B,K,+BAI3B3L,GACY,IAAf5K,KAAK0S,QACP1S,KAAK0S,OAAS,EACd1S,KAAK+Q,YAAY+F,cAAc3W,IAAOwB,cAAcpB,GAAIqK,IAE1D5K,KAAKyS,YAAc,EACnB,IAAMsE,EAAQ/W,KAAK+T,QAAQiD,UAAUpM,IACjC5K,KAAKuW,0BAA6BQ,GAGlCA,EAAMlL,QAAQ1L,IAAO8W,kBAAkB1W,KAAOqK,EAAMC,UAAY7K,KAAK0W,YAAc7H,MACrF7O,KAAKyW,cAAgB,EACrBzW,KAAK0W,YAAc9L,EAAMC,a,kCAIjBrF,GACVA,EAAKxF,KAAKkX,kBAAkBxR,eAAc,SAACC,EAASC,EAAQC,GAAlB,OAAkCF,EAAQ,6DAAwB,kBAACG,EAAA,EAAD,CAAWvF,GAAIJ,IAAOwB,cAAcpB,KAA5D,iIACjFwF,KAAK5F,IAAOwB,cAAcoE,MAC1BH,OAAOI,OAAKC,EAAE,iIAAoEL,aAClFC,YAHyE,WAGzDA,EAHyD,uBAI5EL,EAAKxF,KAAKmX,kBAAkBzR,eAAc,SAACC,EAASC,EAAQC,GAAlB,OAAkCF,EAAQ,uEAAkC,kBAACG,EAAA,EAAD,CAAWvF,GAAIJ,IAAOwB,cAAcpB,KAAtE,gGACjFwF,KAAK5F,IAAOwB,cAAcoE,MAC1BH,OAAOI,OAAKC,EAAE,uFAAuDC,YAAiBN,OACtFC,YAHyE,WAGzDK,YAAiBL,GAHwC,0B,kCAO5E,OACE,kBAACiG,EAAA,EAAD,CACEC,SAAUC,IAAgBC,SAAS,GACnCC,KAAK,WACL1L,SAAUqM,IAAmBuK,SAE7B,kBAACrK,EAAA,EAAD,CAAsB7M,MAAOC,IAAOwB,eAClC,oCACG3B,KAAKqX,kBAAkBjL,QAAQ,GADlC,IACsC,sDACpC,6BACClG,YAAiBlG,KAAKwV,kBAHzB,KAG6C,mD,uCA7EnD,OAAOxV,KAAK+T,QAAQ0B,cAActV,IAAO8W,kBAAkB1W,IAAMP,KAAK0V,MAAMC,gB,uCAI5E,MAAO,CACL/P,OAAQ5F,KAAKyW,aACbb,cAAe,CACbvP,MAAO,EACPC,QAAS,EACTC,MAAO,GAETC,MAAOC,IAAegH,U,uCAKxB,MAAO,CACL7H,OAAQ5F,KAAKwV,iBACbpP,WAAY,CACVC,MAAO,GACPC,QAAS,IACTC,MAAO,IAETC,MAAOC,IAAeC,c,wCAKxB,OAAO1G,KAAKyS,WAAazS,KAAK0S,U,GA1DP/E,KAArB2I,GACGvG,aAAe,CACpBgE,QAAS8B,KACT9E,YAAaoB,KACbwE,YAAaW,KACbrG,eAAgBmB,MA8GLkE,UC7GAiB,G,kDArBb,WAAYvO,GAAmB,IAAD,8BAC5B,cAAMA,IAEDU,QAAU,EAAKzJ,kBAAkBW,UAAUT,IAAOuB,qBAAqBnB,KAAO,EAAKN,kBAAkBW,UAAUT,IAAO6T,oBAAoBzT,IAC/I,EAAKyJ,iBAAiBC,IAAOK,KAAKJ,GAAGC,KAAiBjK,MAAMC,IAAOoB,eAAgB,EAAKgJ,QAJ5D,E,mDAOvBK,QACca,IAAfb,EAAMc,OACRd,EAAMc,KAAO,CACX6I,mBAAmB,EACnBC,sBAAuB,KAGvBxU,KAAKC,kBAAkB4L,QAAQ1L,IAAO4B,kBAAkBxB,MAC1DqK,EAAMc,KAAK6I,mBAAoB,EAC/B3J,EAAMc,KAAK8I,sBAAwB,wC,GAlBd7G,K,wCCMZ6J,G,iLAVX,OADkBC,M,2CAMlB,OADYC,Q,UARsBC,G,UCMhCC,G,4MAKMC,kB,4DAEErS,GACVsS,aAAgBtS,EAAMxF,KAAK6X,aAAc,CACvC3X,MAAOC,IAAOC,qBACdiG,MAAO,KACP0R,IAAK,IACLxR,MAAO,GACPyR,gBAAiB,4EAAuC,kBAAClS,EAAA,EAAD,CAAWvF,GAAIJ,IAAO2B,iBAAiBvB,KAA9E,KAAsF,kBAACuF,EAAA,EAAD,CAAWvF,GAAIJ,IAAOuB,qBAAqBnB,KAAjI,OAA2I,kBAACuF,EAAA,EAAD,CAAWvF,GAAIJ,IAAOoB,cAAchB,KAA/K,W,GAbHoN,KAAdiK,GACG7H,aAAe,CACpB8H,aAAcI,MAgBHL,I,GAAAA,M,SCtBTM,G,mIAA2BC,GAA3BD,GAEGE,uB,YACFC,KAHDH,GAMGI,mC,sBACJnY,IAAOkC,0BAA0B9B,GAAKJ,IAAOuB,sB,gBAC7CvB,IAAOqB,mBAAmBjB,GAAKJ,IAAOoB,e,IAI5B2W,U,8BCKTK,G,kDAkBJ,WAAYvP,GAAmB,IAAD,8BAC5B,cAAMA,IAbRwP,oBAAqB,EAYS,EAX9B7E,YAAc,EAWgB,EAV9B8E,MAAQ,EAUsB,EAT9BC,kBAAoB,EASU,EAR9BC,8BAAgC,EAQF,EAP9BnC,WAAa,EAOiB,EAN9BoC,YAAc,EAMgB,EAL9BjG,WAAaxS,IAAOoB,cAKU,EAHpBoV,iBAGoB,IAFpB1F,oBAEoB,EAG5B,EAAKvH,OAAS,EAAKzJ,kBAAkBW,UAAUT,IAAO6T,oBAAoBzT,IAEtE,EAAKmJ,QAAU,EAAKzJ,kBAAkBW,UAAUT,IAAOuB,qBAAqBnB,MAC9E,EAAKoS,WAAaxS,IAAOuB,sBAG3B,EAAKsI,iBAAiBC,IAAOK,KAAKJ,GAAGC,KAAiBjK,MAAMC,IAAO2B,kBAAmB,EAAKyI,QAC3F,EAAKP,iBAAiBC,IAAOhB,OAAOiB,GAAGC,KAAiBjK,MAAMC,IAAO2B,kBAAmB,EAAK+Q,UAC7F,EAAK7I,iBAAiBC,IAAOO,UAAUN,GAAGC,KAAiBjK,MAAMC,IAAO4B,mBAAoB,EAAK8W,aACjG,EAAK7O,iBAAiBC,IAAO6O,YAAY5O,GAAGC,KAAiBjK,MAAMC,IAAO4B,mBAAoB,EAAKgX,eAZvE,E,mDAmBvBnO,GACA5K,KAAKC,kBAAkB4L,QAAQ1L,IAAO4B,kBAAkBxB,MAG7DP,KAAKwY,oBAAqB,EAC1BxY,KAAKwW,WAAaxW,KAAKiR,eAAeQ,0BAA0B7G,EAAMkE,QAAQC,MAC9E/O,KAAK2Y,+BAAiC/N,EAAMC,UAAY7K,KAAK0Y,kBAAoB1Y,KAAKwW,c,+BAG/E5L,GACH5K,KAAKwY,qBACPxY,KAAK2T,aAAesC,aAAyBrL,EAAOoO,KACpDhZ,KAAKwY,oBAAqB,K,kCAIlB5N,GACV5K,KAAKyY,OAAS,EACdzY,KAAK0Y,kBAAoB9N,EAAMC,Y,sCAI/B7K,KAAK4Y,aAAe,I,kCAIpB,OACE,kBAAC9M,EAAA,EAAD,CACEC,SAAUC,IAAgBC,SAAS,GACnCC,KAAK,WACLC,QACE,oCACE,4BACE,gGAAqE,2BAAInM,KAAKiZ,+BAA+B7M,QAAQ,IAArH,iDAA2KpM,KAAK2S,WAAW7K,KAA3L,2BACG9H,KAAK4Y,YAAc,GAAK,0CAAgB5Y,KAAK4Y,YAArB,+EAKjCpY,SAAUqM,IAAmBC,SAE7B,kBAACC,EAAA,EAAD,CAAsB7M,MAAOC,IAAO6T,qBAClC,oCACE,kBAAChH,EAAA,EAAD,CAAgBjC,OAAQ/K,KAAK2T,cAAe,6BAC3C3T,KAAKyY,MAFR,MAEkBzY,KAAK4Y,YAAc5Y,KAAKyY,MAF1C,IAEiD,kD,qDA/CvD,OAAOzY,KAAK2Y,8BAAgC3Y,KAAKyY,MAAQ,Q,GAlCnC9K,KAApB4K,GACGxI,aAAe,CACpB4G,YAAaW,KACbrG,eAAgBmB,MAsFLmG,UC3DAW,G,kDA9Bb,WAAYlQ,GAAmB,IAAD,8BAC5B,cAAMA,IAHRC,OAAS,EAKP,EAAKS,OAAS,EAAKzJ,kBAAkBW,UAAUT,IAAO0B,yBAAyBtB,IAE/E,EAAKyJ,iBAAiBC,IAAOhB,OAAOiB,GAAGC,KAAiBjK,MAAMiZ,KAAgC,EAAKtG,UALvE,E,qDAQrBjI,GACP5K,KAAKiJ,QAAUgN,aAAyBrL,EAAOwO,O,kCAI/C,OACE,kBAACtN,EAAA,EAAD,CACEC,SAAUC,IAAgBC,SAAS,GACnCC,KAAK,WACL1L,SAAUqM,IAAmBC,SAE7B,kBAACC,EAAA,EAAD,CAAsB7M,MAAOC,IAAO0B,0BAClC,oCACE,kBAACmL,EAAA,EAAD,CAAgBjC,OAAQ/K,KAAKiJ,gB,GAzBV0E,KCIzB0L,G,kDAWJ,WAAYrQ,GAAmB,IAAD,8BAC5B,cAAMA,IANRC,OAAS,EAKqB,EAJ9ByJ,MAAQ,EAIsB,EAFpB3B,iBAEoB,EAG5B,EAAKrH,OAAS,EAAKzJ,kBAAkBW,UAAUT,IAAOoC,kBAAkBhC,IAExE,EAAKyJ,iBAAiBC,IAAOK,KAAKJ,GAAGC,KAAiBjK,MAAMC,IAAOoC,mBAAoB,EAAKgI,QAC5F,EAAKP,iBAAiBC,IAAOhB,OAAOiB,GAAGC,KAAiBjK,MAAMC,IAAOmZ,mBAAoB,EAAKzG,UANlE,E,qDAU5B7S,KAAK0S,OAAS,I,+BAGP9H,GACY,IAAf5K,KAAK0S,QACP1S,KAAK0S,OAAS,EACd1S,KAAK+Q,YAAY+F,cAAc3W,IAAOoC,kBAAkBhC,GAAIqK,IAE9D5K,KAAKiJ,QAAU2B,EAAMG,QAAUH,EAAMI,UAAY,K,kCAIjD,OACE,kBAACc,EAAA,EAAD,CACEC,SAAUC,IAAgBC,SAAS,GACnCC,KAAK,WACL1L,SAAUqM,IAAmBC,SAE7B,kBAACC,EAAA,EAAD,CAAsB7M,MAAOC,IAAOoC,mBAClC,oCACE,kBAACyK,EAAA,EAAD,CAAgBjC,OAAQ/K,KAAKiJ,gB,GAzCjB0E,KAAlB0L,GAEGtJ,aAAe,CACpBgB,YAAaoB,MA8CFkH,UCjDTE,G,kDASJ,WAAYvQ,GAAmB,IAAD,8BAC5B,cAAMA,IANR0J,MAAQ,EAKsB,EAJ9BD,WAAa,EAIiB,EAH9B+G,cAA0B,GAGI,EAFpBzI,iBAEoB,EAG5B,EAAKrH,OAAS,EAAKzJ,kBAAkBW,UAAUT,IAAO2C,gBAAgBvC,IAEtE,EAAKyJ,iBAAiBC,IAAOK,KAAKJ,GAAGC,KAAiBjK,MAAMC,IAAO2C,iBAAkB,EAAKyH,QAC1F,EAAKP,iBAAiBC,IAAOhB,OAAOiB,GAAGC,KAAiBjK,MAAMuZ,KAAyB,EAAK5G,UANhE,E,qDAU5B7S,KAAKwZ,cAAgB,GACrBxZ,KAAK0S,OAAS,I,+BAGP9H,GACY,IAAf5K,KAAK0S,QACP1S,KAAK0S,OAAS,EACd1S,KAAK+Q,YAAY+F,cAAc3W,IAAO2C,gBAAgBvC,GAAIqK,IAE5D,IAAM8O,EAAuBhL,YAAmB9D,EAAM+D,SAAU/D,EAAMgE,gBACjE5O,KAAKwZ,cAActK,SAASwK,KAC/B1Z,KAAKyS,YAAc,EACnBzS,KAAKwZ,cAAcxK,KAAK0K,M,kCAK1B,OACE,kBAAC5N,EAAA,EAAD,CACEC,SAAUC,IAAgBC,SAAS,IACnCC,KAAK,WACL1L,SAAUqM,IAAmBC,SAE7B,kBAACC,EAAA,EAAD,CAAsB7M,MAAOC,IAAO2C,iBAClC,oCACE,kBAACqQ,GAAA,EAAD,CAAmBT,MAAO1S,KAAK0S,MAAOU,KAAMpT,KAAKyS,WAAYkH,QAAM,W,GA5CxDhM,KAAjB4L,GACGxJ,aAAe,CACpBgB,YAAaoB,MAkDFoH,U,oBClDTK,G,kDAaJ,WAAY5Q,GAAmB,IAAD,8BAC5B,cAAMA,IATRC,OAAS,EAQqB,EAP9ByJ,MAAQ,EAOsB,EAN9BmH,gBAAkB,EAMY,EAL9BC,YAAc,EAKgB,EAJ9BlJ,OAAS,EAIqB,EAFpBmD,aAEoB,EAG5B,EAAKrK,OAAS,EAAKzJ,kBAAkBW,UAAUT,IAAOyB,yBAAyBrB,IAE/E,EAAKyJ,iBAAiBC,IAAOhB,OAAOiB,GAAGkE,KAAqBlO,MAAMC,IAAO4Z,wBAAyB,EAAK1L,aACvG,EAAKrE,iBAAiBC,IAAOhB,OAAOiB,GAAGC,KAAiBjK,MAAM,CAACC,IAAO6Z,uBAAwB7Z,IAAO8Z,4BAA6B,EAAK3L,gBACvI,EAAKtE,iBAAiBC,IAAOK,KAAKJ,GAAGC,KAAiBjK,MAAMC,IAAOwC,oBAAqB,EAAKuX,YAC7F,EAAKlQ,iBAAiBC,IAAOK,KAAKJ,GAAGC,KAAiBjK,MAAMC,IAAOC,sBAAuB,EAAK+Z,mBARnE,E,wDAWlBvP,GACV,IAAMmM,EAAQ/W,KAAK+T,QAAQiD,UAAUpM,GAChCmM,GAAUA,EAAMlL,QAAQ1L,IAAO6Z,uBAAuBzZ,KAGvDqK,EAAMC,UAAa7K,KAAK6Z,gBAAkBhL,MAC5C7O,KAAK8Z,aAAe5H,IACpBlS,KAAK4Q,QAAU,K,qCAIJhG,GACb5K,KAAKiJ,QAAU2B,EAAMG,QAAUH,EAAMI,UAAY,K,mCAIjDhL,KAAK0S,OAAS,I,wCAGE9H,GAChB5K,KAAK6Z,gBAAkBjP,EAAMC,Y,kCAI7B,OACE,kBAACiB,EAAA,EAAD,CACEC,SAAUC,IAAgBC,SAAS,GACnCC,KAAK,WACL1L,SAAUqM,IAAmBC,QAC7BR,SACE,oCACE,2BAAOC,UAAU,yBACf,+BACE,4BACE,8CACA,4CACA,4CAGJ,+BACE,4BACE,6BAAMvM,KAAK4Q,OAAS5Q,KAAK0S,OAAOtG,QAAQ,IACxC,4BAAKpM,KAAK4Q,QACV,4BAAK5Q,KAAK8Z,kBAOpB,kBAAC/M,EAAA,EAAD,CAAsB7M,MAAOC,IAAOwC,oBAClC,oCACE,kBAACqK,EAAA,EAAD,CAAgBjC,OAAQ/K,KAAKiJ,gB,GA5Eb0E,KAAtBiM,GACG7J,aAAe,CACpBgE,QAAS8B,MAkFE+D,UCrFTQ,G,kDAYJ,WAAYpR,GAAmB,IAAD,8BAC5B,cAAMA,IARRC,OAAS,EAOqB,EAN9BoR,YAAc,EAMgB,EAL9BC,OAAS,EAKqB,EAJ9BC,aAAe,EAIe,EAFpBxG,aAEoB,EAG5B,EAAKrK,OAAS,EAAKzJ,kBAAkBW,UAAUT,IAAOyB,yBAAyBrB,IAE/E,EAAKyJ,iBAAiBC,IAAOhB,OAAOiB,GAAGC,KAAiBjK,MAAM,CAACC,IAAOqa,sBAAuBra,IAAOsa,yBAA0Bta,IAAOua,uBAAwB,EAAK7H,UAClK,EAAK7I,iBAAiBC,IAAOgK,YAAY/J,GAAGC,KAAiBjK,MAAMC,IAAOua,sBAAuB,EAAKC,qBACtG,EAAK3Q,iBAAiBC,IAAO2Q,iBAAiB1Q,GAAGC,KAAiBjK,MAAMC,IAAOua,sBAAuB,EAAKC,qBAP/E,E,qDAUrB/P,GACHA,EAAMkE,QAAQC,OAAS5O,IAAOua,qBAAqBna,KACrDP,KAAKqa,aAAezP,EAAMG,QAAUH,EAAMI,UAAY,IAExDhL,KAAKiJ,QAAU2B,EAAMG,QAAUH,EAAMI,UAAY,K,0CAG/BJ,GACdA,EAAMM,OAASC,IAAU0P,cAC3B7a,KAAKua,cAAgB,GAEvBva,KAAKsa,QAAU,I,kCAIf,OACE,kBAACxO,EAAA,EAAD,CACEC,SAAUC,IAAgBC,SAAS,GACnCC,KAAK,WACL1L,SAAUqM,IAAmBC,QAC7BR,SACE,oCACE,2BAAOC,UAAU,yBACf,+BACE,4BACE,8CACA,4CACA,8CAGJ,+BACE,4BACE,6BAAMvM,KAAKsa,OAASta,KAAKua,cAAcnO,QAAQ,IAC/C,4BAAKpM,KAAKsa,QACV,4BAAKnN,YAAanN,KAAKqa,aAAera,KAAK0V,MAAMC,cAAgB,MAAjE,aAOV,kBAAC5I,EAAA,EAAD,CAAsB7M,MAAOC,IAAOyC,mBAClC,oCACE,kBAACoK,EAAA,EAAD,CAAgBjC,OAAQ/K,KAAKiJ,gB,GAjEd0E,KAArByM,GACGrK,aAAe,CACpBgE,QAAS8B,MAuEEuE,UClETU,G,kDA2BJ,WAAY9R,GAAmB,IAAD,8BAC5B,cAAMA,IAtBRC,OAAS,EAqBqB,EApB9ByJ,MAAQ,EAoBsB,EAnB9BqI,sBAAwB,EAmBM,EAlB9BC,aAAe,EAkBe,EAjB9BC,WAAa,EAiBiB,EAhB9BC,oBAAsB,EAgBQ,EAf9BC,oBAAoJ,GAetH,EAHpBpH,aAGoB,IAFpB4C,iBAEoB,EAG5B,EAAKjN,OAAS,EAAKzJ,kBAAkBW,UAAUT,IAAOyB,yBAAyBrB,IAE/E,EAAKyJ,iBAAiBC,IAAOgK,YAAY/J,GAAGC,KAAiBjK,MAAMC,IAAO2B,kBAAmB,EAAKsZ,qBAClG,EAAKpR,iBAAiBC,IAAOoK,cAAcnK,GAAGC,KAAiBjK,MAAMC,IAAO2B,kBAAmB,EAAKsZ,qBACpG,EAAKpR,iBAAiBC,IAAOkK,aAAajK,GAAGC,KAAiBjK,MAAMC,IAAO2B,kBAAmB,EAAKuZ,iBACnG,EAAKrR,iBAAiBC,IAAOgK,YAAY/J,GAAGC,KAAiBjK,MAAMC,IAAOmb,uBAAwB,EAAKC,0BACvG,EAAKvR,iBAAiBC,IAAOK,KAAKJ,GAAGC,KAAiBjK,MAAMC,IAAOuC,mBAAoB,EAAKwX,YAC5F,EAAKlQ,iBAAiBC,IAAOhB,OAAOiB,GAAGC,KAAiBjK,MAAM,CAACC,IAAOmb,sBAAuBnb,IAAOqb,2BAA4B,EAAKC,cAVzG,E,gEAyBV7Q,GAClB,IAAMmM,EAAQ/W,KAAK+T,QAAQiD,UAAUpM,GACrC,GAAKmM,EAAL,CAGA,IAAM9O,EAASyG,YAAmB9D,EAAM+D,SAAU/D,EAAMgE,gBAClD8M,EAA6B9G,KAAkC,EAAI5U,KAAK2W,YAAYgF,wBAC1F3b,KAAKmb,oBAAoBlT,GAAU,CACjC2T,WAAY7E,EAAMjP,KAClBwC,KAAMM,EAAMC,UACZgR,YAAajR,EAAMC,UAAY6Q,EAC/BI,YAAa,EACbC,kBAAmB,M,+CAIEnR,GAEvB,GADc5K,KAAK+T,QAAQiD,UAAUpM,GACrC,CAGA,IAAM3C,EAASyG,YAAmB9D,EAAM+D,SAAU/D,EAAMgE,gBACpD5O,KAAKmb,oBAAoBlT,IAC3BjI,KAAKmb,oBAAoBlT,GAAQ6T,YAAclR,EAAMC,UACrD7K,KAAKmb,oBAAoBlT,GAAQ8T,kBAAoBnR,EAAMC,WAAa7K,KAAKmb,oBAAoBlT,GAAQ4T,YAAc7b,KAAKmb,oBAAoBlT,GAAQqC,MAExJtK,KAAKgb,cAAgBhb,KAAKmb,oBAAoBlT,GAAQ8T,kBAAoB/b,KAAKmb,oBAAoBlT,GAAQ4T,YAC3G7b,KAAKib,YAAce,IACnBhc,KAAK+a,uBAAyB,GAE9B/a,KAAKkb,qBAAuB,K,sCAIhBtQ,GACd,IAAMqR,EAAUvN,YAAmB9D,EAAM+D,SAAU/D,EAAMgE,uBAClD5O,KAAKmb,oBAAoBc,K,mCAGrBrR,GACX5K,KAAKiJ,QAAU2B,EAAMG,QAAUH,EAAMI,UAAY,K,mCAIjDhL,KAAK0S,OAAS,I,kCAId,OACE,kBAAC5G,EAAA,EAAD,CACEC,SAAUC,IAAgBC,SAAS,GACnCC,KAAK,WACL1L,SAAUqM,IAAmBC,QAC7BR,SACE,oCACE,2BAAOC,UAAU,yBACf,+BACE,4BACE,yCACA,mCACA,qCACA,2CACA,kDAGJ,+BACE,4BACE,4BAAKvM,KAAK+a,uBACV,4BAAKmB,YAAelc,KAAKgb,aAAehb,KAAK0S,MAAQ,MACrD,4BAAKwJ,YAAelc,KAAKgb,aAAe,MACxC,4BAAKhb,KAAKib,YACV,4BAAKjb,KAAKkb,0BAOpB,kBAACnO,EAAA,EAAD,CAAsB7M,MAAOC,IAAOuC,mBAClC,oCACE,kBAACsK,EAAA,EAAD,CAAgBjC,OAAQ/K,KAAKiJ,c,kCAO3BzD,GACVA,EAAKxF,KAAKmc,wBAAwBzW,eAAc,SAACC,EAASC,EAAQC,GAAlB,OAAkCF,EAAQ,0DAAqB,kBAACG,EAAA,EAAD,CAAWvF,GAAIJ,IAAOuC,kBAAkBnC,KAA7D,gCAAgG,kBAACuF,EAAA,EAAD,CAAWvF,GAAIJ,IAAO2B,iBAAiBvB,KAAvI,SACvFwF,KAAK5F,IAAOuC,kBAAkBqD,MAC9BH,OAAOI,OAAKC,EAAE,+HAAqG,kBAACH,EAAA,EAAD,CAAWvF,GAAIJ,IAAO2B,iBAAiBvB,KAA/DqF,aAC3FC,YAH+E,WAG/DA,EAH+D,yB,6CAnGlF,MAAO,CACLD,OAAQ5F,KAAKkb,oBACbtF,cAAe,CACbvP,MAAO,EACPC,QAAS,EACTC,MAAO,GAETC,MAAOC,IAAegH,Y,GAhDDE,KAArBmN,GACG/K,aAAe,CACpBgE,QAAS8B,KACTc,YAAaW,MAiJFwD,UC1HAsB,G,kDAlCb,WAAYpT,GAAmB,IAAD,8BAC5B,cAAMA,IAHRC,OAAS,EAKP,EAAKS,OAAS,EAAKzJ,kBAAkBW,UAAUT,IAAOU,sBAAsBN,IAE5E,EAAKyJ,iBAAiBC,IAAOhB,OAAOiB,GAAGkE,KAAqBlO,MAAMC,IAAO4Z,wBAAyB,EAAK1L,aAL3E,E,wDAQlBzD,GACV5K,KAAKiJ,QAAUgN,aAAyBrL,EAAOyR,O,kCAI/C,OACE,kBAACvQ,EAAA,EAAD,CACEC,SAAUC,IAAgBC,SAAS,GACnCC,KAAK,WACLC,QACE,4PAIF3L,SAAUqM,IAAmBC,SAE7B,kBAACC,EAAA,EAAD,CAAsB7M,MAAOC,IAAOU,uBAClC,oCACE,kBAACmM,EAAA,EAAD,CAAgBjC,OAAQ/K,KAAKiJ,gB,GA7Bb0E,KC6Db2O,G,kDApDb,WAAYtT,GAAmB,IAAD,8BAC5B,cAAMA,IALRuT,cAAwB,EAIM,EAH9B1C,gBAA0B,EAGI,EAF9B5Q,OAAiB,EAKf,EAAKS,OAAS,EAAKzJ,kBAAkBW,UAAUT,IAAOqc,mBAAmBjc,IAEzE,EAAKyJ,iBAAiBC,IAAOhB,OAAOiB,GAAGkE,KAAqBlO,MAAMC,IAAO4Z,wBAAyB,EAAK1L,aACvG,EAAKrE,iBAAiBC,IAAOK,KAAKJ,GAAGC,KAAiBjK,MAAMC,IAAOC,sBAAuB,EAAKmK,QANnE,E,wDAkBlBK,GACNA,EAAMC,UAAa7K,KAAK6Z,gBAAkBhL,MAC5C7O,KAAKiJ,QAAU2B,EAAMG,QAAUH,EAAMI,UAAY,M,6BAI9CJ,GACL5K,KAAK6Z,gBAAkBjP,EAAMC,Y,kCAI7B,OACE,kBAACiB,EAAA,EAAD,CACEC,SAAUC,IAAgBC,SAAS,GACnCC,KAAK,WACLC,QACE,+CACWjG,YAAiBlG,KAAKyc,QADjC,4CACoFzc,KAAKuc,cAAenQ,QAAQ,GADhH,YAIF5L,SAAUqM,IAAmBC,SAE7B,kBAACC,EAAA,EAAD,CAAsB7M,MAAOC,IAAOqc,oBAClC,oCACE,kBAACxP,EAAA,EAAD,CAAgBjC,OAAQ/K,KAAKiJ,SAD/B,IAC0C,6BACvC/C,YAAiBlG,KAAK0c,wBAFzB,KAEmD,sD,6BAjCzD,OAAO1c,KAAKC,kBAAkBwV,cAActV,IAAOwc,iBAAiBpc,IAAMP,KAAK0V,MAAMC,gB,6CAKrF,OADA3V,KAAKuc,cAAgBvc,KAAKC,kBAAkB2c,2BAA2Bzc,IAAOwc,iBAAiBpc,IAAMP,KAAK0V,MAAMC,cACzG3V,KAAKuc,cAAgBM,Q,GArBNlP,KC4FXmP,G,kDAtFb,WAAY9T,GAAmB,IAAD,8BAC5B,cAAMA,IAPR0J,MAAQ,EAMsB,EAL9BqK,aAAe,EAKe,EAJ9BC,0BAA4B,EAIE,EAH9BC,kBAAoB,EAGU,EAF9BC,YAAwB,GAKtB,EAAKxT,OAAS,EAAKzJ,kBAAkBW,UAAUT,IAAOgd,mBAAmB5c,IAEzE,EAAKyJ,iBAAiBC,IAAOK,KAAKJ,GAAGC,KAAiBjK,MAAMC,IAAO2B,kBAAmB,EAAKyI,QAC3F,EAAKP,iBAAiBC,IAAOhB,OAAOiB,GAAGC,KAAiBjK,MAAMC,IAAO2B,kBAAmB,EAAK+Q,UAC7F,EAAK7I,iBAAiBC,IAAOgK,YAAY/J,GAAGC,KAAiBjK,MAAMC,IAAO2B,kBAAmB,EAAK6Y,qBAClG,EAAK3Q,iBAAiBC,IAAOoK,cAAcnK,GAAGC,KAAiBjK,MAAMC,IAAO2B,kBAAmB,EAAK6Y,qBACpG,EAAK3Q,iBAAiBC,IAAOkK,aAAajK,GAAGC,KAAiBjK,MAAMC,IAAO2B,kBAAmB,EAAKsS,gBATvE,E,mDAYvBxJ,GACL,IAAM3C,EAASyG,YAAmB9D,EAAM+D,SAAU/D,EAAMgE,gBACxD5O,KAAKkd,YAAYlO,KAAK/G,GACtBjI,KAAK0S,OAAS,I,+BAGP9H,GACP,IAAM3C,EAASyG,YAAmB9D,EAAM+D,SAAU/D,EAAMgE,gBACpD5O,KAAKkd,YAAYhO,SAASjH,GAC5BjI,KAAKgd,2BAA6B/G,aAAyBrL,EAAOwS,KAElEpd,KAAK+c,cAAgBnS,EAAMG,QAAUH,EAAMI,UAAY,K,0CAIvCJ,GAClB,IAAM3C,EAASyG,YAAmB9D,EAAM+D,SAAU/D,EAAMgE,gBACpD5O,KAAKkd,YAAYhO,SAASjH,KAG9BjI,KAAKid,mBAAqB,K,qCAGbrS,GACb,IAAM3C,EAASyG,YAAmB9D,EAAM+D,SAAU/D,EAAMgE,gBAClDyO,EAAQrd,KAAKkd,YAAYI,QAAQrV,IACxB,IAAXoV,GACFrd,KAAKkd,YAAYrI,OAAOwI,EAAO,K,kCAKjC,OACE,kBAACvR,EAAA,EAAD,CACEC,SAAUC,IAAgBC,SAAS,GACnCC,KAAK,WACLI,SACE,oCACE,2BAAOC,UAAU,yBACf,+BACE,4BACE,sCACA,sCACA,yCAGJ,+BACE,4BACE,oCACA,4BAAI,kBAACS,EAAA,EAAD,CAAgBjC,OAAQ/K,KAAKgd,6BACjC,4BAAKhd,KAAK0S,QAEZ,4BACE,qCACA,4BAAI,kBAAC1F,EAAA,EAAD,CAAgBjC,OAAQ/K,KAAK+c,gBACjC,4BAAK/c,KAAKid,uBAMpBzc,SAAUqM,IAAmBC,SAE7B,kBAACC,EAAA,EAAD,CAAsB7M,MAAOC,IAAOgd,oBAClC,oCACE,kBAACnQ,EAAA,EAAD,CAAgBjC,OAAQ/K,KAAKgd,0BAA4Bhd,KAAK+c,eADhE,IACiF,8BAC7E/c,KAAKid,kBAAoBjd,KAAK0S,OAAOtG,QAAQ,GAFjD,IAEqD,yD,GAtFtCuB,KCuHV4P,G,kDAjHb,WAAYvU,GAAmB,IAAD,8BAC5B,cAAMA,IALRC,OAAS,EAIqB,EAF9BuU,gBAA4H,GAK1H,EAAK9T,OAAS,EAAKzJ,kBAAkBW,UAAUT,IAAOqC,uBAAuBjC,IAE7E,EAAKid,gBAAgBxO,KAAK,CACxBlH,KAAM,EAAK7H,kBAAkB6H,KAC7B2V,SAAU,EAAK/H,MAAMgI,SACrBzU,OAAQ,EACR0U,eAAgB,EAChBC,cAAe,IAGjB,EAAK5T,iBAAiBC,IAAOhB,OAAOiB,GAAGkE,KAAqBlO,MAAMC,IAAO0d,qBAAsB,EAAKxP,aACpG,EAAKrE,iBAAiBC,IAAOhB,OAAOiB,GAAGC,KAAiBjK,MAAMC,IAAOsC,wBAAyB,EAAK6L,gBACnG,EAAKtE,iBAAiBC,IAAOqH,SAASpH,GAAGkE,KAAqBlO,MAAMC,IAAO0d,qBAAsB,EAAKC,eACtG,EAAK9T,iBAAiBC,IAAOqH,SAASpH,GAAGC,KAAiBjK,MAAMC,IAAOsC,wBAAyB,EAAKsb,kBAhBzE,E,+DAuBXC,GACjB,IAAMC,EAAWje,KAAKwd,gBAAgBhS,MAAK,SAAC0S,GAAD,OAA+BA,EAAIT,WAAaO,KAC3F,IAAKC,EAAU,CACb,IAAME,EAAYne,KAAK0V,MAAM0I,WAAW5S,MAAK,SAAC0S,GAAD,OAAyBA,EAAI3d,KAAOyd,KACjF,IAAKG,EACH,OAEF,IAAMD,EAAM,CACVpW,KAAMqW,EAAUrW,KAChB2V,SAAUO,EACV/U,OAAQ,EACR0U,eAAgB,EAChBC,cAAe,GAGjB,OADA5d,KAAKwd,gBAAgBxO,KAAKkP,GACnBA,EAET,OAAOD,I,kCAGGrT,GACV,IAAM3B,EAAS2B,EAAMG,QAAUH,EAAMI,UAAY,GAC3CkT,EAAMle,KAAKqe,mBAAmBzT,EAAM6S,UACrCS,IAGLA,EAAIjV,QAAUA,K,qCAGD2B,GACb5K,KAAKse,sBAAsBrV,QAAU2B,EAAMG,QAAUH,EAAMI,UAAY,K,oCAG3DJ,GACZ,IAAM+S,EAAkB/S,EAAMmH,eAAiBnH,EAAMqH,OAAU,EACzDiM,EAAMle,KAAKqe,mBAAmBzT,EAAM6S,UACrCS,IAGLA,EAAIP,gBAAkBA,EACtBO,EAAIN,eAAiBW,O,uCAGN3T,GACf,IAAM4T,EAAcxe,KAAKse,sBACzBE,EAAYb,gBAAmB/S,EAAMmH,eAAiBnH,EAAMqH,OAAU,EACtEuM,EAAYZ,eAAiBW,M,kCAI7B,IAAMnI,EAAcpW,KAAKwd,gBAAgBrW,KAAI,SAACsX,GAAD,OAAgCA,EAAOxV,UAAQoE,QAAO,SAACqR,EAAeC,GAAhB,OAAoCD,EAAQC,IAAS,GAExJ,OACE,kBAAC7S,EAAA,EAAD,CACEC,SAAUC,IAAgBC,SAAS,GACnCC,KAAK,WACLI,SACE,oCACE,2BAAOC,UAAU,yBACf,+BACE,4BACE,sCACA,sCACA,uCAGJ,+BACGvM,KAAKwd,gBAAgBrW,KAAI,SAACsX,EAA0FG,GAA3F,OACxB,wBAAIhS,IAAKgS,GACP,4BAAKH,EAAO3W,MACZ,4BAAI,kBAACkF,EAAA,EAAD,CAAgBjC,OAAQ0T,EAAOxV,UACnC,4BAAKwV,EAAOd,eAAZ,IAA6Bc,EAAOb,sBAOhDpd,SAAUqM,IAAmBC,SAE7B,kBAACC,EAAA,EAAD,CAAsB7M,MAAOC,IAAOqC,wBAClC,oCACE,kBAACwK,EAAA,EAAD,CAAgBjC,OAAQqL,S,4CAtFL,IAAD,OAC1B,OAAOpW,KAAKwd,gBAAgBhS,MAAK,SAACpE,GAAD,OAAgCA,EAAKqW,WAAa,EAAK/H,MAAMgI,aAAa1d,KAAKwd,gBAAgB,O,GA1BvG7P,KC4DdkR,G,kDAnDb,WAAY7V,GAAmB,IAAD,8BAC5B,cAAMA,IARR8V,aAAe,EAOe,EAN9BxE,OAAS,EAMqB,EAL9ByE,WAAa,EAKiB,EAJ9BC,aAAe,EAIe,EAH9B/V,OAAS,EAGqB,EAF9BgW,yBAA2B,EAKzB,EAAKvV,OAAS,EAAKzJ,kBAAkBW,UAAUT,IAAO+e,wBAAwB3e,IAE9E,EAAKyJ,iBAAiBC,IAAOK,KAAKJ,GAAGC,KAAiBjK,MAAMC,IAAOC,sBAAuB,EAAK+Z,mBAC/F,EAAKnQ,iBAAiBC,IAAOK,KAAKJ,GAAGC,KAAiBjK,MAAMkK,KAA2B,EAAK+U,eAC5F,EAAKnV,iBAAiBC,IAAOhB,OAAOiB,GAAGC,KAAiBjK,MAAMkK,KAA2B,EAAKyI,UAC9F,EAAK7I,iBAAiBC,IAAOmV,gBAAgBlV,GAAGC,KAAiBjK,MAAMC,IAAOqQ,uBAAwB,EAAK6O,mBAR/E,E,4DAY5Brf,KAAK8e,cAAgB,I,wCAGLlU,GACZ5K,KAAKsa,SAAWgF,KAAkB1U,EAAMC,UAAY7K,KAAKif,yBAA2BpQ,MACtF7O,KAAKgf,cAAgB,K,+BAIhBpU,GACP5K,KAAKiJ,QAAUgN,aAAyBrL,EAAO2U,IAAsBvf,KAAKsa,QAC1Eta,KAAK+e,YAAc/e,KAAKsa,S,wCAGR1P,GACQ,IAApBA,EAAM4U,YACRxf,KAAKif,yBAA2BrU,EAAMC,WAExC7K,KAAKsa,OAAS1P,EAAM4U,Y,kCAIpB,OACE,kBAAC1T,EAAA,EAAD,CACEC,SAAUC,IAAgBC,SAAS,GACnCC,KAAK,WACL1L,SAAUqM,IAAmBC,SAE7B,kBAACC,EAAA,EAAD,CAAsB7M,MAAOC,IAAO+e,yBAClC,oCACE,kBAAClS,EAAA,EAAD,CAAgBjC,OAAQ/K,KAAKiJ,SAD/B,IAC0C,6BACxC,wCAAqBjJ,KAAK+e,WAF5B,IAEyC/e,KAAK+e,WAAa/e,KAAKgf,aAFhE,IAE8E,yD,GAnD5DrR,K,oGCkFb8R,G,kDA/Eb,WAAYzW,GAAmB,IAAD,EAK5B,OAL4B,qBAC5B,cAAMA,IANR0W,YAAsB,EAKQ,EAJ9BC,kBAA4B,EAIE,EAH9BC,uBAAiC,EAAKlK,MAAMmK,MAAMC,WAGpB,EAF9BpN,MAAgB,EAKd,EAAKgN,YAAc,EAAKzf,kBAAkB8f,qBAAqB5f,IAAO6f,sBAAsBzf,IAEvF,EAAKmf,aAKV,EAAK1V,iBAAiBC,IAAOK,KAAKJ,GAAGC,KAAiBjK,MAAMC,IAAOgC,qBAAsB,EAAK8d,UAC9F,EAAKjW,iBAAiBC,IAAOU,WAAWT,GAAGC,KAAiBjK,MAAMC,IAAOgC,qBAAsB,EAAK+d,YACpG,EAAKlW,iBAAiBC,IAAO6O,YAAY5O,GAAGC,KAAiBjK,MAAMC,IAAOgC,qBAAsB,EAAKge,aACrG,EAAKnW,iBAAiBC,IAAOO,UAAUN,GAAGC,KAAiBjK,MAAMC,IAAOgC,qBAAsB,EAAKie,WACnG,EAAKpW,iBAAiBC,IAAOhB,OAAOiB,GAAGC,KAAkB,EAAKkW,iBAdlC,IAM1B,EAAK3W,QAAS,EACd,iB,8DAeiB,IAAf1J,KAAK0S,OAGL1S,KAAKC,kBAAkB4L,QAAQ1L,IAAOgC,oBAAoB5B,MAC5DP,KAAK0S,OAAS,K,+BAIT9H,GACP5K,KAAK0S,OAAS,I,gCAGN9H,GACR5K,KAAK4f,uBAAyBhV,EAAMC,Y,iCAG3BD,GACT5K,KAAK2f,mBAAqBW,IAAmCtgB,KAAK0f,e,kCAGxD9U,GACV5K,KAAK2f,mBAAqB1K,KAAKC,IAAItK,EAAMC,UAAY7K,KAAK4f,uBAAwBU,IAAmCtgB,KAAK0f,cAC1H1f,KAAK4f,uBAAyBhV,EAAMC,Y,iCAG3BD,GACJ5K,KAAKC,kBAAkB4L,QAAQ1L,IAAOgC,oBAAoB5B,KAG3DqK,EAAMC,UAAY7K,KAAK4f,uBAAyBW,MAClDvgB,KAAK2f,mBAAqB1K,KAAKC,IAAItK,EAAMC,UAAY7K,KAAK4f,uBAAwBU,IAAmCtgB,KAAK0f,iB,kCAK5H,OACE,kBAAC5T,EAAA,EAAD,CACEC,SAAUC,IAAgBC,SAAS,IACnCC,KAAK,WACL1L,SAAUqM,IAAmB2T,UAC7BrU,QACE,8KAKF,kBAACsU,GAAA,EAAD,CAAkBvgB,MAAOC,IAAO6f,sBAAuBU,KAAM1gB,KAAK0f,aAChE,oCACGvS,YAAanN,KAAK2f,kBAAoB,KADzC,IACiD3f,KAAK2gB,qCAAuC,IAD7F,KACoG,4E,2DApD1G,OAAO3gB,KAAK0S,MAAQ4N,IAAmCtgB,KAAK0f,iB,GAzBrC/R,KCkEZiT,G,kDAxDb,WAAY5X,GAAmB,IAAD,EAK5B,OAL4B,qBAC5B,cAAMA,IAPR0W,YAAsB,EAMQ,EAL9BmB,YAAsB,EAKQ,EAJ9BC,oBAA8B,EAIA,EAH9BC,YAAsB,EAGQ,EAF9BC,gBAA0B,EAKxB,EAAKtB,YAAc,EAAKzf,kBAAkB8f,qBAAqB5f,IAAO8gB,uBAAuB1gB,IAExF,EAAKmf,aAKV,EAAK1V,iBAAiBC,IAAOhB,OAAOiB,GAAGC,KAAiBjK,MAAMiZ,KAAgC,EAAK+H,cACnG,EAAKlX,iBAAiBC,IAAOO,UAAUN,GAAGC,KAAkB,EAAKgX,sBACjE,EAAKnX,iBAAiBC,IAAOS,eAAeR,GAAGC,KAAkB,EAAKiX,2BACtE,EAAKpX,iBAAiBC,IAAOU,WAAWT,GAAGC,KAAkB,EAAKkX,uBAbtC,IAM1B,EAAK3X,QAAS,EACd,iB,yDASSkB,GACN5K,KAAKC,kBAAkB4L,QAAQ1L,IAAOmhB,oBAAoB/gB,MAG/DP,KAAK6gB,aAAe5K,aAAyBrL,EAAO2W,IAAmCvhB,KAAK0f,aAAe1f,KAAK8gB,qBAChH9gB,KAAK+gB,aAAe/gB,KAAK8gB,uB,2CAGNlW,GACnB5K,KAAKghB,iBAAmB,EACxBhhB,KAAK8gB,oBAAsB7V,YAAcL,K,gDAGjBA,GACxB5K,KAAKghB,iBAAmB,EACxBhhB,KAAK8gB,oBAAsB7V,YAAcL,K,4CAGrBA,GACpB5K,KAAK8gB,oBAAsB7V,YAAcL,K,kCAIzC,OACE,kBAACkB,EAAA,EAAD,CACEC,SAAUC,IAAgBC,SAAS,IACnCC,KAAK,WACL1L,SAAUqM,IAAmB2T,WAE7B,kBAACC,GAAA,EAAD,CAAkBvgB,MAAOC,IAAO8gB,uBAAwBP,KAAM1gB,KAAK0f,aACjE,oCACE,kBAAC1S,EAAA,EAAD,CAAgBjC,OAAQ/K,KAAK6gB,qB,GAvDblT,KCsCb6T,G,kDAlCb,WAAYxY,GAAmB,IAAD,EAK5B,OAL4B,qBAC5B,cAAMA,IAJR0W,YAAsB,EAGQ,EAF9BmB,YAAsB,EAKpB,EAAKnB,YAAc,EAAKzf,kBAAkB8f,qBAAqB5f,IAAOshB,wBAAwBlhB,IAEzF,EAAKmf,aAKV,EAAK1V,iBAAiBC,IAAOhB,OAAOiB,GAAGC,KAAiBjK,MAAMkK,KAA2B,EAAKsX,wBAVlE,IAM1B,EAAKhY,QAAS,EACd,iB,mEAMmBkB,GACrB5K,KAAK6gB,aAAe5K,aAAyBrL,EAAO+W,IAAmC3hB,KAAK0f,gB,kCAI5F,OACE,kBAAC5T,EAAA,EAAD,CACEC,SAAUC,IAAgBC,SAAS,IACnCC,KAAK,WACL1L,SAAUqM,IAAmB2T,WAE7B,kBAACC,GAAA,EAAD,CAAkBvgB,MAAOC,IAAOshB,wBAAyBf,KAAM1gB,KAAK0f,aAClE,oCACE,kBAAC1S,EAAA,EAAD,CAAgBjC,OAAQ/K,KAAK6gB,qB,GA/BZlT,KC0CdiU,G,kDArCb,WAAY5Y,GAAmB,IAAD,EAK5B,OAL4B,qBAC5B,cAAMA,IAJR0W,YAAsB,EAGQ,EAF9BmB,YAAsB,EAKpB,EAAKnB,YAAc,EAAKzf,kBAAkB8f,qBAAqB5f,IAAO0hB,6BAA6BthB,IAE9F,EAAKmf,aAKV,EAAK1V,iBAAiBC,IAAOhB,OAAOiB,GAAGC,IAAkBiE,KAAsB,EAAKiS,iBAVxD,IAM1B,EAAK3W,QAAS,EACd,iB,4DAMYkB,GACT5K,KAAKC,kBAAkB4L,QAAQ1L,IAAO2hB,0BAA0BvhB,MAGrEP,KAAK6gB,aAAe5K,aAAyBrL,EAAOmX,IAAqC/hB,KAAK0f,iB,kCAI9F,OACE,kBAAC5T,EAAA,EAAD,CACEC,SAAUC,IAAgBC,SAAS,IACnCC,KAAK,WACL1L,SAAUqM,IAAmB2T,WAE7B,kBAACC,GAAA,EAAD,CAAkBvgB,MAAOC,IAAO0hB,6BAA8BnB,KAAM1gB,KAAK0f,aACvE,oCACE,kBAAC1S,EAAA,EAAD,CAAgBjC,OAAQ/K,KAAK6gB,qB,GAlCTlT,KCC1BqU,G,kDAWJ,WAAYhZ,GAAmB,IAAD,EAG5B,OAH4B,qBAC5B,cAAMA,IANR8Q,YAAsB,EAKQ,EAJ9BmI,YAAsB,EAIQ,EAFpBC,iBAEoB,EAE5B,EAAKxY,OAAS,EAAKzJ,kBAAkBkR,sBAAsBhR,IAAOiR,sCAAsCC,SACnG,EAAK3H,QAGV,EAAKM,iBAAiBC,IAAOqH,SAASpH,GAAGC,KAAiBjK,MAAMC,IAAO2R,yCAA0C,EAAKqQ,YAN1F,GAI1B,gB,uDAKOvX,GACT5K,KAAK8Z,aAAelP,EAAMmH,eAC1B/R,KAAKiiB,aAAerX,EAAMqH,Q,kCAY1B,OACE,kBAACnG,EAAA,EAAD,CACEC,SAAUC,IAAgBoW,OAC1BlW,KAAK,WACL1L,SAAUqM,IAAmBwV,OAE7B,kBAACtV,EAAA,EAAD,CAAsB7M,MAAOC,IAAOiR,uCAClC,kBAAC/I,EAAA,EAAD,CAAc9H,GAAI+H,IAAeC,MAAMhI,GAAIiI,QAAM,IADnD,IACwDxI,KAAK8Z,YAD7D,IAC2E9Z,KAAKiiB,YAAcjiB,KAAK8Z,YADnG,IACgH,2DAC9G,6BACA,kBAACzR,EAAA,EAAD,CAAc9H,GAAI+H,IAAeC,MAAMhI,GAAIiI,QAAM,IAHnD,IAGwDxI,KAAK2d,eAH7D,IAG8E3d,KAAK4d,cAHnF,IAGkG,mE,qCAjBtG,OAAOzQ,YAAanN,KAAKkiB,YAAYrR,iC,oCAIrC,OAAO1D,YAAanN,KAAKkiB,YAAYpR,2C,GA9BEnD,KAArCqU,GAEGjS,aAAe,CACpBmS,YAAavR,IA+CFqR,U,UCvBAM,G,kDA1Bb,WAAYtZ,GAAmB,IAAD,8BAC5B,cAAMA,IAHRC,OAAS,EAIP,EAAKS,OAAS,EAAKzJ,kBAAkBkR,sBAAsBhR,IAAOoiB,wBAAwBlR,SAC1F,EAAKrH,iBAAiBC,IAAOhB,OAAOiB,GAAGC,KAAiBjK,MAAMC,IAAOqiB,yBAA0B,EAAK3P,UAHxE,E,qDAMrBjI,GACP5K,KAAKiJ,QAAU2B,EAAMG,QAAUH,EAAMI,UAAY,K,kCAIjD,OACE,kBAACc,EAAA,EAAD,CACEI,KAAK,WACL1L,SAAUqM,IAAmBwV,OAE7B,kBAACtV,EAAA,EAAD,CAAsB7M,MAAOC,IAAOoiB,yBAClC,oCACE,kBAACvV,EAAA,EAAD,CAAgBjC,OAAQ/K,KAAKiJ,gB,GAtBX0E,KC+DxB8U,G,4HAAwBC,KAAxBD,GACGE,YAAc,CAEnB3R,UAAWlR,EACX8iB,UAAWtT,EAGXG,gBAAiBlK,EACjBsd,0BAA2B/d,EAC3Bge,MAAOlc,EAGPiR,aAAcI,KACd8K,aAAcC,KACdC,eAAgBC,KAChBC,wBAAyB3L,GACzB4L,MAAOxL,GACPyL,mBAAoBnL,GAGpBoL,wBAAyBnT,GAGzBoT,aAAcC,KAGdtB,YAAavR,GACb8S,cAAepR,GACfqR,aAAcpQ,GACdqQ,mBAAoB7N,GACpB8N,aAActN,GACduN,aAActM,GACduM,SAAUC,KAGVC,eAAgBC,KAChBC,YAAaC,KACbC,eAAgBC,KAChBC,YAAa/L,GACb7I,aAAc3G,EACdwb,UAAWlL,GACXmL,iBAAkBtL,GAClBuL,SAAUlL,GACV5J,WAAY/B,EACZ8W,aAAcC,KACdC,YAAaC,KACbC,cAAe1I,GACf2I,YAAazI,GACb0I,WAAYlI,GACZmI,eAAgB1H,GAChB2H,cAAerG,GACfsG,cAAevL,GACfwL,aAAchL,GACdiL,aAAcvK,GAGdwK,gBAAiBC,KACjBC,cAAeC,KACfC,YAAaC,KACbC,WAAYC,KAGZC,iBAAkBC,KAClBC,cAAeC,KACfC,gBAAiBC,KACjBC,iBAAkBC,KAClBC,aAAc7G,GACd8G,cAAe3F,GACf4F,eAAgBhF,GAChBiF,kBAAmB7E,GAGnB8E,6BAA8B1E,GAC9B2E,gBAAiBC,KAGjBC,gBAAiBvE,GAGjBwE,cAAe,CAACC,IAAe,CAAE3lB,eAAgB,MAItCqhB,c,iCClKA,SAASxM,EAAyBrL,EAAOoc,GACtD,IAAMC,GAAOrc,EAAMG,QAAU,IAAMH,EAAMI,UAAY,GACrD,OAAOic,EAAOA,GAAO,EAAID,GAF3B,mC,iCCAA,oBAUeE,IANF,SAAC,GAAD,IAAMC,EAAN,2BACX,uCAAKC,MAAM,6BAA6BC,QAAQ,cAAc9a,UAAU,QAAW4a,GACjF,0BAAMG,EAAE,mpB,iCCNZ,mCAwBe7G,IAXU,SAAC,GAAD,IAAGvgB,EAAH,EAAGA,MAAOwgB,EAAV,EAAUA,KAAM6G,EAAhB,EAAgBA,SAAUhb,EAA1B,EAA0BA,UAA1B,OACvB,yBAAKA,UAAS,0BAAqBA,GAAa,KAC9C,+BACE,kBAAC,IAAD,CAAWhM,GAAIL,EAAMK,KADvB,IAC8B,kBAAC,IAAD,CAAWA,GAAIL,EAAMK,GAAIwF,MAAM,IAD7D,WAC+E2a,GAE/E,yBAAKnU,UAAU,SACZgb,M,iCCnBP,yiCAKazU,EAAiC,EAGjCoD,EAA8B,GAE9BqK,EAAwC,IAGxC1J,EAA8B,IAG9B3E,EAA6B,GAG7B8J,EAAwB,GAExBjH,EAA4B,GAE5BH,EAAiC,KAGjCxK,EAA2B,CACtCjK,IAAOoB,cACPpB,IAAOqB,mBACPrB,IAAOuB,qBACPvB,IAAOkC,2BAIImlB,EAAmB,IAMnBC,EAA+B,EAE/BzO,EAA+B,IAG/B/J,EAA4B,KAG5BwK,EAAyB,CACpCtZ,IAAOunB,uBAAuBnnB,GAC9BJ,IAAOwnB,8BAA8BpnB,GACrCJ,IAAOynB,wBAAwBrnB,IAIpBge,EAA6B,GAG7BzT,EAAgC,IAEhChB,EAA2B,EAG3BsP,EAAsC,EAEtCD,EAAgC,CAC3ChZ,IAAOyW,qBACPzW,IAAOqb,yBACPrb,IAAO8Z,0BACP9Z,IAAOsa,0BAII8E,EAAsB,IAEtBD,EAAiB,EAGjBjD,EAA2B,GAG3BQ,EAAgC,GAGhCO,EAA2B,GAI3B/E,EAAyB,CACpClY,IAAO+B,gBACP/B,IAAO6B,MACP7B,IAAO4D,UACP5D,IAAO2C,gBACP3C,IAAO2B,kBAL6B,OAMjCsI,GAEQqN,EAAsB,EACtBC,EAAoB,IAMpB4I,EAAqC,CAAC,EAAG,IAAM,KAAM,IAAM,KAAM,IAAM,KAAM,IAAM,KAAM,IAAM,KAAM,IAAM,KAAM,IAAM,KAAM,KAG7HiB,EAAqC,CAAC,EAAG,GAAK,IAAM,IAAM,IAAM,IAAM,IAAM,IAAM,IAAM,IAAM,IAAM,GAAK,IAAM,IAAM,IAAM,IAAM,KAKjII,EAAqC,CAAC,EAAG,IAAM,IAAM,IAAM,IAAM,GAAM,IAAM,IAAM,IAAM,IAAM,IAAM,IAAM,IAAM,IAAM,IAAM,KAG7HI,EAAuC,CAAC,EAAG,IAAM,IAAM,IAAM,IAAM,IAAM,IAAM,IAAM,IAAM,IAAM,IAAM,IAAM,IAAM,IAAM,GAAK,K,iCClH3I,i8CAKa8F,EAAoB,EAKpBC,EAAoB,IAEpBC,EAAqC,GAGrCC,EAA6B,GAG7BC,EAAmC,KACnCC,EAAwB,IAGxBC,EAAwC,CACnDhoB,IAAOioB,qBAAqB7nB,GAC5BJ,IAAOkoB,WAAW9nB,GAClBJ,IAAOmoB,cAAc/nB,GACrBJ,IAAOooB,aAAahoB,GACpBJ,IAAOqoB,YAAYjoB,GACnBJ,IAAOsoB,mBAAmBloB,GAC1BJ,IAAOkE,WAAW9D,GAClBJ,IAAOmE,WAAW/D,GAClBJ,IAAOoE,WAAWhE,GAClBJ,IAAOqE,WAAWjE,GAClBJ,IAAOsE,WAAWlE,GAClBJ,IAAOwE,aAAapE,GACpBJ,IAAOyD,cAAcrD,GACrBJ,IAAO0D,SAAStD,GAChBJ,IAAO8D,aAAa1D,GACpBJ,IAAOuoB,YAAYnoB,GACnBJ,IAAO8C,aAAa1C,GACpBJ,IAAO2D,MAAMvD,GACbJ,IAAOwoB,iBAAiBpoB,GACxBJ,IAAOyoB,kBAAkBroB,GACzBJ,IAAO0oB,sBAAsBtoB,GAC7BJ,IAAO2oB,eAAevoB,GACtBJ,IAAO4oB,gBAAgBxoB,GACvBJ,IAAO6oB,wBAAwBzoB,GAC/BJ,IAAOgI,yBAAyB5H,GAChCJ,IAAO8oB,aAAa1oB,GACpBJ,IAAO+oB,YAAY3oB,GACnBJ,IAAOgpB,iBAAiB5oB,GACxBJ,IAAOipB,8BAA8B7oB,IAG1B8oB,EAA2B,EAS3BC,EAAsC,EAGtCC,EAAkB,GAElBC,EAAwC,CACnDrpB,IAAOspB,MAAMlpB,GACbJ,IAAOupB,uBAAuBnpB,GAC9BJ,IAAOwpB,aAAappB,IAITqpB,EAA4B,IAE5BC,EAA6B,GAG7BC,EAA0B,GAG1BC,EAAiC,GAKjCC,EAA0B,GAG1BC,EAAyB,EAGzBC,EAAoB,EAEpBC,EAAwB,IAMxBC,EAAsB,CAACjqB,IAAOkqB,kBAAmBlqB,IAAOmqB,kBAAmBnqB,IAAOoqB,oBAElFC,EAA6B,KAE7BC,EAA+B,KAE/BC,EAAkC,IAMlCC,EAA4B,GAE5BC,EAA0B,IAE1BC,EAAwB,KAExBC,EAAsB,IAEtBC,EAAwB,GAExBC,EAAgC,CAC3C7qB,IAAO8qB,iBACP9qB,IAAO+qB,mBACP/qB,IAAOgrB,mBACPhrB,IAAOirB,mBACPjrB,IAAOkrB,mBACPlrB,IAAOmrB,mBACPnrB,IAAOorB,mBACPprB,IAAOqrB,oBAGIC,EAAoC,CAC/CtrB,IAAO8qB,iBAAiB1qB,GACxBJ,IAAO+qB,mBAAmB3qB,GAC1BJ,IAAOgrB,mBAAmB5qB,GAC1BJ,IAAOirB,mBAAmB7qB,GAC1BJ,IAAOkrB,mBAAmB9qB,GAC1BJ,IAAOmrB,mBAAmB/qB,GAC1BJ,IAAOorB,mBAAmBhrB,GAC1BJ,IAAOqrB,mBAAmBjrB,IAGfmrB,EAAkC,CAC7CvrB,IAAOsoB,mBAAmBloB,GAC1BJ,IAAOwrB,oBAAoBprB,IAFkB,OAG1CkrB,GAGQG,EAAoB,EAEpBC,EAAa,EAEbC,EAAa,GAEbC,EAA4B,CACvC5rB,IAAOkoB,WACPloB,IAAOooB,aACPpoB,IAAOioB,qBACPjoB,IAAOyoB,mBAOIoD,EAAsC,CAAC,EAAG,IAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,IAAM,KAAM,KAAM,KAAM,MAG9HC,EAAqC,CAAC,EAAG,IAAM,IAAM,IAAM,IAAM,IAAM,IAAM,IAAM,IAAM,IAAM,GAAM,IAAM,IAAM,IAAM,IAAM,KAK7HC,EAAmC,CAAC,EAAG,GAAK,IAAM,IAAM,IAAM,IAAM,IAAM,IAAM,IAAM,IAAM,GAAK,IAAM,IAAM,IAAM,IAAM,KAGzHC,EAA0C,CAAC,EAAG,IAAM,IAAM,IAAM,IAAM,IAAM,IAAM,IAAM,IAAM,IAAM,GAAK,GAAK,IAAM,IAAM,IAAM,KAMhIC,EAA2B,GAG3BC,EAA0B,IAG1BC,EAAkC,IAGlCC,EAAiD,I,mHCzLxDC,G,kLAmBSC,GACX,IAAM/N,EAAQ+N,EAAMpf,QAAO,SAACqf,EAAKtlB,GAAN,OAAeslB,EAAMtlB,EAAKulB,QAAO,GAE5D,OACE,yBAAKpgB,UAAU,UACZkgB,EAAMtlB,KAAI,WAA0DkW,GAAW,IAAlEuP,EAAiE,EAAjEA,MAAOC,EAA0D,EAA1DA,MAAO1gB,EAAmD,EAAnDA,QAASwgB,EAA0C,EAA1CA,MAAO9lB,EAAmC,EAAnCA,QAASimB,EAA0B,EAA1BA,aAOnD,OANAD,EAAQ1gB,EACN,kBAAC,IAAD,CAAgB4gB,QAAS5gB,GAAU0gB,GACjCA,EACJA,EAAQhmB,EACN,kBAAC,IAAD,CAAWtG,GAAIsG,GAAUgmB,GACvBA,EAEF,yBAAKjgB,IAAKyQ,EAAO9Q,UAAU,QACzB,yBAAKA,UAAU,YACb,yBAAKA,UAAU,SAAS/F,MAAO,CAAEwmB,WAAYJ,MAE/C,yBAAKrgB,UAAU,aACZsgB,GAEH,yBAAKtgB,UAAU,YACb,kBAAC,IAAD,CAAgBwgB,QAASD,GAA8BH,GACpDzmB,YAAiBymB,EAAQjO,EAAO,GADnC,a,kCAUF+N,EAAOQ,EAAWC,GAC5B,IAEMC,EAAO,CACXV,SAEIW,EAAO,CACXD,KAAM,CACJrlB,KAAM,SAERulB,KAAM,CACJniB,KAAM,MACNoiB,YAXgBL,EAAYC,GAa9BK,SAAU,CACRC,MAAO,CACLC,MAAO,QACPviB,KAAM,gBAER0hB,MAAO,CACLa,MAAO,QACPviB,KAAM,UACNwiB,OAAQ,KACRC,MAAO,CACLC,OAAQnB,EAAMtlB,KAAI,qBAAE0lB,SACpBgB,MAAOpB,EAAMtlB,KAAI,qBAAEylB,YAIzBkB,KAAM,CACJC,OAAQ,OAGZ,OACE,yBAAKxhB,UAAU,SACb,kBAAC,IAAD,CACEyhB,MAAOf,EACPgB,OAAQhB,EACRG,KAAMA,EACND,KAAMA,O,+BAKJ,IAAD,EACyCntB,KAAK0H,MAA7C+kB,EADD,EACCA,MAAOQ,EADR,EACQA,UAAWC,EADnB,EACmBA,kBAE1B,OACE,yBAAK3gB,UAAU,eACZvM,KAAKkuB,aAAazB,GAClBzsB,KAAKmuB,YAAY1B,EAAOQ,EAAWC,Q,GApGnBkB,IAAMC,gBAAzB7B,EAcG8B,aAAe,CACpBrB,UAAW,GACXC,kBAAmB,KA0FRV,O,uRCIA+B,E,4MA5FbC,MAAQ,CACNC,MAAO,M,uDAGC,IAAD,EAQHzuB,KAAK0H,MANPgnB,EAFK,EAELA,cACAC,EAHK,EAGLA,YACAC,EAJK,EAILA,MACAC,EALK,EAKLA,MACAC,EANK,EAMLA,QACA3iB,EAPK,EAOLA,QAGIghB,EAAO,CACXuB,gBACA9oB,OAAQ+oB,GAGJvB,EAAO,CACXG,SAAU,CACRxjB,EAAG,CACD0jB,MAAO,IACPviB,KAAM,eACN6jB,MAAOH,EAAMG,MACbC,KAAM,CACJC,MAAM,EACNC,OAAQN,EAAMO,aAGlBC,EAAG,CACD3B,MAAO,IACPviB,KAAM,eACN6jB,MAAOF,EAAME,MACbC,KAAM,CACJC,MAAM,EACNC,OAAQ,OAEVvB,MAAO,CACLC,OAAQkB,KAIdO,MAAO,CACL,CACElC,KAAM,CACJrlB,KAAM,iBAERulB,KAAM,CACJniB,KAAM,OACN0hB,MAAO,0BACP0C,KAAM,CACJ1C,MAAO,UACP2C,YAAa,KAInB,CACEpC,KAAM,CACJrlB,KAAM,UAERulB,KAAM,CACJniB,KAAM,QACNskB,QAAQ,EACR5C,MAAO,UACP1gB,KAAM,IAERqhB,SAAU,CACRphB,QAAS,CACP,CAAEshB,MAAO,IAAKsB,MAAO5iB,QAQ/B,OACE,kBAAC,IAAD,CAAWsjB,eAAa,IACrB,gBAAEzB,EAAF,EAAEA,MAAF,OACC,kBAAC0B,EAAA,EAAD,CACEzB,OAAQ,IACRD,MAAOA,EACPZ,KAAMA,EACND,KAAMA,W,GA3GqBiB,IAAMxe,WCGtC,SAAS+f,EAAkBC,EAAoBC,GACpD,OAAOD,EAAaC,EASf,SAASC,EAAYC,EAAWC,EAAWC,GAChD,OAuCF,SAA8BD,EAAWD,GAUvC,IAFA,IAAIG,EAAY,EACZC,EAAc,EACTxjB,EAAIqjB,EAAID,EAAI,EAAGpjB,GAAKqjB,EAAGrjB,GAAK,EACnCujB,GAAavjB,EAEf,IAAK,IAAIA,EAAI,EAAGA,GAAKojB,EAAGpjB,GAAK,EAC3BwjB,GAAexjB,EAEjB,OAAOujB,EAAYC,EAvDZC,CAAqBJ,EAAGD,GAAK9a,KAAKob,IAAIJ,EAAGF,GAAK9a,KAAKob,IAAI,EAAIJ,EAAGD,EAAID,GASpE,SAASO,EAAYP,EAAWC,EAAWC,GAEhD,IADA,IAAIM,EAAc,EACT5jB,EAAI,EAAGA,GAAKojB,EAAGpjB,GAAK,EAC3B4jB,GAAeT,EAAYnjB,EAAGqjB,EAAGC,GAEnC,OAAOM,EASF,SAASC,EAAQR,EAAWS,GAGjC,IAFA,IAAIC,GAAO,EACPC,EAAO,EACFhkB,EAAI,EAAGA,GAAKqjB,EAAGrjB,GAAK,EAAG,CAC9B,IAAM4jB,EAAcE,EAAI9jB,EAAGqjB,GACvBO,EAAcI,IAChBD,EAAM/jB,EACNgkB,EAAOJ,GAGX,MAAO,CACLG,MACAT,EAAGU,GAuBP,SAASC,EAAsBC,EAAqBhB,EAAsBD,GASxE,OAR4DjmB,MAAMC,KAAK,CAAEC,OAAQgmB,IAAgB,SAACiB,EAAInkB,GACpG,MAA0B,kBAAfijB,EACF,CAAE7lB,EAAG4C,EAAGyiB,EAAGU,EAAYnjB,EAAGkjB,EAAcD,IAExC,CAAE7lB,EAAG4C,EAAGyiB,EAAG2B,EAAmBpkB,EAAGkjB,EAAcD,OAO5D,SAASoB,EAAuBH,EAAqBhB,EAAsBD,GAA2D,IAA5BqB,EAA2B,uDAAP,KACtHC,EAAoBN,EAAsBC,EAAahB,EAAcD,GACrEuB,EAAWD,EAAkBE,WAAU,qBAAGhC,GAAa6B,KACvDI,EAAWF,EAAWD,EAAkBI,MAAMH,GAAUC,WAAU,qBAAGhC,EAAY6B,KAEvF,MAAO,CACLC,oBACAC,WACAE,YAYJ,SAASE,EAAIxB,EAAWyB,EAAWvB,EAAawB,GAC9C,IAAW,IAAP1B,EACF,OAAO,EAET,GAAIA,IAAMyB,EAAI,EACZ,OAAO,EAET,GAAU,IAANzB,GAAiB,IAANyB,EACb,OAAO,EAET,GAAqB,OAAjBC,EAAO1B,GAAGyB,GACZ,OAAOC,EAAO1B,GAAGyB,GAGnB,IAAM7E,GAAiB,EAAIsD,EAAEuB,EAAI,IAAMD,EAAIxB,EAAGyB,EAAI,EAAGvB,EAAGwB,GAAUxB,EAAEuB,EAAI,GAAKD,EAAIxB,EAAI,EAAGyB,EAAI,EAAGvB,EAAGwB,GAElG,OADAA,EAAO1B,GAAGyB,GAAK7E,EACRA,EAaF,SAASoE,EAAmBhB,EAAWC,EAAWC,GAGvD,GAAIA,EAAEpmB,SAAWmmB,EACf,MAAM,IAAI0B,MAAM,oHAKlB,IAAMD,EAAS,YAAI9nB,MAAMqmB,EAAI,IAAI7oB,KAAI,SAAAlB,GAAC,OAAI0D,MAAMqmB,EAAI,GAAG2B,KAAK,SAC5D,OAAOJ,EAAIxB,EAAGC,EAAGC,EAAGwB,GAyBf,SAASG,EACdf,EACAhB,EACAD,GAWC,IAVDiC,EAUA,uDAVsB,QACtBC,EASA,uDATsBD,EACtB/C,EAQA,uDARoB,CAAC,EAAG,IACxBF,EAOA,uDAPa,CACXG,MAAO8C,EACP1C,WAAY,MAEdN,EAGA,uDAHa,CACXE,MAAO,cAET,EAEkDiC,EAAuBH,EAAahB,EAAcD,GAA5FsB,EAFR,EAEQA,kBAAmBC,EAF3B,EAE2BA,SAAUE,EAFrC,EAEqCA,SAC/BU,EAAqC,kBAAfnC,EAA0BE,EAAYe,EAAahB,EAAcD,GAAcmB,EAAmBF,EAAahB,EAAcD,GACzJ,OACE,kBAAC,EAAD,CACElB,cAAewC,EAAkBI,MAAMH,EAAUE,EAAW,GAC5D1C,YAAa,CAAE5kB,EAAG8mB,EAAazB,EAAG2C,GAClCjD,QAASA,EACTF,MAAOA,EACPC,MAAOA,EACP1iB,QAAS2lB,M,6GC3LTE,E,kDAyJJ,WAAYhpB,GAAmB,IAAD,8BAC5B,cAAMA,IArJE+H,iBAoJoB,IAtG9BkhB,iBAA2B,EAsGG,EAjG9BC,uBAAiC,EAiGH,EA5F9BC,mBAA6B,EA4FC,EAvF9BC,wBAAkC,EAuFJ,EAlF9BC,2BAAqC,EAkFP,EA7E9BppB,OAAiB,EA6Ea,EAxE9ByJ,MAAgB,EAwEc,EAnE9B4f,iBAA2B,EAqEzB,EAAKtoB,iBAAiBC,IAAOhB,OAAOiB,GAAG,EAAKqoB,gBAAiB,EAAKC,iBAClE,EAAKxoB,iBAAiBC,IAAOK,KAAKJ,GAAG,EAAKqoB,gBAAgBryB,MAAM,EAAKuyB,eAAgB,EAAKC,eAC1F,EAAK1oB,iBAAiBC,IAAOhB,OAAOiB,GAAG,EAAKqoB,gBAAgBryB,MAAM,EAAKuyB,eAAgB,EAAKE,iBAC5F,EAAK3oB,iBAAiBC,IAAOO,UAAUooB,GAAG,EAAKL,gBAAgBryB,MAAM,EAAK2yB,6BAA8B,EAAKC,yBAC7G,EAAK9oB,iBAAiBC,IAAOU,WAAWioB,GAAG,EAAKL,gBAAgBryB,MAAM,EAAK2yB,6BAA8B,EAAKE,0BAC9G,EAAK/oB,iBAAiBC,IAAOuE,SAAU,EAAKwkB,YAPhB,E,mEA1DPpoB,GACrB,SAAKA,EAAMqoB,YAAcroB,EAAMsoB,eAGvBtoB,EAAMqoB,UAAYroB,EAAMsoB,aAAgBlzB,KAAKmzB,iB,oDAQzBvoB,GAC5B,SAAKA,EAAMqoB,YAAcroB,EAAMsoB,eAGvBtoB,EAAMqoB,UAAYroB,EAAMsoB,aAAgBlzB,KAAKozB,iB,oDAOzBxoB,GAC5B,SAAKA,EAAMqoB,YAAcroB,EAAMsoB,gBAGvBlzB,KAAKqzB,uBAAuBzoB,IAAU5K,KAAKszB,8BAA8B1oB,M,yDAMzC,IAAD,OACnC2oB,GAAkB,EAMtB,OALAvzB,KAAK6yB,4BAA4BviB,SAAQ,SAAApQ,GACnC,EAAKD,kBAAkB4L,QAAQ3L,EAAMK,MACvCgzB,GAAS,MAGNA,I,2CAMmB,IAAD,OACrBC,GAAmB,EAMvB,OALAxzB,KAAKyyB,cAAcniB,SAAQ,SAAApQ,GACpB,EAAK6Q,YAAYS,aAAatR,EAAMK,MACvCizB,GAAU,MAGPA,M,qDAyEO5oB,GACVA,EAAM6oB,mBAGNzzB,KAAK0zB,sBAAwB1zB,KAAK2zB,oCAAsC3zB,KAAK4zB,8BAA8BhpB,IAC7G5K,KAAKoyB,wBAA0BxnB,EAAMC,UAChC7K,KAAKiyB,kBACRjyB,KAAKiyB,iBAAkB,EACvBjyB,KAAKkyB,uBAAwB,EAC7BlyB,KAAKmyB,mBAAqBvnB,EAAMC,YAI9B7K,KAAKiyB,iBAAmBrnB,EAAMC,UAAY7K,KAAKoyB,wBA5OvC,MA6OVpyB,KAAKiyB,iBAAkB,EACvBjyB,KAAKkyB,uBAAwB,EAC7BlyB,KAAKqyB,4BAA8BznB,EAAMC,UAAY7K,KAAKmyB,uB,sCAO9DnyB,KAAK0S,OAAS,GACV1S,KAAKiyB,iBAAmBjyB,KAAKkyB,yBAC/BlyB,KAAKsyB,kBAAoB,K,sCAIb1nB,IACV5K,KAAKiyB,iBAAmBjyB,KAAKkyB,yBAC3BlyB,KAAK6zB,eACP7zB,KAAKiJ,QAAUgN,YAAyBrL,EAAO5K,KAAK8zB,gBAEpD9zB,KAAKiJ,QAAU2B,EAAMG,QAAUH,EAAMI,UAAY,M,8CAK/BJ,GACjB5K,KAAKiyB,iBAAoBjyB,KAAKkyB,wBACjClyB,KAAKmyB,mBAAqBvnB,EAAMC,WAElC7K,KAAKiyB,iBAAkB,EACvBjyB,KAAKoyB,wBAA0BxnB,EAAMC,Y,+CAIdD,GAClB5K,KAAKkyB,wBACRlyB,KAAKiyB,iBAAkB,EACvBjyB,KAAKqyB,4BAA8BznB,EAAMC,UAAY7K,KAAKmyB,sB,iCAOnDvnB,GACL5K,KAAKiyB,kBACPjyB,KAAKqyB,4BAA8BznB,EAAMC,UAAY7K,KAAKmyB,mBAC1DnyB,KAAKiyB,iBAAkB,K,qCApHzB,OADajyB,KAAK+zB,YACNxB,iB,oCAKZ,OADavyB,KAAK+zB,YACNtB,gB,kDAKZ,OADazyB,KAAK+zB,YACNlB,8B,qCAKZ,OADa7yB,KAAK+zB,YACNZ,iB,qCAKZ,OADanzB,KAAK+zB,YACNX,iB,qCAKZ,OADapzB,KAAK+zB,YACNF,iB,qCAKZ,OADa7zB,KAAK+zB,YACND,iB,oCAOZ,OAAO9zB,KAAKiJ,S,2CAIZ,OAAOjJ,KAAKqyB,6B,iCAIZ,OAAOryB,KAAK0S,Q,wCAIZ,OAAO1S,KAAKsyB,qB,GAvNY3kB,KAAtBqkB,EACGjiB,aAAe,CACpBgB,YAAaoB,KAFX6f,EAYGS,cAAyB,GAZ5BT,EAiBGO,oB,EAjBHP,EAuBGa,4BAAuC,GAvB1Cb,EA4BGmB,oB,EA5BHnB,EAiCGoB,oB,EAjCHpB,EAuCG6B,oB,EAvCH7B,EA4CG8B,oB,EAsPM9B,O,uDC7Sf,oBAGM7e,EAAoB,SAAAzL,GAAU,IAC1BgL,EAAqChL,EAArCgL,MAAOU,EAA8B1L,EAA9B0L,KAAMuG,EAAwBjS,EAAxBiS,OAAQqa,EAAgBtsB,EAAhBssB,YACvBC,EAAe7gB,EAAOV,GAAU,EACtC,OACE,oCACGshB,GAAe,SAAKC,EAAY7nB,QAAQ,GAD3C,IAC+C,mCAASuN,EAAS,qBAAuB,UAAzC,IAAqDA,EAAS,GAAqB,IAAhBsa,EAAoB,MAAQ,OAA/F,eAYpC9gB,MAEfA,EAAkBmb,aAAe,CAC/B0F,aAAa,EACbra,QAAQ,I,iCCxBV,8CAMO,SAAS1O,EAAcL,GAC5B,OAAQA,EAAMM,MACZ,KAAKC,IAAUE,WACf,KAAKF,IAAU+oB,aACb,OAAO,EACT,KAAK/oB,IAAUC,UACf,KAAKD,IAAU0P,YACb,OAAO,EACT,KAAK1P,IAAUgpB,eACf,KAAKhpB,IAAUipB,gBACf,KAAKjpB,IAAUkpB,iBACf,KAAKlpB,IAAUmpB,kBACb,OAAO1pB,EAAM2pB,MAEjB,MAAM,IAAI7C,MAAM,0C,qFCwCH/rB,IAxCf,SAAiBH,EAAYgvB,EAA0BnzB,GACrD,IAAIozB,EAAU,CAAEC,UAAW,EAAGC,OAAQ,EAAGjiB,MAAO,GAEhD,GAAI/I,MAAMirB,QAAQvzB,EAAWnB,OAAQ,CACnC,IADmC,EAC/B20B,EAA4B,CAAEt0B,IAAK,EAAGuH,KAAM,GAAI/B,KAAM,IADvB,cAEf1E,EAAWnB,OAFI,IAEnC,2BAAsC,CAAC,IAA5BA,EAA2B,QAC/Bs0B,EAAQM,YAAY50B,EAAMK,OAGA,IAA3Bs0B,EAAmBt0B,KACrBs0B,EAAqB30B,GAEvBu0B,EAAQC,WAAaF,EAAQM,YAAY50B,EAAMK,IAAIm0B,UACnDD,EAAQE,QAAUH,EAAQM,YAAY50B,EAAMK,IAAIo0B,OAChDF,EAAQ/hB,OAAS8hB,EAAQM,YAAY50B,EAAMK,IAAImS,QAXd,8BAanCrR,EAAWnB,MAAQ20B,OAEnBJ,EAAUD,EAAQM,YAAYzzB,EAAWnB,MAAMK,IAEjD,GAAKk0B,EAAL,CAIA,IAAMM,EAAeN,EAAQC,UAAYD,EAAQE,OAC3CK,EAAeP,EAAQE,OAASI,GAAiB,EACjDE,EAAoBT,EAAQlpB,SAASxD,KAAKotB,cAEhD1vB,EAAKwvB,GAAapf,cAAcvU,EAAWgF,OACxCX,eAAc,SAACC,GAAD,OAAaA,EACxB,uDACmBsvB,EADnB,iBACmD,kBAAC,IAAD,CAAW10B,GAAIc,EAAWnB,MAAMK,KADnF,KAC4Fc,EAAW2W,kBAGtGjS,KAAK1E,EAAWnB,MAAM6F,MACtBH,OAAOI,OAAKC,EAAE,6IAA2CC,YAAiB8uB,GAA5D,EAA+FP,EAAQC,UAAoBK,eAAyBE,wBAClKpvB,YAPuB,WAOPK,YAAiB7E,EAAWgF,OAPrB,cAOiC4uB,EAPjC,yBAQvBE,QAAQ9zB,EAAW0W,KAAKxR,MAAMlF,EAAWkF,a,uHCR5C6uB,EAAwB,CAC5BC,IAAUC,KACVD,IAAUE,MACVF,IAAUG,OAQNC,E,kDAmHJ,aAAsB,IAAD,iDAANC,EAAM,yBAANA,EAAM,iBACnB,+BAASA,KA7CXC,MAAQ,EA4Ca,EAzCrBC,YAAc,EAyCO,EAtCrBC,aAAe,EAsCM,EApCrBC,WAAa,KAoCQ,EAnCrBC,YAAc,KAmCO,EAlCrBC,qBAAsB,EAkCD,EA+brBC,cAAgB,EA/bK,EAgcrBC,mBAAqB,EAhcA,EAicrBC,wBAA0B,EA9bxB,IAAMzF,EAAM,EAAK0F,iCAHE,OAInB,EAAKN,WAAa,CAChB/qB,OAAQ2lB,GAAY,EACpBA,MACA2F,MAAO,EAAKC,mBACZzrB,UAAW,EAAK6K,MAAMmK,MAAMC,YAE9B,EAAK9V,iBAAiBC,IAAOuE,SAAU,EAAK+nB,YAC5C,EAAKvsB,iBAAiBC,IAAOqH,SAASshB,GAAGzoB,KAAkB,EAAKgY,YAChE,EAAKnY,iBAAiBC,IAAOK,KAAKJ,GAAGC,KAAkB,EAAKI,QAC5D,EAAKP,iBAAiBC,IAAOhB,OAAOiB,GAAGC,KAAkB,EAAK0I,UAC9D,EAAK7I,iBAAiBC,IAAOusB,MAAMtsB,GAAGC,KAAkB,EAAKssB,SAC7D,EAAKzsB,iBAAiBC,IAAOO,UAAUooB,GAAGzoB,KAAkB,EAAK0O,aACjE,EAAK7O,iBAAiBC,IAAOU,WAAWioB,GAAGzoB,KAAkB,EAAKusB,cAClE,EAAK1sB,iBAAiBC,IAAO0sB,YAAY/D,GAAGzoB,KAAkB,EAAKysB,eAjBhD,E,oDA3BnB,OAAO52B,KAAK62B,aAAa72B,KAAK0V,MAAMohB,oB,+BAQpC,OAAO92B,KAAK2e,SAAW3e,KAAK81B,WAAWpF,M,uCAQvC,OAAO1wB,KAAK21B,MAAQ31B,KAAK0V,MAAMC,gB,2CAQ/B,OAAQ3V,KAAK41B,YAAc51B,KAAK0V,MAAMC,cAAiB,IAAO,O,qDA8BhD/K,GACd,OAAOA,EAAMmH,iB,yCAUb,OAAO/R,KAAK+zB,YAAYgD,gB,yCAWxB,IAAIV,EAAQr2B,KAAKg3B,mBAAqB,IAItC,OAHIh3B,KAAK+zB,YAAYkD,gBACnBZ,GAAU,EAAIr2B,KAAKe,MAAM4d,SAEpB0X,I,2CAgBP,OAAO,O,+CAYgBtrB,GACvB,GAAc,MAAVA,GAAkBmsB,MAAMnsB,GAC1B,MAAM,IAAI2mB,MAAJ,8EAAiF3mB,IAEzF,GAAe,IAAXA,EAAJ,CAGA,IAAMosB,EAASn3B,KAAK2e,QAEdyY,EADQniB,KAAKC,IAAIiiB,EAASpsB,EAAQ/K,KAAKo2B,kCACxBe,EACrBn3B,KAAKq3B,cAAcD,M,kCAOTxsB,GAAQ,IAAD,OACjB,OAAKA,GAAUA,EAAMW,eAGdX,EAAMW,eAAeC,MAAK,SAAA8rB,GAAC,OAAIA,EAAEpsB,OAAS,EAAK6oB,YAAYwD,aAAah3B,MAFtE,O,8BAUHqK,GACN,YAA6Da,IAAzDb,EAAM4sB,aAAax3B,KAAK+zB,YAAYwD,aAAah3B,IAC5CqK,EAAM4sB,aAAax3B,KAAK+zB,YAAYwD,aAAah3B,IAEnDP,KAAKy3B,YAAY7sB,GAAO8sB,O,6CAQVC,GAA2B,IAAnB9sB,EAAkB,uDAAN,KACzC,IAAK8sB,GAAUT,MAAMS,GACnB,MAAM,IAAIjG,MAAJ,4EAA+EiG,IAElF9sB,IACHA,EAAY7K,KAAK0V,MAAMohB,kBAEzB,IAAMc,EAAc53B,KAAKC,kBAAkB43B,eAAeF,GAC1D,OAAOG,QAAQF,EAAYpsB,MAAK,SAAAusB,GAAI,OAAKA,EAAKC,OAASntB,KAAektB,EAAKE,KAAOF,EAAKE,IAAMptB,S,mCAK7F7K,KAAKk4B,YAAYl4B,KAAK62B,aAAa72B,KAAK0V,MAAMmK,MAAMsY,a,iCAK3CvtB,GACT,GAAGA,EAAMwtB,qBAAuBp4B,KAAK+zB,YAAYwD,aAAah3B,IAAOqK,EAAMmH,eAA3E,CAGA,IAAME,EAAQrH,EAAMqH,MAAQrH,EAAMqH,MAAQ,EACpCmlB,EAAOxsB,EAAMmH,eAAiBE,EAC9BomB,EAAoBr4B,KAAK+zB,YAAYuE,8BAA8BppB,SAAStE,EAAMkE,QAAQC,MAChG/O,KAAKq3B,cAAcD,EAAMxsB,EAAOytB,M,oCAGpBjB,GAAgD,IAA1CxsB,EAAyC,uDAAjC,KAAMytB,EAA2B,wDAC3D,GAAY,MAARjB,GAAgBF,MAAME,GAExB,MAAM,IAAI1F,MAAJ,iEAAoE0F,IAE5E,IAAMmB,EAAO3tB,EAAQA,EAAMC,UAAY7K,KAAK0V,MAAMohB,iBAC5C0B,EAAgB5tB,EAAQ5K,KAAKy3B,YAAY7sB,GAAS,KAElD6tB,EAAmBJ,GACvBr4B,KAAK04B,mBAAmBH,KACvBC,GAAyC,MAAxBA,EAAcztB,OAG5B4T,EAAU8Z,EAAoBz4B,KAAK62B,aAAa0B,GAAQnB,EAAQoB,EAAcztB,OAIpF,IAAM2lB,EAAM1wB,KAAKo2B,+BAA+BxrB,GAChD5K,KAAKk4B,YAAYvZ,EAAS+R,K,6BAGrB9lB,GACL,IAAM4tB,EAAgBx4B,KAAKy3B,YAAY7sB,GACvC,GAAK4tB,EAAL,CAGA,IAAMd,EAAO13B,KAAK24B,QAAQ/tB,GAC1B,GAAK8sB,EAAL,CAOK13B,KAAK+zB,YAAY6E,iBAAiB1pB,SAAStE,EAAMkE,QAAQC,QAC5D/O,KAAK+1B,YAAc,CACjBx1B,GAAIqK,EAAMkE,QAAQC,KAClB2oB,OACA7sB,UAAWD,EAAMC,YAIrB,IAAM4tB,EAA2C,MAAxBD,EAAcztB,QACrC/K,KAAK+zB,YAAY8E,yBAAyB3pB,SAAStE,EAAMkE,QAAQC,OACjE/O,KAAK04B,mBAAmB9tB,EAAMC,WAC1B8T,GAAW8Z,EAAmBz4B,KAAK62B,aAAajsB,EAAMC,WAAa2tB,EAAcztB,QAAU2sB,EA1WvF,EA8WV,IAAMhH,EAAM1wB,KAAKo2B,+BAA+BxrB,GAChD5K,KAAKk4B,YAAYvZ,EAAS+R,O,+BAGnB9lB,GAEP,MAAK5K,KAAK+1B,aAAenrB,EAAMkE,QAAQC,OAAS/O,KAAK+1B,YAAYx1B,IAC5DqK,EAAMC,UAAY7K,KAAK+1B,YAAYlrB,UA7Ud,KA8UtBD,EAAMkuB,OAAS1D,EAAsBlmB,SAAStE,EAAMmuB,SAFxD,CAMA,IAAMC,EAAS/jB,KAAKgkB,MAAMj5B,KAAK+1B,YAAY2B,KAAO13B,KAAK+zB,YAAYmF,sBAC7Dva,EAAU3e,KAAK62B,aAAajsB,EAAMC,WAAamuB,EACrDh5B,KAAKk4B,YAAYvZ,M,8BAGX/T,GACN,GAAGA,EAAMwtB,qBAAuBp4B,KAAK+zB,YAAYwD,aAAah3B,IAAOqK,EAAMmH,eAA3E,CAGA,IAAMymB,EAAgBx4B,KAAKy3B,YAAY7sB,GACjC4rB,EAAQx2B,KAAKm5B,gBAAgBvuB,GAE7B6tB,GAAoBD,GAAyC,MAAxBA,EAAcztB,QACvD/K,KAAK+zB,YAAYuE,8BAA8BppB,SAAStE,EAAMkE,QAAQC,OACtE/O,KAAK04B,mBAAmB9tB,EAAMC,WAG1B8T,GAAW8Z,EAAmBz4B,KAAK62B,aAAajsB,EAAMC,WAAa2tB,EAAcztB,QAAUyrB,EA3YvF,EA+YV,IAAM9F,EAAM1wB,KAAKo2B,+BAA+BxrB,GAChD5K,KAAKk4B,YAAYvZ,EAAS+R,M,yCAGT7lB,GACjB,OAAO7K,KAAK81B,WAAWjrB,UAAY7K,KAAK+zB,YAAYqF,uBAAyBvuB,I,kCAGnED,GACN5K,KAAK+zB,YAAYsF,eAAenqB,SAAStE,EAAMkE,QAAQC,OACzD/O,KAAKs5B,uBAAuB1uB,GAE1B5K,KAAK+zB,YAAYwF,iBAAiBrqB,SAAStE,EAAMkE,QAAQC,OAC3D/O,KAAKw5B,qB,mCAII5uB,GACP5K,KAAK+zB,YAAYsF,eAAenqB,SAAStE,EAAMkE,QAAQC,OACzD/O,KAAKs5B,uBAAuB1uB,GAE1B5K,KAAK+zB,YAAYwF,iBAAiBrqB,SAAStE,EAAMkE,QAAQC,OAC3D/O,KAAKw5B,qB,sCAKP,IAAMnD,EAAQr2B,KAAKs2B,mBACnBt2B,KAAKk4B,YAAY,KAAM,KAAM7B,K,6CAGRzrB,GACrB,IAAM8lB,EAAM1wB,KAAKo2B,+BAA+BxrB,GAChD5K,KAAKk4B,YAAY,KAAMxH,K,yCAIvB,IAAM2F,EAAQr2B,KAAKs2B,mBACnBt2B,KAAKk4B,YAAY,KAAM,KAAM7B,K,oCAWuB,IAA1CtrB,EAAyC,uDAAhC,KAAM2lB,EAA0B,uDAApB,KAAM2F,EAAc,uDAAN,KACvCxrB,EAAY7K,KAAK0V,MAAMohB,kBAEf,MAAV/rB,GAAkBmsB,MAAMnsB,MAC1BA,EAAS/K,KAAK62B,aAAahsB,KAElB,MAAP6lB,GAAewG,MAAMxG,MACvBA,EAAM1wB,KAAKo2B,mCAEA,MAATC,GAAiBa,MAAMb,MACzBA,EAAQr2B,KAAKs2B,oBAEfvrB,EAAS2lB,EAAMzb,KAAKC,IAAIwb,EAAK3lB,GAAUA,EACvC,IAAM0uB,EAAWz5B,KAAK81B,WAChB4D,EAAW,CACf3uB,SACA2lB,MACA2F,QACAxrB,aAGF,GADA7K,KAAK81B,WAAa4D,EACdD,EAAU,CACZ,IAAME,EAAiB35B,KAAK45B,wBAAwBH,EAAUC,GAC9D15B,KAAK21B,OAASgE,EACd35B,KAAK41B,aAAe+D,EAAiBF,EAASpD,MAC9Cr2B,KAAK61B,eAAiB6D,EAAS7uB,UAAY4uB,EAAS5uB,WAAa4uB,EAASpD,MAExEqD,EAAS3uB,OAAS2uB,EAAShJ,KAC7B1wB,KAAK65B,WAAWH,EAAS7uB,a,8CAIL4uB,EAAUC,GAChC,IAAKD,IAAaC,EAChB,MAAM,IAAIhI,MAAJ,gFAAmF+H,EAAnF,uBAA0GC,IAElH,IAAMI,EAAWL,EAAS/I,IAAM1wB,KAAK+5B,kBAAkBN,EAAS5uB,UAAW4uB,EAAS1uB,OAAQ0uB,EAASpD,MAAOoD,EAAS/I,KAAOsJ,IAC5H,OAAIF,GAAYJ,EAAS7uB,UAChB,GAET7K,KAAKi6B,QAAQH,GAENJ,EAAS7uB,UAAYivB,K,uDAGgB,IAAflvB,EAAc,uDAAN,KAC/BsvB,EAAal6B,KAAKm6B,qBACxB,GAAID,EACF,OAAOA,EAET,IAAM1B,EAAgBx4B,KAAKy3B,YAAY7sB,GACvC,OAAI4tB,GAAsC,MAArBA,EAAc9H,MAAgBwG,MAAMsB,EAAc9H,KAC9D8H,EAAc9H,IAGhB1wB,KAAK81B,WAAWpF,M,wCAWP0J,EAAWC,EAAYhE,EAAOiE,GAC9C,GAAkB,MAAdD,GAAsBnD,MAAMmD,IACnB,MAAThE,GAAiBa,MAAMb,IACR,MAAfiE,GAAuBpD,MAAMoD,IAChB,MAAbF,GAAqBlD,MAAMkD,GAC7B,MAAM,IAAI1I,MAAJ,4EAA+E2I,EAA/E,oBAAqGhE,EAArG,kBAAoHiE,EAApH,wBAA+IF,IAEvJ,OAAIC,GAAcC,EACTF,EAEK,IAAV/D,EACK2D,IAEFI,GAAcE,EAAcD,GAAchE,I,qCAQxB,IAAdkC,EAAa,uDAAN,KAIlB,GAHKA,IACHA,EAAOv4B,KAAK0V,MAAMohB,kBAEhByB,EAAOv4B,KAAK81B,WAAWjrB,UAEzB,OAAO7K,KAAK81B,WAAW/qB,OAEzB,IAAMwvB,EAAUhC,EAAOv4B,KAAK81B,WAAWjrB,UACjC2vB,EAAYx6B,KAAK81B,WAAW/qB,OAAS/K,KAAK81B,WAAWO,MAAQkE,EACnE,OAAOv6B,KAAK81B,WAAWpF,IAAMzb,KAAKC,IAAIlV,KAAK81B,WAAWpF,IAAK8J,GAAaA,I,iCAG/DjC,GACLv4B,KAAKg2B,sBAGTh2B,KAAKy6B,gBAAgBlC,GACrBv4B,KAAKg2B,qBAAsB,K,8BAGrBuC,GACDv4B,KAAKg2B,sBAGVh2B,KAAK06B,kBAAkBnC,GACvBv4B,KAAKg2B,qBAAsB,K,wCAmBXuC,GAChB,GAAY,MAARA,GAAgBrB,MAAMqB,GACxB,MAAM,IAAI7G,MAAJ,qEAAwE6G,IAGhFv4B,KAAK26B,aAAaC,eAAe,CAC/B1vB,KAAM,mBACNL,UAAW0tB,EACX9a,SAAUzd,KAAK0V,MAAMgI,SACrB/O,SAAU3O,KAAK0V,MAAMgI,SACrB6Z,aAAcv3B,KAAK+zB,YAAYwD,aAAah3B,O,sCAShCg4B,GACd,GAAY,MAARA,GAAgBrB,MAAMqB,GACxB,MAAM,IAAI7G,MAAJ,mEAAsE6G,IAG9Ev4B,KAAK26B,aAAaC,eAAe,CAC/B1vB,KAAM,iBACNL,UAAW0tB,EACX9a,SAAUzd,KAAK0V,MAAMgI,SACrB/O,SAAU3O,KAAK0V,MAAMgI,SACrB6Z,aAAcv3B,KAAK+zB,YAAYwD,aAAah3B,O,6CAQzBqF,EAAQiF,M,+CAe7B,OAAO7K,KAAKi2B,cAAgBj2B,KAAKm2B,4B,GApkBCxoB,KAAhC8nB,EACG1lB,aAAe,CACpB4qB,aAAcE,IACd95B,MAAO+5B,IAEPC,kBAAmBC,KALjBvF,EAcGsB,cAAgB,EAdnBtB,EAoBGwB,eAAgB,EApBnBxB,EA0BG4D,eAAiB,GA1BpB5D,EAgCG8D,iBAAmB,GAhCtB9D,EAmCG6C,8BAAgC,GAnCnC7C,EAoCGoD,yBAA2B,GApC9BpD,EAqCGwF,0BAA4B,GArC/BxF,EAyDG2D,sBAAwB,IAzD3B3D,EA+DGyD,qBAAuB,EA/D1BzD,EAkEGmD,iBAAmB,GAsgBbnD,O,oGC7nBTxd,E,kDACJ,WAAYjP,GAAmB,IAAD,8BAC5B,cAAMA,IACDsC,SAAWhD,IAAeC,MAFH,E,uDAMnBqC,GACT,GAAIA,EAAMwtB,qBAAuBp4B,KAAKsL,SAAS/K,GAA/C,CAGA,IAEI62B,EAFEvwB,EAAU+D,EAAMkE,QAAQC,KAC1BkD,EAAQ,EAERyZ,IAAmCxc,SAASrI,IAC9CuwB,EAAOxsB,EAAMmH,eACT0Z,IAAkCvc,SAASrI,GAE7CuwB,GADAnlB,EAAQ2Z,KAAqB5rB,KAAKC,kBAAkB4L,QAAQ1L,IAAO2R,wCAAwCvR,IAAM,EAAI,GAAK62B,EAEjHvwB,IAAY1G,IAAOsoB,mBAAmBloB,GAE/C62B,GADAnlB,EAAQ4Z,KAAc7rB,KAAKC,kBAAkB4L,QAAQ1L,IAAO2R,wCAAwCvR,IAAM,EAAI,GAAK62B,EAE1GvwB,IAAY1G,IAAOwrB,oBAAoBprB,KAEhD62B,GADAnlB,EAAQ6Z,KAAc9rB,KAAKC,kBAAkB4L,QAAQ1L,IAAO2R,wCAAwCvR,IAAM,EAAI,GAAK62B,KAIrHnlB,EAAQrH,EAAMqH,MACdmlB,EAAOxsB,EAAMmH,eAAiBE,GAGhCjS,KAAKk7B,cAAcr0B,EAASuwB,EAAMnlB,EAAOjS,KAAKy3B,YAAY7sB,GAAQA,EAAMC,c,6CAInDD,GACrB,OAAQA,EAAMuwB,cAAgBrD,QAAQ93B,KAAKy3B,YAAY7sB,Q,GApChCwwB,KAwCZnjB,O,kOC7BT4N,E,kDAgBJ,WAAY7c,GAAmB,IAAD,EAK5B,OAL4B,qBAC5B,cAAMA,IAXRC,OAAiB,EAUa,EAT9BoyB,YAAsB,EASQ,EAR9BC,WAAqB,EAQS,EAP9B1qB,OAAiB,EAOa,EAN9B2qB,WAAqB,EAMS,EAL9BC,oBAAsB,EAAKv7B,kBAAkBmtB,OAASqO,IAAMC,gBAAkBv7B,IAAOw7B,aAAex7B,IAAOy7B,gBAK7E,EAHpB7qB,iBAGoB,IAFpBC,eAEoB,EAG5B,EAAKtH,OAAS,EAAKzJ,kBAAkB47B,YAAYrb,IAAUsb,QAAQv7B,IAE9D,EAAKmJ,QAITV,EAAQgI,UAAwB+qB,IAAI,CACnC77B,MAAOC,IAAO+oB,YACd1oB,SAAUV,IAAUW,iBAAiBC,WACrCI,SAAU,GACVG,IAAK,CACHC,KAAM,MAERE,eAAgB,CACdC,YAAY,EACZC,sBAAuB,MAI3B,EAAK0I,iBAAiBC,IAAOhB,OAAOiB,GAAGC,KAAiBjK,MAAMC,IAAO+oB,aAAc,EAAKrW,UACxF,EAAK7I,iBAAiBC,IAAOO,UAAUN,GAAGC,KAAiBjK,MAAMC,IAAO67B,cAAe,EAAKC,QAC5F,EAAKjyB,iBAAiBC,IAAO6O,YAAY5O,GAAGC,KAAiBjK,MAAMC,IAAO67B,cAAe,EAAKC,QAxBlE,GAM1B,e,qDAyBKrxB,GACP5K,KAAKiJ,QAAU2B,EAAMG,QAAUH,EAAMI,UAAY,GACjDhL,KAAKq7B,aAAe,I,6BAGfzwB,GACL5K,KAAKs7B,YAAc,EACft7B,KAAK+Q,YAAYS,aAAaxR,KAAKw7B,oBAAoBj7B,KACzDP,KAAK+Q,YAAYmrB,YAAYl8B,KAAKw7B,oBAAoBj7B,IAAI,EAAOqK,EAAMC,WACvE7K,KAAK4Q,QAAU,GAEf5Q,KAAKu7B,YAAc,I,kCAKrB,OACE,kBAAC,IAAD,CACExvB,SAAUC,IAAgBoW,OAC1BlW,KAAK,WACL1L,SAAUqM,IAAmB2T,UAC7BrU,QACE,+CACWnM,KAAKu7B,WADhB,IACiD,IAApBv7B,KAAKu7B,WAAL,eAD7B,yCAC4G,6BAD5G,WAEWr1B,YAAiBlG,KAAKs7B,WAAat7B,KAAKm8B,cAAe,GAFlE,+DAEiI,6BAFjI,sBAGsBn8B,KAAKs7B,WAH3B,iDAGqFnuB,YAAanN,KAAKm8B,eAHvG,KAGwH,6BACtH,4BACE,gDAAiBj2B,YAAiBoqB,YAAYtwB,KAAKs7B,WAAYt7B,KAAKq7B,YAAae,MAAjF,uGAIN9vB,SACE,oCACE,yBAAK9F,MAAO,CAAE61B,QAAS,QACpBzK,YAA0B5xB,KAAKs7B,WAAYt7B,KAAKq7B,YAAae,KAC9D,oDAAyB,uCAAzB,+DAAqG,kBAAC,IAAD,CAAW77B,GAAIJ,IAAO+oB,YAAY3oB,KAAvI,cAKN,kBAAC,IAAD,CAAsBL,MAAOC,IAAO+oB,aAClC,oCACGlpB,KAAK4Q,OADR,MACmB5Q,KAAKs7B,WADxB,KACsCp1B,YAAiBlG,KAAK4Q,OAAU5Q,KAAKs7B,YAD3E,MAC2F,mDACzF,6BACA,kBAAC,IAAD,CAAgBvwB,OAAQ/K,KAAKiJ,c,oCA/CrC,OAAO0mB,YAAkByM,IAA0Bp8B,KAAKq7B,iB,GA5CnC1tB,KAAnBkY,EACG9V,aAAe,CACpBgB,YAAaoB,IACbnB,UAAWlR,KAgGA+lB,O,kLCtGT7C,E,4MAKMnL,kB,4DA2BR,OACE,kBAAC,IAAD,CACE9L,SAAUC,IAAgBoW,KAAK,IAC/BlW,KAAK,WACLC,QAAO,qBAAgBnM,KAAK20B,OAArB,mBAAsC30B,KAAK0e,MAA3C,4BAEP,kBAAC,IAAD,CACEpT,SAAUhD,IAAeC,MACzBokB,MAAK,UAAKzmB,YAAiBlG,KAAKs8B,eAA3B,MACLzP,MAAM,8B,4BAMP,IAAD,OACJ,MAAO,CACLkC,MAAO,QACPwN,IAAK,QACLC,OAAQ,kBACN,kBAAC,IAAD,KACE,kBAAC,IAAD,CACEhI,QAAS,EAAK3c,aACd4kB,cAAY,S,6BA/CpB,OAAOz8B,KAAK6X,aAAa8c,QAAU,I,4BAInC,OAAO30B,KAAK6X,aAAa8c,OAAS30B,KAAK6X,aAAa6c,WAAa,I,oCAIjE,OAAO10B,KAAK20B,OAAS30B,KAAK0e,OAAS,I,oDAInC,MAAO,CACL9Y,OAAQ,EAAI5F,KAAKs8B,cACjBl2B,WAAY,CACVC,MAAO,EAAIq2B,IACXp2B,QAAS,EAAIq2B,IACbp2B,MAAO,EAAIq2B,KAEbp2B,MAAOC,IAAeC,gB,GA3BDiH,KAArBqV,EACGjT,aAAe,CACpB8H,aAAcI,KA6DH+K,O,kOCxDTrL,E,kDAUJ,WAAY3O,GAAmB,IAAD,8BAC5B,cAAMA,IAHR6zB,SAAsC,GAIpC,EAAK7yB,iBAAiBC,IAAOqH,SAASpH,GAAGC,KAAkB,EAAK2yB,oBAFpC,E,iEAsB5B,OAAOC,M,yCAGUnyB,GACjB,IAAMoyB,EAAmB/nB,KAAKgkB,OAAOruB,EAAMC,UAAY7K,KAAK0V,MAAMmK,MAAMC,YAAc,KACtF9f,KAAK68B,SAASG,GAAqBh9B,KAAK68B,SAASG,IAAqBh9B,KAAK2e,U,6BAGtE/T,GACL,8DAAaA,GACb,IAAMoyB,EAAmB/nB,KAAKgkB,OAAOruB,EAAMC,UAAY7K,KAAK0V,MAAMmK,MAAMC,YAAc,KACtF9f,KAAK68B,SAASG,GAAqBh9B,KAAK68B,SAASG,IAAqBh9B,KAAK2e,U,+BAGpE/T,GACP,gEAAeA,GACf,IAAMoyB,EAAmB/nB,KAAKgkB,OAAOruB,EAAMC,UAAY7K,KAAK0V,MAAMmK,MAAMC,YAAc,KACtF9f,KAAK68B,SAASG,GAAqBh9B,KAAK68B,SAASG,IAAqBh9B,KAAK2e,U,kCAGjEnZ,GACVA,EAAKxF,KAAKi9B,kCAAkCv3B,eAAc,SAACC,EAASC,EAAQC,GAAlB,OAAkCF,EAAQ,wSACjGI,KAAK,4BACLH,OAAOI,OAAKC,EAAE,sIAAiEC,YAAiB,EAAIN,OACpGC,YAHyF,WAGzEK,YAAiBL,EAAa,GAH2C,2B,kCAMjF,IAAD,OACJsnB,EAAOnmB,OAAOk2B,QAAQl9B,KAAK68B,UAAU11B,KAAI,yCAAiB,CAAE,KAAnB,KAAgC,IAAhC,SAC/C,OACE,kBAAC,IAAD,CACE4E,SAAUC,IAAgBoW,KAAK,GAC/B+a,MAAI,EACJ32B,MAAO,CAAE42B,aAAc,GAAIC,SAAU,UACrCC,OAAO,EACPC,WAAW,GAEX,kBAAC,IAAD,CAASxQ,QAAS,iEAA4B,gCAASyQ,YAAgBx9B,KAAK41B,cAA1D,IAAiF,6BAAjF,YAAgG,gCAAS1vB,YAAiBlG,KAAKs8B,eAA/B,KAAhG,oEAChB,yBAAK/vB,UAAU,QACb,yBAAKA,UAAU,iBACb,yBACEkxB,IAAI,oBACJC,IAAI,WAGR,yBACEnxB,UAAU,iBACV/F,MAAO,CAAEwnB,MAAO,MAFlB,SAMA,yBAAKzhB,UAAU,mBACZvM,KAAK41B,YAAc,GAClB,kBAAC,IAAD,CAAW+H,cAAY,IACpB,gBAAG1P,EAAH,EAAGA,OAAH,OACC,kBAAC,IAAD,CAAgBd,KAAMA,EAAMyQ,SAAU,EAAKloB,MAAMC,cAAgB,IAAMsY,OAAQA,a,oCAvE/F,OAAQjuB,KAAK41B,YAAc51B,KAAK61B,cAAiB,I,uDAIjD,MAAO,CACLjwB,OAAQ,EAAI5F,KAAKs8B,cACjBl2B,WAAY,CACVC,MAAO,GACPC,QAAS,IACTC,MAAO,IAETC,MAAOC,IAAeC,gB,GA3BE+uB,KAAxB9d,EACG5H,a,eACF0lB,IAAwB1lB,cAFzB4H,EAKG4f,aAAejvB,IAAeC,MALjCoP,EAMGof,cAAgB8G,IANnBlmB,EAOGsf,eAAgB,EA4FVtf,O,6GClHT6L,E,yLAKuBsa,EAAwBC,GACjD,OAAQA,EAAgBD,GAAkB99B,KAAK0V,MAAMC,gB,gCAG7C/K,GACR5K,KAAKg+B,0BAA4Bh+B,KAAK0V,MAAMohB,iBACnB92B,KAAKi+B,2BAA2Bj+B,KAAKk+B,mBAAoBl+B,KAAKg+B,2BAChEG,IACrB,iEAAgBvzB,IAEhB5K,KAAKo+B,SAAU,EACfp+B,KAAKq+B,OAAOC,W,GAhBSC,KAArB/a,EACGzT,a,eACFwuB,IAAiBxuB,cAmBTyT,O,sLCNTS,E,kDAUJ,WAAYjb,GAAmB,IAAD,8BAC5B,cAAMA,IAPRw1B,YAAcC,IAMgB,EAL9BC,0BAA4B,EAKE,EAJ9BC,uBAAyB,EAIK,EAH9BC,cAAgB,EAGc,EAFpB7tB,iBAEoB,EAE5B,EAAKrH,OAAS,EAAKzJ,kBAAkBW,UAAUT,IAAO0+B,uBAAuBt+B,IACzE,EAAKmJ,QAAU,EAAKzJ,kBAAkBmtB,OAASqO,IAAMqD,uBACvD,EAAKN,YAAcO,KAErB,EAAK/0B,iBAAiBC,IAAOK,KAAKJ,GAAGC,KAAkB,EAAKI,QANhC,E,mDASvBK,GAAmB,IAAD,EACjBU,EAAQ,UAAGV,EAAMW,sBAAT,aAAG,EAAsBC,MAAK,SAAAF,GAAQ,OAAIA,EAASJ,OAAS5C,IAAeC,MAAMhI,MAC/F,GAAK+K,EAAL,CAIAtL,KAAK4+B,cAAgBtzB,EAASosB,MAAQ,EACtC,IAAMsH,EAAsBh/B,KAAKw+B,YAAcx+B,KAAK4+B,cACpD,GAAK5+B,KAAK+Q,YAAYS,aAAarR,IAAO8C,aAAa1C,IAAvD,CAIA,GAAIP,KAAK+Q,YAAYkC,kBAAkB9S,IAAO8C,aAAa1C,IAAMy+B,EAAqB,CACpF,IAAMzsB,EAAuBvS,KAAK+Q,YAAYc,eAAe1R,IAAO8C,aAAa1C,GAAIy+B,GAGrF,OAFAh/B,KAAK0+B,2BAA6BnsB,OAClCvS,KAAK2+B,wBAA2BK,EAAsBzsB,GAGxDvS,KAAK0+B,2BAA6B1+B,KAAK+Q,YAAYc,eAAe1R,IAAO8C,aAAa1C,GAAIy+B,QATxFh/B,KAAK2+B,wBAA0BK,K,kCAajC,OACE,kBAAC,IAAD,CACEjzB,SAAUC,IAAgBC,SAAS,IACnCC,KAAK,WACL1L,SAAUqM,IAAmBC,SAE7B,kBAAC,IAAD,CAAsB5M,MAAOC,IAAO0+B,wBAClC,oCACG1xB,YAAanN,KAAK0+B,0BAA4B,KADjD,KAC0DvxB,aAAcnN,KAAK2+B,uBAAyB3+B,KAAK0+B,2BAA6B,KADxI,KACgJ,6D,GAjD7H/wB,KAAvBsW,EACGlU,aAAe,CACpBgB,YAAaoB,KAuDF8R,O,sJC9DTE,E,kDAEJ,WAAYnb,GAAmB,IAAD,8BAC5B,cAAMA,IACDU,OAAS,EAAKzJ,kBAAkBW,UAAUT,IAAO8+B,mBAAmB1+B,IAF7C,E,wDAU5B,OACE,kBAAC,IAAD,CACEwL,SAAUC,IAAgBC,SAAS,IACnCC,KAAK,WACL1L,SAAUqM,IAAmBC,SAE7B,kBAAC,IAAD,CAAsB5M,MAAOC,IAAO8+B,oBAClC,oCACE,kBAAC,IAAD,MADF,IACkB/4B,YAAiBlG,KAAKqW,eADxC,KACyD,8C,oCAZ/D,OAAOrW,KAAKC,kBAAkBwV,cAActV,IAAO++B,iBAAiB3+B,IAAMP,KAAK0V,MAAMC,kB,GAR/DhI,KA4BXwW,O,iLCrBTE,E,kDAgBJ,WAAYrb,GAAmB,IAAD,8BAC5B,cAAMA,IAXRC,OAAS,EAUqB,EAT9ByJ,MAAQ,EASsB,EAR9BysB,qBAA+B,EAQD,EAP9BC,eAAyB,EAOK,EAN9BC,qBAA+B,EAMD,EAL9BC,SAAW,EAKmB,EAJ9B1uB,OAAS,EAIqB,EAHpBG,iBAGoB,IAFpBC,eAEoB,EAE5B,EAAKtH,OAAS,EAAKzJ,kBAAkBW,UAAUT,IAAOgI,yBAAyB5H,IAC3E,EAAKmJ,QACNV,EAAQgI,UAAwB+qB,IAAI,CACnC77B,MAAOC,IAAOgI,yBACd3H,SAAUV,IAAUW,iBAAiBC,WACrCI,SAAU,GACVG,IAAK,CACHC,KAAM,MAERE,eAAgB,CACdC,YAAY,EACZC,sBAAuB,IACvBg+B,SAAU,kBAAM,EAAKA,aAI3B,EAAKt1B,iBAAiBC,IAAOs1B,IAAK,EAAKC,eACvC,EAAKx1B,iBAAiBC,IAAOK,KAAKJ,GAAGC,KAAiBjK,MAAMC,IAAOgI,0BAA2B,EAAKoC,QACnG,EAAKP,iBAAiBC,IAAOhB,OAAOiB,GAAGC,KAAiBjK,MAAMC,IAAOs/B,0BAA2B,EAAK5sB,UACrG,EAAK7I,iBAAiBC,IAAOuE,SAAU,EAAKkxB,gBArBhB,E,0DAwBhB90B,GAER5K,KAAKo/B,gBAAkBp/B,KAAK+Q,YAAYS,aAAarR,IAAOgI,yBAAyB5H,KAEpFP,KAAKm/B,sBAAwBv0B,EAAMC,UAAY7K,KAAKq/B,sBAEpDz0B,EAAMC,UAAY7K,KAAKo/B,eAAiBO,IAAiB9wB,MAE5D7O,KAAK+Q,YAAYmrB,YAAY/7B,IAAOgI,yBAAyB5H,IAAI,EAAOqK,EAAMC,WAC9E7K,KAAKs/B,UAAY,EACjBt/B,KAAK4Q,QAAU,K,+BAMjB5Q,KAAK0S,OAAS,EACd1S,KAAKm/B,qBAAuB,EAC5Bn/B,KAAKo/B,eAAiB,I,+BAGfx0B,GACY,IAAf5K,KAAK0S,QACP1S,KAAK0S,OAAS,EACd1S,KAAK+Q,YAAY+F,cAAc3W,IAAOgI,yBAAyB5H,GAAIqK,GACnE5K,KAAKm/B,qBAAuBn/B,KAAK0V,MAAMmK,MAAMC,YAGnB,IAAxB9f,KAAKo/B,gBAAsD,IAA9Bp/B,KAAKm/B,uBACpCn/B,KAAKm/B,qBAAuBv0B,EAAMC,UAClC7K,KAAKq/B,qBAAuBr/B,KAAKm/B,qBAAuBS,KAE1D5/B,KAAKo/B,eAAiBx0B,EAAMC,UAC5B7K,KAAKiJ,QAAU2B,EAAMG,QAAUH,EAAMI,UAAY,K,uCAIjDhL,KAAKs/B,UAAYrqB,KAAK4qB,KAAK7/B,KAAK0V,MAAMC,cAAgB,O,kCAItD,OACE,kBAAC,IAAD,CACE5J,SAAUC,IAAgBC,SAAS,IACnCC,KAAK,WACL1L,SAAUqM,IAAmBC,SAE7B,kBAAC,IAAD,CAAsB5M,MAAOC,IAAOgI,0BAClC,oCACE,kBAAC,IAAD,CAAgB4C,OAAQ/K,KAAKiJ,SAAU,6BACtCjJ,KAAK4Q,OAFR,IAEgB,gD,GA1FGjD,KAAvB0W,EAEGtU,aAAe,CACpBgB,YAAaoB,IACbnB,UAAWlR,KA8FAukB,O,sLCnGTM,E,kDAsBJ,WAAY3b,GAAmB,IAAD,gCAC5B,cAAMA,IArBR82B,SAoB8B,mBAnB3B3/B,IAAOqD,sBAAsBjD,GAAK,CACjCw/B,aAAc,EACdC,SAAU,EACVC,OAAQC,MAgBkB,cAd3B//B,IAAOkD,qBAAqB9C,GAAK,CAChCw/B,aAAc,EACdC,SAAU,EACVC,OAAQC,MAWkB,cAT3B//B,IAAOoD,oBAAoBhD,GAAK,CAC/Bw/B,aAAc,EACdC,SAAU,EACVC,OAAQzY,MAMkB,KAF9B2Y,UAAW,EAIT,EAAKz2B,OAAS,EAAKzJ,kBAAkBW,UAAUT,IAAOmD,uBAAuB/C,IAC7E,EAAK4/B,SAAW,EAAKlgC,kBAAkBmtB,OAASqO,IAAMC,gBACtD,EAAK1xB,iBAAiBC,IAAOK,KAAKJ,GAAGC,KAAiBjK,MAAMkgC,KAAkC,EAAK71B,QAJvE,E,mDAavBK,GACL,IAAM/D,EAAU+D,EAAMkE,QAAQC,KACxB7O,EAAQF,KAAK8/B,QAAQj5B,GAEvB3G,EAAM8/B,UAAYp1B,EAAMC,UAAY3K,EAAM8/B,SAAW9/B,EAAM+/B,SAC7D//B,EAAM6/B,cAAgB7/B,EAAM+/B,QAAUr1B,EAAMC,UAAY3K,EAAM8/B,WAEhE9/B,EAAM8/B,SAAWp1B,EAAMC,Y,kCAIvB,OACE,kBAAC,IAAD,CACEkB,SAAUC,IAAgBC,SAAS,IACnCC,KAAK,WACL1L,SAAUqM,IAAmBC,QAC7BX,QACE,0OAEE,4BACGnM,KAAKmgC,UACN,oDAA0BhzB,YAAanN,KAAK8/B,QAAQ3/B,IAAOoD,oBAAoBhD,IAAIw/B,aAAe,KAAlG,KACA,sDAA4B5yB,YAAanN,KAAK8/B,QAAQ3/B,IAAOqD,sBAAsBjD,IAAIw/B,aAAe,KAAtG,KACA,qDAA2B5yB,YAAanN,KAAK8/B,QAAQ3/B,IAAOkD,qBAAqB9C,IAAIw/B,aAAe,KAApG,QAKN,kBAAC,IAAD,CAAsB7/B,MAAOC,IAAOmD,wBAClC,oCACG6J,YAAanN,KAAKqgC,kBAAoB,KADzC,KACiD,2D,wCAnCvD,OAAOr5B,OAAOwF,OAAOxM,KAAK8/B,SACvB34B,KAAI,SAAAjH,GAAK,OAAIA,EAAM6/B,gBACnB1yB,QAAO,SAACqR,EAAOC,GAAR,OAAoBD,EAAQC,IAAS,O,GAhCxBhR,KAyEZgX,O,6JC9ETE,E,kDAWJ,WAAY7b,GAAmB,IAAD,8BAC5B,cAAMA,IAPRs3B,OAAS,EAMqB,EAL9BC,cAAgB,EAKc,EAJ9BC,OAAS,EAIqB,EAH9BhgC,cAG8B,IAFpBwQ,eAEoB,EAE5B,EAAKtH,OAAS,EAAKzJ,kBAAkBW,UAAUT,IAAOsgC,oBAAoBlgC,KAAO,EAAKN,kBAAkBmtB,OAASqO,IAAMiF,oBACvH,EAAKlgC,SAAW,EAAKP,kBAAkBmtB,OAASqO,IAAMiF,oBAAsB7zB,IAAmBuK,QAAUvK,IAAmBC,QAC5H,EAAK9C,iBAAiBC,IAAOgK,YAAY/J,GAAGC,KAAiBjK,MAAMC,IAAOmF,mBAAoB,EAAKq7B,QACnG,EAAK32B,iBAAiBC,IAAOgK,YAAY/J,GAAGC,KAAiBjK,MAAMC,IAAOkF,qBAAsB,EAAKu7B,UACrG,EAAK52B,iBAAiBC,IAAOK,KAAKJ,GAAGC,KAAiBjK,MAAMC,IAAOsgC,qBAAsB,EAAKl2B,QAC1F,EAAKb,QACNV,EAAQgI,UAAwB+qB,IAAI,CACnC77B,MAAOC,IAAOsgC,oBACdjgC,SAAUV,IAAUW,iBAAiBuC,QACrClC,SAAU,GACVG,IAAK,CACHC,KAAM,QAbgB,E,uDAoB5BlB,KAAKugC,eAAiB,I,+BAItBvgC,KAAKsgC,QAAU,I,+BAIftgC,KAAKwgC,QAAU,I,kCAIf,OAAIxgC,KAAKwgC,OAAS,EAEd,kBAAC,IAAD,CACEz0B,SAAUC,IAAgBC,SAAS,IACnCC,KAAK,WACL1L,SAAUR,KAAKQ,UAEf,kBAAC,IAAD,CAAsBN,MAAOC,IAAOsgC,qBAClC,oCACGzgC,KAAKsgC,OADR,IACgB,wCADhB,MACwCtgC,KAAKugC,cAD7C,IAC4D,2CAD5D,IACoF,6BACjFvgC,KAAKwgC,OAFR,IAEgB,2CAMf,S,GA3Da7yB,KAApBkX,EAEG9U,aAAe,CACpBiB,UAAWlR,KA6DA+kB,O,wMClETd,E,kDAkBJ,WAAY/a,GAAmB,IAAD,8BAC5B,cAAMA,IAPRs2B,SAAmB,EAMW,EAL9B9D,oBAAsB,EAAKv7B,kBAAkBmtB,OAASqO,IAAMC,gBAAkBv7B,IAAOw7B,aAAex7B,IAAOy7B,gBAK7E,EAHpB5qB,eAGoB,IAFpB4U,gBAEoB,EAG5B,EAAK5b,iBAAiBC,IAAOuE,SAAU,EAAKkxB,gBAC/B,EAAK3L,YACbtB,cAAczjB,KAAK,EAAKwsB,qBAE5BxyB,EAAQgI,UAAwB+qB,IAAI,CACnC77B,MAAO,EAAKs7B,oBACZh7B,SAAUV,IAAUW,iBAAiBC,WACrCC,QAAS,EAAKV,kBAAkBW,UAAUT,IAAO0gC,gBAAgBtgC,IAAM,EAAI,EAC3EO,SAAU,GACVG,IAAK,CACHC,KAAM,MAERE,eAAgB,CACdC,YAAY,EACZC,sBAAuB,IACvBg+B,SAAU,kBAAM,EAAKA,aAlBG,E,6DAwB5Bt/B,KAAKs/B,UAAYrqB,KAAK4qB,KAAK7/B,KAAK8gC,qBAAuB,KACnD9gC,KAAKC,kBAAkBW,UAAUT,IAAO0gC,gBAAgBtgC,MAC1DP,KAAKs/B,UAAY,GAEnBt/B,KAAKs/B,UAAYt/B,KAAK4lB,WAAW0V,a,kCAIjC,OACE,kBAAC,IAAD,CACEvvB,SAAUC,IAAgBC,SAAS,IACnCC,KAAK,WACL1L,SAAUqM,IAAmBuK,SAE7B,kBAAC,IAAD,CAAsBlX,MAAOF,KAAKw7B,qBAChC,oCACE,kBAAC,IAAD,CAAgBzwB,OAAQ/K,KAAKiJ,gB,GA1DlB+oB,KAAjBjO,EACGwO,eAAiBpoB,IADpB4Z,EAEGoP,eAAiB4N,IAFpBhd,EAGG8O,4BAA8B,CAAC1yB,IAAO67B,cAHzCjY,EAIG8P,gBAAiB,EAJpB9P,EAMGhU,a,2BACFiiB,IAAcjiB,c,IACjBiB,UAAWlR,IACX8lB,WAAYC,MAyDD9B,O,8HCzETb,E,kDAMJ,WAAYla,GAAmB,IAAD,8BAC5B,cAAMA,IAJRg4B,iBAG8B,IAF9B1c,iBAE8B,EAE5B,EAAK0c,YAAc,EAAK/gC,kBAAkBW,UAAUT,IAAO8gC,qBAAqB1gC,IAChF,EAAK+jB,YAAc,EAAKrkB,kBAAkBW,UAAUT,IAAO6T,oBAAoBzT,IAHnD,E,4DAMdqK,GACd,IAAM8sB,EAAI,uEAAyB9sB,GAC7B/D,EAAU+D,EAAMkE,QAAQC,KAC9B,OAAI/O,KAAKghC,aAAehhC,KAAKC,kBAAkB4L,QAAQ1L,IAAO+gC,mBAAmB3gC,KAAOsG,IAAY1G,IAAOghC,WAAW5gC,GAC7Gm3B,EAAO0J,IAEZphC,KAAKskB,aAAetkB,KAAKC,kBAAkB4L,QAAQ1L,IAAO4B,kBAAkBxB,KAAOsG,IAAY1G,IAAO2B,iBAAiBvB,GAClHm3B,EAAOjQ,IAETiQ,M,GArBkBsD,KAAvB9X,EACGqU,aAAejvB,IAAeC,MAwBxB2a,O,oNCjBTqC,E,kDAaJ,WAAYvc,GAAmB,IAAD,EAK5B,OAL4B,qBAC5B,cAAMA,IARR0J,MAAgB,EAOc,EAN9B2uB,QAAkB,EAMY,EAL9Bp4B,OAAS,EAKqB,EAHpB+H,eAGoB,IAFpB+C,aAEoB,EAG5B,EAAKrK,OAAS,EAAKzJ,kBAAkB47B,YAAYrb,IAAU8gB,OAAO/gC,IAE7D,EAAKmJ,QAITV,EAAQgI,UAAwB+qB,IAAI,CACnC77B,MAAOC,IAAOgpB,iBACd3oB,SAAUV,IAAUW,iBAAiBC,WACrCI,SAAU,GACVG,IAAK,CACHC,KAAM,MAERE,eAAgB,CACdC,YAAY,EACZC,sBAAuB,MAI3B,EAAK0I,iBAAiBC,IAAOK,KAAKJ,GAAGC,KAAiBjK,MAAMC,IAAOgpB,kBAAmB,EAAK5e,QAC3F,EAAKP,iBAAiBC,IAAOgK,YAAY/J,GAAGC,KAAiBjK,MAAMC,IAAOohC,yBAA0B,EAAKC,UACzG,EAAKx3B,iBAAiBC,IAAOhB,OAAOiB,GAAGC,KAAiBjK,MAAMC,IAAOshC,yBAA0B,EAAK5uB,UAxBxE,GAM1B,e,qDA0BF7S,KAAK0S,OAAS,I,iCAId1S,KAAKqhC,SAAW,I,+BAGTz2B,GACP5K,KAAKiJ,QAAU2B,EAAMG,QAAUH,EAAMI,UAAY,K,kCAIjD,OACE,kBAAC,IAAD,CACEe,SAAUC,IAAgBoW,OAC1BlW,KAAK,WACL1L,SAAUqM,IAAmB2T,UAC7BrU,QACE,+CACWnM,KAAK0S,MADhB,IACuC,IAAf1S,KAAK0S,MAAc,OAAS,QADpD,+CACyG1S,KAAKqhC,QAD9G,IACyI,IAAjBrhC,KAAKqhC,QAAgB,OAAS,QADtJ,IAEE,6BAFF,6CAG6CrhC,KAAKiJ,OAHlD,cAGqEkE,YAAcnN,KAAKiJ,OAASjJ,KAAK0V,MAAMC,cAAiB,KAH7H,SAOF,kBAAC,IAAD,CAAsBzV,MAAOC,IAAOgpB,kBAClC,oCACE,kBAAC,IAAD,MADF,IACkBjjB,YAAiBlG,KAAKyc,QADxC,KACkD,iDAChD,6BACA,kBAAC,IAAD,MAHF,IAGgBvW,YAAiBlG,KAAKyc,OAASilB,KAH/C,KAGiF,+D,6BAjCvF,OAAO1hC,KAAK+T,QAAQ0B,cAActV,IAAOohC,wBAAwBhhC,IAAMP,KAAK0V,MAAMC,kB,GAzCxDhI,KAAxB4X,EACGxV,aAAe,CACpBiB,UAAWlR,IACXiU,QAAS8B,KAgFE0P,O,kMCrFTE,E,kDAWJ,WAAYzc,GAAmB,IAAD,EAK5B,OAL4B,qBAC5B,cAAMA,IAPRC,OAAiB,EAMa,EAL9B6Q,YAAsB,EAKQ,EAJ9BmI,YAAsB,EAIQ,EAFpBjR,eAEoB,EAG5B,EAAKtH,OAAS,EAAKzJ,kBAAkB47B,YAAYrb,IAAUmhB,UAAUphC,IAEhE,EAAKmJ,QAITV,EAAQgI,UAAwB+qB,IAAI,CACnC77B,MAAOC,IAAOipB,8BACd5oB,SAAUV,IAAUW,iBAAiBC,WACrCI,SAAU,GACVG,IAAK,CACHC,KAAM,MAERE,eAAgB,CACdC,YAAY,EACZC,sBAAuB,MAI3B,EAAK0I,iBAAiBC,IAAOhB,OAAOiB,GAAGC,KAAiBjK,MAAM,CAACC,IAAOyhC,4BAA6BzhC,IAAOipB,gCAAiC,EAAKvW,UAChJ,EAAK7I,iBAAiBC,IAAOqH,SAASpH,GAAGC,KAAiBjK,MAAMC,IAAO0hC,wBAAyB,EAAK1f,YAvBzE,GAM1B,e,qDAoBKvX,GACP5K,KAAKiJ,QAAU2B,EAAMG,QAAUH,EAAMI,UAAY,K,iCAGxCJ,GACT5K,KAAK8Z,aAAelP,EAAMmH,eAC1B/R,KAAKiiB,aAAerX,EAAMqH,Q,kCAI1B,OACE,kBAAC,IAAD,CACElG,SAAUC,IAAgBoW,OAC1BlW,KAAK,WACL1L,SAAUqM,IAAmB2T,WAE7B,kBAAC,IAAD,CAAsBtgB,MAAOC,IAAOipB,+BAClC,oCACE,kBAAC,IAAD,CAAgBre,OAAQ/K,KAAKiJ,SAC7B,6BACA,kBAAC,IAAD,CAAc1I,GAAI+H,IAAeC,MAAMhI,GAAIiI,QAAM,IAHnD,IAGwDxI,KAAK8Z,YAH7D,IAG2E9Z,KAAKiiB,YAAcjiB,KAAK8Z,YAAY,uD,GAzD7FnM,KAAtB8X,EACG1V,aAAe,CACpBiB,UAAWlR,KA+DA2lB,O,2MC9DTE,E,kDAYJ,WAAY3c,GAAmB,IAAD,EAK5B,OAL4B,qBAC5B,cAAMA,IAPRC,OAAiB,EAMa,EAL9B64B,UAAoB,EAKU,EAHpB9wB,eAGoB,IAFpB+C,aAEoB,EAG5B,EAAKrK,OAAS,EAAKzJ,kBAAkB47B,YAAYrb,IAAUuhB,UAAUxhC,IAEhE,EAAKmJ,QAITV,EAAQgI,UAAwB+qB,IAAI,CACnC77B,MAAOC,IAAO8oB,aACdzoB,SAAUV,IAAUW,iBAAiBC,WACrCI,SAAU,IACVG,IAAK,CACHC,KAAM,MAERE,eAAgB,CACdC,YAAY,EACZC,sBAAuB,MAI3B,EAAK0I,iBAAiBC,IAAOhB,OAAOiB,GAAGC,KAAiBjK,MAAM,CAACC,IAAO6hC,oBAAqB7hC,IAAO8hC,0BAA2B,EAAKC,qBAClI,EAAKl4B,iBAAiBC,IAAOhB,OAAOiB,GAAGC,KAAkB,EAAK0I,UAvBlC,GAM1B,e,gEAoBgBjI,GAClB5K,KAAKiJ,QAAU2B,EAAMG,QAAUH,EAAMI,UAAY,K,+BAG1CJ,GACP,IAAMmM,EAAQ/W,KAAK+T,QAAQiD,UAAUpM,GAChCmM,GAAUA,EAAMlL,QAAQ1L,IAAOgiC,UAAU5hC,MAG9CP,KAAK8hC,WAAa7rB,YAAyBrL,EAAOw3B,Q,kCAIlD,OACE,kBAAC,IAAD,CACEr2B,SAAUC,IAAgBoW,OAC1BlW,KAAK,WACL1L,SAAUqM,IAAmB2T,WAE7B,kBAAC,IAAD,CAAsBtgB,MAAOC,IAAO8oB,cAClC,oCACE,yBAAKwU,IAAI,iBAAiBC,IAAI,SAASnxB,UAAU,SAAU,IAC1DY,YAAanN,KAAKiJ,QAFrB,IAE8B,iDAC5B,6BACA,yBAAKw0B,IAAI,iBAAiBC,IAAI,SAASnxB,UAAU,SAAU,IAC1DY,YAAanN,KAAKiJ,QALrB,IAK8B,2D,GA/Dd0E,KAApBgY,EACG5V,aAAe,CACpBiB,UAAWlR,IACXiU,QAAS8B,KAqEE8P,O,mMCrETM,E,kDAUJ,WAAYjd,GAAmB,IAAD,EAG5B,OAH4B,qBAC5B,cAAMA,IANR0W,YAAsB,EAKQ,EAJ9BmB,YAAsB,EAIQ,EAFpB9M,aAEoB,EAE5B,EAAKrK,OAAS,EAAKzJ,kBAAkB47B,YAAYrb,IAAU8gB,OAAO/gC,KAAO,EAAKN,kBAAkBoiC,oBAAoBliC,IAAOmiC,uBAAuB/hC,IAC7I,EAAKmJ,QAIV,EAAKgW,YAAc,EAAKzf,kBAAkB8f,qBAAqB5f,IAAOmiC,uBAAuB/hC,IAE7F,EAAKyJ,iBAAiBC,IAAOhB,OAAOiB,GAAGC,IAAkBiE,KAAsB,EAAKiS,iBATxD,GAI1B,e,4DAQYzV,GACd,IAAMmM,EAAQ/W,KAAK+T,QAAQiD,UAAUpM,GAChCmM,GAAUA,EAAMlL,QAAQ1L,IAAOohC,wBAAwBhhC,MAG5DP,KAAK6gB,aAAe5K,YAAyBrL,EAAO23B,IAA+BviC,KAAK0f,iB,kCAIxF,OACE,kBAAC,IAAD,CACE3T,SAAUC,IAAgBC,SAAS,IACnCC,KAAK,WACL1L,SAAUqM,IAAmB2T,WAE7B,kBAAC,IAAD,CAAkBtgB,MAAOC,IAAOmiC,uBAAwB5hB,KAAM1gB,KAAK0f,aACjE,oCACE,kBAAC,IAAD,CAAgB3U,OAAQ/K,KAAK6gB,qB,GAvCblT,KAAtBsY,EACGlW,aAAe,CACpBgE,QAAS8B,KA6CEoQ,O,0LC/CTF,E,kDAOJ,WAAY/c,GAAmB,IAAD,EAG5B,OAH4B,qBAC5B,cAAMA,IANRw5B,iBAA2B,EAKG,EAJ9BC,uBAAiC,EAIH,EAH9B/iB,YAAsB,EAGQ,EAF9BmB,YAAsB,EAIpB,EAAKnX,OAAS,EAAKzJ,kBAAkB47B,YAAYrb,IAAUsb,QAAQv7B,KAAO,EAAKN,kBAAkBoiC,oBAAoBliC,IAAOuiC,0BAA0BniC,IACjJ,EAAKmJ,QAIV,EAAKgW,YAAc,EAAKzf,kBAAkB8f,qBAAqB5f,IAAOuiC,0BAA0BniC,IAEhG,EAAKyJ,iBAAiBC,IAAOO,UAAUN,GAAGC,KAAiBjK,MAAMC,IAAO67B,cAAe,EAAK2G,gBAC5F,EAAK34B,iBAAiBC,IAAO6O,YAAY5O,GAAGC,KAAiBjK,MAAMC,IAAO67B,cAAe,EAAK2G,gBAC9F,EAAK34B,iBAAiBC,IAAOhB,OAAOiB,GAAGC,KAAiBjK,MAAM,CAACC,IAAOw7B,aAAcx7B,IAAOy7B,kBAAmB,EAAKgH,kBAXvF,GAI1B,e,6DAmBF5iC,KAAKyiC,wBAA0BI,KAAkDzG,IAA2ByG,KAC5G7iC,KAAKwiC,kBAAoB,I,uCAGV53B,GACV5K,KAAKC,kBAAkB4L,QAAQ1L,IAAO2iC,uBAAuBviC,MAGlEP,KAAK6gB,aAAe5K,YAAyBrL,EAAOm4B,IAAqC/iC,KAAK0f,iB,kCAI9F,OACE,kBAAC,IAAD,CACE3T,SAAUC,IAAgBC,SAAS,IACnCC,KAAK,WACL1L,SAAUqM,IAAmB2T,WAE7B,kBAAC,IAAD,CAAkBtgB,MAAOC,IAAOuiC,0BAA2BhiB,KAAM1gB,KAAK0f,aACpE,8CACK1f,KAAKgjC,4BADV,IACuC,qDACrC,kBAAC,IAAD,CAAgBj4B,OAAQ/K,KAAK6gB,mB,oDA7BrC,OAAO7gB,KAAKyiC,uBAAyBziC,KAAKwiC,mB,kDAI1C,OAAOvtB,KAAKguB,MAAMjjC,KAAKkjC,8BAAgCljC,KAAKwiC,sB,GA1BjC70B,KA2DhBoY,O,0LC7DTI,E,kDAOJ,WAAYnd,GAAmB,IAAD,EAG5B,OAH4B,qBAC5B,cAAMA,IANR0W,YAAsB,EAKQ,EAJ9ByjB,YAAsB,EAIQ,EAH9BC,YAAsB,EAGQ,EAF9BviB,YAAsB,EAIpB,EAAKnX,OAAS,EAAKzJ,kBAAkB47B,YAAYrb,IAAUmhB,UAAUphC,KAAO,EAAKN,kBAAkBoiC,oBAAoBliC,IAAOkjC,yBAAyB9iC,IAClJ,EAAKmJ,QAIV,EAAKgW,YAAc,EAAKzf,kBAAkB8f,qBAAqB5f,IAAOkjC,yBAAyB9iC,IAE/F,EAAKyJ,iBAAiBC,IAAOhB,OAAOiB,GAAGC,KAAiBjK,MAAM,CAACC,IAAOyhC,4BAA6BzhC,IAAOipB,gCAAiC,EAAKka,sBAChJ,EAAKt5B,iBAAiBC,IAAOqH,SAASpH,GAAGC,KAAiBjK,MAAMC,IAAO0hC,wBAAyB,EAAK1f,YAVzE,GAI1B,e,iEASiBvX,GACnB5K,KAAK6gB,aAAe5K,YAAyBrL,EAAO24B,IAAiCvjC,KAAK0f,gB,iCAGjF9U,GACT5K,KAAKmjC,aAAev4B,EAAMmH,eAC1B/R,KAAKojC,aAAex4B,EAAMqH,Q,kCAI1B,OACE,kBAAC,IAAD,CACElG,SAAUC,IAAgBC,SAAS,IACnCC,KAAK,WACL1L,SAAUqM,IAAmB2T,WAE7B,kBAAC,IAAD,CAAkBtgB,MAAOC,IAAOkjC,yBAA0B3iB,KAAM1gB,KAAK0f,aACnE,oCACE,kBAAC,IAAD,CAAgB3U,OAAQ/K,KAAK6gB,cAC5B7gB,KAAKmjC,YAFR,IAEsBnjC,KAAKmjC,YAAcnjC,KAAKojC,YAF9C,IAE2D,sD,GAvCvCz1B,KAgDfwY,O,0MC9CTE,E,kDAOJ,WAAYrd,GAAmB,IAAD,EAG5B,OAH4B,qBAC5B,cAAMA,IANR0W,YAAsB,EAKQ,EAJ9BmB,YAAsB,EAIQ,EAH9B2iB,gBAA0B,EAGI,EAF9BC,4BAAsC,EAIpC,EAAK/5B,OAAS,EAAKzJ,kBAAkB47B,YAAYrb,IAAUuhB,UAAUxhC,KAAO,EAAKN,kBAAkBoiC,oBAAoBliC,IAAOujC,0BAA0BnjC,IACnJ,EAAKmJ,QAIV,EAAKgW,YAAc,EAAKzf,kBAAkB8f,qBAAqB5f,IAAOujC,0BAA0BnjC,IAEhG,EAAKyJ,iBAAiBC,IAAOhB,OAAOiB,GAAGC,KAAiBjK,MAAM,CAACC,IAAO6hC,oBAAqB7hC,IAAO8hC,0BAA2B,EAAKC,qBAClI,EAAKl4B,iBAAiBC,IAAOhB,OAAOiB,GAAGC,KAAkB,EAAKkW,iBAC9D,EAAKrW,iBAAiBC,IAAOK,KAAKJ,GAAGC,KAAiBjK,MAAMC,IAAO8oB,cAAe,EAAK0a,mBAX3D,GAI1B,e,8DAUc/4B,GAChB5K,KAAKwjC,gBAAkB54B,EAAMC,Y,0CAGXD,GAClB5K,KAAK6gB,aAAe5K,YAAyBrL,EAAOg5B,IAAkC5jC,KAAK0f,cAEvF9U,EAAMC,UAAY7K,KAAKwjC,gBAAkBK,MAC3C7jC,KAAKyjC,6BAA+B74B,EAAMG,QAAUH,EAAMI,UAAY,M,sCAI1DJ,GACVA,EAAMC,UAAY7K,KAAKwjC,gBAAkBK,MAC3C7jC,KAAKyjC,6BAA+BxtB,YAAyBrL,EAAOw3B,Q,kCAKtE,OACE,kBAAC,IAAD,CACEr2B,SAAUC,IAAgBC,SAAS,IACnCC,KAAK,WACL1L,SAAUqM,IAAmB2T,UAC7BrU,QACE,sHACkFqxB,YAAgBx9B,KAAKyjC,+BAIzG,kBAAC,IAAD,CAAkBvjC,MAAOC,IAAOujC,0BAA2BhjB,KAAM1gB,KAAK0f,aACpE,oCACE,kBAAC,IAAD,CAAgB3U,OAAQ/K,KAAK6gB,cAC5B2c,YAAgBx9B,KAAKyjC,6BAFxB,IAEsD,sE,GAtDjC91B,KA+DhB0Y,O,uKCnETO,E,kDASJ,WAAY5d,GAAmB,IAAD,EAG5B,OAH4B,qBAC5B,cAAMA,IARRC,OAAiB,EAOa,EAN9B66B,WAAqB,EAMS,EAL9BC,uBAAiC,EAKH,EAJ9BC,aAAuB,EAIO,EAH9BC,yBAAmC,EAGL,EAF9BC,sBAAgC,EAI9B,EAAKx6B,OAAS,EAAKzJ,kBAAkBkR,sBAAsBhR,IAAOgkC,wBAAwB9yB,SACrF,EAAK3H,QAGV,EAAKM,iBAAiBC,IAAOK,KAAKJ,GAAGC,KAAiBjK,MAAMC,IAAO2D,OAAQ,EAAKsgC,SAChF,EAAKp6B,iBAAiBC,IAAOK,KAAKJ,GAAGC,KAAiBjK,MAAMC,IAAO0D,UAAW,EAAKwgC,WACnF,EAAKr6B,iBAAiBC,IAAOhB,OAAOiB,GAAGC,KAAiBjK,MAAMC,IAAOmkC,yBAA0B,EAAKC,gBARxE,GAI1B,e,oDAOI35B,GACN5K,KAAK8jC,YAAc,EACnB9jC,KAAK+jC,uBAAyBn5B,EAAMC,Y,gCAG5BD,GACR5K,KAAKgkC,cAAgB,EACrBhkC,KAAKikC,yBAA2Br5B,EAAMC,Y,qCAGzBD,GACb5K,KAAKiJ,QAAU2B,EAAMG,QAAUH,EAAMI,UAAY,K,kCAIjD,OACE,kBAAC,IAAD,CACEe,SAAUC,IAAgBoW,OAC1BlW,KAAK,WACL1L,SAAUqM,IAAmBwV,OAE7B,kBAAC,IAAD,CAAsBniB,MAAOC,IAAOgkC,yBAClC,kBAAC,IAAD,CAAgBp5B,OAAQ/K,KAAKiJ,SAC7B,6BACCjJ,KAAK8jC,WAHR,IAGoB,kBAAC,IAAD,CAAWvjC,GAAIJ,IAAO2D,MAAMvD,GAAIiI,QAAM,IAH1D,MAGiExI,KAAKgkC,aAHtE,IAGoF,kBAAC,IAAD,CAAWzjC,GAAIJ,IAAO0D,SAAStD,GAAIiI,QAAM,U,GA5CvGmF,KAoDfiZ,O,uJCzDT4d,E,kDA8CJ,WAAYx7B,GAAmB,IAAD,8BAC5B,cAAMA,IAJRy7B,iBAA+E,GAGjD,EAF9BC,KAAO,EAAK3Q,YAIV,EAAK/pB,iBAAiBC,IAAOK,KAAKJ,GAAGC,KAAiBjK,MAAM,EAAKykC,kBAAmB,EAAKp6B,QAF7D,E,mDA6BvBK,GAAmB,IAAD,SAEvB,GAAKA,EAAMW,eAAX,CAGA,IAAIq5B,EAAUh6B,EAAMkE,QAAQC,KACxB/O,KAAKsY,kCAAkCssB,KACzCh6B,EAAMkE,QAAU9O,KAAKsY,kCAAkCssB,GACvDA,EAAUh6B,EAAMkE,QAAQC,MAG1B,IAAMzD,EAAQ,UAAGV,EAAMW,sBAAT,aAAG,EAAsBC,MAAK,SAAAF,GAAQ,OAAIA,EAASJ,OAAS,EAAK25B,kBAC1Ev5B,IAIAtL,KAAKykC,iBAAiBG,KACzB5kC,KAAKykC,iBAAiBG,GAAW,CAC/BlyB,MAAO,EACPoyB,aAAc,IAIlB9kC,KAAKykC,iBAAiBG,GAASlyB,OAAS,EACxC1S,KAAKykC,iBAAiBG,GAASE,cAAgBx5B,EAASosB,MAAQ,M,+CAGzCx3B,GACvB,OACE,oCACGA,EAAMwS,MADT,SAEE,6BACCvF,YAAajN,EAAM4kC,cAHtB,IAGsC9kC,KAAK+kC,iBAH3C,Y,wCAQcC,EAAuBC,GACvC,IAAIC,EAAa,EAMjB,OALIF,EAAErY,MAAQsY,EAAEtY,MACduY,GAAc,EACLF,EAAErY,MAAQsY,EAAEtY,QACrBuY,EAAa,GAERA,I,kCA6BP,OACE,kBAACp5B,EAAA,EAAD,CAAWC,SAAU/L,KAAKmlC,6BACxB,yBAAK54B,UAAU,OACb,+BAAO,kBAAC64B,EAAA,EAAD,CAAc7kC,GAAIP,KAAK6kC,iBAA9B,UACC7kC,KAAKqlC,uB,uCApGZ,OAAOrlC,KAAK0kC,KAAKtsB,yB,qCAIjB,OAAOpY,KAAK0kC,KAAKnN,aAAah3B,K,uCAI9B,OAAOP,KAAK0kC,KAAKnN,aAAazvB,O,2CAI9B,OAAO9H,KAAK0kC,KAAKY,uB,wDAIjB,OAAOtlC,KAAK0kC,KAAKpsB,oC,kDAIjB,OAAOtY,KAAK0kC,KAAKa,iB,yCAkDO,IAAD,OACjB9Y,EAA4G,GAC9G+Y,EAAc,EAgBlB,OAfAxlC,KAAK2kC,iBAAiBr0B,SAAQ,SAAApQ,GACxB,EAAKukC,iBAAiBvkC,EAAMK,KAAO,EAAKkkC,iBAAiBvkC,EAAMK,IAAIukC,aAAe,IACpFrY,EAAMzd,KAAK,CACT4d,MAAO,EAAK0Y,qBAAqBE,GACjC3Y,MAAO3sB,EAAM4H,KACbjB,QAAS3G,EAAMK,GACfosB,MAAO1X,KAAKguB,MAAM,EAAKwB,iBAAiBvkC,EAAMK,IAAIukC,cAClDhY,aAAc,EAAK2Y,yBAAyB,EAAKhB,iBAAiBvkC,EAAMK,OAE1EilC,GAAe,MAInB/Y,EAAMiZ,KAAK1lC,KAAK2lC,mBAGd,kBAACnZ,EAAA,EAAD,CACEC,MAAOA,Q,GA9Ia9e,KAAtB62B,EAMGjN,kB,EANHiN,EAWGpsB,uBAAkC,GAXrCosB,EAmBGlsB,kCAA8H,GAnBjIksB,EA2BGc,qBAAiC,CACtC,UACA,UACA,UACA,UACA,UACA,UACA,WAlCEd,EAwCGe,eAAiBv5B,IAAgBoW,KAAK,IAyHhCoiB,Q,iBCxKToB,E,4HAAmBpB,GAAnBoB,EAEGrO,aAAejvB,IAAeC,MAFjCq9B,EAIGxtB,uB,YACFytB,KAKQD","file":"static/js/SurvivalHunter.7abb0f3f.chunk.js","sourcesContent":["import SPELLS from 'common/SPELLS';\r\nimport CoreAbilities from 'parser/core/modules/Abilities';\r\nimport { SpellbookAbility } from 'parser/core/modules/Ability';\r\nimport { hastedCooldown } from 'parser/hunter/shared/constants';\r\n\r\nclass Abilities extends CoreAbilities {\r\n  spellbook(): SpellbookAbility[] {\r\n    const combatant = this.selectedCombatant;\r\n    return [\r\n      //region Baseline Rotational\r\n      {\r\n        spell: SPELLS.KILL_COMMAND_CAST_SV,\r\n        buffSpellId: SPELLS.FLANKERS_ADVANTAGE.id,\r\n        category: Abilities.SPELL_CATEGORIES.ROTATIONAL,\r\n        charges: combatant.hasTalent(SPELLS.ALPHA_PREDATOR_TALENT.id) ? 2 : 1,\r\n        cooldown: haste => hastedCooldown(6, haste),\r\n        gcd: {\r\n          base: 1500,\r\n        },\r\n        timelineSortIndex: 3,\r\n        castEfficiency: {\r\n          suggestion: true,\r\n          recommendedEfficiency: combatant.hasTalent(SPELLS.ALPHA_PREDATOR_TALENT.id) ? 0.65 : .85,\r\n        },\r\n      },\r\n      {\r\n        spell: [SPELLS.RAPTOR_STRIKE, SPELLS.RAPTOR_STRIKE_AOTE],\r\n        category: Abilities.SPELL_CATEGORIES.ROTATIONAL,\r\n        enabled: !combatant.hasTalent(SPELLS.MONGOOSE_BITE_TALENT.id),\r\n        gcd: {\r\n          base: 1500,\r\n        },\r\n        timelineSortIndex: 1,\r\n      },\r\n      {\r\n        spell: SPELLS.WILDFIRE_BOMB,\r\n        category: Abilities.SPELL_CATEGORIES.ROTATIONAL,\r\n        enabled: !combatant.hasTalent(SPELLS.WILDFIRE_INFUSION_TALENT.id),\r\n        charges: combatant.hasTalent(SPELLS.GUERRILLA_TACTICS_TALENT.id) ? 2 : 1,\r\n        cooldown: haste => hastedCooldown(18, haste),\r\n        gcd: {\r\n          base: 1500,\r\n        },\r\n        castEfficiency: {\r\n          suggestion: true,\r\n          recommendedEfficiency: .85,\r\n        },\r\n      },\r\n      {\r\n        spell: SPELLS.SERPENT_STING_SV,\r\n        buffSpellId: SPELLS.VIPERS_VENOM_BUFF.id, //to show users of the Vipers Venom talent when they were casting Serpent Sting with Viper's Venom active in the timeline\r\n        category: Abilities.SPELL_CATEGORIES.ROTATIONAL,\r\n        gcd: {\r\n          base: 1500,\r\n        },\r\n        timelineSortIndex: 4,\r\n      },\r\n      {\r\n        spell: SPELLS.CARVE,\r\n        category: Abilities.SPELL_CATEGORIES.ROTATIONAL_AOE,\r\n        enabled: !combatant.hasTalent(SPELLS.BUTCHERY_TALENT.id),\r\n        cooldown: haste => 6 / (1 + haste),\r\n        gcd: {\r\n          base: 1500,\r\n        },\r\n      },\r\n      {\r\n        spell: SPELLS.COORDINATED_ASSAULT,\r\n        buffSpellId: SPELLS.COORDINATED_ASSAULT.id,\r\n        category: Abilities.SPELL_CATEGORIES.ROTATIONAL,\r\n        cooldown: 120,\r\n        gcd: {\r\n          static: 0,\r\n        },\r\n        castEfficiency: {\r\n          suggestion: true,\r\n          recommendedEfficiency: .85,\r\n        },\r\n        timelineSortIndex: 6,\r\n      },\r\n      //endregion\r\n\r\n      //region Talents\r\n      {\r\n        spell: [SPELLS.MONGOOSE_BITE_TALENT, SPELLS.MONGOOSE_BITE_TALENT_AOTE],\r\n        buffSpellId: SPELLS.MONGOOSE_FURY.id,\r\n        category: Abilities.SPELL_CATEGORIES.ROTATIONAL,\r\n        enabled: combatant.hasTalent(SPELLS.MONGOOSE_BITE_TALENT.id),\r\n        gcd: {\r\n          base: 1500,\r\n        },\r\n        timelineSortIndex: 2,\r\n      },\r\n      {\r\n        spell: SPELLS.STEEL_TRAP_TALENT,\r\n        category: Abilities.SPELL_CATEGORIES.ROTATIONAL,\r\n        enabled: combatant.hasTalent(SPELLS.STEEL_TRAP_TALENT.id),\r\n        cooldown: 30,\r\n        gcd: {\r\n          base: 1500,\r\n        },\r\n        castEfficiency: {\r\n          suggestion: true,\r\n          recommendedEfficiency: 0.85,\r\n        },\r\n      },\r\n      {\r\n        spell: [SPELLS.FLANKING_STRIKE_TALENT, SPELLS.FLANKING_STRIKE_PLAYER],\r\n        category: Abilities.SPELL_CATEGORIES.ROTATIONAL,\r\n        enabled: combatant.hasTalent(SPELLS.FLANKING_STRIKE_TALENT.id),\r\n        cooldown: 30,\r\n        gcd: {\r\n          base: 1500,\r\n        },\r\n        castEfficiency: {\r\n          suggestion: true,\r\n          recommendedEfficiency: 0.9,\r\n        },\r\n      },\r\n      {\r\n        spell: [SPELLS.VOLATILE_BOMB_WFI, SPELLS.PHEROMONE_BOMB_WFI, SPELLS.SHRAPNEL_BOMB_WFI, SPELLS.WILDFIRE_INFUSION_TALENT],\r\n        shownSpell: SPELLS.WILDFIRE_INFUSION_TALENT,\r\n        category: Abilities.SPELL_CATEGORIES.ROTATIONAL,\r\n        enabled: combatant.hasTalent(SPELLS.WILDFIRE_INFUSION_TALENT.id),\r\n        charges: combatant.hasTalent(SPELLS.GUERRILLA_TACTICS_TALENT.id) ? 2 : 1,\r\n        cooldown: haste => hastedCooldown(18, haste),\r\n        gcd: {\r\n          base: 1500,\r\n        },\r\n        timelineSortIndex: 5,\r\n        castEfficiency: {\r\n          suggestion: true,\r\n          recommendedEfficiency: .85,\r\n        },\r\n      },\r\n      {\r\n        spell: SPELLS.CHAKRAMS_TALENT,\r\n        category: Abilities.SPELL_CATEGORIES.ROTATIONAL,\r\n        enabled: combatant.hasTalent(SPELLS.CHAKRAMS_TALENT.id),\r\n        cooldown: 20,\r\n        gcd: {\r\n          base: 1500,\r\n        },\r\n        castEfficiency: {\r\n          suggestion: true,\r\n          recommendedEfficiency: 0.9,\r\n        },\r\n      },\r\n      {\r\n        spell: SPELLS.BUTCHERY_TALENT,\r\n        category: Abilities.SPELL_CATEGORIES.ROTATIONAL_AOE,\r\n        enabled: combatant.hasTalent(SPELLS.BUTCHERY_TALENT.id),\r\n        charges: 3,\r\n        cooldown: haste => hastedCooldown(9, haste),\r\n        gcd: {\r\n          base: 1500,\r\n        },\r\n        castEfficiency: {\r\n          suggestion: true,\r\n          recommendedEfficiency: 0.9,\r\n        },\r\n      },\r\n      {\r\n        spell: SPELLS.CAMOUFLAGE_TALENT,\r\n        category: Abilities.SPELL_CATEGORIES.UTILITY,\r\n        cooldown: 60,\r\n        enabled: combatant.hasTalent(SPELLS.CAMOUFLAGE_TALENT.id),\r\n        gcd: {\r\n          base: 1500,\r\n        },\r\n      },\r\n      //endregion\r\n\r\n      //region Defensives\r\n      {\r\n        spell: SPELLS.EXHILARATION,\r\n        category: Abilities.SPELL_CATEGORIES.DEFENSIVE,\r\n        isDefensive: true,\r\n        cooldown: 120,\r\n        gcd: {\r\n          base: 1500,\r\n        },\r\n      },\r\n      {\r\n        spell: SPELLS.SURVIVAL_OF_THE_FITTEST,\r\n        category: Abilities.SPELL_CATEGORIES.DEFENSIVE,\r\n        isDefensive: true,\r\n        cooldown: 180,\r\n        gcd: {\r\n          static: 0,\r\n        },\r\n      },\r\n      {\r\n        spell: SPELLS.ASPECT_OF_THE_TURTLE,\r\n        buffSpellId: SPELLS.ASPECT_OF_THE_TURTLE.id,\r\n        category: Abilities.SPELL_CATEGORIES.DEFENSIVE,\r\n        isDefensive: true,\r\n        cooldown: 180 * (1 - (combatant.hasTalent(SPELLS.BORN_TO_BE_WILD_TALENT.id) ? 0.2 : 0)),\r\n        gcd: {\r\n          static: 0,\r\n        },\r\n      },\r\n      //endregion\r\n\r\n      //region Utility\r\n      {\r\n        spell: SPELLS.ASPECT_OF_THE_EAGLE,\r\n        category: Abilities.SPELL_CATEGORIES.UTILITY,\r\n        cooldown: 90 * (1 - (combatant.hasTalent(SPELLS.BORN_TO_BE_WILD_TALENT.id) ? 0.2 : 0)),\r\n        gcd: {\r\n          static: 0,\r\n        },\r\n      },\r\n      {\r\n        spell: SPELLS.ASPECT_OF_THE_CHEETAH,\r\n        category: Abilities.SPELL_CATEGORIES.UTILITY,\r\n        cooldown: 180 * (1 - (combatant.hasTalent(SPELLS.BORN_TO_BE_WILD_TALENT.id) ? 0.2 : 0)),\r\n        gcd: {\r\n          static: 0,\r\n        },\r\n      },\r\n      {\r\n        spell: SPELLS.HARPOON,\r\n        category: Abilities.SPELL_CATEGORIES.UTILITY,\r\n        cooldown: 20,\r\n        gcd: {\r\n          static: 0,\r\n        },\r\n      },\r\n      {\r\n        spell: SPELLS.MUZZLE,\r\n        category: Abilities.SPELL_CATEGORIES.UTILITY,\r\n        cooldown: 15,\r\n        gcd: {\r\n          static: 0,\r\n        },\r\n      },\r\n      {\r\n        spell: SPELLS.DISENGAGE,\r\n        category: Abilities.SPELL_CATEGORIES.UTILITY,\r\n        cooldown: 20,\r\n        gcd: {\r\n          static: 0,\r\n        },\r\n      },\r\n      {\r\n        spell: SPELLS.FREEZING_TRAP,\r\n        category: Abilities.SPELL_CATEGORIES.UTILITY,\r\n        cooldown: 30, //TODO: Set to 25 at Shadowlands launch\r\n        gcd: {\r\n          base: 1500,\r\n        },\r\n      },\r\n      {\r\n        spell: SPELLS.TAR_TRAP,\r\n        category: Abilities.SPELL_CATEGORIES.UTILITY,\r\n        cooldown: 30, //TODO: Set to 25 at Shadowlands launch\r\n        gcd: {\r\n          base: 1500,\r\n        },\r\n      },\r\n      {\r\n        spell: SPELLS.FLARE,\r\n        category: Abilities.SPELL_CATEGORIES.UTILITY,\r\n        cooldown: 20,\r\n        gcd: {\r\n          base: 1500,\r\n        },\r\n      },\r\n      {\r\n        spell: SPELLS.WING_CLIP,\r\n        category: Abilities.SPELL_CATEGORIES.UTILITY,\r\n        gcd: {\r\n          base: 1500,\r\n        },\r\n      },\r\n      {\r\n        spell: SPELLS.MISDIRECTION,\r\n        category: Abilities.SPELL_CATEGORIES.UTILITY,\r\n        cooldown: 30,\r\n        gcd: {\r\n          static: 0,\r\n        },\r\n      },\r\n      {\r\n        spell: SPELLS.HUNTERS_MARK,\r\n        category: Abilities.SPELL_CATEGORIES.UTILITY,\r\n        gcd: {\r\n          base: 1000,\r\n        },\r\n      },\r\n      //endregion\r\n\r\n      //region Pets\r\n      {\r\n        spell: [SPELLS.PRIMAL_RAGE_1, SPELLS.PRIMAL_RAGE_2],\r\n        buffSpellId: [SPELLS.PRIMAL_RAGE_1.id, SPELLS.PRIMAL_RAGE_2.id],\r\n        category: Abilities.SPELL_CATEGORIES.UTILITY,\r\n        cooldown: 360,\r\n        gcd: {\r\n          static: 0,\r\n        },\r\n      },\r\n\r\n      {\r\n        spell: SPELLS.MASTERS_CALL,\r\n        category: Abilities.SPELL_CATEGORIES.UTILITY,\r\n        cooldown: 45,\r\n        gcd: {\r\n          static: 0,\r\n        },\r\n      },\r\n      {\r\n        spell: [\r\n          SPELLS.CALL_PET_1,\r\n          SPELLS.CALL_PET_2,\r\n          SPELLS.CALL_PET_3,\r\n          SPELLS.CALL_PET_4,\r\n          SPELLS.CALL_PET_5,\r\n        ],\r\n        category: Abilities.SPELL_CATEGORIES.UTILITY,\r\n        gcd: {\r\n          base: 1500,\r\n        },\r\n      },\r\n      {\r\n        spell: SPELLS.DISMISS_PET,\r\n        category: Abilities.SPELL_CATEGORIES.UTILITY,\r\n        gcd: {\r\n          base: 1500,\r\n        },\r\n      },\r\n      {\r\n        spell: SPELLS.INTIMIDATION,\r\n        category: Abilities.SPELL_CATEGORIES.UTILITY,\r\n        cooldown: 60,\r\n        gcd: {\r\n          base: 1500,\r\n        },\r\n      },\r\n      {\r\n        spell: SPELLS.MEND_PET,\r\n        category: Abilities.SPELL_CATEGORIES.UTILITY,\r\n        cooldown: 10,\r\n        gcd: {\r\n          base: 1500,\r\n        },\r\n      },\r\n      //endregion\r\n    ];\r\n  }\r\n}\r\n\r\nexport default Abilities;\r\n","import SPELLS from 'common/SPELLS';\r\n\r\nimport CoreCooldownThroughputTracker, { BUILT_IN_SUMMARY_TYPES } from 'parser/shared/modules/CooldownThroughputTracker';\r\n\r\nclass CooldownThroughputTracker extends CoreCooldownThroughputTracker {\r\n  static cooldownSpells = [\r\n    ...CoreCooldownThroughputTracker.cooldownSpells,\r\n    {\r\n      spell: SPELLS.COORDINATED_ASSAULT,\r\n      summary: [\r\n        BUILT_IN_SUMMARY_TYPES.DAMAGE,\r\n      ],\r\n    },\r\n  ];\r\n\r\n  static ignoredSpells = [\r\n    ...CoreCooldownThroughputTracker.ignoredSpells,\r\n    SPELLS.BINDING_SHOT_TETHER.id,\r\n    SPELLS.BINDING_SHOT_ROOT.id,\r\n  ];\r\n}\r\n\r\nexport default CooldownThroughputTracker;\r\n","import React from 'react';\r\n\r\nimport CoreAlwaysBeCasting from 'parser/shared/modules/AlwaysBeCasting';\r\nimport { ThresholdStyle, When } from 'parser/core/ParseResults';\r\nimport SPELLS from 'common/SPELLS';\r\nimport { formatPercentage } from 'common/format';\r\nimport SpellLink from 'common/SpellLink';\r\nimport { i18n } from '@lingui/core';\r\nimport { t } from '@lingui/macro';\r\n\r\nclass AlwaysBeCasting extends CoreAlwaysBeCasting {\r\n  get suggestionThresholds() {\r\n    return {\r\n      actual: this.activeTimePercentage,\r\n      isLessThan: {\r\n        minor: 0.875,\r\n        average: 0.825,\r\n        major: 0.775,\r\n      },\r\n      style: ThresholdStyle.PERCENTAGE,\r\n    };\r\n  }\r\n\r\n  suggestions(when: When) {\r\n    when(this.suggestionThresholds).addSuggestion((suggest, actual, recommended) => suggest(<>Your downtime can be improved. Try to reduce the delay between casting spells. If everything is on cooldown, try and use <SpellLink id={SPELLS.RAPTOR_STRIKE.id} /> (or <SpellLink id={SPELLS.MONGOOSE_BITE_TALENT.id} /> if selected) to stay off the focus cap and do some damage.</>)\r\n      .icon('spell_mage_altertime')\r\n      .actual(i18n._(t('hunter.survival.suggestions.alwaysBeCasting.downtime')`${formatPercentage(1 - actual)}% downtime`))\r\n      .recommended(`<${formatPercentage(1 - recommended)}% is recommended`));\r\n  }\r\n}\r\n\r\nexport default AlwaysBeCasting;\r\n","import SPELLS from 'common/SPELLS';\r\nimport BLOODLUST_BUFFS from 'game/BLOODLUST_BUFFS';\r\nimport CoreBuffs from 'parser/core/modules/Buffs';\r\n\r\nclass Buffs extends CoreBuffs {\r\n  buffs() {\r\n    return [\r\n      {\r\n        spellId: SPELLS.COORDINATED_ASSAULT.id,\r\n        timelineHighlight: true,\r\n        triggeredBySpellId: SPELLS.COORDINATED_ASSAULT.id,\r\n      },\r\n      {\r\n        spellId: SPELLS.ASPECT_OF_THE_TURTLE.id,\r\n        timelineHighlight: true, // showing because it's relevant to know when we couldn't attack (this could explain some downtime)\r\n        triggeredBySpellId: SPELLS.ASPECT_OF_THE_TURTLE.id,\r\n      },\r\n      {\r\n        spellId: Object.keys(BLOODLUST_BUFFS).map(item => Number(item)),\r\n        timelineHighlight: true,\r\n      },\r\n    ];\r\n  }\r\n}\r\n\r\nexport default Buffs;\r\n","import React from 'react';\r\nimport PropTypes from 'prop-types';\r\nimport SPELLS from 'common/SPELLS';\r\nimport SpellLink from 'common/SpellLink';\r\nimport Checklist from 'parser/shared/modules/features/Checklist';\r\nimport Rule from 'parser/shared/modules/features/Checklist/Rule';\r\nimport Requirement from 'parser/shared/modules/features/Checklist/Requirement';\r\nimport PreparationRule from 'parser/shared/modules/features/Checklist/PreparationRule';\r\nimport GenericCastEfficiencyRequirement from 'parser/shared/modules/features/Checklist/GenericCastEfficiencyRequirement';\r\nimport ResourceIcon from 'common/ResourceIcon';\r\nimport RESOURCE_TYPES from 'game/RESOURCE_TYPES';\r\n\r\nconst SurvivalChecklist = ({ combatant, castEfficiency, thresholds }: any) => {\r\n  const AbilityRequirement = (props: any) => (\r\n    <GenericCastEfficiencyRequirement\r\n      castEfficiency={castEfficiency.getCastEfficiencyForSpellId(props.spell)}\r\n      {...props}\r\n    />\r\n  );\r\n  AbilityRequirement.propTypes = {\r\n    spell: PropTypes.number.isRequired,\r\n  };\r\n\r\n  return (\r\n    <Checklist>\r\n      <Rule\r\n        name=\"Use core abilities as often as possible\"\r\n        description={(\r\n          <>\r\n            Using your core abilities as often as possible can help raise your dps significantly. Some help more than others, but as a general rule of thumb you should be looking to use most of your damaging abilities and damage cooldowns as often as possible, unless you need to save them for a prioirty burst phase that is coming up soon.\r\n            {'  '}\r\n            <a href=\"https://www.icy-veins.com/wow/survival-hunter-pve-dps-rotation-cooldowns-abilities\" target=\"_blank\" rel=\"noopener noreferrer\">More info.</a>\r\n          </>\r\n        )}\r\n      >\r\n        <AbilityRequirement spell={SPELLS.KILL_COMMAND_CAST_SV.id} />\r\n        <AbilityRequirement spell={SPELLS.COORDINATED_ASSAULT.id} />\r\n\r\n        {combatant.hasTalent(SPELLS.FLANKING_STRIKE_TALENT.id) && <AbilityRequirement spell={SPELLS.FLANKING_STRIKE_TALENT.id} />}\r\n        {combatant.hasTalent(SPELLS.A_MURDER_OF_CROWS_TALENT.id) && <AbilityRequirement spell={SPELLS.A_MURDER_OF_CROWS_TALENT.id} />}\r\n        {combatant.hasTalent(SPELLS.WILDFIRE_INFUSION_TALENT.id) ? <AbilityRequirement spell={SPELLS.WILDFIRE_INFUSION_TALENT.id} /> : <AbilityRequirement spell={SPELLS.WILDFIRE_BOMB.id} />}\r\n        {combatant.hasTalent(SPELLS.CHAKRAMS_TALENT.id) && <AbilityRequirement spell={SPELLS.CHAKRAMS_TALENT.id} />}\r\n      </Rule>\r\n\r\n      {combatant.hasTalent(SPELLS.MONGOOSE_BITE_TALENT.id) ? (\r\n        <Rule\r\n          name=\"Mongoose Bite usage\"\r\n          description={(\r\n            <>\r\n              Using <SpellLink id={SPELLS.MONGOOSE_BITE_TALENT.id} /> properly is a key to achieving high dps. Maintaining high stacks of <SpellLink id={SPELLS.MONGOOSE_FURY.id} /> buff from as soon as possible and casting as much <SpellLink id={SPELLS.MONGOOSE_BITE_TALENT.id} />s on max stacks as possible is considered to be most effective.\r\n            </>\r\n          )}\r\n        >\r\n          <Requirement name={<><ResourceIcon id={RESOURCE_TYPES.FOCUS.id} noLink={false} /> Average focus on <SpellLink id={SPELLS.MONGOOSE_FURY.id} /> opening window </>} thresholds={thresholds.mongooseBiteAverageFocusThreshold} />\r\n          <Requirement name={<><SpellLink id={SPELLS.MONGOOSE_BITE_TALENT.id} /> hits on max stacks of <SpellLink id={SPELLS.MONGOOSE_FURY.id} /> </>} thresholds={thresholds.mongooseBite5StackHitPercentageThreshold} />\r\n        </Rule>\r\n      ) : null}\r\n\r\n      <Rule\r\n        name=\"Talent, cooldown and spell efficiency\"\r\n        description={(\r\n          <>\r\n            You want to be using your baseline spells as efficiently as possible, as well as choosing the right talents for the given scenario. If a talent isn't being used optimally for the encounter, you should consider swapping to a different talent.\r\n          </>\r\n        )}\r\n      >\r\n        {combatant.hasTalent(SPELLS.BIRDS_OF_PREY_TALENT.id) ? <Requirement name={<><SpellLink id={SPELLS.BIRDS_OF_PREY_TALENT.id} /> Effectiveness </>} thresholds={thresholds.birdPercentEffectiveness} /> : null}\r\n      </Rule>\r\n      <Rule\r\n        name={<>Downtime & <ResourceIcon id={RESOURCE_TYPES.FOCUS.id} noLink={false} /> focus capping</>}\r\n        description={(\r\n          <>\r\n            As a DPS, you should try to reduce the delay between casting spells, and stay off resource capping as much as possible. If everything is on cooldown, try and use {combatant.hasTalent(SPELLS.MONGOOSE_BITE_TALENT.id) ? <SpellLink id={SPELLS.MONGOOSE_BITE_TALENT.id} /> : <SpellLink id={SPELLS.RAPTOR_STRIKE.id} />} to stay off the focus cap and do some damage.\r\n          </>\r\n        )}\r\n      >\r\n        <Requirement name={<> Active time</>} thresholds={thresholds.downtimeSuggestionThresholds} />\r\n      </Rule>\r\n      <PreparationRule thresholds={thresholds} />\r\n    </Checklist>\r\n  );\r\n};\r\n\r\nSurvivalChecklist.propTypes = {\r\n  castEfficiency: PropTypes.object.isRequired,\r\n  combatant: PropTypes.shape({\r\n    hasTalent: PropTypes.func.isRequired,\r\n  }).isRequired,\r\n  thresholds: PropTypes.object.isRequired,\r\n};\r\n\r\nexport default SurvivalChecklist;\r\n","import React from 'react';\r\n\r\nimport SPELLS from 'common/SPELLS';\r\nimport Analyzer, { Options, SELECTED_PLAYER } from 'parser/core/Analyzer';\r\nimport { ThresholdStyle, When } from 'parser/core/ParseResults';\r\nimport { formatNumber, formatPercentage } from 'common/format';\r\nimport ItemDamageDone from 'interface/ItemDamageDone';\r\nimport SpellLink from 'common/SpellLink';\r\nimport Statistic from 'interface/statistics/Statistic';\r\nimport STATISTIC_CATEGORY from 'interface/others/STATISTIC_CATEGORY';\r\nimport STATISTIC_ORDER from 'interface/others/STATISTIC_ORDER';\r\nimport BoringSpellValueText from 'interface/statistics/components/BoringSpellValueText';\r\nimport Events, { ApplyBuffEvent, ApplyBuffStackEvent, CastEvent, DamageEvent, EventType, RemoveBuffEvent } from 'parser/core/Events';\r\nimport { currentStacks } from 'parser/shared/modules/helpers/Stacks';\r\nimport RESOURCE_TYPES from 'game/RESOURCE_TYPES';\r\nimport { MONGOOSE_BITE_MAX_STACKS, MONGOOSE_BITE_MAX_TRAVEL_TIME, RAPTOR_MONGOOSE_VARIANTS } from 'parser/hunter/survival/constants';\r\nimport { i18n } from '@lingui/core';\r\nimport { t } from '@lingui/macro';\r\n\r\n/**\r\n * Mongoose Fury increases Mongoose Bite damage by 15% for 14 sec, stacking up to 5 times. Successive attacks do not increase duration.\r\n *\r\n * Example log: https://www.warcraftlogs.com/reports/CDL6mZfWdcgQX9wT#fight=2&type=damage-done&source=23\r\n */\r\n\r\nclass MongooseBite extends Analyzer {\r\n\r\n  damage = 0;\r\n  mongooseBiteStacks: number[] = [];\r\n  lastMongooseBiteStack: number = 0;\r\n  totalWindowsStarted = 0;\r\n  fiveBiteWindows = 0;\r\n  aspectOfTheEagleFixed = false;\r\n  buffApplicationTimestamp: number = 0;\r\n  accumulatedFocusAtMomentOfCast = 0;\r\n  windowCheckedForFocus: boolean = false;\r\n\r\n  constructor(options: Options) {\r\n    super(options);\r\n\r\n    this.active = this.selectedCombatant.hasTalent(SPELLS.MONGOOSE_BITE_TALENT.id);\r\n\r\n    this.mongooseBiteStacks = Array.from({ length: MONGOOSE_BITE_MAX_STACKS + 1 }, x => 0);\r\n\r\n    this.addEventListener(Events.damage.by(SELECTED_PLAYER).spell(RAPTOR_MONGOOSE_VARIANTS), this.handleDamage);\r\n    this.addEventListener(Events.cast.by(SELECTED_PLAYER).spell(RAPTOR_MONGOOSE_VARIANTS), this.onCast);\r\n    this.addEventListener(Events.applybuff.by(SELECTED_PLAYER).spell(SPELLS.MONGOOSE_FURY), this.handleStacks);\r\n    this.addEventListener(Events.applybuffstack.by(SELECTED_PLAYER).spell(SPELLS.MONGOOSE_FURY), this.handleStacks);\r\n    this.addEventListener(Events.removebuff.by(SELECTED_PLAYER).spell(SPELLS.MONGOOSE_FURY), this.handleStacks);\r\n  }\r\n\r\n  get mongooseBiteByStacks() {\r\n    return this.mongooseBiteStacks;\r\n  }\r\n\r\n  get totalMongooseBites() {\r\n    return this.mongooseBiteStacks.reduce((totalHits: number, stackHits: number) => totalHits + stackHits, 0);\r\n  }\r\n\r\n  get fiveStackMongooseBites() {\r\n    return this.mongooseBiteStacks[MONGOOSE_BITE_MAX_STACKS];\r\n  }\r\n\r\n  get averageFocusOnMongooseWindowStart() {\r\n    return this.accumulatedFocusAtMomentOfCast / this.totalWindowsStarted;\r\n  }\r\n\r\n  get percentMaxStacksHit() {\r\n    return this.mongooseBiteStacks[MONGOOSE_BITE_MAX_STACKS] / this.totalMongooseBites;\r\n  }\r\n\r\n  get focusOnMongooseWindowThreshold() {\r\n    return {\r\n      actual: this.averageFocusOnMongooseWindowStart,\r\n      isLessThan: {\r\n        minor: 65,\r\n        average: 60,\r\n        major: 55,\r\n      },\r\n      style: ThresholdStyle.NUMBER,\r\n    };\r\n  }\r\n\r\n  get mongoose5StackHitThreshold() {\r\n    return {\r\n      actual: this.percentMaxStacksHit,\r\n      isLessThan: {\r\n        minor: 0.30,\r\n        average: 0.29,\r\n        major: 0.28,\r\n      },\r\n      style: ThresholdStyle.PERCENTAGE,\r\n    };\r\n  }\r\n\r\n  handleDamage(event: DamageEvent) {\r\n    // Because Aspect of the Eagle applies a traveltime to Mongoose Bite, it sometimes applies the buff before it hits, despite not increasing the damage.\r\n    // This fixes that, ensuring we reduce by 1, and later increasing it by one.\r\n    if (this.lastMongooseBiteStack === 1 && event.timestamp < this.buffApplicationTimestamp + MONGOOSE_BITE_MAX_TRAVEL_TIME) {\r\n      this.lastMongooseBiteStack -= 1;\r\n      this.aspectOfTheEagleFixed = true;\r\n    }\r\n    if (!this.mongooseBiteStacks[this.lastMongooseBiteStack]) {\r\n      this.mongooseBiteStacks[this.lastMongooseBiteStack] = 1;\r\n    } else {\r\n      this.mongooseBiteStacks[this.lastMongooseBiteStack] += 1;\r\n    }\r\n    if (this.aspectOfTheEagleFixed) {\r\n      this.lastMongooseBiteStack += 1;\r\n      this.aspectOfTheEagleFixed = false;\r\n    }\r\n    this.damage += event.amount + (event.absorbed || 0);\r\n  }\r\n\r\n  handleStacks(event: ApplyBuffEvent | ApplyBuffStackEvent | RemoveBuffEvent) {\r\n    this.lastMongooseBiteStack = currentStacks(event);\r\n    if (this.lastMongooseBiteStack === MONGOOSE_BITE_MAX_STACKS) {\r\n      this.fiveBiteWindows += 1;\r\n    }\r\n    if (event.type === EventType.ApplyBuff) {\r\n      this.buffApplicationTimestamp = event.timestamp;\r\n      this.totalWindowsStarted += 1;\r\n    }\r\n    if (event.type === EventType.RemoveBuff) {\r\n      this.windowCheckedForFocus = false;\r\n    }\r\n  }\r\n\r\n  onCast(event: CastEvent) {\r\n    if (!this.windowCheckedForFocus) {\r\n      const resource = event.classResources?.find(resource => resource.type === RESOURCE_TYPES.FOCUS.id);\r\n      if (resource) {\r\n        this.accumulatedFocusAtMomentOfCast += resource.amount || 0;\r\n      }\r\n      this.windowCheckedForFocus = true;\r\n    }\r\n    if (event.meta === undefined) {\r\n      event.meta = {\r\n        isEnhancedCast: false,\r\n        enhancedCastReason: '',\r\n      };\r\n    }\r\n    if (this.lastMongooseBiteStack === 5 && this.selectedCombatant.hasBuff(SPELLS.MONGOOSE_FURY.id)) {\r\n      event.meta.isEnhancedCast = true;\r\n      event.meta.enhancedCastReason = 'Mongoose Bite at 5 stacks of Mongoose Fury';\r\n    }\r\n  }\r\n\r\n  statistic() {\r\n    return (\r\n      <Statistic\r\n        position={STATISTIC_ORDER.OPTIONAL(1)}\r\n        size=\"flexible\"\r\n        tooltip={(\r\n          <>\r\n            You hit an average of {(this.mongooseBiteStacks[MONGOOSE_BITE_MAX_STACKS] / this.fiveBiteWindows).toFixed(1)} bites when you had {MONGOOSE_BITE_MAX_STACKS} stacks of Mongoose Fury. <br />\r\n            You hit an average of {(this.totalMongooseBites / this.totalWindowsStarted).toFixed(1)} bites per Mongoose Fury window started.\r\n          </>\r\n        )}\r\n        dropdown={(\r\n          <>\r\n            <table className=\"table table-condensed\">\r\n              <thead>\r\n                <tr>\r\n                  <th>Stacks</th>\r\n                  <th>Hits (total)</th>\r\n                  <th>Hits (%)</th>\r\n                </tr>\r\n              </thead>\r\n              <tbody>\r\n                {Object.values(this.mongooseBiteByStacks).map((e, i: string | number) => (\r\n                  <tr key={i}>\r\n                    <th>{i}</th>\r\n                    <td>{e}</td>\r\n                    <td>{formatPercentage(Number(e) / this.totalMongooseBites)}%</td>\r\n                  </tr>\r\n                ))}\r\n              </tbody>\r\n            </table>\r\n          </>\r\n        )}\r\n        category={STATISTIC_CATEGORY.TALENTS}\r\n      >\r\n        <BoringSpellValueText spell={SPELLS.MONGOOSE_BITE_TALENT}>\r\n          <ItemDamageDone amount={this.damage} /> <br />\r\n          {this.fiveStackMongooseBites}/{this.totalMongooseBites} <small>5 stack bites</small>\r\n\r\n        </BoringSpellValueText>\r\n      </Statistic>\r\n    );\r\n  }\r\n\r\n  suggestions(when: When) {\r\n    when(this.focusOnMongooseWindowThreshold).addSuggestion((suggest, actual, recommended) => suggest(<>When talented into <SpellLink id={SPELLS.MONGOOSE_BITE_TALENT.id} />, it's important to have accumulated a good amount of focus before you open a <SpellLink id={SPELLS.MONGOOSE_FURY.id} /> window in order to maximize the number of <SpellLink id={SPELLS.MONGOOSE_BITE_TALENT.id} />s at high stacks.</>)\r\n      .icon(SPELLS.MONGOOSE_BITE_TALENT.icon)\r\n      .actual(i18n._(t('hunter.survival.suggestions.mongooseBite.focusWindow')`${formatNumber(actual)} average focus on new window.`))\r\n      .recommended(`>${formatNumber(recommended)} is recommended`));\r\n    when(this.mongoose5StackHitThreshold).addSuggestion((suggest, actual, recommended) => suggest(<>It's important to cast as much <SpellLink id={SPELLS.MONGOOSE_BITE_TALENT.id} />s as possible when having max(5) stacks of <SpellLink id={SPELLS.MONGOOSE_FURY.id} />.</>)\r\n      .icon(SPELLS.MONGOOSE_BITE_TALENT.icon)\r\n      .actual(i18n._(t('hunter.survival.suggetsions.mongooseBite.maxStacksCasts')`${formatPercentage(actual)}% casts on max stacks.`))\r\n      .recommended(`>${formatPercentage(recommended)}% is recommended`));\r\n  }\r\n}\r\n\r\nexport default MongooseBite;\r\n","import React from 'react';\r\n\r\nimport SPELLS from 'common/SPELLS';\r\nimport { formatPercentage } from 'common/format';\r\nimport Analyzer, { Options, SELECTED_PLAYER, SELECTED_PLAYER_PET } from 'parser/core/Analyzer';\r\nimport { ThresholdStyle, When } from 'parser/core/ParseResults';\r\nimport { encodeTargetString } from 'parser/shared/modules/EnemyInstances';\r\nimport SpellLink from 'common/SpellLink';\r\nimport Statistic from 'interface/statistics/Statistic';\r\nimport STATISTIC_CATEGORY from 'interface/others/STATISTIC_CATEGORY';\r\nimport STATISTIC_ORDER from 'interface/others/STATISTIC_ORDER';\r\nimport { BOP_CA_EXTENSION_PER_CAST, RAPTOR_MONGOOSE_VARIANTS } from 'parser/hunter/survival/constants';\r\nimport BoringSpellValueText from 'interface/statistics/components/BoringSpellValueText';\r\nimport Events, { DamageEvent } from 'parser/core/Events';\r\nimport { MS_BUFFER } from 'parser/hunter/shared/constants';\r\nimport { i18n } from '@lingui/core';\r\nimport { t } from '@lingui/macro';\r\n\r\n/** Bird of Prey\r\n * Attacking your pet's target with Mongoose Bite, Raptor Strike, Butchery or Carve extends the duration of Coordinated Assault by  1.5 sec.\r\n *\r\n * Example log:\r\n * https://www.warcraftlogs.com/reports/6GjD12YkQCnJqPTz#fight=25&type=summary&source=19&translate=true\r\n */\r\n\r\nclass BirdOfPrey extends Analyzer {\r\n\r\n  petTarget: string = '';\r\n  playerTarget: string = '';\r\n  coordinatedAssaultExtended = 0;\r\n  wastedExtension = 0;\r\n  timestampAoE = 0;\r\n  targetsHitAoE: boolean[] = [];\r\n  aoeChecked = false;\r\n\r\n  constructor(options: Options) {\r\n    super(options);\r\n\r\n    this.active = this.selectedCombatant.hasTalent(SPELLS.BIRDS_OF_PREY_TALENT.id);\r\n\r\n    this.addEventListener(Events.damage.by(SELECTED_PLAYER_PET), this.onPetDamage);\r\n    this.addEventListener(Events.damage.by(SELECTED_PLAYER).spell([...RAPTOR_MONGOOSE_VARIANTS, SPELLS.CARVE, SPELLS.BUTCHERY_TALENT]), this.onPlayerDamage);\r\n    this.addEventListener(Events.cast.by(SELECTED_PLAYER).spell([SPELLS.CARVE, SPELLS.BUTCHERY_TALENT]), this.onAoECast);\r\n    this.addEventListener(Events.fightend, this.aoeCheck);\r\n  }\r\n\r\n  get birdPercentEffectiveness() {\r\n    return {\r\n      actual: this.percentExtension,\r\n      isLessThan: {\r\n        minor: 0.95,\r\n        average: 0.85,\r\n        major: 0.75,\r\n      },\r\n      style: ThresholdStyle.PERCENTAGE,\r\n    };\r\n  }\r\n\r\n  get timeExtendedInSeconds() {\r\n    return this.coordinatedAssaultExtended / 1000;\r\n  }\r\n\r\n  get extensionTimeLostInSeconds() {\r\n    return this.wastedExtension / 1000;\r\n  }\r\n\r\n  get percentExtension() {\r\n    return this.coordinatedAssaultExtended / (this.coordinatedAssaultExtended + this.wastedExtension);\r\n  }\r\n\r\n  onAoECast() {\r\n    this.aoeChecked = false;\r\n  }\r\n\r\n  onPetDamage(event: DamageEvent) {\r\n    this.petTarget = encodeTargetString(event.targetID, event.targetInstance);\r\n  }\r\n\r\n  onPlayerDamage(event: DamageEvent) {\r\n    if (!this.aoeChecked && this.timestampAoE > 0 && event.timestamp > this.timestampAoE + MS_BUFFER) {\r\n      this.aoeCheck();\r\n    }\r\n    if (!this.selectedCombatant.hasBuff(SPELLS.COORDINATED_ASSAULT.id)) {\r\n      return;\r\n    }\r\n    const spellId = event.ability.guid;\r\n    this.playerTarget = encodeTargetString(event.targetID, event.targetInstance);\r\n    if (spellId === SPELLS.CARVE.id || spellId === SPELLS.BUTCHERY_TALENT.id) {\r\n      this.targetsHitAoE.push(this.playerTarget === this.petTarget);\r\n      this.timestampAoE = event.timestamp;\r\n    } else {\r\n      if (this.playerTarget === this.petTarget) {\r\n        this.coordinatedAssaultExtended += BOP_CA_EXTENSION_PER_CAST;\r\n      } else {\r\n        this.wastedExtension += BOP_CA_EXTENSION_PER_CAST;\r\n      }\r\n    }\r\n  }\r\n\r\n  aoeCheck() {\r\n    if (this.targetsHitAoE.includes(true)) {\r\n      this.coordinatedAssaultExtended += BOP_CA_EXTENSION_PER_CAST;\r\n    } else {\r\n      this.wastedExtension += BOP_CA_EXTENSION_PER_CAST;\r\n    }\r\n    this.targetsHitAoE = [];\r\n    this.aoeChecked = true;\r\n  }\r\n\r\n  suggestions(when: When) {\r\n    when(this.birdPercentEffectiveness).addSuggestion((suggest, actual, recommended) => suggest(<>When talented into <SpellLink id={SPELLS.BIRDS_OF_PREY_TALENT.id} />, it's important to cast <SpellLink id={SPELLS.RAPTOR_STRIKE.id} />, <SpellLink id={SPELLS.MONGOOSE_BITE_TALENT.id} />, <SpellLink id={SPELLS.CARVE.id} /> or <SpellLink id={SPELLS.BUTCHERY_TALENT.id} /> on the same target as your pet is attacking.</>)\r\n      .icon(SPELLS.BIRDS_OF_PREY_TALENT.icon)\r\n      .actual(i18n._(t('hunter.survival.suggestions.birdOfPrey.efficiency')`${formatPercentage(actual)}% of abilities extending CA were used on your pets target`))\r\n      .recommended(`${formatPercentage(recommended)}% is recommended`));\r\n  }\r\n\r\n  statistic() {\r\n    return (\r\n      <Statistic\r\n        position={STATISTIC_ORDER.OPTIONAL(1)}\r\n        size=\"flexible\"\r\n        tooltip={(\r\n          <>\r\n            <ul>\r\n              <li>You extended Coordinated Assault by {this.timeExtendedInSeconds} seconds.</li>\r\n              <li>You lost out on {this.extensionTimeLostInSeconds} seconds of Coordinated Assault by attacking a different target than your pet.</li>\r\n            </ul>\r\n          </>\r\n        )}\r\n        category={STATISTIC_CATEGORY.TALENTS}\r\n      >\r\n        <BoringSpellValueText spell={SPELLS.BIRDS_OF_PREY_TALENT}>\r\n          <>\r\n            <small>Extended CA by</small> {this.timeExtendedInSeconds}s\r\n          </>\r\n        </BoringSpellValueText>\r\n      </Statistic>\r\n    );\r\n  }\r\n}\r\n\r\nexport default BirdOfPrey;\r\n","import React from 'react';\r\n\r\nimport BaseChecklist from 'parser/shared/modules/features/Checklist/Module';\r\nimport CastEfficiency from 'parser/shared/modules/CastEfficiency';\r\nimport Combatants from 'parser/shared/modules/Combatants';\r\nimport PreparationRuleAnalyzer from 'parser/shared/modules/features/Checklist/PreparationRuleAnalyzer';\r\n\r\nimport Component from 'parser/hunter/survival/modules/checklist/Component';\r\n\r\nimport AlwaysBeCasting from '../features/AlwaysBeCasting';\r\nimport MongooseBite from '../../modules/talents/MongooseBite';\r\nimport BirdOfPrey from '../../modules/talents/BirdOfPrey';\r\n\r\nclass Checklist extends BaseChecklist {\r\n  static dependencies = {\r\n    combatants: Combatants,\r\n    castEfficiency: CastEfficiency,\r\n    preparationRuleAnalyzer: PreparationRuleAnalyzer,\r\n    alwaysBeCasting: AlwaysBeCasting,\r\n    mongooseBite: MongooseBite,\r\n    birdOfPrey: BirdOfPrey,\r\n  };\r\n\r\n  protected combatants!: Combatants;\r\n  protected castEfficiency!: CastEfficiency;\r\n  protected preparationRuleAnalyzer!: PreparationRuleAnalyzer;\r\n  protected alwaysBeCasting!: AlwaysBeCasting;\r\n  protected mongooseBite!: MongooseBite;\r\n  protected birdOfPrey!: BirdOfPrey;\r\n\r\n  render() {\r\n    return (\r\n      <Component\r\n        combatant={this.combatants.selected}\r\n        castEfficiency={this.castEfficiency}\r\n        thresholds={{\r\n          ...this.preparationRuleAnalyzer.thresholds,\r\n          downtimeSuggestionThresholds: this.alwaysBeCasting.suggestionThresholds,\r\n          mongooseBiteAverageFocusThreshold: this.mongooseBite.focusOnMongooseWindowThreshold,\r\n          mongooseBite5StackHitPercentageThreshold: this.mongooseBite.mongoose5StackHitThreshold,\r\n          birdPercentEffectiveness: this.birdOfPrey.birdPercentEffectiveness,\r\n        }}\r\n      />\r\n    );\r\n  }\r\n}\r\n\r\nexport default Checklist;\r\n","import SPELLS from 'common/SPELLS';\r\n\r\nimport EventsNormalizer from 'parser/core/EventsNormalizer';\r\nimport { AnyEvent, Event, EventType } from 'parser/core/Events';\r\n\r\nclass TipOfTheSpearNormalizer extends EventsNormalizer {\r\n  /**\r\n   * Tip of the Spear casts a buff on the player whenever he casts Kill Command. It's cluttering up the console, so tagging it as a tick fixes this issue. Since we can track the actual buff application, it's not a problem for further analysis.\r\n   *\r\n   * Example log: https://www.warcraftlogs.com/reports/pNJbYdLrMW2ynKGa#fight=3&type=damage-done&source=16\r\n   *\r\n   * @param {Array} events\r\n   * @returns {Array}\r\n   */\r\n  normalize(events: AnyEvent[]) {\r\n    const fixedEvents: AnyEvent[] = [];\r\n    events.forEach((event) => {\r\n      if (event.type === EventType.Cast && event.ability.guid === SPELLS.TIP_OF_THE_SPEAR_CAST.id) {\r\n        (event as Event<any>).type = 'tick';\r\n        event.__modified = true;\r\n      }\r\n      fixedEvents.push(event);\r\n    });\r\n\r\n    return fixedEvents;\r\n  }\r\n}\r\n\r\nexport default TipOfTheSpearNormalizer;\r\n","import React from 'react';\r\n\r\nimport SPELLS from 'common/SPELLS';\r\nimport Analyzer, { Options, SELECTED_PLAYER } from 'parser/core/Analyzer';\r\nimport Abilities from 'parser/core/modules/Abilities';\r\nimport SpellUsable from 'parser/shared/modules/SpellUsable';\r\nimport STATISTIC_ORDER from 'interface/others/STATISTIC_ORDER';\r\nimport Statistic from 'interface/statistics/Statistic';\r\nimport BoringSpellValueText from 'interface/statistics/components/BoringSpellValueText';\r\nimport GlobalCooldown from 'parser/shared/modules/GlobalCooldown';\r\nimport Events, { ApplyBuffEvent, EnergizeEvent } from 'parser/core/Events';\r\nimport { NESINGWARY_FOCUS_GAIN_MULTIPLIER } from 'parser/hunter/shared/constants';\r\nimport { SV_KILL_COMMAND_FOCUS_GAIN } from 'parser/hunter/survival/constants';\r\n\r\n/**\r\n * Give the command to kill, causing your pet to savagely deal [Attack power * 0.6 * (1 + Versatility)] Physical damage to the enemy.\r\n * Has a 25% chance to immediately reset its cooldown.\r\n * Generates 15 Focus\r\n *\r\n * Example log:\r\n * https://www.warcraftlogs.com/reports/dHcVrvbMX39xNAC8#fight=3&type=auras&source=66&ability=259285\r\n */\r\nclass KillCommand extends Analyzer {\r\n  static dependencies = {\r\n    spellUsable: SpellUsable,\r\n    abilities: Abilities,\r\n    globalCooldown: GlobalCooldown,\r\n  };\r\n\r\n  resets = 0;\r\n\r\n  additionalFocusFromNesingwary = 0;\r\n  possibleAdditionalFocusFromNesingwary = 0;\r\n\r\n  protected spellUsable!: SpellUsable;\r\n  protected abilities!: Abilities;\r\n  protected globalCooldown!: GlobalCooldown;\r\n\r\n  constructor(options: Options) {\r\n    super(options);\r\n\r\n    this.addEventListener(Events.applybuff.by(SELECTED_PLAYER).spell(SPELLS.FLANKERS_ADVANTAGE), this.onFlankersProc);\r\n    this.selectedCombatant.hasLegendaryByBonusID(SPELLS.NESINGWARYS_TRAPPING_APPARATUS_EFFECT.bonusID) && this.addEventListener(Events.energize.by(SELECTED_PLAYER).spell(SPELLS.KILL_COMMAND_CAST_SV), this.checkNesingwaryFocusGain);\r\n\r\n  }\r\n\r\n  onFlankersProc(event: ApplyBuffEvent) {\r\n    if (!this.spellUsable.isOnCooldown(SPELLS.KILL_COMMAND_CAST_SV.id)) {\r\n      return;\r\n    }\r\n    this.resets += 1;\r\n    const globalCooldown = this.globalCooldown.getGlobalCooldownDuration(event.ability.guid);\r\n    const expectedCooldownDuration = this.abilities.getExpectedCooldownDuration(SPELLS.KILL_COMMAND_CAST_SV.id, this.spellUsable.cooldownTriggerEvent(SPELLS.KILL_COMMAND_CAST_SV.id));\r\n    if (expectedCooldownDuration) {\r\n      this.spellUsable.reduceCooldown(SPELLS.KILL_COMMAND_CAST_SV.id, expectedCooldownDuration - globalCooldown);\r\n    }\r\n  }\r\n\r\n  checkNesingwaryFocusGain(event: EnergizeEvent) {\r\n    if (this.selectedCombatant.hasBuff(SPELLS.NESINGWARYS_TRAPPING_APPARATUS_ENERGIZE.id)) {\r\n      this.additionalFocusFromNesingwary += event.resourceChange * (1 - 1 / NESINGWARY_FOCUS_GAIN_MULTIPLIER) - event.waste;\r\n      this.possibleAdditionalFocusFromNesingwary += SV_KILL_COMMAND_FOCUS_GAIN;\r\n    }\r\n  }\r\n\r\n  statistic() {\r\n    return (\r\n      <Statistic\r\n        position={STATISTIC_ORDER.OPTIONAL(1)}\r\n        size=\"flexible\"\r\n      >\r\n        <BoringSpellValueText spell={SPELLS.KILL_COMMAND_CAST_SV}>\r\n          <>\r\n            {this.resets} <small>{this.resets === 1 ? 'reset' : 'resets'}</small>\r\n          </>\r\n        </BoringSpellValueText>\r\n      </Statistic>\r\n    );\r\n  }\r\n}\r\n\r\nexport default KillCommand;\r\n","import SPELLS from 'common/SPELLS';\r\nimport Spell from 'common/SPELLS/Spell';\r\nimport Analyzer, { Options, SELECTED_PLAYER } from 'parser/core/Analyzer';\r\nimport { ThresholdStyle, When } from 'parser/core/ParseResults';\r\nimport SpellUsable from 'parser/shared/modules/SpellUsable';\r\nimport React from 'react';\r\nimport SpellLink from 'common/SpellLink';\r\nimport STATISTIC_ORDER from 'interface/others/STATISTIC_ORDER';\r\nimport ItemDamageDone from 'interface/ItemDamageDone';\r\nimport AverageTargetsHit from 'interface/others/AverageTargetsHit';\r\nimport Statistic from 'interface/statistics/Statistic';\r\nimport BoringSpellValueText from 'interface/statistics/components/BoringSpellValueText';\r\nimport Events, { DamageEvent } from 'parser/core/Events';\r\nimport { BUTCHERY_CARVE_MAX_TARGETS_HIT } from 'parser/hunter/survival/constants';\r\nimport { ONE_SECOND_IN_MS } from 'parser/hunter/shared/constants';\r\nimport { i18n } from '@lingui/core';\r\nimport { t } from '@lingui/macro';\r\n\r\n/**\r\n * Carve: A sweeping attack that strikes all enemies in front of you for Physical damage.\r\n * Butchery: Strike all nearby enemies in a flurry of strikes, inflicting Phsyical damage to each. Has 3 charges.\r\n * Both: Reduces the remaining cooldown on Wildfire Bomb by 1 sec for each target hit, up to 5.\r\n *\r\n * Example logs:\r\n * Carve: https://www.warcraftlogs.com/reports/dHcVrvbMX39xNAC8#fight=3&type=damage-done&source=66&ability=187708\r\n * Butchery: https://www.warcraftlogs.com/reports/6GjD12YkQCnJqPTz#fight=25&type=damage-done&source=19&translate=true&ability=212436\r\n */\r\n\r\nclass ButcheryCarve extends Analyzer {\r\n  static dependencies = {\r\n    spellUsable: SpellUsable,\r\n  };\r\n\r\n  reductionAtCurrentCast: number = 0;\r\n  effectiveReductionMs: number = 0;\r\n  wastedReductionMs: number = 0;\r\n  targetsHit: number = 0;\r\n  casts: number = 0;\r\n  spellKnown: Spell = this.selectedCombatant.hasTalent(SPELLS.BUTCHERY_TALENT.id) ? SPELLS.BUTCHERY_TALENT : SPELLS.CARVE;\r\n  damage: number = 0;\r\n  bombSpellKnown: number = this.selectedCombatant.hasTalent(SPELLS.WILDFIRE_INFUSION_TALENT.id) ? SPELLS.WILDFIRE_INFUSION_TALENT.id : SPELLS.WILDFIRE_BOMB.id;\r\n\r\n  protected spellUsable!: SpellUsable;\r\n\r\n  constructor(options: Options) {\r\n    super(options);\r\n\r\n    this.addEventListener(Events.damage.by(SELECTED_PLAYER).spell(this.spellKnown), this.onDamage);\r\n    this.addEventListener(Events.cast.by(SELECTED_PLAYER).spell(this.spellKnown), this.onCast);\r\n  }\r\n\r\n  get avgTargetsHitThreshold() {\r\n    return {\r\n      actual: Number((this.targetsHit / this.casts).toFixed(1)),\r\n      isLessThan: {\r\n        minor: 2,\r\n        average: 2,\r\n        major: 2,\r\n      },\r\n      style: ThresholdStyle.DECIMAL,\r\n    };\r\n  }\r\n\r\n  onCast() {\r\n    this.casts += 1;\r\n    this.reductionAtCurrentCast = 0;\r\n  }\r\n\r\n  onDamage(event: DamageEvent) {\r\n    this.targetsHit += 1;\r\n    this.damage += event.amount + (event.absorbed || 0);\r\n    if (this.reductionAtCurrentCast === BUTCHERY_CARVE_MAX_TARGETS_HIT) {\r\n      return;\r\n    }\r\n    this.reductionAtCurrentCast += 1;\r\n    if (this.spellUsable.isOnCooldown(this.bombSpellKnown)) {\r\n      this.checkCooldown(this.bombSpellKnown);\r\n    } else {\r\n      this.wastedReductionMs += ONE_SECOND_IN_MS;\r\n    }\r\n  }\r\n\r\n  checkCooldown(spellId: number) {\r\n    if (this.spellUsable.cooldownRemaining(spellId) < ONE_SECOND_IN_MS) {\r\n      const effectiveReductionMs = this.spellUsable.reduceCooldown(spellId, ONE_SECOND_IN_MS);\r\n      this.effectiveReductionMs += effectiveReductionMs;\r\n      this.wastedReductionMs += (ONE_SECOND_IN_MS - effectiveReductionMs);\r\n    } else {\r\n      this.effectiveReductionMs += this.spellUsable.reduceCooldown(spellId, ONE_SECOND_IN_MS);\r\n    }\r\n  }\r\n\r\n  suggestions(when: When) {\r\n    if (this.casts > 0) {\r\n      //Since you're not casting Butchery or Carve on single-target, there's no reason to show the suggestions in cases where the abilities were cast 0 times.\r\n      when(this.avgTargetsHitThreshold).addSuggestion((suggest, actual, recommended) => suggest(<>You should aim to hit as many targets as possible with <SpellLink id={this.spellKnown.id} />. Using it on single-target is not recommended.</>)\r\n        .icon(this.spellKnown.icon)\r\n        .actual(i18n._(t('hunter.survival.suggestions.butcheryCarve.averageTargets')`${actual} average targets hit per cast`))\r\n        .recommended(`>${recommended} is recommended`));\r\n    }\r\n  }\r\n\r\n  statistic() {\r\n    if (this.casts > 0) {\r\n      //Since you're not casting Butchery or Carve on single-target, there's no reason to show the statistics in cases where the abilities were cast 0 times.\r\n      return (\r\n        <Statistic\r\n          position={STATISTIC_ORDER.OPTIONAL(5)}\r\n          size=\"flexible\"\r\n        >\r\n          <BoringSpellValueText spell={this.spellKnown}>\r\n            <>\r\n              <ItemDamageDone amount={this.damage} />\r\n              <br />\r\n              <AverageTargetsHit casts={this.casts} hits={this.targetsHit} />\r\n            </>\r\n          </BoringSpellValueText>\r\n        </Statistic>\r\n      );\r\n    }\r\n    return null;\r\n  }\r\n}\r\n\r\nexport default ButcheryCarve;\r\n","import React from 'react';\r\n\r\nimport Analyzer, { Options, SELECTED_PLAYER } from 'parser/core/Analyzer';\r\nimport { ThresholdStyle, When } from 'parser/core/ParseResults';\r\nimport SPELLS from 'common/SPELLS';\r\nimport { formatPercentage } from 'common/format';\r\nimport Enemies from 'parser/shared/modules/Enemies';\r\nimport SpellLink from 'common/SpellLink';\r\nimport ItemDamageDone from 'interface/ItemDamageDone';\r\nimport STATISTIC_ORDER from 'interface/others/STATISTIC_ORDER';\r\nimport { SERPENT_STING_SV_BASE_DURATION, SERPENT_STING_SV_PANDEMIC } from 'parser/hunter/survival/constants';\r\nimport Statistic from 'interface/statistics/Statistic';\r\nimport BoringSpellValueText from 'interface/statistics/components/BoringSpellValueText';\r\nimport UptimeIcon from 'interface/icons/Uptime';\r\nimport Events, { ApplyDebuffEvent, CastEvent, DamageEvent, RefreshDebuffEvent, RemoveDebuffEvent } from 'parser/core/Events';\r\nimport { encodeTargetString } from 'parser/shared/modules/EnemyInstances';\r\nimport { i18n } from '@lingui/core';\r\nimport { t } from '@lingui/macro';\r\n\r\n/**\r\n * Fire a shot that poisons your target, causing them to take (15% of Attack power) Nature damage instantly and an additional (60% of Attack power) Nature damage over 12 sec.\r\n *\r\n * Example log:\r\n * https://www.warcraftlogs.com/reports/ZRALzNbMpqka1fTB#fight=17&type=summary&source=329\r\n */\r\n\r\nclass SerpentSting extends Analyzer {\r\n  static dependencies = {\r\n    enemies: Enemies,\r\n  };\r\n\r\n  //Used to handle talents\r\n  hasVV: boolean = false;\r\n  hasBoP: boolean = false;\r\n\r\n  //Used for handling when parsing\r\n  serpentStingTargets: Array<{ timestamp: number, serpentStingDuration: number }> = [];\r\n  vipersVenomBuffUp: boolean = false;\r\n\r\n  //Used for statistics\r\n  casts: number = 0;\r\n  bonusDamage: number = 0;\r\n  timesRefreshed: number = 0;\r\n\r\n  //Used for suggestions\r\n  nonPandemicRefresh: number = 0;\r\n  nonVVBoPRefresh: number = 0;\r\n\r\n  protected enemies!: Enemies;\r\n\r\n  constructor(options: Options) {\r\n    super(options);\r\n\r\n    this.hasBoP = this.selectedCombatant.hasTalent(SPELLS.BIRDS_OF_PREY_TALENT.id);\r\n    this.hasVV = this.selectedCombatant.hasTalent(SPELLS.VIPERS_VENOM_TALENT.id);\r\n\r\n    this.addEventListener(Events.cast.by(SELECTED_PLAYER).spell(SPELLS.SERPENT_STING_SV), this.onCast);\r\n    this.addEventListener(Events.damage.by(SELECTED_PLAYER).spell(SPELLS.SERPENT_STING_SV), this.onDamage);\r\n    this.addEventListener(Events.applydebuff.by(SELECTED_PLAYER).spell(SPELLS.SERPENT_STING_SV), this.onApplyDebuff);\r\n    this.addEventListener(Events.removedebuff.by(SELECTED_PLAYER).spell(SPELLS.SERPENT_STING_SV), this.onRemoveDebuff);\r\n    this.addEventListener(Events.refreshdebuff.by(SELECTED_PLAYER).spell(SPELLS.SERPENT_STING_SV), this.onRefreshDebuff);\r\n  }\r\n\r\n  get uptimePercentage() {\r\n    return this.enemies.getBuffUptime(SPELLS.SERPENT_STING_SV.id) / this.owner.fightDuration;\r\n  }\r\n\r\n  get nonPandemicThreshold() {\r\n    return {\r\n      actual: this.nonPandemicRefresh,\r\n      isGreaterThan: {\r\n        minor: 1,\r\n        average: 3,\r\n        major: 5,\r\n      },\r\n      style: ThresholdStyle.NUMBER,\r\n    };\r\n  }\r\n\r\n  get nonVVBoPRefreshThreshold() {\r\n    return {\r\n      actual: this.nonVVBoPRefresh,\r\n      isGreaterThan: {\r\n        minor: 1,\r\n        average: 3,\r\n        major: 5,\r\n      },\r\n      style: ThresholdStyle.NUMBER,\r\n    };\r\n  }\r\n\r\n  get uptimeThresholdBoP() {\r\n    if (this.hasVV) {\r\n      return {\r\n        actual: this.uptimePercentage,\r\n        isLessThan: {\r\n          minor: 0.6,\r\n          average: 0.55,\r\n          major: 0.5,\r\n        },\r\n        style: ThresholdStyle.PERCENTAGE,\r\n      };\r\n    } else {\r\n      return {\r\n        actual: this.uptimePercentage,\r\n        isGreaterThan: {\r\n          minor: 0.3,\r\n          average: 0.35,\r\n          major: 0.4,\r\n        },\r\n        style: ThresholdStyle.PERCENTAGE,\r\n      };\r\n    }\r\n  }\r\n\r\n  get uptimeThresholdNonBoP() {\r\n    return {\r\n      actual: this.uptimePercentage,\r\n      isLessThan: {\r\n        minor: 0.95,\r\n        average: 0.9,\r\n        major: 0.85,\r\n      },\r\n      style: ThresholdStyle.PERCENTAGE,\r\n    };\r\n  }\r\n\r\n  get serpentStingDuringCA() {\r\n    return this.hasBoP && this.selectedCombatant.hasBuff(SPELLS.COORDINATED_ASSAULT.id) && (!this.hasVV || !this.vipersVenomBuffUp);\r\n  }\r\n\r\n  onCast(event: CastEvent) {\r\n    this.casts += 1;\r\n\r\n    if (event.meta === undefined) {\r\n      event.meta = {\r\n        isInefficientCast: false,\r\n        isEnhancedCast: false,\r\n        inefficientCastReason: '',\r\n        enhancedCastReason: '',\r\n      };\r\n    }\r\n    if (this.selectedCombatant.hasBuff(SPELLS.VIPERS_VENOM_BUFF.id)) {\r\n      this.vipersVenomBuffUp = true;\r\n      event.meta.isEnhancedCast = true;\r\n      event.meta.enhancedCastReason = 'Viper\\'s Venom buff consumed';\r\n    }\r\n    if (this.serpentStingDuringCA) {\r\n      event.meta.isInefficientCast = true;\r\n      event.meta.inefficientCastReason = 'Serpent String cast during Coordinated Assault with Birds of Prey talent used.';\r\n    }\r\n  }\r\n\r\n  onDamage(event: DamageEvent) {\r\n    this.bonusDamage += event.amount + (event.absorbed || 0);\r\n  }\r\n\r\n  onApplyDebuff(event: ApplyDebuffEvent) {\r\n    let targetInstance = event.targetInstance;\r\n    if (targetInstance === undefined) {\r\n      targetInstance = 1;\r\n    }\r\n    const serpentStingTarget: any = encodeTargetString(event.targetID, targetInstance);\r\n    this.serpentStingTargets[serpentStingTarget] = { timestamp: event.timestamp, serpentStingDuration: SERPENT_STING_SV_BASE_DURATION };\r\n    if (this.vipersVenomBuffUp) {\r\n      this.vipersVenomBuffUp = false;\r\n    }\r\n  }\r\n\r\n  onRemoveDebuff(event: RemoveDebuffEvent) {\r\n    let targetInstance = event.targetInstance;\r\n    if (targetInstance === undefined) {\r\n      targetInstance = 1;\r\n    }\r\n    const serpentStingTarget: any = encodeTargetString(event.targetID, targetInstance);\r\n    this.serpentStingTargets.splice(serpentStingTarget, 1);\r\n  }\r\n\r\n  onRefreshDebuff(event: RefreshDebuffEvent) {\r\n    let targetInstance = event.targetInstance;\r\n    if (targetInstance === undefined) {\r\n      targetInstance = 1;\r\n    }\r\n    const serpentStingTarget: any = encodeTargetString(event.targetID, targetInstance);\r\n    this.timesRefreshed += 1;\r\n\r\n    const timeRemaining = this.serpentStingTargets[serpentStingTarget].serpentStingDuration - (event.timestamp - this.serpentStingTargets[serpentStingTarget].timestamp);\r\n    if (timeRemaining > (SERPENT_STING_SV_BASE_DURATION * SERPENT_STING_SV_PANDEMIC)) {\r\n      this.nonPandemicRefresh += 1;\r\n    } else {\r\n      const pandemicSerpentStingDuration = Math.min(SERPENT_STING_SV_BASE_DURATION * SERPENT_STING_SV_PANDEMIC, timeRemaining) + SERPENT_STING_SV_BASE_DURATION;\r\n      this.serpentStingTargets[serpentStingTarget].timestamp = event.timestamp;\r\n      this.serpentStingTargets[serpentStingTarget].serpentStingDuration = pandemicSerpentStingDuration;\r\n    }\r\n    if (this.hasBoP && this.selectedCombatant.hasBuff(SPELLS.COORDINATED_ASSAULT.id)) {\r\n      if (this.vipersVenomBuffUp) {\r\n        this.vipersVenomBuffUp = false;\r\n      } else {\r\n        this.nonVVBoPRefresh += 1;\r\n      }\r\n    }\r\n  }\r\n\r\n  suggestions(when: When) {\r\n    if (this.hasBoP) {\r\n      const suggestionText = this.hasVV ?\r\n        <> You should make sure to keep up <SpellLink id={SPELLS.SERPENT_STING_SV.id} /> by using it within the pandemic windows during <SpellLink id={SPELLS.COORDINATED_ASSAULT.id} />, so long as you have a <SpellLink id={SPELLS.VIPERS_VENOM_TALENT.id} /> proc. </> :\r\n        <>With <SpellLink id={SPELLS.BIRDS_OF_PREY_TALENT.id} /> talented and without <SpellLink id={SPELLS.VIPERS_VENOM_TALENT.id} /> talented, you don't want to cast <SpellLink id={SPELLS.SERPENT_STING_SV.id} /> during <SpellLink id={SPELLS.COORDINATED_ASSAULT.id} /> at all, which is a majority of the fight, therefore a low uptime of <SpellLink id={SPELLS.SERPENT_STING_SV.id} /> is better than a high uptime. </>;\r\n\r\n      when(this.uptimeThresholdBoP).addSuggestion((suggest, actual, recommended) => suggest(suggestionText)\r\n        .icon(SPELLS.SERPENT_STING_SV.icon)\r\n        .actual(i18n._(t('hunter.survival.suggestions.serpentSting.pandemicWindow')`${formatPercentage(actual)}% Serpent Sting uptime`))\r\n        .recommended(`<${formatPercentage(recommended)}% is recommended`));\r\n    } else {\r\n      when(this.uptimeThresholdNonBoP).addSuggestion((suggest, actual, recommended) => suggest(<>Remember to maintain the <SpellLink id={SPELLS.SERPENT_STING_SV.id} /> on enemies, but don't refresh the debuff unless it has less than {formatPercentage(SERPENT_STING_SV_PANDEMIC, 0)}% duration remaining.</>)\r\n        .icon(SPELLS.SERPENT_STING_SV.icon)\r\n        .actual(i18n._(t('hunter.survival.suggestions.serpentSting.uptime')`${formatPercentage(actual)}% Serpent Sting uptime`))\r\n        .recommended(`>${formatPercentage(recommended)}% is recommended`));\r\n    }\r\n\r\n    when(this.nonPandemicThreshold).addSuggestion((suggest, actual, recommended) => suggest(<>It is not recommended to refresh <SpellLink id={SPELLS.SERPENT_STING_SV.id} /> earlier than when there is less than {formatPercentage(SERPENT_STING_SV_PANDEMIC, 0)}% of the duration remaining. </>)\r\n      .icon(SPELLS.SERPENT_STING_SV.icon)\r\n      .actual(i18n._(t('hunter.survival.suggestions.serpentSting.tooEarly')`${actual} Serpent Sting cast(s) were cast too early`))\r\n      .recommended(`<${recommended} is recommended`));\r\n  }\r\n\r\n  statistic() {\r\n    return (\r\n      <Statistic\r\n        position={STATISTIC_ORDER.OPTIONAL(3)}\r\n        size=\"flexible\"\r\n        tooltip={(\r\n          <>\r\n            <ul>\r\n              <li>You cast Serpent Sting a total of {this.casts} times.</li>\r\n              <li>You refreshed the debuff {this.timesRefreshed} times.</li>\r\n              {this.nonVVBoPRefresh + this.nonPandemicRefresh > 0 &&\r\n              <ul>\r\n                {this.nonPandemicRefresh > 0 && <li>You had {this.nonPandemicRefresh} refreshes outside of the pandemic window. This means refreshes with more than {formatPercentage(SERPENT_STING_SV_PANDEMIC, 0)}% of the current debuff remaining and no Viper's Venom buff active.</li>}\r\n                {this.hasBoP && this.hasVV && this.nonVVBoPRefresh > 0 && <li>During Coordinated Assault, you should only refresh Serpent Sting when there is less than {formatPercentage(SERPENT_STING_SV_PANDEMIC, 0)}% remaining on Serpent Sting AND you have a Viper's Venom proc. You refreshed it incorrectly {this.nonVVBoPRefresh} times.</li>}\r\n                {this.hasBoP && !this.hasVV && this.nonVVBoPRefresh > 0 && <li>Because you're using Birds of Prey, but not using Viper's Venom, you should never refresh Serpent Sting during Coordinated Assault buff. You did this {this.nonVVBoPRefresh} times.</li>}\r\n              </ul>}\r\n            </ul>\r\n          </>\r\n        )}\r\n      >\r\n        <BoringSpellValueText spell={SPELLS.SERPENT_STING_SV}>\r\n          <>\r\n            <ItemDamageDone amount={this.bonusDamage} />\r\n            <br />\r\n            <UptimeIcon /> {formatPercentage(this.uptimePercentage)}% <small>uptime</small>\r\n          </>\r\n        </BoringSpellValueText>\r\n      </Statistic>\r\n    );\r\n  }\r\n}\r\n\r\nexport default SerpentSting;\r\n","import React from 'react';\r\n\r\nimport Analyzer, { Options, SELECTED_PLAYER, SELECTED_PLAYER_PET } from 'parser/core/Analyzer';\r\n\r\nimport SPELLS from 'common/SPELLS';\r\nimport { formatNumber, formatPercentage } from 'common/format';\r\nimport STATISTIC_ORDER from 'interface/others/STATISTIC_ORDER';\r\nimport SpellUsable from 'parser/shared/modules/SpellUsable';\r\nimport calculateEffectiveDamage from 'parser/core/calculateEffectiveDamage';\r\nimport ItemDamageDone from 'interface/ItemDamageDone';\r\nimport Statistic from 'interface/statistics/Statistic';\r\nimport BoringSpellValueText from 'interface/statistics/components/BoringSpellValueText';\r\nimport UptimeIcon from 'interface/icons/Uptime';\r\nimport Events, { DamageEvent } from 'parser/core/Events';\r\nimport { COORDINATED_ASSAULT_DMG_MOD } from 'parser/hunter/survival/constants';\r\n\r\n/**\r\n * You and your pet attack as one, increasing all damage you both deal by 20% for 20 sec.\r\n * While Coordinated Assault is active, Kill Command's chance to reset is increased by 25%.\r\n *\r\n * Example log:\r\n * https://www.warcraftlogs.com/reports/dHcVrvbMX39xNAC8#fight=3&type=auras&source=66&ability=266779\r\n */\r\n\r\nclass CoordinatedAssault extends Analyzer {\r\n  static dependencies = {\r\n    spellUsable: SpellUsable,\r\n  };\r\n\r\n  playerDamage = 0;\r\n  petDamage = 0;\r\n\r\n  protected spellUsable!: SpellUsable;\r\n\r\n  constructor(options: Options) {\r\n    super(options);\r\n\r\n    this.addEventListener(Events.damage.by(SELECTED_PLAYER), this.onPlayerDamage);\r\n    this.addEventListener(Events.damage.by(SELECTED_PLAYER_PET), this.onPetDamage);\r\n  }\r\n\r\n  get totalDamage() {\r\n    return this.playerDamage + this.petDamage;\r\n  }\r\n\r\n  get percentUptime() {\r\n    return this.selectedCombatant.getBuffUptime(SPELLS.COORDINATED_ASSAULT.id) / this.owner.fightDuration;\r\n  }\r\n\r\n  onPetDamage(event: DamageEvent) {\r\n    if (!this.selectedCombatant.hasBuff(SPELLS.COORDINATED_ASSAULT.id)) {\r\n      return;\r\n    }\r\n    this.petDamage += calculateEffectiveDamage(event, COORDINATED_ASSAULT_DMG_MOD);\r\n  }\r\n\r\n  onPlayerDamage(event: DamageEvent) {\r\n    if (!this.selectedCombatant.hasBuff(SPELLS.COORDINATED_ASSAULT.id)) {\r\n      return;\r\n    }\r\n    this.playerDamage += calculateEffectiveDamage(event, COORDINATED_ASSAULT_DMG_MOD);\r\n  }\r\n\r\n  statistic() {\r\n    return (\r\n      <Statistic\r\n        position={STATISTIC_ORDER.OPTIONAL(4)}\r\n        size=\"flexible\"\r\n        tooltip={(\r\n          <>\r\n            Over the course of the encounter you had Coordinated Assault up for a total of {(this.selectedCombatant.getBuffUptime(SPELLS.COORDINATED_ASSAULT.id) / 1000).toFixed(1)} seconds.\r\n            <br />\r\n            Total damage breakdown:\r\n            <ul>\r\n              <li>Player damage: {formatPercentage(this.owner.getPercentageOfTotalDamageDone(this.playerDamage))}% / {formatNumber(this.playerDamage / (this.owner.fightDuration / 1000))} DPS</li>\r\n              <li>Pet damage: {formatPercentage(this.owner.getPercentageOfTotalDamageDone(this.petDamage))}% / {formatNumber(this.petDamage / (this.owner.fightDuration / 1000))} DPS</li>\r\n            </ul>\r\n          </>\r\n        )}\r\n      >\r\n        <BoringSpellValueText spell={SPELLS.COORDINATED_ASSAULT}>\r\n          <>\r\n            <ItemDamageDone amount={this.totalDamage} />\r\n            <br />\r\n            <UptimeIcon /> {formatPercentage(this.percentUptime)}% <small>uptime</small>\r\n          </>\r\n        </BoringSpellValueText>\r\n      </Statistic>\r\n    );\r\n  }\r\n}\r\n\r\nexport default CoordinatedAssault;\r\n","import React from 'react';\r\n\r\nimport Analyzer, { Options, SELECTED_PLAYER } from 'parser/core/Analyzer';\r\nimport { ThresholdStyle, When } from 'parser/core/ParseResults';\r\nimport SPELLS from 'common/SPELLS';\r\nimport { formatPercentage } from 'common/format';\r\nimport Enemies from 'parser/shared/modules/Enemies';\r\nimport SpellUsable from 'parser/shared/modules/SpellUsable';\r\nimport StatTracker from 'parser/shared/modules/StatTracker';\r\nimport SpellLink from 'common/SpellLink';\r\nimport Statistic from 'interface/statistics/Statistic';\r\nimport STATISTIC_CATEGORY from 'interface/others/STATISTIC_CATEGORY';\r\nimport STATISTIC_ORDER from 'interface/others/STATISTIC_ORDER';\r\nimport GlobalCooldown from 'parser/shared/modules/GlobalCooldown';\r\nimport BoringSpellValueText from 'interface/statistics/components/BoringSpellValueText';\r\nimport Events, { CastEvent, DamageEvent } from 'parser/core/Events';\r\nimport { MS_BUFFER } from 'parser/hunter/shared/constants';\r\nimport { WILDFIRE_BOMB_LEEWAY_BUFFER } from 'parser/hunter/survival/constants';\r\nimport { i18n } from '@lingui/core';\r\nimport { t } from '@lingui/macro';\r\n\r\n/**\r\n * Hurl a bomb at the target, exploding for (45% of Attack power) Fire damage in a cone and coating enemies in wildfire, scorching them for (90% of Attack power) Fire damage over 6 sec.\r\n *\r\n * Example log:\r\n * https://www.warcraftlogs.com/reports/6GjD12YkQCnJqPTz#fight=25&type=damage-done&source=19&translate=true&ability=-259495\r\n */\r\n\r\nclass WildfireBomb extends Analyzer {\r\n  static dependencies = {\r\n    enemies: Enemies,\r\n    spellUsable: SpellUsable,\r\n    statTracker: StatTracker,\r\n    globalCooldown: GlobalCooldown,\r\n  };\r\n\r\n  acceptedCastDueToCapping = false;\r\n  currentGCD = 0;\r\n  badRefreshes = 0;\r\n  lastRefresh = 0;\r\n  casts = 0;\r\n  targetsHit = 0;\r\n\r\n  protected enemies!: Enemies;\r\n  protected spellUsable!: SpellUsable;\r\n  protected statTracker!: StatTracker;\r\n  protected globalCooldown!: GlobalCooldown;\r\n\r\n  constructor(options: Options) {\r\n    super(options);\r\n\r\n    this.active = !this.selectedCombatant.hasTalent(SPELLS.WILDFIRE_INFUSION_TALENT.id);\r\n\r\n    this.addEventListener(Events.cast.by(SELECTED_PLAYER).spell(SPELLS.WILDFIRE_BOMB), this.onCast);\r\n    this.addEventListener(Events.damage.by(SELECTED_PLAYER).spell(SPELLS.WILDFIRE_BOMB_IMPACT), this.onDamage);\r\n  }\r\n\r\n  get uptimePercentage() {\r\n    return this.enemies.getBuffUptime(SPELLS.WILDFIRE_BOMB_DOT.id) / this.owner.fightDuration;\r\n  }\r\n\r\n  get badWFBThresholds() {\r\n    return {\r\n      actual: this.badRefreshes,\r\n      isGreaterThan: {\r\n        minor: 2,\r\n        average: 4,\r\n        major: 6,\r\n      },\r\n      style: ThresholdStyle.NUMBER,\r\n    };\r\n  }\r\n\r\n  get uptimeThresholds() {\r\n    return {\r\n      actual: this.uptimePercentage,\r\n      isLessThan: {\r\n        minor: 0.4,\r\n        average: 0.35,\r\n        major: 0.3,\r\n      },\r\n      style: ThresholdStyle.PERCENTAGE,\r\n    };\r\n  }\r\n\r\n  get averageTargetsHit() {\r\n    return this.targetsHit / this.casts;\r\n  }\r\n\r\n  onCast(event: CastEvent) {\r\n    this.casts += 1;\r\n    this.currentGCD = this.globalCooldown.getGlobalCooldownDuration(event.ability.guid);\r\n    if (!this.spellUsable.isOnCooldown(SPELLS.WILDFIRE_BOMB.id) || this.spellUsable.cooldownRemaining(SPELLS.WILDFIRE_BOMB.id) < WILDFIRE_BOMB_LEEWAY_BUFFER + this.currentGCD) {\r\n      this.acceptedCastDueToCapping = true;\r\n    }\r\n  }\r\n\r\n  onDamage(event: DamageEvent) {\r\n    if (this.casts === 0) {\r\n      this.casts += 1;\r\n      this.spellUsable.beginCooldown(SPELLS.WILDFIRE_BOMB.id, event);\r\n    }\r\n    this.targetsHit += 1;\r\n    const enemy = this.enemies.getEntity(event);\r\n    if (this.acceptedCastDueToCapping || !enemy) {\r\n      return;\r\n    }\r\n    if (enemy.hasBuff(SPELLS.WILDFIRE_BOMB_DOT.id) && event.timestamp > this.lastRefresh + MS_BUFFER) {\r\n      this.badRefreshes += 1;\r\n      this.lastRefresh = event.timestamp;\r\n    }\r\n  }\r\n\r\n  suggestions(when: When) {\r\n    when(this.badWFBThresholds).addSuggestion((suggest, actual, recommended) => suggest(<>You shouldn't refresh <SpellLink id={SPELLS.WILDFIRE_BOMB.id} /> since it doesn't pandemic. It's generally better to cast something else and wait for the DOT to drop off before reapplying.</>)\r\n      .icon(SPELLS.WILDFIRE_BOMB.icon)\r\n      .actual(i18n._(t('hunter.survival.suggestions.wildfireBomb.pandemic.efficiency')`${actual} casts unnecessarily refreshed WFB`))\r\n      .recommended(`<${recommended} is recommended`));\r\n    when(this.uptimeThresholds).addSuggestion((suggest, actual, recommended) => suggest(<>Try and maximize your uptime on <SpellLink id={SPELLS.WILDFIRE_BOMB.id} />. This is achieved through not unnecessarily refreshing the debuff as it doesn't pandemic. </>)\r\n      .icon(SPELLS.WILDFIRE_BOMB.icon)\r\n      .actual(i18n._(t('hunter.survival.suggestions.wildfireBomb.uptime')`${formatPercentage(actual)}% uptime`))\r\n      .recommended(`>${formatPercentage(recommended)}% is recommended`));\r\n  }\r\n\r\n  statistic() {\r\n    return (\r\n      <Statistic\r\n        position={STATISTIC_ORDER.OPTIONAL(2)}\r\n        size=\"flexible\"\r\n        category={STATISTIC_CATEGORY.GENERAL}\r\n      >\r\n        <BoringSpellValueText spell={SPELLS.WILDFIRE_BOMB}>\r\n          <>\r\n            {this.averageTargetsHit.toFixed(2)} <small>average targets hit</small>\r\n            <br />\r\n            {formatPercentage(this.uptimePercentage)}% <small> DoT uptime</small>\r\n          </>\r\n        </BoringSpellValueText>\r\n      </Statistic>\r\n    );\r\n  }\r\n}\r\n\r\nexport default WildfireBomb;\r\n","import SPELLS from 'common/SPELLS';\r\nimport Analyzer, { Options, SELECTED_PLAYER } from 'parser/core/Analyzer';\r\nimport Events, { CastEvent } from 'parser/core/Events';\r\n\r\n/**\r\n * A vicious slash dealing (70% of Attack power) Physical damage.\r\n *\r\n * Example log with timeline warning:\r\n * https://www.warcraftlogs.com/reports/ZRALzNbMpqka1fTB#fight=17&type=summary&source=329\r\n */\r\n\r\nclass RaptorStrike extends Analyzer {\r\n\r\n  constructor(options: Options) {\r\n    super(options);\r\n\r\n    this.active = !this.selectedCombatant.hasTalent(SPELLS.MONGOOSE_BITE_TALENT.id) && this.selectedCombatant.hasTalent(SPELLS.VIPERS_VENOM_TALENT.id);\r\n    this.addEventListener(Events.cast.by(SELECTED_PLAYER).spell(SPELLS.RAPTOR_STRIKE), this.onCast);\r\n  }\r\n\r\n  onCast(event: CastEvent) {\r\n    if (event.meta === undefined) {\r\n      event.meta = {\r\n        isInefficientCast: false,\r\n        inefficientCastReason: '',\r\n      };\r\n    }\r\n    if (this.selectedCombatant.hasBuff(SPELLS.VIPERS_VENOM_BUFF.id)) {\r\n      event.meta.isInefficientCast = true;\r\n      event.meta.inefficientCastReason = 'Viper\\'s Venom buff still active.';\r\n    }\r\n  }\r\n}\r\n\r\nexport default RaptorStrike;\r\n","import FocusCapTracker from 'parser/hunter/shared/modules/resources/FocusCapTracker';\r\nimport { BASE_FOCUS_REGEN_SV, BASE_MAX_FOCUS_SV } from 'parser/hunter/survival/constants';\r\n\r\nclass SurvivalFocusCapTracker extends FocusCapTracker {\r\n\r\n  getBaseRegenRate() {\r\n    const regenRate = BASE_FOCUS_REGEN_SV;\r\n    return regenRate;\r\n  }\r\n\r\n  currentMaxResource() {\r\n    const max = BASE_MAX_FOCUS_SV;\r\n    return max;\r\n  }\r\n\r\n}\r\n\r\nexport default SurvivalFocusCapTracker;\r\n","import React from 'react';\r\n\r\nimport Analyzer from 'parser/core/Analyzer';\r\nimport { When } from 'parser/core/ParseResults';\r\nimport SPELLS from 'common/SPELLS';\r\nimport SpellLink from 'common/SpellLink';\r\nimport resourceSuggest from 'parser/shared/modules/resources/resourcetracker/ResourceSuggest';\r\nimport FocusTracker from 'parser/hunter/shared/modules/resources/FocusTracker';\r\n\r\nclass Focus extends Analyzer {\r\n  static dependencies = {\r\n    focusTracker: FocusTracker,\r\n  };\r\n\r\n  protected focusTracker!: FocusTracker;\r\n\r\n  suggestions(when: When) {\r\n    resourceSuggest(when, this.focusTracker, {\r\n      spell: SPELLS.KILL_COMMAND_CAST_SV,\r\n      minor: 0.025,\r\n      avg: 0.05,\r\n      major: 0.1,\r\n      extraSuggestion: <>Try to keep focus below max by using <SpellLink id={SPELLS.SERPENT_STING_SV.id} />, <SpellLink id={SPELLS.MONGOOSE_BITE_TALENT.id} /> or <SpellLink id={SPELLS.RAPTOR_STRIKE.id} />.</>,\r\n    });\r\n  }\r\n}\r\n\r\nexport default Focus;\r\n","import SharedHunterFocusUsage from 'parser/hunter/shared/modules/resources/FocusUsage';\r\nimport { LIST_OF_FOCUS_SPENDERS_SV } from 'parser/hunter/survival/constants';\r\nimport SPELLS from 'common/SPELLS';\r\nimport Spell from 'common/SPELLS/Spell';\r\n\r\nclass SurvivalFocusUsage extends SharedHunterFocusUsage {\r\n\r\n  static listOfResourceSpenders: Spell[] = [\r\n    ...LIST_OF_FOCUS_SPENDERS_SV,\r\n  ];\r\n\r\n  static spellsThatShouldShowAsOtherSpells: any = {\r\n    [SPELLS.MONGOOSE_BITE_TALENT_AOTE.id]: SPELLS.MONGOOSE_BITE_TALENT,\r\n    [SPELLS.RAPTOR_STRIKE_AOTE.id]: SPELLS.RAPTOR_STRIKE,\r\n  };\r\n}\r\n\r\nexport default SurvivalFocusUsage;\r\n","import React from 'react';\r\n\r\nimport Analyzer, { Options, SELECTED_PLAYER } from 'parser/core/Analyzer';\r\nimport SPELLS from 'common/SPELLS';\r\nimport ItemDamageDone from 'interface/ItemDamageDone';\r\nimport calculateEffectiveDamage from 'parser/core/calculateEffectiveDamage';\r\nimport StatTracker from 'parser/shared/modules/StatTracker';\r\nimport GlobalCooldown from 'parser/shared/modules/GlobalCooldown';\r\nimport { VIPERS_VENOM_DAMAGE_MODIFIER } from 'parser/hunter/survival/constants';\r\nimport Statistic from 'interface/statistics/Statistic';\r\nimport STATISTIC_CATEGORY from 'interface/others/STATISTIC_CATEGORY';\r\nimport STATISTIC_ORDER from 'interface/others/STATISTIC_ORDER';\r\nimport BoringSpellValueText from 'interface/statistics/components/BoringSpellValueText';\r\nimport Events, { ApplyBuffEvent, CastEvent, DamageEvent } from 'parser/core/Events';\r\n\r\n/**\r\n * Raptor Strike (or Mongoose Bite) has a chance to make your next Serpent Sting cost no Focus and deal an additional 250% initial damage.\r\n *\r\n * Example log:\r\n * https://www.warcraftlogs.com/reports/ZRALzNbMpqka1fTB#fight=17&type=auras&source=329&translate=true&ability=268552\r\n */\r\n\r\nclass VipersVenom extends Analyzer {\r\n  static dependencies = {\r\n    statTracker: StatTracker,\r\n    globalCooldown: GlobalCooldown,\r\n  };\r\n\r\n  buffedSerpentSting = false;\r\n  bonusDamage = 0;\r\n  procs = 0;\r\n  lastProcTimestamp = 0;\r\n  accumulatedTimeFromBuffToCast = 0;\r\n  currentGCD = 0;\r\n  wastedProcs = 0;\r\n  spellKnown = SPELLS.RAPTOR_STRIKE;\r\n\r\n  protected statTracker!: StatTracker;\r\n  protected globalCooldown!: GlobalCooldown;\r\n\r\n  constructor(options: Options) {\r\n    super(options);\r\n\r\n    this.active = this.selectedCombatant.hasTalent(SPELLS.VIPERS_VENOM_TALENT.id);\r\n\r\n    if (this.active && this.selectedCombatant.hasTalent(SPELLS.MONGOOSE_BITE_TALENT.id)) {\r\n      this.spellKnown = SPELLS.MONGOOSE_BITE_TALENT;\r\n    }\r\n\r\n    this.addEventListener(Events.cast.by(SELECTED_PLAYER).spell(SPELLS.SERPENT_STING_SV), this.onCast);\r\n    this.addEventListener(Events.damage.by(SELECTED_PLAYER).spell(SPELLS.SERPENT_STING_SV), this.onDamage);\r\n    this.addEventListener(Events.applybuff.by(SELECTED_PLAYER).spell(SPELLS.VIPERS_VENOM_BUFF), this.onApplyBuff);\r\n    this.addEventListener(Events.refreshbuff.by(SELECTED_PLAYER).spell(SPELLS.VIPERS_VENOM_BUFF), this.onRefreshBuff);\r\n  }\r\n\r\n  get averageTimeBetweenBuffAndUsage() {\r\n    return this.accumulatedTimeFromBuffToCast / this.procs / 1000;\r\n  }\r\n\r\n  onCast(event: CastEvent) {\r\n    if (!this.selectedCombatant.hasBuff(SPELLS.VIPERS_VENOM_BUFF.id)) {\r\n      return;\r\n    }\r\n    this.buffedSerpentSting = true;\r\n    this.currentGCD = this.globalCooldown.getGlobalCooldownDuration(event.ability.guid);\r\n    this.accumulatedTimeFromBuffToCast += event.timestamp - this.lastProcTimestamp - this.currentGCD;\r\n  }\r\n\r\n  onDamage(event: DamageEvent) {\r\n    if (this.buffedSerpentSting) {\r\n      this.bonusDamage += calculateEffectiveDamage(event, VIPERS_VENOM_DAMAGE_MODIFIER);\r\n      this.buffedSerpentSting = false;\r\n    }\r\n  }\r\n\r\n  onApplyBuff(event: ApplyBuffEvent) {\r\n    this.procs += 1;\r\n    this.lastProcTimestamp = event.timestamp;\r\n  }\r\n\r\n  onRefreshBuff() {\r\n    this.wastedProcs += 1;\r\n  }\r\n\r\n  statistic() {\r\n    return (\r\n      <Statistic\r\n        position={STATISTIC_ORDER.OPTIONAL(1)}\r\n        size=\"flexible\"\r\n        tooltip={(\r\n          <>\r\n            <ul>\r\n              <li>Average time between gaining Viper's Venom buff and using it was <b>{this.averageTimeBetweenBuffAndUsage.toFixed(2)}</b> seconds. This accounts for the GCD after the {this.spellKnown.name} proccing Viper's Venom.\r\n                {this.wastedProcs > 0 && <li>You wasted {this.wastedProcs} procs by gaining a new proc, whilst your current proc was still active.</li>}\r\n              </li>\r\n            </ul>\r\n          </>\r\n        )}\r\n        category={STATISTIC_CATEGORY.TALENTS}\r\n      >\r\n        <BoringSpellValueText spell={SPELLS.VIPERS_VENOM_TALENT}>\r\n          <>\r\n            <ItemDamageDone amount={this.bonusDamage} /><br />\r\n            {this.procs} / {this.wastedProcs + this.procs} <small>procs used</small>\r\n          </>\r\n        </BoringSpellValueText>\r\n      </Statistic>\r\n    );\r\n  }\r\n}\r\n\r\nexport default VipersVenom;\r\n","import Analyzer, { Options, SELECTED_PLAYER } from 'parser/core/Analyzer';\r\nimport SPELLS from 'common/SPELLS';\r\nimport { AFFECTED_BY_GUERRILLA_TACTICS, GUERRILLA_TACTICS_INIT_HIT_MODIFIER } from 'parser/hunter/survival/constants';\r\nimport calculateEffectiveDamage from 'parser/core/calculateEffectiveDamage';\r\nimport ItemDamageDone from 'interface/ItemDamageDone';\r\nimport React from 'react';\r\nimport Statistic from 'interface/statistics/Statistic';\r\nimport STATISTIC_CATEGORY from 'interface/others/STATISTIC_CATEGORY';\r\nimport STATISTIC_ORDER from 'interface/others/STATISTIC_ORDER';\r\nimport BoringSpellValueText from 'interface/statistics/components/BoringSpellValueText';\r\nimport Events, { DamageEvent } from 'parser/core/Events';\r\n\r\n/**\r\n * Wildfire Bomb now has 2 charges, and the initial explosion deals 100% increased damage.\r\n *\r\n * Example log:\r\n * https://www.warcraftlogs.com/reports/Kk4nL12CDJVQ6Yyf#fight=34&type=damage-done&source=799\r\n */\r\nclass GuerrillaTactics extends Analyzer {\r\n\r\n  damage = 0;\r\n\r\n  constructor(options: Options) {\r\n    super(options);\r\n\r\n    this.active = this.selectedCombatant.hasTalent(SPELLS.GUERRILLA_TACTICS_TALENT.id);\r\n\r\n    this.addEventListener(Events.damage.by(SELECTED_PLAYER).spell(AFFECTED_BY_GUERRILLA_TACTICS), this.onDamage);\r\n  }\r\n\r\n  onDamage(event: DamageEvent) {\r\n    this.damage += calculateEffectiveDamage(event, GUERRILLA_TACTICS_INIT_HIT_MODIFIER);\r\n  }\r\n\r\n  statistic() {\r\n    return (\r\n      <Statistic\r\n        position={STATISTIC_ORDER.OPTIONAL(2)}\r\n        size=\"flexible\"\r\n        category={STATISTIC_CATEGORY.TALENTS}\r\n      >\r\n        <BoringSpellValueText spell={SPELLS.GUERRILLA_TACTICS_TALENT}>\r\n          <>\r\n            <ItemDamageDone amount={this.damage} />\r\n          </>\r\n        </BoringSpellValueText>\r\n      </Statistic>\r\n    );\r\n  }\r\n\r\n}\r\n\r\nexport default GuerrillaTactics;\r\n","import React from 'react';\r\n\r\nimport SPELLS from 'common/SPELLS';\r\nimport Analyzer, { Options, SELECTED_PLAYER } from 'parser/core/Analyzer';\r\n\r\nimport SpellUsable from 'parser/shared/modules/SpellUsable';\r\nimport ItemDamageDone from 'interface/ItemDamageDone';\r\nimport Statistic from 'interface/statistics/Statistic';\r\nimport STATISTIC_CATEGORY from 'interface/others/STATISTIC_CATEGORY';\r\nimport STATISTIC_ORDER from 'interface/others/STATISTIC_ORDER';\r\nimport BoringSpellValueText from 'interface/statistics/components/BoringSpellValueText';\r\nimport Events, { DamageEvent } from 'parser/core/Events';\r\n\r\n/**\r\n * Hurls a Steel Trap to the target location that snaps shut on the\r\n * first enemy that approaches, immobilizing them for 20 sec and\r\n * causing them to bleed for (120% of Attack power) damage over 20 sec.\r\n *\r\n * Example log:\r\n * https://www.warcraftlogs.com/reports/K8chFdJvxfywkPRG#fight=92&type=damage-done&source=988&translate=true&ability=162487\r\n */\r\n\r\nclass SteelTrap extends Analyzer {\r\n\r\n  static dependencies = {\r\n    spellUsable: SpellUsable,\r\n  };\r\n\r\n  damage = 0;\r\n  casts = 0;\r\n\r\n  protected spellUsable!: SpellUsable;\r\n\r\n  constructor(options: Options) {\r\n    super(options);\r\n\r\n    this.active = this.selectedCombatant.hasTalent(SPELLS.STEEL_TRAP_TALENT.id);\r\n\r\n    this.addEventListener(Events.cast.by(SELECTED_PLAYER).spell(SPELLS.STEEL_TRAP_TALENT), this.onCast);\r\n    this.addEventListener(Events.damage.by(SELECTED_PLAYER).spell(SPELLS.STEEL_TRAP_DEBUFF), this.onDamage);\r\n  }\r\n\r\n  onCast() {\r\n    this.casts += 1;\r\n  }\r\n\r\n  onDamage(event: DamageEvent) {\r\n    if (this.casts === 0) {\r\n      this.casts += 1;\r\n      this.spellUsable.beginCooldown(SPELLS.STEEL_TRAP_TALENT.id, event);\r\n    }\r\n    this.damage += event.amount + (event.absorbed || 0);\r\n  }\r\n\r\n  statistic() {\r\n    return (\r\n      <Statistic\r\n        position={STATISTIC_ORDER.OPTIONAL(3)}\r\n        size=\"flexible\"\r\n        category={STATISTIC_CATEGORY.TALENTS}\r\n      >\r\n        <BoringSpellValueText spell={SPELLS.STEEL_TRAP_TALENT}>\r\n          <>\r\n            <ItemDamageDone amount={this.damage} />\r\n          </>\r\n        </BoringSpellValueText>\r\n      </Statistic>\r\n    );\r\n  }\r\n}\r\n\r\nexport default SteelTrap;\r\n","import React from 'react';\r\n\r\nimport Analyzer, { Options, SELECTED_PLAYER } from 'parser/core/Analyzer';\r\n\r\nimport SPELLS from 'common/SPELLS';\r\nimport SpellUsable from 'parser/shared/modules/SpellUsable';\r\nimport { encodeTargetString } from 'parser/shared/modules/EnemyInstances';\r\nimport Statistic from 'interface/statistics/Statistic';\r\nimport STATISTIC_CATEGORY from 'interface/others/STATISTIC_CATEGORY';\r\nimport STATISTIC_ORDER from 'interface/others/STATISTIC_ORDER';\r\nimport BoringSpellValueText from 'interface/statistics/components/BoringSpellValueText';\r\nimport Events, { DamageEvent } from 'parser/core/Events';\r\nimport AverageTargetsHit from 'interface/others/AverageTargetsHit';\r\nimport { SURVIVAL_CHAKRAM_TYPES } from 'parser/hunter/survival/constants';\r\n\r\n/**\r\n * Throw a pair of chakrams at your target, slicing all enemies in the chakrams' path for (40% of Attack power) Physical damage. The chakrams will return to you, damaging enemies again.\r\n *\r\n * Example log:\r\n * https://www.warcraftlogs.com/reports/VGNkQ6BFbcdPvMDX#fight=20&type=damage-done&source=169&ability=-259391\r\n */\r\n\r\nclass Chakrams extends Analyzer {\r\n  static dependencies = {\r\n    spellUsable: SpellUsable,\r\n  };\r\n  casts = 0;\r\n  targetsHit = 0;\r\n  uniqueTargets: string[] = [];\r\n  protected spellUsable!: SpellUsable;\r\n\r\n  constructor(options: Options) {\r\n    super(options);\r\n\r\n    this.active = this.selectedCombatant.hasTalent(SPELLS.CHAKRAMS_TALENT.id);\r\n\r\n    this.addEventListener(Events.cast.by(SELECTED_PLAYER).spell(SPELLS.CHAKRAMS_TALENT), this.onCast);\r\n    this.addEventListener(Events.damage.by(SELECTED_PLAYER).spell(SURVIVAL_CHAKRAM_TYPES), this.onDamage);\r\n  }\r\n\r\n  onCast() {\r\n    this.uniqueTargets = [];\r\n    this.casts += 1;\r\n  }\r\n\r\n  onDamage(event: DamageEvent) {\r\n    if (this.casts === 0) {\r\n      this.casts += 1;\r\n      this.spellUsable.beginCooldown(SPELLS.CHAKRAMS_TALENT.id, event);\r\n    }\r\n    const damageTarget: string = encodeTargetString(event.targetID, event.targetInstance);\r\n    if (!this.uniqueTargets.includes(damageTarget)) {\r\n      this.targetsHit += 1;\r\n      this.uniqueTargets.push(damageTarget);\r\n    }\r\n  }\r\n\r\n  statistic() {\r\n    return (\r\n      <Statistic\r\n        position={STATISTIC_ORDER.OPTIONAL(21)}\r\n        size=\"flexible\"\r\n        category={STATISTIC_CATEGORY.TALENTS}\r\n      >\r\n        <BoringSpellValueText spell={SPELLS.CHAKRAMS_TALENT}>\r\n          <>\r\n            <AverageTargetsHit casts={this.casts} hits={this.targetsHit} unique />\r\n          </>\r\n        </BoringSpellValueText>\r\n      </Statistic>\r\n    );\r\n  }\r\n}\r\n\r\nexport default Chakrams;\r\n","import React from 'react';\r\n\r\nimport Analyzer, { Options, SELECTED_PLAYER, SELECTED_PLAYER_PET } from 'parser/core/Analyzer';\r\nimport SPELLS from 'common/SPELLS';\r\nimport Enemies from 'parser/shared/modules/Enemies';\r\nimport ItemDamageDone from 'interface/ItemDamageDone';\r\nimport Statistic from 'interface/statistics/Statistic';\r\nimport STATISTIC_CATEGORY from 'interface/others/STATISTIC_CATEGORY';\r\nimport STATISTIC_ORDER from 'interface/others/STATISTIC_ORDER';\r\nimport BoringSpellValueText from 'interface/statistics/components/BoringSpellValueText';\r\nimport Events, { CastEvent, DamageEvent } from 'parser/core/Events';\r\nimport { SV_KILL_COMMAND_FOCUS_GAIN } from 'parser/hunter/survival/constants';\r\nimport { MS_BUFFER } from 'parser/hunter/shared/constants';\r\n\r\n/**\r\n * Lace your Wildfire Bomb with extra reagents, randomly giving it one of the following enhancements each time you throw it:\r\n *\r\n * Pheromone Bomb:\r\n * Kill Command has a 100% chance to reset against targets coated with Pheromones.\r\n *\r\n * Example log:\r\n * https://www.warcraftlogs.com/reports/ZRALzNbMpqka1fTB#fight=17&type=summary&source=329\r\n */\r\n\r\nclass PheromoneBomb extends Analyzer {\r\n  static dependencies = {\r\n    enemies: Enemies,\r\n  };\r\n\r\n  damage = 0;\r\n  casts = 0;\r\n  kcCastTimestamp = 0;\r\n  focusGained = 0;\r\n  resets = 0;\r\n\r\n  protected enemies!: Enemies;\r\n\r\n  constructor(options: Options) {\r\n    super(options);\r\n\r\n    this.active = this.selectedCombatant.hasTalent(SPELLS.WILDFIRE_INFUSION_TALENT.id);\r\n\r\n    this.addEventListener(Events.damage.by(SELECTED_PLAYER_PET).spell(SPELLS.KILL_COMMAND_DAMAGE_SV), this.onPetDamage);\r\n    this.addEventListener(Events.damage.by(SELECTED_PLAYER).spell([SPELLS.PHEROMONE_BOMB_WFI_DOT, SPELLS.PHEROMONE_BOMB_WFI_IMPACT]), this.onPlayerDamage);\r\n    this.addEventListener(Events.cast.by(SELECTED_PLAYER).spell(SPELLS.PHEROMONE_BOMB_WFI), this.onBombCast);\r\n    this.addEventListener(Events.cast.by(SELECTED_PLAYER).spell(SPELLS.KILL_COMMAND_CAST_SV), this.onKillCommandCast);\r\n  }\r\n\r\n  onPetDamage(event: DamageEvent) {\r\n    const enemy = this.enemies.getEntity(event);\r\n    if (!enemy || !enemy.hasBuff(SPELLS.PHEROMONE_BOMB_WFI_DOT.id)) {\r\n      return;\r\n    }\r\n    if (event.timestamp < (this.kcCastTimestamp + MS_BUFFER)) {\r\n      this.focusGained += SV_KILL_COMMAND_FOCUS_GAIN;\r\n      this.resets += 1;\r\n    }\r\n  }\r\n\r\n  onPlayerDamage(event: DamageEvent) {\r\n    this.damage += event.amount + (event.absorbed || 0);\r\n  }\r\n\r\n  onBombCast() {\r\n    this.casts += 1;\r\n  }\r\n\r\n  onKillCommandCast(event: CastEvent) {\r\n    this.kcCastTimestamp = event.timestamp;\r\n  }\r\n\r\n  statistic() {\r\n    return (\r\n      <Statistic\r\n        position={STATISTIC_ORDER.OPTIONAL(2)}\r\n        size=\"flexible\"\r\n        category={STATISTIC_CATEGORY.TALENTS}\r\n        dropdown={(\r\n          <>\r\n            <table className=\"table table-condensed\">\r\n              <thead>\r\n                <tr>\r\n                  <th>Average resets</th>\r\n                  <th>Total resets</th>\r\n                  <th>Focus gain</th>\r\n                </tr>\r\n              </thead>\r\n              <tbody>\r\n                <tr>\r\n                  <td>{(this.resets / this.casts).toFixed(1)}</td>\r\n                  <td>{this.resets}</td>\r\n                  <td>{this.focusGained}</td>\r\n                </tr>\r\n              </tbody>\r\n            </table>\r\n          </>\r\n        )}\r\n      >\r\n        <BoringSpellValueText spell={SPELLS.PHEROMONE_BOMB_WFI}>\r\n          <>\r\n            <ItemDamageDone amount={this.damage} />\r\n          </>\r\n        </BoringSpellValueText>\r\n      </Statistic>\r\n    );\r\n  }\r\n}\r\n\r\nexport default PheromoneBomb;\r\n","import React from 'react';\r\n\r\nimport Analyzer, { Options, SELECTED_PLAYER } from 'parser/core/Analyzer';\r\nimport SPELLS from 'common/SPELLS';\r\nimport Enemies from 'parser/shared/modules/Enemies';\r\nimport ItemDamageDone from 'interface/ItemDamageDone';\r\nimport { formatNumber } from 'common/format';\r\nimport Statistic from 'interface/statistics/Statistic';\r\nimport STATISTIC_CATEGORY from 'interface/others/STATISTIC_CATEGORY';\r\nimport STATISTIC_ORDER from 'interface/others/STATISTIC_ORDER';\r\nimport BoringSpellValueText from 'interface/statistics/components/BoringSpellValueText';\r\nimport Events, { ApplyDebuffEvent, ApplyDebuffStackEvent, DamageEvent, EventType } from 'parser/core/Events';\r\n\r\n/**\r\n * Lace your Wildfire Bomb with extra reagents, randomly giving it one of the following enhancements each time you throw it:\r\n *\r\n * Shrapnel Bomb:\r\n * Shrapnel pierces the targets, causing Mongoose Bite, Raptor Strike, Butchery and Carve to apply a bleed for 9 sec that stacks up to 3 times.\r\n *\r\n * Example log:\r\n * https://www.warcraftlogs.com/reports/ZRALzNbMpqka1fTB#fight=17&type=summary&source=329\r\n */\r\n\r\nclass ShrapnelBomb extends Analyzer {\r\n  static dependencies = {\r\n    enemies: Enemies,\r\n  };\r\n\r\n  damage = 0;\r\n  bleedDamage = 0;\r\n  stacks = 0;\r\n  applications = 0;\r\n\r\n  protected enemies!: Enemies;\r\n\r\n  constructor(options: Options) {\r\n    super(options);\r\n\r\n    this.active = this.selectedCombatant.hasTalent(SPELLS.WILDFIRE_INFUSION_TALENT.id);\r\n\r\n    this.addEventListener(Events.damage.by(SELECTED_PLAYER).spell([SPELLS.SHRAPNEL_BOMB_WFI_DOT, SPELLS.SHRAPNEL_BOMB_WFI_IMPACT, SPELLS.INTERNAL_BLEEDING_SV]), this.onDamage);\r\n    this.addEventListener(Events.applydebuff.by(SELECTED_PLAYER).spell(SPELLS.INTERNAL_BLEEDING_SV), this.onDebuffApplication);\r\n    this.addEventListener(Events.applydebuffstack.by(SELECTED_PLAYER).spell(SPELLS.INTERNAL_BLEEDING_SV), this.onDebuffApplication);\r\n  }\r\n\r\n  onDamage(event: DamageEvent) {\r\n    if (event.ability.guid === SPELLS.INTERNAL_BLEEDING_SV.id) {\r\n      this.bleedDamage += event.amount + (event.absorbed || 0);\r\n    }\r\n    this.damage += event.amount + (event.absorbed || 0);\r\n  }\r\n\r\n  onDebuffApplication(event: ApplyDebuffEvent | ApplyDebuffStackEvent) {\r\n    if (event.type === EventType.ApplyDebuff) {\r\n      this.applications += 1;\r\n    }\r\n    this.stacks += 1;\r\n  }\r\n\r\n  statistic() {\r\n    return (\r\n      <Statistic\r\n        position={STATISTIC_ORDER.OPTIONAL(2)}\r\n        size=\"flexible\"\r\n        category={STATISTIC_CATEGORY.TALENTS}\r\n        dropdown={(\r\n          <>\r\n            <table className=\"table table-condensed\">\r\n              <thead>\r\n                <tr>\r\n                  <th>Average stacks</th>\r\n                  <th>Total stacks</th>\r\n                  <th>Bleed damage</th>\r\n                </tr>\r\n              </thead>\r\n              <tbody>\r\n                <tr>\r\n                  <td>{(this.stacks / this.applications).toFixed(1)}</td>\r\n                  <td>{this.stacks}</td>\r\n                  <td>{formatNumber(this.bleedDamage / (this.owner.fightDuration / 1000))} DPS</td>\r\n                </tr>\r\n              </tbody>\r\n            </table>\r\n          </>\r\n        )}\r\n      >\r\n        <BoringSpellValueText spell={SPELLS.SHRAPNEL_BOMB_WFI}>\r\n          <>\r\n            <ItemDamageDone amount={this.damage} />\r\n          </>\r\n        </BoringSpellValueText>\r\n      </Statistic>\r\n    );\r\n  }\r\n}\r\n\r\nexport default ShrapnelBomb;\r\n","import React from 'react';\r\n\r\nimport Analyzer, { Options, SELECTED_PLAYER } from 'parser/core/Analyzer';\r\nimport { ThresholdStyle, When } from 'parser/core/ParseResults';\r\nimport SPELLS from 'common/SPELLS';\r\nimport { encodeTargetString } from 'parser/shared/modules/EnemyInstances';\r\nimport Enemies from 'parser/shared/modules/Enemies';\r\nimport StatTracker from 'parser/shared/modules/StatTracker';\r\nimport { SERPENT_STING_SV_BASE_DURATION, SV_SERPENT_STING_COST } from 'parser/hunter/survival/constants';\r\nimport ItemDamageDone from 'interface/ItemDamageDone';\r\nimport { formatDuration } from 'common/format';\r\nimport SpellLink from 'common/SpellLink';\r\nimport Statistic from 'interface/statistics/Statistic';\r\nimport STATISTIC_CATEGORY from 'interface/others/STATISTIC_CATEGORY';\r\nimport STATISTIC_ORDER from 'interface/others/STATISTIC_ORDER';\r\nimport BoringSpellValueText from 'interface/statistics/components/BoringSpellValueText';\r\nimport Events, { ApplyDebuffEvent, DamageEvent, RefreshDebuffEvent, RemoveDebuffEvent } from 'parser/core/Events';\r\nimport { i18n } from '@lingui/core';\r\nimport { t } from '@lingui/macro';\r\n\r\n/**\r\n * Lace your Wildfire Bomb with extra reagents, randomly giving it one of the following enhancements each time you throw it:\r\n *\r\n * Volatile Bomb:\r\n * Reacts violently with poison, causing an extra explosion against enemies suffering from your Serpent Sting and refreshes your Serpent Stings.\r\n *\r\n * Example log:\r\n * https://www.warcraftlogs.com/reports/ZRALzNbMpqka1fTB#fight=17&type=summary&source=329\r\n */\r\n\r\nclass VolatileBomb extends Analyzer {\r\n  static dependencies = {\r\n    enemies: Enemies,\r\n    statTracker: StatTracker,\r\n  };\r\n\r\n  damage = 0;\r\n  casts = 0;\r\n  extendedSerpentStings = 0;\r\n  extendedInMs = 0;\r\n  focusSaved = 0;\r\n  missedSerpentResets = 0;\r\n  activeSerpentStings: { [key: string]: { targetName: string, cast: number, expectedEnd: number, extendStart: number, extendExpectedEnd: number } } = {\r\n    /*\r\n    [encodedTargetString]: {\r\n        targetName: name,\r\n        cast: timestamp,\r\n        expectedEnd: timestamp,\r\n        extendStart: timestamp || null,\r\n        extendExpectedEnd: timestamp || null,\r\n      },\r\n     */\r\n  };\r\n\r\n  protected enemies!: Enemies;\r\n  protected statTracker!: StatTracker;\r\n\r\n  constructor(options: Options) {\r\n    super(options);\r\n\r\n    this.active = this.selectedCombatant.hasTalent(SPELLS.WILDFIRE_INFUSION_TALENT.id);\r\n\r\n    this.addEventListener(Events.applydebuff.by(SELECTED_PLAYER).spell(SPELLS.SERPENT_STING_SV), this._serpentApplication);\r\n    this.addEventListener(Events.refreshdebuff.by(SELECTED_PLAYER).spell(SPELLS.SERPENT_STING_SV), this._serpentApplication);\r\n    this.addEventListener(Events.removedebuff.by(SELECTED_PLAYER).spell(SPELLS.SERPENT_STING_SV), this.onDebuffRemoval);\r\n    this.addEventListener(Events.applydebuff.by(SELECTED_PLAYER).spell(SPELLS.VOLATILE_BOMB_WFI_DOT), this._maybeSerpentStingExtend);\r\n    this.addEventListener(Events.cast.by(SELECTED_PLAYER).spell(SPELLS.VOLATILE_BOMB_WFI), this.onBombCast);\r\n    this.addEventListener(Events.damage.by(SELECTED_PLAYER).spell([SPELLS.VOLATILE_BOMB_WFI_DOT, SPELLS.VOLATILE_BOMB_WFI_IMPACT]), this.onBombDamage);\r\n  }\r\n\r\n  get missedResetsThresholds() {\r\n    return {\r\n      actual: this.missedSerpentResets,\r\n      isGreaterThan: {\r\n        minor: 1,\r\n        average: 2,\r\n        major: 3,\r\n      },\r\n      style: ThresholdStyle.NUMBER,\r\n    };\r\n  }\r\n\r\n  _serpentApplication(event: ApplyDebuffEvent | RefreshDebuffEvent) {\r\n    const enemy = this.enemies.getEntity(event);\r\n    if (!enemy) {\r\n      return;\r\n    }\r\n    const target = encodeTargetString(event.targetID, event.targetInstance);\r\n    const hastedSerpentStingDuration = SERPENT_STING_SV_BASE_DURATION / (1 + this.statTracker.currentHastePercentage);\r\n    this.activeSerpentStings[target] = {\r\n      targetName: enemy.name,\r\n      cast: event.timestamp,\r\n      expectedEnd: event.timestamp + hastedSerpentStingDuration,\r\n      extendStart: 0,\r\n      extendExpectedEnd: 0,\r\n    };\r\n  }\r\n\r\n  _maybeSerpentStingExtend(event: ApplyDebuffEvent) {\r\n    const enemy = this.enemies.getEntity(event);\r\n    if (!enemy) {\r\n      return;\r\n    }\r\n    const target = encodeTargetString(event.targetID, event.targetInstance);\r\n    if (this.activeSerpentStings[target]) {\r\n      this.activeSerpentStings[target].extendStart = event.timestamp;\r\n      this.activeSerpentStings[target].extendExpectedEnd = event.timestamp + (this.activeSerpentStings[target].expectedEnd - this.activeSerpentStings[target].cast);\r\n\r\n      this.extendedInMs += this.activeSerpentStings[target].extendExpectedEnd - this.activeSerpentStings[target].expectedEnd;\r\n      this.focusSaved += SV_SERPENT_STING_COST;\r\n      this.extendedSerpentStings += 1;\r\n    } else {\r\n      this.missedSerpentResets += 1;\r\n    }\r\n  }\r\n\r\n  onDebuffRemoval(event: RemoveDebuffEvent) {\r\n    const encoded = encodeTargetString(event.targetID, event.targetInstance);\r\n    delete this.activeSerpentStings[encoded];\r\n  }\r\n\r\n  onBombDamage(event: DamageEvent) {\r\n    this.damage += event.amount + (event.absorbed || 0);\r\n  }\r\n\r\n  onBombCast() {\r\n    this.casts += 1;\r\n  }\r\n\r\n  statistic() {\r\n    return (\r\n      <Statistic\r\n        position={STATISTIC_ORDER.OPTIONAL(2)}\r\n        size=\"flexible\"\r\n        category={STATISTIC_CATEGORY.TALENTS}\r\n        dropdown={(\r\n          <>\r\n            <table className=\"table table-condensed\">\r\n              <thead>\r\n                <tr>\r\n                  <th>Refreshes</th>\r\n                  <th>Avg</th>\r\n                  <th>Total</th>\r\n                  <th>Focus saved</th>\r\n                  <th>Missed refreshes</th>\r\n                </tr>\r\n              </thead>\r\n              <tbody>\r\n                <tr>\r\n                  <td>{this.extendedSerpentStings}</td>\r\n                  <td>{formatDuration(this.extendedInMs / this.casts / 1000)}</td>\r\n                  <td>{formatDuration(this.extendedInMs / 1000)}</td>\r\n                  <td>{this.focusSaved}</td>\r\n                  <td>{this.missedSerpentResets}</td>\r\n                </tr>\r\n              </tbody>\r\n            </table>\r\n          </>\r\n        )}\r\n      >\r\n        <BoringSpellValueText spell={SPELLS.VOLATILE_BOMB_WFI}>\r\n          <>\r\n            <ItemDamageDone amount={this.damage} />\r\n          </>\r\n        </BoringSpellValueText>\r\n      </Statistic>\r\n    );\r\n  }\r\n\r\n  suggestions(when: When) {\r\n    when(this.missedResetsThresholds).addSuggestion((suggest, actual, recommended) => suggest(<>You shouldn't cast <SpellLink id={SPELLS.VOLATILE_BOMB_WFI.id} /> if your target doesn't have <SpellLink id={SPELLS.SERPENT_STING_SV.id} /> on.</>)\r\n      .icon(SPELLS.VOLATILE_BOMB_WFI.icon)\r\n      .actual(i18n._(t('hunter.survival.suggestions.wildfireInfusion.castsWithoutSerpentSting')`${actual} casts without ${<SpellLink id={SPELLS.SERPENT_STING_SV.id} />} on`))\r\n      .recommended(`<${recommended} is recommended`));\r\n\r\n  }\r\n}\r\n\r\nexport default VolatileBomb;\r\n","import React from 'react';\r\n\r\nimport Analyzer, { Options, SELECTED_PLAYER_PET } from 'parser/core/Analyzer';\r\nimport SPELLS from 'common/SPELLS';\r\nimport ItemDamageDone from 'interface/ItemDamageDone';\r\nimport calculateEffectiveDamage from 'parser/core/calculateEffectiveDamage';\r\nimport { ALPHA_DAMAGE_KC_MODIFIER } from 'parser/hunter/survival/constants';\r\nimport Statistic from 'interface/statistics/Statistic';\r\nimport STATISTIC_CATEGORY from 'interface/others/STATISTIC_CATEGORY';\r\nimport STATISTIC_ORDER from 'interface/others/STATISTIC_ORDER';\r\nimport BoringSpellValueText from 'interface/statistics/components/BoringSpellValueText';\r\nimport Events, { DamageEvent } from 'parser/core/Events';\r\n\r\n/**\r\n * Kill Command now has 2 charges, and deals 30% increased damage.\r\n *\r\n * Example log:\r\n * https://www.warcraftlogs.com/reports/ayK6THQGAB4Y8h9N#fight=15&type=summary&source=1415&translate=true\r\n */\r\nclass AlphaPredator extends Analyzer {\r\n  damage = 0;\r\n\r\n  constructor(options: Options) {\r\n    super(options);\r\n\r\n    this.active = this.selectedCombatant.hasTalent(SPELLS.ALPHA_PREDATOR_TALENT.id);\r\n\r\n    this.addEventListener(Events.damage.by(SELECTED_PLAYER_PET).spell(SPELLS.KILL_COMMAND_DAMAGE_SV), this.onPetDamage);\r\n  }\r\n\r\n  onPetDamage(event: DamageEvent) {\r\n    this.damage += calculateEffectiveDamage(event, ALPHA_DAMAGE_KC_MODIFIER);\r\n  }\r\n\r\n  statistic() {\r\n    return (\r\n      <Statistic\r\n        position={STATISTIC_ORDER.OPTIONAL(1)}\r\n        size=\"flexible\"\r\n        tooltip={(\r\n          <>\r\n            This statistic shows the damage gained from the increased Kill Command damage. It does not reflect the potential damage gain from having 2 charges of Kill Command or from the focus gain from Kill Command overall.\r\n          </>\r\n        )}\r\n        category={STATISTIC_CATEGORY.TALENTS}\r\n      >\r\n        <BoringSpellValueText spell={SPELLS.ALPHA_PREDATOR_TALENT}>\r\n          <>\r\n            <ItemDamageDone amount={this.damage} />\r\n          </>\r\n        </BoringSpellValueText>\r\n      </Statistic>\r\n    );\r\n  }\r\n}\r\n\r\nexport default AlphaPredator;\r\n","import React from 'react';\r\n\r\nimport Analyzer, { Options, SELECTED_PLAYER, SELECTED_PLAYER_PET } from 'parser/core/Analyzer';\r\nimport SPELLS from 'common/SPELLS';\r\nimport { BLOODSEEKER_ATTACK_SPEED_GAIN } from 'parser/hunter/survival/constants';\r\nimport { formatPercentage } from 'common/format';\r\nimport ItemDamageDone from 'interface/ItemDamageDone';\r\nimport Statistic from 'interface/statistics/Statistic';\r\nimport STATISTIC_CATEGORY from 'interface/others/STATISTIC_CATEGORY';\r\nimport STATISTIC_ORDER from 'interface/others/STATISTIC_ORDER';\r\nimport BoringSpellValueText from 'interface/statistics/components/BoringSpellValueText';\r\nimport Events, { CastEvent, DamageEvent } from 'parser/core/Events';\r\nimport { MS_BUFFER } from 'parser/hunter/shared/constants';\r\n\r\n/**\r\n * Kill Command causes the target to bleed for X damage over 8 sec.\r\n * You and your pet gain 10% attack speed for every bleeding enemy within 12 yds.\r\n *\r\n * Example log:\r\n * https://www.warcraftlogs.com/reports/6GjD12YkQCnJqPTz#fight=25&type=auras&translate=true&source=19&ability=260249\r\n */\r\n\r\nclass Bloodseeker extends Analyzer {\r\n\r\n  averageStacks: number = 0;\r\n  kcCastTimestamp: number = 0;\r\n  damage: number = 0;\r\n\r\n  constructor(options: Options) {\r\n    super(options);\r\n\r\n    this.active = this.selectedCombatant.hasTalent(SPELLS.BLOODSEEKER_TALENT.id);\r\n\r\n    this.addEventListener(Events.damage.by(SELECTED_PLAYER_PET).spell(SPELLS.KILL_COMMAND_DAMAGE_SV), this.onPetDamage);\r\n    this.addEventListener(Events.cast.by(SELECTED_PLAYER).spell(SPELLS.KILL_COMMAND_CAST_SV), this.onCast);\r\n  }\r\n\r\n  get uptime() {\r\n    return this.selectedCombatant.getBuffUptime(SPELLS.BLOODSEEKER_BUFF.id) / this.owner.fightDuration;\r\n  }\r\n\r\n  get averageAttackSpeedGain() {\r\n    this.averageStacks = this.selectedCombatant.getStackWeightedBuffUptime(SPELLS.BLOODSEEKER_BUFF.id) / this.owner.fightDuration;\r\n    return this.averageStacks * BLOODSEEKER_ATTACK_SPEED_GAIN;\r\n  }\r\n\r\n  onPetDamage(event: DamageEvent) {\r\n    if (event.timestamp > (this.kcCastTimestamp + MS_BUFFER)) {\r\n      this.damage += event.amount + (event.absorbed || 0);\r\n    }\r\n  }\r\n\r\n  onCast(event: CastEvent) {\r\n    this.kcCastTimestamp = event.timestamp;\r\n  }\r\n\r\n  statistic() {\r\n    return (\r\n      <Statistic\r\n        position={STATISTIC_ORDER.OPTIONAL(2)}\r\n        size=\"flexible\"\r\n        tooltip={(\r\n          <>\r\n            You had {formatPercentage(this.uptime)}% uptime on the buff, with an average of {(this.averageStacks).toFixed(2)} stacks.\r\n          </>\r\n        )}\r\n        category={STATISTIC_CATEGORY.TALENTS}\r\n      >\r\n        <BoringSpellValueText spell={SPELLS.BLOODSEEKER_TALENT}>\r\n          <>\r\n            <ItemDamageDone amount={this.damage} /> <br />\r\n            {formatPercentage(this.averageAttackSpeedGain)}% <small>atk speed gain</small>\r\n          </>\r\n        </BoringSpellValueText>\r\n      </Statistic>\r\n    );\r\n  }\r\n\r\n}\r\n\r\nexport default Bloodseeker;\r\n","import React from 'react';\r\n\r\nimport SPELLS from 'common/SPELLS';\r\nimport Analyzer, { Options, SELECTED_PLAYER } from 'parser/core/Analyzer';\r\nimport ItemDamageDone from 'interface/ItemDamageDone';\r\nimport { encodeTargetString } from 'parser/shared/modules/EnemyInstances';\r\nimport calculateEffectiveDamage from 'parser/core/calculateEffectiveDamage';\r\nimport { HYDRAS_BITE_DOT_MODIFIER } from 'parser/hunter/survival/constants';\r\nimport Statistic from 'interface/statistics/Statistic';\r\nimport STATISTIC_CATEGORY from 'interface/others/STATISTIC_CATEGORY';\r\nimport STATISTIC_ORDER from 'interface/others/STATISTIC_ORDER';\r\nimport BoringSpellValueText from 'interface/statistics/components/BoringSpellValueText';\r\nimport Events, { ApplyDebuffEvent, CastEvent, DamageEvent, RefreshDebuffEvent, RemoveDebuffEvent } from 'parser/core/Events';\r\n\r\n/**\r\n * Serpent Sting fires arrows at 2 additional enemies near your target, and its damage over time is increased by 10%.\r\n *\r\n * Example log: https://www.warcraftlogs.com/reports/6XmjYqTnc3DM7VQx/#fight=6&source=21\r\n */\r\n\r\nclass HydrasBite extends Analyzer {\r\n\r\n  casts = 0;\r\n  spreadDamage = 0;\r\n  increasedMainTargetDamage = 0;\r\n  extraApplications = 0;\r\n  mainTargets: string[] = [];\r\n\r\n  constructor(options: Options) {\r\n    super(options);\r\n\r\n    this.active = this.selectedCombatant.hasTalent(SPELLS.HYDRAS_BITE_TALENT.id);\r\n\r\n    this.addEventListener(Events.cast.by(SELECTED_PLAYER).spell(SPELLS.SERPENT_STING_SV), this.onCast);\r\n    this.addEventListener(Events.damage.by(SELECTED_PLAYER).spell(SPELLS.SERPENT_STING_SV), this.onDamage);\r\n    this.addEventListener(Events.applydebuff.by(SELECTED_PLAYER).spell(SPELLS.SERPENT_STING_SV), this.onDebuffApplication);\r\n    this.addEventListener(Events.refreshdebuff.by(SELECTED_PLAYER).spell(SPELLS.SERPENT_STING_SV), this.onDebuffApplication);\r\n    this.addEventListener(Events.removedebuff.by(SELECTED_PLAYER).spell(SPELLS.SERPENT_STING_SV), this.onRemoveDebuff);\r\n  }\r\n\r\n  onCast(event: CastEvent) {\r\n    const target = encodeTargetString(event.targetID, event.targetInstance);\r\n    this.mainTargets.push(target);\r\n    this.casts += 1;\r\n  }\r\n\r\n  onDamage(event: DamageEvent) {\r\n    const target = encodeTargetString(event.targetID, event.targetInstance);\r\n    if (this.mainTargets.includes(target)) {\r\n      this.increasedMainTargetDamage += calculateEffectiveDamage(event, HYDRAS_BITE_DOT_MODIFIER);\r\n    } else {\r\n      this.spreadDamage += event.amount + (event.absorbed || 0);\r\n    }\r\n  }\r\n\r\n  onDebuffApplication(event: ApplyDebuffEvent | RefreshDebuffEvent) {\r\n    const target = encodeTargetString(event.targetID, event.targetInstance);\r\n    if (this.mainTargets.includes(target)) {\r\n      return;\r\n    }\r\n    this.extraApplications += 1;\r\n  }\r\n\r\n  onRemoveDebuff(event: RemoveDebuffEvent) {\r\n    const target = encodeTargetString(event.targetID, event.targetInstance);\r\n    const index = this.mainTargets.indexOf(target);\r\n    if (index !== -1) {\r\n      this.mainTargets.splice(index, 1);\r\n    }\r\n  }\r\n\r\n  statistic() {\r\n    return (\r\n      <Statistic\r\n        position={STATISTIC_ORDER.OPTIONAL(3)}\r\n        size=\"flexible\"\r\n        dropdown={(\r\n          <>\r\n            <table className=\"table table-condensed\">\r\n              <thead>\r\n                <tr>\r\n                  <th>Target</th>\r\n                  <th>Damage</th>\r\n                  <th>Debuffs</th>\r\n                </tr>\r\n              </thead>\r\n              <tbody>\r\n                <tr>\r\n                  <td>Main</td>\r\n                  <td><ItemDamageDone amount={this.increasedMainTargetDamage} /></td>\r\n                  <td>{this.casts}</td>\r\n                </tr>\r\n                <tr>\r\n                  <td>Other</td>\r\n                  <td><ItemDamageDone amount={this.spreadDamage} /></td>\r\n                  <td>{this.extraApplications}</td>\r\n                </tr>\r\n              </tbody>\r\n            </table>\r\n          </>\r\n        )}\r\n        category={STATISTIC_CATEGORY.TALENTS}\r\n      >\r\n        <BoringSpellValueText spell={SPELLS.HYDRAS_BITE_TALENT}>\r\n          <>\r\n            <ItemDamageDone amount={this.increasedMainTargetDamage + this.spreadDamage} /> <br />\r\n            {(this.extraApplications / this.casts).toFixed(1)} <small>extra dots/cast</small>\r\n          </>\r\n        </BoringSpellValueText>\r\n      </Statistic>\r\n    );\r\n  }\r\n}\r\n\r\nexport default HydrasBite;\r\n","import React from 'react';\r\n\r\nimport Analyzer, { Options, SELECTED_PLAYER, SELECTED_PLAYER_PET } from 'parser/core/Analyzer';\r\nimport SPELLS from 'common/SPELLS';\r\nimport ItemDamageDone from 'interface/ItemDamageDone';\r\nimport Statistic from 'interface/statistics/Statistic';\r\nimport STATISTIC_CATEGORY from 'interface/others/STATISTIC_CATEGORY';\r\nimport STATISTIC_ORDER from 'interface/others/STATISTIC_ORDER';\r\nimport BoringSpellValueText from 'interface/statistics/components/BoringSpellValueText';\r\nimport Events, { DamageEvent, EnergizeEvent } from 'parser/core/Events';\r\nimport { FLANKING_STRIKE_FOCUS_GAIN } from 'parser/hunter/survival/constants';\r\n\r\n/**\r\n * You and your pet leap to the target and strike it as one, dealing a total of X Physical damage.\r\n * Generates 30 Focus for you and your pet.\r\n *\r\n * Example log:\r\n * https://www.warcraftlogs.com/reports/QMJcFAdTXKhgpnbx#fight=2&type=damage-done&source=16&ability=259516\r\n */\r\n\r\nclass FlankingStrike extends Analyzer {\r\n\r\n  damage = 0;\r\n\r\n  flankingStrikes: Array<{ name: string, sourceID: number, damage: number, effectiveFocus: number, possibleFocus: number }> = [];\r\n\r\n  constructor(options: Options) {\r\n    super(options);\r\n\r\n    this.active = this.selectedCombatant.hasTalent(SPELLS.FLANKING_STRIKE_TALENT.id);\r\n\r\n    this.flankingStrikes.push({\r\n      name: this.selectedCombatant.name,\r\n      sourceID: this.owner.playerId,\r\n      damage: 0,\r\n      effectiveFocus: 0,\r\n      possibleFocus: 0,\r\n    });\r\n\r\n    this.addEventListener(Events.damage.by(SELECTED_PLAYER_PET).spell(SPELLS.FLANKING_STRIKE_PET), this.onPetDamage);\r\n    this.addEventListener(Events.damage.by(SELECTED_PLAYER).spell(SPELLS.FLANKING_STRIKE_PLAYER), this.onPlayerDamage);\r\n    this.addEventListener(Events.energize.by(SELECTED_PLAYER_PET).spell(SPELLS.FLANKING_STRIKE_PET), this.onPetEnergize);\r\n    this.addEventListener(Events.energize.by(SELECTED_PLAYER).spell(SPELLS.FLANKING_STRIKE_PLAYER), this.onPlayerEnergize);\r\n  }\r\n\r\n  get flankingStrikesPlayer() {\r\n    return this.flankingStrikes.find((item: { sourceID: number }) => item.sourceID === this.owner.playerId) || this.flankingStrikes[0];\r\n  }\r\n\r\n  getOrInitializePet(petId: number) {\r\n    const foundPet = this.flankingStrikes.find((pet: { sourceID: number }) => pet.sourceID === petId);\r\n    if (!foundPet) {\r\n      const sourcePet = this.owner.playerPets.find((pet: { id: number }) => pet.id === petId);\r\n      if (!sourcePet) {\r\n        return;\r\n      }\r\n      const pet = {\r\n        name: sourcePet.name,\r\n        sourceID: petId,\r\n        damage: 0,\r\n        effectiveFocus: 0,\r\n        possibleFocus: 0,\r\n      };\r\n      this.flankingStrikes.push(pet);\r\n      return pet;\r\n    }\r\n    return foundPet;\r\n  }\r\n\r\n  onPetDamage(event: DamageEvent) {\r\n    const damage = event.amount + (event.absorbed || 0);\r\n    const pet = this.getOrInitializePet(event.sourceID as number);\r\n    if (!pet) {\r\n      return;\r\n    }\r\n    pet.damage += damage;\r\n  }\r\n\r\n  onPlayerDamage(event: DamageEvent) {\r\n    this.flankingStrikesPlayer.damage += event.amount + (event.absorbed || 0);\r\n  }\r\n\r\n  onPetEnergize(event: EnergizeEvent) {\r\n    const effectiveFocus = (event.resourceChange - event.waste) || 0;\r\n    const pet = this.getOrInitializePet(event.sourceID);\r\n    if (!pet) {\r\n      return;\r\n    }\r\n    pet.effectiveFocus += effectiveFocus;\r\n    pet.possibleFocus += FLANKING_STRIKE_FOCUS_GAIN;\r\n  }\r\n\r\n  onPlayerEnergize(event: EnergizeEvent) {\r\n    const foundPlayer = this.flankingStrikesPlayer;\r\n    foundPlayer.effectiveFocus += (event.resourceChange - event.waste) || 0;\r\n    foundPlayer.possibleFocus += FLANKING_STRIKE_FOCUS_GAIN;\r\n  }\r\n\r\n  statistic() {\r\n    const totalDamage = this.flankingStrikes.map((source: { damage: number }) => source.damage).reduce((total: number, current: number) => total + current, 0);\r\n\r\n    return (\r\n      <Statistic\r\n        position={STATISTIC_ORDER.OPTIONAL(1)}\r\n        size=\"flexible\"\r\n        dropdown={(\r\n          <>\r\n            <table className=\"table table-condensed\">\r\n              <thead>\r\n                <tr>\r\n                  <th>Source</th>\r\n                  <th>Damage</th>\r\n                  <th>Focus</th>\r\n                </tr>\r\n              </thead>\r\n              <tbody>\r\n                {this.flankingStrikes.map((source: { name: string; damage: number; effectiveFocus: number; possibleFocus: number; }, idx: number) => (\r\n                  <tr key={idx}>\r\n                    <td>{source.name}</td>\r\n                    <td><ItemDamageDone amount={source.damage} /></td>\r\n                    <td>{source.effectiveFocus}/{source.possibleFocus}</td>\r\n                  </tr>\r\n                ))}\r\n              </tbody>\r\n            </table>\r\n          </>\r\n        )}\r\n        category={STATISTIC_CATEGORY.TALENTS}\r\n      >\r\n        <BoringSpellValueText spell={SPELLS.FLANKING_STRIKE_TALENT}>\r\n          <>\r\n            <ItemDamageDone amount={totalDamage} />\r\n          </>\r\n        </BoringSpellValueText>\r\n      </Statistic>\r\n    );\r\n  }\r\n}\r\n\r\nexport default FlankingStrike;\r\n","import React from 'react';\r\n\r\nimport Analyzer, { Options, SELECTED_PLAYER } from 'parser/core/Analyzer';\r\nimport SPELLS from 'common/SPELLS';\r\nimport ItemDamageDone from 'interface/ItemDamageDone';\r\nimport { RAPTOR_MONGOOSE_VARIANTS, TIP_DAMAGE_INCREASE, TIP_MAX_STACKS } from 'parser/hunter/survival/constants';\r\nimport calculateEffectiveDamage from 'parser/core/calculateEffectiveDamage';\r\nimport Statistic from 'interface/statistics/Statistic';\r\nimport STATISTIC_CATEGORY from 'interface/others/STATISTIC_CATEGORY';\r\nimport STATISTIC_ORDER from 'interface/others/STATISTIC_ORDER';\r\nimport BoringSpellValueText from 'interface/statistics/components/BoringSpellValueText';\r\nimport Events, { CastEvent, ChangeBuffStackEvent, DamageEvent } from 'parser/core/Events';\r\nimport { MS_BUFFER } from 'parser/hunter/shared/constants';\r\n\r\n/**\r\n * Kill Command increases the damage of your next Raptor Strike by 20%, stacking up to 3 times.\r\n *\r\n * Example log:\r\n * https://www.warcraftlogs.com/reports/ZRALzNbMpqka1fTB#fight=17&type=auras&source=329&translate=true&ability=260286\r\n */\r\n\r\nclass TipOfTheSpear extends Analyzer {\r\n  spenderCasts = 0;\r\n  stacks = 0;\r\n  usedStacks = 0;\r\n  wastedStacks = 0;\r\n  damage = 0;\r\n  lastApplicationTimestamp = 0;\r\n\r\n  constructor(options: Options) {\r\n    super(options);\r\n\r\n    this.active = this.selectedCombatant.hasTalent(SPELLS.TIP_OF_THE_SPEAR_TALENT.id);\r\n\r\n    this.addEventListener(Events.cast.by(SELECTED_PLAYER).spell(SPELLS.KILL_COMMAND_CAST_SV), this.onKillCommandCast);\r\n    this.addEventListener(Events.cast.by(SELECTED_PLAYER).spell(RAPTOR_MONGOOSE_VARIANTS), this.onSpenderCast);\r\n    this.addEventListener(Events.damage.by(SELECTED_PLAYER).spell(RAPTOR_MONGOOSE_VARIANTS), this.onDamage);\r\n    this.addEventListener(Events.changebuffstack.by(SELECTED_PLAYER).spell(SPELLS.TIP_OF_THE_SPEAR_CAST), this.onChangeBuffStack);\r\n  }\r\n\r\n  onSpenderCast() {\r\n    this.spenderCasts += 1;\r\n  }\r\n\r\n  onKillCommandCast(event: CastEvent) {\r\n    if (this.stacks === TIP_MAX_STACKS && event.timestamp > this.lastApplicationTimestamp + MS_BUFFER) {\r\n      this.wastedStacks += 1;\r\n    }\r\n  }\r\n\r\n  onDamage(event: DamageEvent) {\r\n    this.damage += calculateEffectiveDamage(event, TIP_DAMAGE_INCREASE * this.stacks);\r\n    this.usedStacks += this.stacks;\r\n  }\r\n\r\n  onChangeBuffStack(event: ChangeBuffStackEvent) {\r\n    if (event.newStacks !== 0) {\r\n      this.lastApplicationTimestamp = event.timestamp;\r\n    }\r\n    this.stacks = event.newStacks;\r\n  }\r\n\r\n  statistic() {\r\n    return (\r\n      <Statistic\r\n        position={STATISTIC_ORDER.OPTIONAL(3)}\r\n        size=\"flexible\"\r\n        category={STATISTIC_CATEGORY.TALENTS}\r\n      >\r\n        <BoringSpellValueText spell={SPELLS.TIP_OF_THE_SPEAR_TALENT}>\r\n          <>\r\n            <ItemDamageDone amount={this.damage} /> <br />\r\n            <small>Used </small>{this.usedStacks}/{this.usedStacks + this.wastedStacks} <small>possible stacks</small>\r\n          </>\r\n        </BoringSpellValueText>\r\n      </Statistic>\r\n    );\r\n  }\r\n}\r\n\r\nexport default TipOfTheSpear;\r\n","import Analyzer, { Options, SELECTED_PLAYER } from 'parser/core/Analyzer';\r\nimport Statistic from 'interface/statistics/Statistic';\r\nimport STATISTIC_ORDER from 'interface/others/STATISTIC_ORDER';\r\nimport STATISTIC_CATEGORY from 'interface/others/STATISTIC_CATEGORY';\r\nimport React from 'react';\r\nimport Events, { ApplyBuffEvent, CastEvent, FightEndEvent, RefreshBuffEvent, RemoveBuffEvent } from 'parser/core/Events';\r\nimport SPELLS from 'common/SPELLS';\r\nimport { formatNumber } from 'common/format';\r\nimport { COORDINATED_ASSAULT_BASELINE_DURATION, DEADLY_TANDEM_CA_DURATION_INCREASE } from 'parser/hunter/survival/constants';\r\nimport ConduitSpellText from 'interface/statistics/components/ConduitSpellText';\r\n\r\n/**\r\n * Coordinated Assault's duration is increased by x ms\r\n *\r\n * Example log\r\n *\r\n */\r\nclass DeadlyTandem extends Analyzer {\r\n\r\n  conduitRank: number = 0;\r\n  increasedCAUptime: number = 0;\r\n  caApplicationTimestamp: number = this.owner.fight.start_time;\r\n  casts: number = 0;\r\n\r\n  constructor(options: Options) {\r\n    super(options);\r\n\r\n    this.conduitRank = this.selectedCombatant.conduitRankBySpellID(SPELLS.DEADLY_TANDOM_CONDUIT.id);\r\n\r\n    if (!this.conduitRank) {\r\n      this.active = false;\r\n      return;\r\n    }\r\n\r\n    this.addEventListener(Events.cast.by(SELECTED_PLAYER).spell(SPELLS.COORDINATED_ASSAULT), this.onCACast);\r\n    this.addEventListener(Events.removebuff.by(SELECTED_PLAYER).spell(SPELLS.COORDINATED_ASSAULT), this.onCARemove);\r\n    this.addEventListener(Events.refreshbuff.by(SELECTED_PLAYER).spell(SPELLS.COORDINATED_ASSAULT), this.onCARefresh);\r\n    this.addEventListener(Events.applybuff.by(SELECTED_PLAYER).spell(SPELLS.COORDINATED_ASSAULT), this.onCAApply);\r\n    this.addEventListener(Events.damage.by(SELECTED_PLAYER), this.onGenericDamage);\r\n  }\r\n\r\n  get maximumAddedCoordinatedAssaultUptime() {\r\n    return this.casts * DEADLY_TANDEM_CA_DURATION_INCREASE[this.conduitRank];\r\n  }\r\n\r\n  onGenericDamage() {\r\n    if (this.casts !== 0) {\r\n      return;\r\n    }\r\n    if (this.selectedCombatant.hasBuff(SPELLS.COORDINATED_ASSAULT.id)) {\r\n      this.casts += 1;\r\n    }\r\n  }\r\n\r\n  onCACast(event: CastEvent) {\r\n    this.casts += 1;\r\n  }\r\n\r\n  onCAApply(event: ApplyBuffEvent) {\r\n    this.caApplicationTimestamp = event.timestamp;\r\n  }\r\n\r\n  onCARemove(event: RemoveBuffEvent) {\r\n    this.increasedCAUptime += DEADLY_TANDEM_CA_DURATION_INCREASE[this.conduitRank];\r\n  }\r\n\r\n  onCARefresh(event: RefreshBuffEvent) {\r\n    this.increasedCAUptime += Math.min(event.timestamp - this.caApplicationTimestamp, DEADLY_TANDEM_CA_DURATION_INCREASE[this.conduitRank]);\r\n    this.caApplicationTimestamp = event.timestamp;\r\n  }\r\n\r\n  onFightEnd(event: FightEndEvent) {\r\n    if (!this.selectedCombatant.hasBuff(SPELLS.COORDINATED_ASSAULT.id)) {\r\n      return;\r\n    }\r\n    if (event.timestamp - this.caApplicationTimestamp > COORDINATED_ASSAULT_BASELINE_DURATION) {\r\n      this.increasedCAUptime += Math.min(event.timestamp - this.caApplicationTimestamp, DEADLY_TANDEM_CA_DURATION_INCREASE[this.conduitRank]);\r\n    }\r\n  }\r\n\r\n  statistic() {\r\n    return (\r\n      <Statistic\r\n        position={STATISTIC_ORDER.OPTIONAL(13)}\r\n        size=\"flexible\"\r\n        category={STATISTIC_CATEGORY.COVENANTS}\r\n        tooltip={(\r\n          <>\r\n            This doesn't account for any added Bird of Prey uptime that was enabled due to Coordinated Assault baseline having a longer duration.\r\n          </>\r\n        )}\r\n      >\r\n        <ConduitSpellText spell={SPELLS.DEADLY_TANDOM_CONDUIT} rank={this.conduitRank}>\r\n          <>\r\n            {formatNumber(this.increasedCAUptime / 1000)}/{this.maximumAddedCoordinatedAssaultUptime / 1000}s <small>increased Coordinated Assault uptime</small>\r\n          </>\r\n        </ConduitSpellText>\r\n      </Statistic>\r\n    );\r\n  }\r\n\r\n}\r\n\r\nexport default DeadlyTandem;\r\n","import Analyzer, { Options, SELECTED_PLAYER } from 'parser/core/Analyzer';\r\nimport Events, { ApplyBuffEvent, ApplyBuffStackEvent, DamageEvent, RemoveBuffEvent } from 'parser/core/Events';\r\nimport { AFFECTED_BY_GUERRILLA_TACTICS, FLAME_INFUSION_WFB_DAMAGE_INCREASE } from 'parser/hunter/survival/constants';\r\nimport SPELLS from 'common/SPELLS';\r\nimport calculateEffectiveDamage from 'parser/core/calculateEffectiveDamage';\r\nimport Statistic from 'interface/statistics/Statistic';\r\nimport STATISTIC_ORDER from 'interface/others/STATISTIC_ORDER';\r\nimport STATISTIC_CATEGORY from 'interface/others/STATISTIC_CATEGORY';\r\nimport ItemDamageDone from 'interface/ItemDamageDone';\r\nimport React from 'react';\r\nimport { currentStacks } from 'parser/shared/modules/helpers/Stacks';\r\nimport ConduitSpellText from 'interface/statistics/components/ConduitSpellText';\r\n\r\n/**\r\n * Carve/Butchery increases the damage of your next Wildfire Bomb explosion by 10.0%, stacks up to 2 times.\r\n *\r\n * Example log\r\n *\r\n */\r\nclass FlameInfusion extends Analyzer {\r\n\r\n  conduitRank: number = 0;\r\n  addedDamage: number = 0;\r\n  flameInfusionStacks: number = 0;\r\n  spentStacks: number = 0;\r\n  potentialStacks: number = 0;\r\n\r\n  constructor(options: Options) {\r\n    super(options);\r\n\r\n    this.conduitRank = this.selectedCombatant.conduitRankBySpellID(SPELLS.FLAME_INFUSION_CONDUIT.id);\r\n\r\n    if (!this.conduitRank) {\r\n      this.active = false;\r\n      return;\r\n    }\r\n\r\n    this.addEventListener(Events.damage.by(SELECTED_PLAYER).spell(AFFECTED_BY_GUERRILLA_TACTICS), this.onBombImpact);\r\n    this.addEventListener(Events.applybuff.by(SELECTED_PLAYER), this.onApplyFlameInfusion);\r\n    this.addEventListener(Events.applybuffstack.by(SELECTED_PLAYER), this.onApplyStackFlameInfusion);\r\n    this.addEventListener(Events.removebuff.by(SELECTED_PLAYER), this.onRemoveFlameInfusion);\r\n  }\r\n\r\n  onBombImpact(event: DamageEvent) {\r\n    if (!this.selectedCombatant.hasBuff(SPELLS.FLAME_INFUSION_BUFF.id)) {\r\n      return;\r\n    }\r\n    this.addedDamage += calculateEffectiveDamage(event, FLAME_INFUSION_WFB_DAMAGE_INCREASE[this.conduitRank] * this.flameInfusionStacks);\r\n    this.spentStacks += this.flameInfusionStacks;\r\n  }\r\n\r\n  onApplyFlameInfusion(event: ApplyBuffEvent) {\r\n    this.potentialStacks += 1;\r\n    this.flameInfusionStacks = currentStacks(event);\r\n  }\r\n\r\n  onApplyStackFlameInfusion(event: ApplyBuffStackEvent) {\r\n    this.potentialStacks += 1;\r\n    this.flameInfusionStacks = currentStacks(event);\r\n  }\r\n\r\n  onRemoveFlameInfusion(event: RemoveBuffEvent) {\r\n    this.flameInfusionStacks = currentStacks(event);\r\n  }\r\n\r\n  statistic() {\r\n    return (\r\n      <Statistic\r\n        position={STATISTIC_ORDER.OPTIONAL(13)}\r\n        size=\"flexible\"\r\n        category={STATISTIC_CATEGORY.COVENANTS}\r\n      >\r\n        <ConduitSpellText spell={SPELLS.FLAME_INFUSION_CONDUIT} rank={this.conduitRank}>\r\n          <>\r\n            <ItemDamageDone amount={this.addedDamage} />\r\n          </>\r\n        </ConduitSpellText>\r\n      </Statistic>\r\n    );\r\n  }\r\n\r\n}\r\n\r\nexport default FlameInfusion;\r\n","import Analyzer, { Options, SELECTED_PLAYER } from 'parser/core/Analyzer';\r\nimport Statistic from 'interface/statistics/Statistic';\r\nimport STATISTIC_ORDER from 'interface/others/STATISTIC_ORDER';\r\nimport STATISTIC_CATEGORY from 'interface/others/STATISTIC_CATEGORY';\r\nimport ItemDamageDone from 'interface/ItemDamageDone';\r\nimport React from 'react';\r\nimport Events, { DamageEvent } from 'parser/core/Events';\r\nimport { RAPTOR_MONGOOSE_VARIANTS, STINGING_STRIKE_RS_MB_DMG_INCREASE } from 'parser/hunter/survival/constants';\r\nimport calculateEffectiveDamage from 'parser/core/calculateEffectiveDamage';\r\nimport SPELLS from 'common/SPELLS';\r\nimport ConduitSpellText from 'interface/statistics/components/ConduitSpellText';\r\n\r\n/**\r\n * Raptor Strike and Mongoose Bite damage increased by 14.0%.\r\n *\r\n * Example log\r\n *\r\n */\r\nclass StingingStrike extends Analyzer {\r\n\r\n  conduitRank: number = 0;\r\n  addedDamage: number = 0;\r\n\r\n  constructor(options: Options) {\r\n    super(options);\r\n\r\n    this.conduitRank = this.selectedCombatant.conduitRankBySpellID(SPELLS.STINGING_STRIKE_CONDUIT.id);\r\n\r\n    if (!this.conduitRank) {\r\n      this.active = false;\r\n      return;\r\n    }\r\n\r\n    this.addEventListener(Events.damage.by(SELECTED_PLAYER).spell(RAPTOR_MONGOOSE_VARIANTS), this.onRaptorMongooseDamage);\r\n  }\r\n\r\n  onRaptorMongooseDamage(event: DamageEvent) {\r\n    this.addedDamage += calculateEffectiveDamage(event, STINGING_STRIKE_RS_MB_DMG_INCREASE[this.conduitRank]);\r\n  }\r\n\r\n  statistic() {\r\n    return (\r\n      <Statistic\r\n        position={STATISTIC_ORDER.OPTIONAL(13)}\r\n        size=\"flexible\"\r\n        category={STATISTIC_CATEGORY.COVENANTS}\r\n      >\r\n        <ConduitSpellText spell={SPELLS.STINGING_STRIKE_CONDUIT} rank={this.conduitRank}>\r\n          <>\r\n            <ItemDamageDone amount={this.addedDamage} />\r\n          </>\r\n        </ConduitSpellText>\r\n      </Statistic>\r\n    );\r\n  }\r\n}\r\n\r\nexport default StingingStrike;\r\n","import Analyzer, { Options, SELECTED_PLAYER, SELECTED_PLAYER_PET } from 'parser/core/Analyzer';\r\nimport Statistic from 'interface/statistics/Statistic';\r\nimport STATISTIC_ORDER from 'interface/others/STATISTIC_ORDER';\r\nimport STATISTIC_CATEGORY from 'interface/others/STATISTIC_CATEGORY';\r\nimport ItemDamageDone from 'interface/ItemDamageDone';\r\nimport React from 'react';\r\nimport Events, { DamageEvent } from 'parser/core/Events';\r\nimport { STRENGTH_OF_THE_PACK_DAMAGE_MODIFIER } from 'parser/hunter/survival/constants';\r\nimport calculateEffectiveDamage from 'parser/core/calculateEffectiveDamage';\r\nimport SPELLS from 'common/SPELLS';\r\nimport ConduitSpellText from 'interface/statistics/components/ConduitSpellText';\r\n\r\n/**\r\n * When Kill Command's cooldown is reset, gain 3.0% increased damage for until cancelled.\r\n *\r\n * Example log\r\n *\r\n */\r\nclass StrengthOfThePack extends Analyzer {\r\n\r\n  conduitRank: number = 0;\r\n  addedDamage: number = 0;\r\n\r\n  constructor(options: Options) {\r\n    super(options);\r\n\r\n    this.conduitRank = this.selectedCombatant.conduitRankBySpellID(SPELLS.STRENGTH_OF_THE_PACK_CONDUIT.id);\r\n\r\n    if (!this.conduitRank) {\r\n      this.active = false;\r\n      return;\r\n    }\r\n\r\n    this.addEventListener(Events.damage.by(SELECTED_PLAYER | SELECTED_PLAYER_PET), this.onGenericDamage);\r\n  }\r\n\r\n  onGenericDamage(event: DamageEvent) {\r\n    if (!this.selectedCombatant.hasBuff(SPELLS.STRENGTH_OF_THE_PACK_BUFF.id)) {\r\n      return;\r\n    }\r\n    this.addedDamage += calculateEffectiveDamage(event, STRENGTH_OF_THE_PACK_DAMAGE_MODIFIER[this.conduitRank]);\r\n  }\r\n\r\n  statistic() {\r\n    return (\r\n      <Statistic\r\n        position={STATISTIC_ORDER.OPTIONAL(13)}\r\n        size=\"flexible\"\r\n        category={STATISTIC_CATEGORY.COVENANTS}\r\n      >\r\n        <ConduitSpellText spell={SPELLS.STRENGTH_OF_THE_PACK_CONDUIT} rank={this.conduitRank}>\r\n          <>\r\n            <ItemDamageDone amount={this.addedDamage} />\r\n          </>\r\n        </ConduitSpellText>\r\n      </Statistic>\r\n    );\r\n  }\r\n}\r\n\r\nexport default StrengthOfThePack;\r\n","import Analyzer, { Options, SELECTED_PLAYER } from 'parser/core/Analyzer';\r\nimport Statistic from 'interface/statistics/Statistic';\r\nimport STATISTIC_ORDER from 'interface/others/STATISTIC_ORDER';\r\nimport STATISTIC_CATEGORY from 'interface/others/STATISTIC_CATEGORY';\r\nimport React from 'react';\r\nimport BoringSpellValueText from 'interface/statistics/components/BoringSpellValueText';\r\nimport SPELLS from 'common/SPELLS';\r\nimport Events, { EnergizeEvent } from 'parser/core/Events';\r\nimport ResourceIcon from 'common/ResourceIcon';\r\nimport RESOURCE_TYPES from 'game/RESOURCE_TYPES';\r\nimport { formatNumber } from 'common/format';\r\nimport KillCommand from 'parser/hunter/survival/modules/spells/KillCommand';\r\n\r\n/**\r\n * Whenever a trap is triggered, gain 45 Focus and increase all Focus gained by 100% for 5 sec.\r\n *\r\n * Example log:\r\n *\r\n */\r\nclass NesingwarysTrappingApparatus extends Analyzer {\r\n\r\n  static dependencies = {\r\n    killCommand: KillCommand,\r\n  };\r\n\r\n  focusGained: number = 0;\r\n  focusWasted: number = 0;\r\n\r\n  protected killCommand!: KillCommand;\r\n\r\n  constructor(options: Options) {\r\n    super(options);\r\n    this.active = this.selectedCombatant.hasLegendaryByBonusID(SPELLS.NESINGWARYS_TRAPPING_APPARATUS_EFFECT.bonusID);\r\n    if (!this.active) {\r\n      return;\r\n    }\r\n    this.addEventListener(Events.energize.by(SELECTED_PLAYER).spell(SPELLS.NESINGWARYS_TRAPPING_APPARATUS_ENERGIZE), this.onEnergize);\r\n  }\r\n\r\n  onEnergize(event: EnergizeEvent) {\r\n    this.focusGained += event.resourceChange;\r\n    this.focusWasted += event.waste;\r\n  }\r\n\r\n  get effectiveFocus() {\r\n    return formatNumber(this.killCommand.additionalFocusFromNesingwary);\r\n  }\r\n\r\n  get possibleFocus() {\r\n    return formatNumber(this.killCommand.possibleAdditionalFocusFromNesingwary);\r\n  }\r\n\r\n  statistic() {\r\n    return (\r\n      <Statistic\r\n        position={STATISTIC_ORDER.CORE()}\r\n        size=\"flexible\"\r\n        category={STATISTIC_CATEGORY.ITEMS}\r\n      >\r\n        <BoringSpellValueText spell={SPELLS.NESINGWARYS_TRAPPING_APPARATUS_EFFECT}>\r\n          <ResourceIcon id={RESOURCE_TYPES.FOCUS.id} noLink /> {this.focusGained}/{this.focusWasted + this.focusGained} <small>gained Focus immediately</small>\r\n          <br />\r\n          <ResourceIcon id={RESOURCE_TYPES.FOCUS.id} noLink /> {this.effectiveFocus}/{this.possibleFocus} <small>gained Focus from generators</small>\r\n        </BoringSpellValueText>\r\n      </Statistic>\r\n    );\r\n  }\r\n}\r\n\r\nexport default NesingwarysTrappingApparatus;\r\n","import Analyzer, { Options, SELECTED_PLAYER } from 'parser/core/Analyzer';\r\nimport SPELLS from 'common/SPELLS';\r\nimport Statistic from 'interface/statistics/Statistic';\r\nimport React from 'react';\r\nimport ItemDamageDone from 'interface/ItemDamageDone';\r\nimport BoringSpellValueText from 'interface/statistics/components/BoringSpellValueText';\r\nimport Events, { DamageEvent } from 'parser/core/Events';\r\nimport STATISTIC_CATEGORY from 'interface/others/STATISTIC_CATEGORY';\r\n\r\n/**\r\n * Wildfire Bomb drops an additional cluster of bombs around the target, each exploding for (33% of Attack power) Fire damage.\r\n *\r\n * Example report:\r\n * https://www.warcraftlogs.com/reports/ayK6THQGAB4Y8h9N#fight=15&type=damage-done&source=1415&translate=true&ability=272745\r\n */\r\n\r\nclass WildfireCluster extends Analyzer {\r\n\r\n  damage = 0;\r\n\r\n  constructor(options: Options) {\r\n    super(options);\r\n    this.active = this.selectedCombatant.hasLegendaryByBonusID(SPELLS.WILDFIRE_CLUSTER_EFFECT.bonusID);\r\n    this.addEventListener(Events.damage.by(SELECTED_PLAYER).spell(SPELLS.WILDFIRE_CLUSTER_DAMAGE), this.onDamage);\r\n  }\r\n\r\n  onDamage(event: DamageEvent) {\r\n    this.damage += event.amount + (event.absorbed || 0);\r\n  }\r\n\r\n  statistic() {\r\n    return (\r\n      <Statistic\r\n        size=\"flexible\"\r\n        category={STATISTIC_CATEGORY.ITEMS}\r\n      >\r\n        <BoringSpellValueText spell={SPELLS.WILDFIRE_CLUSTER_EFFECT}>\r\n          <>\r\n            <ItemDamageDone amount={this.damage} />\r\n          </>\r\n        </BoringSpellValueText>\r\n      </Statistic>\r\n    );\r\n  }\r\n}\r\n\r\nexport default WildfireCluster;\r\n","import CoreCombatLogParser from 'parser/core/CombatLogParser';\r\n\r\n//Overridden Racial\r\nimport ArcaneTorrent from 'parser/shared/modules/racials/bloodelf/ArcaneTorrent';\r\n\r\n//Features\r\nimport Abilities from './modules/Abilities';\r\nimport CooldownThroughputTracker from './modules/features/CooldownThroughputTracker';\r\nimport AlwaysBeCasting from './modules/features/AlwaysBeCasting';\r\nimport Buffs from './modules/Buffs';\r\n\r\n//Checklist\r\nimport Checklist from './modules/checklist/Module';\r\n\r\n//Normalizer\r\nimport TipOfTheSpearNormalizer from './normalizers/TipOfTheSpear';\r\n\r\n//Death Tracker\r\nimport DeathTracker from '../shared/modules/core/DeathTracker';\r\n\r\n//Spells\r\nimport KillCommand from './modules/spells/KillCommand';\r\nimport ButcheryCarve from './modules/spells/ButcheryCarve';\r\nimport SerpentSting from './modules/spells/SerpentSting';\r\nimport CoordinatedAssault from './modules/spells/CoordinatedAssault';\r\nimport WildfireBomb from './modules/spells/WildfireBomb';\r\nimport RaptorStrike from './modules/spells/RaptorStrike';\r\nimport KillShot from '../shared/modules/spells/KillShot';\r\n\r\n//Focus\r\nimport FocusTracker from '../shared/modules/resources/FocusTracker';\r\nimport FocusDetails from '../shared/modules/resources/FocusDetails';\r\nimport SpellFocusCost from '../shared/modules/resources/SpellFocusCost';\r\nimport SurvivalFocusCapTracker from './modules/resources/SurvivalFocusCapTracker';\r\nimport Focus from './modules/resources/Focus';\r\nimport SurvivalFocusUsage from './modules/resources/SurvivalFocusUsage';\r\n\r\n//Talents\r\nimport Trailblazer from '../shared/modules/talents/Trailblazer';\r\nimport NaturalMending from '../shared/modules/talents/NaturalMending';\r\nimport AMurderOfCrows from '../shared/modules/talents/AMurderOfCrows';\r\nimport VipersVenom from './modules/talents/VipersVenom';\r\nimport MongooseBite from './modules/talents/MongooseBite';\r\nimport GuerrillaTactics from './modules/talents/GuerrillaTactics';\r\nimport SteelTrap from './modules/talents/SteelTrap';\r\nimport Chakrams from './modules/talents/Chakrams';\r\nimport BirdOfPrey from './modules/talents/BirdOfPrey';\r\nimport BornToBeWild from '../shared/modules/talents/BornToBeWild';\r\nimport BindingShot from '../shared/modules/talents/BindingShot';\r\nimport PheromoneBomb from './modules/talents/WildfireInfusion/PheromoneBomb';\r\nimport ShrapnelBomb from './modules/talents/WildfireInfusion/ShrapnelBomb';\r\nimport VolatileBomb from './modules/talents/WildfireInfusion/VolatileBomb';\r\nimport AlphaPredator from './modules/talents/AlphaPredator';\r\nimport Bloodseeker from './modules/talents/Bloodseeker';\r\nimport HydrasBite from './modules/talents/HydrasBite';\r\nimport FlankingStrike from './modules/talents/FlankingStrike';\r\nimport TipOfTheSpear from './modules/talents/TipOfTheSpear';\r\n\r\n//Covenants\r\nimport ResonatingArrow from '../shared/modules/spells/covenants/kyrian/ResonatingArrow';\r\nimport DeathChakrams from '../shared/modules/spells/covenants/necrolord/DeathChakrams';\r\nimport WildSpirits from '../shared/modules/spells/covenants/nightfae/WildSpirits';\r\nimport FlayedShot from '../shared/modules/spells/covenants/venthyr/FlayedShot';\r\n\r\n//Conduits\r\nimport EnfeebledMark from '../shared/modules/spells/conduits/kyrian/EnfeebledMark';\r\nimport EmpoweredRelease from '../shared/modules/spells/conduits/venthyr/EmpoweredRelease';\r\nimport NecroticBarrage from '../shared/modules/spells/conduits/necrolord/NecroticBarrage';\r\nimport SpiritAttunement from '../shared/modules/spells/conduits/nightfae/SpiritAttunement';\r\nimport DeadlyTandem from './modules/spells/conduits/DeadlyTandem';\r\nimport FlameInfusion from './modules/spells/conduits/FlameInfusion';\r\nimport StingingStrike from './modules/spells/conduits/StingingStrike';\r\nimport StrengthOfThePack from './modules/spells/conduits/StrengthOfThePack';\r\n\r\n//Legendaries\r\nimport NesingwarysTrappingApparatus from './modules/items/NesingwarysTrappingApparatus';\r\nimport SoulforgeEmbers from '../shared/modules/items/SoulforgeEmbers';\r\nimport WildfireCluster from './modules/items/WildfireCluster';\r\n\r\nclass CombatLogParser extends CoreCombatLogParser {\r\n  static specModules = {\r\n    // Core statistics\r\n    abilities: Abilities,\r\n    checklist: Checklist,\r\n\r\n    // Features\r\n    alwaysBeCasting: AlwaysBeCasting,\r\n    cooldownThroughputTracker: CooldownThroughputTracker,\r\n    buffs: Buffs,\r\n\r\n    //Resources\r\n    focusTracker: FocusTracker,\r\n    focusDetails: FocusDetails,\r\n    spellFocusCost: SpellFocusCost,\r\n    survivalFocusCapTracker: SurvivalFocusCapTracker,\r\n    focus: Focus,\r\n    survivalFocusUsage: SurvivalFocusUsage,\r\n\r\n    //Normalizers\r\n    tipOfTheSpearNormalizer: TipOfTheSpearNormalizer,\r\n\r\n    //DeathTracker\r\n    deathTracker: DeathTracker,\r\n\r\n    //Spells\r\n    killCommand: KillCommand,\r\n    butcheryCarve: ButcheryCarve,\r\n    serpentSting: SerpentSting,\r\n    coordinatedAssault: CoordinatedAssault,\r\n    wildfireBomb: WildfireBomb,\r\n    raptorStrike: RaptorStrike,\r\n    killShot: KillShot,\r\n\r\n    //Talents\r\n    naturalMending: NaturalMending,\r\n    trailblazer: Trailblazer,\r\n    aMurderOfCrows: AMurderOfCrows,\r\n    vipersVenom: VipersVenom,\r\n    mongooseBite: MongooseBite,\r\n    steelTrap: SteelTrap,\r\n    guerrillaTactics: GuerrillaTactics,\r\n    chakrams: Chakrams,\r\n    birdOfPrey: BirdOfPrey,\r\n    bornToBeWild: BornToBeWild,\r\n    bindingShot: BindingShot,\r\n    alphaPredator: AlphaPredator,\r\n    bloodseeker: Bloodseeker,\r\n    hydrasBite: HydrasBite,\r\n    flankingStrike: FlankingStrike,\r\n    tipOfTheSpear: TipOfTheSpear,\r\n    pheromoneBomb: PheromoneBomb,\r\n    shrapnelBomb: ShrapnelBomb,\r\n    volatileBomb: VolatileBomb,\r\n\r\n    //Covenants\r\n    resonatingArrow: ResonatingArrow,\r\n    deathChakrams: DeathChakrams,\r\n    wildSpirits: WildSpirits,\r\n    flayedShot: FlayedShot,\r\n\r\n    //Conduits\r\n    empoweredRelease: EmpoweredRelease,\r\n    enfeebledMark: EnfeebledMark,\r\n    necroticBarrage: NecroticBarrage,\r\n    spiritAttunement: SpiritAttunement,\r\n    deadlyTandem: DeadlyTandem,\r\n    flameInfusion: FlameInfusion,\r\n    stingingStrike: StingingStrike,\r\n    strengthOfThePack: StrengthOfThePack,\r\n\r\n    //Generic Legendaries\r\n    nesingwarysTrappingApparatus: NesingwarysTrappingApparatus,\r\n    soulforgeEmbers: SoulforgeEmbers,\r\n\r\n    //Survival Legendaries\r\n    wildfireCluster: WildfireCluster,\r\n\r\n    // Survival's throughput benefit isn't as big as for other classes\r\n    arcaneTorrent: [ArcaneTorrent, { castEfficiency: 0.5 }] as const,\r\n  };\r\n}\r\n\r\nexport default CombatLogParser;\r\n","export default function calculateEffectiveDamage(event, increase) {\r\n  const raw = (event.amount || 0) + (event.absorbed || 0);\r\n  return raw - (raw / (1 + increase));\r\n}\r\n","import React from 'react';\r\n\r\n// https://thenounproject.com/term/duration/370713/\r\n// duration by Bohdan Burmich from the Noun Project\r\nconst Icon = ({ ...other }) => (\r\n  <svg xmlns=\"http://www.w3.org/2000/svg\" viewBox=\"10 10 80 80\" className=\"icon\" {...other}>\r\n    <path d=\"M50,86.4865c17.4361,0,31.6216-14.1855,31.6216-31.6216c0-16.6168-12.8865-30.2714-29.1892-31.5189v-4.9677h7.2973v-4.8649  H40.2703v4.8649h7.2973v4.9677c-16.3027,1.2475-29.1892,14.902-29.1892,31.5189C18.3784,72.3009,32.5639,86.4865,50,86.4865z M52.4324,28.2236c3.1101,0.2817,6.0664,1.0982,8.7798,2.356l-8.7798,15.2073V28.2236z M47.5676,28.2236v26.6412 c0,1.1008,0.7393,2.0647,1.8029,2.3497c0.209,0.0561,0.4205,0.0827,0.6295,0.0827c0.8533,0,1.6642-0.4504,2.1065-1.2162 l13.3146-23.0616c6.8507,4.8503,11.3357,12.8315,11.3357,21.8454c0,14.7537-12.0031,26.7567-26.7568,26.7567 s-26.7568-12.003-26.7568-26.7567C23.2432,40.9315,33.9501,29.4573,47.5676,28.2236z\" />\r\n  </svg>\r\n);\r\n\r\nexport default Icon;\r\n","import React from 'react';\r\n\r\nimport SpellIcon from 'common/SpellIcon';\r\nimport SpellLink from 'common/SpellLink';\r\nimport Spell from 'common/SPELLS/Spell';\r\n\r\ntype Props = {\r\n  spell: Spell;\r\n  rank: number;\r\n  children: React.ReactNode;\r\n  className?: string;\r\n}\r\n\r\nconst ConduitSpellText = ({ spell, rank, children, className }: Props) => (\r\n  <div className={`pad boring-text ${className || ''}`}>\r\n    <label>\r\n      <SpellIcon id={spell.id} /> <SpellLink id={spell.id} icon={false} /> - Rank {rank}\r\n    </label>\r\n    <div className=\"value\">\r\n      {children}\r\n    </div>\r\n  </div>\r\n);\r\n\r\nexport default ConduitSpellText;\r\n","import SPELLS from 'common/SPELLS';\r\n\r\n//region Spells\r\n/** Butchery / Carve */\r\n//Butchery and Carve can hit up to 5 people\r\nexport const BUTCHERY_CARVE_MAX_TARGETS_HIT = 5;\r\n/** Coordinated Assault */\r\n//Coordinated Assault increases all damage done by 20%\r\nexport const COORDINATED_ASSAULT_DMG_MOD = 0.2;\r\n//Coordinated Assault lasts 20 seconds by default\r\nexport const COORDINATED_ASSAULT_BASELINE_DURATION = 20000;\r\n/** Wildfire Bomb */\r\n//People aren't robots, give them a bit of leeway in terms of when they cast WFB to avoid capping on charges\r\nexport const WILDFIRE_BOMB_LEEWAY_BUFFER = 500;\r\n/** Kill Command */\r\n//Kill Command for Survival regenerates 15 focus\r\nexport const SV_KILL_COMMAND_FOCUS_GAIN = 15;\r\n/** Serpent Sting */\r\n//Serpent Sting costs 20 focus\r\nexport const SV_SERPENT_STING_COST = 20;\r\n//Serpent Sting for SV pandemics at 30%\r\nexport const SERPENT_STING_SV_PANDEMIC = 0.3;\r\n//The baseduration of Serpent Sting before any haste reduction\r\nexport const SERPENT_STING_SV_BASE_DURATION = 12000;\r\n/** Raptor Strike / Mongoose Bite */\r\n//Raptor Strike turns into Mongoose Bite when talented into it, and during Aspect of the Eagle they change spellIDs.\r\nexport const RAPTOR_MONGOOSE_VARIANTS = [\r\n  SPELLS.RAPTOR_STRIKE,\r\n  SPELLS.RAPTOR_STRIKE_AOTE,\r\n  SPELLS.MONGOOSE_BITE_TALENT,\r\n  SPELLS.MONGOOSE_BITE_TALENT_AOTE,\r\n];\r\n/** Aspect of the Eagle */\r\n//This is the baseline cooldown of Aspect of the Eagle\r\nexport const BASELINE_AOTE_CD = 90000;\r\n//endregion\r\n\r\n//region Talents\r\n/** Vipers Venom */\r\n//Serpent Sting costs 0 when Vipers Venom is active\r\nexport const VIPERS_VENOM_COST_MULTIPLIER = 0;\r\n//The increased damage of the initial hit of Serpent Sting from Viper's Venom\r\nexport const VIPERS_VENOM_DAMAGE_MODIFIER = 2.5;\r\n/** Bird of Prey */\r\n//Bird of Prey extends Coordinated Assault by 1.5 seconds per trigger\r\nexport const BOP_CA_EXTENSION_PER_CAST = 1500;\r\n/** Chakrams */\r\n//Chakrams has a bunch of different spellIDs for damage\r\nexport const SURVIVAL_CHAKRAM_TYPES = [\r\n  SPELLS.CHAKRAMS_TO_MAINTARGET.id,\r\n  SPELLS.CHAKRAMS_BACK_FROM_MAINTARGET.id,\r\n  SPELLS.CHAKRAMS_NOT_MAINTARGET.id,\r\n];\r\n/** Flanking Strike */\r\n//Flanking Strikes regenerates 30 focus\r\nexport const FLANKING_STRIKE_FOCUS_GAIN = 30;\r\n/** Mongoose Bite */\r\n//Mongoose Bite has traveltime, so if used during Aspect of the Eagle it can have up to 700ms travel time\r\nexport const MONGOOSE_BITE_MAX_TRAVEL_TIME = 700;\r\n//Mongoose Bite can have a maximum of 5 stacks\r\nexport const MONGOOSE_BITE_MAX_STACKS = 5;\r\n/** Guerilla Tactics */\r\n//The initial hit modifier for Guerrilla Tactics talent\r\nexport const GUERRILLA_TACTICS_INIT_HIT_MODIFIER = 1;\r\n//Spells affected by Guerrilla Tactics talent\r\nexport const AFFECTED_BY_GUERRILLA_TACTICS = [\r\n  SPELLS.WILDFIRE_BOMB_IMPACT,\r\n  SPELLS.VOLATILE_BOMB_WFI_IMPACT,\r\n  SPELLS.PHEROMONE_BOMB_WFI_IMPACT,\r\n  SPELLS.SHRAPNEL_BOMB_WFI_IMPACT,\r\n];\r\n/** Tip of the Spear */\r\n//Tip of the Spear damage increase\r\nexport const TIP_DAMAGE_INCREASE = 0.25;\r\n//Tip maximum stacks\r\nexport const TIP_MAX_STACKS = 3;\r\n/** Alpha Predator */\r\n//The damage increase from Alpha Predator\r\nexport const ALPHA_DAMAGE_KC_MODIFIER = 0.3;\r\n/** Bloodseeker */\r\n//Attack speed gain per bleeding enemy from Bloodseeker\r\nexport const BLOODSEEKER_ATTACK_SPEED_GAIN = 0.1;\r\n/** Hydra's Bite */\r\n//Hydra's Bite DOT damage increase\r\nexport const HYDRAS_BITE_DOT_MODIFIER = 0.2;\r\n//endregion\r\n\r\n//region Resources\r\nexport const LIST_OF_FOCUS_SPENDERS_SV = [\r\n  SPELLS.BUTCHERY_TALENT,\r\n  SPELLS.CARVE,\r\n  SPELLS.WING_CLIP,\r\n  SPELLS.CHAKRAMS_TALENT,\r\n  SPELLS.SERPENT_STING_SV,\r\n  ...RAPTOR_MONGOOSE_VARIANTS,\r\n];\r\nexport const BASE_FOCUS_REGEN_SV = 5;\r\nexport const BASE_MAX_FOCUS_SV = 100;\r\n//endregion\r\n\r\n//region Conduits\r\n/** Deadly Tandem */\r\n//Deadly Tandem increases the duration of Coordinated Assault by a flat amount\r\nexport const DEADLY_TANDEM_CA_DURATION_INCREASE = [0, 1000, 1500, 2000, 2500, 3000, 3500, 4000, 4500, 5000, 5500, 6000, 6500, 7000, 7500, 8000];\r\n/** Flame Infusion */\r\n//Flame infusion increases the damage of the next Wildfire Bomb (or WFI equivalent) by x%\r\nexport const FLAME_INFUSION_WFB_DAMAGE_INCREASE = [0, 0.1, 0.11, 0.12, 0.13, 0.14, 0.15, 0.16, 0.17, 0.18, 0.19, 0.2, 0.21, 0.22, 0.23, 0.24, 0.25];\r\n//Flame Infusion can stack twice\r\nexport const FLAME_INFUSION_MAX_STACKS = 2;\r\n/** Stinging Strike */\r\n//Stinging Strike increases the damage of Mongoose Bite / Raptor Strike by a flat amount\r\nexport const STINGING_STRIKE_RS_MB_DMG_INCREASE = [0, 0.14, 0.16, 0.17, 0.19, 0.20, 0.22, 0.23, 0.25, 0.26, 0.28, 0.29, 0.31, 0.32, 0.34, 0.35];\r\n/** Strength of the Pack */\r\n//Strength of the Pack increases all damage done by a % for its duration\r\nexport const STRENGTH_OF_THE_PACK_DAMAGE_MODIFIER = [0, 0.03, 0.04, 0.04, 0.05, 0.05, 0.06, 0.06, 0.07, 0.07, 0.08, 0.08, 0.09, 0.09, 0.1, 0.1];\r\n//endregion\r\n","import SPELLS from 'common/SPELLS';\r\n\r\n//region Spells\r\n/** Barbed Shot */\r\n//max stacks your pet can have of the Frenzy buff\r\nexport const MAX_FRENZY_STACKS = 3;\r\n//Frenzy lasts 8 seconds normally, but can be adjusted by some effects\r\nexport const ORIGINAL_FRENZY_DURATION = 8000;\r\n/** Cobra Shot */\r\n//Cobra Shot reduces the cooldown of Kill Command by 1 second by default\r\nexport const COBRA_SHOT_CDR_MS = 1000;\r\n//A threshold where you can never realistically overcap on focus by waiting for AT MOST 1 GCD + 1 second.\r\nexport const COBRA_SHOT_FOCUS_THRESHOLD_TO_WAIT = 50;\r\n/** Kill Command */\r\n//Kill Command costs 30 focus for Beast Mastery hunters\r\nexport const KILL_COMMAND_BM_FOCUS_COST = 30;\r\n/** Bestial Wrath */\r\n//Bestial Wrath\r\nexport const BARBED_SHOT_BESTIAL_WRATH_CDR_MS = 12000;\r\nexport const BESTIAL_WRATH_BASE_CD = 90000;\r\n/** Aspect of the Wild */\r\n//Aspect of the Wild reduces the GCD of certain abilities\r\nexport const AOTW_GCD_REDUCTION_AFFECTED_ABILITIES = [\r\n  SPELLS.KILL_COMMAND_CAST_BM.id,\r\n  SPELLS.COBRA_SHOT.id,\r\n  SPELLS.BESTIAL_WRATH.id,\r\n  SPELLS.MULTISHOT_BM.id,\r\n  SPELLS.BARBED_SHOT.id,\r\n  SPELLS.ASPECT_OF_THE_WILD.id,\r\n  SPELLS.CALL_PET_1.id,\r\n  SPELLS.CALL_PET_2.id,\r\n  SPELLS.CALL_PET_3.id,\r\n  SPELLS.CALL_PET_4.id,\r\n  SPELLS.CALL_PET_5.id,\r\n  SPELLS.INTIMIDATION.id,\r\n  SPELLS.FREEZING_TRAP.id,\r\n  SPELLS.TAR_TRAP.id,\r\n  SPELLS.HUNTERS_MARK.id,\r\n  SPELLS.ARCANE_SHOT.id,\r\n  SPELLS.EXHILARATION.id,\r\n  SPELLS.FLARE.id,\r\n  SPELLS.BLOODSHED_TALENT.id,\r\n  SPELLS.DIRE_BEAST_TALENT.id,\r\n  SPELLS.SPITTING_COBRA_TALENT.id,\r\n  SPELLS.BARRAGE_TALENT.id,\r\n  SPELLS.STAMPEDE_TALENT.id,\r\n  SPELLS.CHIMAERA_SHOT_BM_TALENT.id,\r\n  SPELLS.A_MURDER_OF_CROWS_TALENT.id,\r\n  SPELLS.WILD_SPIRITS.id,\r\n  SPELLS.FLAYED_SHOT.id,\r\n  SPELLS.RESONATING_ARROW.id,\r\n  SPELLS.DEATH_CHAKRAM_INITIAL_AND_AOE.id,\r\n];\r\n//Aspect of the Wild gives 5 focus per second\r\nexport const ASPECT_OF_THE_WILD_FOCUS = 5;\r\n//endregion\r\n\r\n//region Talents\r\n/** Bloodshed */\r\n//Bloodshed increases the damage done by pets by 15%\r\nexport const BLOODSHED_DAMAGE_AMP = 0.15;\r\n/** Scent of Blood */\r\n//Scent of Blood recharges 2 barbed shot charges when you activate Bestial Wrath\r\nexport const SCENT_OF_BLOOD_BARBED_SHOT_RECHARGE = 2;\r\n/** Aspect of the Beast */\r\n//Aspect of the Beast increase pet damage and healing done by 30%\r\nexport const AOTB_MULTIPLIER = 0.3;\r\n//Aspect of the Beast does not affect all pet abilities\r\nexport const AOTB_ABILITIES_NOT_AFFECTED: number[] = [\r\n  SPELLS.MELEE.id,\r\n  SPELLS.KILL_COMMAND_DAMAGE_BM.id,\r\n  SPELLS.STOMP_DAMAGE.id,\r\n];\r\n/** Killer Instinct */\r\n//Killer Instinct is a execution like talent that activates at target hp sub 35%\r\nexport const KILLER_INSTINCT_THRESHOLD = 0.35;\r\n//When Killer Instinct is active Kill Command does 50% more damage\r\nexport const KILLER_INSTINCT_MULTIPLIER = 0.5;\r\n/** Wild Call */\r\n//Wild Call has a 20% chance to reset Barbed Shot cooldown on critical auto attacks\r\nexport const WILD_CALL_RESET_PERCENT = 0.2;\r\n/** Spitting Cobra */\r\n//Spitting Cobra has its damage increased by 10% for every Cobra Shot during Bestial Wrath\r\nexport const SPITTING_COBRA_DAMAGE_INCREASE = 0.1;\r\n/** Stampede */\r\n// The potential amount of hits per target per stampede cast.\r\n// By checking through various Zek'voz logs, it seems to consistently hit the boss 18 times, except if the boss was moved.\r\n// By using this number, we can calculate the average amount of targets hit per cast.\r\nexport const STAMPEDE_POTENTIAL_HITS = 18;\r\n/** Stomp */\r\n//If you have Animal Companion, Stomp will hit twice per cast - so we need to be aware of that\r\nexport const AMOUNT_OF_PETS_WITH_AC = 2;\r\n/** Thrill of the Hunt */\r\n//Thrill of the Hunt can stack up to 3 times\r\nexport const MAX_THRILL_STACKS = 3;\r\n//Each stack of Thrill of the Hunt gives 3% crit\r\nexport const CRIT_PER_THRILL_STACK = 0.03;\r\n//endregion\r\n\r\n//region Pets\r\n/** Pet Basic Attacks */\r\n//There are three different Basic Attacks for Pets\r\nexport const BASIC_ATTACK_SPELLS = [SPELLS.BITE_BASIC_ATTACK, SPELLS.CLAW_BASIC_ATTACK, SPELLS.SMACK_BASIC_ATTACK];\r\n//The actual current delay without macros is ~300ms on top of the 3 second cooldown, but adding 100 ms to act as a buffer.\r\nexport const MAX_TIME_BETWEEN_BASIC_ATK = 3400;\r\n//The delay is reduced to ~100-200ms depending on latency when you macro the abilities\r\nexport const MACRO_TIME_BETWEEN_BASIC_ATK = 3150;\r\n//This is what the optimal scenario would look like, if pet cast it instantly after it came off cooldown\r\nexport const NO_DELAY_TIME_BETWEEN_BASIC_ATK = 3000;\r\n//endregion\r\n\r\n//region Resources\r\n/** Focus */\r\n//Beast Mastery has 10 focus/second as baseline regen\r\nexport const BEAST_MASTERY_FOCUS_REGEN = 10;\r\n//Beast Mastery has 120 focus at start\r\nexport const BEAST_MASTERY_FOCUS_MAX = 120;\r\n//Minor threshold for focus wastage on focus generators\r\nexport const FOCUS_THRESHOLD_MINOR = 0.025;\r\n//Average threshold for focus wastage on focus generators\r\nexport const FOCUS_THRESHOLD_AVG = 0.05;\r\n//Major threshold for focus wastage on focus generators\r\nexport const FOCUS_THRESHOLD_MAJOR = 0.1;\r\n//The 8 focus regen buffs connected to Barbed Shot\r\nexport const BARBED_SHOT_FOCUS_REGEN_BUFFS = [\r\n  SPELLS.BARBED_SHOT_BUFF,\r\n  SPELLS.BARBED_SHOT_BUFF_2,\r\n  SPELLS.BARBED_SHOT_BUFF_3,\r\n  SPELLS.BARBED_SHOT_BUFF_4,\r\n  SPELLS.BARBED_SHOT_BUFF_5,\r\n  SPELLS.BARBED_SHOT_BUFF_6,\r\n  SPELLS.BARBED_SHOT_BUFF_7,\r\n  SPELLS.BARBED_SHOT_BUFF_8,\r\n];\r\n\r\nexport const BARBED_SHOT_FOCUS_REGEN_BUFFS_IDS = [\r\n  SPELLS.BARBED_SHOT_BUFF.id,\r\n  SPELLS.BARBED_SHOT_BUFF_2.id,\r\n  SPELLS.BARBED_SHOT_BUFF_3.id,\r\n  SPELLS.BARBED_SHOT_BUFF_4.id,\r\n  SPELLS.BARBED_SHOT_BUFF_5.id,\r\n  SPELLS.BARBED_SHOT_BUFF_6.id,\r\n  SPELLS.BARBED_SHOT_BUFF_7.id,\r\n  SPELLS.BARBED_SHOT_BUFF_8.id,\r\n];\r\n//Some energize spells don't have waste attached to their events\r\nexport const BEAST_MASTERY_SPELLS_WITHOUT_WASTE = [\r\n  SPELLS.ASPECT_OF_THE_WILD.id,\r\n  SPELLS.CHIMAERA_SHOT_FOCUS.id,\r\n  ...BARBED_SHOT_FOCUS_REGEN_BUFFS_IDS,\r\n];\r\n//Barbed Shot regenerates 5 focus per tick\r\nexport const BARBED_SHOT_REGEN = 5;\r\n//Aspect of the Wild regenerates 5 focus per tick\r\nexport const AOTW_REGEN = 5;\r\n//Chimaera Shot regenerates 10 focus per hit for BM hunters\r\nexport const CHIM_REGEN = 10;\r\n/** Focus Spenders specific to BM */\r\nexport const LIST_OF_FOCUS_SPENDERS_BM = [\r\n  SPELLS.COBRA_SHOT,\r\n  SPELLS.MULTISHOT_BM,\r\n  SPELLS.KILL_COMMAND_CAST_BM,\r\n  SPELLS.DIRE_BEAST_TALENT,\r\n];\r\n//endregion\r\n\r\n//region Conduits\r\n/** Ferocious Appetite */\r\n//Ferocious Appetite causes Kill Command crits to reduce the cooldown of Aspect of the Wild with X seconds.\r\nexport const FEROCIOUS_APPETITE_ASPECT_REDUCTION = [0, 1000, 1100, 1200, 1300, 1400, 1500, 1600, 1700, 1800, 1900, 2000, 2100, 2200, 2300, 2400];\r\n/** One With the Beast */\r\n//One With the Beast increases all damage done during Bestial Wrath\r\nexport const ONE_WITH_THE_BEAST_DAMAGE_INCREASE = [0, 0.01, 0.02, 0.03, 0.04, 0.05, 0.06, 0.07, 0.08, 0.09, 0.10, 0.11, 0.12, 0.13, 0.14, 0.15];\r\n/** Bloodletting */\r\n//Bloodletting reduces the recharge time of Barbed Shot by 1 second\r\nexport const BLOODLETTING_BARBED_SHOT_RECHARGE_REDUCTION = 1000;\r\n//Bloodletting increases the damage done by x%\r\nexport const BLOODLETTING_BARBED_DOT_INCREASE = [0, 0.1, 0.11, 0.12, 0.13, 0.14, 0.15, 0.16, 0.18, 0.19, 0.2, 0.21, 0.22, 0.23, 0.24, 0.25];\r\n/** Echoing Call */\r\n//Wild Call has a % increase chance to reset the cooldown of Barbed Shot\r\nexport const ECHOING_CALL_INCREASED_WILD_CALL_CHANCE = [0, 0.05, 0.06, 0.06, 0.07, 0.07, 0.08, 0.08, 0.09, 0.09, 0.1, 0.1, 0.11, 0.11, 0.12, 0.12];\r\n//endregion\r\n\r\n//region Legendaries\r\n/** Dire Command */\r\n//Dire Command has a 20% chance to summon a dire beast\r\nexport const DIRE_COMMAND_PROC_CHANCE = 0.2;\r\n/** Flamewaker's Cobra Sting */\r\n//Flamewaker's Cobra Sting has a 25% chance to reduce focus cost of next Kill Command by 100%\r\nexport const FLAMEWAKERS_PROC_CHANCE = 0.25;\r\n/** Qa'pla, Eredun War Order */\r\n//Qa'pla reduces the cooldown of Kill Command by 5 seconds everytime you cast Barbed Shot\r\nexport const QAPLA_KILL_COMMAND_REDUCTION_MS = 5000;\r\n/** Rylakstalker's Piercing Fangs */\r\n//Rylakstalker's Piercing Fang increases pet crit damage by 20% during Bestial Wrath\r\nexport const RYLAKSTALKERS_PIERCING_FANGS_CRIT_DMG_INCREASE = 0.20;\r\n//endregion\r\n","import React from 'react';\r\nimport PropTypes from 'prop-types';\r\nimport BaseChart from 'interface/others/BaseChart';\r\n\r\nimport { formatPercentage } from 'common/format';\r\nimport SpellLink from 'common/SpellLink';\r\nimport { TooltipElement } from 'common/Tooltip';\r\n\r\nimport './style.scss';\r\n\r\nclass DonutChart extends React.PureComponent {\r\n  static propTypes = {\r\n    items: PropTypes.arrayOf(PropTypes.shape({\r\n      value: PropTypes.number.isRequired,\r\n      label: PropTypes.node.isRequired,\r\n      color: PropTypes.string.isRequired,\r\n      tooltip: PropTypes.node,\r\n      spellId: PropTypes.number,\r\n      valueTooltip: PropTypes.node,\r\n    })).isRequired,\r\n    // While you could change the chart size, I strongly recommend you do not for consistency and to avoid breaking whenever this component is modified. Do you really need to adjust the size?\r\n    chartSize: PropTypes.number,\r\n    innerRadiusFactor: PropTypes.number,\r\n  };\r\n  static defaultProps = {\r\n    chartSize: 90,\r\n    innerRadiusFactor: 0.28,\r\n  };\r\n\r\n  renderLegend(items) {\r\n    const total = items.reduce((sum, item) => sum + item.value, 0);\r\n\r\n    return (\r\n      <div className=\"legend\">\r\n        {items.map(({ color, label, tooltip, value, spellId, valueTooltip }, index) => {\r\n          label = tooltip ? (\r\n            <TooltipElement content={tooltip}>{label}</TooltipElement>\r\n          ) : label;\r\n          label = spellId ? (\r\n            <SpellLink id={spellId}>{label}</SpellLink>\r\n          ) : label;\r\n          return (\r\n            <div key={index} className=\"flex\">\r\n              <div className=\"flex-sub\">\r\n                <div className=\"circle\" style={{ background: color }} />\r\n              </div>\r\n              <div className=\"flex-main\">\r\n                {label}\r\n              </div>\r\n              <div className=\"flex-sub\">\r\n                <TooltipElement content={valueTooltip ? valueTooltip : value}>\r\n                  {formatPercentage(value / total, 0)}%\r\n                </TooltipElement>\r\n              </div>\r\n            </div>\r\n          );\r\n        })}\r\n      </div>\r\n    );\r\n  }\r\n  renderChart(items, chartSize, innerRadiusFactor) {\r\n    const innerRadius = chartSize * innerRadiusFactor;\r\n\r\n    const data = {\r\n      items,\r\n    };\r\n    const spec = {\r\n      data: {\r\n        name: 'items',\r\n      },\r\n      mark: {\r\n        type: 'arc',\r\n        innerRadius,\r\n      },\r\n      encoding: {\r\n        theta: {\r\n          field: 'value',\r\n          type: 'quantitative',\r\n        },\r\n        color: {\r\n          field: 'label',\r\n          type: 'nominal',\r\n          legend: null,\r\n          scale: {\r\n            domain: items.map(({label}) => label),\r\n            range: items.map(({color}) => color),\r\n          },\r\n        },\r\n      },\r\n      view: {\r\n        stroke: null,\r\n      },\r\n    };\r\n    return (\r\n      <div className=\"chart\">\r\n        <BaseChart\r\n          width={chartSize}\r\n          height={chartSize}\r\n          spec={spec}\r\n          data={data}\r\n        />\r\n      </div>\r\n    );\r\n  }\r\n  render() {\r\n    const { items, chartSize, innerRadiusFactor } = this.props;\r\n\r\n    return (\r\n      <div className=\"donut-chart\">\r\n        {this.renderLegend(items)}\r\n        {this.renderChart(items, chartSize, innerRadiusFactor)}\r\n      </div>\r\n    );\r\n  }\r\n}\r\n\r\nexport default DonutChart;\r\n","import React from 'react';\r\nimport PropTypes from 'prop-types';\r\nimport { AutoSizer } from 'react-virtualized';\r\nimport BaseChart from 'interface/others/BaseChart';\r\n\r\nclass OneVariableBinomialChart extends React.Component {\r\n  static propTypes = {\r\n    probabilities: PropTypes.arrayOf(\r\n      PropTypes.shape({\r\n        x: PropTypes.number.isRequired,\r\n        y: PropTypes.number.isRequired,\r\n      }),\r\n    ).isRequired,\r\n    actualEvent: PropTypes.shape({\r\n      x: PropTypes.number.isRequired,\r\n      y: PropTypes.number.isRequired,\r\n    }).isRequired,\r\n    xAxis: PropTypes.shape({\r\n      title: PropTypes.string.isRequired,\r\n      tickFormat: PropTypes.string.isRequired,\r\n    }).isRequired,\r\n    yAxis: PropTypes.shape({\r\n      title: PropTypes.string.isRequired,\r\n    }),\r\n    yDomain: PropTypes.arrayOf(PropTypes.number),\r\n    tooltip: PropTypes.string.isRequired,\r\n  };\r\n\r\n  state = {\r\n    hover: null,\r\n  };\r\n\r\n  render() {\r\n    const {\r\n      probabilities,\r\n      actualEvent,\r\n      xAxis,\r\n      yAxis,\r\n      yDomain,\r\n      tooltip,\r\n    } = this.props;\r\n\r\n    const data = {\r\n      probabilities,\r\n      actual: actualEvent,\r\n    };\r\n\r\n    const spec = {\r\n      encoding: {\r\n        x: {\r\n          field: 'x',\r\n          type: 'quantitative',\r\n          title: xAxis.title,\r\n          axis: {\r\n            grid: false,\r\n            format: xAxis.tickFormat,\r\n          },\r\n        },\r\n        y: {\r\n          field: 'y',\r\n          type: 'quantitative',\r\n          title: yAxis.title,\r\n          axis: {\r\n            grid: false,\r\n            format: '.0%',\r\n          },\r\n          scale: {\r\n            domain: yDomain,\r\n          },\r\n        },\r\n      },\r\n      layer: [\r\n        {\r\n          data: {\r\n            name: 'probabilities',\r\n          },\r\n          mark: {\r\n            type: 'area',\r\n            color: 'rgba(250, 183, 0, 0.15)',\r\n            line: {\r\n              color: '#fab700',\r\n              strokeWidth: 1,\r\n            },\r\n          },\r\n        },\r\n        {\r\n          data: {\r\n            name: 'actual',\r\n          },\r\n          mark: {\r\n            type: 'point',\r\n            filled: true,\r\n            color: '#00ff96',\r\n            size: 60,\r\n          },\r\n          encoding: {\r\n            tooltip: [\r\n              { field: 'x', title: tooltip },\r\n            ],\r\n          },\r\n        },\r\n      ],\r\n    };\r\n\r\n\r\n    return (\r\n      <AutoSizer disableHeight>\r\n        {({width}) => (\r\n          <BaseChart\r\n            height={150}\r\n            width={width}\r\n            spec={spec}\r\n            data={data}\r\n          />\r\n        )}\r\n      </AutoSizer>\r\n    );\r\n  }\r\n}\r\n\r\nexport default OneVariableBinomialChart;\r\n","import OneVariableBinomialChart from 'interface/others/charts/OneVariableBinomialChart';\r\nimport React from 'react';\r\n\r\n/**\r\n * pn is the mean value of procs\r\n * @param procChance\r\n * @param procAttempts\r\n */\r\nexport function expectedProcCount(procChance: number, procAttempts: number) {\r\n  return procChance * procAttempts;\r\n}\r\n\r\n/**\r\n * Calculates the probability that out of n tries with probability p, we get exactly k positive outcomes\r\n * @param k {Number} Number of desired positive outcomes\r\n * @param n {Number} Number of tries\r\n * @param p {Number} Probability of positive outcome\r\n */\r\nexport function binomialPMF(k: number, n: number, p: number) {\r\n  return binomialDistribution(n, k) * Math.pow(p, k) * Math.pow(1 - p, n - k);\r\n}\r\n\r\n/**\r\n * Calculates the probability that out of n tries with probability p, we get k or less positive outcomes\r\n * @param k {Number} Number of desired positive outcomes\r\n * @param n {Number} Number of tries\r\n * @param p {Number} Probability of positive outcome\r\n */\r\nexport function binomialCDF(k: number, n: number, p: number) {\r\n  let probability = 0;\r\n  for (let i = 0; i <= k; i += 1) {\r\n    probability += binomialPMF(i, n, p);\r\n  }\r\n  return probability;\r\n}\r\n\r\n/**\r\n * Finds the maximum of PMF of given distribution.\r\n * @param n {Number} Maximum number of tries for given event\r\n * @param {Function} pmf Callback that returns probability of exactly K events happening in N tries. Parameters - K, N\r\n * @returns {{ max: Number, p: Number }} Maximum of given PMF function - argument and probability itself\r\n */\r\nexport function findMax(n: number, pmf: (i: number, n: any) => any) {\r\n  let max = -1;\r\n  let maxP = 0;\r\n  for (let i = 0; i <= n; i += 1) {\r\n    const probability = pmf(i, n);\r\n    if (probability > maxP) {\r\n      max = i;\r\n      maxP = probability;\r\n    }\r\n  }\r\n  return {\r\n    max,\r\n    p: maxP,\r\n  };\r\n}\r\n\r\nfunction binomialDistribution(n: number, k: number) {\r\n  // n! / (k! * (n - k)!)\r\n  // factorials are awful, let's simplify a bit\r\n  // we know k < n:\r\n  // numerator: n! = 1 * 2 * ... * (n - k) * (n - k + 1) * (n - k + 2 ) * ... * n\r\n  // denominator: k! * (n - k)! = k! * 1 * 2 * ... * (n - k)\r\n  // cancelling out 1 * 2 * ... * (n - k) from both we get:\r\n  // (n - k + 1) * (n - k + 2) * ... n / k!\r\n  let numerator = 1;\r\n  let denominator = 1;\r\n  for (let i = n - k + 1; i <= n; i += 1) {\r\n    numerator *= i;\r\n  }\r\n  for (let i = 1; i <= k; i += 1) {\r\n    denominator *= i;\r\n  }\r\n  return numerator / denominator;\r\n}\r\n\r\nfunction resetProbabilityArray(actualProcs: number, procAttempts: number, procChance: number | number[]) {\r\n  const procProbabilities: Array<{ x: number; y: number; }> = Array.from({ length: procAttempts }, (_x, i: number) => {\r\n    if (typeof procChance === 'number') {\r\n      return { x: i, y: binomialPMF(i, procAttempts, procChance) };\r\n    } else {\r\n      return { x: i, y: poissonBinomialPMF(i, procAttempts, procChance) };\r\n    }\r\n  });\r\n\r\n  return procProbabilities;\r\n}\r\n\r\nfunction setMinMaxProbabilities(actualProcs: number, procAttempts: number, procChance: number | number[], threshold: number = 0.001) {\r\n  const procProbabilities = resetProbabilityArray(actualProcs, procAttempts, procChance);\r\n  const rangeMin = procProbabilities.findIndex(({ y }) => y >= threshold);\r\n  const rangeMax = rangeMin + procProbabilities.slice(rangeMin).findIndex(({ y }) => y < threshold);\r\n\r\n  return {\r\n    procProbabilities,\r\n    rangeMin,\r\n    rangeMax,\r\n  };\r\n}\r\n\r\n/**\r\n * Recursive formula for calculating the PMF (probability mass function) of Poisson's Binomial Distribution\r\n * @param k {Number} Number of desired positive outcomes\r\n * @param j {Number} Number of total tries\r\n * @param p {[Number]} Probability vector\r\n * @param lookup {Array} Lookup table\r\n * @returns {Number} Probability\r\n */\r\nfunction Ekj(k: number, j: number, p: number[], lookup: any[][]) {\r\n  if (k === -1) {\r\n    return 0;\r\n  }\r\n  if (k === j + 1) {\r\n    return 0;\r\n  }\r\n  if (k === 0 && j === 0) {\r\n    return 1;\r\n  }\r\n  if (lookup[k][j] !== null) {\r\n    return lookup[k][j];\r\n  }\r\n  // literature uses 1-based indices for probabilities, as we're using an array, we have to use 0 based\r\n  const value: number = (1 - p[j - 1]) * Ekj(k, j - 1, p, lookup) + p[j - 1] * Ekj(k - 1, j - 1, p, lookup);\r\n  lookup[k][j] = value;\r\n  return value;\r\n}\r\n\r\n// Poisson's Binomial Distribution\r\n// Methods based on Wikipedia page and this research paper:\r\n// https://www.researchgate.net/publication/257017356_On_computing_the_distribution_function_for_the_Poisson_binomial_distribution\r\n\r\n/**\r\n * Calculates the probability that out of n tries with p probabilities, we get exactly k positive outcomes\r\n * @param k {Number} Number of desired positive outcomes\r\n * @param n {Number} Number of total tries\r\n * @param p {[Number]} Probability vector\r\n */\r\nexport function poissonBinomialPMF(k: number, n: number, p: any[]) {\r\n  // denoted in the paper as ξk, I'll call it Ek for simplicity\r\n  // using the recursive formula in chapter 2.5\r\n  if (p.length !== n) {\r\n    throw new Error('You must supply a probability vector with the same length as the number of total tries into Poisson Binomial PMF');\r\n  }\r\n  // Using a lookup table to simplify recursion a little bit\r\n  // construct an (n+1) x (n+1) lookup table (because Ek,j uses indexes from 0 to n INCLUSIVE, with this we don't have to subtract indexes all the time)\r\n  // intentionally set tu nulls so we know which values are computed or not\r\n  const lookup = [...Array(n + 1)].map(_ => Array(n + 1).fill(null));\r\n  return Ekj(k, n, p, lookup);\r\n}\r\n\r\n/**\r\n * Calculates the probability that out of n tries with p probabilities, we get less than or equal k positive outcomes\r\n * @param k {Number} Number of desired positive outcomes\r\n * @param n {Number} Number of total tries\r\n * @param p {[Number]} Probability vector\r\n */\r\nexport function poissonBinomialCDF(k: number, n: number, p: number[]) {\r\n  // While technically equal to summing Ei from i = 0 to k, since we use recursion, a better solution is a lookup table\r\n  if (p.length !== n) {\r\n    throw new Error('You must supply a probability vector with the same length as the number of total tries into Poisson Binomial CDF');\r\n  }\r\n  // see comments in poissonBinomialPMF\r\n  const lookup = [...Array(n + 1)].map(_ => Array(n + 1).fill(null));\r\n  let probability = 0;\r\n  // since Ekj uses the values from \"previous row\" (Ekj(k - 1, j - 1, ...)), it's better to iterate from 0\r\n  // this way, it produces the least necessary amount of calculations with the lookup table (only the Ekj(k, j - 1) parts)\r\n  for (let i = 0; i <= k; i += 1) {\r\n    probability += Ekj(i, n, p, lookup);\r\n  }\r\n  return probability;\r\n}\r\n\r\nexport function plotOneVariableBinomChart(\r\n  actualProcs: number,\r\n  procAttempts: number,\r\n  procChance: number | number[],\r\n  trackedName: string = 'Procs',\r\n  tooltipText: string = trackedName,\r\n  yDomain: number[] = [0, 0.4],\r\n  xAxis: any = {\r\n    title: trackedName,\r\n    tickFormat: '~k',\r\n  },\r\n  yAxis: any = {\r\n    title: 'Likelihood',\r\n  },\r\n) {\r\n\r\n  const { procProbabilities, rangeMin, rangeMax } = setMinMaxProbabilities(actualProcs, procAttempts, procChance);\r\n  const actualEventY = typeof procChance === 'number' ? binomialPMF(actualProcs, procAttempts, procChance) : poissonBinomialPMF(actualProcs, procAttempts, procChance);\r\n  return (\r\n    <OneVariableBinomialChart\r\n      probabilities={procProbabilities.slice(rangeMin, rangeMax + 1)}\r\n      actualEvent={{ x: actualProcs, y: actualEventY }}\r\n      yDomain={yDomain}\r\n      xAxis={xAxis}\r\n      yAxis={yAxis}\r\n      tooltip={tooltipText}\r\n    />\r\n  );\r\n}\r\n","import Events, { ApplyBuffEvent, DamageEvent, FightEndEvent, RemoveBuffEvent } from 'parser/core/Events';\r\nimport Analyzer, { Options } from 'parser/core/Analyzer';\r\nimport { formatDuration } from 'common/format';\r\nimport calculateEffectiveDamage from 'parser/core/calculateEffectiveDamage';\r\nimport Spell from 'common/SPELLS/Spell';\r\nimport SpellUsable from 'parser/shared/modules/SpellUsable';\r\n\r\nconst debug = false;\r\n\r\nconst MS_BUFFER = 500;\r\n\r\nclass ExecuteHelper extends Analyzer {\r\n  static dependencies = {\r\n    spellUsable: SpellUsable,\r\n  };\r\n\r\n  protected spellUsable!: SpellUsable;\r\n\r\n  //region IMPLEMENTME statics\r\n  /**\r\n   * Array of objects from common/SPELLS\r\n   * This should contain any execute spells such as Kill Shot, Execute etc.\r\n   */\r\n  static executeSpells: Spell[] = [];\r\n\r\n  /**\r\n   * SELECTED_PLAYER or SELECTED_PLAYER_PET for usage in the eventfilter\r\n   */\r\n  static executeSources: number;\r\n\r\n  /**\r\n   * Array of objects from common/SPELLS\r\n   * This should contain any SPELLS object that allows execute to be used outside normal execute range\r\n   */\r\n  static executeOutsideRangeEnablers: Spell[] = [];\r\n\r\n  /**\r\n   * The lower threshold where execute is enabled, shown in decimals.\r\n   */\r\n  static lowerThreshold: number;\r\n\r\n  /**\r\n   * The upper threshold where an execute can be enabled immediately at a pull, shown in decimals.\r\n   */\r\n  static upperThreshold: number;\r\n\r\n  /**\r\n   * A boolean representing if the given execute modifies the damage of an existing spell.\r\n   * An execute spell should be labelled as false, whereas a talent that modifies an existing spell should be labelled as true.\r\n   */\r\n  static modifiesDamage: boolean;\r\n\r\n  /**\r\n   * represents the modifier of of a talent (or some other effect) that modifies the damage done by an existing spell\r\n   */\r\n  static damageModifier: number;\r\n  //endregion\r\n\r\n  //region Generic Variables\r\n  /**\r\n   * Is true if we're in an execute window either because of a buff giving access to execute spells or because of health windows\r\n   */\r\n  inExecuteWindow: boolean = false;\r\n\r\n  /**\r\n   * Is true if we're in an execute window due to health on a target, so a buff granting access to execute is pointless at this point\r\n   */\r\n  inHealthExecuteWindow: boolean = false;\r\n\r\n  /**\r\n   * A variable marking the timestamp of the start of the current execute window\r\n   */\r\n  executeWindowStart: number = 0;\r\n\r\n  /**\r\n   * A variable marking the timestamp of the last damage event within the execute window\r\n   */\r\n  lastExecuteHitTimestamp: number = 0;\r\n\r\n  /**\r\n   * The amount of time spent inside executewindows, either caused by health or by buffs giving access to execute\r\n   */\r\n  totalExecuteWindowDuration: number = 0;\r\n\r\n  /**\r\n   * Amount of damage done by the spells defined in executeSpells\r\n   */\r\n  damage: number = 0;\r\n\r\n  /**\r\n   * returns the total amount of casts of the executes listed in executeSpells\r\n   */\r\n  casts: number = 0;\r\n\r\n  /**\r\n   * returns the amount of casts of the executes listed in executeSpells that were cast whilst being in an execute window\r\n   */\r\n  castsWithExecute: number = 0;\r\n  //endregion\r\n\r\n  //region Execute helpers\r\n  /**\r\n   * Returns true if the event has less HP than the threshold.\r\n   * This is useful for any generic execute.\r\n   * @param event\r\n   */\r\n  isTargetInExecuteRange(event: DamageEvent) {\r\n    if (!event.hitPoints || !event.maxHitPoints) {\r\n      return false;\r\n    }\r\n    return (event.hitPoints / event.maxHitPoints) < this.lowerThreshold;\r\n  }\r\n\r\n  /**\r\n   * Returns true if the event has more HP than the threshold.\r\n   * This is useful for things like Firestarter and Flashpoint.\r\n   * @param event\r\n   */\r\n  isTargetInReverseExecuteRange(event: DamageEvent) {\r\n    if (!event.hitPoints || !event.maxHitPoints) {\r\n      return false;\r\n    }\r\n    return (event.hitPoints / event.maxHitPoints) > this.upperThreshold;\r\n  }\r\n\r\n  /**\r\n   * Returns true if either isTargetInExecuteRange() or isTargetInReverseExecuteRange() is true.\r\n   * @param event\r\n   */\r\n  isTargetInHealthExecuteWindow(event: DamageEvent) {\r\n    if (!event.hitPoints || !event.maxHitPoints) {\r\n      return false;\r\n    }\r\n    return (this.isTargetInExecuteRange(event) || this.isTargetInReverseExecuteRange(event));\r\n  }\r\n\r\n  /**\r\n   * Returns true if the combatant has one of the buffs that enable execute to be used outside of the regular execute windows\r\n   */\r\n  get isExecuteUsableOutsideExecuteRange() {\r\n    let usable: boolean = false;\r\n    this.executeOutsideRangeEnablers.forEach(spell => {\r\n      if (this.selectedCombatant.hasBuff(spell.id)) {\r\n        usable = true;\r\n      }\r\n    });\r\n    return usable;\r\n  }\r\n\r\n  /**\r\n   * If all execute spells are on cooldown, then we should count the entire period of cooldown as \"inside execute\" to properly calculate maxCasts\r\n   */\r\n  get areExecuteSpellsOnCD() {\r\n    let allOnCD: boolean = true;\r\n    this.executeSpells.forEach(spell => {\r\n      if (!this.spellUsable.isOnCooldown(spell.id)) {\r\n        allOnCD = false;\r\n      }\r\n    });\r\n    return allOnCD;\r\n  }\r\n\r\n  //endregion\r\n\r\n  constructor(options: Options) {\r\n    super(options);\r\n    this.addEventListener(Events.damage.by(this.executeSources), this.onGeneralDamage);\r\n    this.addEventListener(Events.cast.by(this.executeSources).spell(this.executeSpells), this.onExecuteCast);\r\n    this.addEventListener(Events.damage.by(this.executeSources).spell(this.executeSpells), this.onExecuteDamage);\r\n    this.addEventListener(Events.applybuff.to(this.executeSources).spell(this.executeOutsideRangeEnablers), this.applyExecuteEnablerBuff);\r\n    this.addEventListener(Events.removebuff.to(this.executeSources).spell(this.executeOutsideRangeEnablers), this.removeExecuteEnablerBuff);\r\n    this.addEventListener(Events.fightend, this.onFightEnd);\r\n  }\r\n\r\n  //region Static Getters\r\n  get executeSources() {\r\n    const ctor = this.constructor as typeof ExecuteHelper;\r\n    return ctor.executeSources;\r\n  }\r\n\r\n  get executeSpells() {\r\n    const ctor = this.constructor as typeof ExecuteHelper;\r\n    return ctor.executeSpells;\r\n  }\r\n\r\n  get executeOutsideRangeEnablers() {\r\n    const ctor = this.constructor as typeof ExecuteHelper;\r\n    return ctor.executeOutsideRangeEnablers;\r\n  }\r\n\r\n  get lowerThreshold() {\r\n    const ctor = this.constructor as typeof ExecuteHelper;\r\n    return ctor.lowerThreshold;\r\n  }\r\n\r\n  get upperThreshold() {\r\n    const ctor = this.constructor as typeof ExecuteHelper;\r\n    return ctor.upperThreshold;\r\n  }\r\n\r\n  get modifiesDamage() {\r\n    const ctor = this.constructor as typeof ExecuteHelper;\r\n    return ctor.modifiesDamage;\r\n  }\r\n\r\n  get damageModifier() {\r\n    const ctor = this.constructor as typeof ExecuteHelper;\r\n    return ctor.damageModifier;\r\n  }\r\n\r\n  //endregion\r\n\r\n  //region Generic Getters\r\n  get executeDamage() {\r\n    return this.damage;\r\n  }\r\n\r\n  get totalExecuteDuration() {\r\n    return this.totalExecuteWindowDuration;\r\n  }\r\n\r\n  get totalCasts() {\r\n    return this.casts;\r\n  }\r\n\r\n  get totalExecuteCasts() {\r\n    return this.castsWithExecute;\r\n  }\r\n\r\n  //endregion\r\n\r\n  //region Event Listener functions\r\n  onGeneralDamage(event: DamageEvent) {\r\n    if (event.targetIsFriendly) {\r\n      return;\r\n    }\r\n    if (this.areExecuteSpellsOnCD || this.isExecuteUsableOutsideExecuteRange || this.isTargetInHealthExecuteWindow(event)) {\r\n      this.lastExecuteHitTimestamp = event.timestamp;\r\n      if (!this.inExecuteWindow) {\r\n        this.inExecuteWindow = true;\r\n        this.inHealthExecuteWindow = true;\r\n        this.executeWindowStart = event.timestamp;\r\n        debug && console.log('Execute window started');\r\n      }\r\n    } else {\r\n      if (this.inExecuteWindow && event.timestamp > this.lastExecuteHitTimestamp + MS_BUFFER) {\r\n        this.inExecuteWindow = false;\r\n        this.inHealthExecuteWindow = false;\r\n        this.totalExecuteWindowDuration += event.timestamp - this.executeWindowStart;\r\n        debug && console.log('Execute window ended, current total: ', this.totalExecuteDuration);\r\n      }\r\n    }\r\n  }\r\n\r\n  onExecuteCast() {\r\n    this.casts += 1;\r\n    if (this.inExecuteWindow || this.inHealthExecuteWindow) {\r\n      this.castsWithExecute += 1;\r\n    }\r\n  }\r\n\r\n  onExecuteDamage(event: DamageEvent) {\r\n    if (this.inExecuteWindow || this.inHealthExecuteWindow) {\r\n      if (this.modifiesDamage) {\r\n        this.damage += calculateEffectiveDamage(event, this.damageModifier);\r\n      } else {\r\n        this.damage += event.amount + (event.absorbed || 0);\r\n      }\r\n    }\r\n  }\r\n\r\n  applyExecuteEnablerBuff(event: ApplyBuffEvent) {\r\n    if (!this.inExecuteWindow && !this.inHealthExecuteWindow) {\r\n      this.executeWindowStart = event.timestamp;\r\n    }\r\n    this.inExecuteWindow = true;\r\n    this.lastExecuteHitTimestamp = event.timestamp;\r\n    debug && console.log(event.ability.name, ' was applied starting the execute window');\r\n  }\r\n\r\n  removeExecuteEnablerBuff(event: RemoveBuffEvent) {\r\n    if (!this.inHealthExecuteWindow) {\r\n      this.inExecuteWindow = false;\r\n      this.totalExecuteWindowDuration += event.timestamp - this.executeWindowStart;\r\n      debug && console.log(event.ability.name, ' was removed ending the execute window, current total: ', this.totalExecuteDuration);\r\n    } else {\r\n      debug && console.log('Execute enabler buff ended, but inside execute health window so window still ongoing.');\r\n    }\r\n  }\r\n\r\n  onFightEnd(event: FightEndEvent) {\r\n    if (this.inExecuteWindow) {\r\n      this.totalExecuteWindowDuration += event.timestamp - this.executeWindowStart;\r\n      this.inExecuteWindow = false;\r\n    }\r\n    debug && console.log('Fight ended, total duration of execute: ' + this.totalExecuteDuration + ' | ' + formatDuration(this.totalExecuteDuration));\r\n  }\r\n\r\n  //endregion\r\n}\r\n\r\nexport default ExecuteHelper;\r\n","import React from 'react';\r\nimport PropTypes from 'prop-types';\r\n\r\nconst AverageTargetsHit = props => {\r\n  const { casts, hits, unique, approximate } = props;\r\n  const averageHits = (hits / casts) || 0;\r\n  return (\r\n    <>\r\n      {approximate && '≈'}{averageHits.toFixed(1)} <small> {unique ? 'unique targets hit' : 'average'} {unique ? '' : averageHits === 1 ? 'hit' : 'hits'} per cast</small>\r\n    </>\r\n  );\r\n};\r\n\r\nAverageTargetsHit.propTypes = {\r\n  casts: PropTypes.number.isRequired,\r\n  hits: PropTypes.number.isRequired,\r\n  unique: PropTypes.bool,\r\n  approximate: PropTypes.bool,\r\n};\r\n\r\nexport default AverageTargetsHit;\r\n\r\nAverageTargetsHit.defaultProps = {\r\n  approximate: false,\r\n  unique: false,\r\n};\r\n\r\n","import { ApplyBuffEvent, ApplyBuffStackEvent, ApplyDebuffEvent, ApplyDebuffStackEvent, EventType, RemoveBuffEvent, RemoveBuffStackEvent, RemoveDebuffEvent, RemoveDebuffStackEvent } from 'parser/core/Events';\r\n\r\n/**\r\n * Returns the current stacks on a given event\r\n * @param event\r\n */\r\nexport function currentStacks(event: RemoveBuffEvent | RemoveDebuffEvent | ApplyBuffEvent | ApplyDebuffEvent | ApplyBuffStackEvent | RemoveBuffStackEvent | ApplyDebuffStackEvent | RemoveDebuffStackEvent) {\r\n  switch (event.type) {\r\n    case EventType.RemoveBuff:\r\n    case EventType.RemoveDebuff:\r\n      return 0;\r\n    case EventType.ApplyBuff:\r\n    case EventType.ApplyDebuff:\r\n      return 1;\r\n    case EventType.ApplyBuffStack:\r\n    case EventType.RemoveBuffStack:\r\n    case EventType.ApplyDebuffStack:\r\n    case EventType.RemoveDebuffStack:\r\n      return event.stack;\r\n  }\r\n  throw new Error(\"Invalid event type for currentStacks\");\r\n}\r\n","import React from 'react';\r\nimport { formatPercentage } from 'common/format';\r\nimport SpellLink from 'common/SpellLink';\r\nimport { i18n } from '@lingui/core';\r\nimport { t } from '@lingui/macro';\r\n\r\nimport Spell from 'common/SPELLS/Spell';\r\n\r\nimport { When } from 'parser/core/ParseResults';\r\n\r\nimport ResourceTracker from './ResourceTracker';\r\n\r\ninterface Suggestion {\r\n  spell: Spell | any;\r\n  minor: number;\r\n  avg: number;\r\n  major: number;\r\n  extraSuggestion?: string | JSX.Element;\r\n}\r\n\r\nfunction suggest(when: When, tracker: ResourceTracker, suggestion: Suggestion) {\r\n  let tracked = { generated: 0, wasted: 0, casts: 0 };\r\n  //If an array of spells is passed, we manipulate the data to aggregate all the generated and wasted resources as well as the individual focus instances into 1 spell so that it can be displayed.\r\n  if (Array.isArray(suggestion.spell)) {\r\n    let newSuggestionSpell: Spell = { id: -1, name: \"\", icon: \"\" };\r\n    for (const spell of suggestion.spell) {\r\n      if (!tracker.buildersObj[spell.id]) {\r\n        continue;\r\n      }\r\n      if (newSuggestionSpell.id === -1) {\r\n        newSuggestionSpell = spell;\r\n      }\r\n      tracked.generated += tracker.buildersObj[spell.id].generated;\r\n      tracked.wasted += tracker.buildersObj[spell.id].wasted;\r\n      tracked.casts += tracker.buildersObj[spell.id].casts;\r\n    }\r\n    suggestion.spell = newSuggestionSpell;\r\n  } else {\r\n    tracked = tracker.buildersObj[suggestion.spell.id];\r\n  }\r\n  if (!tracked) {\r\n    return;\r\n  }\r\n\r\n  const maxGenerated = tracked.generated + tracked.wasted;\r\n  const wastedShare = (tracked.wasted / maxGenerated) || 0;\r\n  const resourceNameLower = tracker.resource.name.toLowerCase();\r\n\r\n  when(wastedShare).isGreaterThan(suggestion.minor)\r\n    .addSuggestion((suggest) => suggest(\r\n        <>\r\n          You are wasting {resourceNameLower} generated by <SpellLink id={suggestion.spell.id} />. {suggestion.extraSuggestion}\r\n        </>,\r\n      )\r\n        .icon(suggestion.spell.icon)\r\n        .actual(i18n._(t('shared.suggestions.resources.wasted')`${formatPercentage(wastedShare)}% wasted. Generated ${tracked.generated} out of ${maxGenerated} possible ${resourceNameLower}`))\r\n        .recommended(`<${formatPercentage(suggestion.minor)}%  ${resourceNameLower} wasted is recommend`)\r\n        .regular(suggestion.avg).major(suggestion.major));\r\n}\r\n\r\nexport default suggest;\r\n","import Analyzer, { SELECTED_PLAYER } from 'parser/core/Analyzer';\r\nimport Haste from 'parser/shared/modules/Haste';\r\nimport EventEmitter from 'parser/core/modules/EventEmitter';\r\nimport SpellResourceCost from 'parser/shared/modules/SpellResourceCost';\r\nimport HIT_TYPES from 'game/HIT_TYPES';\r\nimport Events from 'parser/core/Events';\r\n\r\n// turn on debug to find if there's inaccuracies, then verboseDebug to help track the cause.\r\nconst debug = false;\r\nconst verboseDebug = false;\r\n\r\n/**\r\n * Tracks when a regenerating resource reaches its cap. Most useful for specs such as rogues\r\n * and feral druids where their energy resource quickly recharges through natural regeneration\r\n * and may frequently reach its cap during a fight.\r\n *\r\n * It is an 'abstract' class, so should be extended and provided with settings for the resource\r\n * being tracked by your spec. Search for \"IMPLEMENTME\" for what should be set up.\r\n *\r\n * Reductions in spell costs should be handled by implementing parser/core/Modules/SpellResourceCost\r\n * for the relevant resource.\r\n *\r\n * If your derived class shares event handlers remember to call the original, e.g.\r\n * onCast(event) {\r\n *  super.onCast(event);\r\n *  // stuff related to your spec's implementation\r\n * }\r\n *\r\n * Example derived class: parser/Druid/Feral/Modules/Features/EnergyCapTracker\r\n *\r\n * For a more complete picture of how a combatant is using their resources you may want to\r\n * also use parser/core/Modules/ResourceTracker\r\n * ResourceTracker handles how it's energized and spent, RegenResourceCapTracker will tell\r\n * you about natural regeneration and how long it's at cap.\r\n *\r\n * The accuracy of this module's predictions depends heavily on finding the \"quirks\" of how\r\n * abilities and their resource behaviours appear in the combat log. It can never be perfectly\r\n * accurate due to resources being rounded to integer values and latency issues, but an error\r\n * of less than ±2 should be possible.\r\n *\r\n * Fabricates events 'beginresourcecap' and 'endresourcecap'. See the functions fabricateBeginCap\r\n * and fabricateEndCap for details on these events and their limitations.\r\n */\r\n\r\n/**\r\n * How far (in ms) damage event can be separated from a cast and still use its information\r\n * to decide there should be a resource refund due to not hiting. 208ms is highest I've seen.\r\n */\r\nconst REFUND_SPENDER_WINDOW = 500;\r\nconst HIT_TYPES_THAT_REFUND = [\r\n  HIT_TYPES.MISS,\r\n  HIT_TYPES.DODGE,\r\n  HIT_TYPES.PARRY,\r\n];\r\n\r\n/**\r\n * @property {EventEmitter} eventEmitter\r\n * @property {Haste} haste\r\n * @property {SpellResourceCost} spellResourceCost\r\n */\r\nclass RegenResourceCapTracker extends Analyzer {\r\n  static dependencies = {\r\n    eventEmitter: EventEmitter,\r\n    haste: Haste,\r\n    // Needed for the `resourceCost` prop of events\r\n    spellResourceCost: SpellResourceCost,\r\n  };\r\n\r\n  // -- Start of IMPLEMENTME statics\r\n\r\n  // One of game/RESOURCE_TYPES\r\n  static resourceType;\r\n\r\n  // Resource's base regeneration rate in points per second (e.g. 10 for Energy)\r\n  static baseRegenRate = 0;\r\n\r\n  /**\r\n   * Is natural regeneration rate increased by haste.\r\n   * If a resource is affected by haste in an unusual way, set false and handle it manually in naturalRegenRate\r\n   */\r\n  static isRegenHasted = false;\r\n\r\n  /**\r\n   * Any buff or debuff IDs that change the max value for this resource. e.g. Berserk for Feral.\r\n   * Remember to check for their presence and apply the effect in currentMaxResource\r\n   */\r\n  static buffsChangeMax = [];\r\n\r\n  /**\r\n   * Any buff or debuff IDs that directly affect natural regeneration rate for this resource. e.g. Adrenaline Rush for Outlaw.\r\n   * Remember to check for their presence and apply the effect in naturalRegenRate\r\n   */\r\n  static buffsChangeRegen = [];\r\n\r\n  // Events for some abilities give inaccurate \"amount\" values, so their change is best applied cumulatively.\r\n  static energizersToApplyCumulatively = [];\r\n  static castsToApplyCumulatively = [];\r\n  static drainsToApplyCumulatively = [];\r\n\r\n  /**\r\n   * How close (in ms) a resource changing event must be to the last one to have the change handled cumulatively.\r\n   *\r\n   * When resource changing events occur in a very short time the values in the combat log can become inaccurate.\r\n   *  What happens in the fight:\r\n   * t: 1  player has 50 energy\r\n   * t: 2  cast spending 20 energy\r\n   * t: 2  energize gaining 30 energy\r\n   * t: 3  player has 60 energy\r\n   *\r\n   *  What the log shows:\r\n   * cast {timestamp: 2, classResources[i]: {amount: 50, cost: 20}}\r\n   * energize {timestamp: 2, resourceChange: 30, classResources[i]: {amount: 80}}\r\n   * ('amount' for cast events is what it was before the event, for energize events it's after.)\r\n   *\r\n   * If we trusted the resource information given by the last parsed event we'd expect energy to\r\n   * be 80 at t = 3.\r\n   */\r\n  static cumulativeEventWindow = 100;\r\n\r\n  /**\r\n   * For some specs (e.g. energy for rogues and feral) a ability that doesn't hit refunds some of the resource.\r\n   * A value of 0 means no refund, 0.8 seems to be the standard refund amount.\r\n   */\r\n  static resourceRefundOnMiss = 0;\r\n\r\n  // Some abilities never get their resources refunded, usually AoEs. List their spellIds here.\r\n  static exemptFromRefund = [];\r\n\r\n  // -- end of IMPLEMENTME statics\r\n\r\n  // Total time spent with resource at maximum (in ms)\r\n  atCap = 0;\r\n\r\n  // Total resources lost from natural regeneration (ONLY natural regeneration) due to being capped\r\n  missedRegen = 0;\r\n\r\n  // Total resources generated from natural regeneration, includes wasted resources.\r\n  naturalRegen = 0;\r\n\r\n  regenState = null;\r\n  prevSpender = null;\r\n  hasReportedBelowCap = false;\r\n\r\n  /**\r\n   * Amount of resource that should be available at current timestamp, accounting for natural regeneration.\r\n   * @returns {number}\r\n   */\r\n  get current() {\r\n    return this.predictValue(this.owner.currentTimestamp);\r\n  }\r\n\r\n  /**\r\n   * Whether the resource is at its cap at the current timestamp.\r\n   * @returns {boolean}\r\n   */\r\n  get isCapped() {\r\n    return this.current >= this.regenState.max;\r\n  }\r\n\r\n  /**\r\n   * What fraction of the fight was spent with this resource at its cap.\r\n   * @returns {number}\r\n   */\r\n  get cappedProportion() {\r\n    return this.atCap / this.owner.fightDuration;\r\n  }\r\n\r\n  /**\r\n   * Resource lost from natural regeneration (only from natural regeneration, not energizers) due\r\n   * to the resource reaching cap, averaged to a per-minute value.\r\n   */\r\n  get missedRegenPerMinute() {\r\n    return (this.missedRegen / this.owner.fightDuration) * 1000 * 60;\r\n  }\r\n\r\n  constructor(...args) {\r\n    super(...args);\r\n    // can't know resource state for certain until the first combat events, but assume a regenerating resource starts full.\r\n    const max = this.currentMaxResourceWithFallback();\r\n    this.regenState = {\r\n      amount: max ? max : 0,\r\n      max,\r\n      regen: this.naturalRegenRate(),\r\n      timestamp: this.owner.fight.start_time,\r\n    };\r\n    this.addEventListener(Events.fightend, this.onFightend);\r\n    this.addEventListener(Events.energize.to(SELECTED_PLAYER), this.onEnergize);\r\n    this.addEventListener(Events.cast.by(SELECTED_PLAYER), this.onCast);\r\n    this.addEventListener(Events.damage.by(SELECTED_PLAYER), this.onDamage);\r\n    this.addEventListener(Events.drain.by(SELECTED_PLAYER), this.onDrain);\r\n    this.addEventListener(Events.applybuff.to(SELECTED_PLAYER), this.onApplyBuff);\r\n    this.addEventListener(Events.removebuff.to(SELECTED_PLAYER), this.onRemoveBuff);\r\n    this.addEventListener(Events.ChangeHaste.to(SELECTED_PLAYER), this.onChangeHaste);\r\n  }\r\n\r\n  /**\r\n   * IMPLEMENTME\r\n   * Some specs have drain reductions that aren't already shown in events, which should be implemented\r\n   * here. Drain events are separate from an ability cast cost.\r\n   * @param   {object}  event A drain event being applied to the player.\r\n   * @returns {number}  Drain amount after any reductions are applied.\r\n   */\r\n  getReducedDrain(event) {\r\n    return event.resourceChange;\r\n  }\r\n\r\n  /**\r\n   * IMPLEMENTME\r\n   * Some specs have modifiers to the base regen rate that apply before haste, which should\r\n   * be implemented here.\r\n   * @returns {number} Base regen rate of the resource.\r\n   */\r\n  getBaseRegenRate(){\r\n    return this.constructor.baseRegenRate;\r\n  }\r\n\r\n  /**\r\n   * IMPLEMENTME\r\n   * Calculate current natural regeneration rate of the resource.\r\n   * When checking combant's buffs/debuffs you may want to use this.combatantHasBuffActive() rather than\r\n   * the .hasBuff of the combatant directly, doing so will exclude buffs which wore off at this timestamp.\r\n   * @returns {number}  Resource expected to be generated per ms.\r\n   */\r\n  naturalRegenRate() {\r\n    let regen = this.getBaseRegenRate() / 1000;\r\n    if (this.constructor.isRegenHasted) {\r\n      regen *= (1 + this.haste.current);\r\n    }\r\n    return regen;\r\n  }\r\n\r\n  /**\r\n   * IMPLEMENTME\r\n   * Calculate current maximum value for the resource. Accounting for items, talents, and active buffs.\r\n   * When checking combant's buffs/debuffs you may want to use this.combatantHasBuffActive() rather than\r\n   * the .hasBuff of the combatant directly, doing so will exclude buffs which wore off at this timestamp.\r\n   * @returns {number}  Maximum resource value, or null to try to use value from resource events.\r\n   */\r\n  currentMaxResource() {\r\n   /**\r\n    * If left unimplemented and no events provide max resource information the Analyzer will never know\r\n    * the resource's max value. It handles that situation without crashing, but without a cap value it\r\n    * is largely useless.\r\n    */\r\n    return null;\r\n  }\r\n\r\n  /**\r\n   * Applies an energize of the tracked resource type at the current timestamp.\r\n   * Use when a spec has a source of resource which doesn't appear as an energize event in the log.\r\n   * If you have an invisible energize that happens over a duration you should generate an event for\r\n   * each tick, as applying it all at once can lead to inaccuracies. If it doesn't have ticks consider\r\n   * handling it as a buff to the natural regeneration rate instead.\r\n   * @param {number} amount Raw amount of resources to gain. Limiting to max is done within this function\r\n   * so there's no need to check before passing it in.\r\n   */\r\n  processInvisibleEnergize(amount) {\r\n    if (amount == null || isNaN(amount)) {\r\n      throw new Error(`processInvisibleEnergize called without required parameter. amount: ${amount}`);\r\n    }\r\n    if (amount === 0) {\r\n      return;\r\n    }\r\n    const before = this.current;\r\n    const after = Math.min(before + amount, this.currentMaxResourceWithFallback());\r\n    const gain = after - before;\r\n    this.applyEnergize(gain);\r\n  }\r\n\r\n  /**\r\n   * Fetches the appropriate classResources object from an event, or null if there is none available.\r\n   * @param {object} event An event object which may have an appropriate .classResources property.\r\n   */\r\n  getResource(event) {\r\n    if (!event || !event.classResources) {\r\n      return null;\r\n    }\r\n    return event.classResources.find(r => r.type === this.constructor.resourceType.id);\r\n  }\r\n\r\n  /**\r\n   * Fetches the cost of a cast event. Using its resourceCost property (added by SpellResourceCost)\r\n   * if it's available or the resource cost given by the combat log if not.\r\n   * @param {object} event A cast event object with a resource cost associated with it.\r\n   */\r\n  getCost(event) {\r\n    if (event.resourceCost[this.constructor.resourceType.id] !== undefined) {\r\n      return event.resourceCost[this.constructor.resourceType.id];\r\n    }\r\n    return this.getResource(event).cost;\r\n  }\r\n\r\n  /**\r\n   * A variation of this.selectedCombatant.hasBuff that excludes any buffs which were removed on the timestamp.\r\n   * @param {number} buffId ID of buff or debuff to check for on the current combatant.\r\n   * @param {number} timestamp Time to check, or null to use current timestamp. Cannot be a future timestamp.\r\n   */\r\n  combatantHasBuffActive(buffId, timestamp = null) {\r\n    if (!buffId || isNaN(buffId)) {\r\n      throw new Error(`combatantHasBuffActive called without required parameter. buffId: ${buffId}`);\r\n    }\r\n    if (!timestamp) {\r\n      timestamp = this.owner.currentTimestamp;\r\n    }\r\n    const buffHistory = this.selectedCombatant.getBuffHistory(buffId);\r\n    return Boolean(buffHistory.find(buff => (buff.start <= timestamp && (!buff.end || buff.end > timestamp))));\r\n  }\r\n\r\n  onFightend() {\r\n    // updateState one last time to catch any resource capping after the final resource event\r\n    this.updateState(this.predictValue(this.owner.fight.end_time));\r\n    debug && console.log(`mean prediction error magnitude: ${this.debugMeanPredictionError.toFixed(2)}`);\r\n    debug && console.log(`greatest magnitude prediction error: ${this.debugGreatestError.toFixed(2)}`);\r\n  }\r\n\r\n  onEnergize(event) {\r\n    if(event.resourceChangeType !== this.constructor.resourceType.id || !event.resourceChange) {\r\n      return;\r\n    }\r\n    const waste = event.waste ? event.waste : 0;\r\n    const gain = event.resourceChange - waste;\r\n    const applyCumulatively = this.constructor.energizersToApplyCumulatively.includes(event.ability.guid);\r\n    this.applyEnergize(gain, event, applyCumulatively);\r\n  }\r\n\r\n  applyEnergize(gain, event = null, applyCumulatively = false) {\r\n    if (gain == null || isNaN(gain)) {\r\n      // using == null to catch undefined, but still allow 0\r\n      throw new Error(`applyEnergize called without required parameter. gain: ${gain}`);\r\n    }\r\n    const time = event ? event.timestamp : this.owner.currentTimestamp;\r\n    const eventResource = event ? this.getResource(event) : null;\r\n\r\n    const shouldAccumulate = applyCumulatively ||\r\n      this.isLastUpdateRecent(time) ||\r\n      !eventResource || eventResource.amount == null;\r\n\r\n    // eventResource.amount for an energize is the value after the change\r\n    const current = shouldAccumulate ? (this.predictValue(time) + gain) : eventResource.amount;\r\n    if (debug && !shouldAccumulate) {\r\n      this.debugActualVsPredicted(eventResource.amount - gain, time);\r\n    }\r\n    const max = this.currentMaxResourceWithFallback(event);\r\n    this.updateState(current, max);\r\n  }\r\n\r\n  onCast(event) {\r\n    const eventResource = this.getResource(event);\r\n    if (!eventResource) {\r\n      return;\r\n    }\r\n    const cost = this.getCost(event);\r\n    if (!cost) {\r\n      // only interested in cast events that spend resource\r\n      return;\r\n    }\r\n    if (cost < 0) {\r\n      debug && console.warn(`${this.owner.formatTimestamp(event.timestamp, 3)} Unexpected negative cost ${cost} for spell ${event.ability.guid}`);\r\n    }\r\n    if (!this.constructor.exemptFromRefund.includes(event.ability.guid)) {\r\n      this.prevSpender = {\r\n        id: event.ability.guid,\r\n        cost,\r\n        timestamp: event.timestamp,\r\n      };\r\n    }\r\n\r\n    const shouldAccumulate = eventResource.amount == null ||\r\n      this.constructor.castsToApplyCumulatively.includes(event.ability.guid) ||\r\n      this.isLastUpdateRecent(event.timestamp);\r\n    const current = (shouldAccumulate ? this.predictValue(event.timestamp) : eventResource.amount) - cost;\r\n    if (debug && !shouldAccumulate) {\r\n      this.debugActualVsPredicted(eventResource.amount, event.timestamp);\r\n    }\r\n    const max = this.currentMaxResourceWithFallback(event);\r\n    this.updateState(current, max);\r\n  }\r\n\r\n  onDamage(event) {\r\n    // only interested in damage events if they show a spending ability failing to connect (and so triggering a refund)\r\n    if (!this.prevSpender || event.ability.guid !== this.prevSpender.id ||\r\n        (event.timestamp - this.prevSpender.timestamp) > REFUND_SPENDER_WINDOW ||\r\n        event.tick || !HIT_TYPES_THAT_REFUND.includes(event.hitType)) {\r\n      return;\r\n    }\r\n    verboseDebug && console.log(`${this.owner.formatTimestamp(this.owner.currentTimestamp, 3)} attack didn't connect so restoring ${Math.round(this.constructor.resourceRefundOnMiss * 100)}% resource`);\r\n    const refund = Math.floor(this.prevSpender.cost * this.constructor.resourceRefundOnMiss);\r\n    const current = this.predictValue(event.timestamp) + refund;\r\n    this.updateState(current);\r\n  }\r\n\r\n  onDrain(event) {\r\n    if(event.resourceChangeType !== this.constructor.resourceType.id || !event.resourceChange) {\r\n      return;\r\n    }\r\n    const eventResource = this.getResource(event);\r\n    const drain = this.getReducedDrain(event);\r\n\r\n    const shouldAccumulate = !eventResource || eventResource.amount == null ||\r\n      this.constructor.energizersToApplyCumulatively.includes(event.ability.guid) ||\r\n      this.isLastUpdateRecent(event.timestamp);\r\n\r\n    // eventResource.amount for a drain is the value before the change\r\n    const current = (shouldAccumulate ? this.predictValue(event.timestamp) : eventResource.amount) - drain;\r\n    if (debug && !shouldAccumulate) {\r\n      this.debugActualVsPredicted(eventResource.amount, event.timestamp);\r\n    }\r\n    const max = this.currentMaxResourceWithFallback(event);\r\n    this.updateState(current, max);\r\n  }\r\n\r\n  isLastUpdateRecent(timestamp) {\r\n    return this.regenState.timestamp + this.constructor.cumulativeEventWindow >= timestamp;\r\n  }\r\n\r\n  onApplyBuff(event) {\r\n    if (this.constructor.buffsChangeMax.includes(event.ability.guid)) {\r\n      this.buffChangesResourceMax(event);\r\n    }\r\n    if (this.constructor.buffsChangeRegen.includes(event.ability.guid)) {\r\n      this.buffChangesRegen();\r\n    }\r\n  }\r\n\r\n  onRemoveBuff(event) {\r\n    if (this.constructor.buffsChangeMax.includes(event.ability.guid)) {\r\n      this.buffChangesResourceMax(event);\r\n    }\r\n    if (this.constructor.buffsChangeRegen.includes(event.ability.guid)) {\r\n      this.buffChangesRegen();\r\n    }\r\n  }\r\n\r\n  onChangeHaste() {\r\n    const regen = this.naturalRegenRate();\r\n    this.updateState(null, null, regen);\r\n  }\r\n\r\n  buffChangesResourceMax(event) {\r\n    const max = this.currentMaxResourceWithFallback(event);\r\n    this.updateState(null, max);\r\n  }\r\n\r\n  buffChangesRegen() {\r\n    const regen = this.naturalRegenRate();\r\n    this.updateState(null, null, regen);\r\n  }\r\n\r\n  /**\r\n   * Called when current, max, or regen rate for the resource has changed.\r\n   * Builds a new regenState reflecting the current state.\r\n   * Detects if resource capping occurred since the last regenState.\r\n   * @param {number} amount Current amount of resource, or null to use prediction.\r\n   * @param {number} max Current resource maximum, or null to use calculation.\r\n   * @param {number} regen Current resource regeneration rate, or null to use calculation.\r\n   */\r\n  updateState(amount = null, max = null, regen = null) {\r\n    const timestamp = this.owner.currentTimestamp;\r\n    verboseDebug && console.log(`${this.owner.formatTimestamp(timestamp, 3)} amount: ${amount ? amount.toFixed(1) : 'n/a'}, max: ${max ? max.toFixed(1) : 'n/a'} , regen: ${regen ? (regen * 1000).toFixed(3) : 'n/a'}`);\r\n    if (amount == null || isNaN(amount)) {\r\n      amount = this.predictValue(timestamp);\r\n    }\r\n    if (max == null || isNaN(max)) {\r\n      max = this.currentMaxResourceWithFallback();\r\n    }\r\n    if (regen == null || isNaN(regen)) {\r\n      regen = this.naturalRegenRate();\r\n    }\r\n    amount = max ? Math.min(max, amount) : amount;\r\n    const oldState = this.regenState;\r\n    const newState = {\r\n      amount,\r\n      max,\r\n      regen,\r\n      timestamp,\r\n    };\r\n    this.regenState = newState;\r\n    if (oldState) {\r\n      const durationCapped = this.timeCappedBetweenStates(oldState, newState);\r\n      this.atCap += durationCapped;\r\n      this.missedRegen += durationCapped * oldState.regen;\r\n      this.naturalRegen += (newState.timestamp - oldState.timestamp) * oldState.regen;\r\n    }\r\n    if (newState.amount < newState.max) {\r\n      this.onBelowCap(newState.timestamp);\r\n    }\r\n  }\r\n\r\n  timeCappedBetweenStates(oldState, newState) {\r\n    if (!oldState || !newState){\r\n      throw new Error(`timeCappedBetweenStates called without required parameters. oldState: ${oldState}, newState: ${newState}`);\r\n    }\r\n    const reachCap = oldState.max ? this.predictReachValue(oldState.timestamp, oldState.amount, oldState.regen, oldState.max) : Infinity;\r\n    if (reachCap >= newState.timestamp) {\r\n      return 0;\r\n    }\r\n    this.onAtCap(reachCap);\r\n\r\n    return newState.timestamp - reachCap;\r\n  }\r\n\r\n  currentMaxResourceWithFallback(event = null) {\r\n    const calculated = this.currentMaxResource();\r\n    if (calculated) {\r\n      return calculated;\r\n    }\r\n    const eventResource = this.getResource(event);\r\n    if (eventResource && eventResource.max != null && !isNaN(eventResource.max)) {\r\n      return eventResource.max;\r\n    }\r\n    // when neither source provides a value just use the existing\r\n    return this.regenState.max;\r\n  }\r\n\r\n  /**\r\n   * Given a start value and regen rate, calculate when resource will reach a given value.\r\n   * @param {number} startTime Timestamp for known resource value\r\n   * @param {number} startValue Known resource value\r\n   * @param {number} regen Regeneration rate in units per ms\r\n   * @param {number} targetValue Resource value being aimed for\r\n   * @returns {number} Timestamp when targetValue would be reached through natural regen.\r\n   */\r\n  predictReachValue(startTime, startValue, regen, targetValue) {\r\n    if (startValue == null || isNaN(startValue) ||\r\n        regen == null || isNaN(regen) ||\r\n        targetValue == null || isNaN(targetValue) ||\r\n        startTime == null || isNaN(startTime)) {\r\n      throw new Error(`predictReachValue called without required parameters. startValue: ${startValue}, regen: ${regen}, cap: ${targetValue}, startTime: ${startTime}`);\r\n    }\r\n    if (startValue >= targetValue) {\r\n      return startTime;\r\n    }\r\n    if (regen === 0) {\r\n      return Infinity;\r\n    }\r\n    return startTime + ((targetValue - startValue) / regen);\r\n  }\r\n\r\n  /**\r\n   * Calculates available resource accounting for natural regen.\r\n   * @param {number} time Timestamp for which to create a prediction, or null for current timestamp.\r\n   * @returns {number} Predicted resource value at given time.\r\n   */\r\n  predictValue(time = null) {\r\n    if (!time) {\r\n      time = this.owner.currentTimestamp;\r\n    }\r\n    if (time < this.regenState.timestamp) {\r\n      debug && console.warn(`Attempting to predict the past. State's time: ${this.owner.formatTimestamp(this.regenState.timestamp, 3)}, target time: ${this.owner.formatTimestamp(time, 3)}`);\r\n      return this.regenState.amount;\r\n    }\r\n    const elapsed = time - this.regenState.timestamp;\r\n    const predicted = this.regenState.amount + this.regenState.regen * elapsed;\r\n    return this.regenState.max ? Math.min(this.regenState.max, predicted) : predicted;\r\n  }\r\n\r\n  onBelowCap(time) {\r\n    if (this.hasReportedBelowCap) {\r\n      return;\r\n    }\r\n    this.fabricateEndCap(time);\r\n    this.hasReportedBelowCap = true;\r\n  }\r\n\r\n  onAtCap(time) {\r\n    if (!this.hasReportedBelowCap) {\r\n      return;\r\n    }\r\n    this.fabricateBeginCap(time);\r\n    this.hasReportedBelowCap = false;\r\n  }\r\n\r\n  /**\r\n   * Fabricates an event indicating the tracked resource has reached its cap value.\r\n   * May be triggered by an energize or natural regeneration bringing the value to the cap, or\r\n   * by the cap being lowered.\r\n   *\r\n   * Although the timestamp of this event should be accurate, because cap events are sometimes\r\n   * only detected after they happen it may be misplaced within the event stream.\r\n   * So do NOT assume that an event parsed between beginresourcecap and endresourcecap events\r\n   * being parsed happened while the resource was capped. Either look at the timestamps of\r\n   * the events or if you're interested in the current cap state use this analyzer's isCapped\r\n   *\r\n   * Also note that endresourcecap and beginresourcecap events may occur extremely close to\r\n   * one-another, sometimes on the same timestamp if there's a spend and energize event.\r\n   *\r\n   * @param {number} time Timestamp for when the resource reached cap.\r\n   */\r\n  fabricateBeginCap(time) {\r\n    if (time == null || isNaN(time)) {\r\n      throw new Error(`fabricateBeginCap called without required parameter. time: ${time}`);\r\n    }\r\n    verboseDebug && console.log(`${this.owner.formatTimestamp(time, 3)} begin cap`);\r\n    this.eventEmitter.fabricateEvent({\r\n      type: 'beginresourcecap',\r\n      timestamp: time,\r\n      sourceID: this.owner.playerId,\r\n      targetID: this.owner.playerId,\r\n      resourceType: this.constructor.resourceType.id,\r\n    });\r\n  }\r\n\r\n  /**\r\n   * Fabricates an event indicating that the tracked resource is no longer at its cap.\r\n   * May be triggered by cast or drain using resource or the cap value being increased.\r\n   * @param {number} time Timestamp for when the resource ceased to be at the cap.\r\n   */\r\n  fabricateEndCap(time) {\r\n    if (time == null || isNaN(time)) {\r\n      throw new Error(`fabricateEndCap called without required parameter. time: ${time}`);\r\n    }\r\n    verboseDebug && console.log(`${this.owner.formatTimestamp(time, 3)} end cap`);\r\n    this.eventEmitter.fabricateEvent({\r\n      type: 'endresourcecap',\r\n      timestamp: time,\r\n      sourceID: this.owner.playerId,\r\n      targetID: this.owner.playerId,\r\n      resourceType: this.constructor.resourceType.id,\r\n    });\r\n  }\r\n\r\n  // -- debug code to check accuracy of predictions against values reported by log\r\n  debugErrorSum = 0;\r\n  debugGreatestError = 0;\r\n  debugAccuracyCheckCount = 0;\r\n  debugActualVsPredicted(actual, timestamp) {\r\n    if (!debug) {\r\n      return;\r\n    }\r\n    const predicted = this.predictValue(timestamp);\r\n    const difference = predicted - actual;\r\n    const errorMagnitude = Math.abs(difference);\r\n    this.debugGreatestError = Math.max(this.debugGreatestError, errorMagnitude);\r\n    this.debugAccuracyCheckCount += 1;\r\n    this.debugErrorSum += errorMagnitude;\r\n    if (errorMagnitude > 3) {\r\n      console.log(`${this.owner.formatTimestamp(timestamp, 3)} actual: ${actual} prediction: ${predicted.toFixed(1)} (error: ${difference > 0 ? '+' : ''}${difference.toFixed(1)})`);\r\n    }\r\n  }\r\n  get debugMeanPredictionError() {\r\n    return this.debugErrorSum / this.debugAccuracyCheckCount;\r\n  }\r\n}\r\n\r\nexport default RegenResourceCapTracker;\r\n","import RESOURCE_TYPES from 'game/RESOURCE_TYPES';\r\nimport ResourceTracker from 'parser/shared/modules/resources/resourcetracker/ResourceTracker';\r\nimport SPELLS from 'common/SPELLS';\r\nimport { CastEvent, EnergizeEvent } from 'parser/core/Events';\r\nimport { AOTW_REGEN, BARBED_SHOT_FOCUS_REGEN_BUFFS_IDS, BARBED_SHOT_REGEN, BEAST_MASTERY_SPELLS_WITHOUT_WASTE, CHIM_REGEN } from 'parser/hunter/beastmastery/constants';\r\nimport { Options } from 'parser/core/Analyzer';\r\n\r\nclass FocusTracker extends ResourceTracker {\r\n  constructor(options: Options) {\r\n    super(options);\r\n    this.resource = RESOURCE_TYPES.FOCUS;\r\n  }\r\n\r\n  //Because energize events associated with certain spells don't provide a waste number, but instead a lower resourceChange number we can calculate the waste ourselves.\r\n  onEnergize(event: EnergizeEvent) {\r\n    if (event.resourceChangeType !== this.resource.id) {\r\n      return;\r\n    }\r\n    const spellId = event.ability.guid;\r\n    let waste = 0;\r\n    let gain;\r\n    if (BEAST_MASTERY_SPELLS_WITHOUT_WASTE.includes(spellId)) {\r\n      gain = event.resourceChange;\r\n      if (BARBED_SHOT_FOCUS_REGEN_BUFFS_IDS.includes(spellId)) {\r\n        waste = BARBED_SHOT_REGEN * (this.selectedCombatant.hasBuff(SPELLS.NESINGWARYS_TRAPPING_APPARATUS_ENERGIZE.id) ? 2 : 1) - gain;\r\n        gain = gain - waste;\r\n      } else if (spellId === SPELLS.ASPECT_OF_THE_WILD.id) {\r\n        waste = AOTW_REGEN * (this.selectedCombatant.hasBuff(SPELLS.NESINGWARYS_TRAPPING_APPARATUS_ENERGIZE.id) ? 2 : 1) - gain;\r\n        gain = gain - waste;\r\n      } else if (spellId === SPELLS.CHIMAERA_SHOT_FOCUS.id) {\r\n        waste = CHIM_REGEN * (this.selectedCombatant.hasBuff(SPELLS.NESINGWARYS_TRAPPING_APPARATUS_ENERGIZE.id) ? 2 : 1) - gain;\r\n        gain = gain - waste;\r\n      }\r\n    } else {\r\n      waste = event.waste;\r\n      gain = event.resourceChange - waste;\r\n    }\r\n\r\n    this._applyBuilder(spellId, gain, waste, this.getResource(event), event.timestamp);\r\n  }\r\n\r\n  //We're not interested in the fabricated events that are created prepull, as these tend to add focus costs things such as potion usage, Bestial Wrath, Trueshot or the likes whereas these don't cost focus.\r\n  shouldProcessCastEvent(event: CastEvent) {\r\n    return !event.__fabricated && Boolean(this.getResource(event));\r\n  }\r\n}\r\n\r\nexport default FocusTracker;\r\n","import Analyzer, { Options, SELECTED_PLAYER } from 'parser/core/Analyzer';\r\nimport Abilities from 'parser/core/modules/Abilities';\r\nimport SPELLS from 'common/SPELLS';\r\nimport Events, { ApplyBuffEvent, DamageEvent, RefreshBuffEvent } from 'parser/core/Events';\r\nimport Statistic from 'interface/statistics/Statistic';\r\nimport STATISTIC_ORDER from 'interface/others/STATISTIC_ORDER';\r\nimport STATISTIC_CATEGORY from 'interface/others/STATISTIC_CATEGORY';\r\nimport ItemDamageDone from 'interface/ItemDamageDone';\r\nimport React from 'react';\r\nimport BoringSpellValueText from 'interface/statistics/components/BoringSpellValueText';\r\nimport SpellUsable from 'parser/shared/modules/SpellUsable';\r\nimport { binomialCDF, expectedProcCount, plotOneVariableBinomChart } from 'parser/shared/modules/helpers/Probability';\r\nimport SpellLink from 'common/SpellLink';\r\nimport { FLAYED_SHOT_RESET_CHANCE } from 'parser/hunter/shared/constants';\r\nimport { formatNumber, formatPercentage } from 'common/format';\r\nimport SPECS from 'game/SPECS';\r\nimport COVENANTS from 'game/shadowlands/COVENANTS';\r\n\r\nclass FlayedShot extends Analyzer {\r\n  static dependencies = {\r\n    spellUsable: SpellUsable,\r\n    abilities: Abilities,\r\n  };\r\n\r\n  damage: number = 0;\r\n  damageTicks: number = 0;\r\n  totalProcs: number = 0;\r\n  resets: number = 0;\r\n  offCDProcs: number = 0;\r\n  activeKillShotSpell = this.selectedCombatant.spec === SPECS.SURVIVAL_HUNTER ? SPELLS.KILL_SHOT_SV : SPELLS.KILL_SHOT_MM_BM;\r\n\r\n  protected spellUsable!: SpellUsable;\r\n  protected abilities!: Abilities;\r\n\r\n  constructor(options: Options) {\r\n    super(options);\r\n\r\n    this.active = this.selectedCombatant.hasCovenant(COVENANTS.VENTHYR.id);\r\n\r\n    if (!this.active) {\r\n      return;\r\n    }\r\n\r\n    (options.abilities as Abilities).add({\r\n      spell: SPELLS.FLAYED_SHOT,\r\n      category: Abilities.SPELL_CATEGORIES.ROTATIONAL,\r\n      cooldown: 30,\r\n      gcd: {\r\n        base: 1500,\r\n      },\r\n      castEfficiency: {\r\n        suggestion: true,\r\n        recommendedEfficiency: 0.9,\r\n      },\r\n    });\r\n\r\n    this.addEventListener(Events.damage.by(SELECTED_PLAYER).spell(SPELLS.FLAYED_SHOT), this.onDamage);\r\n    this.addEventListener(Events.applybuff.by(SELECTED_PLAYER).spell(SPELLS.FLAYERS_MARK), this.onProc);\r\n    this.addEventListener(Events.refreshbuff.by(SELECTED_PLAYER).spell(SPELLS.FLAYERS_MARK), this.onProc);\r\n  }\r\n\r\n  get expectedProcs() {\r\n    return expectedProcCount(FLAYED_SHOT_RESET_CHANCE, this.damageTicks);\r\n  }\r\n\r\n  onDamage(event: DamageEvent) {\r\n    this.damage += event.amount + (event.absorbed || 0);\r\n    this.damageTicks += 1;\r\n  }\r\n\r\n  onProc(event: ApplyBuffEvent | RefreshBuffEvent) {\r\n    this.totalProcs += 1;\r\n    if (this.spellUsable.isOnCooldown(this.activeKillShotSpell.id)) {\r\n      this.spellUsable.endCooldown(this.activeKillShotSpell.id, false, event.timestamp);\r\n      this.resets += 1;\r\n    } else {\r\n      this.offCDProcs += 1;\r\n    }\r\n  }\r\n\r\n  statistic() {\r\n    return (\r\n      <Statistic\r\n        position={STATISTIC_ORDER.CORE()}\r\n        size=\"flexible\"\r\n        category={STATISTIC_CATEGORY.COVENANTS}\r\n        tooltip={(\r\n          <>\r\n            You had {this.offCDProcs} {this.offCDProcs === 1 ? `proc` : `procs`} with Kill Shot already off cooldown. <br />\r\n            You had {formatPercentage(this.totalProcs / this.expectedProcs, 1)}% procs of what you could expect to get over the encounter. <br />\r\n            You had a total of {this.totalProcs} procs, and your expected amount of procs was {formatNumber(this.expectedProcs)}. <br />\r\n            <ul>\r\n              <li>You have a ≈{formatPercentage(binomialCDF(this.totalProcs, this.damageTicks, FLAYED_SHOT_RESET_CHANCE))}% chance of getting this amount of procs or fewer in the future with this amount of auto attacks.</li>\r\n            </ul>\r\n          </>\r\n        )}\r\n        dropdown={(\r\n          <>\r\n            <div style={{ padding: '8px' }}>\r\n              {plotOneVariableBinomChart(this.totalProcs, this.damageTicks, FLAYED_SHOT_RESET_CHANCE)}\r\n              <p>Likelihood of getting <em>exactly</em> as many procs as estimated on a fight given your number of <SpellLink id={SPELLS.FLAYED_SHOT.id} /> ticks.</p>\r\n            </div>\r\n          </>\r\n        )}\r\n      >\r\n        <BoringSpellValueText spell={SPELLS.FLAYED_SHOT}>\r\n          <>\r\n            {this.resets} / {this.totalProcs} ({formatPercentage(this.resets / (this.totalProcs))}%) <small>Kill Shot resets</small>\r\n            <br />\r\n            <ItemDamageDone amount={this.damage} />\r\n          </>\r\n        </BoringSpellValueText>\r\n      </Statistic>\r\n    );\r\n  }\r\n}\r\n\r\nexport default FlayedShot;\r\n","import React from 'react';\r\n\r\nimport Analyzer from 'parser/core/Analyzer';\r\nimport { ThresholdStyle } from 'parser/core/ParseResults';\r\nimport Panel from 'interface/others/Panel';\r\nimport { STATISTIC_ORDER } from 'interface/others/StatisticBox';\r\nimport Statistic from 'interface/statistics/Statistic';\r\nimport { formatPercentage } from 'common/format';\r\nimport ResourceBreakdown from 'parser/shared/modules/resources/resourcetracker/ResourceBreakdown';\r\nimport BoringResourceValue from 'interface/statistics/components/BoringResourceValue';\r\nimport RESOURCE_TYPES from 'game/RESOURCE_TYPES';\r\nimport { RESOURCES_HUNTER_AVERAGE_THRESHOLD, RESOURCES_HUNTER_MAJOR_THRESHOLD, RESOURCES_HUNTER_MINOR_THRESHOLD } from 'parser/hunter/shared/constants';\r\n\r\nimport FocusTracker from './FocusTracker';\r\n\r\nclass FocusDetails extends Analyzer {\r\n  static dependencies = {\r\n    focusTracker: FocusTracker,\r\n  };\r\n\r\n  protected focusTracker!: FocusTracker;\r\n\r\n  get wasted() {\r\n    return this.focusTracker.wasted || 0;\r\n  }\r\n\r\n  get total() {\r\n    return this.focusTracker.wasted + this.focusTracker.generated || 0;\r\n  }\r\n\r\n  get wastedPercent() {\r\n    return this.wasted / this.total || 0;\r\n  }\r\n\r\n  get focusGeneratorWasteThresholds() {\r\n    return {\r\n      actual: 1 - this.wastedPercent,\r\n      isLessThan: {\r\n        minor: 1 - RESOURCES_HUNTER_MINOR_THRESHOLD,\r\n        average: 1 - RESOURCES_HUNTER_AVERAGE_THRESHOLD,\r\n        major: 1 - RESOURCES_HUNTER_MAJOR_THRESHOLD,\r\n      },\r\n      style: ThresholdStyle.PERCENTAGE,\r\n    };\r\n  }\r\n\r\n  statistic() {\r\n    return (\r\n      <Statistic\r\n        position={STATISTIC_ORDER.CORE(11)}\r\n        size=\"flexible\"\r\n        tooltip={`You wasted ${this.wasted} out of ${this.total} Focus from generators.`}\r\n      >\r\n        <BoringResourceValue\r\n          resource={RESOURCE_TYPES.FOCUS}\r\n          value={`${formatPercentage(this.wastedPercent)} %`}\r\n          label=\"Wasted generator Focus\"\r\n        />\r\n      </Statistic>\r\n    );\r\n  }\r\n\r\n  tab() {\r\n    return {\r\n      title: 'Focus',\r\n      url: 'focus',\r\n      render: () => (\r\n        <Panel>\r\n          <ResourceBreakdown\r\n            tracker={this.focusTracker}\r\n            showSpenders\r\n          />\r\n        </Panel>\r\n      ),\r\n    };\r\n  }\r\n}\r\n\r\nexport default FocusDetails;\r\n","import React from 'react';\r\n\r\nimport RESOURCE_TYPES from 'game/RESOURCE_TYPES';\r\nimport { formatPercentage, formatThousands } from 'common/format';\r\nimport { STATISTIC_ORDER } from 'interface/others/StatisticBox';\r\nimport Tooltip from 'common/Tooltip';\r\nimport RegenResourceCapTracker from 'parser/shared/modules/resources/resourcetracker/RegenResourceCapTracker';\r\nimport StatisticBar from 'interface/statistics/StatisticBar';\r\n\r\nimport { AutoSizer } from 'react-virtualized';\r\nimport FlushLineChart from 'interface/others/FlushLineChart';\r\nimport Events, { CastEvent, DamageEvent, EnergizeEvent } from 'parser/core/Events';\r\nimport { ThresholdStyle, When } from 'parser/core/ParseResults';\r\nimport { HUNTER_BASE_FOCUS_MAX, HUNTER_BASE_FOCUS_REGEN } from 'parser/hunter/shared/constants';\r\nimport { Options, SELECTED_PLAYER } from 'parser/core/Analyzer';\r\nimport { i18n } from '@lingui/core';\r\nimport { t } from '@lingui/macro';\r\n\r\n/**\r\n * Sets up RegenResourceCapTracker to accurately track the regenerating focus of hunters.\r\n * Taking into account the effect of buffs, talents, and items on the focus cost of abilities, the maximum focus amount, and the regeneration rate.\r\n */\r\nclass FocusCapTracker extends RegenResourceCapTracker {\r\n  static dependencies = {\r\n    ...RegenResourceCapTracker.dependencies,\r\n  };\r\n\r\n  static resourceType = RESOURCE_TYPES.FOCUS;\r\n  static baseRegenRate = HUNTER_BASE_FOCUS_REGEN;\r\n  static isRegenHasted = true;\r\n  bySecond: { [key: number]: number } = {};\r\n\r\n  constructor(options: Options) {\r\n    super(options);\r\n    this.addEventListener(Events.energize.by(SELECTED_PLAYER), this.onEnergizeByPlayer);\r\n  }\r\n\r\n  get wastedPercent() {\r\n    return (this.missedRegen / this.naturalRegen) || 0;\r\n  }\r\n\r\n  get focusNaturalRegenWasteThresholds() {\r\n    return {\r\n      actual: 1 - this.wastedPercent,\r\n      isLessThan: {\r\n        minor: 0.9,\r\n        average: 0.85,\r\n        major: 0.8,\r\n      },\r\n      style: ThresholdStyle.PERCENTAGE,\r\n    };\r\n  }\r\n\r\n  currentMaxResource() {\r\n    return HUNTER_BASE_FOCUS_MAX;\r\n  }\r\n\r\n  onEnergizeByPlayer(event: EnergizeEvent) {\r\n    const secondsIntoFight = Math.floor((event.timestamp - this.owner.fight.start_time) / 1000);\r\n    this.bySecond[secondsIntoFight] = (this.bySecond[secondsIntoFight] || this.current);\r\n  }\r\n\r\n  onCast(event: CastEvent) {\r\n    super.onCast(event);\r\n    const secondsIntoFight = Math.floor((event.timestamp - this.owner.fight.start_time) / 1000);\r\n    this.bySecond[secondsIntoFight] = (this.bySecond[secondsIntoFight] || this.current);\r\n  }\r\n\r\n  onDamage(event: DamageEvent) {\r\n    super.onDamage(event);\r\n    const secondsIntoFight = Math.floor((event.timestamp - this.owner.fight.start_time) / 1000);\r\n    this.bySecond[secondsIntoFight] = (this.bySecond[secondsIntoFight] || this.current);\r\n  }\r\n\r\n  suggestions(when: When) {\r\n    when(this.focusNaturalRegenWasteThresholds).addSuggestion((suggest, actual, recommended) => suggest(<>You're allowing your focus to reach its cap. While at its maximum value you miss out on the focus that would have regenerated. Although it can be beneficial to let focus pool ready to be used at the right time, try to spend some before it reaches the cap.</>)\r\n      .icon('ability_hunter_focusfire')\r\n      .actual(i18n._(t('hunter.marksmanship.suggestions.focusCapTracker.focusLost')`${formatPercentage(1 - actual)}% regenerated focus lost due to being capped.`))\r\n      .recommended(`<${formatPercentage(recommended, 0)}% is recommended.`));\r\n  }\r\n\r\n  statistic() {\r\n    const data = Object.entries(this.bySecond).map(([sec, val]) => ({ 'time': sec, 'val': val }));\r\n    return (\r\n      <StatisticBar\r\n        position={STATISTIC_ORDER.CORE(1)}\r\n        wide\r\n        style={{ marginBottom: 20, overflow: 'hidden' }} // since this is in a group, reducing margin should be fine\r\n        large={false}\r\n        ultrawide={false}\r\n      >\r\n        <Tooltip content={<>Natural Focus regen lost: <strong>{formatThousands(this.missedRegen)}</strong> <br /> That is <strong>{formatPercentage(this.wastedPercent)}%</strong> of natural regenerated focus over the course of the encounter.</>}>\r\n          <div className=\"flex\">\r\n            <div className=\"flex-sub icon\">\r\n              <img\r\n                src=\"/img/bullseye.png\"\r\n                alt=\"Focus\"\r\n              />\r\n            </div>\r\n            <div\r\n              className=\"flex-sub value\"\r\n              style={{ width: 100 }}\r\n            >\r\n              Focus\r\n            </div>\r\n            <div className=\"flex-main chart\">\r\n              {this.missedRegen > 0 && (\r\n                <AutoSizer disableWidth>\r\n                  {({ height }) => (\r\n                    <FlushLineChart data={data} duration={this.owner.fightDuration / 1000} height={height} />\r\n                  )}\r\n                </AutoSizer>\r\n              )}\r\n            </div>\r\n          </div>\r\n        </Tooltip>\r\n      </StatisticBar>\r\n    );\r\n  }\r\n}\r\n\r\nexport default FocusCapTracker;\r\n","import CoreDeathTracker from 'parser/shared/modules/DeathTracker';\r\nimport { TIME_SPENT_DEAD_THRESHOLD } from 'parser/hunter/shared/constants';\r\n\r\n/**\r\n * Due to combatlog restrictions it is not possible to know whether the hunter cast Feign Death or the hunter actually died.\r\n * For this module we assume any single death lasting less than 0.2% of an encounter (1.2 seconds on a 10 minute fight) was due to Feign Death, and thus we remove it as it is improbable anyone is that fast to ress anyone.\r\n */\r\nclass DeathTracker extends CoreDeathTracker {\r\n  static dependencies = {\r\n    ...CoreDeathTracker.dependencies,\r\n  };\r\n\r\n  deathPercentageOfEncounter(deathTimestamp: number, ressTimestamp: number) {\r\n    return (ressTimestamp - deathTimestamp) / this.owner.fightDuration;\r\n  }\r\n\r\n  resurrect(event: any) {\r\n    this.lastResurrectionTimestamp = this.owner.currentTimestamp;\r\n    const percentSpentDead = this.deathPercentageOfEncounter(this.lastDeathTimestamp, this.lastResurrectionTimestamp);\r\n    if (percentSpentDead > TIME_SPENT_DEAD_THRESHOLD) {\r\n      super.resurrect(event);\r\n    } else {\r\n      this.isAlive = true;\r\n      this.deaths.pop();\r\n    }\r\n  }\r\n}\r\n\r\nexport default DeathTracker;\r\n","import React from 'react';\r\n\r\nimport SPELLS from 'common/SPELLS';\r\nimport Analyzer, { Options, SELECTED_PLAYER } from 'parser/core/Analyzer';\r\nimport SpellUsable from 'parser/shared/modules/SpellUsable';\r\nimport { formatNumber } from 'common/format';\r\nimport SPECS from 'game/SPECS';\r\nimport Statistic from 'interface/statistics/Statistic';\r\nimport STATISTIC_CATEGORY from 'interface/others/STATISTIC_CATEGORY';\r\nimport STATISTIC_ORDER from 'interface/others/STATISTIC_ORDER';\r\nimport BoringSpellValueText from 'interface/statistics/components/BoringSpellValueText';\r\nimport Events, { CastEvent } from 'parser/core/Events';\r\nimport RESOURCE_TYPES from 'game/RESOURCE_TYPES';\r\nimport { BM_CDR_PER_FOCUS, MM_SV_CDR_PER_FOCUS } from 'parser/hunter/shared/constants';\r\n\r\n/**\r\n * Every 20 (MM/SV) or 30 (BM) focus you spend reduces the remaining cooldown of Exhilaration by 1 sec.\r\n *\r\n * Example log:\r\n * https://www.warcraftlogs.com/reports/GWwtNLVQD8adn6q9#fight=5&type=summary&source=18\r\n */\r\n\r\nclass NaturalMending extends Analyzer {\r\n  static dependencies = {\r\n    spellUsable: SpellUsable,\r\n  };\r\n  cdrPerFocus = MM_SV_CDR_PER_FOCUS;\r\n  effectiveExhilReductionMs = 0;\r\n  wastedExhilReductionMs = 0;\r\n  lastFocusCost = 0;\r\n  protected spellUsable!: SpellUsable;\r\n\r\n  constructor(options: Options) {\r\n    super(options);\r\n    this.active = this.selectedCombatant.hasTalent(SPELLS.NATURAL_MENDING_TALENT.id);\r\n    if (this.active && this.selectedCombatant.spec === SPECS.BEAST_MASTERY_HUNTER) {\r\n      this.cdrPerFocus = BM_CDR_PER_FOCUS;\r\n    }\r\n    this.addEventListener(Events.cast.by(SELECTED_PLAYER), this.onCast);\r\n  }\r\n\r\n  onCast(event: CastEvent) {\r\n    const resource = event.classResources?.find(resource => resource.type === RESOURCE_TYPES.FOCUS.id);\r\n    if (!resource) {\r\n      return;\r\n    }\r\n\r\n    this.lastFocusCost = resource.cost || 0;\r\n    const cooldownReductionMS = this.cdrPerFocus * this.lastFocusCost;\r\n    if (!this.spellUsable.isOnCooldown(SPELLS.EXHILARATION.id)) {\r\n      this.wastedExhilReductionMs += cooldownReductionMS;\r\n      return;\r\n    }\r\n    if (this.spellUsable.cooldownRemaining(SPELLS.EXHILARATION.id) < cooldownReductionMS) {\r\n      const effectiveReductionMs = this.spellUsable.reduceCooldown(SPELLS.EXHILARATION.id, cooldownReductionMS);\r\n      this.effectiveExhilReductionMs += effectiveReductionMs;\r\n      this.wastedExhilReductionMs += (cooldownReductionMS - effectiveReductionMs);\r\n      return;\r\n    }\r\n    this.effectiveExhilReductionMs += this.spellUsable.reduceCooldown(SPELLS.EXHILARATION.id, cooldownReductionMS);\r\n  }\r\n\r\n  statistic() {\r\n    return (\r\n      <Statistic\r\n        position={STATISTIC_ORDER.OPTIONAL(14)}\r\n        size=\"flexible\"\r\n        category={STATISTIC_CATEGORY.TALENTS}\r\n      >\r\n        <BoringSpellValueText spell={SPELLS.NATURAL_MENDING_TALENT}>\r\n          <>\r\n            {formatNumber(this.effectiveExhilReductionMs / 1000)}s/{formatNumber((this.wastedExhilReductionMs + this.effectiveExhilReductionMs) / 1000)}s <small> cooldown reduction</small>\r\n          </>\r\n        </BoringSpellValueText>\r\n      </Statistic>\r\n    );\r\n  }\r\n}\r\n\r\nexport default NaturalMending;\r\n","import React from 'react';\r\nimport Analyzer, { Options } from 'parser/core/Analyzer';\r\nimport SPELLS from 'common/SPELLS';\r\nimport { formatPercentage } from 'common/format';\r\nimport Statistic from 'interface/statistics/Statistic';\r\nimport STATISTIC_CATEGORY from 'interface/others/STATISTIC_CATEGORY';\r\nimport STATISTIC_ORDER from 'interface/others/STATISTIC_ORDER';\r\nimport BoringSpellValueText from 'interface/statistics/components/BoringSpellValueText';\r\nimport UptimeIcon from 'interface/icons/Uptime';\r\n\r\n/**\r\n * Trailblazer increases your movement speed by 30% whenever you have not\r\n * attacked for 3 seconds.\r\n *\r\n * Example log:\r\n * https://www.warcraftlogs.com/reports/1YZkWvbFGNgTA7L4#fight=3&type=summary&source=97\r\n */\r\nclass Trailblazer extends Analyzer {\r\n\r\n  constructor(options: Options) {\r\n    super(options);\r\n    this.active = this.selectedCombatant.hasTalent(SPELLS.TRAILBLAZER_TALENT.id);\r\n  }\r\n\r\n  get percentUptime() {\r\n    return this.selectedCombatant.getBuffUptime(SPELLS.TRAILBLAZER_BUFF.id) / this.owner.fightDuration;\r\n  }\r\n\r\n  statistic() {\r\n    return (\r\n      <Statistic\r\n        position={STATISTIC_ORDER.OPTIONAL(14)}\r\n        size=\"flexible\"\r\n        category={STATISTIC_CATEGORY.TALENTS}\r\n      >\r\n        <BoringSpellValueText spell={SPELLS.TRAILBLAZER_TALENT}>\r\n          <>\r\n            <UptimeIcon /> {formatPercentage(this.percentUptime)}% <small>uptime</small>\r\n          </>\r\n        </BoringSpellValueText>\r\n      </Statistic>\r\n    );\r\n  }\r\n}\r\n\r\nexport default Trailblazer;\r\n","import React from 'react';\r\n\r\nimport SPELLS from 'common/SPELLS';\r\nimport Analyzer, { Options, SELECTED_PLAYER } from 'parser/core/Analyzer';\r\n\r\nimport SpellUsable from 'parser/shared/modules/SpellUsable';\r\nimport ItemDamageDone from 'interface/ItemDamageDone';\r\nimport Abilities from 'parser/core/modules/Abilities';\r\nimport Statistic from 'interface/statistics/Statistic';\r\nimport STATISTIC_CATEGORY from 'interface/others/STATISTIC_CATEGORY';\r\nimport STATISTIC_ORDER from 'interface/others/STATISTIC_ORDER';\r\nimport BoringSpellValueText from 'interface/statistics/components/BoringSpellValueText';\r\nimport Events, { AnyEvent, DamageEvent } from 'parser/core/Events';\r\nimport { AMOC_BASE_DURATION, AMOC_TICK_RATE, MS_BUFFER } from 'parser/hunter/shared/constants';\r\n\r\n/**\r\n * Summons a flock of crows to attack your target over the next 15 sec. If the target dies while under attack, A Murder of Crows' cooldown is reset.\r\n *\r\n * Example log:\r\n * https://www.warcraftlogs.com/reports/GFM9qZQy63zbxh7L#fight=49&type=damage-done&source=299&ability=131900\r\n */\r\n\r\nconst debug = false;\r\n\r\nclass AMurderOfCrows extends Analyzer {\r\n\r\n  static dependencies = {\r\n    spellUsable: SpellUsable,\r\n    abilities: Abilities,\r\n  };\r\n  damage = 0;\r\n  casts = 0;\r\n  applicationTimestamp: number = 0;\r\n  lastDamageTick: number = 0;\r\n  crowsEndingTimestamp: number = 0;\r\n  maxCasts = 0;\r\n  resets = 0;\r\n  protected spellUsable!: SpellUsable;\r\n  protected abilities!: Abilities;\r\n\r\n  constructor(options: Options) {\r\n    super(options);\r\n    this.active = this.selectedCombatant.hasTalent(SPELLS.A_MURDER_OF_CROWS_TALENT.id);\r\n    if (this.active) {\r\n      (options.abilities as Abilities).add({\r\n        spell: SPELLS.A_MURDER_OF_CROWS_TALENT,\r\n        category: Abilities.SPELL_CATEGORIES.ROTATIONAL,\r\n        cooldown: 60,\r\n        gcd: {\r\n          base: 1500,\r\n        },\r\n        castEfficiency: {\r\n          suggestion: true,\r\n          recommendedEfficiency: 0.85,\r\n          maxCasts: () => this.maxCasts,\r\n        },\r\n      });\r\n    }\r\n    this.addEventListener(Events.any, this.checkForReset);\r\n    this.addEventListener(Events.cast.by(SELECTED_PLAYER).spell(SPELLS.A_MURDER_OF_CROWS_TALENT), this.onCast);\r\n    this.addEventListener(Events.damage.by(SELECTED_PLAYER).spell(SPELLS.A_MURDER_OF_CROWS_DEBUFF), this.onDamage);\r\n    this.addEventListener(Events.fightend, this.adjustMaxCasts);\r\n  }\r\n\r\n  checkForReset(event: AnyEvent) {\r\n    // Checks if we've had atleast 1 damage tick of the currently applied crows, and checks that crows is in fact on cooldown.\r\n    if (this.lastDamageTick && this.spellUsable.isOnCooldown(SPELLS.A_MURDER_OF_CROWS_TALENT.id)\r\n      // Checks whether the current damage event happened while the time passed since crows application is less than the crows duration\r\n      && this.applicationTimestamp && event.timestamp < this.crowsEndingTimestamp\r\n      // Checks to see if more than 1 second has passed since last tick\r\n      && event.timestamp > this.lastDamageTick + AMOC_TICK_RATE + MS_BUFFER) {\r\n      // If more than 1 second has passed and less than the duration has elapsed, we can assume that crows has been reset, and thus we reset the CD.\r\n      this.spellUsable.endCooldown(SPELLS.A_MURDER_OF_CROWS_TALENT.id, false, event.timestamp);\r\n      this.maxCasts += 1;\r\n      this.resets += 1;\r\n      debug && this.log('Crows was reset');\r\n    }\r\n  }\r\n\r\n  onCast() {\r\n    this.casts += 1;\r\n    this.applicationTimestamp = 0;\r\n    this.lastDamageTick = 0;\r\n  }\r\n\r\n  onDamage(event: DamageEvent) {\r\n    if (this.casts === 0) {\r\n      this.casts += 1;\r\n      this.spellUsable.beginCooldown(SPELLS.A_MURDER_OF_CROWS_TALENT.id, event);\r\n      this.applicationTimestamp = this.owner.fight.start_time;\r\n    }\r\n    //This accounts for the travel time of crows, since the first damage marks the time where the crows debuff is applied\r\n    if (this.lastDamageTick === 0 && this.applicationTimestamp === 0) {\r\n      this.applicationTimestamp = event.timestamp;\r\n      this.crowsEndingTimestamp = this.applicationTimestamp + AMOC_BASE_DURATION;\r\n    }\r\n    this.lastDamageTick = event.timestamp;\r\n    this.damage += event.amount + (event.absorbed || 0);\r\n  }\r\n\r\n  adjustMaxCasts() {\r\n    this.maxCasts += Math.ceil(this.owner.fightDuration / 60000);\r\n  }\r\n\r\n  statistic() {\r\n    return (\r\n      <Statistic\r\n        position={STATISTIC_ORDER.OPTIONAL(13)}\r\n        size=\"flexible\"\r\n        category={STATISTIC_CATEGORY.TALENTS}\r\n      >\r\n        <BoringSpellValueText spell={SPELLS.A_MURDER_OF_CROWS_TALENT}>\r\n          <>\r\n            <ItemDamageDone amount={this.damage} /><br />\r\n            {this.resets} <small>resets</small>\r\n          </>\r\n        </BoringSpellValueText>\r\n      </Statistic>\r\n    );\r\n  }\r\n}\r\n\r\nexport default AMurderOfCrows;\r\n","import Analyzer, { Options, SELECTED_PLAYER } from 'parser/core/Analyzer';\r\nimport SPELLS from 'common/SPELLS';\r\nimport React from 'react';\r\nimport SPECS from 'game/SPECS';\r\nimport { formatNumber } from 'common/format';\r\nimport Statistic from 'interface/statistics/Statistic';\r\nimport STATISTIC_CATEGORY from 'interface/others/STATISTIC_CATEGORY';\r\nimport STATISTIC_ORDER from 'interface/others/STATISTIC_ORDER';\r\nimport BoringSpellValueText from 'interface/statistics/components/BoringSpellValueText';\r\nimport Events, { CastEvent } from 'parser/core/Events';\r\nimport { BASELINE_TURTLE_CHEETAH_CD, BORN_TO_BE_WILD_AFFECTED_SPELLS } from 'parser/hunter/shared/constants';\r\nimport { BASELINE_AOTE_CD } from 'parser/hunter/survival/constants';\r\n\r\n/**\r\n * Reduces the cooldowns of Aspect of the Cheetah and Aspect of the Turtle by 20%.\r\n * For Survival it also reduces the cooldown of Aspect of the Eagle.\r\n *\r\n * Example log:\r\n * https://www.warcraftlogs.com/reports/1YZkWvbFGNgTA7L4#fight=3&type=summary&source=97\r\n */\r\n\r\nconst debug = false;\r\n\r\nclass BornToBeWild extends Analyzer {\r\n\r\n  _spells = {\r\n    [SPELLS.ASPECT_OF_THE_CHEETAH.id]: {\r\n      effectiveCDR: 0,\r\n      lastCast: 0,\r\n      baseCD: BASELINE_TURTLE_CHEETAH_CD,\r\n    },\r\n    [SPELLS.ASPECT_OF_THE_TURTLE.id]: {\r\n      effectiveCDR: 0,\r\n      lastCast: 0,\r\n      baseCD: BASELINE_TURTLE_CHEETAH_CD,\r\n    },\r\n    [SPELLS.ASPECT_OF_THE_EAGLE.id]: {\r\n      effectiveCDR: 0,\r\n      lastCast: 0,\r\n      baseCD: BASELINE_AOTE_CD,\r\n    },\r\n  };\r\n\r\n  hasEagle = false;\r\n\r\n  constructor(options: Options) {\r\n    super(options);\r\n    this.active = this.selectedCombatant.hasTalent(SPELLS.BORN_TO_BE_WILD_TALENT.id);\r\n    this.hasEagle = this.selectedCombatant.spec === SPECS.SURVIVAL_HUNTER;\r\n    this.addEventListener(Events.cast.by(SELECTED_PLAYER).spell(BORN_TO_BE_WILD_AFFECTED_SPELLS), this.onCast);\r\n  }\r\n\r\n  get effectiveTotalCDR() {\r\n    return Object.values(this._spells)\r\n      .map(spell => spell.effectiveCDR)\r\n      .reduce((total, current) => total + current, 0);\r\n  }\r\n\r\n  onCast(event: CastEvent) {\r\n    const spellId = event.ability.guid;\r\n    const spell = this._spells[spellId];\r\n    debug && console.log(event.timestamp, `${SPELLS[spellId].name} cast - time since last cast: `, spell.lastCast !== 0 ? (event.timestamp - spell.lastCast) / 1000 : 'no previous cast');\r\n    if (spell.lastCast && event.timestamp < spell.lastCast + spell.baseCD) {\r\n      spell.effectiveCDR += spell.baseCD - (event.timestamp - spell.lastCast);\r\n    }\r\n    spell.lastCast = event.timestamp;\r\n  }\r\n\r\n  statistic() {\r\n    return (\r\n      <Statistic\r\n        position={STATISTIC_ORDER.OPTIONAL(14)}\r\n        size=\"flexible\"\r\n        category={STATISTIC_CATEGORY.TALENTS}\r\n        tooltip={(\r\n          <>\r\n            Effective CDR constitutes the time that was left of the original CD (before reduction from Born To Be Wild) when you cast it again as that is the effective cooldown reduction it provided for you.\r\n            <ul>\r\n              {this.hasEagle &&\r\n              <li>Aspect of the Eagle: {formatNumber(this._spells[SPELLS.ASPECT_OF_THE_EAGLE.id].effectiveCDR / 1000)}s</li>}\r\n              <li>Aspect of the Cheetah: {formatNumber(this._spells[SPELLS.ASPECT_OF_THE_CHEETAH.id].effectiveCDR / 1000)}s</li>\r\n              <li>Aspect of the Turtle: {formatNumber(this._spells[SPELLS.ASPECT_OF_THE_TURTLE.id].effectiveCDR / 1000)}s</li>\r\n            </ul>\r\n          </>\r\n        )}\r\n      >\r\n        <BoringSpellValueText spell={SPELLS.BORN_TO_BE_WILD_TALENT}>\r\n          <>\r\n            {formatNumber(this.effectiveTotalCDR / 1000)}s <small>total effective CDR</small>\r\n          </>\r\n        </BoringSpellValueText>\r\n      </Statistic>\r\n    );\r\n  }\r\n}\r\n\r\nexport default BornToBeWild;\r\n","import Analyzer, { Options, SELECTED_PLAYER } from 'parser/core/Analyzer';\r\nimport SPELLS from 'common/SPELLS';\r\nimport React from 'react';\r\nimport Statistic from 'interface/statistics/Statistic';\r\nimport STATISTIC_CATEGORY from 'interface/others/STATISTIC_CATEGORY';\r\nimport STATISTIC_ORDER from 'interface/others/STATISTIC_ORDER';\r\nimport BoringSpellValueText from 'interface/statistics/components/BoringSpellValueText';\r\nimport Events from 'parser/core/Events';\r\nimport SPECS from 'game/SPECS';\r\nimport Abilities from 'parser/core/modules/Abilities';\r\n\r\n/**\r\n * Fires a magical projectile, tethering the enemy and any other enemies within\r\n * 5 yards for 10 sec, rooting them in place for 5 sec if they move more than 5\r\n * yards from the arrow. Example log:\r\n * https://www.warcraftlogs.com/reports/qZRdFv9Apg74wmMV#fight=3&type=damage-done\r\n */\r\n\r\nclass BindingShot extends Analyzer {\r\n\r\n  static dependencies = {\r\n    abilities: Abilities,\r\n  };\r\n  _roots = 0;\r\n  _applications = 0;\r\n  _casts = 0;\r\n  category: STATISTIC_CATEGORY;\r\n  protected abilities!: Abilities;\r\n\r\n  constructor(options: Options) {\r\n    super(options);\r\n    this.active = this.selectedCombatant.hasTalent(SPELLS.BINDING_SHOT_TALENT.id) || this.selectedCombatant.spec === SPECS.MARKSMANSHIP_HUNTER;\r\n    this.category = this.selectedCombatant.spec === SPECS.MARKSMANSHIP_HUNTER ? STATISTIC_CATEGORY.GENERAL : STATISTIC_CATEGORY.TALENTS;\r\n    this.addEventListener(Events.applydebuff.by(SELECTED_PLAYER).spell(SPELLS.BINDING_SHOT_ROOT), this.onRoot);\r\n    this.addEventListener(Events.applydebuff.by(SELECTED_PLAYER).spell(SPELLS.BINDING_SHOT_TETHER), this.onTether);\r\n    this.addEventListener(Events.cast.by(SELECTED_PLAYER).spell(SPELLS.BINDING_SHOT_TALENT), this.onCast);\r\n    if (this.active) {\r\n      (options.abilities as Abilities).add({\r\n        spell: SPELLS.BINDING_SHOT_TALENT,\r\n        category: Abilities.SPELL_CATEGORIES.UTILITY,\r\n        cooldown: 45,\r\n        gcd: {\r\n          base: 1500,\r\n        },\r\n      });\r\n    }\r\n  }\r\n\r\n  onTether() {\r\n    this._applications += 1;\r\n  }\r\n\r\n  onRoot() {\r\n    this._roots += 1;\r\n  }\r\n\r\n  onCast() {\r\n    this._casts += 1;\r\n  }\r\n\r\n  statistic() {\r\n    if (this._casts > 0) {\r\n      return (\r\n        <Statistic\r\n          position={STATISTIC_ORDER.OPTIONAL(14)}\r\n          size=\"flexible\"\r\n          category={this.category}\r\n        >\r\n          <BoringSpellValueText spell={SPELLS.BINDING_SHOT_TALENT}>\r\n            <>\r\n              {this._roots} <small>roots</small> / {this._applications} <small>possible</small> <br />\r\n              {this._casts} <small>casts</small>\r\n            </>\r\n          </BoringSpellValueText>\r\n        </Statistic>\r\n      );\r\n    } else {\r\n      return null;\r\n    }\r\n  }\r\n}\r\n\r\nexport default BindingShot;\r\n","import React from 'react';\r\n\r\nimport { Options, SELECTED_PLAYER } from 'parser/core/Analyzer';\r\nimport Abilities from 'parser/core/modules/Abilities';\r\nimport SPELLS from 'common/SPELLS';\r\nimport STATISTIC_ORDER from 'interface/others/STATISTIC_ORDER';\r\nimport Events from 'parser/core/Events';\r\nimport { KILL_SHOT_EXECUTE_RANGE } from 'parser/hunter/shared/constants';\r\nimport Statistic from 'interface/statistics/Statistic';\r\nimport STATISTIC_CATEGORY from 'interface/others/STATISTIC_CATEGORY';\r\nimport BoringSpellValueText from 'interface/statistics/components/BoringSpellValueText';\r\nimport ItemDamageDone from 'interface/ItemDamageDone';\r\nimport SPECS from 'game/SPECS';\r\nimport ExecuteHelper from 'parser/shared/ExecuteHelper';\r\nimport FlayedShot from 'parser/hunter/shared/modules/spells/covenants/venthyr/FlayedShot';\r\n\r\nclass KillShot extends ExecuteHelper {\r\n  static executeSources = SELECTED_PLAYER;\r\n  static lowerThreshold = KILL_SHOT_EXECUTE_RANGE;\r\n  static executeOutsideRangeEnablers = [SPELLS.FLAYERS_MARK];\r\n  static modifiesDamage = false;\r\n\r\n  static dependencies = {\r\n    ...ExecuteHelper.dependencies,\r\n    abilities: Abilities,\r\n    flayedShot: FlayedShot,\r\n  };\r\n\r\n  maxCasts: number = 0;\r\n  activeKillShotSpell = this.selectedCombatant.spec === SPECS.SURVIVAL_HUNTER ? SPELLS.KILL_SHOT_SV : SPELLS.KILL_SHOT_MM_BM;\r\n\r\n  protected abilities!: Abilities;\r\n  protected flayedShot!: FlayedShot;\r\n\r\n  constructor(options: Options) {\r\n    super(options);\r\n\r\n    this.addEventListener(Events.fightend, this.adjustMaxCasts);\r\n    const ctor = this.constructor as typeof ExecuteHelper;\r\n    ctor.executeSpells.push(this.activeKillShotSpell);\r\n\r\n    (options.abilities as Abilities).add({\r\n      spell: this.activeKillShotSpell,\r\n      category: Abilities.SPELL_CATEGORIES.ROTATIONAL,\r\n      charges: this.selectedCombatant.hasTalent(SPELLS.DEAD_EYE_TALENT.id) ? 2 : 1,\r\n      cooldown: 10,\r\n      gcd: {\r\n        base: 1500,\r\n      },\r\n      castEfficiency: {\r\n        suggestion: true,\r\n        recommendedEfficiency: 0.85,\r\n        maxCasts: () => this.maxCasts,\r\n      },\r\n    });\r\n  }\r\n\r\n  adjustMaxCasts() {\r\n    this.maxCasts += Math.ceil(this.totalExecuteDuration / 10000);\r\n    if (this.selectedCombatant.hasTalent(SPELLS.DEAD_EYE_TALENT.id)) {\r\n      this.maxCasts += 1;\r\n    }\r\n    this.maxCasts += this.flayedShot.totalProcs;\r\n  }\r\n\r\n  statistic() {\r\n    return (\r\n      <Statistic\r\n        position={STATISTIC_ORDER.OPTIONAL(13)}\r\n        size=\"flexible\"\r\n        category={STATISTIC_CATEGORY.GENERAL}\r\n      >\r\n        <BoringSpellValueText spell={this.activeKillShotSpell}>\r\n          <>\r\n            <ItemDamageDone amount={this.damage} />\r\n          </>\r\n        </BoringSpellValueText>\r\n      </Statistic>\r\n    );\r\n  }\r\n}\r\n\r\nexport default KillShot;\r\n","import RESOURCE_TYPES from 'game/RESOURCE_TYPES';\r\n\r\nimport SpellResourceCost from 'parser/shared/modules/SpellResourceCost';\r\nimport SPELLS from 'common/SPELLS';\r\nimport { CastEvent } from 'parser/core/Events';\r\nimport { LNL_COST_MULTIPLIER } from 'parser/hunter/marksmanship/constants';\r\nimport { VIPERS_VENOM_COST_MULTIPLIER } from 'parser/hunter/survival/constants';\r\nimport { Options } from 'parser/core/Analyzer';\r\n\r\nclass SpellFocusCost extends SpellResourceCost {\r\n  static resourceType = RESOURCE_TYPES.FOCUS;\r\n\r\n  lockAndLoad: boolean;\r\n  vipersVenom: boolean;\r\n\r\n  constructor(options: Options) {\r\n    super(options);\r\n    this.lockAndLoad = this.selectedCombatant.hasTalent(SPELLS.LOCK_AND_LOAD_TALENT.id);\r\n    this.vipersVenom = this.selectedCombatant.hasTalent(SPELLS.VIPERS_VENOM_TALENT.id);\r\n  }\r\n\r\n  getResourceCost(event: CastEvent) {\r\n    const cost = super.getResourceCost(event);\r\n    const spellId = event.ability.guid;\r\n    if (this.lockAndLoad && this.selectedCombatant.hasBuff(SPELLS.LOCK_AND_LOAD_BUFF.id) && spellId === SPELLS.AIMED_SHOT.id) {\r\n      return cost * LNL_COST_MULTIPLIER;\r\n    }\r\n    if (this.vipersVenom && this.selectedCombatant.hasBuff(SPELLS.VIPERS_VENOM_BUFF.id) && spellId === SPELLS.SERPENT_STING_SV.id) {\r\n      return cost * VIPERS_VENOM_COST_MULTIPLIER;\r\n    }\r\n    return cost;\r\n  }\r\n}\r\n\r\nexport default SpellFocusCost;\r\n","import React from 'react';\r\n\r\nimport Analyzer, { Options, SELECTED_PLAYER } from 'parser/core/Analyzer';\r\nimport Abilities from 'parser/core/modules/Abilities';\r\nimport SPELLS from 'common/SPELLS';\r\nimport Events, { DamageEvent } from 'parser/core/Events';\r\nimport Statistic from 'interface/statistics/Statistic';\r\nimport STATISTIC_ORDER from 'interface/others/STATISTIC_ORDER';\r\nimport STATISTIC_CATEGORY from 'interface/others/STATISTIC_CATEGORY';\r\nimport BoringSpellValueText from 'interface/statistics/components/BoringSpellValueText';\r\nimport Enemies from 'parser/shared/modules/Enemies';\r\nimport UptimeIcon from 'interface/icons/Uptime';\r\nimport { formatNumber, formatPercentage } from 'common/format';\r\nimport CritIcon from 'interface/icons/CriticalStrike';\r\nimport { RESONATING_ARROW_CRIT_INCREASE } from 'parser/hunter/shared/constants';\r\nimport COVENANTS from 'game/shadowlands/COVENANTS';\r\n\r\nclass ResonatingArrow extends Analyzer {\r\n  static dependencies = {\r\n    abilities: Abilities,\r\n    enemies: Enemies,\r\n  };\r\n\r\n  casts: number = 0;\r\n  debuffs: number = 0;\r\n  damage = 0;\r\n\r\n  protected abilities!: Abilities;\r\n  protected enemies!: Enemies;\r\n\r\n  constructor(options: Options) {\r\n    super(options);\r\n\r\n    this.active = this.selectedCombatant.hasCovenant(COVENANTS.KYRIAN.id);\r\n\r\n    if (!this.active) {\r\n      return;\r\n    }\r\n\r\n    (options.abilities as Abilities).add({\r\n      spell: SPELLS.RESONATING_ARROW,\r\n      category: Abilities.SPELL_CATEGORIES.ROTATIONAL,\r\n      cooldown: 60,\r\n      gcd: {\r\n        base: 1500,\r\n      },\r\n      castEfficiency: {\r\n        suggestion: true,\r\n        recommendedEfficiency: 0.9,\r\n      },\r\n    });\r\n\r\n    this.addEventListener(Events.cast.by(SELECTED_PLAYER).spell(SPELLS.RESONATING_ARROW), this.onCast);\r\n    this.addEventListener(Events.applydebuff.by(SELECTED_PLAYER).spell(SPELLS.RESONATING_ARROW_DEBUFF), this.onDebuff);\r\n    this.addEventListener(Events.damage.by(SELECTED_PLAYER).spell(SPELLS.RESONATING_ARROW_DAMAGE), this.onDamage);\r\n  }\r\n\r\n  get uptime() {\r\n    return this.enemies.getBuffUptime(SPELLS.RESONATING_ARROW_DEBUFF.id) / this.owner.fightDuration;\r\n  }\r\n\r\n  onCast() {\r\n    this.casts += 1;\r\n  }\r\n\r\n  onDebuff() {\r\n    this.debuffs += 1;\r\n  }\r\n\r\n  onDamage(event: DamageEvent) {\r\n    this.damage += event.amount + (event.absorbed || 0);\r\n  }\r\n\r\n  statistic() {\r\n    return (\r\n      <Statistic\r\n        position={STATISTIC_ORDER.CORE()}\r\n        size=\"flexible\"\r\n        category={STATISTIC_CATEGORY.COVENANTS}\r\n        tooltip={(\r\n          <>\r\n            You had {this.casts} {this.casts === 1 ? 'cast' : 'casts'} of Resonating Arrow and applied the debuff {this.debuffs} {this.debuffs === 1 ? 'time' : 'times'}.\r\n            <br />\r\n            The direct damage of Resonating Arrow did {this.damage} damage or {formatNumber((this.damage / this.owner.fightDuration) * 1000)} DPS\r\n          </>\r\n        )}\r\n      >\r\n        <BoringSpellValueText spell={SPELLS.RESONATING_ARROW}>\r\n          <>\r\n            <UptimeIcon /> {formatPercentage(this.uptime)}% <small> debuff uptime</small>\r\n            <br />\r\n            <CritIcon /> {formatPercentage(this.uptime * RESONATING_ARROW_CRIT_INCREASE)}% <small>average Critical Strike</small>\r\n          </>\r\n        </BoringSpellValueText>\r\n      </Statistic>\r\n    );\r\n  }\r\n\r\n}\r\n\r\nexport default ResonatingArrow;\r\n","import React from 'react';\r\n\r\nimport Analyzer, { Options, SELECTED_PLAYER } from 'parser/core/Analyzer';\r\nimport Abilities from 'parser/core/modules/Abilities';\r\nimport SPELLS from 'common/SPELLS';\r\nimport Events, { DamageEvent, EnergizeEvent } from 'parser/core/Events';\r\nimport Statistic from 'interface/statistics/Statistic';\r\nimport STATISTIC_ORDER from 'interface/others/STATISTIC_ORDER';\r\nimport STATISTIC_CATEGORY from 'interface/others/STATISTIC_CATEGORY';\r\nimport BoringSpellValueText from 'interface/statistics/components/BoringSpellValueText';\r\nimport ItemDamageDone from 'interface/ItemDamageDone';\r\nimport RESOURCE_TYPES from 'game/RESOURCE_TYPES';\r\nimport ResourceIcon from 'common/ResourceIcon';\r\nimport COVENANTS from 'game/shadowlands/COVENANTS';\r\n\r\nclass DeathChakrams extends Analyzer {\r\n  static dependencies = {\r\n    abilities: Abilities,\r\n  };\r\n\r\n  damage: number = 0;\r\n  focusGained: number = 0;\r\n  focusWasted: number = 0;\r\n\r\n  protected abilities!: Abilities;\r\n\r\n  constructor(options: Options) {\r\n    super(options);\r\n\r\n    this.active = this.selectedCombatant.hasCovenant(COVENANTS.NECROLORD.id);\r\n\r\n    if (!this.active) {\r\n      return;\r\n    }\r\n\r\n    (options.abilities as Abilities).add({\r\n      spell: SPELLS.DEATH_CHAKRAM_INITIAL_AND_AOE,\r\n      category: Abilities.SPELL_CATEGORIES.ROTATIONAL,\r\n      cooldown: 45,\r\n      gcd: {\r\n        base: 1500,\r\n      },\r\n      castEfficiency: {\r\n        suggestion: true,\r\n        recommendedEfficiency: 0.9,\r\n      },\r\n    });\r\n\r\n    this.addEventListener(Events.damage.by(SELECTED_PLAYER).spell([SPELLS.DEATH_CHAKRAM_SINGLE_TARGET, SPELLS.DEATH_CHAKRAM_INITIAL_AND_AOE]), this.onDamage);\r\n    this.addEventListener(Events.energize.by(SELECTED_PLAYER).spell(SPELLS.DEATH_CHAKRAM_ENERGIZE), this.onEnergize);\r\n  }\r\n\r\n  onDamage(event: DamageEvent) {\r\n    this.damage += event.amount + (event.absorbed || 0);\r\n  }\r\n\r\n  onEnergize(event: EnergizeEvent) {\r\n    this.focusGained += event.resourceChange;\r\n    this.focusWasted += event.waste;\r\n  }\r\n\r\n  statistic() {\r\n    return (\r\n      <Statistic\r\n        position={STATISTIC_ORDER.CORE()}\r\n        size=\"flexible\"\r\n        category={STATISTIC_CATEGORY.COVENANTS}\r\n      >\r\n        <BoringSpellValueText spell={SPELLS.DEATH_CHAKRAM_INITIAL_AND_AOE}>\r\n          <>\r\n            <ItemDamageDone amount={this.damage} />\r\n            <br />\r\n            <ResourceIcon id={RESOURCE_TYPES.FOCUS.id} noLink /> {this.focusGained}/{this.focusWasted + this.focusGained}<small> gained Focus</small>\r\n          </>\r\n        </BoringSpellValueText>\r\n      </Statistic>\r\n    );\r\n  }\r\n}\r\n\r\nexport default DeathChakrams;\r\n","import Analyzer, { Options, SELECTED_PLAYER } from 'parser/core/Analyzer';\r\nimport Abilities from 'parser/core/modules/Abilities';\r\nimport SPELLS from 'common/SPELLS';\r\nimport Events, { DamageEvent } from 'parser/core/Events';\r\nimport Statistic from 'interface/statistics/Statistic';\r\nimport STATISTIC_ORDER from 'interface/others/STATISTIC_ORDER';\r\nimport STATISTIC_CATEGORY from 'interface/others/STATISTIC_CATEGORY';\r\nimport React from 'react';\r\nimport BoringSpellValueText from 'interface/statistics/components/BoringSpellValueText';\r\nimport Enemies from 'parser/shared/modules/Enemies';\r\nimport calculateEffectiveDamage from 'parser/core/calculateEffectiveDamage';\r\nimport { WILD_MARK_DAMAGE_AMP } from 'parser/hunter/shared/constants';\r\nimport { formatNumber } from 'common/format';\r\nimport COVENANTS from 'game/shadowlands/COVENANTS';\r\n\r\n/**\r\n * TODO Revisit this when Blizzard is done messing with this changing it constantly.\r\n */\r\nclass WildSpirits extends Analyzer {\r\n  static dependencies = {\r\n    abilities: Abilities,\r\n    enemies: Enemies,\r\n  };\r\n\r\n  damage: number = 0;\r\n  ampDamage: number = 0;\r\n\r\n  protected abilities!: Abilities;\r\n  protected enemies!: Enemies;\r\n\r\n  constructor(options: Options) {\r\n    super(options);\r\n\r\n    this.active = this.selectedCombatant.hasCovenant(COVENANTS.NIGHT_FAE.id);\r\n\r\n    if (!this.active) {\r\n      return;\r\n    }\r\n\r\n    (options.abilities as Abilities).add({\r\n      spell: SPELLS.WILD_SPIRITS,\r\n      category: Abilities.SPELL_CATEGORIES.ROTATIONAL,\r\n      cooldown: 120,\r\n      gcd: {\r\n        base: 1500,\r\n      },\r\n      castEfficiency: {\r\n        suggestion: true,\r\n        recommendedEfficiency: 0.9,\r\n      },\r\n    });\r\n\r\n    this.addEventListener(Events.damage.by(SELECTED_PLAYER).spell([SPELLS.WILD_SPIRITS_DAMAGE, SPELLS.WILD_SPIRITS_DAMAGE_AOE]), this.onWildSpiritsDamage);\r\n    this.addEventListener(Events.damage.by(SELECTED_PLAYER), this.onDamage);\r\n  }\r\n\r\n  onWildSpiritsDamage(event: DamageEvent) {\r\n    this.damage += event.amount + (event.absorbed || 0);\r\n  }\r\n\r\n  onDamage(event: DamageEvent) {\r\n    const enemy = this.enemies.getEntity(event);\r\n    if (!enemy || !enemy.hasBuff(SPELLS.WILD_MARK.id)) {\r\n      return;\r\n    }\r\n    this.ampDamage += calculateEffectiveDamage(event, WILD_MARK_DAMAGE_AMP);\r\n  }\r\n\r\n  statistic() {\r\n    return (\r\n      <Statistic\r\n        position={STATISTIC_ORDER.CORE()}\r\n        size=\"flexible\"\r\n        category={STATISTIC_CATEGORY.COVENANTS}\r\n      >\r\n        <BoringSpellValueText spell={SPELLS.WILD_SPIRITS}>\r\n          <>\r\n            <img src=\"/img/sword.png\" alt=\"Damage\" className=\"icon\" />{' '}\r\n            {formatNumber(this.damage)} <small> direct damage</small>\r\n            <br />\r\n            <img src=\"/img/sword.png\" alt=\"Damage\" className=\"icon\" />{' '}\r\n            {formatNumber(this.damage)} <small> Wild Mark damage</small>\r\n          </>\r\n        </BoringSpellValueText>\r\n      </Statistic>\r\n    );\r\n  }\r\n\r\n}\r\n\r\nexport default WildSpirits;\r\n","import React from 'react';\r\n\r\nimport Analyzer, { Options, SELECTED_PLAYER, SELECTED_PLAYER_PET } from 'parser/core/Analyzer';\r\nimport Statistic from 'interface/statistics/Statistic';\r\nimport STATISTIC_ORDER from 'interface/others/STATISTIC_ORDER';\r\nimport STATISTIC_CATEGORY from 'interface/others/STATISTIC_CATEGORY';\r\nimport { ENFEEBLED_MARK_DAMAGE_INCREASE } from 'parser/hunter/shared/constants';\r\nimport Events, { DamageEvent } from 'parser/core/Events';\r\nimport SPELLS from 'common/SPELLS';\r\nimport ItemDamageDone from 'interface/ItemDamageDone';\r\nimport calculateEffectiveDamage from 'parser/core/calculateEffectiveDamage';\r\nimport Enemies from 'parser/shared/modules/Enemies';\r\nimport COVENANTS from 'game/shadowlands/COVENANTS';\r\nimport ConduitSpellText from 'interface/statistics/components/ConduitSpellText';\r\n\r\n/**\r\n * Your attacks and abilities deal 5.0% increased damage to enemies inside Resonating Arrow.\r\n *\r\n * Example log:\r\n *\r\n */\r\nclass EnfeebledMark extends Analyzer {\r\n  static dependencies = {\r\n    enemies: Enemies,\r\n  };\r\n\r\n  conduitRank: number = 0;\r\n  addedDamage: number = 0;\r\n\r\n  protected enemies!: Enemies;\r\n\r\n  constructor(options: Options) {\r\n    super(options);\r\n    this.active = this.selectedCombatant.hasCovenant(COVENANTS.KYRIAN.id) && this.selectedCombatant.hasConduitBySpellID(SPELLS.ENFEEBLED_MARK_CONDUIT.id);\r\n    if (!this.active) {\r\n      return;\r\n    }\r\n\r\n    this.conduitRank = this.selectedCombatant.conduitRankBySpellID(SPELLS.ENFEEBLED_MARK_CONDUIT.id);\r\n\r\n    this.addEventListener(Events.damage.by(SELECTED_PLAYER | SELECTED_PLAYER_PET), this.onGenericDamage);\r\n  }\r\n\r\n  onGenericDamage(event: DamageEvent) {\r\n    const enemy = this.enemies.getEntity(event);\r\n    if (!enemy || !enemy.hasBuff(SPELLS.RESONATING_ARROW_DEBUFF.id)) {\r\n      return;\r\n    }\r\n    this.addedDamage += calculateEffectiveDamage(event, ENFEEBLED_MARK_DAMAGE_INCREASE[this.conduitRank]);\r\n  }\r\n\r\n  statistic() {\r\n    return (\r\n      <Statistic\r\n        position={STATISTIC_ORDER.OPTIONAL(13)}\r\n        size=\"flexible\"\r\n        category={STATISTIC_CATEGORY.COVENANTS}\r\n      >\r\n        <ConduitSpellText spell={SPELLS.ENFEEBLED_MARK_CONDUIT} rank={this.conduitRank}>\r\n          <>\r\n            <ItemDamageDone amount={this.addedDamage} />\r\n          </>\r\n        </ConduitSpellText>\r\n      </Statistic>\r\n    );\r\n  }\r\n}\r\n\r\nexport default EnfeebledMark;\r\n","import React from 'react';\r\n\r\nimport Analyzer, { Options, SELECTED_PLAYER } from 'parser/core/Analyzer';\r\nimport Statistic from 'interface/statistics/Statistic';\r\nimport STATISTIC_ORDER from 'interface/others/STATISTIC_ORDER';\r\nimport STATISTIC_CATEGORY from 'interface/others/STATISTIC_CATEGORY';\r\nimport { EMPOWERED_RELEASE_INCREASE_KS_DAMAGE, EMPOWERED_RELEASE_INCREASED_FLAYED_PROC_CHANCE, FLAYED_SHOT_RESET_CHANCE } from 'parser/hunter/shared/constants';\r\nimport Events, { DamageEvent } from 'parser/core/Events';\r\nimport SPELLS from 'common/SPELLS';\r\nimport ItemDamageDone from 'interface/ItemDamageDone';\r\nimport calculateEffectiveDamage from 'parser/core/calculateEffectiveDamage';\r\nimport COVENANTS from 'game/shadowlands/COVENANTS';\r\nimport ConduitSpellText from 'interface/statistics/components/ConduitSpellText';\r\n\r\n/**\r\n * Flayed Shot has an additional 5% chance to pro Flayer's Mark\r\n * Flayer's Mark increases the damage of your next Kill Shot by 5.0%.\r\n *\r\n * Example log:\r\n *\r\n */\r\nclass EmpoweredRelease extends Analyzer {\r\n\r\n  flayersMarkProcs: number = 0;\r\n  aggregatedContribution: number = 0;\r\n  conduitRank: number = 0;\r\n  addedDamage: number = 0;\r\n\r\n  constructor(options: Options) {\r\n    super(options);\r\n    this.active = this.selectedCombatant.hasCovenant(COVENANTS.VENTHYR.id) && this.selectedCombatant.hasConduitBySpellID(SPELLS.EMPOWERED_RELEASE_CONDUIT.id);\r\n    if (!this.active) {\r\n      return;\r\n    }\r\n\r\n    this.conduitRank = this.selectedCombatant.conduitRankBySpellID(SPELLS.EMPOWERED_RELEASE_CONDUIT.id);\r\n\r\n    this.addEventListener(Events.applybuff.by(SELECTED_PLAYER).spell(SPELLS.FLAYERS_MARK), this.flayedShotProc);\r\n    this.addEventListener(Events.refreshbuff.by(SELECTED_PLAYER).spell(SPELLS.FLAYERS_MARK), this.flayedShotProc);\r\n    this.addEventListener(Events.damage.by(SELECTED_PLAYER).spell([SPELLS.KILL_SHOT_SV, SPELLS.KILL_SHOT_MM_BM]), this.onKillShotDamage);\r\n  }\r\n\r\n  get averageContributionPercentage() {\r\n    return this.aggregatedContribution / this.flayersMarkProcs;\r\n  }\r\n\r\n  get averageContributionAbsolute() {\r\n    return Math.round(this.averageContributionPercentage * this.flayersMarkProcs);\r\n  }\r\n\r\n  flayedShotProc() {\r\n    this.aggregatedContribution += EMPOWERED_RELEASE_INCREASED_FLAYED_PROC_CHANCE / (FLAYED_SHOT_RESET_CHANCE + EMPOWERED_RELEASE_INCREASED_FLAYED_PROC_CHANCE);\r\n    this.flayersMarkProcs += 1;\r\n  }\r\n\r\n  onKillShotDamage(event: DamageEvent) {\r\n    if (!this.selectedCombatant.hasBuff(SPELLS.EMPOWERED_RELEASE_BUFF.id)) {\r\n      return;\r\n    }\r\n    this.addedDamage += calculateEffectiveDamage(event, EMPOWERED_RELEASE_INCREASE_KS_DAMAGE[this.conduitRank]);\r\n  }\r\n\r\n  statistic() {\r\n    return (\r\n      <Statistic\r\n        position={STATISTIC_ORDER.OPTIONAL(13)}\r\n        size=\"flexible\"\r\n        category={STATISTIC_CATEGORY.COVENANTS}\r\n      >\r\n        <ConduitSpellText spell={SPELLS.EMPOWERED_RELEASE_CONDUIT} rank={this.conduitRank}>\r\n          <>\r\n            ≈ {this.averageContributionAbsolute} <small> additional procs </small>\r\n            <ItemDamageDone amount={this.addedDamage} />\r\n          </>\r\n        </ConduitSpellText>\r\n      </Statistic>\r\n    );\r\n  }\r\n}\r\n\r\nexport default EmpoweredRelease;\r\n","import Analyzer, { Options, SELECTED_PLAYER } from 'parser/core/Analyzer';\r\nimport Events, { DamageEvent, EnergizeEvent } from 'parser/core/Events';\r\nimport SPELLS from 'common/SPELLS';\r\nimport Statistic from 'interface/statistics/Statistic';\r\nimport STATISTIC_ORDER from 'interface/others/STATISTIC_ORDER';\r\nimport STATISTIC_CATEGORY from 'interface/others/STATISTIC_CATEGORY';\r\nimport ItemDamageDone from 'interface/ItemDamageDone';\r\nimport React from 'react';\r\nimport calculateEffectiveDamage from 'parser/core/calculateEffectiveDamage';\r\nimport { NECROTIC_BARRAGE_DAMAGE_INCREASE } from 'parser/hunter/shared/constants';\r\nimport COVENANTS from 'game/shadowlands/COVENANTS';\r\nimport ConduitSpellText from 'interface/statistics/components/ConduitSpellText';\r\n\r\n/**\r\n * Death Chakram generates an additional 2 Focus and the damage is increased by 5.0%.\r\n *\r\n * Example log\r\n *\r\n */\r\nclass NecroticBarrage extends Analyzer {\r\n\r\n  conduitRank: number = 0;\r\n  gainedFocus: number = 0;\r\n  wastedFocus: number = 0;\r\n  addedDamage: number = 0;\r\n\r\n  constructor(options: Options) {\r\n    super(options);\r\n    this.active = this.selectedCombatant.hasCovenant(COVENANTS.NECROLORD.id) && this.selectedCombatant.hasConduitBySpellID(SPELLS.NECROTIC_BARRAGE_CONDUIT.id);\r\n    if (!this.active) {\r\n      return;\r\n    }\r\n\r\n    this.conduitRank = this.selectedCombatant.conduitRankBySpellID(SPELLS.NECROTIC_BARRAGE_CONDUIT.id);\r\n\r\n    this.addEventListener(Events.damage.by(SELECTED_PLAYER).spell([SPELLS.DEATH_CHAKRAM_SINGLE_TARGET, SPELLS.DEATH_CHAKRAM_INITIAL_AND_AOE]), this.onDeathChakramDamage);\r\n    this.addEventListener(Events.energize.by(SELECTED_PLAYER).spell(SPELLS.DEATH_CHAKRAM_ENERGIZE), this.onEnergize);\r\n  }\r\n\r\n  onDeathChakramDamage(event: DamageEvent) {\r\n    this.addedDamage += calculateEffectiveDamage(event, NECROTIC_BARRAGE_DAMAGE_INCREASE[this.conduitRank]);\r\n  }\r\n\r\n  onEnergize(event: EnergizeEvent) {\r\n    this.gainedFocus += event.resourceChange;\r\n    this.wastedFocus += event.waste;\r\n  }\r\n\r\n  statistic() {\r\n    return (\r\n      <Statistic\r\n        position={STATISTIC_ORDER.OPTIONAL(13)}\r\n        size=\"flexible\"\r\n        category={STATISTIC_CATEGORY.COVENANTS}\r\n      >\r\n        <ConduitSpellText spell={SPELLS.NECROTIC_BARRAGE_CONDUIT} rank={this.conduitRank}>\r\n          <>\r\n            <ItemDamageDone amount={this.addedDamage} />\r\n            {this.gainedFocus}/{this.gainedFocus + this.wastedFocus} <small>gained focus</small>\r\n          </>\r\n        </ConduitSpellText>\r\n      </Statistic>\r\n    );\r\n  }\r\n\r\n}\r\n\r\nexport default NecroticBarrage;\r\n","import Events, { CastEvent, DamageEvent } from 'parser/core/Events';\r\nimport { SELECTED_PLAYER } from 'parser/core/EventFilter';\r\nimport Analyzer, { Options } from 'parser/core/Analyzer';\r\nimport calculateEffectiveDamage from 'parser/core/calculateEffectiveDamage';\r\nimport { SPIRIT_ATTUNEMENT_DAMAGE_INCREASE, WILD_MARK_DAMAGE_AMP, WILD_SPIRITS_BASELINE_DURATION } from 'parser/hunter/shared/constants';\r\nimport SPELLS from 'common/SPELLS';\r\nimport Statistic from 'interface/statistics/Statistic';\r\nimport STATISTIC_ORDER from 'interface/others/STATISTIC_ORDER';\r\nimport STATISTIC_CATEGORY from 'interface/others/STATISTIC_CATEGORY';\r\nimport ItemDamageDone from 'interface/ItemDamageDone';\r\nimport React from 'react';\r\nimport { formatThousands } from 'common/format';\r\nimport COVENANTS from 'game/shadowlands/COVENANTS';\r\nimport ConduitSpellText from 'interface/statistics/components/ConduitSpellText';\r\n\r\n/**\r\n * Wild Spirits duration is increased by 3 sec and the damage dealt is increased by 10.0%.\r\n *\r\n * Example log\r\n *\r\n */\r\nclass SpiritAttunement extends Analyzer {\r\n\r\n  conduitRank: number = 0;\r\n  addedDamage: number = 0;\r\n  wildSpiritsCast: number = 0;\r\n  damageAfterOriginalDuration: number = 0;\r\n\r\n  constructor(options: Options) {\r\n    super(options);\r\n    this.active = this.selectedCombatant.hasCovenant(COVENANTS.NIGHT_FAE.id) && this.selectedCombatant.hasConduitBySpellID(SPELLS.SPIRIT_ATTUNEMENT_CONDUIT.id);\r\n    if (!this.active) {\r\n      return;\r\n    }\r\n\r\n    this.conduitRank = this.selectedCombatant.conduitRankBySpellID(SPELLS.SPIRIT_ATTUNEMENT_CONDUIT.id);\r\n\r\n    this.addEventListener(Events.damage.by(SELECTED_PLAYER).spell([SPELLS.WILD_SPIRITS_DAMAGE, SPELLS.WILD_SPIRITS_DAMAGE_AOE]), this.onWildSpiritsDamage);\r\n    this.addEventListener(Events.damage.by(SELECTED_PLAYER), this.onGenericDamage);\r\n    this.addEventListener(Events.cast.by(SELECTED_PLAYER).spell(SPELLS.WILD_SPIRITS), this.onWildSpiritsCast);\r\n  }\r\n\r\n  onWildSpiritsCast(event: CastEvent) {\r\n    this.wildSpiritsCast = event.timestamp;\r\n  }\r\n\r\n  onWildSpiritsDamage(event: DamageEvent) {\r\n    this.addedDamage += calculateEffectiveDamage(event, SPIRIT_ATTUNEMENT_DAMAGE_INCREASE[this.conduitRank]);\r\n\r\n    if (event.timestamp > this.wildSpiritsCast + WILD_SPIRITS_BASELINE_DURATION) {\r\n      this.damageAfterOriginalDuration += event.amount + (event.absorbed || 0);\r\n    }\r\n  }\r\n\r\n  onGenericDamage(event: DamageEvent) {\r\n    if (event.timestamp > this.wildSpiritsCast + WILD_SPIRITS_BASELINE_DURATION) {\r\n      this.damageAfterOriginalDuration += calculateEffectiveDamage(event, WILD_MARK_DAMAGE_AMP);\r\n    }\r\n  }\r\n\r\n  statistic() {\r\n    return (\r\n      <Statistic\r\n        position={STATISTIC_ORDER.OPTIONAL(13)}\r\n        size=\"flexible\"\r\n        category={STATISTIC_CATEGORY.COVENANTS}\r\n        tooltip={(\r\n          <>\r\n            After the original duration of Wild Spirits, Spirit Attunment contributed with {formatThousands(this.damageAfterOriginalDuration)}\r\n          </>\r\n        )}\r\n      >\r\n        <ConduitSpellText spell={SPELLS.SPIRIT_ATTUNEMENT_CONDUIT} rank={this.conduitRank}>\r\n          <>\r\n            <ItemDamageDone amount={this.addedDamage} />\r\n            {formatThousands(this.damageAfterOriginalDuration)} <small>damage after normal duration</small>\r\n          </>\r\n        </ConduitSpellText>\r\n      </Statistic>\r\n    );\r\n  }\r\n\r\n}\r\n\r\nexport default SpiritAttunement;\r\n","import Analyzer, { Options, SELECTED_PLAYER } from 'parser/core/Analyzer';\r\nimport Statistic from 'interface/statistics/Statistic';\r\nimport STATISTIC_ORDER from 'interface/others/STATISTIC_ORDER';\r\nimport STATISTIC_CATEGORY from 'interface/others/STATISTIC_CATEGORY';\r\nimport React from 'react';\r\nimport BoringSpellValueText from 'interface/statistics/components/BoringSpellValueText';\r\nimport SPELLS from 'common/SPELLS';\r\nimport Events, { CastEvent, DamageEvent } from 'parser/core/Events';\r\nimport ItemDamageDone from 'interface/ItemDamageDone';\r\nimport SpellIcon from 'common/SpellIcon';\r\n\r\n/**\r\n * Launching a Flare into your Tar Trap causes all enemies inside of the Tar Trap to burn for (150% of Attack power) Fire damage over 12 sec.\r\n *\r\n * Example log:\r\n *\r\n */\r\nclass SoulforgeEmbers extends Analyzer {\r\n\r\n  damage: number = 0;\r\n  flareCasts: number = 0;\r\n  lastFlareCastTimestamp: number = 0;\r\n  tarTrapCasts: number = 0;\r\n  lastTarTrapCastTimestamp: number = 0;\r\n  lostEmberApplications: number = 0;\r\n\r\n  constructor(options: Options) {\r\n    super(options);\r\n    this.active = this.selectedCombatant.hasLegendaryByBonusID(SPELLS.SOULFORGE_EMBERS_EFFECT.bonusID);\r\n    if (!this.active) {\r\n      return;\r\n    }\r\n    this.addEventListener(Events.cast.by(SELECTED_PLAYER).spell(SPELLS.FLARE), this.onFlare);\r\n    this.addEventListener(Events.cast.by(SELECTED_PLAYER).spell(SPELLS.TAR_TRAP), this.onTarTrap);\r\n    this.addEventListener(Events.damage.by(SELECTED_PLAYER).spell(SPELLS.SOULFORGE_EMBERS_DAMAGE), this.onEmbersDamage);\r\n  }\r\n\r\n  onFlare(event: CastEvent) {\r\n    this.flareCasts += 1;\r\n    this.lastFlareCastTimestamp = event.timestamp;\r\n  }\r\n\r\n  onTarTrap(event: CastEvent) {\r\n    this.tarTrapCasts += 1;\r\n    this.lastTarTrapCastTimestamp = event.timestamp;\r\n  }\r\n\r\n  onEmbersDamage(event: DamageEvent) {\r\n    this.damage += event.amount + (event.absorbed || 0);\r\n  }\r\n\r\n  statistic() {\r\n    return (\r\n      <Statistic\r\n        position={STATISTIC_ORDER.CORE()}\r\n        size=\"flexible\"\r\n        category={STATISTIC_CATEGORY.ITEMS}\r\n      >\r\n        <BoringSpellValueText spell={SPELLS.SOULFORGE_EMBERS_EFFECT}>\r\n          <ItemDamageDone amount={this.damage} />\r\n          <br />\r\n          {this.flareCasts} <SpellIcon id={SPELLS.FLARE.id} noLink /> / {this.tarTrapCasts} <SpellIcon id={SPELLS.TAR_TRAP.id} noLink />\r\n        </BoringSpellValueText>\r\n      </Statistic>\r\n    );\r\n  }\r\n\r\n}\r\n\r\nexport default SoulforgeEmbers;\r\n","import Analyzer, { Options, SELECTED_PLAYER } from 'parser/core/Analyzer';\r\nimport DonutChart from 'interface/statistics/components/DonutChart';\r\nimport Statistic from 'interface/statistics/Statistic';\r\nimport STATISTIC_ORDER from 'interface/others/STATISTIC_ORDER';\r\nimport Events, { CastEvent } from 'parser/core/Events';\r\nimport ResourceLink from 'common/ResourceLink';\r\nimport { formatNumber } from 'common/format';\r\n\r\nimport Spell from 'common/SPELLS/Spell';\r\n\r\nimport React from 'react';\r\n\r\nclass ResourceUsage extends Analyzer {\r\n\r\n  //region IMPLEMENTME statics\r\n  /**\r\n   * One of the types from game/RESOURCE_TYPES\r\n   */\r\n  static resourceType: { id: number, name: string, icon: string, url: string };\r\n\r\n  /**\r\n   * Array of objects from common/SPELLS\r\n   */\r\n  static listOfResourceSpenders: Spell[] = [];\r\n\r\n  /**\r\n   * We might want some spells to show as other spells, if some buff can alter their spellID, but the spell is otherwise essentially the same.\r\n   * An example of this can be Mongoose Bite and Raptor Strike for Survival that gain a different spellID when\r\n   * Example format\r\n   * [SPELLS.RAPTOR_STRIKE_AOTE.id]: SPELLS.RAPTOR_STRIKE,\r\n   */\r\n  static spellsThatShouldShowAsOtherSpells: { [spellID: number]: { guid: number, name: string, abilityIcon: string, type: number } } = {};\r\n  //endregion\r\n\r\n  //region Optional IMPLEMENTME statics\r\n  /**\r\n   * String representations of hex colour codes\r\n   * Only replace if you want different colours, or need more colours (even utilising all 7 will lead to a very ugly chart and potential spell names overflowing out of the statistic box)\r\n   */\r\n  static listOfDefaultColours: string[] = [\r\n    '#ecd1b6',\r\n    '#abff3d',\r\n    '#ecda4c',\r\n    '#ff7d0a',\r\n    '#4ce4ec',\r\n    '#8b8dec',\r\n    '#00ec62',\r\n  ];\r\n\r\n  /**\r\n   * If you want to change where this module is shown, change this static.\r\n   */\r\n  static statisticOrder = STATISTIC_ORDER.CORE(12);\r\n  //endregion\r\n\r\n  listOfSpellsUsed: { [key: string]: { casts: number, resourceUsed: number } } = {};\r\n  ctor = this.constructor as typeof ResourceUsage;\r\n\r\n  constructor(options: Options) {\r\n    super(options);\r\n    this.addEventListener(Events.cast.by(SELECTED_PLAYER).spell(this.resourceSpenders), this.onCast);\r\n  }\r\n\r\n  get resourceSpenders() {\r\n    return this.ctor.listOfResourceSpenders;\r\n  }\r\n\r\n  get resourceTypeID() {\r\n    return this.ctor.resourceType.id;\r\n  }\r\n\r\n  get resourceTypeName() {\r\n    return this.ctor.resourceType.name;\r\n  }\r\n\r\n  get listOfDefaultColours() {\r\n    return this.ctor.listOfDefaultColours;\r\n  }\r\n\r\n  get spellsThatShouldShowAsOtherSpells() {\r\n    return this.ctor.spellsThatShouldShowAsOtherSpells;\r\n  }\r\n\r\n  get resourceUsageStatisticOrder() {\r\n    return this.ctor.statisticOrder;\r\n  }\r\n\r\n  onCast(event: CastEvent) {\r\n    //shouldn't really happen unless something messed up in the log where the cast event doesn't have any class resource information so we skip those.\r\n    if (!event.classResources) {\r\n      return;\r\n    }\r\n    let spellID = event.ability.guid;\r\n    if (this.spellsThatShouldShowAsOtherSpells[spellID]) {\r\n      event.ability = this.spellsThatShouldShowAsOtherSpells[spellID];\r\n      spellID = event.ability.guid;\r\n    }\r\n\r\n    const resource = event.classResources?.find(resource => resource.type === this.resourceTypeID);\r\n    if (!resource) {\r\n      return;\r\n    }\r\n\r\n    if (!this.listOfSpellsUsed[spellID]) {\r\n      this.listOfSpellsUsed[spellID] = {\r\n        casts: 0,\r\n        resourceUsed: 0,\r\n      };\r\n    }\r\n\r\n    this.listOfSpellsUsed[spellID].casts += 1;\r\n    this.listOfSpellsUsed[spellID].resourceUsed += resource.cost || 0;\r\n  }\r\n\r\n  makeResourceUsageTooltip(spell: { casts: number; resourceUsed: number }) {\r\n    return (\r\n      <>\r\n        {spell.casts} casts\r\n        <br />\r\n        {formatNumber(spell.resourceUsed)} {this.resourceTypeName} spent\r\n      </>\r\n    );\r\n  }\r\n\r\n  sortResourceUsage(a: { value: number; }, b: { value: number; }) {\r\n    let comparison = 0;\r\n    if (a.value > b.value) {\r\n      comparison = -1;\r\n    } else if (a.value < b.value) {\r\n      comparison = 1;\r\n    }\r\n    return comparison;\r\n  }\r\n\r\n  get resourceUsageChart() {\r\n    const items: Array<{ color: string, label: string, spellId: number, value: number, valueTooltip: JSX.Element }> = [];\r\n    let colourIndex = 0;\r\n    this.resourceSpenders.forEach(spell => {\r\n      if (this.listOfSpellsUsed[spell.id] && this.listOfSpellsUsed[spell.id].resourceUsed > 0) {\r\n        items.push({\r\n          color: this.listOfDefaultColours[colourIndex],\r\n          label: spell.name,\r\n          spellId: spell.id,\r\n          value: Math.round(this.listOfSpellsUsed[spell.id].resourceUsed),\r\n          valueTooltip: this.makeResourceUsageTooltip(this.listOfSpellsUsed[spell.id]),\r\n        });\r\n        colourIndex += 1;\r\n      }\r\n    });\r\n\r\n    items.sort(this.sortResourceUsage);\r\n\r\n    return (\r\n      <DonutChart\r\n        items={items}\r\n      />\r\n    );\r\n  }\r\n\r\n  statistic() {\r\n    return (\r\n      <Statistic position={this.resourceUsageStatisticOrder}>\r\n        <div className=\"pad\">\r\n          <label><ResourceLink id={this.resourceTypeID} /> usage</label>\r\n          {this.resourceUsageChart}\r\n        </div>\r\n\r\n      </Statistic>\r\n    );\r\n  }\r\n\r\n}\r\n\r\nexport default ResourceUsage;\r\n","import ResourceUsage from 'parser/shared/modules/resources/ResourceUsage';\r\nimport { LIST_OF_FOCUS_SPENDERS_SHARED } from 'parser/hunter/shared/constants';\r\nimport RESOURCE_TYPES from 'game/RESOURCE_TYPES';\r\nimport Spell from 'common/SPELLS/Spell';\r\n\r\nclass FocusUsage extends ResourceUsage {\r\n\r\n  static resourceType = RESOURCE_TYPES.FOCUS;\r\n\r\n  static listOfResourceSpenders: Spell[] = [\r\n    ...LIST_OF_FOCUS_SPENDERS_SHARED,\r\n  ];\r\n\r\n}\r\n\r\nexport default FocusUsage;\r\n"],"sourceRoot":""}