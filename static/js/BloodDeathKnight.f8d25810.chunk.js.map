{"version":3,"sources":["parser/deathknight/blood/modules/Abilities.js","parser/deathknight/blood/modules/core/Channeling.js","parser/deathknight/blood/modules/core/GlobalCooldown.js","parser/deathknight/blood/modules/features/AlwaysBeCasting.js","parser/deathknight/blood/modules/features/CooldownThroughputTracker.js","parser/deathknight/blood/modules/features/BloodPlagueUptime.js","parser/deathknight/blood/modules/features/CrimsonScourge.js","parser/deathknight/blood/modules/features/BlooddrinkerTicks.js","parser/deathknight/blood/modules/features/checklist/Component.js","parser/deathknight/blood/modules/features/BoneShieldTimesByStacks.js","parser/deathknight/blood/modules/features/BoneShield.js","parser/deathknight/blood/modules/features/MarrowrendUsage.js","parser/deathknight/blood/modules/core/DeathsCaress.js","parser/deathknight/blood/modules/talents/Bonestorm.js","parser/deathknight/blood/modules/talents/MarkOfBlood.js","parser/deathknight/blood/modules/talents/Consumption.js","parser/deathknight/blood/modules/runicpower/RunicPowerTracker.js","parser/deathknight/blood/modules/runicpower/RunicPowerDetails.js","parser/deathknight/blood/modules/features/checklist/Module.js","parser/deathknight/blood/modules/features/DancingRuneWeapon.js","parser/deathknight/blood/modules/features/InitialMarrowrendCast.js","parser/deathknight/blood/modules/features/DeathStrikeTiming.js","parser/deathknight/blood/modules/features/MitigationCheck.js","parser/deathknight/blood/modules/talents/RedThirst.js","parser/deathknight/blood/modules/talents/Hemostasis.js","parser/deathknight/blood/modules/talents/FoulBulwark.js","parser/deathknight/blood/modules/talents/Heartbreaker.js","parser/deathknight/blood/modules/talents/Bloodworms.js","parser/deathknight/blood/modules/talents/Tombstone.js","parser/deathknight/blood/modules/talents/Voracious.js","parser/deathknight/blood/modules/talents/RapidDecomposition.js","parser/deathknight/blood/modules/talents/WillOfTheNecropolis.js","parser/deathknight/blood/modules/talents/RelishInBlood.tsx","parser/deathknight/blood/modules/core/RuneForgeChecker.tsx","parser/deathknight/shared/runeforges/RuneForgeChecker.tsx","parser/deathknight/blood/CombatLogParser.ts","parser/core/calculateEffectiveDamage.js","interface/icons/Uptime.js","parser/core/calculateEffectiveHealing.js","interface/others/TalentStatisticBox.js","parser/shared/modules/helpers/Stacks.tsx","parser/core/calculateMaxCasts.ts","parser/deathknight/shared/RuneTracker.js","parser/shared/modules/MitigationCheck.js","parser/deathknight/shared/runeforges/RuneOfTheFallenCrusader.tsx","parser/deathknight/shared/runeforges/RuneOfHysteria.tsx","parser/deathknight/shared/RuneBreakdown.js","parser/deathknight/shared/RuneDetails.js","parser/shared/modules/features/AoESpellEfficiency.tsx","parser/shared/modules/features/SelfHealTimingGraph.js"],"names":["Abilities","combatant","this","selectedCombatant","spell","SPELLS","ICEBOUND_FORTITUDE","buffSpellId","id","category","SPELL_CATEGORIES","DEFENSIVE","cooldown","castEfficiency","suggestion","recommendedEfficiency","extraSuggestion","importance","ISSUE_IMPORTANCE","MINOR","timelineSortIndex","VAMPIRIC_BLOOD","BLOOD_BOIL","ROTATIONAL","haste","gcd","base","charges","CONSUMPTION_TALENT","SEMI_DEFENSIVE","enabled","hasTalent","DANCING_RUNE_WEAPON","DANCING_RUNE_WEAPON_BUFF","BLOODDRINKER_TALENT","DEATH_STRIKE","DEATHS_CARESS","DEATH_AND_DECAY","RAPID_DECOMPOSITION_TALENT","HEART_STRIKE","MARROWREND","BONE_SHIELD","ANTI_MAGIC_SHELL","ANTIMAGIC_BARRIER_TALENT","MIND_FREEZE","UTILITY","DARK_COMMAND","DEATH_GRIP","DEATHS_ADVANCE","WRAITH_WALK_TALENT","GOREFIENDS_GRASP","TIGHTENING_GRASP_TALENT","RAISE_ALLY","ASPHYXIATE","CONTROL_UNDEAD","OTHERS","RAISE_DEAD_BLOOD_FROST","COOLDOWNS","ANTI_MAGIC_ZONE","ANTI_MAGIC_ZONE_BUFF","isDefensive","MARK_OF_BLOOD_TALENT","TOMBSTONE_TALENT","RUNE_TAP","BLOOD_TAP_TALENT","BONESTORM_TALENT","ROTATIONAL_AOE","RUNE_1","HIDDEN","RUNE_2","RUNE_3","CoreAbilities","Channeling","options","addEventListener","Events","applydebuff","by","SELECTED_PLAYER","onApplyDebuff","removedebuff","onRemoveDebuff","event","ability","guid","isChannelingSpell","endChannel","beginChannel","CoreChanneling","GlobalCooldown","CoreGlobalCooldown","AlwaysBeCasting","when","boss","owner","fight","disableDowntimeSuggestion","downtimeSuggestionThresholds","addSuggestion","suggest","actual","recommended","SpellLink","icon","i18n","_","formatPercentage","downtimePercentage","isGreaterThan","minor","average","major","style","CoreAlwaysBeCasting","CooldownThroughputTracker","CoreCooldownThroughputTracker","cooldownSpells","summary","BUILT_IN_SUMMARY_TYPES","DAMAGE","HEALING","OVERHEALING","ABSORBED","BloodPlagueUptime","uptimeSuggestionThresholds","BLOOD_PLAGUE","Statistic","size","position","STATISTIC_ORDER","CORE","BoringSpellValueText","Uptime","uptime","enemies","getBuffUptime","fightDuration","isLessThan","Analyzer","dependencies","Enemies","CrimsonScourge","crimsonScourgeProcsCounter","freeDeathAndDecayCounter","endOfCombatCast","cast","onCast","applybuff","CRIMSON_SCOURGE","onApplyBuff","hasBuff","timestamp","spellUsable","isOnCooldown","endCooldown","end_time","suggestionThresholds","tooltip","wastedCrimsonScourgeProcs","wastedCrimsonScourgeProcsPercent","wastedProcs","abilityTracker","AbilityTracker","SpellUsable","Blooddrinker","args","_totalTicks","_totalCasts","_currentTicks","_wastedTicks","_ruinedCasts","totalDamage","totalHealing","active","damage","onDamage","heal","to","onHeal","amount","absorbed","formatThousands","formatItemDamageDone","formatItemHealingDone","BloodDeathKnightChecklist","thresholds","AbilityRequirement","props","GenericCastEfficiencyRequirement","getCastEfficiencyForSpellId","Rule","name","description","Requirement","crimsonScourge","runicPower","runes","marrowrend","deathsCaress","consumption","bonestorm","bloodPlague","markOfBlood","boneShield","PreparationRule","BoneShieldStacksBySeconds","boneShieldStacks","lastBoneShieldStack","lastBoneShieldUpdate","start_time","Array","from","length","MAX_BONE_SHIELD_STACKS","x","handleStacks","applybuffstack","removebuff","removebuffstack","fightend","push","type","EventType","FightEnd","currentStacks","avgStacks","forEach","elem","index","reduce","a","b","BoneShield","dropdown","className","Object","values","boneShieldTimesByStack","map","e","i","key","formatDuration","boneShieldTimesByStacks","statTracker","StatTracker","BoneShieldTimesByStacks","MarrowrendUsage","currentBoneShieldStacks","currentBoneShieldBuffer","lastMarrowrendCast","bsStacksWasted","botdStacksWasted","refreshMRCasts","totalMRCasts","badMRCasts","hasBonesOfTheDamned","refreshAtStacks","bonesOfTheDamnedProc","totalStacksGenerated","onRemoveBuff","onRemoveBuffStack","stack","durationLeft","badCast","wasted","toFixed","BONES_OF_THE_DAMNED","meta","isInefficientCast","inefficientCastReason","isEnhancedCast","enhancedCastReason","botDDisclaimer","wastedbonesOfTheDamnedProcs","wastedBoneShieldStacksPercent","DeathsCaress","dcCasts","spellsThatShouldBeUsedFirst","hadAnotherRangedSpell","some","isAvailable","playerPosition","y","enemyPosition","x1","y1","x2","y2","Math","sqrt","averageCastSuggestionThresholds","badDcCasts","badCasts","calculateDistance","Bonestorm","bsCasts","totalBonestormDamage","BONESTORM_HIT","resource","classResources","find","RESOURCE_TYPES","RUNIC_POWER","cost","hits","SUGGESTED_MIN_TARGETS_FOR_BONESTORM","TalentStatisticBox","talent","OPTIONAL","value","getPercentageOfTotalDamageDone","label","bonestormTooltip","filter","val","goodBonestormCasts","totalBonestormCasts","tooltipRows","avgDamage","formatNumber","avgHits","rpCost","MarkOfBlood","Consumption","AoESpellEfficiency","RunicPowerTracker","totalCooldownReduction","totalCooldownReductionWasted","getResource","reduceCooldown","OSSUARY","RED_THIRST_TALENT","reduction","effectiveReduction","ResourceTracker","RunicPowerDetails","wastedPercent","runicPowerTracker","generated","BoringResourceValue","title","url","render","Panel","ResourceBreakdown","tracker","showSpenders","Checklist","Component","combatants","selected","preparationRuleAnalyzer","efficiencySuggestionThresholds","runicPowerDetails","runeTracker","suggestionThresholdsEfficiency","marrowrendUsage","hitSuggestionThreshold","bloodplagueUptime","markOfBloodUptime","BaseChecklist","Combatants","CastEfficiency","alwaysBeCasting","PreparationRuleAnalyzer","BoneStorm","MarkOfBloodUptime","RuneTracker","ALLOWED_CASTS_DURING_DRW","DancingRuneWeapon","castsDuringDRW","undefined","abilities","getAbility","Fragment","SuggestionThresholds","goodDRWSpells","goodDRWCasts","includes","spellLinks","InitialMarrowrendCast","firstMRCast","firstMRCastWithoutDRW","initialMRThresholds","isTrue","isEqual","DeathStrikeTiming","selfHealSpell","DEATH_STRIKE_HEAL","tabTitle","tabURL","SelfHealTimingGraph","MitigationCheck","buffCheckPhysical","buffCheckMagical","buffCheckPhysAndMag","BLOOD_SHIELD","CoreMitigationCheck","RedThirst","casts","STATISTIC_CATEGORY","TALENTS","wastedReduction","averageReduction","cooldownReduction","cooldownReductionWasted","Hemostasis","buffedDeathStrikes","unbuffedDeathStrikes","buffStack","usedBuffs","wastedBuffs","gainedBuffs","HEMOSTASIS_TALENT","calculateEffectiveHealing","spellID","calculateEffectiveDamage","averageIncrease","FoulBulwark","FOUL_BULWARK_TALENT","averageFoulBullwark","averageBoneShieldStacks","Heartbreaker","rpGains","hsCasts","HEARTBREAKER_TALENT","energize","HEARTBREAKER","onEnergize","resourceChangeType","resourceChange","totalRPGained","floor","averageHearStrikeHits","Bloodworms","totalSummons","poppedEarly","wormID","bloodworm","BLOODWORMS_TALENT","summon","BLOODWORM","onSummon","SELECTED_PLAYER_PET","instakill","BLOODWORM_DEATH","onInstakill","killedTime","summonedTime","uniqueID","targetInstance","targetID","sourceID","poppedWorms","ItemHealingDone","Tombstone","tombstone","rpGained","rpWasted","absorbSize","totalAbsorbed","onAbsorb","absorb","waste","absorbedWasted","wastedCasts","Tooltip","content","damageTracker","DamageTracker","Voracious","VORACIOUS_TALENT","VORACIOUS","RapidDecomposition","bpDamage","dndDamage","DEATH_AND_DECAY_DAMAGE_TICK","WillOfTheNecropolis","totalWotnAbsorbed","currentWotnAbsorbed","activated","spellDamageId","goodAbsorbCount","nextEvent","WILL_OF_THE_NECROPOLIS_TALENT","onAbsorbed","onDamageTaken","extraAbility","playerHealth","maxHitPoints","absorbToHealthPercent","RelishInBlood","runicPowerGained","runicPowerWasted","healing","overhealing","RELISH_IN_BLOOD_TALENT","RELISH_IN_BLOOD","_relishBuffed","_onHeal","overheal","rpWastePercentage","overhealPercentage","ThresholdStyle","PERCENTAGE","BloodRuneForgeChecker","runeForges","forge","RUNE_OF_THE_STONESKIN_GARGOYLE","SUGGESTION_IMPORTANCE","MAJOR","RUNE_OF_THE_FALLEN_CRUSADER","RUNE_OF_RAZORICE","RUNE_OF_SANGUINATION","RUNE_OF_APOCALYPSE","RUNE_OF_UNENDING_THIRST","RUNE_OF_SPELLWARDING","showSuggestion","activeSuggestion","RUNEFORGING","staticImportance","runeForge","hasWeaponEnchant","Boolean","BOOLEAN","CombatLogParser","CoreCombatLogParser","specModules","mitigationCheck","channeling","globalCooldown","cooldownThroughputTracker","dancingRuneWeapon","initialMarrowrendCast","blooddrinkerTicks","BlooddrinkerTicks","checklist","deathStrikeTiming","runeDetails","RuneDetails","redThirst","boneStorm","hemostasis","foulBulwark","heartbreaker","bloodworms","voracious","rapidDecomposition","willOfTheNecropolis","relishInBlood","runeForgeChecker","RuneForgeChecker","runeOfTheFallenCrusader","RuneOfTheFallenCrusader","runeOfHysteria","RuneOfHysteria","increase","raw","Icon","other","xmlns","viewBox","d","relativeHealIncrease","effectiveHealing","max","others","defaultProps","RemoveBuff","RemoveDebuff","ApplyBuff","ApplyDebuff","ApplyBuffStack","RemoveBuffStack","ApplyDebuffStack","RemoveDebuffStack","Error","calculateMaxCasts","duration","RUNE_IDS","runesReady","_fightend","RUNES","_lastTimestamp","_runesReadySum","MAX_RUNES","onFightend","RUNIC_CORRUPTION","onApplybuff","onRemovebuff","UpdateSpellUsable","onUpdateSpellUsable","runesAvailable","addPassiveRuneRegeneration","prepull","runeCost","OBLITERATE_CAST","OBLITERATION_TALENT","startCooldown","addCharge","changeCooldown","change","trigger","EndCooldown","RestoreCharge","BeginCooldown","AddCooldownCharge","timeFromStart","passiveRunesGained","runesMaxCasts","passiveRunesWasted","runesWasted","runicCorruptionContribution","addPassiveAccelerator","initBuilderAbility","buildersObj","round","spellId","gained","contribution","acceleratorGained","acceleratorWasted","multiplier","remainingCooldown","cooldownRemaining","runeId","longestCooldown","expectedCooldown","getExpectedCooldownDuration","cooldownTriggerEvent","shortestCooldown","beginCooldown","chargesOnCooldown","chargesAvailable","timeSpentAtRuneCount","color","runeEfficiency","runeOneCooldown","getCooldown","runeTwoCooldown","runeThreeCooldown","runeCastEfficiencies","efficiency","accumulator","currentValue","totalCasts","spender","spendersObj","spent","timeSpentAtRune","time","checksPassedMap","Map","checksFailedMap","checksPhysical","checksMagical","debuffCheckPhysical","debuffCheckMagical","debuffCheckPhysAndMag","findByBossId","softMitigationChecks","physical","magical","set","checks","buffCheck","debuffCheck","MAGIC_SCHOOLS","ids","PHYSICAL","tick","hitType","HIT_TYPES","IMMUNE","get","enemy","getEntities","failSum","total","passSum","spellIconId","SHIELD_BLOCK_BUFF","physicalTable","physicalChecks","scope","height","borderless","borderTop","magicalTable","magicalChecks","fontWeight","UNHOLY_STRENGTH_BUFF","averageStrength","RUNE_OF_HYSTERIA","_onEnergize","RUNE_OF_HYSTERIA_BUFF","runicPowerWastedDuringHysteria","gainedSpell","wastedSpell","spec","SPECS","BLOOD_DEATH_KNIGHT","gainedDeathStrikes","wastedDeathStrikes","runicPowerGainedByHysteria","wastedPercentage","potentialRunicPowerGainedByHysteria","potentiallyGainedDeathStrikes","RuneBreakdown","resourceName","prepareGenerated","prepareSpent","totalGenerated","totalWasted","totalSpent","spendersCasts","colSpan","abilityId","width","SpellIcon","noLink","paddingRight","textAlign","propTypes","PropTypes","object","isRequired","bool","data","mark","encoding","field","axis","labelExpr","formatTime","grid","tickMinStep","disableHeight","BaseChart","bonusDmg","totalHits","possibleHits","Infinity","ceil","cooldownS","cooldownMS","lastCast","missedCasts","timeSum","currentTimestamp","maxCasts","_hpEvents","_deathEvents","_selfhealTimestamps","HEALTHSTONE","death","onDeath","onHealTaken","explanation","plot","_deaths","lastHpIndex","findIndex","p","hitPoints","percentage","min","log","_hp","_casts","startingHP","baseEncoding","scale","zero","nice","layer","line","interpolate","strokeWidth","filled","format","hp","concat","deaths","minHeight"],"mappings":"uLAqUeA,E,0KA/TX,IAAMC,EAAYC,KAAKC,kBACvB,MAAO,CACL,CACEC,MAAOC,IAAOC,mBACdC,YAAaF,IAAOC,mBAAmBE,GACvCC,SAAUT,EAAUU,iBAAiBC,UACrCC,SAAU,IACVC,eAAgB,CACdC,YAAY,EACZC,sBAAuB,GACvBC,gBAAiB,mIACjBC,WAAYC,IAAiBC,OAE/BC,kBAAmB,IAErB,CACEhB,MAAOC,IAAOgB,eACdd,YAAaF,IAAOgB,eAAeb,GACnCC,SAAUT,EAAUU,iBAAiBC,UACrCC,SAAU,GACVC,eAAgB,CACdC,YAAY,EACZC,sBAAuB,GACvBC,gBAAiB,mIACjBC,WAAYC,IAAiBC,OAE/BC,kBAAmB,IAErB,CACEhB,MAAOC,IAAOiB,WACdb,SAAUT,EAAUU,iBAAiBa,WACrCX,SAAU,SAAAY,GAAK,OAAI,KAAO,EAAIA,IAC9BC,IAAK,CACHC,KAAM,MAERC,QAAS,EACTd,eAAgB,CACdC,YAAY,EACZC,sBAAuB,IACvBC,gBAAiB,6DAEnBI,kBAAmB,GAErB,CACEhB,MAAOC,IAAOuB,mBACdnB,SAAUT,EAAUU,iBAAiBmB,eACrCC,QAAS7B,EAAU8B,UAAU1B,IAAOuB,mBAAmBpB,IACvDI,SAAU,GACVa,IAAK,CACHC,KAAM,MAERN,kBAAmB,GAErB,CACEhB,MAAOC,IAAO2B,oBACdvB,SAAUT,EAAUU,iBAAiBmB,eACrCtB,YAAaF,IAAO4B,yBAAyBzB,GAC7CiB,IAAK,CACHC,KAAM,MAERd,SAAU,IACVC,eAAgB,CACdC,YAAY,EACZC,sBAAuB,GACvBC,gBAAiB,iEAEnBI,kBAAmB,GAErB,CACEhB,MAAOC,IAAO6B,oBACdzB,SAAUT,EAAUU,iBAAiBa,WACrCX,SAAU,GACVa,IAAK,CACHC,KAAM,MAERI,QAAS7B,EAAU8B,UAAU1B,IAAO6B,oBAAoB1B,IACxDK,eAAgB,CACdC,YAAY,EACZC,sBAAuB,GACvBC,gBAAiB,yHAEnBI,kBAAmB,GAErB,CACEhB,MAAOC,IAAO8B,aACd1B,SAAUT,EAAUU,iBAAiBa,WACrCE,IAAK,CACHC,KAAM,MAERN,kBAAmB,GAErB,CACEhB,MAAOC,IAAO+B,cACd3B,SAAUT,EAAUU,iBAAiBa,WACrCE,IAAK,CACHC,KAAM,MAERN,kBAAmB,GAErB,CACEhB,MAAOC,IAAOgC,gBACd5B,SAAUT,EAAUU,iBAAiBa,WACrCE,IAAK,CACHC,KAAM,MAERI,QAAS7B,EAAU8B,UAAU1B,IAAOiC,2BAA2B9B,IAC/DI,SAAU,GACVC,eAAgB,CACdC,YAAY,EACZC,sBAAuB,IAEzBK,kBAAmB,GAGrB,CACEhB,MAAOC,IAAOgC,gBACd5B,SAAUT,EAAUU,iBAAiBa,WACrCE,IAAK,CACHC,KAAM,MAERI,SAAU7B,EAAU8B,UAAU1B,IAAOiC,2BAA2B9B,IAChEI,SAAU,GACVQ,kBAAmB,GAErB,CACEhB,MAAOC,IAAOkC,aACd9B,SAAUT,EAAUU,iBAAiBa,WACrCE,IAAK,CACHC,KAAM,MAERN,kBAAmB,GAErB,CACEhB,MAAOC,IAAOmC,WACdjC,YAAaF,IAAOoC,YAAYjC,GAChCC,SAAUT,EAAUU,iBAAiBa,WACrCE,IAAK,CACHC,KAAM,MAERN,kBAAmB,GAErB,CACEhB,MAAOC,IAAOqC,iBACdnC,YAAaF,IAAOqC,iBAAiBlC,GACrCC,SAAUT,EAAUU,iBAAiBC,UACrCC,SAAUX,EAAU8B,UAAU1B,IAAOsC,yBAAyBnC,IAAM,GAAU,GAC9EK,eAAgB,CACdC,YAAY,EACZC,sBAAuB,GACvBC,gBAAiB,mIACjBC,WAAYC,IAAiBC,OAE/BC,kBAAmB,IAErB,CACEhB,MAAOC,IAAOuC,YACdnC,SAAUT,EAAUU,iBAAiBmC,QACrCjC,SAAU,IAEZ,CACER,MAAOC,IAAOyC,aACdrC,SAAUT,EAAUU,iBAAiBmC,QACrCjC,SAAU,GAEZ,CACER,MAAOC,IAAO0C,WACdtC,SAAUT,EAAUU,iBAAiBmC,QACrCpB,IAAK,CACHC,KAAM,KAERd,SAAU,GACVQ,kBAAmB,IAErB,CACEhB,MAAOC,IAAO2C,eACdvC,SAAUT,EAAUU,iBAAiBmC,QACrCjC,SAAU,GACVQ,kBAAmB,IAErB,CACEhB,MAAOC,IAAO4C,mBACdnB,QAAS7B,EAAU8B,UAAU1B,IAAO4C,mBAAmBzC,IACvDC,SAAUT,EAAUU,iBAAiBmC,QACrCpB,IAAK,CACHC,KAAM,MAERd,SAAU,GACVQ,kBAAmB,IAErB,CACEhB,MAAOC,IAAO6C,iBACdzC,SAAUT,EAAUU,iBAAiBmC,QACrCpB,IAAK,CACHC,KAAM,MAERd,SAAUX,EAAU8B,UAAU1B,IAAO8C,wBAAwB3C,IAAM,GAAK,IACxEY,kBAAmB,IAErB,CACEhB,MAAOC,IAAO+C,WACd3C,SAAUT,EAAUU,iBAAiBmC,QACrCpB,IAAK,CACHC,KAAM,OAGV,CACEtB,MAAOC,IAAOgD,WACd5C,SAAUT,EAAUU,iBAAiBmC,QACrCjC,SAAU,GACVa,IAAK,CACHC,KAAM,OAGV,CACEtB,MAAOC,IAAOiD,eACd7C,SAAUT,EAAUU,iBAAiB6C,OACrC9B,IAAK,CACHC,KAAM,OAGV,CACEtB,MAAOC,IAAOmD,uBACd/C,SAAUT,EAAUU,iBAAiB+C,UACrC7C,SAAU,KAEZ,CACER,MAAOC,IAAOqD,gBACdnD,YAAaF,IAAOsD,qBAAqBnD,GACzCC,SAAUT,EAAUU,iBAAiBC,UACrCC,SAAU,IACVa,IAAK,KACLmC,aAAa,GAEf,CACExD,MAAOC,IAAOwD,qBACdpD,SAAUT,EAAUU,iBAAiBa,WACrCO,QAAS7B,EAAU8B,UAAU1B,IAAOwD,sBACpCjD,SAAU,EACVa,IAAK,CACHC,KAAM,MAERN,kBAAmB,IAErB,CACEhB,MAAOC,IAAOyD,iBACdrD,SAAUT,EAAUU,iBAAiBC,UACrCmB,QAAS7B,EAAU8B,UAAU1B,IAAOyD,iBAAiBtD,IACrDI,SAAU,GACVa,IAAK,CACHC,KAAM,MAERb,eAAgB,CACdC,YAAY,EACZC,sBAAuB,GACvBC,gBAAiB,mIACjBC,WAAYC,IAAiBC,OAE/BC,kBAAmB,IAErB,CACEhB,MAAOC,IAAO0D,SACdxD,YAAaF,IAAO0D,SAASvD,GAC7BC,SAAUT,EAAUU,iBAAiBC,UACrCC,SAAU,GACVe,QAAS,EACTd,eAAgB,CACdC,YAAY,EACZC,sBAAuB,GACvBC,gBAAiB,mIACjBC,WAAYC,IAAiBC,OAE/BC,kBAAmB,IAErB,CACEhB,MAAOC,IAAO2D,iBACdvD,SAAUT,EAAUU,iBAAiBa,WACrCO,QAAS7B,EAAU8B,UAAU1B,IAAO2D,iBAAiBxD,IACrDI,SAAU,GACVe,QAAS,EACTd,eAAgB,CACdC,YAAY,EACZC,sBAAuB,GACvBC,gBAAiB,kDACjBC,WAAYC,IAAiBC,OAE/BC,kBAAmB,IAErB,CACEhB,MAAOC,IAAO4D,iBACdxD,SAAUT,EAAUU,iBAAiBwD,eACrCpC,QAAS7B,EAAU8B,UAAU1B,IAAO4D,iBAAiBzD,IACrDI,SAAU,GACVa,IAAK,CACHC,KAAM,MAERN,kBAAmB,GAErB,CACEhB,MAAOC,IAAO8D,OACd1D,SAAUT,EAAUU,iBAAiB0D,OACrCxD,SAAU,SAAAY,GAAK,OAAI,IAAM,EAAIA,IAC7BG,QAAS,GAEX,CACEvB,MAAOC,IAAOgE,OACd5D,SAAUT,EAAUU,iBAAiB0D,OACrCxD,SAAU,SAAAY,GAAK,OAAI,IAAM,EAAIA,IAC7BG,QAAS,GAEX,CACEvB,MAAOC,IAAOiE,OACd7D,SAAUT,EAAUU,iBAAiB0D,OACrCxD,SAAU,SAAAY,GAAK,OAAI,IAAM,EAAIA,IAC7BG,QAAS,Q,GA3TO4C,K,0CC4CTC,E,kDA1Cb,WAAYC,GAAU,IAAD,8BACnB,cAAMA,IACDC,iBAAiBC,IAAOC,YAAYC,GAAGC,KAAkB,EAAKC,eACnE,EAAKL,iBAAiBC,IAAOK,aAAaH,GAAGC,KAAkB,EAAKG,gBAHjD,E,mDAKdC,GACDA,EAAMC,QAAQC,OAAS/E,IAAO6B,oBAAoB1B,IAItD,8DAAa0E,K,oCAGDA,EAAOC,GACfjF,KAAKmF,kBAAkBhF,IAAO6B,oBAAoB1B,IACpDN,KAAKoF,WAAWJ,GAEhB,qEAAoBA,EAAOC,K,oCAIjBD,GACRA,EAAMC,QAAQC,OAAS/E,IAAO6B,oBAAoB1B,IAGtDN,KAAKqF,aAAaL,K,qCAKLA,GACTA,EAAMC,QAAQC,OAAS/E,IAAO6B,oBAAoB1B,IAGjDN,KAAKmF,kBAAkBhF,IAAO6B,oBAAoB1B,KAIvDN,KAAKoF,WAAWJ,O,GAvCKM,KCQVC,E,qKATNP,GACDA,EAAMC,QAAQC,OAAS/E,IAAO6B,oBAAoB1B,IAItD,8DAAa0E,O,UANYQ,G,gDCgCdC,E,0KAZDC,GACV,IAAMC,EAAO3F,KAAK4F,MAAMD,KAEnBA,GAASA,EAAKE,MAAMC,2BACvBJ,EAAK1F,KAAK+F,8BAA8BC,eAAc,SAACC,EAASC,EAAQC,GAAlB,OAAkCF,EAAQ,+NAA0L,kBAACG,EAAA,EAAD,CAAW9F,GAAIH,IAAO6B,oBAAoB1B,KAApO,OAA8O,kBAAC8F,EAAA,EAAD,CAAW9F,GAAIH,IAAOiB,WAAWd,OAC1W+F,KAAK,wBACLH,OAAOI,OAAKC,EAAE,gGAA8DC,YAAiBN,OAC7FC,YAHmF,WAGnEK,YAAiBL,GAHkD,0B,mDAf1F,MAAO,CACLD,OAAQlG,KAAKyG,mBACbC,cAAe,CACbC,MAAO,GACPC,QAAS,GACTC,MAAO,IAETC,MAAO,kB,GATiBC,K,iBCPxBC,E,4HAAkCC,KAAlCD,EACGE,e,sBACFD,IAA8BC,gB,CACjC,CACEhH,MAAOC,IAAO4B,yBACdoF,QAAS,CACPC,IAAuBC,SAI3B,CACEnH,MAAOC,IAAOgB,eACdgG,QAAS,CACPC,IAAuBE,QACvBF,IAAuBG,cAI3B,CACErH,MAAOC,IAAOqC,iBACd2E,QAAS,CACPC,IAAuBI,aAOhBR,Q,6CCnBTS,E,0KAqBQ/B,GACVA,EAAK1F,KAAK0H,4BACL1B,eAAc,SAACC,EAASC,EAAQC,GAAlB,OAAkCF,EAAQ,4GACpDI,KAAKlG,IAAOwH,aAAatB,MACzBH,OAAOI,OAAKC,EAAE,qGAAwDC,YAAiBN,OACvFC,YAH4C,WAG5BK,YAAiBL,GAHW,0B,kCAOrD,OACE,kBAACyB,EAAA,EAAD,CACEC,KAAK,QACLC,SAAUC,IAAgBC,KAAK,IAE/B,kBAACC,EAAA,EAAD,CAAsB/H,MAAOC,IAAOwH,cAClC,oCACE,kBAACO,EAAA,EAAD,MADF,IACkB1B,YAAiBxG,KAAKmI,QADxC,KACkD,8C,6BA/BxD,OAAOnI,KAAKoI,QAAQC,cAAclI,IAAOwH,aAAarH,IAAMN,KAAK4F,MAAM0C,gB,iDAIvE,MAAO,CACLpC,OAAQlG,KAAKmI,OACbI,WAAY,CACV5B,MAAO,IACPC,QAAS,GACTC,MAAO,IAETC,MAAO,kB,GAjBmB0B,KAA1Bf,EACGgB,aAAe,CACpBL,QAASM,KA2CEjB,Q,kBCzCTkB,E,kDAUJ,WAAYpE,GAAU,IAAD,8BACnB,cAAMA,IALRqE,2BAA6B,EAIR,EAHrBC,yBAA2B,EAGN,EAFrBC,iBAAkB,EAIhB,EAAKtE,iBAAiBC,IAAOsE,KAAKpE,GAAGC,KAAiB1E,MAAMC,IAAOgC,iBAAkB,EAAK6G,QAC1F,EAAKxE,iBAAiBC,IAAOwE,UAAUtE,GAAGC,KAAiB1E,MAAMC,IAAO+I,iBAAkB,EAAKC,aAH5E,E,mDAMdnE,GACDhF,KAAKC,kBAAkBmJ,QAAQjJ,IAAO+I,gBAAgB5I,GAAI0E,EAAMqE,aAClErJ,KAAK6I,0BAA4B,EAC7B7I,KAAK8I,kBACP9I,KAAK8I,iBAAkB,M,kCAKjB9D,GACVhF,KAAK4I,4BAA8B,EAC/B5I,KAAKsJ,YAAYC,aAAapJ,IAAOgC,gBAAgB7B,KACvDN,KAAKsJ,YAAYE,YAAYrJ,IAAOgC,gBAAgB7B,IAElD0E,EAAMqE,UAhCoB,IAgCoBrJ,KAAK4F,MAAMC,MAAM4D,WACjEzJ,KAAK8I,iBAAkB,K,kCAwCfpD,GACP1F,KAAKC,kBAAkB4B,UAAU1B,IAAOiC,2BAA2B9B,KAGtEoF,EAAK1F,KAAK0J,sBAAsB1D,eAAc,SAACC,EAASC,EAAQC,GAAlB,OAAkCF,EAAQ,uDAAkB,kBAACG,EAAA,EAAD,CAAW9F,GAAIH,IAAO+I,gBAAgB5I,KAAxD,2CACnF+F,KAAKlG,IAAO+I,gBAAgB7C,MAC5BH,OAAOI,OAAKC,EAAE,sHAAgEC,YAAiBN,OAC/FC,YAH2E,WAG3DK,YAAiBL,GAH0C,0B,kCAOhF,OACE,kBAACyB,EAAA,EAAD,CACEE,SAAUC,IAAgBC,KAAK,GAC/BH,KAAK,WACL8B,QAAO,UAAK3J,KAAK4J,0BAAV,mBAA8C5J,KAAK4I,2BAAnD,mBAEP,kBAACX,EAAA,EAAD,CAAsB/H,MAAOC,IAAO+I,iBAClC,oCACG1C,YAAiBxG,KAAK6J,kCADzB,MAC8D,oD,gDAtDpE,IAAMC,EAAc9J,KAAK4I,2BAA6B5I,KAAK6I,yBAC3D,OAAI7I,KAAK8I,gBACAgB,EAAc,EAEhBA,I,uDAIP,OAAO9J,KAAK4J,0BAA4B5J,KAAK4I,6B,qDAI7C,MAAO,CACL1C,OAAQ,EAAIlG,KAAK6J,iCACjBtB,WAAY,CACV5B,MAAO,IACPC,QAAS,GACTC,MAAO,KAETC,MAAO,gB,2CAKT,MAAO,CACLZ,OAAQlG,KAAK6J,iCACbnD,cAAe,CACbC,MAAO,IACPC,QAAS,GACTC,MAAO,KAETC,MAAO,kB,GAnEgB0B,KAAvBG,EACGF,aAAe,CACpBsB,eAAgBC,IAChBV,YAAaW,KA+FFtB,QCtGTuB,E,kDAaJ,aAAsB,IAAD,iDAANC,EAAM,yBAANA,EAAM,uBACnB,+BAASA,KATXC,YAAc,EAQO,EAPrBC,YAAc,EAOO,EANrBC,cAAgB,EAMK,EALrBC,aAAe,EAKM,EAJrBC,aAAe,EAIM,EAHrBC,YAAc,EAGO,EAFrBC,aAAe,EAIb,EAAKC,OAAS,EAAK1K,kBAAkB4B,UAAU1B,IAAO6B,oBAAoB1B,IAC1E,EAAKkE,iBAAiBC,IAAOsE,KAAKpE,GAAGC,KAAiB1E,MAAMC,IAAO6B,qBAAsB,EAAKgH,QAC9F,EAAKxE,iBAAiBC,IAAOmG,OAAOjG,GAAGC,KAAiB1E,MAAMC,IAAO6B,qBAAsB,EAAK6I,UAChG,EAAKrG,iBAAiBC,IAAOqG,KAAKC,GAAGnG,KAAiB1E,MAAMC,IAAO6B,qBAAsB,EAAKgJ,QAC9F,EAAKxG,iBAAiBC,IAAOK,aAAaH,GAAGC,KAAiB1E,MAAMC,IAAO6B,qBAAsB,EAAK+C,gBANnF,E,mDASdC,GACLhF,KAAKqK,aAAe,I,+BAGbrF,GACPhF,KAAKyK,aAAezF,EAAMiG,QAAUjG,EAAMkG,UAAY,GACtDlL,KAAKsK,eAAiB,I,6BAGjBtF,GACLhF,KAAK0K,eAAiB1F,EAAMiG,QAAU,IAAMjG,EAAMkG,UAAY,K,qCAGjDlG,GACThF,KAAKsK,cAtCuB,IAuC9BtK,KAAKuK,cAvCyB,EAuCsBvK,KAAKsK,cACzDtK,KAAKwK,cAAgB,GAEvBxK,KAAKsK,cAAgB,I,kCAKrB,OADAtK,KAAKoK,YA9C2B,EA8CbpK,KAAKqK,YAEtB,kBAACzC,EAAA,EAAD,CACEE,SAAUC,IAAgBC,KAAK,GAC/BH,KAAK,WACL8B,QACE,gDACW,gCAAS3J,KAAKuK,cADzB,WACuD,gCAASvK,KAAKoK,aADrE,UACiG,6BAC/F,2CAFF,IAE4Be,YAAgBnL,KAAKyK,aAFjD,MAEkEzK,KAAK4F,MAAMwF,qBAAqBpL,KAAKyK,aAAa,6BAClH,4CAHF,IAG6BU,YAAgBnL,KAAK0K,cAHlD,MAGoE1K,KAAK4F,MAAMyF,sBAAsBrL,KAAK0K,cAAc,+BAI1H,kBAACzC,EAAA,EAAD,CAAsB/H,MAAOC,IAAO6B,qBAClC,oCACGhC,KAAKwK,aADR,MACyBxK,KAAKqK,YAD9B,IAC2C,kE,GA3D1B7B,KAArB0B,EACGzB,aAAe,CACpBsB,eAAgBC,KAiELE,Q,wFC6CAoB,EAjHmB,SAAC,GAA+C,IAA7CvL,EAA4C,EAA5CA,UAAWY,EAAiC,EAAjCA,eAAgB4K,EAAiB,EAAjBA,WACxDC,EAAqB,SAAAC,GAAK,OAC9B,kBAACC,EAAA,EAAD,eACE/K,eAAgBA,EAAegL,4BAA4BF,EAAMvL,QAC7DuL,KAOR,OACE,kBAAC,IAAD,KACE,kBAACG,EAAA,EAAD,CACEC,KAAK,2BACLC,YAAY,uEAEZ,kBAACN,EAAD,CAAoBtL,MAAOC,IAAOiB,WAAWd,KAC5CP,EAAU8B,UAAU1B,IAAOiC,2BAA2B9B,KAAO,kBAACkL,EAAD,CAAoBtL,MAAOC,IAAOgC,gBAAgB7B,KAC/GP,EAAU8B,UAAU1B,IAAO6B,oBAAoB1B,KAAO,kBAACkL,EAAD,CAAoBtL,MAAOC,IAAO6B,oBAAoB1B,KAC5GP,EAAU8B,UAAU1B,IAAOiC,2BAA2B9B,KACrD,kBAACyL,EAAA,EAAD,CACEF,KAAM,oCAAE,kBAACzF,EAAA,EAAD,CAAW9F,GAAIH,IAAO+I,gBAAgB5I,KAAxC,gBACNiL,WAAYA,EAAWS,kBAI7B,kBAACJ,EAAA,EAAD,CACEC,KAAK,gCACLC,YAAY,0OAEZ,kBAACC,EAAA,EAAD,CACEF,KAAK,yBACLN,WAAYA,EAAWU,aAEzB,kBAACF,EAAA,EAAD,CACEF,KAAK,kBACLN,WAAYA,EAAWW,QAEzB,kBAACH,EAAA,EAAD,CACEF,KAAM,oCAAE,kBAACzF,EAAA,EAAD,CAAW9F,GAAIH,IAAOmC,WAAWhC,KAAnC,eACNiL,WAAYA,EAAWY,aAEzB,kBAACJ,EAAA,EAAD,CACEF,KAAM,oCAAE,kBAACzF,EAAA,EAAD,CAAW9F,GAAIH,IAAO+B,cAAc5B,KAAtC,eACNiL,WAAYA,EAAWa,gBAI3B,kBAACR,EAAA,EAAD,CACEC,KAAK,+BACLC,YAAY,kJAEZ,kBAACN,EAAD,CAAoBtL,MAAOC,IAAO2B,oBAAoBxB,KACrDP,EAAU8B,UAAU1B,IAAOuB,mBAAmBpB,KAC7C,kBAACyL,EAAA,EAAD,CACEF,KAAM,gDAAW,kBAACzF,EAAA,EAAD,CAAW9F,GAAIH,IAAOuB,mBAAmBpB,KAApD,SACNiL,WAAYA,EAAWc,cAG1BtM,EAAU8B,UAAU1B,IAAO4D,iBAAiBzD,KAC3C,kBAACyL,EAAA,EAAD,CACEF,KAAM,oCAAE,kBAACzF,EAAA,EAAD,CAAW9F,GAAIH,IAAO4D,iBAAiBzD,KAAzC,eACNiL,WAAYA,EAAWe,aAI7B,kBAACV,EAAA,EAAD,CACEC,KAAK,kCACLC,YAAY,4FAEZ,kBAACC,EAAA,EAAD,CACEF,KAAM,oCAAE,kBAACzF,EAAA,EAAD,CAAW9F,GAAIH,IAAOwH,aAAarH,KAArC,WACNiL,WAAYA,EAAWgB,cAExBxM,EAAU8B,UAAU1B,IAAOwD,qBAAqBrD,KAC/C,kBAACyL,EAAA,EAAD,CACEF,KAAM,oCAAE,kBAACzF,EAAA,EAAD,CAAW9F,GAAIH,IAAOwD,qBAAqBrD,KAA7C,WACNiL,WAAYA,EAAWiB,cAG3B,kBAACT,EAAA,EAAD,CACEF,KAAM,oCAAE,kBAACzF,EAAA,EAAD,CAAW9F,GAAIH,IAAOoC,YAAYjC,KAApC,WACNiL,WAAYA,EAAWkB,cAO3B,kBAACb,EAAA,EAAD,CACEC,KAAK,+BACLC,YAAY,gGAEZ,kBAACN,EAAD,CAAoBtL,MAAOC,IAAOgB,eAAeb,KACjD,kBAACkL,EAAD,CAAoBtL,MAAOC,IAAOC,mBAAmBE,KACrD,kBAACkL,EAAD,CAAoBtL,MAAOC,IAAOqC,iBAAiBlC,KAClDP,EAAU8B,UAAU1B,IAAO0D,SAASvD,KAAO,kBAACkL,EAAD,CAAoBtL,MAAOC,IAAO0D,SAASvD,KACtFP,EAAU8B,UAAU1B,IAAOyD,iBAAiBtD,KAAO,kBAACkL,EAAD,CAAoBtL,MAAOC,IAAOyD,iBAAiBtD,MAEzG,kBAACoM,EAAA,EAAD,CAAiBnB,WAAYA,M,oBC/DpBoB,G,kDAjCb,aAAsB,IAAD,iDAANxC,EAAM,yBAANA,EAAM,uBACnB,+BAASA,KALXyC,iBAAmB,GAIE,EAHrBC,oBAAsB,EAGD,EAFrBC,qBAAuB,EAAKlH,MAAMC,MAAMkH,WAItC,EAAKH,iBAAmBI,MAAMC,KAAK,CAAEC,OAAQC,KAA8B,SAAAC,GAAC,MAAI,MAEhF,EAAK5I,iBAAiBC,IAAOwE,UAAUtE,GAAGC,KAAiB1E,MAAMC,IAAOoC,aAAc,EAAK8K,cAC3F,EAAK7I,iBAAiBC,IAAO6I,eAAe3I,GAAGC,KAAiB1E,MAAMC,IAAOoC,aAAc,EAAK8K,cAChG,EAAK7I,iBAAiBC,IAAO8I,WAAW5I,GAAGC,KAAiB1E,MAAMC,IAAOoC,aAAc,EAAK8K,cAC5F,EAAK7I,iBAAiBC,IAAO+I,gBAAgB7I,GAAGC,KAAiB1E,MAAMC,IAAOoC,aAAc,EAAK8K,cACjG,EAAK7I,iBAAiBC,IAAOgJ,SAAU,EAAKJ,cARzB,E,yDAWRrI,GACXhF,KAAK4M,iBAAiB5M,KAAK6M,qBAAqBa,KAAK1I,EAAMqE,UAAYrJ,KAAK8M,sBACxE9H,EAAM2I,OAASC,IAAUC,WAG7B7N,KAAK8M,qBAAuB9H,EAAMqE,UAClCrJ,KAAK6M,oBAAsBiB,aAAc9I,M,8CAIzC,OAAOhF,KAAK4M,mB,8CAGiB,IAAD,OACxBmB,EAAY,EAIhB,OAHA/N,KAAK4M,iBAAiBoB,SAAQ,SAACC,EAAMC,GACnCH,GAAaE,EAAKE,QAAO,SAACC,EAAGC,GAAJ,OAAUD,EAAIC,IAAG,GAAK,EAAKzI,MAAM0C,cAAgB4F,KAErEH,M,GAlC6BvF,KCIlC8F,G,0KA2BQ5I,GACVA,EAAK1F,KAAK0H,4BACP1B,eAAc,SAACC,EAASC,EAAQC,GAAlB,OAAkCF,EAAQ,4EACpDI,KAAKlG,IAAOoC,YAAY8D,MACxBH,OAAOI,OAAKC,EAAE,mGAAuDC,YAAiBN,OACtFC,YAH4C,WAG5BK,YAAiBL,GAHW,0B,kCAMxC,IAAD,OAEV,OACE,kBAACyB,EAAA,EAAD,CACEE,SAAUC,IAAgBC,KAAK,GAC/BH,KAAK,WACL0G,SACE,oCACE,2BAAOC,UAAU,yBACf,+BACE,4BACE,sCACA,wCACA,0CAGJ,+BACGC,OAAOC,OAAO1O,KAAK2O,wBAAwBC,KAAI,SAACC,EAAGC,GAAJ,OAC9C,wBAAIC,IAAKD,GACP,4BAAKA,GACL,4BAAKE,YAAeH,EAAEV,QAAO,SAACC,EAAGC,GAAJ,OAAUD,EAAIC,IAAG,GAAK,MACnD,4BAAK7H,YAAiBqI,EAAEV,QAAO,SAACC,EAAGC,GAAJ,OAAUD,EAAIC,IAAG,GAAK,EAAKzI,MAAM0C,eAAhE,aAQZ,kBAACL,EAAA,EAAD,CAAsB/H,MAAOC,IAAOoC,aAClC,oCACE,kBAAC2F,EAAA,EAAD,MADF,IACkB1B,YAAiBxG,KAAKmI,QADxC,KACkD,8C,6CA1DxD,OAAOnI,KAAKiP,wBAAwBA,0B,6BAIpC,OAAOjP,KAAKC,kBAAkBoI,cAAclI,IAAOoC,YAAYjC,IAAMN,KAAK4F,MAAM0C,gB,iDAIhF,MAAO,CACLpC,OAAQlG,KAAKmI,OACbI,WAAY,CACV5B,MAAO,IACPC,QAAS,GACTC,MAAO,IAETC,MAAO,kB,GAvBY0B,KAAnB8F,GAEG7F,aAAe,CACpByG,YAAaC,KACbF,wBAAyBG,IAsEdd,UCnETe,G,kDA6BJ,aAAsB,IAAD,iDAANlF,EAAM,yBAANA,EAAM,uBACnB,+BAASA,KAnBXmF,wBAA0B,EAkBL,EAjBrBC,wBAA0B,EAiBL,EAhBrBC,mBAAqB,EAgBA,EAdrBC,eAAiB,EAcI,EAbrBC,iBAAmB,EAaE,EAXrBC,eAAiB,EAWI,EAVrBC,aAAe,EAUM,EARrBC,WAAa,EAQQ,EANrBC,qBAAsB,EAMD,EALrBC,gBA9BwB,EAmCH,EAHrBC,qBAAuB,EAGF,EAFrBC,qBAAuB,EAIrB,EAAKzL,iBAAiBC,IAAOwE,UAAU8B,GAAGnG,KAAiB1E,MAAMC,IAAOoC,aAAc,EAAK4G,aAC3F,EAAK3E,iBAAiBC,IAAO6I,eAAevC,GAAGnG,KAAiB1E,MAAMC,IAAOoC,aAAc,EAAK4G,aAChG,EAAK3E,iBAAiBC,IAAO8I,WAAWxC,GAAGnG,KAAiB1E,MAAMC,IAAOoC,aAAc,EAAK2N,cAC5F,EAAK1L,iBAAiBC,IAAO+I,gBAAgBzC,GAAGnG,KAAiB1E,MAAMC,IAAOoC,aAAc,EAAK4N,mBACjG,EAAK3L,iBAAiBC,IAAOsE,KAAKpE,GAAGC,KAAiB1E,MAAMC,IAAOmC,YAAa,EAAK0G,QANlE,E,wDASThE,GACVhF,KAAKuP,yBAA2B,EAChCvP,KAAKsP,wBAA0BtK,EAAMoL,Q,mCAG1BpL,GACXhF,KAAKsP,wBAA0B,I,wCAGftK,GAChBhF,KAAKuP,wBAA0B,EAC/BvP,KAAKsP,wBAA0BtK,EAAMoL,Q,6BAGhCpL,GAEL,IAAMqL,EAzDU,IAyDoBrL,EAAMqE,UAAYrJ,KAAKwP,oBAAsB,IACjF,GAAIa,GA3DmB,EA4DrBrQ,KAAK2P,gBAAkB,MAClB,CACL,IAAM/C,EAAmB5M,KAAKsP,wBAA0BtP,KAAKuP,wBACzDe,EAAU,GAEd,GAAI1D,EAnEgB,EAmEsB,CAExC,IAAM2D,EAjEE,EAiEiBvQ,KAAKuP,wBAC9BvP,KAAK6P,YAAc,EACnB7P,KAAKyP,gBAAkBc,EACvBD,GAAiB,kCAA8B1D,EAA9B,+CAAsFyD,EAAcG,QAAQ,GAA5G,kCAAwID,EAAxI,aAGfvQ,KAAK8P,qBAAuBlD,GA3EZ,IA6ElB5M,KAAK0P,kBAAoB,EACzBY,GAAiB,kCAA8BnQ,IAAOsQ,oBAAoB5E,KAAzD,oCAAyFe,EAAzF,aAGH,KAAZ0D,IACFtL,EAAM0L,KAAO1L,EAAM0L,MAAQ,GAC3B1L,EAAM0L,KAAKC,mBAAoB,EAC/B3L,EAAM0L,KAAKE,sBAAwBN,GAInCtQ,KAAKuP,wBApFG,GAoFkCvP,KAAK8P,sBAEjD9K,EAAM0L,KAAO1L,EAAM0L,MAAQ,GAC3B1L,EAAM0L,KAAKG,gBAAiB,EAC5B7L,EAAM0L,KAAKI,mBAAX,eAAwC3Q,IAAOmC,WAAWuJ,KAA1D,yBAA+E1L,IAAOsQ,oBAAoB5E,MAC1G7L,KAAKgQ,sBAAwB,GAG/BhQ,KAAKiQ,sBAAwBjQ,KAAKuP,wBAClCvP,KAAKuP,wBAA0B,EAC/BvP,KAAKwP,mBAAqBxK,EAAMqE,UAChCrJ,KAAK4P,cAAgB,I,kCAmDXlK,GAAO,IAAD,OAChBA,EAAK1F,KAAK0J,sBACP1D,eAAc,SAACC,EAASC,EAAQC,GAC/B,IAAM4K,EAAiB,EAAKjB,oBAAL,kCAAsD3P,IAAOsQ,oBAAoB5E,KAAjF,WAAiG,GACxH,OAAO5F,EAAQ,kDAAc,EAAK4J,WAAnB,+BA1JG,EA0JH,cAAwF,kBAACzJ,EAAA,EAAD,CAAW9F,GAAIH,IAAOoC,YAAYjC,KAA1H,2CAAyK,EAAKmP,eAA9K,UAAqMsB,EAArM,IAAqN,6BAArN,QAAgO,kBAAC3K,EAAA,EAAD,CAAW9F,GAAIH,IAAOkC,aAAa/B,KAAnQ,0BAAiS,EAAKyP,gBAAtS,sBACZ1J,KAAKlG,IAAOmC,WAAW+D,MACvBH,OAAOI,OAAKC,EAAE,wGAA6DC,YAAiBN,GAA9E,EAAiG/F,IAAOoC,YAAYsJ,SAClI1F,YAHI,UAGW,EAAKsJ,eAHhB,2BAGiD,EAAKQ,qBAHtD,2B,kCAQX,OACE,kBAACrI,EAAA,EAAD,CACEE,SAAUC,IAAgBC,KAAK,GAC/BH,KAAK,WACL8B,QACE,oCACG3J,KAAK2P,eADR,uEAC2F,6BACxF3P,KAAK8P,qBAAuB,oCAAG9P,KAAKgR,4BAAR,eAzKf,EAyKe,cAA+E7Q,IAAOoC,YAAYsJ,KAAlG,uBAA4H1L,IAAOsQ,oBAAoB5E,KAAvJ,UAAmK,8BAC/L7L,KAAK6P,WAHR,yBAvKgB,EAuKhB,kCAG4F7P,KAAKyP,eAHjG,WAGwH,6BAAM,6BAH9H,4CAK4CzP,KAAK+P,gBALjD,+EASF,kBAAC9H,EAAA,EAAD,CAAsB/H,MAAOC,IAAOmC,YAClC,oCACGtC,KAAK6P,WADR,MACuB7P,KAAK4P,aAD5B,IAC0C,iD,4CA3EhD,OAAO5P,KAAKgQ,uB,kDAIZ,OAAOhQ,KAAK0P,mB,qDAIZ,OAAO1P,KAAKiQ,uB,oDAIZ,OAAOjQ,KAAKyP,gBAAkBzP,KAAKiQ,qBAAuBjQ,KAAKyP,kB,sCAI/D,OAAOzP,KAAK4P,e,wCAIZ,OAAO5P,KAAK+P,kB,2CAIZ,MAAO,CACL7J,OAAQlG,KAAKiR,8BACbvK,cAAe,CACbC,MAAO,EACPC,QAAS,GACTC,MAAO,IAETC,MAAO,gB,qDAKT,MAAO,CACLZ,OAAQ,EAAIlG,KAAKiR,8BACjB1I,WAAY,CACV5B,MAAO,EACPC,QAAS,GACTC,MAAO,IAETC,MAAO,kB,GA5IiB0B,KAAxB6G,GAEG5G,aAAe,CACpBsB,eAAgBC,KAiLLqF,UC7LT6B,G,kDAYJ,aAAsB,IAAD,iDAAN/G,EAAM,yBAANA,EAAM,uBACnB,+BAASA,KARXgH,QAAU,EAOW,EANrBpI,KAAO,GAMc,EAJrBqI,4BAA8B,CAC5BjR,IAAOgC,gBAAgB7B,IAKvB,EAAKkE,iBAAiBC,IAAOsE,KAAKpE,GAAGC,KAAiB1E,MAAMC,IAAO+B,eAAgB,EAAK8G,QACxF,EAAKxE,iBAAiBC,IAAOmG,OAAOjG,GAAGC,KAAiB1E,MAAMC,IAAO+B,eAAgB,EAAK2I,UACvF,EAAK5K,kBAAkB4B,UAAU1B,IAAO6B,oBAAoB1B,KAC7D,EAAK8Q,4BAA4B1D,KAAKvN,IAAO6B,oBAAoB1B,IALhD,E,mDASd0E,GAAQ,IAAD,OACNqM,EAAwBrR,KAAKoR,4BAA4BE,MAAK,SAAAzC,GAAC,OAAI,EAAKvF,YAAYiI,YAAY1C,MACtG7O,KAAKmR,SAAW,EAEhBnR,KAAK+I,KAAK2E,KAAK,CACbrE,UAAWrE,EAAMqE,UACjBgI,sBAAuBA,EACvBG,eAAgB,CACdpE,EAAGpI,EAAMoI,EACTqE,EAAGzM,EAAMyM,GAEXC,cAAe,CACbtE,EAAG,EACHqE,EAAG,O,+BAKAzM,GACkB,IAArBhF,KAAK+I,KAAKmE,SAIdlN,KAAK+I,KAAK/I,KAAK+I,KAAKmE,OAAS,GAAGwE,cAAgB,CAC9CtE,EAAGpI,EAAMoI,EACTqE,EAAGzM,EAAMyM,M,wCAIKE,EAAIC,EAAIC,EAAIC,GAC5B,OAAOC,KAAKC,MAAML,EAAKE,IAAOF,EAAKE,IAAOD,EAAKE,IAAOF,EAAKE,IAAO,M,kCAiCxDpM,GAAO,IAAD,OAChBA,EAAK1F,KAAKiS,iCACLjM,eAAc,SAACC,EAASC,EAAQC,GAAlB,OAAkCF,EAAQ,qDAAgB,kBAACG,EAAA,EAAD,CAAW9F,GAAIH,IAAO+B,cAAc5B,KAApD,uEAA8H,kBAAC8F,EAAA,EAAD,CAAW9F,GAAIH,IAAOgC,gBAAgB7B,KAApK,QAA+K,kBAAC8F,EAAA,EAAD,CAAW9F,GAAIH,IAAO6B,oBAAoB1B,KAAzN,+CAA2Q,kBAAC8F,EAAA,EAAD,CAAW9F,GAAIH,IAAOkC,aAAa/B,KAA9S,MACpD+F,KAAKlG,IAAO+B,cAAcmE,MAC1BH,OAAOI,OAAKC,EAAE,iGAA0DC,YAAiB,EAAK0L,WAAa,EAAKf,SAAlG,EAAmHhR,IAAO+B,cAAc2J,SACtJ1F,YAH4C,2B,iCAhCrC,IAAD,OACXgM,EAAW,EAcf,OAZAnS,KAAK+I,KAAKiF,SAAQ,SAAAa,GAEU,IAAtBA,EAAE6C,cAActE,GAAiC,IAAtByB,EAAE6C,cAAcD,IAI9B,EAAKW,kBAAkBvD,EAAE6C,cAActE,EAAGyB,EAAE6C,cAAcD,EAAG5C,EAAE2C,eAAepE,EAAGyB,EAAE2C,eAAeC,IAjErF,IAkEiB5C,EAAEwC,yBAC/Cc,GAAY,MAITA,I,sDAIP,MAAO,CACLjM,OAAQ,EAAKlG,KAAKkS,WAAalS,KAAKmR,QACpC5I,WAAY,CACV5B,MAAO,EACPC,QAAS,IACTC,MAAO,IAETC,MAAO,kB,GAhFc0B,KAArB0I,GACGzI,aAAe,CACpBa,YAAaW,KA2FFiH,U,mBCCAmB,G,kDAxFb,aAAsB,IAAD,iDAANlI,EAAM,yBAANA,EAAM,uBACnB,+BAASA,KAJXmI,QAAU,GAGW,EAFrBC,qBAAuB,EAIrB,EAAK5H,OAAS,EAAK1K,kBAAkB4B,UAAU1B,IAAO4D,iBAAiBzD,IACvE,EAAKkE,iBAAiBC,IAAOsE,KAAKpE,GAAGC,KAAiB1E,MAAMC,IAAO4D,kBAAmB,EAAKiF,QAC3F,EAAKxE,iBAAiBC,IAAOmG,OAAOjG,GAAGC,KAAiB1E,MAAMC,IAAOqS,eAAgB,EAAK3H,UAJvE,E,mDAOd7F,GAAQ,IAAD,EACNyN,EAAQ,UAAGzN,EAAM0N,sBAAT,aAAG,EAAsBC,MAAK,SAAAF,GAAQ,OAAIA,EAAS9E,OAASiF,KAAeC,YAAYvS,MAChGmS,GAILzS,KAAKsS,QAAQ5E,KAAK,CAChBoF,KAAML,EAASK,KACfC,KAAM,O,+BAID/N,GACqB,IAAxBhF,KAAKsS,QAAQpF,QAEflN,KAAKsS,QAAQ5E,KAAK,CAChBoF,KAAM,IACNC,KAAM,KAIV,IAAMtI,EAAczF,EAAMiG,QAAUjG,EAAMkG,UAAY,GACtDlL,KAAKsS,QAAQtS,KAAKsS,QAAQpF,OAAS,GAAG6F,KAAKrF,KAAKjD,GAChDzK,KAAKuS,sBAAwB9H,I,kCAwBnB/E,GACVA,EAAK1F,KAAK0J,sBACP1D,eAAc,SAACC,EAASC,EAAQC,GAAlB,OAAkCF,EAAQ,mDAAc,kBAACG,EAAA,EAAD,CAAW9F,GAAIH,IAAO4D,iBAAiBzD,KAArD,+FAAuJ,kBAAC8F,EAAA,EAAD,CAAW9F,GAAIH,IAAO4D,iBAAiBzD,KAA9L,6GAA8S,kBAAC8F,EAAA,EAAD,CAAW9F,GAAIH,IAAO8B,aAAa3B,KAAjV,cACpD+F,KAAKlG,IAAO4D,iBAAiBsC,MAC7BH,OAAOI,OAAKC,EAAE,yJAAiEC,YAAiBN,GAAuB8M,oCAhEtF,QAiEjC7M,YAH4C,UAG5BK,YAAiBL,GAHW,yB,kCAoBnD,OACE,kBAAC8M,GAAA,EAAD,CACEC,OAAQ/S,IAAO4D,iBAAiBzD,GAChCwH,SAAUC,IAAgBoL,SAAS,GACnCC,MAAK,UAAM5M,YAAiBxG,KAAK4F,MAAMyN,+BAA+BrT,KAAKuS,uBAAtE,MACLe,MAAM,uBACN3J,QAAS3J,KAAKuT,qB,yCA/ClB,OADkBvT,KAAKsS,QAAQkB,QAAO,SAACC,GAAD,OAASA,EAAIV,KAAK7F,QAAUuG,EAAIX,KAAO,MAxCrC,OAyCvB5F,S,0CAIjB,OAAOlN,KAAKsS,QAAQpF,S,2CAIpB,MAAO,CACLhH,OAAQlG,KAAK0T,mBAAqB1T,KAAK2T,oBACvCpL,WAAY,CACV5B,MAAO,EACPC,QAAS,GACTC,MAAO,IAETC,MAAO,gB,uCAaT,IAAM8M,EAAc,GASpB,OARA5T,KAAKsS,QAAQtE,SAAQ,SAACjF,EAAMmF,GAC1B,IAAM2F,EAAYC,YAAc/K,EAAKgK,KAAK5E,QAAO,SAACC,EAAGC,GAAJ,OAAUD,EAAIC,IAAG,GAAKtF,EAAKgK,KAAK7F,QAAW,GACtFzC,EAAcqJ,YAAa/K,EAAKgK,KAAK5E,QAAO,SAACC,EAAGC,GAAJ,OAAUD,EAAIC,IAAG,IAC7D0F,EAAUD,YAAc/K,EAAKgK,KAAK7F,OAASnE,EAAK+J,KAAO,KAAQ,EAAG,GAClEkB,EAASF,YAAa/K,EAAK+J,KAAO,IAExCc,EAAYlG,KAAK,6CAAUQ,EAAQ,EAAlB,SAA4B8F,EAA5B,0BAA2DD,EAA3D,UAA4EA,GAAW,EAAI,GAAK,IAAhG,QAA2GF,EAA3G,cAAkIpJ,EAAlI,UAAqJ,kCAEjKmJ,M,GA5EapL,KCHlByL,G,kDAKJ,aAAsB,IAAD,iDAAN9J,EAAM,yBAANA,EAAM,uBACnB,+BAASA,KACJQ,OAAS,EAAK1K,kBAAkB4B,UAAU1B,IAAOwD,qBAAqBrD,IAFxD,E,wDAqBToF,GACVA,EAAK1F,KAAK0H,4BACL1B,eAAc,SAACC,EAASC,EAAQC,GAAlB,OAAkCF,EAAQ,4CAAO,kBAACG,EAAA,EAAD,CAAW9F,GAAIH,IAAOwD,qBAAqBrD,KAAlD,6BACpD+F,KAAKlG,IAAOwD,qBAAqB0C,MACjCH,OAAOI,OAAKC,EAAE,sGAAwDC,YAAiBN,OACvFC,YAH4C,WAG5BK,YAAiBL,GAHW,0B,kCAOrD,OACE,kBAAC8M,GAAA,EAAD,CACEC,OAAQ/S,IAAOwD,qBAAqBrD,GACpCwH,SAAUC,IAAgBoL,SAAS,GACnCC,MAAK,UAAK5M,YAAiBxG,KAAKmI,QAA3B,MACLmL,MAAM,2B,6BA7BV,OAAOtT,KAAKoI,QAAQC,cAAclI,IAAOwD,qBAAqBrD,IAAMN,KAAK4F,MAAM0C,gB,iDAI/E,MAAO,CACLpC,OAAQlG,KAAKmI,OACbI,WAAY,CACV5B,MAAO,IACPC,QAAS,GACTC,MAAO,IAETC,MAAO,kB,GAtBa0B,KAApByL,GACGxL,aAAe,CACpBL,QAASM,KA4CEuL,UC7CAC,G,kDAPb,aAAsB,IAAD,iDAAN/J,EAAM,yBAANA,EAAM,uBACnB,+BAASA,KACJlF,QAAU9E,IAAOuB,mBACtB,EAAKiJ,OAAS,EAAK1K,kBAAkB4B,UAAU1B,IAAOuB,mBAAmBpB,IAHtD,E,iBAFG6T,G,uCCEpBC,G,kDASJ,aAAsB,IAAD,iDAANjK,EAAM,yBAANA,EAAM,uBACnB,+BAASA,KAJXkK,uBAAyB,EAGJ,EAFrBC,6BAA+B,EAI7B,EAAK7B,SAAWG,KAAeC,YAFZ,E,2DAKN7N,GACb,IAAKhF,KAAKuU,YAAYvP,GAAO8N,KAC3B,OAAO,EAET,IAAIA,EAAO9S,KAAKuU,YAAYvP,GAAO8N,KAAO,GAQ1C,OAPkB9N,EAAMC,QAAQC,OACd/E,IAAO8B,aAAa3B,KACpCN,KAAKwU,eAAe1B,GAChB9S,KAAKC,kBAAkBmJ,QAAQjJ,IAAOsU,QAAQnU,MAChDwS,GAAQ,IAGLA,I,qCAGMA,GACb,GAAK9S,KAAKC,kBAAkB4B,UAAU1B,IAAOuU,kBAAkBpU,IAA/D,CAGA,IACMqU,EADwB,IACZ7B,EAClB,GAAK9S,KAAKsJ,YAAYC,aAAapJ,IAAOgB,eAAeb,IAElD,CACL,IAAMsU,EAAqB5U,KAAKsJ,YAAYkL,eAAerU,IAAOgB,eAAeb,GAAIqU,GACrF3U,KAAKqU,wBAA0BO,EAC/B5U,KAAKsU,8BAAgCK,EAAYC,OAJjD5U,KAAKsU,8BAAgCK,K,wCASvC,OAAO3U,KAAKqU,yB,8CAIZ,OAAOrU,KAAKsU,iC,GAjDgBO,MAA1BT,GACG3L,a,2BACFoM,KAAgBpM,c,IACnBa,YAAaW,MAkDFmK,UC3CTU,G,0KAiCQpP,GAAO,IAAD,OAChBA,EAAK1F,KAAK0J,sBAAsB1D,eAAc,SAACC,EAASC,EAAQC,GAAlB,OAAkCF,EAAQ,cAAD,OAAeO,YAAiB,EAAKuO,eAArC,2BACpF1O,KAAK,gBACLH,OAAOI,OAAKC,EAAE,uFAAuDC,YAAiBN,OACtFC,YAH6E,WAG7DK,YAAiBL,GAH4C,0B,kCAOhF,OACE,kBAACyB,EAAA,EAAD,CACEE,SAAUC,IAAgBC,KAAK,GAC/BH,KAAK,QACL8B,QAAO,UAAK3J,KAAKgV,kBAAkBzE,OAA5B,mBAA6CvQ,KAAKgV,kBAAkBzE,OAASvQ,KAAKgV,kBAAkBC,UAApG,yBAEP,kBAACC,GAAA,EAAD,CACEzC,SAAUG,KAAeC,YACzBO,MAAK,UAAK5M,YAAiBxG,KAAK+U,eAA3B,MACLzB,MAAM,0B,4BAMP,IAAD,OACJ,MAAO,CACL6B,MAAO,oBACPC,IAAK,oBACLC,OAAQ,kBACN,kBAACC,GAAA,EAAD,KACE,kBAACC,GAAA,EAAD,CACEC,QAAS,EAAKR,kBACdS,cAAY,S,oCA1DpB,OAAOzV,KAAKgV,kBAAkBzE,QAAUvQ,KAAKgV,kBAAkBzE,OAASvQ,KAAKgV,kBAAkBC,YAAc,I,qDAI7G,MAAO,CACL/O,OAAQ,EAAIlG,KAAK+U,cACjBxM,WAAY,CACV5B,MAAO,IACPC,QAAS,GACTC,MAAO,KAETC,MAAO,gB,2CAKT,MAAO,CACLZ,OAAQlG,KAAK+U,cACbrO,cAAe,CACbC,MAAO,IACPC,QAAS,GACTC,MAAO,KAETC,MAAO,kB,GA7BmB0B,KAA1BsM,GACGrM,aAAe,CACpBuM,kBAAmBZ,IAuERU,U,UClETY,G,uKAqBF,OACE,kBAACC,EAAD,CACE5V,UAAWC,KAAK4V,WAAWC,SAC3BlV,eAAgBX,KAAKW,eACrB4K,WAAU,2BACLvL,KAAK8V,wBAAwBvK,YADxB,IAERS,eAAgBhM,KAAKgM,eAAe+J,+BACpC9J,WAAYjM,KAAKgW,kBAAkBD,+BACnC7J,MAAOlM,KAAKiW,YAAYC,+BACxB/J,WAAYnM,KAAKmW,gBAAgBD,+BACjC9J,aAAcpM,KAAKoM,aAAa6F,gCAChC5F,YAAarM,KAAKqM,YAAY+J,uBAC9B9J,UAAWtM,KAAKsM,UAAU5C,qBAC1B6C,YAAavM,KAAKqW,kBAAkB3O,2BACpC8E,YAAaxM,KAAKsW,kBAAkB5O,2BACpC+E,WAAYzM,KAAKyM,WAAW/E,mC,GApCd6O,KAAlBb,GACGjN,aAAe,CACpBmN,WAAYY,IACZ7V,eAAgB8V,IAChBC,gBAAiBjR,EACjBqQ,wBAAyBa,IAEzBN,kBAAmB5O,EACnBgF,WAAY6B,GAEZlC,aAAc8E,GACd5E,UAAWsK,GACXvK,YAAa6H,GACboC,kBAAmBO,GACnB7K,eAAgBrD,EAChBwN,gBAAiB9G,GACjB2G,kBAAmBlB,GACnBmB,YAAaa,MA2BFpB,UCvDTqB,GAA2B,CAC/B5W,IAAO8B,aAAa3B,GACpBH,IAAOkC,aAAa/B,GACpBH,IAAOiB,WAAWd,GAClBH,IAAOmC,WAAWhC,GAClBH,IAAOuB,mBAAmBpB,IAGtB0W,G,kDAQJ,WAAYzS,GAAS,IAAD,8BAClB,cAAMA,IAHR0S,eAAiB,GAIf,EAAKzS,iBAAiBC,IAAOsE,KAAKpE,GAAGC,KAAkB,EAAKoE,QAF1C,E,mDAKbhE,GACAhF,KAAKC,kBAAkBmJ,QAAQjJ,IAAO4B,yBAAyBzB,KAKhE0E,EAAMC,QAAQC,OAAS/E,IAAO+C,WAAW5C,IAC3C0E,EAAMC,QAAQC,OAAS/E,IAAO2B,oBAAoBxB,SACA4W,IAAlDlX,KAAKmX,UAAUC,WAAWpS,EAAMC,QAAQC,OACxClF,KAAKmX,UAAUC,WAAWpS,EAAMC,QAAQC,MAAM3D,KAC9CvB,KAAKiX,eAAevJ,KAAK1I,EAAMC,QAAQC,Q,iCAoBhC5E,EAAI4N,GACb,OAAI5N,IAAOH,IAAOuB,mBAAmBpB,GAC5B,kBAAC,IAAM+W,SAAP,CAAgBtI,IAAKzO,GAArB,kBAAwC,kBAAC8F,EAAA,EAAD,CAAW9F,GAAIA,KACrD4N,EAAQ,IAAM6I,GAAyB7J,OACzC,kBAAC,IAAMmK,SAAP,CAAgBtI,IAAKzO,GAAI,kBAAC8F,EAAA,EAAD,CAAW9F,GAAIA,IAAxC,KAEA,kBAAC,IAAM+W,SAAP,CAAgBtI,IAAKzO,GAAI,kBAAC8F,EAAA,EAAD,CAAW9F,GAAIA,IAAxC,Q,kCAYCoF,GAAO,IAAD,OAChBA,EAAK1F,KAAKsX,sBACPtR,eAAc,SAACC,EAASC,EAAQC,GAAlB,OAAkCF,EAAQ,mEAA8B,kBAACG,EAAA,EAAD,CAAW9F,GAAIH,IAAO2B,oBAAoBxB,KAAxE,gDAA2H,kBAAC8F,EAAA,EAAD,CAAW9F,GAAIH,IAAO6B,oBAAoB1B,KAArK,QAAgL,kBAAC8F,EAAA,EAAD,CAAW9F,GAAIH,IAAOgC,gBAAgB7B,KAAtN,8DAAwR,EAAKiX,gBACjVlR,KAAKlG,IAAO2B,oBAAoBuE,MAChCH,OAAOI,OAAKC,EAAE,iIAAoE,EAAKiR,aAAatK,OAAtF,EAAyG,EAAK+J,eAAe/J,WAC3I/G,YAH4C,UAG7B,EAAK8Q,eAAe/J,OAHS,sB,mCAnCnD,OAAOlN,KAAKiX,eAAezD,QAAO,SAACC,EAAKvF,GAAN,OAAgB6I,GAAyBU,SAAShE,Q,2CAIpF,MAAO,CACLvN,OAAQlG,KAAKwX,aAAatK,OAASlN,KAAKiX,eAAe/J,OACvD3E,WAAY,CACV5B,MAAO,EACPC,QAAS,GACTC,MAAO,IAETC,MAAO,gB,oCAcU,IAAD,OAClB,OACE,mDACsBiQ,GAAyBnI,KAAI,SAACtO,EAAI4N,GAAL,OAAe,EAAKwJ,WAAWpX,EAAI4N,W,GAxD5D1F,KAA1BwO,GACGvO,aAAe,CACpBa,YAAaW,IACbkN,UAAWrX,KAmEAkX,UClFTW,G,kDASJ,WAAYpT,GAAS,IAAD,8BAClB,cAAMA,IAJRqT,aAAc,EAGM,EAFpBC,uBAAwB,EAItB,EAAKrT,iBAAiBC,IAAOsE,KAAKpE,GAAGC,KAAiB1E,MAAMC,IAAOmC,YAAa,EAAK0G,QAFnE,E,mDAKbhE,GACDhF,KAAK4X,cAIT5X,KAAK4X,aAAc,EACd5X,KAAKC,kBAAkBmJ,QAAQjJ,IAAO4B,yBAAyBzB,MAClEN,KAAK6X,uBAAwB,M,kCAYrBnS,GACVA,EAAK1F,KAAK8X,qBAAqBC,SAAS/R,eAAc,SAACC,EAASC,EAAQC,GAAlB,OAAkCF,EAAQ,sDAAiB,kBAACG,EAAA,EAAD,CAAW9F,GAAIH,IAAOmC,WAAWhC,KAAlD,kBAAuE,kBAAC8F,EAAA,EAAD,CAAW9F,GAAIH,IAAO2B,oBAAoBxB,KAAjH,0BAA8I,kBAAC8F,EAAA,EAAD,CAAW9F,GAAIH,IAAOoC,YAAYjC,KAAhL,2JAA8U,kBAAC8F,EAAA,EAAD,CAAW9F,GAAIH,IAAO2B,oBAAoBxB,KAAxX,0GAC3F+F,KAAKlG,IAAO2B,oBAAoBuE,W,0CATrC,MAAO,CACLH,OAAQlG,KAAK6X,sBACbG,SAAS,EACTlR,MAAO,e,GA7BuB0B,KAA9BmP,GAEGlP,aAAe,CACpB0O,UAAWrX,KAoCA6X,U,UCzBAM,G,kDAdb,aAAsB,IAAD,iDAAN9N,EAAM,yBAANA,EAAM,uBACnB,+BAASA,KACJ+N,cAAgB/X,IAAOgY,kBAC5B,EAAKC,SAAW,sBAChB,EAAKC,OAAS,uBAJK,E,qDAQnB,OACE,kBAACC,GAAA,EAAD,U,GAX0BA,MCmBjBC,G,kDAnBb,aAAsB,IAAD,iDAANpO,EAAM,yBAANA,EAAM,uBACnB,+BAASA,KAEJqO,kBAAoB,CACvBrY,IAAOoC,YAAYjC,GACnBH,IAAO4B,yBAAyBzB,IAElC,EAAKmY,iBAAmB,CACtBtY,IAAOqC,iBAAiBlC,IAE1B,EAAKoY,oBAAsB,CACzBvY,IAAOwY,aAAarY,GACpBH,IAAOgB,eAAeb,GACtBH,IAAOC,mBAAmBE,GAC1BH,IAAOyD,iBAAiBtD,IAdP,E,iBADOsY,G,mBCSxBC,G,kDAOJ,aAAsB,IAAD,iDAAN1O,EAAM,yBAANA,EAAM,uBACnB,+BAASA,KAHX2O,MAAQ,EAIN,EAAKnO,OAAS,EAAK1K,kBAAkB4B,UAAU1B,IAAOuU,kBAAkBpU,IACxE,EAAKkE,iBAAiBC,IAAOsE,KAAKpE,GAAGC,KAAiB1E,MAAMC,IAAOgB,gBAAiB,EAAK6H,QAHtE,E,mDAMdhE,GACLhF,KAAK8Y,OAAS,I,kCAoBd,OACE,kBAAClR,EAAA,EAAD,CACEE,SAAUC,IAAgBoL,SAAS,GACnC5S,SAAUwY,KAAmBC,QAC7BnR,KAAK,WACL8B,QACE,oCACGmK,YAAa9T,KAAK2U,WADrB,sCACoEb,YAAa9T,KAAKiZ,iBADtF,SAC8GzS,YAAiBxG,KAAK+U,eADpI,yBAKF,kBAAC9M,EAAA,EAAD,CAAsB/H,MAAOC,IAAOuU,mBAClC,oCACE,kBAACxM,EAAA,EAAD,MADF,IACkB4L,YAAa9T,KAAKkZ,kBADpC,QAC2D,yD,gCA7BjE,OAAOlZ,KAAKgV,kBAAkBmE,kBAAoB,M,sCAIlD,OAAOnZ,KAAKgV,kBAAkBoE,wBAA0B,M,uCAIxD,OAAQpZ,KAAK2U,UAAY3U,KAAK8Y,OAAU,I,oCAIxC,OAAO9Y,KAAKiZ,iBAAmBjZ,KAAKiZ,gBAAkBjZ,KAAK2U,e,GA9BvCnM,KAAlBqQ,GACGpQ,aAAe,CACpBuM,kBAAmBZ,IAqDRyE,U,oBCoBAQ,G,kDA/Db,aAAsB,IAAD,iDAANlP,EAAM,yBAANA,EAAM,uBACnB,+BAASA,KAVXmP,mBAAqB,EASA,EARrBC,qBAAuB,EAQF,EAPrBC,UAAY,EAOS,EANrBC,UAAY,EAMS,EALrBC,YAAc,EAKO,EAJrBC,YAAc,EAIO,EAHrB/O,OAAS,EAGY,EAFrBE,KAAO,EAIL,EAAKH,OAAS,EAAK1K,kBAAkB4B,UAAU1B,IAAOyZ,kBAAkBtZ,IACxE,EAAKkE,iBAAiBC,IAAOqG,KAAKnG,GAAGC,KAAiB1E,MAAMC,IAAOgY,mBAAoB,EAAKnN,QAC5F,EAAKxG,iBAAiBC,IAAOmG,OAAOjG,GAAGC,KAAiB1E,MAAM,CAACC,IAAO8B,aAAc9B,IAAOiB,aAAc,EAAKyJ,UAJ3F,E,mDAOd7F,GACFhF,KAAKwZ,UAAY,IAClBxZ,KAAK8K,MAAQ+O,aAA0B7U,EArBxB,IAqB8ChF,KAAKwZ,c,+BAI7DxU,GACP,IAAM8U,EAAU9U,EAAMC,QAAQC,KAC9B,GAAI4U,IAAY3Z,IAAO8B,aAAa3B,GAAI,CACtC,GAAGN,KAAKwZ,UAAY,EAKlB,OAJAxZ,KAAKsZ,oBAAsB,EAC3BtZ,KAAKyZ,WAAazZ,KAAKwZ,UACvBxZ,KAAK4K,QAAUmP,aAAyB/U,EA/B3B,IA+BiDhF,KAAKwZ,gBACnExZ,KAAKwZ,UAAY,GAGnBxZ,KAAKuZ,sBAAwB,EAG3BO,IAAY3Z,IAAOiB,WAAWd,KAvCd,IAwCdN,KAAKwZ,UACPxZ,KAAK0Z,aAAe,GAEpB1Z,KAAKwZ,WAAa,EAClBxZ,KAAK2Z,aAAe,M,kCAUxB,OACE,kBAAC/R,EAAA,EAAD,CACEE,SAAUC,IAAgBoL,SAAS,GACnC5S,SAAUwY,KAAmBC,QAC7BnR,KAAK,WACL8B,QACE,oDACgBmK,YAAa9T,KAAK4K,QADlC,0BACkEkJ,YAAa9T,KAAK8K,MADpF,uBAC8G,6BAD9G,cAEc9K,KAAK2Z,YAFnB,eAE4C3Z,KAAK0Z,YAFjD,aAMF,kBAACzR,EAAA,EAAD,CAAsB/H,MAAOC,IAAOyZ,mBAClC,oCACGpT,YAAiBxG,KAAKga,iBADzB,MAC6C,2D,sCAlBnD,OAAOha,KAAKyZ,WAAazZ,KAAKsZ,mBAAqBtZ,KAAKuZ,sBAjDvC,Q,GAEI/Q,KCJnByR,G,kDAKJ,aAAsB,IAAD,iDAAN9P,EAAM,yBAANA,EAAM,uBACnB,+BAASA,KACJQ,OAAS,EAAK1K,kBAAkB4B,UAAU1B,IAAO+Z,oBAAoB5Z,IAFvD,E,wDAaR,IAAD,OACV,OACE,kBAAC2S,GAAA,EAAD,CACEC,OAAQ/S,IAAO+Z,oBAAoB5Z,GACnCwH,SAAUC,IAAgBoL,SAAS,GACnCC,MAAK,UAAKpT,KAAKma,oBAAV,KACL7G,MAAM,6BAEN,2BAAO9E,UAAU,yBACf,+BACE,4BACE,wCACA,wCACA,0CAGJ,+BACGxO,KAAK2O,uBAAuBC,KAAI,SAACC,EAAGC,GAAJ,OAC/B,wBAAIC,IAAKD,GACP,6BAvCiB,IAuCXA,EAA+B,KAAK0B,QAAQ,GAAlD,KACA,4BAAKxB,YAAeH,EAAEV,QAAO,SAACC,EAAGC,GAAJ,OAAUD,EAAIC,IAAG,GAAK,MACnD,4BAAK7H,YAAiBqI,EAAEV,QAAO,SAACC,EAAGC,GAAJ,OAAUD,EAAIC,IAAG,GAAK,EAAKzI,MAAM0C,eAAhE,c,6CA5BZ,OAAOtI,KAAKiP,wBAAwBA,0B,0CAIpC,OAAOzI,YAjBsB,IAiBLxG,KAAKiP,wBAAwBmL,6B,GAf/B5R,KAApByR,GACGxR,aAAe,CACpBwG,wBAAyBG,IA+Cd6K,UCFAI,G,kDA5Cb,aAAsB,IAAD,iDAANlQ,EAAM,yBAANA,EAAM,uBACnB,+BAASA,KAJXmQ,QAAU,GAGW,EAFrBC,QAAU,EAIR,EAAK5P,OAAS,EAAK1K,kBAAkB4B,UAAU1B,IAAOqa,oBAAoBla,IAC1E,EAAKkE,iBAAiBC,IAAOsE,KAAKpE,GAAGC,KAAiB1E,MAAMC,IAAOkC,cAAe,EAAK2G,QACvF,EAAKxE,iBAAiBC,IAAOgW,SAASva,MAAMC,IAAOua,cAAe,EAAKC,YAJpD,E,mDAOd3V,GACLhF,KAAKua,SAAW,I,iCAGPvV,GACLA,EAAM4V,qBAAuBhI,KAAeC,YAAYvS,IAG5DN,KAAKsa,QAAQ5M,KAAK1I,EAAM6V,kB,kCAYxB,OACE,kBAAC5H,GAAA,EAAD,CACEC,OAAQ/S,IAAOqa,oBAAoBla,GACnCwH,SAAUC,IAAgBoL,SAAS,GACnCC,MAAOpT,KAAK8a,cACZxH,MAAM,qBACN3J,QACE,0DACsBoI,KAAKgJ,MAAM/a,KAAK8a,cAzCvB,IAwCf,wBAC6F,6BAD7F,oCAEoC9a,KAAKgb,sBAFzC,iB,oCAfN,OAAOhb,KAAKsa,QAAQnM,QAAO,SAACC,EAAGC,GAAJ,OAAUD,EAAIC,IAAG,K,4CAI5C,OAAQrO,KAAKsa,QAAQpN,OAASlN,KAAKua,SAAS/J,QAAQ,O,GA3B7BhI,K,UCIrByS,G,kDAcJ,aAAsB,IAAD,iDAAN9Q,EAAM,yBAANA,EAAM,uBACnB,+BAASA,KAVX+Q,aAAa,EASQ,EARrBxQ,aAAa,EAQQ,EAPrBD,YAAY,EAOS,EANrB0Q,YAAY,EAMS,EALrBC,OAAO,EAKc,EAHrBC,UAAY,GAKV,EAAK1Q,OAAS,EAAK1K,kBAAkB4B,UAAU1B,IAAOmb,kBAAkBhb,IACxE,EAAKkE,iBAAiBC,IAAO8W,OAAO5W,GAAGC,KAAiB1E,MAAMC,IAAOqb,WAAY,EAAKC,UACtF,EAAKjX,iBAAiBC,IAAOmG,OAAOjG,GAAG+W,KAAsB,EAAK7Q,UAClE,EAAKrG,iBAAiBC,IAAOkX,UAAUhX,GAAG+W,KAAqBxb,MAAMC,IAAOyb,iBAAkB,EAAKC,aACnG,EAAKrX,iBAAiBC,IAAOqG,KAAKC,GAAGnG,KAAiB1E,MAAMC,IAAOyb,iBAAkB,EAAK5Q,QANvE,E,wDASTqQ,GACV,OAAOA,EAAU7H,QAAO,SAAA3E,GAAC,OAAIA,EAAEiN,WAAajN,EAAEkN,cAzB7B,SAyB2D7O,S,+BAGrElI,GACPhF,KAAKqb,UAAU3N,KAAK,CAClBsO,SAAUhX,EAAMiX,eAChBF,aAAc/W,EAAMqE,YAEtBrJ,KAAKkb,cAAe,EACpBlb,KAAKob,OAASpW,EAAMkX,W,+BAGblX,GACHA,EAAMmX,WAAanc,KAAKob,SAG5Bpb,KAAKyK,aAAezF,EAAMiG,QAAUjG,EAAMkG,UAAY,M,kCAI5ClG,GACV,IAAIkJ,GAAS,EACblO,KAAKqb,UAAUrN,SAAQ,SAACa,EAAGC,GACrBD,EAAEmN,WAAahX,EAAMiX,iBACvB/N,EAAQY,OAIG,IAAXZ,IAGJlO,KAAKqb,UAAUnN,GAAO4N,WAAa9W,EAAMqE,a,6BAGpCrE,GACLhF,KAAK0K,eAAgB1F,EAAMiG,QAAU,IAAMjG,EAAMkG,UAAY,K,kCAI7D,OACE,kBAACtD,EAAA,EAAD,CACEE,SAAUC,IAAgBoL,SAAS,GACnC5S,SAAUwY,KAAmBC,QAC7BnR,KAAK,WACL8B,QACE,oCACE,2CADF,IAC4BwB,YAAgBnL,KAAKyK,aADjD,MACkEzK,KAAK4F,MAAMwF,qBAAqBpL,KAAKyK,aAAa,6BAClH,6DAFF,IAE8CzK,KAAKkb,aAAa,6BAC9D,iEAHF,IAGkDlb,KAAKoc,YAAYpc,KAAKqb,aAI1E,kBAACpT,EAAA,EAAD,CAAsB/H,MAAOC,IAAOmb,mBAClC,oCACE,kBAACe,GAAA,EAAD,CAAiBpR,OAAQjL,KAAK0K,sB,GA9EjBlC,KAAnByS,GACGxS,aAAe,CACpBsB,eAAgBC,KAoFLiR,U,SCpFTqB,G,kDAYJ,aAAsB,IAAD,iDAANnS,EAAM,yBAANA,EAAM,uBACnB,+BAASA,KARXoS,UAAY,GAOS,EANrBzD,MAAQ,EAMa,EALrB0D,SAAW,EAKU,EAJrBC,SAAW,EAIU,EAHrBC,WAAa,EAGQ,EAFrBC,cAAgB,EAId,EAAKhS,OAAS,EAAK1K,kBAAkB4B,UAAU1B,IAAOyD,iBAAiBtD,IACvE,EAAKkE,iBAAiBC,IAAOwE,UAAU8B,GAAGnG,KAAiB1E,MAAMC,IAAOyD,kBAAmB,EAAKuF,aAChG,EAAK3E,iBAAiBC,IAAOgW,SAAS1P,GAAGnG,KAAiB1E,MAAMC,IAAOyD,kBAAmB,EAAK+W,YAC/F,EAAKnW,iBAAiBC,IAAOyG,SAASH,GAAGnG,KAAiB1E,MAAMC,IAAOyD,kBAAmB,EAAKgZ,UAC/F,EAAKpY,iBAAiBC,IAAO8I,WAAWxC,GAAGnG,KAAiB1E,MAAMC,IAAOyD,kBAAmB,EAAKsM,cAN9E,E,wDAaTlL,GACVhF,KAAK8Y,OAAS,EACd9Y,KAAK0c,WAAa1X,EAAM6X,S,iCAGf7X,GACThF,KAAKwc,SAAWxX,EAAM6V,eACtB7a,KAAKyc,SAAWzX,EAAM8X,Q,+BAGf9X,GACPhF,KAAK2c,eAAiB3X,EAAMiG,S,mCAGjBjG,GACXhF,KAAKuc,UAAU7O,KAAK,CAClB8O,SAAUxc,KAAKwc,SACfC,SAAUzc,KAAKyc,SACfC,WAAY1c,KAAK0c,WACjBC,cAAe3c,KAAK2c,cACpBI,eAAiB/c,KAAK0c,WAAa1c,KAAK2c,cACxClb,QAAUzB,KAAKwc,SAjDD,IAmDhBxc,KAAK2c,cAAgB,I,kCAeXjX,GAAO,IAAD,OAChBA,EAAK1F,KAAKkW,gCACPlQ,eAAc,SAACC,EAASC,EAAQC,GAAlB,OAAkCF,EAAQ,kDAAc,EAAK+W,YAAnB,IAAgC,kBAAC5W,EAAA,EAAD,CAAW9F,GAAIH,IAAOyD,iBAAiBtD,KAAvE,+DACpD+F,KAAKlG,IAAOyD,iBAAiByC,MAC7BH,OAAOI,OAAKC,EAAE,qGAAwDC,YAAiBN,OACvFC,YAH4C,WAG5BK,YAAiBL,GAHW,0B,kCAMxC,IAAD,OACV,OACE,kBAAC8M,GAAA,EAAD,CACEC,OAAQ/S,IAAOyD,iBAAiBtD,GAChCwH,SAAUC,IAAgBoL,SAAS,GACnCC,MAAOpT,KAAKgd,YACZ1J,MAAM,YACN3J,QAAQ,2DAER,2BAAO6E,UAAU,yBACf,+BACE,4BACE,uCACA,yCACA,iDAGJ,+BACGC,OAAOC,OAAO1O,KAAKuc,WAAW3N,KAAI,SAACC,EAAGC,GAAJ,OACjC,wBAAIC,IAAKD,GACP,4BAAK,EAAKyN,UAAUzN,GAAGrN,SACvB,4BACE,kBAACwb,GAAA,EAAD,CAAgBC,QAAS,oCAAE,iDAAF,IAAkC,EAAKX,UAAUzN,GAAG0N,SAAW,EAAKD,UAAUzN,GAAG2N,WACvG,EAAKF,UAAUzN,GAAG2N,WAGvB,4BACE,kBAACQ,GAAA,EAAD,CACEC,QACE,oCACE,oDADF,IACqCpJ,YAAa,EAAKyI,UAAUzN,GAAG6N,eADpE,IACoF,6BAClF,mDAFF,IAEoC7I,YAAa,EAAKyI,UAAUzN,GAAG4N,YAFnE,IAEgF,6BAC9E,6CAHF,IAG8B,EAAK9W,MAAMyF,sBAAsB,EAAKkR,UAAUzN,GAAG6N,iBAIlFnW,YAAiB,EAAK+V,UAAUzN,GAAG6N,cAAgB,EAAKJ,UAAUzN,GAAG4N,YATxE,e,kCA5Ed,OAAO1c,KAAKuc,UAAU/I,QAAO,SAAA3E,GAAC,OAAIA,EAAEpN,QAxBrB,KAwB2CyL,S,qDA8B1D,MAAO,CACLhH,OAAQ,EAAIlG,KAAKgd,YAAchd,KAAK8Y,MACpCvQ,WAAY,CACV5B,MAAO,IACPC,QAAS,GACTC,MAAO,IAETC,MAAO,kB,GA3DW0B,KAAlB8T,GACG7T,aAAe,CACpB0U,cAAeC,KAqHJd,UC5FAe,G,kDAlCb,aAAsB,IAAD,iDAANlT,EAAM,yBAANA,EAAM,uBACnB,+BAASA,KACJQ,OAAS,EAAK1K,kBAAkB4B,UAAU1B,IAAOmd,iBAAiBhd,IAFpD,E,wDAsBnB,OAEE,kBAAC2S,GAAA,EAAD,CACEC,OAAQ/S,IAAOmd,iBAAiBhd,GAChCwH,SAAUC,IAAgBoL,SAAS,GACnCC,MAAK,UAAK5M,YAAiBxG,KAAKmI,QAA3B,MACLmL,MAAM,uB,6BAtBV,OAAOtT,KAAKC,kBAAkBoI,cAAclI,IAAOod,UAAUjd,IAAMN,KAAK4F,MAAM0C,gB,iDAI9E,MAAO,CACLpC,OAAQlG,KAAKmI,OACbI,WAAY,CACV5B,MAAO,IACPC,QAAS,GACTC,MAAO,IAETC,MAAO,kB,GAnBW0B,KCwCTgV,G,kDAjCb,aAAsB,IAAD,iDAANrT,EAAM,yBAANA,EAAM,uBACnB,+BAASA,KALXsT,SAAW,EAIU,EAHrBC,UAAY,EAGS,EAFrBjT,YAAc,EAIZ,EAAKE,OAAS,EAAK1K,kBAAkB4B,UAAU1B,IAAOiC,2BAA2B9B,IACjF,EAAKkE,iBAAiBC,IAAOmG,OAAOjG,GAAGC,KAAiB1E,MAAM,CAACC,IAAOwH,aAAcxH,IAAOwd,8BAA+B,EAAK9S,UAH5G,E,qDAMZ7F,GACSA,EAAMC,QAAQC,OACd/E,IAAOwH,aAAarH,GAClCN,KAAKyd,UAAY1D,aAAyB/U,EAAO,KAEjDhF,KAAK0d,WAAa3D,aAAyB/U,EAAO,KAEpDhF,KAAKyK,YAAczK,KAAKyd,SAAWzd,KAAK0d,Y,kCAIxC,OACE,kBAACzK,GAAA,EAAD,CACEC,OAAQ/S,IAAOiC,2BAA2B9B,GAC1CwH,SAAUC,IAAgBoL,SAAS,GACnCC,MAAOpT,KAAK4F,MAAMwF,qBAAqBpL,KAAKyK,aAC5Cd,QACE,oCACE,iDADF,IACkC3J,KAAK4F,MAAMwF,qBAAqBpL,KAAKyd,UAAU,6BAC/E,oDAFF,IAEqCzd,KAAK4F,MAAMwF,qBAAqBpL,KAAK0d,kB,GA/BnDlV,KCmElBoV,G,kDArDb,aAAsB,IAAD,iDAANzT,EAAM,yBAANA,EAAM,uBACnB,+BAASA,KATX0T,kBAAoB,EAQC,EAPrBC,oBAAsB,EAOD,EANrBC,UAAY,EAMS,EALrBC,cAAgB,EAKK,EAJrBC,gBAAkB,EAIG,EAHrBC,WAAY,EAKV,EAAKvT,OAAS,EAAK1K,kBAAkB4B,UAAU1B,IAAOge,8BAA8B7d,IACpF,EAAKkE,iBAAiBC,IAAOyG,SAASvG,GAAGC,KAAiB1E,MAAMC,IAAOge,+BAAgC,EAAKC,YAC5G,EAAK5Z,iBAAiBC,IAAOmG,OAAOG,GAAGnG,KAAkB,EAAKyZ,eAJ3C,E,uDAOVrZ,GACThF,KAAK6d,mBAAqB7Y,EAAMiG,OAChCjL,KAAK8d,oBAAsB9Y,EAAMiG,OACjCjL,KAAK+d,WAAa,EAClB/d,KAAKge,cAAgBhZ,EAAMsZ,aAAapZ,KACxClF,KAAKke,WAAY,I,oCAGLlZ,GACZ,IAAMuZ,EAAevZ,EAAMwZ,aACrBC,EAAwBze,KAAK8d,oBAAsBS,EACzCvZ,EAAMC,QAAQC,OACdlF,KAAKge,gBAAoC,IAAnBhe,KAAKke,YAG3Cle,KAAKke,WAAY,EACjBle,KAAKue,aAAevZ,EAAMwZ,aACvBC,EAnC0B,MAoC3Bze,KAAKie,iBAAmB,M,kCAK1B,OACE,kBAACrW,EAAA,EAAD,CACEE,SAAUC,IAAgBoL,SAAS,GACnC5S,SAAUwY,KAAmBC,QAC7BnR,KAAK,WACL8B,QACE,oCACE,2DADF,IAC4CmK,YAAa9T,KAAK6d,mBAD9D,IACkF,6BAChF,+CAFF,IAEgC7d,KAAK+d,UAAU,6BAC7C,0EAHF,IAG2D/d,KAAKie,kBAIlE,kBAAChW,EAAA,EAAD,CAAsB/H,MAAOC,IAAOge,+BAClC,oCACE,kBAAC9B,GAAA,EAAD,CAAiBpR,OAAQjL,KAAK6d,2B,GAtDRrV,K,UCwFnBkW,G,kDA7Eb,WAAYna,GAAmB,IAAD,8BAC5B,cAAMA,IANRoa,iBAA2B,EAKG,EAJ9BC,iBAA2B,EAIG,EAH9BC,QAAkB,EAGY,EAF9BC,YAAsB,EAIpB,EAAKnU,OAAS,EAAK1K,kBAAkB4B,UAAU1B,IAAO4e,uBAAuBze,IAE7E,EAAKkE,iBAAiBC,IAAOgW,SAASva,MAAMC,IAAO6e,iBAAkB,EAAKC,eAC1E,EAAKza,iBAAiBC,IAAOqG,KAAKnG,GAAGC,KAAiB1E,MAAMC,IAAO6e,iBAAkB,EAAKE,SAL9D,E,0DAQhBla,GACRA,EAAM4V,qBAAuBhI,KAAeC,YAAYvS,KAI5DN,KAAK2e,kBAAoB3Z,EAAM6V,eAC/B7a,KAAK4e,kBAAoB5Z,EAAM8X,S,8BAGzB9X,GACFA,EAAMma,WACRnf,KAAK8e,aAAe9Z,EAAMma,UAE5Bnf,KAAK6e,SAAW7Z,EAAMiG,OAASjG,EAAM6X,S,kCAuB3BnX,GAAa,IAAD,OACtBA,EAAK1F,KAAK+V,gCACP/P,eAAc,SAACC,EAASC,EAAQC,GAAlB,OAAkCF,EAAQ,yFAA+D,EAAK2Y,iBAApE,4BACpDvY,KAAKlG,IAAO4e,uBAAuB1Y,MACnCH,OAAOI,OAAKC,EAAE,0HAA+DC,YAAiBN,GAAhF,EAAwG/F,IAAO4e,uBAAuBlT,SACpJ1F,YAH4C,UAG7BK,YAAiBL,GAHY,0B,kCAOnD,OACE,kBAACyB,EAAA,EAAD,CACEE,SAAUC,IAAgBoL,SAAS,GACnC5S,SAAUwY,KAAmBC,QAC7BnR,KAAK,WACL8B,QACE,oCACE,+CADF,IACgC3J,KAAK4e,iBADrC,KACyDpY,YAAiBxG,KAAKof,mBAD/E,MACqG,6BACnG,6CAFF,IAE8BtL,YAAa9T,KAAK6e,SAFhD,IAE0D,6BACxD,iDAHF,IAGkC/K,YAAa9T,KAAK8e,aAHpD,KAGoEtY,YAAiBxG,KAAKqf,oBAH1F,OAGkH,+BAIpH,kBAACpX,EAAA,EAAD,CAAsB/H,MAAOC,IAAO4e,wBAClC,oCACG/e,KAAK2e,iBADR,IAC0B,iD,yCA3ChC,OAAO3e,KAAK8e,YAAc9e,KAAK6e,U,wCAI/B,OAAO7e,KAAK4e,iBAAmB5e,KAAK2e,mB,qDAIpC,MAAO,CACLzY,OAAQlG,KAAKof,kBACb1Y,cAAe,CACbC,MAAO,EACPC,QAAS,GACTC,MAAO,IAETC,MAAOwY,KAAeC,gB,GA/CA/W,KCqCbgX,G,kDA5Cb,WAAYjb,GAAmB,IAAD,8BAC5B,cAAMA,IAGDkb,WAAa,CAAC,CACjBC,MAAOvf,IAAOwf,+BACd5e,WAAY6e,IAAsBC,MAClCjf,WAAY,oCACV,kBAACwF,EAAA,EAAD,CAAW9F,GAAIH,IAAOwf,+BAA+Brf,KAD3C,wEACsH,kBAAC8F,EAAA,EAAD,CAAW9F,GAAIH,IAAO2f,4BAA4Bxf,KADxK,0DAGX,CACDof,MAAOvf,IAAO4f,iBACdhf,WAAY6e,IAAsBC,MAClCjf,WAAY,iDACA,kBAACwF,EAAA,EAAD,CAAW9F,GAAIH,IAAO4f,iBAAiBzf,KADvC,+BACyE,kBAAC8F,EAAA,EAAD,CAAW9F,GAAIH,IAAO2f,4BAA4Bxf,KAD3H,cAGX,CACDof,MAAOvf,IAAO6f,qBACdjf,WAAY6e,IAAsBC,MAClCjf,WAAY,iDACA,kBAACwF,EAAA,EAAD,CAAW9F,GAAIH,IAAO6f,qBAAqB1f,KAD3C,+BAC6E,kBAAC8F,EAAA,EAAD,CAAW9F,GAAIH,IAAO2f,4BAA4Bxf,KAD/H,cAGX,CACDof,MAAOvf,IAAO8f,mBACdlf,WAAY6e,IAAsBC,MAClCjf,WAAY,iDACA,kBAACwF,EAAA,EAAD,CAAW9F,GAAIH,IAAO8f,mBAAmB3f,KADzC,+BAC2E,kBAAC8F,EAAA,EAAD,CAAW9F,GAAIH,IAAO2f,4BAA4Bxf,KAD7H,cAGX,CACDof,MAAOvf,IAAO+f,wBACdnf,WAAY6e,IAAsBC,MAClCjf,WAAY,iDACA,kBAACwF,EAAA,EAAD,CAAW9F,GAAIH,IAAO+f,wBAAwB5f,KAD9C,+BACgF,kBAAC8F,EAAA,EAAD,CAAW9F,GAAIH,IAAO2f,4BAA4Bxf,KADlI,cAGX,CACDof,MAAOvf,IAAOggB,qBACdpf,WAAY6e,IAAsBC,MAClCjf,WAAY,iDACA,kBAACwF,EAAA,EAAD,CAAW9F,GAAIH,IAAOggB,qBAAqB7f,KAD3C,+BAC6E,kBAAC8F,EAAA,EAAD,CAAW9F,GAAIH,IAAO2f,4BAA4Bxf,KAD/H,eArCc,E,UCGhC,4MAESmf,WAAmC,GAF5C,0DAgBc/Z,GAAa,IAAD,OACtBA,EAAK1F,KAAKogB,gBACPpa,eAAc,SAACC,GAAD,eAAaA,EAAQ,wCAAO,EAAKoa,wBAAZ,aAAO,EAAuBzf,aAC7DyF,KAAKlG,IAAOmgB,YAAYja,MACxBka,kBAAiB,YAAKF,wBAAL,eAAuBtf,aAAc6e,IAAsB3e,YApBvF,uCAI2B,IAAD,OACtB,OAAOjB,KAAKyf,WAAW9M,MAAK,SAAC6N,EAAWtS,GAAZ,OAAsB,EAAKjO,kBAAkBwgB,iBAAiBD,EAAUd,QAAUc,EAAU5f,gBAL5H,qCASI,MAAO,CACLsF,OAAQwa,QAAQ1gB,KAAKqgB,kBACrBrI,SAAS,EACTlR,MAAOwY,KAAeqB,aAZ5B,GAAsCnY,M,oBCoChCoY,G,4HAAwBC,KAAxBD,GACGE,YAAc,CAEnBC,gBAAiBxI,GAGjBpB,UAAWrX,EACXkhB,WAAY1c,EACZ2c,eAAgB1b,EAGhBmR,gBAAiBjR,EACjByb,0BAA2Bla,EAC3BgF,eAAgBrD,EAChBwY,kBAAmBnK,GACnBoK,sBAAuBzJ,GACvB0J,kBAAmBC,EACnBC,UAAW7L,GACX8L,kBAAmBvJ,GACnB9B,gBAAiB9G,GACjB5C,WAAY6B,GACZW,wBAAyBG,GACzBhD,aAAc8E,GAGdmF,kBAAmB5O,EAGnBuN,kBAAmBZ,GACnB4B,kBAAmBlB,GACnBmB,YAAaa,KACb2K,YAAaC,KAGbC,UAAW9I,GACX+I,UAAWhL,GACXpK,YAAayH,GACb4N,WAAYxI,GACZyI,YAAa7H,GACb8H,aAAc1H,GACd2H,WAAY/G,GACZsB,UAAWD,GACX2F,UAAW5E,GACX6E,mBAAoB1E,GACpB2E,oBAAqBvE,GAErBvR,YAAa6H,GACbkO,cAAe1D,GAGf2D,iBAAkBC,GAClBC,wBAAyBC,KACzBC,eAAgBC,MAIL9B,c,iCCzGA,SAAS7G,EAAyB/U,EAAO2d,GACtD,IAAMC,GAAO5d,EAAMiG,QAAU,IAAMjG,EAAMkG,UAAY,GACrD,OAAO0X,EAAOA,GAAO,EAAID,GAF3B,mC,iCCAA,oBAUeE,IANF,SAAC,GAAD,IAAMC,EAAN,2BACX,uCAAKC,MAAM,6BAA6BC,QAAQ,cAAcxU,UAAU,QAAWsU,GACjF,0BAAMG,EAAE,mpB,iCCSG,SAASpJ,EAA0B7U,EAAOke,GACvD,IAAMjY,EAASjG,EAAMiG,OACfC,EAAWlG,EAAMkG,UAAY,EAC7BiU,EAAWna,EAAMma,UAAY,EAC7ByD,EAAM3X,EAASC,EAAWiU,EAG1BgE,EADkBP,EAAMA,GADQ,EAAIM,GAEC/D,EAE3C,OAAOpN,KAAKqR,IAAI,EAAGD,GAxBrB,mC,6FCcMlQ,G,OAAqB,SAAC,GAAD,IAAGC,EAAH,EAAGA,OAAQ7M,EAAX,EAAWA,KAAMiN,EAAjB,EAAiBA,MAAU+P,EAA3B,gDACzB,kBAAC,IAAD,iBACMA,EADN,CAEEhd,KAAMA,GAAQ,kBAAC,IAAD,CAAW/F,GAAI4S,IAC7BI,MAAOA,GAAS,kBAAC,IAAD,CAAWhT,GAAI4S,EAAQ7M,MAAM,SAcjD4M,EAAmBqQ,aAAe,CAChC/iB,SAAUwY,IAAmBC,SAGhB/F,O,iCCpCf,8CAMO,SAASnF,EAAc9I,GAC5B,OAAQA,EAAM2I,MACZ,KAAKC,IAAU2V,WACf,KAAK3V,IAAU4V,aACb,OAAO,EACT,KAAK5V,IAAU6V,UACf,KAAK7V,IAAU8V,YACb,OAAO,EACT,KAAK9V,IAAU+V,eACf,KAAK/V,IAAUgW,gBACf,KAAKhW,IAAUiW,iBACf,KAAKjW,IAAUkW,kBACb,OAAO9e,EAAMoL,MAEjB,MAAM,IAAI2T,MAAM,0C,iCCdH,SAASC,EAAkBtjB,EAAkBujB,GAAgC,IAAdxiB,EAAa,uDAAH,EACtF,OAAQwiB,EAAW,IAAOvjB,EAAYe,EAAU,EAPlD,mC,yNCqBMyiB,EAAW,CACf/jB,IAAO8D,OACP9D,IAAOgE,OACPhE,IAAOiE,QAQH0S,E,kDAaJ,aAAsB,IAAD,iDAAN3M,EAAM,yBAANA,EAAM,iBACnB,+BAASA,KANXga,WAAa,GAKQ,EAFrBC,WAAY,EAIV,EAAK3R,SAAWG,IAAeyR,MAC/B,EAAKC,eAAiB,EAAK1e,MAAMC,MAAMkH,WACvC,EAAKwX,eAAiB,CAACC,GACvB,IAAK,IAAI1V,EAAI,EAAGA,GA/BF,EA+BkBA,GAAK,EACnC,EAAKyV,eAAezV,GAAK,EANR,OAQnB,EAAKtK,iBAAiBC,IAAOgJ,SAAU,EAAKgX,YAC5C,EAAKjgB,iBAAiBC,IAAOwE,UAAU8B,GAAGnG,KAAiB1E,MAAMC,IAAOukB,kBAAmB,EAAKC,aAChG,EAAKngB,iBAAiBC,IAAO8I,WAAWxC,GAAGnG,KAAiB1E,MAAMC,IAAOukB,kBAAmB,EAAKE,cACjG,EAAKpgB,iBAAiBC,IAAOogB,kBAAkB3kB,MAAMgkB,GAAW,EAAKY,qBAXlD,E,yDAenB,IAAMC,EAAiB/kB,KAAK+kB,eAC5B/kB,KAAKokB,WAAY,EAEjBpkB,KAAKmkB,WAAWzW,KAAK,CAAEN,EAAGpN,KAAK4F,MAAM0C,cAAgB,IAAMmJ,EAAGsT,IAC9D/kB,KAAKukB,eAAeQ,IAAmB/kB,KAAK4F,MAAMC,MAAM4D,SAAWzJ,KAAKskB,eACxEtkB,KAAKglB,+B,6BAGAhgB,GAAQ,IAAD,OACPA,EAAM0N,iBAAkB1N,EAAMigB,UAGnC,8DAAajgB,GAEbA,EAAM0N,eACHc,QAAO,SAAAf,GAAQ,OAAIA,EAAS9E,OAAS,EAAK8E,SAASnS,MACnD0N,SAAQ,YAAsB,EAAnB/C,OAAoB,IAC1Bia,EADyB,EAAXpS,MACK,EAKvB,GAHI9N,EAAMC,QAAQC,OAAS/E,IAAOglB,gBAAgB7kB,IAAM,EAAKL,kBAAkBmJ,QAAQjJ,IAAOilB,oBAAoB9kB,MAChH4kB,GAAY,KAEVA,GAAY,GAGhB,IAAK,IAAIpW,EAAI,EAAGA,EAAIoW,EAAUpW,GAAK,EACjC,EAAKuW,cAAcrgB,S,iCAKhBA,GAET,GADA,kEAAiBA,GACbA,EAAM4V,qBAAuB5a,KAAKyS,SAASnS,GAI/C,IADA,IAAM2K,EAASjG,EAAM6V,eACZ/L,EAAI,EAAGA,EAAI7D,EAAQ6D,GAAK,EAC/B9O,KAAKslB,c,kCAIGtgB,GAAQ,IAAD,OAEjBkf,EAASlW,SAAQ,SAAA9N,GACf,EAAKqlB,eAAerlB,EAAMI,GAFT,S,mCAMR0E,GAAQ,IAAD,OAElBkf,EAASlW,SAAQ,SAAA9N,GACf,EAAKqlB,eAAerlB,EAAMI,GAFT,Q,0CAMD0E,GAClB,IAAIwgB,EAAS,EACb,GAAIxgB,EAAMygB,UAAY7X,IAAU8X,aAAe1gB,EAAMygB,UAAY7X,IAAU+X,cACzEH,GAAU,MACL,IAAIxgB,EAAMygB,UAAY7X,IAAUgY,eAAiB5gB,EAAMygB,UAAY7X,IAAUiY,kBAGlF,OAFAL,GAAU,EAMZxlB,KAAKukB,eAAevkB,KAAK+kB,eAAiBS,IAAWxgB,EAAMqE,UAAYrJ,KAAKskB,eAC5EtkB,KAAKskB,eAAiBtf,EAAMqE,UAGxBrJ,KAAKokB,YAITpkB,KAAKmkB,WAAWzW,KAAK,CAAEN,EAAGpN,KAAK8lB,cAAc9gB,EAAMqE,WAAYoI,EAAGzR,KAAK+kB,eAAiBS,IACxFxlB,KAAKmkB,WAAWzW,KAAK,CAAEN,EAAGpN,KAAK8lB,cAAc9gB,EAAMqE,WAAYoI,EAAGzR,KAAK+kB,oB,mDAKvE,IAAIgB,EAAqB/lB,KAAKgmB,cAC1BC,EAAqBjmB,KAAKkmB,YAExBC,EAA8BnmB,KAAKomB,sBAAsBjmB,IAAOukB,iBAAiBpkB,GAAIylB,EAAoBE,EA5HjF,GA6H9BF,GAAsB,EAAII,EAC1BF,GAAsB,EAAIE,EAE1BnmB,KAAKqmB,mBAAmBlmB,IAAO8D,OAAO3D,IACtCN,KAAKsmB,YAAYnmB,IAAO8D,OAAO3D,IAAI2U,WAAalD,KAAKwU,MAAMR,GAC3D/lB,KAAKsmB,YAAYnmB,IAAO8D,OAAO3D,IAAIiQ,QAAUwB,KAAKwU,MAAMN,K,4CAGpCO,EAASC,EAAQlW,EAAQoS,GAE7C,IAAMxa,EAASnI,KAAKC,kBAAkBoI,cAAcme,GAAWxmB,KAAK4F,MAAM0C,cAC1E,KAAMH,EAAS,GACb,OAAO,EAETnI,KAAKqmB,mBAAmBG,GACxB,IAAME,EAAeve,EAASwa,GAAY,EAAIA,GACxCgE,EAAoB5U,KAAKwU,MAAME,EAASC,GAC9C1mB,KAAKsmB,YAAYE,GAASvR,WAAa0R,EACvC,IAAMC,EAAoB7U,KAAKwU,MAAMhW,EAASmW,GAE9C,OADA1mB,KAAKsmB,YAAYE,GAASjW,QAAUqW,EAC7BF,I,qCAGMF,EAASK,GACtB,GAAK7mB,KAAKsJ,YAAYC,aAAaid,GAAnC,CAGA,IAAMM,EAAoB9mB,KAAKsJ,YAAYyd,kBAAkBP,GAEvD7R,EAAYmS,EADEA,EAAoBD,EAExC7mB,KAAKsJ,YAAYkL,eAAegS,EAAS7R,M,kCAIzC,IAAMqS,EAAShnB,KAAKinB,gBACpB,GAAKjnB,KAAKsJ,YAAYC,aAAayd,GAAnC,CAGA,IAAME,EAAmBlnB,KAAKmX,UAAUgQ,4BAA4BH,EAAQhnB,KAAKsJ,YAAY8d,qBAAqBJ,IAClHhnB,KAAKsJ,YAAYkL,eAAewS,EAAQE,M,oCAG5BliB,GACZ,IAAMgiB,EAAShnB,KAAKqnB,iBACpBrnB,KAAKsJ,YAAYge,cAAcN,EAAQhiB,K,kCAqC7BwhB,GACV,IAAKxmB,KAAKsJ,YAAYC,aAAaid,GACjC,OAAO,KAET,IAAMe,EAAoB,EAAIvnB,KAAKsJ,YAAYke,iBAAiBhB,GAC1DO,EAAoB/mB,KAAKsJ,YAAYyd,kBAAkBP,GAE7D,OAAQe,EAAoB,GADDvnB,KAAKmX,UAAUgQ,4BAA4BX,EAASxmB,KAAKsJ,YAAY8d,qBAAqBZ,IAC/DO,I,oCAkC1C1d,GACZ,OAAQA,EAAYrJ,KAAK4F,MAAMC,MAAMkH,YAAc,M,kCA2BzCrH,GACVA,EAAK1F,KAAK0J,sBAAsB1D,eAAc,SAACC,EAASC,EAAQC,GAAlB,OAAkCF,EAAQ,sDAAkBO,YAAiBN,GAAnC,sEACrFG,KAAKlG,IAAO8D,OAAOoC,MACnBH,OAAOI,OAAKC,EAAE,iGAAuDC,YAAiBN,OACtFC,YAH6E,WAG7DK,YAAiBL,GAH4C,0B,kCAMrE,IAAD,OACJshB,EAAuBznB,KAAKynB,qBAElC,OACE,kBAAC,IAAD,CACE3f,SAAUC,IAAgBC,KAAK,IAC/BH,KAAK,WACL8B,QACE,+DAC2BmK,YAAa9T,KAAKkmB,aAD7C,IAC2D,6BAD3D,sEAEqE,6BAFrE,gFAMF3X,SACE,2BAAOC,UAAU,yBACf,+BACE,4BACE,qCACA,wCACA,0CAGJ,+BAEIxO,KAAKukB,eAAe/Q,QAAO,SAACJ,EAAOlF,GAAR,OAAkBA,EAvBpC,KAuB0DU,KAAI,SAACwE,EAAOlF,GAAR,OACrE,wBAAIa,IAAKb,GACP,4BAAKA,GACL,4BAAKc,YAAe,EAAKuV,eAAerW,GAAS,MACjD,4BAAK1H,YAAiBihB,EAAqBvZ,IAA3C,SAKJlO,KAAKukB,eAAe/Q,QAAO,SAACJ,EAAOlF,GAAR,OAAkBA,GAhCpC,KAgC2DU,KAAI,SAACwE,EAAOlF,GAAR,OACtE,wBAAIa,IAAKb,EAjCF,GAkCL,wBAAIpH,MAAO,CAAE4gB,MAAO,QAAUxZ,EAlCzB,GAmCL,4BAAKc,YAAe,EAAKuV,eAAerW,EAnCnC,GAmC2D,MAChE,4BAAK1H,YAAiBihB,EAAqBvZ,EApCtC,IAoCL,YAQZ,kBAAC,IAAD,CACEuE,SAAUG,IAAeyR,MACzBjR,MAAK,UAAK5M,YAAiB,EAAIxG,KAAK2nB,gBAA/B,MACLrU,MAAM,wB,uCA9JZ,IAAMsU,EAAkB5nB,KAAK6nB,YAAY1nB,IAAO8D,OAAO3D,KAAO,EACxDwnB,EAAkB9nB,KAAK6nB,YAAY1nB,IAAOgE,OAAO7D,KAAO,EACxDynB,EAAoB/nB,KAAK6nB,YAAY1nB,IAAOiE,OAAO9D,KAAO,EAChE,OAAIsnB,GAAmBE,GAAmBF,GAAmBG,EACpD5nB,IAAO8D,OAAO3D,GACZwnB,GAAmBC,EACrB5nB,IAAOgE,OAAO7D,GAEdH,IAAOiE,OAAO9D,K,sCAKvB,IAAMsnB,EAAkB5nB,KAAK6nB,YAAY1nB,IAAO8D,OAAO3D,KAAO,EACxDwnB,EAAkB9nB,KAAK6nB,YAAY1nB,IAAOgE,OAAO7D,KAAO,EACxDynB,EAAoB/nB,KAAK6nB,YAAY1nB,IAAOiE,OAAO9D,KAAO,EAChE,OAAIsnB,GAAmBE,GAAmBF,GAAmBG,EACpD5nB,IAAO8D,OAAO3D,GACZwnB,GAAmBC,EACrB5nB,IAAOgE,OAAO7D,GAEdH,IAAOiE,OAAO9D,K,qCAIH,IAAD,OACfknB,EAAmB,EAIvB,OAHAtD,EAASlW,SAAQ,SAAA9N,GACfsnB,GAAoB,EAAKle,YAAYke,iBAAiBtnB,EAAMI,OAEvDknB,I,qCAaa,IAAD,OACbQ,EAAuB,GAI7B,OAHA9D,EAASlW,SAAQ,SAAA9N,GACf8nB,EAAqBta,KAAK,EAAK/M,eAAegL,4BAA4BzL,EAAMI,IAAI2nB,eAE/ED,EAAqB7Z,QAAO,SAAC+Z,EAAaC,GAAd,OAA+BD,EAAcC,KAAgBH,EAAqB9a,S,oCAKrH,IAAIkb,EAAa,EACjB,IAAK,IAAMC,KAAWroB,KAAKsoB,YACzBF,GAAcpoB,KAAKsoB,YAAYD,GAASE,MAG1C,OAAOH,EAxOO,EAwOkBpoB,KAAKmkB,WAAWnkB,KAAKmkB,WAAWjX,OAAS,GAAGuE,I,kCAK5E,OAAOzR,KAAKgmB,eAAiB,EAAIhmB,KAAK2nB,kB,2CAGZ,IAAD,OACnBa,EAAkB,GAIxB,OAHAxoB,KAAKukB,eAAevW,SAAQ,SAACya,GAC3BD,EAAgB9a,KAAK+a,EAAO,EAAK7iB,MAAM0C,kBAElCkgB,I,2CAQP,MAAO,CACLtiB,OAAQ,EAAIlG,KAAK2nB,eACjBjhB,cAAe,CACbC,MAAO,IACPC,QAAS,GACTC,MAAO,IAETC,MAAO,gB,qDAKT,MAAO,CACLZ,OAAQlG,KAAK2nB,eACbpf,WAAY,CACV5B,MAAO,IACPC,QAAS,GACTC,MAAO,IAETC,MAAO,kB,GAnQa+N,KAApBiC,EACGrO,a,2BACFoM,IAAgBpM,c,IACnBa,YAAaW,IACbtJ,eAAgB8V,IAChBU,UAAWrX,MAiUAgX,O,8LCpVTyB,E,kDAmBJ,aAAsB,IAAD,iDAANpO,EAAM,yBAANA,EAAM,gBAEnB,IADA,+BAASA,KAfXue,gBAAkB,IAAIC,IAcD,EAbrBC,gBAAkB,IAAID,IAaD,EAXrBE,eAAiB,GAWI,EAVrBC,cAAgB,GAUK,EARrBtQ,kBAAoB,GAQC,EAPrBC,iBAAmB,GAOE,EANrBC,oBAAsB,GAMD,EAJrBqQ,oBAAsB,GAID,EAHrBC,mBAAqB,GAGA,EAFrBC,sBAAwB,GAIC,MAAnB,EAAKrjB,MAAMD,KAEb,OADA,EAAKgF,QAAS,EACd,eAEF,IAAMhF,EAAOujB,YAAa,EAAKtjB,MAAMD,KAAKrF,IANvB,OAQjBqF,EAAKE,MAAMsjB,sBACXxjB,EAAKE,MAAMsjB,qBAAqBC,UAChCzjB,EAAKE,MAAMsjB,qBAAqBE,SAEhC,EAAKR,eAAiBljB,EAAKE,MAAMsjB,qBAAqBC,SACtD,EAAKN,cAAgBnjB,EAAKE,MAAMsjB,qBAAqBE,aACzBnS,IAAxB,EAAK2R,qBAAuD3R,IAAvB,EAAK4R,gBAC5C,EAAKD,eAAiB,GACtB,EAAKC,cAAgB,MAGvB,EAAKD,eAAiB,GACtB,EAAKC,cAAgB,GAErB,EAAKtQ,kBAAoB,GACzB,EAAKC,iBAAmB,GACxB,EAAKC,oBAAsB,GAE3B,EAAKqQ,oBAAsB,GAC3B,EAAKC,mBAAqB,GAC1B,EAAKC,sBAAwB,IAE/B,sBAAI,EAAKJ,gBAAT,YAA4B,EAAKC,gBAAe9a,SAAQ,SAACa,GACvD,EAAK6Z,gBAAgBY,IAAIza,EAAG,GAC5B,EAAK+Z,gBAAgBU,IAAIza,EAAG,MAE9B,EAAKrK,iBAAiBC,IAAOmG,OAAOG,GAAGnG,KAAkB,EAAKyZ,eAlC3C,E,0DAqCPrZ,GAAQ,IAAD,OACb9E,EAAQ8E,EAAMC,QAAQC,KAExBqkB,EAAS,GACTC,EAAY,GACZC,EAAc,GAUlB,GAbgBzkB,EAAMC,QAAQ0I,OAId+b,IAAcC,IAAIC,UAChCL,EAASvpB,KAAK6oB,eACdW,EAAS,sBAAOxpB,KAAKwY,mBAAZ,YAAkCxY,KAAK0Y,sBAChD+Q,EAAW,sBAAOzpB,KAAK+oB,qBAAZ,YAAoC/oB,KAAKipB,0BAEpDM,EAASvpB,KAAK8oB,cACdU,EAAS,sBAAOxpB,KAAKyY,kBAAZ,YAAiCzY,KAAK0Y,sBAC/C+Q,EAAW,sBAAOzpB,KAAKgpB,oBAAZ,YAAmChpB,KAAKipB,yBAEjDM,EAAO9R,SAASvX,KAAW8E,EAAM6kB,KAGnC,GACEL,EAAUlY,MAAK,SAACzC,GAAD,OAAO,EAAK5O,kBAAkBmJ,QAAQyF,OACrD7J,EAAM8kB,UAAYC,IAAUC,OAG5BhqB,KAAK0oB,gBAAgBY,IAAIppB,EAAOF,KAAK0oB,gBAAgBuB,IAAI/pB,GAAS,OAC7D,CACL,IAAMgqB,EAAQlqB,KAAKoI,QAAQ+hB,cAAcnlB,EAAMmX,UAE3C+N,GAAST,EAAYnY,MAAK,SAACzC,GAAD,OAAOqb,EAAM9gB,QAAQyF,EAAG7J,EAAMqE,cAC1DrJ,KAAK0oB,gBAAgBY,IAAIppB,EAAOF,KAAK0oB,gBAAgBuB,IAAI/pB,GAAS,GAElEF,KAAK4oB,gBAAgBU,IAAIppB,EAAOF,KAAK4oB,gBAAgBqB,IAAI/pB,GAAS,M,kCA6B7D,IAAD,OACJkqB,EAAUpd,MAAMC,KAAKjN,KAAK4oB,gBAAgBla,UAAUP,QACxD,SAACkc,EAAO5W,GAAR,OAAgB4W,EAAQ5W,IACxB,GAEI6W,EAAUtd,MAAMC,KAAKjN,KAAK0oB,gBAAgBha,UAAUP,QACxD,SAACkc,EAAO5W,GAAR,OAAgB4W,EAAQ5W,IACxB,GAEF,GAAI2W,EAAUE,IAAY,EACxB,OAAO,KAET,IAKIC,EALEf,EAAS,sBACVxpB,KAAKwY,mBADK,YAEVxY,KAAKyY,kBAFK,YAGVzY,KAAK0Y,sBAIR6R,EADEf,EAAUtc,OAAS,EACPsc,EAAU,GAEVrpB,IAAOqqB,kBAAkBlqB,GAGzC,IAAMmqB,EACJzqB,KAAK0qB,eAAexd,OAAS,EAC3B,oCACE,+BACE,4BACE,wCACA,uCACA,sCACA,wCAGJ,+BACGlN,KAAK0qB,eAAe9b,KAAI,SAAC1O,GAAD,OACvB,wBAAI6O,IAAK7O,GACP,6BACA,wBAAIyqB,MAAM,OACR,kBAAC,IAAD,CAAWrqB,GAAIJ,EAAO4G,MAAO,CAAE8jB,OAAQ,YAEzC,4BAAK9W,YAAa,EAAK4U,gBAAgBuB,IAAI/pB,KAC3C,4BAAK4T,YAAa,EAAK8U,gBAAgBqB,IAAI/pB,WAKjD,KAEA2qB,EAAa,CAAEC,UAAW,QAC1BC,EACJ/qB,KAAKgrB,cAAc9d,OAAS,EAC1B,oCACE,+BACE,4BACE,wBAAIpG,MAAO+jB,GAAX,WACA,wBAAI/jB,MAAO+jB,GAAX,WACA,wBAAI/jB,MAAO+jB,GAAX,UACA,wBAAI/jB,MAAO+jB,GAAX,YAGJ,+BACG7qB,KAAKgrB,cAAcpc,KAAI,SAAC1O,GAAD,OACtB,wBAAI6O,IAAK7O,GACP,6BACA,wBAAIyqB,MAAM,OACR,kBAAC,IAAD,CAAWrqB,GAAIJ,EAAO4G,MAAO,CAAE8jB,OAAQ,YAEzC,4BAAK9W,YAAa,EAAK4U,gBAAgBuB,IAAI/pB,KAC3C,4BAAK4T,YAAa,EAAK8U,gBAAgBqB,IAAI/pB,WAKjD,KAEN,OACE,kBAAC,IAAD,CACEmG,KAAM,kBAAC,IAAD,CAAW/F,GAAIiqB,IACrBnX,MAAK,UAAK5M,YAAiB8jB,GAAWA,EAAUF,IAA3C,MACL9W,MAAM,iCACN3J,QACE,mHAEE,4BAAK3J,KAAK2J,WAId,2BAAO6E,UAAU,wBAAwB1H,MAAO,CAAEmkB,WAAY,SAC3DR,EACAM,M,8BAjHP,MAAO,sBACF/qB,KAAKwY,mBADH,YAEFxY,KAAKyY,kBAFH,YAGFzY,KAAK0Y,qBAHH,YAIF1Y,KAAK+oB,qBAJH,YAKF/oB,KAAKgpB,oBALH,YAMFhpB,KAAKipB,wBACRra,KAAI,SAACtO,GAAD,OAAQ,wBAAIyO,IAAKzO,GAAKH,IAAOG,GAAIuL,W,qCAGnB,IAAD,OACnB,OAAO7L,KAAK6oB,eAAerV,QACzB,SAACtT,GAAD,OAAW,EAAKwoB,gBAAgBuB,IAAI/pB,GAAS,EAAK0oB,gBAAgBqB,IAAI/pB,GAAS,O,oCAI9D,IAAD,OAClB,OAAOF,KAAK8oB,cAActV,QACxB,SAACtT,GAAD,OAAW,EAAKwoB,gBAAgBuB,IAAI/pB,GAAS,EAAK0oB,gBAAgBqB,IAAI/pB,GAAS,S,GA/GvDsI,KAAxB+P,EACG9P,aAAe,CACpBL,QAASM,KAmNE6P,O,sJCzNTiK,E,kDAKJ,WAAYje,GAAmB,IAAD,uBAC5B,cAAMA,IAJRsa,QAAkB,EAGY,EAF9BC,YAAsB,EAKpB,IAAMnU,EAAS,EAAK1K,kBAAkBwgB,iBAAiBtgB,IAAO2f,6BAE9D,OADA,EAAKnV,OAASA,EACTA,GAIL,EAAKnG,iBAAiBC,IAAOqG,KAAKC,GAAGnG,KAAiB1E,MAAMC,IAAO+qB,sBAAuB,EAAKhM,SATnE,GAM1B,e,oDAMIla,GACFA,EAAMma,WACRnf,KAAK8e,aAAe9Z,EAAMma,UAE5Bnf,KAAK6e,SAAW7Z,EAAMiG,OAASjG,EAAM6X,S,kCAgBrC,OACE,kBAAC,IAAD,CACE/U,SAAUC,IAAgBoL,SAAS,GACnCtL,KAAK,WACL8B,QACE,oCACE,4CADF,IAC6BnD,YAAiBxG,KAAKmI,QADnD,KAC6D,6BAC3D,6CAFF,IAE8B2L,YAAa9T,KAAK6e,SAFhD,IAE0D,6BACxD,iDAHF,IAGkC/K,YAAa9T,KAAK8e,aAHpD,KAGoEtY,YAAiBxG,KAAKqf,oBAH1F,OAGkH,+BAIpH,kBAAC,IAAD,CAAsBnf,MAAOC,IAAO2f,6BAClC,oCACGtZ,YAAiBxG,KAAKmrB,iBADzB,MAC6C,wD,yCA1BnD,OAAOnrB,KAAK8e,YAAc9e,KAAK6e,U,6BAI/B,OAAO7e,KAAKC,kBAAkBoI,cAAclI,IAAO+qB,qBAAqB5qB,IAAMN,KAAK4F,MAAM0C,gB,sCAIzF,MAnC6B,IAmCtBtI,KAAKmI,W,GAjCsBK,KA4DvBga,O,sLC/CTE,E,kDAKJ,WAAYne,GAAmB,IAAD,uBAC5B,cAAMA,IAJRoa,iBAA2B,EAGG,EAF9BC,iBAA2B,EAKzB,IAAMjU,EAAS,EAAK1K,kBAAkBwgB,iBAAiBtgB,IAAOirB,kBAE9D,OADA,EAAKzgB,OAASA,EACTA,GAIL,EAAKnG,iBAAiBC,IAAOgW,SAAU,EAAK4Q,aAThB,GAM1B,e,wDAMQrmB,GACShF,KAAKC,kBAAkBmJ,QAAQjJ,IAAOmrB,sBAAsBhrB,GAAI0E,EAAMqE,YACtErE,EAAM4V,qBAAuBhI,IAAeC,YAAYvS,KAI3EN,KAAK2e,kBAAoB3Z,EAAM6V,eAC/B7a,KAAK4e,kBAAoB5Z,EAAM8X,S,kCA2CrBpX,GAAa,IAAD,OACtBA,EAAK1F,KAAK+V,gCACP/P,eAAc,SAACC,EAASC,EAAQC,GAAlB,OAAkCF,EAAQ,yFAA+D,EAAKslB,+BAApE,UAA2GprB,IAAOirB,iBAAiBvf,KAAnI,yBACpDxF,KAAKlG,IAAOirB,iBAAiB/kB,MAC7BH,OAAOI,OAAKC,EAAE,0HAA+DC,YAAiBN,GAAhF,EAAwG/F,IAAOirB,iBAAiBvf,SAC9I1F,YAH4C,UAG7BK,YAAiBL,GAHY,0B,kCAOnD,IAAIqlB,EAA+B,qCAC/BC,EAA+B,qCAOnC,OALIzrB,KAAKC,kBAAkByrB,OAASC,IAAMC,qBACxCJ,EAAc,sDAAkBxrB,KAAK6rB,mBAAvB,eAAuD1rB,IAAO8B,aAAa4J,MACzF4f,EAAc,uDAAmBzrB,KAAK8rB,mBAAxB,IAA6C3rB,IAAO8B,aAAa4J,OAI/E,kBAAC,IAAD,CACE/D,SAAUC,IAAgBoL,SAAS,GACnCtL,KAAK,WACL8B,QACE,kDACcoI,KAAKgJ,MAAM/a,KAAK+rB,4BAD9B,gBACwE5rB,IAAOirB,iBAAiBvf,KAAM2f,EADtG,IACmH,6BAChHxrB,KAAKurB,+BAAiC,GAAK,kDAC9BvrB,KAAKurB,+BADyB,QACY/kB,YAAiBxG,KAAKgsB,kBADlC,uCACyFP,EADzF,OAMhD,kBAAC,IAAD,CAAsBvrB,MAAOC,IAAOirB,kBAClC,oCACGrZ,KAAKgJ,MAAM/a,KAAK+rB,4BADnB,IACgD,iD,iDAvEtD,MApCwB,GAoCjB/rB,KAAK2e,mB,qDAIZ,MAxCwB,GAwCjB3e,KAAK4e,mB,0DAIZ,OAAO5e,KAAK+rB,2BAA6B/rB,KAAKurB,iC,uCAI9C,OAAOvrB,KAAKurB,+BAAiCvrB,KAAK+rB,6B,oDAIlD,OAAOha,KAAKgJ,MAAM/a,KAAKisB,oCAnDD,M,yCAuDtB,OAAOla,KAAKgJ,MAAM/a,KAAK+rB,2BAvDD,M,yCA2DtB,OAAO/rB,KAAKksB,8BAAgClsB,KAAK6rB,qB,qDAIjD,MAAO,CACL3lB,OAAQlG,KAAKgsB,iBACbtlB,cAAe,CACbC,MAAO,EACPC,QAAS,GACTC,MAAO,IAETC,MAAOwY,IAAeC,gB,GA/DC/W,KA4Gdka,O,4KC1HTyJ,E,uKAMM,IAAD,EAC2BnsB,KAAKyL,MAA/B+J,EADD,EACCA,QAASC,EADV,EACUA,aACX2W,EAAe5W,EAAQ/C,SAAS5G,KAChCoJ,EAAYjV,KAAKqsB,iBAAiB7W,EAAQ8Q,aAC1CiC,EAAQvoB,KAAKssB,aAAa9W,EAAQ8S,aAEpCiE,EAAiB/W,EAAQP,UACzBuX,EAAchX,EAAQjF,OAEtBkc,EAAajX,EAAQ+S,MACrBH,EAAa5S,EAAQkX,cASzB,OANAH,EAAqC,IAAnBA,EAAwB,EAAIA,EAC9CC,EAA+B,IAAhBA,EAAqB,EAAIA,EAExCC,EAA6B,IAAfA,EAAoB,EAAIA,EACtCrE,EAA6B,IAAfA,EAAoB,EAAIA,EAGpC,6BACE,2BAAO5Z,UAAU,cACf,+BACE,4BACE,uCACA,wBAAIme,QAAQ,KAAI,kBAAC1P,EAAA,EAAD,CAAgBC,QAAQ,6FAA6FkP,EAArH,eAChB,wBAAIO,QAAQ,KAAI,kBAAC1P,EAAA,EAAD,CAAgBC,QAAQ,sFAAsFkP,EAA9G,cAGpB,+BACGnX,GAAaA,EACXzB,QAAO,SAAAvO,GAAO,OAAIA,EAAQ2nB,YAAczsB,IAAO8D,OAAO3D,MACtDsO,KAAI,SAAA3J,GAAO,OACV,wBAAI8J,IAAK9J,EAAQ2nB,WACf,wBAAI9lB,MAAO,CAAE+lB,MAAO,QAClB,kBAACC,EAAA,EAAD,CAAWxsB,GAAI2E,EAAQ2nB,UAAWG,QAAM,IAAI,IAD9C,6BAIA,wBAAIjmB,MAAO,CAAE+lB,MAAO,GAAIG,aAAc,EAAGC,UAAW,WAClD,kBAAChQ,EAAA,EAAD,CAAgBC,QAAO,UAAK1W,YAAiBvB,EAAQgQ,UAAYsX,GAA1C,OAAgEtnB,EAAQgQ,YAEjG,wBAAInO,MAAO,CAAE+lB,MAAO,QAClB,yBACEre,UAAU,kBACV1H,MAAO,CAAE+lB,MAAM,GAAD,OAAM5nB,EAAQgQ,UAAYsX,EAAkB,IAA5C,SAGlB,wBAAIzlB,MAAO,CAAE+lB,MAAO,GAAIG,aAAc,EAAGC,UAAW,WAClD,kBAAChQ,EAAA,EAAD,CAAgBC,QAAO,UAAK1W,YAAiBvB,EAAQsL,OAASic,GAAvC,OAA0DvnB,EAAQsL,SAE3F,wBAAIzJ,MAAO,CAAE+lB,MAAO,QAClB,yBACEre,UAAU,kBACV1H,MAAO,CAAE+lB,MAAM,GAAD,OAAM5nB,EAAQsL,OAASic,EAAe,IAAtC,aAKvBvX,GAAaA,EACXzB,QAAO,SAAAvO,GAAO,OAAIA,EAAQ2nB,YAAczsB,IAAO8D,OAAO3D,MACtDsO,KAAI,SAAA3J,GAAO,OACV,wBAAI8J,IAAK9J,EAAQ2nB,WACf,wBAAI9lB,MAAO,CAAE+lB,MAAO,QAClB,kBAACzmB,EAAA,EAAD,CAAW9F,GAAI2E,EAAQ2nB,aAEzB,wBAAI9lB,MAAO,CAAE+lB,MAAO,GAAIG,aAAc,EAAGC,UAAW,WAClD,kBAAChQ,EAAA,EAAD,CAAgBC,QAAO,UAAK1W,YAAiBvB,EAAQgQ,UAAYsX,GAA1C,OAAgEtnB,EAAQgQ,YAEjG,wBAAInO,MAAO,CAAE+lB,MAAO,QAClB,yBACEre,UAAU,kBACV1H,MAAO,CAAE+lB,MAAM,GAAD,OAAM5nB,EAAQgQ,UAAYsX,EAAkB,IAA5C,SAGlB,wBAAIzlB,MAAO,CAAE+lB,MAAO,GAAIG,aAAc,EAAGC,UAAW,WAClD,kBAAChQ,EAAA,EAAD,CAAgBC,QAAO,UAAK1W,YAAiBvB,EAAQsL,OAASic,GAAvC,OAA0DvnB,EAAQsL,SAE3F,wBAAIzJ,MAAO,CAAE+lB,MAAO,QAClB,yBACEre,UAAU,kBACV1H,MAAO,CAAE+lB,MAAM,GAAD,OAAM5nB,EAAQsL,OAASic,EAAe,IAAtC,eAO3B/W,GACC,2BAAOjH,UAAU,cACf,+BACE,4BACE,uCACA,wBAAIme,QAAQ,KAAKP,EAAjB,UACA,wBAAIO,QAAQ,KAAZ,WAGJ,+BACGpE,GAASA,EACP3Z,KAAI,SAAA3J,GAAO,OACV,wBAAI8J,IAAK9J,EAAQ2nB,WACf,wBAAI9lB,MAAO,CAAE+lB,MAAO,QAClB,kBAACzmB,EAAA,EAAD,CAAW9F,GAAI2E,EAAQ2nB,aAEzB,wBAAI9lB,MAAO,CAAE+lB,MAAO,GAAIG,aAAc,EAAGC,UAAW,WAClD,kBAAChQ,EAAA,EAAD,CAAgBC,QAAO,UAAK1W,YAAiBvB,EAAQsjB,MAAQkE,GAAtC,OAAwDxnB,EAAQsjB,QAEzF,wBAAIzhB,MAAO,CAAE+lB,MAAO,QAClB,yBACEre,UAAU,kBACV1H,MAAO,CAAE+lB,MAAM,GAAD,OAAM5nB,EAAQsjB,MAAQkE,EAAc,IAApC,SAGlB,wBAAI3lB,MAAO,CAAE+lB,MAAO,GAAIG,aAAc,EAAGC,UAAW,WAClD,kBAAChQ,EAAA,EAAD,CAAgBC,QAAO,UAAK1W,YAAiBvB,EAAQ6T,MAAQsP,GAAtC,OAAwDnjB,EAAQ6T,QAEzF,wBAAIhS,MAAO,CAAE+lB,MAAO,QAClB,yBACEre,UAAU,kBACV1H,MAAO,CAAE+lB,MAAM,GAAD,OAAM5nB,EAAQ6T,MAAQsP,EAAc,IAApC,oB,UA5HV7S,GAAtB4W,EACGe,UAAY,CACjB1X,QAAS2X,IAAUC,OAAOC,WAC1B5X,aAAc0X,IAAUG,MAsIbnB,Q,SC3ITzK,E,oKAKG,IAAD,OACE6L,EAAOvtB,KAAKiW,YAAYkO,WAExBuH,EAAO,CACX6B,KAAM,CACJ1hB,KAAM,SAER2hB,KAAM,CACJ7f,KAAM,OACN+Z,MAAO,oBAET+F,SAAU,CACRrgB,EAAG,CACDsgB,MAAO,IACP/f,KAAM,eACNggB,KAAM,CACJC,UAAWC,YAAW,sBACtBC,MAAM,GAER3Y,MAAO,MAET1D,EAAG,CACDic,MAAO,IACP/f,KAAM,eACNwH,MAAO,aACPwY,KAAM,CACJG,MAAM,EACNC,YAAa,MAMrB,MAAO,CACL5Y,MAAO,aACPC,IAAK,aACLC,OAAQ,kBACN,kBAACC,EAAA,EAAD,KACE,kBAAC,IAAD,CAAW0Y,eAAa,IACrB,gBAAEnB,EAAF,EAAEA,MAAF,OACC,kBAACoB,EAAA,EAAD,CACEpB,MAAOA,EACPjC,OAAQ,IACRc,KAAMA,EACN6B,KAAM,CAAErhB,MAAOqhB,QAIrB,kBAAC,EAAD,CACE/X,QAAS,EAAKS,YACdR,cAAY,W,GAvDEjN,KAApBkZ,EACGjZ,aAAe,CACpBwN,YAAaa,KA8DF4K,O,sKCtDTvN,E,kDAUJ,WAAY5P,GAAkB,IAAD,8BAC3B,cAAMA,IAPE4S,eAMmB,IAJ7BlS,aAI6B,IAH7BipB,SAAW,EAGkB,EAF7BpV,MAAoD,GAIlD,EAAKtU,iBAAiBC,IAAOsE,KAAKpE,GAAGC,KAAkB,EAAKoE,QAC5D,EAAKxE,iBAAiBC,IAAOmG,OAAOjG,GAAGC,KAAkB,EAAKiG,UAHnC,E,mDAMtB7F,GACFA,EAAMC,QAAQC,OAASlF,KAAKiF,QAAQ3E,IAGvCN,KAAK8Y,MAAMpL,KAAK,CACdrE,UAAWrE,EAAMqE,UACjB0J,KAAM,M,+BAID/N,GACHA,EAAMC,QAAQC,OAASlF,KAAKiF,QAAQ3E,KAIxCN,KAAKkuB,UAAYlpB,EAAMiG,QAAUjG,EAAMkG,UAAY,GACnDlL,KAAK8Y,MAAM9Y,KAAK8Y,MAAM5L,OAAS,GAAG6F,MAAQ,K,kCAwDhCrN,GAAa,IAAD,OACtBA,EAAK1F,KAAKoW,wBACPpQ,eAAc,SAACC,GAAD,OAAaA,EAAQ,gEAA2B,kBAAC,IAAD,CAAW3F,GAAI,EAAK2E,QAAQ3E,KAAvD,yGAC/B+F,KAAK,EAAKpB,QAAQoB,MAClBH,OAAOI,OAAKC,EAAE,kFAA+C,EAAK4nB,cAClEhoB,YAHuB,UAGR,EAAKioB,aAHG,qC,kCAO9B,OACE,kBAAC,IAAD,CACEtmB,SAAUC,IAAgBC,KAAK,GAC/B3B,KAAM,kBAAC,IAAD,CAAW/F,GAAIN,KAAKiF,QAAQ3E,KAClC8S,MAAK,UAAKU,YAAa9T,KAAKkuB,SAAWluB,KAAK4F,MAAM0C,cAAgB,KAA7D,QACLgL,MAAM,qBACN3J,QAAO,UAAK3J,KAAKiF,QAAQ4G,KAAlB,6BAA2CiI,YAAa9T,KAAKkuB,UAA7D,oBAAkF1nB,YAAiBxG,KAAK4F,MAAMyN,+BAA+BrT,KAAKkuB,WAAlJ,W,+BApEG,IAAD,IACPxtB,EAAQ,oBAAGV,KAAKmX,UAAUC,WAAWpX,KAAKiF,QAAQ3E,WAA1C,aAAG,EAA4CI,gBAA/C,QAA2D2tB,IACzE,OAAOtc,KAAKuc,KAAKtK,YAAkBtjB,EAAUV,KAAK4F,MAAM0C,kB,mCAGtC,IAAD,SACXimB,EAAS,UAAGvuB,KAAKmX,UAAUC,WAAWpX,KAAKiF,QAAQ3E,WAA1C,aAAG,EAA4CI,SAC9D,QAAkBwW,IAAdqX,EACF,OAAO,EAET,IAAMC,EAAyB,IAAZD,EACfE,EAA0B,KAC1BC,EAAc,EACdC,EAAU,EAqBd,OAnBA3uB,KAAK8Y,MAAM9K,SAAQ,SAAAa,GACZ4f,EAGHE,GAAW9f,EAAExF,UAAYolB,EAAWD,EAFpCG,EAAU9f,EAAExF,UAAY,EAAKzD,MAAMC,MAAMkH,WAI3C0hB,EAAW5f,EAAExF,UACbqlB,GAAe3c,KAAKgJ,MAAM4T,EAAUH,GACpCG,GAAWH,EAEP3f,EAAEkE,KAAO,IACX4b,EAAU,MAIdA,GAAW3uB,KAAK4F,MAAMgpB,kBAAoBH,GAAY,GACtDC,GAAe3c,KAAKgJ,MAAM4T,EAAUH,GACpCG,GAAWH,EAEJzc,KAAKqR,IAAIpjB,KAAKmuB,UAAYO,EAAa1uB,KAAK6uB,Y,gCAInD,OAAO7uB,KAAK8Y,MAAM3K,QAAO,SAACC,EAAGC,GAAJ,OAAUD,EAAIC,EAAE0E,OAAM,K,6CAI/C,MAAO,CACL7M,OAAQlG,KAAKmuB,UAAYnuB,KAAKouB,aAC9B7lB,WAAY,CACV5B,MAAO,IACPC,QAAS,GACTC,MAAO,IAETC,MAAOwY,IAAeC,gB,GApFK/W,KAA3B2L,EACG1L,aAAe,CACpB0O,UAAWrX,KA2GAqU,O,kJClHTmE,E,kDAUJ,WAAY/T,GAAS,IAAD,8BAClB,cAAMA,IAVRuqB,UAAY,GASQ,EARpBC,aAAe,GAQK,EAPpBC,oBAAsB,GAOF,EAJpB9W,cAAgB/X,IAAO8uB,YAIH,EAHpB7W,SAAW,iBAGS,EAFpBC,OAAS,mBAIP,EAAK7T,iBAAiBC,IAAOyqB,MAAMnkB,GAAGnG,KAAkB,EAAKuqB,SAC7D,EAAK3qB,iBAAiBC,IAAOmG,OAAOG,GAAGnG,KAAkB,EAAKyZ,eAC9D,EAAK7Z,iBAAiBC,IAAOqG,KAAKC,GAAGnG,KAAkB,EAAKwqB,aAJ1C,E,oDAOZpqB,GACNhF,KAAK+uB,aAAarhB,KAAK1I,K,oCAGXA,GACZhF,KAAK8uB,UAAUphB,KAAK1I,K,kCAGVA,GACVhF,KAAK8uB,UAAUphB,KAAK1I,GAEhBA,EAAMC,QAAQC,OAASlF,KAAKkY,cAAc5X,IAAM0E,EAAMmX,WAAanX,EAAMkX,UAC3Elc,KAAKgvB,oBAAoBthB,KAAK1I,K,4BAgJ3B,IAAD,OACJ,MAAO,CACLmQ,MAAOnV,KAAKoY,SACZhD,IAAKpV,KAAKqY,OACVhD,OAAQ,kBACN,kBAAC,IAAD,CACEF,MAAO,EAAKiD,SACZiX,YACE,gEAC2B,kBAAC,IAAD,CAAW/uB,GAAI,EAAK4X,cAAc5X,KAD7D,kEACkI,kBAAC,IAAD,CAAWA,GAAI,EAAK4X,cAAc5X,KADpK,YACmL,6BADnL,+HAMD,EAAKgvB,U,2BA1JF,IAAD,OACHC,EAAUvvB,KAAK+uB,aAAangB,KAAI,YAA6B,IAA1BvF,EAAyB,EAAzBA,UAAWpE,EAAc,EAAdA,QAE5CuqB,EAAc,EAAKV,UAAUW,WAAU,SAAA5gB,GAAC,OAAIA,EAAExF,WAAaA,EAzClD,OA4Cf,IAAqB,IAAjBmmB,GAAsC,IAAhBA,EAA1B,CALgE,MAS5B,EAAKV,UAAUU,EAAc,GAC3DE,EAV0D,EASxDC,UATwD,EAS7CnR,cACqB,EAClCoR,EAAa7d,KAAK8d,IAAI9d,KAAKwU,MAAU,IAAJmJ,GAAU,KACjD,MAAO,CACLtiB,EAAG/D,EAAY,EAAKzD,MAAMC,MAAMkH,WAChC6iB,aACA3qB,WATA,EAAK6qB,IAAI,6CAaPC,EAAM/vB,KAAK8uB,UAAUtb,QAAO,SAAAxO,GAAK,YAAwBkS,IAApBlS,EAAM2qB,gBAAkDzY,IAAvBlS,EAAMwZ,gBAC/E5P,KAAI,YAA6C,IAA1CvF,EAAyC,EAAzCA,UACAqmB,EADyC,EAA9BC,UAA8B,EAAnBnR,cACY,EACxC,MAAO,CACLpR,EAAG/D,EAAY,EAAKzD,MAAMC,MAAMkH,WAChC0E,EAAGM,KAAK8d,IAAI9d,KAAKwU,MAAU,IAAJmJ,GAAU,SAIjCM,EAAShwB,KAAKgvB,oBAAoBpgB,KAAI,SAAA5J,GAC1C,IAAMirB,EAAajrB,EAAM2qB,WAAa3qB,EAAMiG,QAAU,IAAMjG,EAAMkG,UAAY,IAAMlG,EAAM6X,QAAU,GAC9F6S,EAAKO,EAAajrB,EAAMwZ,cAAiB,EACzCoR,EAAa7d,KAAK8d,IAAI9d,KAAKwU,MAAU,IAAJmJ,GAAU,KACjD,MAAO,CACLtiB,EAAGpI,EAAMqE,UAAY,EAAKzD,MAAMC,MAAMkH,WACtC0E,EAAGme,EACH3qB,QAASD,EAAMC,QACfgG,OAAQjG,EAAMiG,QAAU,EACxBkU,SAAUna,EAAMma,UAAY,EAC5BwQ,UAAWM,MAITC,EAAe,CACnB9iB,EAAG,CACDsgB,MAAO,IACP/f,KAAM,eACNggB,KAAM,CACJC,UAAWC,YAAW,eACtBC,MAAM,GAER3Y,MAAO,KACPgb,MAAO,CAAEC,MAAM,EAAMC,MAAM,IAE7B5e,EAAG,CACDic,MAAO,IACP/f,KAAM,eACNwH,MAAO,KACPwY,KAAM,CACJG,MAAM,KAKNpC,EAAO,CACX4E,MAAO,CACL,CACE/C,KAAM,CACJ1hB,KAAM,MAER2hB,KAAM,CACJ7f,KAAM,OACN4iB,KAAM,CACJC,YAAa,SACb9I,MAAO,UACP+I,YAAa,GAEf/I,MAAO,2BAET+F,SAAUyC,GAEZ,CACE3C,KAAM,CACJ1hB,KAAM,SAER2hB,KAAM,CACJ7f,KAAM,QACN9F,KAAM,GACN6f,MAAO,QACPgJ,QAAQ,GAEVjD,SAAS,2BACJyC,GADG,IAENvmB,QAAS,CACP,CAAE+jB,MAAO,eAAgB/f,KAAM,UAAWwH,MAAO,WACjD,CAAEuY,MAAO,YAAa/f,KAAM,eAAgBwH,MAAO,aAAcwb,OAAQ,QACzE,CAAEjD,MAAO,SAAU/f,KAAM,eAAgBwH,MAAO,UAAWwb,OAAQ,QACnE,CAAEjD,MAAO,WAAY/f,KAAM,eAAgBwH,MAAO,cAAewb,OAAQ,YAI/E,CACEpD,KAAM,CACJ1hB,KAAM,UAER2hB,KAAM,CACJ7f,KAAM,OACN+Z,MAAO,MACP+I,YAAa,GAEfhD,SAAU,CACRrgB,EAAG8iB,EAAa9iB,EAChBzD,QAAS,CACP,CAAE+jB,MAAO,eAAgB/f,KAAM,UAAWwH,MAAO,mBACjD,CAAEuY,MAAO,aAAc/f,KAAM,eAAgBwH,MAAO,sBAMxDoY,EAAO,CACXqD,GAAI,CAAC,CAACxjB,EAAG,EAAGqE,EAAG,MAAMof,OAAOd,GAC5BjX,MAAOkX,EACPc,OAAQvB,GAGV,OACE,yBAAK/gB,UAAU,kBAAkB1H,MAAO,CACtC+lB,MAAO,OACPkE,UAAW,MAEX,kBAAC,IAAD,MACG,gBAAGlE,EAAH,EAAGA,MAAOjC,EAAV,EAAUA,OAAV,OACC,kBAAC,IAAD,CAAWiC,MAAOA,EAAOjC,OAAQA,EAAQc,KAAMA,EAAM6B,KAAMA,Y,GAtKrC/kB,KAkMnB8P","file":"static/js/BloodDeathKnight.f8d25810.chunk.js","sourcesContent":["import SPELLS from 'common/SPELLS';\r\nimport ISSUE_IMPORTANCE from 'parser/core/ISSUE_IMPORTANCE';\r\nimport CoreAbilities from 'parser/core/modules/Abilities';\r\n\r\nclass Abilities extends CoreAbilities {\r\n  spellbook() {\r\n    const combatant = this.selectedCombatant;\r\n    return [\r\n      {\r\n        spell: SPELLS.ICEBOUND_FORTITUDE,\r\n        buffSpellId: SPELLS.ICEBOUND_FORTITUDE.id,\r\n        category: Abilities.SPELL_CATEGORIES.DEFENSIVE,\r\n        cooldown: 180,\r\n        castEfficiency: {\r\n          suggestion: true,\r\n          recommendedEfficiency: 0.50,\r\n          extraSuggestion: 'Defensive CDs like this are meant to be used smartly. Use it to smooth regular damage intake or to take the edge of big attacks.',\r\n          importance: ISSUE_IMPORTANCE.MINOR,\r\n        },\r\n        timelineSortIndex: 10,\r\n      },\r\n      {\r\n        spell: SPELLS.VAMPIRIC_BLOOD,\r\n        buffSpellId: SPELLS.VAMPIRIC_BLOOD.id,\r\n        category: Abilities.SPELL_CATEGORIES.DEFENSIVE,\r\n        cooldown: 90,\r\n        castEfficiency: {\r\n          suggestion: true,\r\n          recommendedEfficiency: 0.50,\r\n          extraSuggestion: 'Defensive CDs like this are meant to be used smartly. Use it to smooth regular damage intake or to take the edge of big attacks.',\r\n          importance: ISSUE_IMPORTANCE.MINOR,\r\n        },\r\n        timelineSortIndex: 10,\r\n      },\r\n      {\r\n        spell: SPELLS.BLOOD_BOIL,\r\n        category: Abilities.SPELL_CATEGORIES.ROTATIONAL,\r\n        cooldown: haste => 7.5 / (1 + haste),\r\n        gcd: {\r\n          base: 1500,\r\n        },\r\n        charges: 2,\r\n        castEfficiency: {\r\n          suggestion: true,\r\n          recommendedEfficiency: 0.85,\r\n          extraSuggestion: 'Should be casting it so you have at least one recharging.',\r\n        },\r\n        timelineSortIndex: 4,\r\n      },\r\n      {\r\n        spell: SPELLS.CONSUMPTION_TALENT,\r\n        category: Abilities.SPELL_CATEGORIES.SEMI_DEFENSIVE,\r\n        enabled: combatant.hasTalent(SPELLS.CONSUMPTION_TALENT.id),\r\n        cooldown: 45,\r\n        gcd: {\r\n          base: 1500,\r\n        },\r\n        timelineSortIndex: 5,\r\n      },\r\n      {\r\n        spell: SPELLS.DANCING_RUNE_WEAPON,\r\n        category: Abilities.SPELL_CATEGORIES.SEMI_DEFENSIVE,\r\n        buffSpellId: SPELLS.DANCING_RUNE_WEAPON_BUFF.id,\r\n        gcd: {\r\n          base: 1500,\r\n        },\r\n        cooldown: 120,\r\n        castEfficiency: {\r\n          suggestion: true,\r\n          recommendedEfficiency: 0.90,\r\n          extraSuggestion: 'Should be used as an opener and used on CD for the dps boost.',\r\n        },\r\n        timelineSortIndex: 9,\r\n      },\r\n      {\r\n        spell: SPELLS.BLOODDRINKER_TALENT,\r\n        category: Abilities.SPELL_CATEGORIES.ROTATIONAL,\r\n        cooldown: 30,\r\n        gcd: {\r\n          base: 1500,\r\n        },\r\n        enabled: combatant.hasTalent(SPELLS.BLOODDRINKER_TALENT.id),\r\n        castEfficiency: {\r\n          suggestion: true,\r\n          recommendedEfficiency: 0.90,\r\n          extraSuggestion: 'Mostly used as a dps CD. Should be almost casted on CD. Good to use when your running to the boss or cant melee them.',\r\n        },\r\n        timelineSortIndex: 6,\r\n      },\r\n      {\r\n        spell: SPELLS.DEATH_STRIKE,\r\n        category: Abilities.SPELL_CATEGORIES.ROTATIONAL,\r\n        gcd: {\r\n          base: 1500,\r\n        },\r\n        timelineSortIndex: 1,\r\n      },\r\n      {\r\n        spell: SPELLS.DEATHS_CARESS,\r\n        category: Abilities.SPELL_CATEGORIES.ROTATIONAL,\r\n        gcd: {\r\n          base: 1500,\r\n        },\r\n        timelineSortIndex: 7,\r\n      },\r\n      {\r\n        spell: SPELLS.DEATH_AND_DECAY,\r\n        category: Abilities.SPELL_CATEGORIES.ROTATIONAL,\r\n        gcd: {\r\n          base: 1500,\r\n        },\r\n        enabled: combatant.hasTalent(SPELLS.RAPID_DECOMPOSITION_TALENT.id),\r\n        cooldown: 15,\r\n        castEfficiency: {\r\n          suggestion: true,\r\n          recommendedEfficiency: 0.80, //reduced because of proc resets\r\n        },\r\n        timelineSortIndex: 5,\r\n      },\r\n      //do not use cast efficiency for DnD without Rapid Decomposition.\r\n      {\r\n        spell: SPELLS.DEATH_AND_DECAY,\r\n        category: Abilities.SPELL_CATEGORIES.ROTATIONAL,\r\n        gcd: {\r\n          base: 1500,\r\n        },\r\n        enabled: !combatant.hasTalent(SPELLS.RAPID_DECOMPOSITION_TALENT.id),\r\n        cooldown: 15,\r\n        timelineSortIndex: 5,\r\n      },\r\n      {\r\n        spell: SPELLS.HEART_STRIKE,\r\n        category: Abilities.SPELL_CATEGORIES.ROTATIONAL,\r\n        gcd: {\r\n          base: 1500,\r\n        },\r\n        timelineSortIndex: 3,\r\n      },\r\n      {\r\n        spell: SPELLS.MARROWREND,\r\n        buffSpellId: SPELLS.BONE_SHIELD.id,\r\n        category: Abilities.SPELL_CATEGORIES.ROTATIONAL,\r\n        gcd: {\r\n          base: 1500,\r\n        },\r\n        timelineSortIndex: 2,\r\n      },\r\n      {\r\n        spell: SPELLS.ANTI_MAGIC_SHELL,\r\n        buffSpellId: SPELLS.ANTI_MAGIC_SHELL.id,\r\n        category: Abilities.SPELL_CATEGORIES.DEFENSIVE,\r\n        cooldown: combatant.hasTalent(SPELLS.ANTIMAGIC_BARRIER_TALENT.id) ? 60 - 15 : 60,\r\n        castEfficiency: {\r\n          suggestion: true,\r\n          recommendedEfficiency: 0.50,\r\n          extraSuggestion: 'Defensive CDs like this are meant to be used smartly. Use it to smooth regular damage intake or to take the edge of big attacks.',\r\n          importance: ISSUE_IMPORTANCE.MINOR,\r\n        },\r\n        timelineSortIndex: 10,\r\n      },\r\n      {\r\n        spell: SPELLS.MIND_FREEZE,\r\n        category: Abilities.SPELL_CATEGORIES.UTILITY,\r\n        cooldown: 15,\r\n      },\r\n      {\r\n        spell: SPELLS.DARK_COMMAND,\r\n        category: Abilities.SPELL_CATEGORIES.UTILITY,\r\n        cooldown: 8,\r\n      },\r\n      {\r\n        spell: SPELLS.DEATH_GRIP,\r\n        category: Abilities.SPELL_CATEGORIES.UTILITY,\r\n        gcd: {\r\n          base: 500,\r\n        },\r\n        cooldown: 15,\r\n        timelineSortIndex: 14,\r\n      },\r\n      {\r\n        spell: SPELLS.DEATHS_ADVANCE,\r\n        category: Abilities.SPELL_CATEGORIES.UTILITY,\r\n        cooldown: 45,\r\n        timelineSortIndex: 14,\r\n      },\r\n      {\r\n        spell: SPELLS.WRAITH_WALK_TALENT,\r\n        enabled: combatant.hasTalent(SPELLS.WRAITH_WALK_TALENT.id),\r\n        category: Abilities.SPELL_CATEGORIES.UTILITY,\r\n        gcd: {\r\n          base: 1500,\r\n        },\r\n        cooldown: 60,\r\n        timelineSortIndex: 14,\r\n      },\r\n      {\r\n        spell: SPELLS.GOREFIENDS_GRASP,\r\n        category: Abilities.SPELL_CATEGORIES.UTILITY,\r\n        gcd: {\r\n          base: 1500,\r\n        },\r\n        cooldown: combatant.hasTalent(SPELLS.TIGHTENING_GRASP_TALENT.id) ? 90 : 120,\r\n        timelineSortIndex: 11,\r\n      },\r\n      {\r\n        spell: SPELLS.RAISE_ALLY,\r\n        category: Abilities.SPELL_CATEGORIES.UTILITY,\r\n        gcd: {\r\n          base: 1500,\r\n        },\r\n      },\r\n      {\r\n        spell: SPELLS.ASPHYXIATE,\r\n        category: Abilities.SPELL_CATEGORIES.UTILITY,\r\n        cooldown: 45,\r\n        gcd: {\r\n          base: 1500,\r\n        },\r\n      },\r\n      {\r\n        spell: SPELLS.CONTROL_UNDEAD,\r\n        category: Abilities.SPELL_CATEGORIES.OTHERS,\r\n        gcd: {\r\n          base: 1500,\r\n        },\r\n      },\r\n      {\r\n        spell: SPELLS.RAISE_DEAD_BLOOD_FROST,\r\n        category: Abilities.SPELL_CATEGORIES.COOLDOWNS,\r\n        cooldown: 120,\r\n      },\r\n      {\r\n        spell: SPELLS.ANTI_MAGIC_ZONE,\r\n        buffSpellId: SPELLS.ANTI_MAGIC_ZONE_BUFF.id,\r\n        category: Abilities.SPELL_CATEGORIES.DEFENSIVE,\r\n        cooldown: 120,\r\n        gcd: null,\r\n        isDefensive: true,\r\n      },\r\n      {\r\n        spell: SPELLS.MARK_OF_BLOOD_TALENT,\r\n        category: Abilities.SPELL_CATEGORIES.ROTATIONAL,\r\n        enabled: combatant.hasTalent(SPELLS.MARK_OF_BLOOD_TALENT),\r\n        cooldown: 6,\r\n        gcd: {\r\n          base: 1500,\r\n        },\r\n        timelineSortIndex: 10,\r\n      },\r\n      {\r\n        spell: SPELLS.TOMBSTONE_TALENT,\r\n        category: Abilities.SPELL_CATEGORIES.DEFENSIVE,\r\n        enabled: combatant.hasTalent(SPELLS.TOMBSTONE_TALENT.id),\r\n        cooldown: 60,\r\n        gcd: {\r\n          base: 1500,\r\n        },\r\n        castEfficiency: {\r\n          suggestion: true,\r\n          recommendedEfficiency: 0.50,\r\n          extraSuggestion: 'Defensive CDs like this are meant to be used smartly. Use it to smooth regular damage intake or to take the edge of big attacks.',\r\n          importance: ISSUE_IMPORTANCE.MINOR,\r\n        },\r\n        timelineSortIndex: 10,\r\n      },\r\n      {\r\n        spell: SPELLS.RUNE_TAP,\r\n        buffSpellId: SPELLS.RUNE_TAP.id,\r\n        category: Abilities.SPELL_CATEGORIES.DEFENSIVE,\r\n        cooldown: 25,\r\n        charges: 2,\r\n        castEfficiency: {\r\n          suggestion: true,\r\n          recommendedEfficiency: 0.50,\r\n          extraSuggestion: 'Defensive CDs like this are meant to be used smartly. Use it to smooth regular damage intake or to take the edge of big attacks.',\r\n          importance: ISSUE_IMPORTANCE.MINOR,\r\n        },\r\n        timelineSortIndex: 10,\r\n      },\r\n      {\r\n        spell: SPELLS.BLOOD_TAP_TALENT,\r\n        category: Abilities.SPELL_CATEGORIES.ROTATIONAL,\r\n        enabled: combatant.hasTalent(SPELLS.BLOOD_TAP_TALENT.id),\r\n        cooldown: 60,\r\n        charges: 2,\r\n        castEfficiency: {\r\n          suggestion: true,\r\n          recommendedEfficiency: 0.50,\r\n          extraSuggestion: 'Use to generate extra runes at opportune times.',\r\n          importance: ISSUE_IMPORTANCE.MINOR,\r\n        },\r\n        timelineSortIndex: 10,\r\n      },\r\n      {\r\n        spell: SPELLS.BONESTORM_TALENT,\r\n        category: Abilities.SPELL_CATEGORIES.ROTATIONAL_AOE,\r\n        enabled: combatant.hasTalent(SPELLS.BONESTORM_TALENT.id),\r\n        cooldown: 60,\r\n        gcd: {\r\n          base: 1500,\r\n        },\r\n        timelineSortIndex: 9,\r\n      },\r\n      {\r\n        spell: SPELLS.RUNE_1,\r\n        category: Abilities.SPELL_CATEGORIES.HIDDEN,\r\n        cooldown: haste => 10 / (1 + haste),\r\n        charges: 2,\r\n      },\r\n      {\r\n        spell: SPELLS.RUNE_2,\r\n        category: Abilities.SPELL_CATEGORIES.HIDDEN,\r\n        cooldown: haste => 10 / (1 + haste),\r\n        charges: 2,\r\n      },\r\n      {\r\n        spell: SPELLS.RUNE_3,\r\n        category: Abilities.SPELL_CATEGORIES.HIDDEN,\r\n        cooldown: haste => 10 / (1 + haste),\r\n        charges: 2,\r\n      },\r\n    ];\r\n  }\r\n}\r\n\r\nexport default Abilities;\r\n","import SPELLS from 'common/SPELLS';\r\nimport CoreChanneling from 'parser/shared/modules/Channeling';\r\nimport Events from 'parser/core/Events';\r\nimport { SELECTED_PLAYER } from 'parser/core/Analyzer';\r\n\r\nclass Channeling extends CoreChanneling {\r\n  constructor(options) {\r\n    super(options);\r\n    this.addEventListener(Events.applydebuff.by(SELECTED_PLAYER), this.onApplyDebuff);\r\n    this.addEventListener(Events.removedebuff.by(SELECTED_PLAYER), this.onRemoveDebuff);\r\n  }\r\n  onCast(event) {\r\n    if (event.ability.guid === SPELLS.BLOODDRINKER_TALENT.id) {\r\n      // We track Blooddrinker\r\n      return;\r\n    }\r\n    super.onCast(event);\r\n  }\r\n\r\n  cancelChannel(event, ability) {\r\n    if (this.isChannelingSpell(SPELLS.BLOODDRINKER_TALENT.id)) {\r\n      this.endChannel(event);\r\n    } else {\r\n      super.cancelChannel(event, ability);\r\n    }\r\n  }\r\n\r\n  onApplyDebuff(event) {\r\n    if (event.ability.guid !== SPELLS.BLOODDRINKER_TALENT.id) {\r\n      return;\r\n    }\r\n    this.beginChannel(event);\r\n  }\r\n\r\n  // Looking at `removebuff` will includes progress towards a tick that never happened. This progress could be considered downtime as it accounts for nothing.\r\n  // If it's ever decided to consider the time between last tick and channel ending as downtime, just change the endchannel trigger.\r\n  onRemoveDebuff(event) {\r\n    if (event.ability.guid !== SPELLS.BLOODDRINKER_TALENT.id) {\r\n      return;\r\n    }\r\n    if (!this.isChannelingSpell(SPELLS.BLOODDRINKER_TALENT.id)) {\r\n      // This may be true if we did the event-order fix in begincast/cast and it was already ended there.\r\n      return;\r\n    }\r\n    this.endChannel(event);\r\n  }\r\n}\r\n\r\nexport default Channeling;\r\n","import SPELLS from 'common/SPELLS';\r\nimport CoreGlobalCooldown from 'parser/shared/modules/GlobalCooldown';\r\n\r\nclass GlobalCooldown extends CoreGlobalCooldown {\r\n  onCast(event) {\r\n    if (event.ability.guid === SPELLS.BLOODDRINKER_TALENT.id) {\r\n      // This GCD gets handled by the `beginchannel` event\r\n      return;\r\n    }\r\n    super.onCast(event);\r\n  }\r\n}\r\n\r\nexport default GlobalCooldown;\r\n","import React from 'react';\r\n\r\nimport CoreAlwaysBeCasting from 'parser/shared/modules/AlwaysBeCasting';\r\n\r\nimport SPELLS from 'common/SPELLS';\r\nimport { formatPercentage } from 'common/format';\r\nimport SpellLink from 'common/SpellLink';\r\nimport { i18n } from '@lingui/core';\r\nimport { t } from '@lingui/macro';\r\n\r\nclass AlwaysBeCasting extends CoreAlwaysBeCasting {\r\n  get downtimeSuggestionThresholds() {\r\n    return {\r\n      actual: this.downtimePercentage,\r\n      isGreaterThan: {\r\n        minor: 0.20,\r\n        average: 0.30,\r\n        major: 0.40,\r\n      },\r\n      style: 'percentage',\r\n    };\r\n  }\r\n\r\n  suggestions(when) {\r\n    const boss = this.owner.boss;\r\n\r\n    if (!boss || !boss.fight.disableDowntimeSuggestion) {\r\n      when(this.downtimeSuggestionThresholds).addSuggestion((suggest, actual, recommended) => suggest(<>While some downtime is inevitable in fights with movement, you should aim to reduce downtime to prevent capping Runes.  You can reduce downtime by casting ranged/filler abilities like <SpellLink id={SPELLS.BLOODDRINKER_TALENT.id} /> or <SpellLink id={SPELLS.BLOOD_BOIL.id} /></>)\r\n          .icon('spell_mage_altertime')\r\n          .actual(i18n._(t('deathknight.blood.suggestions.alwaysBeCasting.downtime')`${formatPercentage(actual)}% downtime`))\r\n          .recommended(`<${formatPercentage(recommended)}% is recommended`));\r\n    }\r\n  }\r\n}\r\n\r\nexport default AlwaysBeCasting;\r\n","import SPELLS from 'common/SPELLS';\r\nimport CoreCooldownThroughputTracker, { BUILT_IN_SUMMARY_TYPES } from 'parser/shared/modules/CooldownThroughputTracker';\r\n\r\nclass CooldownThroughputTracker extends CoreCooldownThroughputTracker {\r\n  static cooldownSpells = [\r\n    ...CoreCooldownThroughputTracker.cooldownSpells,\r\n    {\r\n      spell: SPELLS.DANCING_RUNE_WEAPON_BUFF,\r\n      summary: [\r\n        BUILT_IN_SUMMARY_TYPES.DAMAGE,\r\n      ],\r\n    },\r\n\r\n    {\r\n      spell: SPELLS.VAMPIRIC_BLOOD,\r\n      summary: [\r\n        BUILT_IN_SUMMARY_TYPES.HEALING,\r\n        BUILT_IN_SUMMARY_TYPES.OVERHEALING,\r\n      ],\r\n    },\r\n\r\n    {\r\n      spell: SPELLS.ANTI_MAGIC_SHELL,\r\n      summary: [\r\n        BUILT_IN_SUMMARY_TYPES.ABSORBED,\r\n      ],\r\n    },\r\n\r\n  ];\r\n}\r\n\r\nexport default CooldownThroughputTracker;\r\n","import React from 'react';\r\nimport Analyzer from 'parser/core/Analyzer';\r\nimport Enemies from 'parser/shared/modules/Enemies';\r\nimport SPELLS from 'common/SPELLS';\r\nimport { formatPercentage } from 'common/format';\r\nimport STATISTIC_ORDER from 'interface/others/STATISTIC_ORDER';\r\nimport Statistic from 'interface/statistics/Statistic';\r\nimport { i18n } from '@lingui/core';\r\nimport { t } from '@lingui/macro';\r\nimport BoringSpellValueText from 'interface/statistics/components/BoringSpellValueText';\r\nimport UptimeIcon from 'interface/icons/Uptime';\r\n\r\nclass BloodPlagueUptime extends Analyzer {\r\n  static dependencies = {\r\n    enemies: Enemies,\r\n  };\r\n\r\n  get uptime() {\r\n    return this.enemies.getBuffUptime(SPELLS.BLOOD_PLAGUE.id) / this.owner.fightDuration;\r\n  }\r\n\r\n  get uptimeSuggestionThresholds() {\r\n    return {\r\n      actual: this.uptime,\r\n      isLessThan: {\r\n        minor: 0.95,\r\n        average: 0.9,\r\n        major: .8,\r\n      },\r\n      style: 'percentage',\r\n    };\r\n  }\r\n\r\n  suggestions(when) {\r\n    when(this.uptimeSuggestionThresholds)\r\n        .addSuggestion((suggest, actual, recommended) => suggest('Your Blood Plague uptime can be improved. Keeping Blood Boil on cooldown should keep it up at all times.')\r\n            .icon(SPELLS.BLOOD_PLAGUE.icon)\r\n            .actual(i18n._(t('deathknight.blood.suggestions.bloodPlague.uptime')`${formatPercentage(actual)}% Blood Plague uptime`))\r\n            .recommended(`>${formatPercentage(recommended)}% is recommended`));\r\n  }\r\n\r\n  statistic() {\r\n    return (\r\n      <Statistic\r\n        size=\"small\"\r\n        position={STATISTIC_ORDER.CORE(2)}\r\n      >\r\n        <BoringSpellValueText spell={SPELLS.BLOOD_PLAGUE}>\r\n          <>\r\n            <UptimeIcon /> {formatPercentage(this.uptime)}% <small>uptime</small>\r\n          </>\r\n        </BoringSpellValueText>\r\n      </Statistic>\r\n    );\r\n  }\r\n}\r\n\r\nexport default BloodPlagueUptime;\r\n","import React from 'react';\r\nimport Analyzer, { SELECTED_PLAYER } from 'parser/core/Analyzer';\r\nimport SPELLS from 'common/SPELLS';\r\nimport { formatPercentage } from 'common/format';\r\nimport SpellLink from 'common/SpellLink';\r\nimport AbilityTracker from 'parser/shared/modules/AbilityTracker';\r\nimport SpellUsable from 'parser/shared/modules/SpellUsable';\r\nimport { i18n } from '@lingui/core';\r\nimport { t } from '@lingui/macro';\r\nimport Events from 'parser/core/Events';\r\nimport STATISTIC_ORDER from 'interface/others/STATISTIC_ORDER';\r\nimport Statistic from 'interface/statistics/Statistic';\r\nimport BoringSpellValueText from 'interface/statistics/components/BoringSpellValueText';\r\n\r\nconst DURATION_WORTH_CASTING_MS = 8000;\r\n\r\nclass CrimsonScourge extends Analyzer {\r\n  static dependencies = {\r\n    abilityTracker: AbilityTracker,\r\n    spellUsable: SpellUsable,\r\n  };\r\n\r\n  crimsonScourgeProcsCounter = 0;\r\n  freeDeathAndDecayCounter = 0;\r\n  endOfCombatCast = false;\r\n\r\n  constructor(options) {\r\n    super(options);\r\n    this.addEventListener(Events.cast.by(SELECTED_PLAYER).spell(SPELLS.DEATH_AND_DECAY), this.onCast);\r\n    this.addEventListener(Events.applybuff.by(SELECTED_PLAYER).spell(SPELLS.CRIMSON_SCOURGE), this.onApplyBuff);\r\n  }\r\n\r\n  onCast(event) {\r\n    if (this.selectedCombatant.hasBuff(SPELLS.CRIMSON_SCOURGE.id, event.timestamp)) {\r\n      this.freeDeathAndDecayCounter += 1;\r\n      if (this.endOfCombatCast) {\r\n        this.endOfCombatCast = false;\r\n      }\r\n    }\r\n  }\r\n\r\n  onApplyBuff(event) {\r\n    this.crimsonScourgeProcsCounter += 1;\r\n    if (this.spellUsable.isOnCooldown(SPELLS.DEATH_AND_DECAY.id)) {\r\n      this.spellUsable.endCooldown(SPELLS.DEATH_AND_DECAY.id);\r\n    }\r\n    if (event.timestamp + DURATION_WORTH_CASTING_MS > this.owner.fight.end_time) {\r\n      this.endOfCombatCast = true;\r\n    }\r\n  }\r\n\r\n  get wastedCrimsonScourgeProcs() {\r\n    const wastedProcs = this.crimsonScourgeProcsCounter - this.freeDeathAndDecayCounter;\r\n    if (this.endOfCombatCast) {\r\n      return wastedProcs - 1;\r\n    }\r\n    return wastedProcs;\r\n  }\r\n\r\n  get wastedCrimsonScourgeProcsPercent() {\r\n    return this.wastedCrimsonScourgeProcs / this.crimsonScourgeProcsCounter;\r\n  }\r\n\r\n  get efficiencySuggestionThresholds() {\r\n    return {\r\n      actual: 1 - this.wastedCrimsonScourgeProcsPercent,\r\n      isLessThan: {\r\n        minor: 0.95,\r\n        average: 0.9,\r\n        major: 0.85,\r\n      },\r\n      style: 'percentage',\r\n    };\r\n  }\r\n\r\n  get suggestionThresholds() {\r\n    return {\r\n      actual: this.wastedCrimsonScourgeProcsPercent,\r\n      isGreaterThan: {\r\n        minor: 0.05,\r\n        average: 0.1,\r\n        major: 0.15,\r\n      },\r\n      style: 'percentage',\r\n    };\r\n  }\r\n\r\n  suggestions(when) {\r\n    if(this.selectedCombatant.hasTalent(SPELLS.RAPID_DECOMPOSITION_TALENT.id)){\r\n      return;\r\n    }\r\n    when(this.suggestionThresholds).addSuggestion((suggest, actual, recommended) => suggest(<>You had unspent <SpellLink id={SPELLS.CRIMSON_SCOURGE.id} /> procs. Make sure you always use them.</>)\r\n        .icon(SPELLS.CRIMSON_SCOURGE.icon)\r\n        .actual(i18n._(t('deathknight.blood.suggestions.crimsonScourge.procsWasted')`${formatPercentage(actual)}% Crimson Scourge procs wasted`))\r\n        .recommended(`<${formatPercentage(recommended)}% is recommended`));\r\n  }\r\n\r\n  statistic() {\r\n    return (\r\n      <Statistic\r\n        position={STATISTIC_ORDER.CORE(6)}\r\n        size=\"flexible\"\r\n        tooltip={`${this.wastedCrimsonScourgeProcs} out of ${this.crimsonScourgeProcsCounter} procs wasted.`}\r\n      >\r\n        <BoringSpellValueText spell={SPELLS.CRIMSON_SCOURGE}>\r\n          <>\r\n            {formatPercentage(this.wastedCrimsonScourgeProcsPercent)} % <small>procs wasted</small>\r\n          </>\r\n        </BoringSpellValueText>\r\n      </Statistic>\r\n    );\r\n  }\r\n}\r\n\r\nexport default CrimsonScourge;\r\n","import React from 'react';\r\nimport Analyzer, { SELECTED_PLAYER } from 'parser/core/Analyzer';\r\nimport SPELLS from 'common/SPELLS';\r\nimport AbilityTracker from 'parser/shared/modules/AbilityTracker';\r\nimport STATISTIC_ORDER from 'interface/others/STATISTIC_ORDER';\r\nimport Statistic from 'interface/statistics/Statistic';\r\nimport { formatThousands } from 'common/format';\r\nimport Events from 'parser/core/Events';\r\nimport BoringSpellValueText from 'interface/statistics/components/BoringSpellValueText';\r\n\r\nconst BLOODDRINKER_TICKS_PER_CAST = 4;\r\n\r\nclass Blooddrinker extends Analyzer {\r\n  static dependencies = {\r\n    abilityTracker: AbilityTracker,\r\n  };\r\n\r\n  _totalTicks = 0;\r\n  _totalCasts = 0;\r\n  _currentTicks = 0;\r\n  _wastedTicks = 0;\r\n  _ruinedCasts = 0;\r\n  totalDamage = 0;\r\n  totalHealing = 0;\r\n\r\n  constructor(...args) {\r\n    super(...args);\r\n    this.active = this.selectedCombatant.hasTalent(SPELLS.BLOODDRINKER_TALENT.id);\r\n    this.addEventListener(Events.cast.by(SELECTED_PLAYER).spell(SPELLS.BLOODDRINKER_TALENT), this.onCast);\r\n    this.addEventListener(Events.damage.by(SELECTED_PLAYER).spell(SPELLS.BLOODDRINKER_TALENT), this.onDamage);\r\n    this.addEventListener(Events.heal.to(SELECTED_PLAYER).spell(SPELLS.BLOODDRINKER_TALENT), this.onHeal);\r\n    this.addEventListener(Events.removedebuff.by(SELECTED_PLAYER).spell(SPELLS.BLOODDRINKER_TALENT), this.onRemoveDebuff);\r\n  }\r\n\r\n  onCast(event) {\r\n    this._totalCasts += 1;\r\n  }\r\n\r\n  onDamage(event) {\r\n    this.totalDamage += event.amount + (event.absorbed || 0);\r\n    this._currentTicks += 1;\r\n  }\r\n\r\n  onHeal(event) {\r\n    this.totalHealing += (event.amount || 0) + (event.absorbed || 0);\r\n  }\r\n\r\n  onRemoveDebuff(event) {\r\n    if (this._currentTicks < BLOODDRINKER_TICKS_PER_CAST) {\r\n      this._wastedTicks += (BLOODDRINKER_TICKS_PER_CAST - this._currentTicks);\r\n      this._ruinedCasts += 1;\r\n    }\r\n    this._currentTicks = 0;\r\n  }\r\n\r\n  statistic() {\r\n    this._totalTicks = this._totalCasts * BLOODDRINKER_TICKS_PER_CAST;\r\n    return (\r\n      <Statistic\r\n        position={STATISTIC_ORDER.CORE(6)}\r\n        size='flexible'\r\n        tooltip={\r\n          <>\r\n            You lost <strong>{this._wastedTicks}</strong> out of <strong>{this._totalTicks}</strong> ticks.<br />\r\n            <strong>Damage:</strong> {formatThousands(this.totalDamage)} / {this.owner.formatItemDamageDone(this.totalDamage)}<br />\r\n            <strong>Healing:</strong> {formatThousands(this.totalHealing)} / {this.owner.formatItemHealingDone(this.totalHealing)}<br />\r\n          </>\r\n        }\r\n      >\r\n        <BoringSpellValueText spell={SPELLS.BLOODDRINKER_TALENT}>\r\n          <>\r\n            {this._ruinedCasts} / {this._totalCasts} <small>Channels cancelled early</small>\r\n          </>\r\n        </BoringSpellValueText>\r\n      </Statistic>\r\n    );\r\n  }\r\n}\r\n\r\nexport default Blooddrinker;\r\n","import React from 'react';\r\nimport PropTypes from 'prop-types';\r\n\r\nimport SPELLS from 'common/SPELLS';\r\nimport SpellLink from 'common/SpellLink';\r\nimport Checklist from 'parser/shared/modules/features/Checklist';\r\nimport Rule from 'parser/shared/modules/features/Checklist/Rule';\r\nimport Requirement from 'parser/shared/modules/features/Checklist/Requirement';\r\nimport PreparationRule from 'parser/shared/modules/features/Checklist/PreparationRule';\r\nimport GenericCastEfficiencyRequirement from 'parser/shared/modules/features/Checklist/GenericCastEfficiencyRequirement';\r\n\r\nconst BloodDeathKnightChecklist = ({ combatant, castEfficiency, thresholds }) => {\r\n  const AbilityRequirement = props => (\r\n    <GenericCastEfficiencyRequirement\r\n      castEfficiency={castEfficiency.getCastEfficiencyForSpellId(props.spell)}\r\n      {...props}\r\n    />\r\n  );\r\n  AbilityRequirement.propTypes = {\r\n    spell: PropTypes.number.isRequired,\r\n  };\r\n\r\n  return (\r\n    <Checklist>\r\n      <Rule\r\n        name=\"Use your short cooldowns\"\r\n        description=\"These should generally always be recharging to maximize efficiency.\"\r\n      >\r\n        <AbilityRequirement spell={SPELLS.BLOOD_BOIL.id} />\r\n        {combatant.hasTalent(SPELLS.RAPID_DECOMPOSITION_TALENT.id) && <AbilityRequirement spell={SPELLS.DEATH_AND_DECAY.id} />}\r\n        {combatant.hasTalent(SPELLS.BLOODDRINKER_TALENT.id) && <AbilityRequirement spell={SPELLS.BLOODDRINKER_TALENT.id} />}\r\n        {combatant.hasTalent(SPELLS.RAPID_DECOMPOSITION_TALENT.id) && (\r\n          <Requirement\r\n            name={<><SpellLink id={SPELLS.CRIMSON_SCOURGE.id} /> procs spent</>}\r\n            thresholds={thresholds.crimsonScourge}\r\n          />\r\n        )}\r\n      </Rule>\r\n      <Rule\r\n        name=\"Do not overcap your resources\"\r\n        description=\"Death Knights are a resource based class, relying on Runes and Runic Power to cast core abilities. Try to spend Runic Power before reaching the maximum amount and always keep atleast 3 Runes on cooldown to avoid wasting resources.\"\r\n      >\r\n        <Requirement\r\n          name=\"Runic Power Efficiency\"\r\n          thresholds={thresholds.runicPower}\r\n        />\r\n        <Requirement\r\n          name=\"Rune Efficiency\"\r\n          thresholds={thresholds.runes}\r\n        />\r\n        <Requirement\r\n          name={<><SpellLink id={SPELLS.MARROWREND.id} /> Efficiency</>}\r\n          thresholds={thresholds.marrowrend}\r\n        />\r\n        <Requirement\r\n          name={<><SpellLink id={SPELLS.DEATHS_CARESS.id} /> Efficiency</>}\r\n          thresholds={thresholds.deathsCaress}\r\n        />\r\n      </Rule>\r\n\r\n      <Rule\r\n        name=\"Use your offensive cooldowns\"\r\n        description=\"You should aim to use these cooldowns as often as you can to maximize your damage output unless you are saving them for their defensive value.\"\r\n      >\r\n        <AbilityRequirement spell={SPELLS.DANCING_RUNE_WEAPON.id} />\r\n        {combatant.hasTalent(SPELLS.CONSUMPTION_TALENT.id) && (\r\n          <Requirement\r\n            name={<>Possible <SpellLink id={SPELLS.CONSUMPTION_TALENT.id} /> Hits</>}\r\n            thresholds={thresholds.consumption}\r\n          />\r\n        )}\r\n        {combatant.hasTalent(SPELLS.BONESTORM_TALENT.id) && (\r\n          <Requirement\r\n            name={<><SpellLink id={SPELLS.BONESTORM_TALENT.id} /> Efficiency</>}\r\n            thresholds={thresholds.bonestorm}\r\n          />\r\n        )}\r\n      </Rule>\r\n      <Rule\r\n        name=\"Maintain your buffs and debuffs\"\r\n        description=\"It is important to maintain these as they contribute a large amount to your DPS and HPS.\"\r\n      >\r\n        <Requirement\r\n          name={<><SpellLink id={SPELLS.BLOOD_PLAGUE.id} /> Uptime</>}\r\n          thresholds={thresholds.bloodPlague}\r\n        />\r\n        {combatant.hasTalent(SPELLS.MARK_OF_BLOOD_TALENT.id) && (\r\n          <Requirement\r\n            name={<><SpellLink id={SPELLS.MARK_OF_BLOOD_TALENT.id} /> Uptime</>}\r\n            thresholds={thresholds.markOfBlood}\r\n          />\r\n        )}\r\n        <Requirement\r\n          name={<><SpellLink id={SPELLS.BONE_SHIELD.id} /> Uptime</>}\r\n          thresholds={thresholds.boneShield}\r\n        />\r\n        {/* <Requirement\r\n          name={<><SpellLink id={SPELLS.OSSUARY.id} /> Uptime</>}\r\n          thresholds={thresholds.ossuary}\r\n        /> */}\r\n      </Rule>\r\n      <Rule\r\n        name=\"Use your defensive cooldowns\"\r\n        description=\"Use these to block damage spikes and keep damage smooth to reduce external healing required.\"\r\n      >\r\n        <AbilityRequirement spell={SPELLS.VAMPIRIC_BLOOD.id} />\r\n        <AbilityRequirement spell={SPELLS.ICEBOUND_FORTITUDE.id} />\r\n        <AbilityRequirement spell={SPELLS.ANTI_MAGIC_SHELL.id} />\r\n        {combatant.hasTalent(SPELLS.RUNE_TAP.id) && <AbilityRequirement spell={SPELLS.RUNE_TAP.id} />}\r\n        {combatant.hasTalent(SPELLS.TOMBSTONE_TALENT.id) && <AbilityRequirement spell={SPELLS.TOMBSTONE_TALENT.id} />}\r\n      </Rule>\r\n      <PreparationRule thresholds={thresholds} />\r\n    </Checklist>\r\n  );\r\n};\r\n\r\nBloodDeathKnightChecklist.propTypes = {\r\n  castEfficiency: PropTypes.object.isRequired,\r\n  combatant: PropTypes.shape({\r\n    hasTalent: PropTypes.func.isRequired,\r\n  }).isRequired,\r\n  thresholds: PropTypes.object.isRequired,\r\n};\r\n\r\nexport default BloodDeathKnightChecklist;\r\n","import SPELLS from 'common/SPELLS';\r\nimport Analyzer, { SELECTED_PLAYER } from 'parser/core/Analyzer';\r\nimport Events, { EventType } from 'parser/core/Events';\r\nimport { currentStacks } from 'parser/shared/modules/helpers/Stacks';\r\n\r\nconst MAX_BONE_SHIELD_STACKS = 10;\r\n\r\n/**\r\n boneShieldTimesByStacks() returns an array with the durations of each BS charge\r\n */\r\nclass BoneShieldStacksBySeconds extends Analyzer {\r\n  boneShieldStacks = [];\r\n  lastBoneShieldStack = 0;\r\n  lastBoneShieldUpdate = this.owner.fight.start_time;\r\n\r\n  constructor(...args) {\r\n    super(...args);\r\n    this.boneShieldStacks = Array.from({ length: MAX_BONE_SHIELD_STACKS + 1 }, x => []);\r\n\r\n    this.addEventListener(Events.applybuff.by(SELECTED_PLAYER).spell(SPELLS.BONE_SHIELD), this.handleStacks);\r\n    this.addEventListener(Events.applybuffstack.by(SELECTED_PLAYER).spell(SPELLS.BONE_SHIELD), this.handleStacks);\r\n    this.addEventListener(Events.removebuff.by(SELECTED_PLAYER).spell(SPELLS.BONE_SHIELD), this.handleStacks);\r\n    this.addEventListener(Events.removebuffstack.by(SELECTED_PLAYER).spell(SPELLS.BONE_SHIELD), this.handleStacks);\r\n    this.addEventListener(Events.fightend, this.handleStacks);\r\n  }\r\n\r\n  handleStacks(event) {\r\n    this.boneShieldStacks[this.lastBoneShieldStack].push(event.timestamp - this.lastBoneShieldUpdate);\r\n    if (event.type === EventType.FightEnd) {\r\n      return;\r\n    }\r\n    this.lastBoneShieldUpdate = event.timestamp;\r\n    this.lastBoneShieldStack = currentStacks(event);\r\n  }\r\n\r\n  get boneShieldTimesByStacks() {\r\n    return this.boneShieldStacks;\r\n  }\r\n\r\n  get averageBoneShieldStacks() {\r\n    let avgStacks = 0;\r\n    this.boneShieldStacks.forEach((elem, index) => {\r\n      avgStacks += elem.reduce((a, b) => a + b, 0) / this.owner.fightDuration * index;\r\n    });\r\n    return avgStacks;\r\n  }\r\n}\r\n\r\nexport default BoneShieldStacksBySeconds;\r\n","import React from 'react';\r\nimport Analyzer from 'parser/core/Analyzer';\r\nimport SPELLS from 'common/SPELLS';\r\nimport { formatDuration, formatPercentage } from 'common/format';\r\nimport STATISTIC_ORDER from 'interface/others/STATISTIC_ORDER';\r\nimport { i18n } from '@lingui/core';\r\nimport { t } from '@lingui/macro';\r\nimport StatTracker from 'parser/shared/modules/StatTracker';\r\nimport BoringSpellValueText from 'interface/statistics/components/BoringSpellValueText';\r\nimport UptimeIcon from 'interface/icons/Uptime';\r\nimport Statistic from 'interface/statistics/Statistic';\r\n\r\nimport BoneShieldTimesByStacks from './BoneShieldTimesByStacks';\r\n\r\nclass BoneShield extends Analyzer {\r\n\r\n  static dependencies = {\r\n    statTracker: StatTracker,\r\n    boneShieldTimesByStacks: BoneShieldTimesByStacks,\r\n  };\r\n\r\n  get boneShieldTimesByStack() {\r\n    return this.boneShieldTimesByStacks.boneShieldTimesByStacks;\r\n  }\r\n\r\n  get uptime() {\r\n    return this.selectedCombatant.getBuffUptime(SPELLS.BONE_SHIELD.id) / this.owner.fightDuration;\r\n  }\r\n\r\n  get uptimeSuggestionThresholds() {\r\n    return {\r\n      actual: this.uptime,\r\n      isLessThan: {\r\n        minor: 0.95,\r\n        average: 0.9,\r\n        major: .8,\r\n      },\r\n      style: 'percentage',\r\n    };\r\n  }\r\n\r\n  suggestions(when) {\r\n    when(this.uptimeSuggestionThresholds)\r\n      .addSuggestion((suggest, actual, recommended) => suggest('Your Bone Shield uptime can be improved. Try to keep it up at all times.')\r\n          .icon(SPELLS.BONE_SHIELD.icon)\r\n          .actual(i18n._(t('deathknight.blood.suggestions.boneShield.uptime')`${formatPercentage(actual)}% Bone Shield uptime`))\r\n          .recommended(`>${formatPercentage(recommended)}% is recommended`));\r\n  }\r\n\r\n  statistic() {\r\n\r\n    return (\r\n      <Statistic\r\n        position={STATISTIC_ORDER.CORE(5)}\r\n        size=\"flexible\"\r\n        dropdown={(\r\n          <>\r\n            <table className=\"table table-condensed\">\r\n              <thead>\r\n                <tr>\r\n                  <th>Stacks</th>\r\n                  <th>Time (s)</th>\r\n                  <th>Time (%)</th>\r\n                </tr>\r\n              </thead>\r\n              <tbody>\r\n                {Object.values(this.boneShieldTimesByStack).map((e, i) => (\r\n                  <tr key={i}>\r\n                    <th>{i}</th>\r\n                    <td>{formatDuration(e.reduce((a, b) => a + b, 0) / 1000)}</td>\r\n                    <td>{formatPercentage(e.reduce((a, b) => a + b, 0) / this.owner.fightDuration)}%</td>\r\n                  </tr>\r\n                ))}\r\n              </tbody>\r\n            </table>\r\n          </>\r\n        )}\r\n      >\r\n        <BoringSpellValueText spell={SPELLS.BONE_SHIELD}>\r\n          <>\r\n            <UptimeIcon /> {formatPercentage(this.uptime)}% <small>uptime</small>\r\n          </>\r\n        </BoringSpellValueText>\r\n      </Statistic>\r\n    );\r\n  }\r\n}\r\n\r\nexport default BoneShield;\r\n","import React from 'react';\r\n\r\nimport SPELLS from 'common/SPELLS';\r\nimport SpellLink from 'common/SpellLink';\r\nimport { formatPercentage } from 'common/format';\r\n\r\nimport AbilityTracker from 'parser/shared/modules/AbilityTracker';\r\nimport Analyzer, { SELECTED_PLAYER } from 'parser/core/Analyzer';\r\nimport { i18n } from '@lingui/core';\r\nimport { t } from '@lingui/macro';\r\nimport Events from 'parser/core/Events';\r\nimport STATISTIC_ORDER from 'interface/others/STATISTIC_ORDER';\r\nimport Statistic from 'interface/statistics/Statistic';\r\nimport BoringSpellValueText from 'interface/statistics/components/BoringSpellValueText';\r\n\r\nconst REFRESH_AT_STACKS = 7;\r\n\r\nconst REFRESH_AT_SECONDS = 6;\r\nconst BS_DURATION = 30;\r\nconst MR_GAIN = 3;\r\n\r\nclass MarrowrendUsage extends Analyzer {\r\n\r\n  static dependencies = {\r\n    abilityTracker: AbilityTracker,\r\n  };\r\n\r\n  /*\r\n    currentBoneShieldBuffer contains the BS stacks caused by the actual MR cast\r\n    since the applyBuffStack event happens before the cast event\r\n  */\r\n\r\n  currentBoneShieldStacks = 0;\r\n  currentBoneShieldBuffer = 0;\r\n  lastMarrowrendCast = 0;\r\n\r\n  bsStacksWasted = 0;\r\n  botdStacksWasted = 0;\r\n\r\n  refreshMRCasts = 0;\r\n  totalMRCasts = 0;\r\n\r\n  badMRCasts = 0;\r\n\r\n  hasBonesOfTheDamned = false;\r\n  refreshAtStacks = REFRESH_AT_STACKS; // contains number for the tooltip for proper MR-usage, not used for calculations\r\n\r\n  bonesOfTheDamnedProc = 0;\r\n  totalStacksGenerated = 0;\r\n\r\n  constructor(...args) {\r\n    super(...args);\r\n    this.addEventListener(Events.applybuff.to(SELECTED_PLAYER).spell(SPELLS.BONE_SHIELD), this.onApplyBuff);\r\n    this.addEventListener(Events.applybuffstack.to(SELECTED_PLAYER).spell(SPELLS.BONE_SHIELD), this.onApplyBuff);\r\n    this.addEventListener(Events.removebuff.to(SELECTED_PLAYER).spell(SPELLS.BONE_SHIELD), this.onRemoveBuff);\r\n    this.addEventListener(Events.removebuffstack.to(SELECTED_PLAYER).spell(SPELLS.BONE_SHIELD), this.onRemoveBuffStack);\r\n    this.addEventListener(Events.cast.by(SELECTED_PLAYER).spell(SPELLS.MARROWREND), this.onCast);\r\n  }\r\n\r\n  onApplyBuff(event) {\r\n    this.currentBoneShieldBuffer += 1;\r\n    this.currentBoneShieldStacks = event.stack;\r\n  }\r\n\r\n  onRemoveBuff(event) {\r\n    this.currentBoneShieldStacks = 0;\r\n  }\r\n\r\n  onRemoveBuffStack(event) {\r\n    this.currentBoneShieldBuffer = 0;\r\n    this.currentBoneShieldStacks = event.stack;\r\n  }\r\n\r\n  onCast(event) {\r\n    //don't add to wasted casts if MR casts was at ~6sec left on BS duration\r\n    const durationLeft = BS_DURATION - (event.timestamp - this.lastMarrowrendCast) / 1000;\r\n    if (durationLeft <= REFRESH_AT_SECONDS) {\r\n      this.refreshMRCasts += 1;\r\n    } else {\r\n      const boneShieldStacks = this.currentBoneShieldStacks - this.currentBoneShieldBuffer;\r\n      let badCast = '';\r\n\r\n      if (boneShieldStacks > REFRESH_AT_STACKS) {\r\n        // this was a wasted charge for sure\r\n        const wasted = MR_GAIN - this.currentBoneShieldBuffer;\r\n        this.badMRCasts += 1;\r\n        this.bsStacksWasted += wasted;\r\n        badCast = badCast + `You made this cast with ${boneShieldStacks} stacks of Bone Shield while it had ${(durationLeft).toFixed(1)} seconds left, wasting ${wasted} charges.`;\r\n      }\r\n\r\n      if (this.hasBonesOfTheDamned && boneShieldStacks >= REFRESH_AT_STACKS) {\r\n        // this was a potentially proc of BotD\r\n        this.botdStacksWasted += 1;\r\n        badCast = badCast + `This cast couldn't proc ${SPELLS.BONES_OF_THE_DAMNED.name} because you had already ${boneShieldStacks} stacks.`;\r\n      }\r\n\r\n      if (badCast !== '') {\r\n        event.meta = event.meta || {};\r\n        event.meta.isInefficientCast = true;\r\n        event.meta.inefficientCastReason = badCast;\r\n      }\r\n    }\r\n\r\n    if (this.currentBoneShieldBuffer > MR_GAIN && this.hasBonesOfTheDamned) {\r\n      // count Bones of the Damned procs and mark cast in timeline\r\n      event.meta = event.meta || {};\r\n      event.meta.isEnhancedCast = true;\r\n      event.meta.enhancedCastReason = `This ${SPELLS.MARROWREND.name} cast procced ${SPELLS.BONES_OF_THE_DAMNED.name}`;\r\n      this.bonesOfTheDamnedProc += 1;\r\n    }\r\n\r\n    this.totalStacksGenerated += this.currentBoneShieldBuffer;\r\n    this.currentBoneShieldBuffer = 0;\r\n    this.lastMarrowrendCast = event.timestamp;\r\n    this.totalMRCasts += 1;\r\n  }\r\n\r\n  get bonesOfTheDamnedProcs() {\r\n    return this.bonesOfTheDamnedProc;\r\n  }\r\n\r\n  get wastedbonesOfTheDamnedProcs() {\r\n    return this.botdStacksWasted;\r\n  }\r\n\r\n  get totalBoneShieldStacksGenerated() {\r\n    return this.totalStacksGenerated;\r\n  }\r\n\r\n  get wastedBoneShieldStacksPercent() {\r\n    return this.bsStacksWasted / (this.totalStacksGenerated + this.bsStacksWasted);\r\n  }\r\n\r\n  get marrowrendCasts() {\r\n    return this.totalMRCasts;\r\n  }\r\n\r\n  get refreshWithStacks() {\r\n    return this.refreshAtStacks;\r\n  }\r\n\r\n  get suggestionThresholds() {\r\n    return {\r\n      actual: this.wastedBoneShieldStacksPercent,\r\n      isGreaterThan: {\r\n        minor: 0,\r\n        average: 0.1,\r\n        major: .2,\r\n      },\r\n      style: 'percentage',\r\n    };\r\n  }\r\n\r\n  get suggestionThresholdsEfficiency() {\r\n    return {\r\n      actual: 1 - this.wastedBoneShieldStacksPercent,\r\n      isLessThan: {\r\n        minor: 1,\r\n        average: 0.9,\r\n        major: .8,\r\n      },\r\n      style: 'percentage',\r\n    };\r\n  }\r\n\r\n  suggestions(when) {\r\n    when(this.suggestionThresholds)\r\n      .addSuggestion((suggest, actual, recommended) => {\r\n        const botDDisclaimer = this.hasBonesOfTheDamned ? ` (not counting possible ${SPELLS.BONES_OF_THE_DAMNED.name} procs)` : '';\r\n        return suggest(<>You casted {this.badMRCasts} Marrowrends with more than {REFRESH_AT_STACKS} stacks of <SpellLink id={SPELLS.BONE_SHIELD.id} /> that were not about to expire, wasting {this.bsStacksWasted} stacks{botDDisclaimer}.<br />Cast <SpellLink id={SPELLS.HEART_STRIKE.id} /> instead if you are at {this.refreshAtStacks} stacks or above.</>)\r\n          .icon(SPELLS.MARROWREND.icon)\r\n          .actual(i18n._(t('deathknight.blood.suggestions.boneShield.stacksWasted')`${formatPercentage(actual)}% wasted ${SPELLS.BONE_SHIELD.name} stacks`))\r\n          .recommended(`${this.bsStacksWasted} stacks wasted, ${this.totalStacksGenerated} stacks generated`);\r\n      });\r\n  }\r\n\r\n  statistic() {\r\n    return (\r\n      <Statistic\r\n        position={STATISTIC_ORDER.CORE(3)}\r\n        size=\"flexible\"\r\n        tooltip={(\r\n          <>\r\n            {this.refreshMRCasts} casts to refresh Bone Shield, those do not count towards bad casts.<br />\r\n            {this.hasBonesOfTheDamned && <>{this.wastedbonesOfTheDamnedProcs} casts with {REFRESH_AT_STACKS} stacks of {SPELLS.BONE_SHIELD.name}, wasting potential {SPELLS.BONES_OF_THE_DAMNED.name} procs.<br /></>}\r\n            {this.badMRCasts} casts with more than {REFRESH_AT_STACKS} stacks of Bone Shield wasting {this.bsStacksWasted} stacks.<br /><br />\r\n\r\n            Avoid casting Marrowrend unless you have {this.refreshAtStacks} or less stacks or if Bone Shield has less than 6sec of its duration left.\r\n          </>\r\n        )}\r\n      >\r\n        <BoringSpellValueText spell={SPELLS.MARROWREND}>\r\n          <>\r\n            {this.badMRCasts} / {this.totalMRCasts} <small>bad casts</small>\r\n          </>\r\n        </BoringSpellValueText>\r\n      </Statistic>\r\n    );\r\n  }\r\n}\r\n\r\nexport default MarrowrendUsage;\r\n","import React from 'react';\r\nimport Analyzer, { SELECTED_PLAYER } from 'parser/core/Analyzer';\r\nimport SPELLS from 'common/SPELLS/index';\r\nimport SpellLink from 'common/SpellLink';\r\nimport { formatPercentage } from 'common/format';\r\nimport SpellUsable from 'parser/shared/modules/SpellUsable';\r\nimport { i18n } from '@lingui/core';\r\nimport { t } from '@lingui/macro';\r\nimport Events from 'parser/core/Events';\r\n\r\nconst RANGE_WHERE_YOU_SHOULDNT_DC = 12; // yrd\r\n\r\nclass DeathsCaress extends Analyzer {\r\n  static dependencies = {\r\n    spellUsable: SpellUsable,\r\n  };\r\n\r\n  dcCasts = 0;\r\n  cast = [];\r\n\r\n  spellsThatShouldBeUsedFirst = [\r\n    SPELLS.DEATH_AND_DECAY.id,\r\n  ];\r\n\r\n  constructor(...args) {\r\n    super(...args);\r\n    this.addEventListener(Events.cast.by(SELECTED_PLAYER).spell(SPELLS.DEATHS_CARESS), this.onCast);\r\n    this.addEventListener(Events.damage.by(SELECTED_PLAYER).spell(SPELLS.DEATHS_CARESS), this.onDamage);\r\n    if(this.selectedCombatant.hasTalent(SPELLS.BLOODDRINKER_TALENT.id)) {\r\n      this.spellsThatShouldBeUsedFirst.push(SPELLS.BLOODDRINKER_TALENT.id);\r\n    }\r\n  }\r\n\r\n  onCast(event) {\r\n    const hadAnotherRangedSpell = this.spellsThatShouldBeUsedFirst.some(e => this.spellUsable.isAvailable(e));\r\n    this.dcCasts += 1;\r\n\r\n    this.cast.push({\r\n      timestamp: event.timestamp,\r\n      hadAnotherRangedSpell: hadAnotherRangedSpell,\r\n      playerPosition: {\r\n        x: event.x,\r\n        y: event.y,\r\n      },\r\n      enemyPosition: {\r\n        x: 0,\r\n        y: 0,\r\n      },\r\n    });\r\n  }\r\n\r\n  onDamage(event) {\r\n    if (this.cast.length === 0) {\r\n      return;\r\n    }\r\n\r\n    this.cast[this.cast.length - 1].enemyPosition = {\r\n      x: event.x,\r\n      y: event.y,\r\n    };\r\n  }\r\n\r\n  calculateDistance(x1, y1, x2, y2) {\r\n    return Math.sqrt((x1 - x2) * (x1 - x2) + (y1 - y2) * (y1 - y2)) / 100;\r\n  }\r\n\r\n  get badDcCasts() {\r\n    let badCasts = 0;\r\n\r\n    this.cast.forEach(e => {\r\n      //only happens when the target died before the damage event occurs\r\n      if (e.enemyPosition.x === 0 && e.enemyPosition.y === 0) {\r\n        return;\r\n      }\r\n\r\n      const distance = this.calculateDistance(e.enemyPosition.x, e.enemyPosition.y, e.playerPosition.x, e.playerPosition.y);\r\n      if (distance <= RANGE_WHERE_YOU_SHOULDNT_DC || e.hadAnotherRangedSpell) { // close to melee-range => bad || when another ranged spell was available\r\n        badCasts += 1;\r\n      }\r\n    });\r\n\r\n    return badCasts;\r\n  }\r\n\r\n  get averageCastSuggestionThresholds() {\r\n    return {\r\n      actual: 1 - (this.badDcCasts / this.dcCasts),\r\n      isLessThan: {\r\n        minor: 1,\r\n        average: .95,\r\n        major: .9,\r\n      },\r\n      style: 'percentage',\r\n    };\r\n  }\r\n\r\n  suggestions(when) {\r\n    when(this.averageCastSuggestionThresholds)\r\n        .addSuggestion((suggest, actual, recommended) => suggest(<>Avoid casting <SpellLink id={SPELLS.DEATHS_CARESS.id} /> unless you're out of melee range and about to cap your runes while <SpellLink id={SPELLS.DEATH_AND_DECAY.id} /> and <SpellLink id={SPELLS.BLOODDRINKER_TALENT.id} /> are on cooldown. Dump runes primarily with <SpellLink id={SPELLS.HEART_STRIKE.id} />.</>)\r\n            .icon(SPELLS.DEATHS_CARESS.icon)\r\n            .actual(i18n._(t('deathknight.blood.suggestions.deathCaress.badCasts')`${formatPercentage(this.badDcCasts / this.dcCasts)}% bad ${SPELLS.DEATHS_CARESS.name} casts`))\r\n            .recommended(`0% are recommended`));\r\n  }\r\n}\r\n\r\nexport default DeathsCaress;\r\n","import React from 'react';\r\nimport Analyzer, { SELECTED_PLAYER } from 'parser/core/Analyzer';\r\nimport SPELLS from 'common/SPELLS';\r\nimport SpellLink from 'common/SpellLink';\r\nimport { formatPercentage, formatNumber } from 'common/format';\r\nimport TalentStatisticBox from 'interface/others/TalentStatisticBox';\r\nimport STATISTIC_ORDER from 'interface/others/STATISTIC_ORDER';\r\nimport RESOURCE_TYPES from 'game/RESOURCE_TYPES';\r\nimport { i18n } from '@lingui/core';\r\nimport { t } from '@lingui/macro';\r\nimport Events from 'parser/core/Events';\r\n\r\nconst SUGGESTED_MIN_TARGETS_FOR_BONESTORM = 1.5;\r\n\r\nclass Bonestorm extends Analyzer {\r\n  bsCasts = [];\r\n  totalBonestormDamage = 0;\r\n\r\n  constructor(...args) {\r\n    super(...args);\r\n    this.active = this.selectedCombatant.hasTalent(SPELLS.BONESTORM_TALENT.id);\r\n    this.addEventListener(Events.cast.by(SELECTED_PLAYER).spell(SPELLS.BONESTORM_TALENT), this.onCast);\r\n    this.addEventListener(Events.damage.by(SELECTED_PLAYER).spell(SPELLS.BONESTORM_HIT), this.onDamage);\r\n  }\r\n\r\n  onCast(event) {\r\n    const resource = event.classResources?.find(resource => resource.type === RESOURCE_TYPES.RUNIC_POWER.id);\r\n    if (!resource) {\r\n      return;\r\n    }\r\n\r\n    this.bsCasts.push({\r\n      cost: resource.cost,\r\n      hits: [],\r\n    });\r\n  }\r\n\r\n  onDamage(event) {\r\n    if (this.bsCasts.length === 0) {\r\n      // to account for prepull-cheese, assuming 100RP because I dont know how much RP was spend prepull\r\n      this.bsCasts.push({\r\n        cost: 100,\r\n        hits: [],\r\n      });\r\n    }\r\n\r\n    const totalDamage = event.amount + (event.absorbed || 0);\r\n    this.bsCasts[this.bsCasts.length - 1].hits.push(totalDamage);\r\n    this.totalBonestormDamage += totalDamage;\r\n  }\r\n\r\n  get goodBonestormCasts() {\r\n    const goodCasts = this.bsCasts.filter((val) => val.hits.length / (val.cost / 100) >= SUGGESTED_MIN_TARGETS_FOR_BONESTORM);\r\n    return goodCasts.length;\r\n  }\r\n\r\n  get totalBonestormCasts() {\r\n    return this.bsCasts.length;\r\n  }\r\n\r\n  get suggestionThresholds() {\r\n    return {\r\n      actual: this.goodBonestormCasts / this.totalBonestormCasts,\r\n      isLessThan: {\r\n        minor: 1,\r\n        average: 0.8,\r\n        major: 0.6,\r\n      },\r\n      style: 'percentage',\r\n    };\r\n  }\r\n\r\n  suggestions(when) {\r\n    when(this.suggestionThresholds)\r\n      .addSuggestion((suggest, actual, recommended) => suggest(<>Try to cast <SpellLink id={SPELLS.BONESTORM_TALENT.id} /> only if you can reliable hit 2 or more targets to maximize the damage and healing. Casting <SpellLink id={SPELLS.BONESTORM_TALENT.id} /> with only one target in range is only a minor DPS gain (~10 DPS) at the cost of pooling Runic Power, use <SpellLink id={SPELLS.DEATH_STRIKE.id} /> instead.</>)\r\n          .icon(SPELLS.BONESTORM_TALENT.icon)\r\n          .actual(i18n._(t('deathknight.blood.suggestions.boneStorm.notEnoughTargets')`${ formatPercentage(actual) }% casts hit ${SUGGESTED_MIN_TARGETS_FOR_BONESTORM} or more targets`))\r\n          .recommended(`${ formatPercentage(recommended) }%is recommended`));\r\n  }\r\n\r\n  get bonestormTooltip() {\r\n    const tooltipRows = [];\r\n    this.bsCasts.forEach((cast, index) => {\r\n      const avgDamage = formatNumber((cast.hits.reduce((a, b) => a + b, 0) / cast.hits.length) || 0);\r\n      const totalDamage = formatNumber(cast.hits.reduce((a, b) => a + b, 0));\r\n      const avgHits = formatNumber((cast.hits.length / cast.cost * 100) || 0, 1);\r\n      const rpCost = formatNumber(cast.cost / 10);\r\n\r\n      tooltipRows.push(<>Cast #{ index + 1 } (for {rpCost} RP) hit an average of {avgHits} target{ avgHits <= 1 ? '' : 's' } for {avgDamage} per hit. ({ totalDamage} total)<br /></>);\r\n    });\r\n    return tooltipRows;\r\n  }\r\n\r\n  statistic() {\r\n    return (\r\n      <TalentStatisticBox\r\n        talent={SPELLS.BONESTORM_TALENT.id}\r\n        position={STATISTIC_ORDER.OPTIONAL(7)}\r\n        value={`${ formatPercentage(this.owner.getPercentageOfTotalDamageDone(this.totalBonestormDamage)) } %`}\r\n        label=\"of your total damage\"\r\n        tooltip={this.bonestormTooltip}\r\n      />\r\n    );\r\n  }\r\n}\r\n\r\nexport default Bonestorm;\r\n","import React from 'react';\r\nimport Analyzer from 'parser/core/Analyzer';\r\nimport Enemies from 'parser/shared/modules/Enemies';\r\nimport SPELLS from 'common/SPELLS/index';\r\nimport SpellLink from 'common/SpellLink';\r\nimport { formatPercentage } from 'common/format';\r\nimport TalentStatisticBox from 'interface/others/TalentStatisticBox';\r\nimport STATISTIC_ORDER from 'interface/others/STATISTIC_ORDER';\r\nimport { i18n } from '@lingui/core';\r\nimport { t } from '@lingui/macro';\r\n\r\nclass MarkOfBlood extends Analyzer {\r\n  static dependencies = {\r\n    enemies: Enemies,\r\n  };\r\n\r\n  constructor(...args) {\r\n    super(...args);\r\n    this.active = this.selectedCombatant.hasTalent(SPELLS.MARK_OF_BLOOD_TALENT.id);\r\n  }\r\n\r\n  get uptime() {\r\n    return this.enemies.getBuffUptime(SPELLS.MARK_OF_BLOOD_TALENT.id) / this.owner.fightDuration;\r\n  }\r\n\r\n  get uptimeSuggestionThresholds() {\r\n    return {\r\n      actual: this.uptime,\r\n      isLessThan: {\r\n        minor: 0.95,\r\n        average: 0.9,\r\n        major: .8,\r\n      },\r\n      style: 'percentage',\r\n    };\r\n  }\r\n\r\n  suggestions(when) {\r\n    when(this.uptimeSuggestionThresholds)\r\n        .addSuggestion((suggest, actual, recommended) => suggest(<>Your <SpellLink id={SPELLS.MARK_OF_BLOOD_TALENT.id} /> uptime can be improved.</>)\r\n            .icon(SPELLS.MARK_OF_BLOOD_TALENT.icon)\r\n            .actual(i18n._(t('deathknight.blood.suggestions.markOfBlood.uptime')`${formatPercentage(actual)}% Mark Of Blood Uptime`))\r\n            .recommended(`>${formatPercentage(recommended)}% is recommended`));\r\n  }\r\n\r\n  statistic() {\r\n    return (\r\n      <TalentStatisticBox\r\n        talent={SPELLS.MARK_OF_BLOOD_TALENT.id}\r\n        position={STATISTIC_ORDER.OPTIONAL(6)}\r\n        value={`${formatPercentage(this.uptime)} %`}\r\n        label=\"Mark Of Blood Uptime\"\r\n      />\r\n    );\r\n  }\r\n}\r\n\r\nexport default MarkOfBlood;\r\n","import SPELLS from 'common/SPELLS';\r\nimport AoESpellEfficiency from 'parser/shared/modules/features/AoESpellEfficiency';\r\n\r\nclass Consumption extends AoESpellEfficiency {\r\n\r\n  constructor(...args) {\r\n    super(...args);\r\n    this.ability = SPELLS.CONSUMPTION_TALENT;\r\n    this.active = this.selectedCombatant.hasTalent(SPELLS.CONSUMPTION_TALENT.id);\r\n  }\r\n}\r\n\r\nexport default Consumption;\r\n","import RESOURCE_TYPES from 'game/RESOURCE_TYPES';\r\nimport ResourceTracker from 'parser/shared/modules/resources/resourcetracker/ResourceTracker';\r\nimport SPELLS from 'common/SPELLS';\r\nimport SpellUsable from 'parser/shared/modules/SpellUsable';\r\n\r\nclass RunicPowerTracker extends ResourceTracker {\r\n  static dependencies = {\r\n    ...ResourceTracker.dependencies,\r\n    spellUsable: SpellUsable,\r\n  };\r\n\r\n  totalCooldownReduction = 0;\r\n  totalCooldownReductionWasted = 0;\r\n\r\n  constructor(...args) {\r\n    super(...args);\r\n    this.resource = RESOURCE_TYPES.RUNIC_POWER;\r\n  }\r\n\r\n  getReducedCost(event) {\r\n    if (!this.getResource(event).cost) {\r\n      return 0;\r\n    }\r\n    let cost = this.getResource(event).cost / 10;\r\n    const abilityId = event.ability.guid;\r\n    if (abilityId === SPELLS.DEATH_STRIKE.id) {\r\n      this.reduceCooldown(cost); //Red Thirst does not care about cost reduction\r\n      if (this.selectedCombatant.hasBuff(SPELLS.OSSUARY.id)) {\r\n        cost -= 5;\r\n      }\r\n    }\r\n    return cost;\r\n  }\r\n\r\n  reduceCooldown(cost) {\r\n    if (!this.selectedCombatant.hasTalent(SPELLS.RED_THIRST_TALENT.id)){\r\n      return;\r\n    }\r\n    const COOLDOWN_REDUCTION_MS = 1000 / 10;\r\n    const reduction = cost * COOLDOWN_REDUCTION_MS;\r\n    if (!this.spellUsable.isOnCooldown(SPELLS.VAMPIRIC_BLOOD.id)){\r\n      this.totalCooldownReductionWasted += reduction;\r\n    } else {\r\n      const effectiveReduction = this.spellUsable.reduceCooldown(SPELLS.VAMPIRIC_BLOOD.id, reduction);\r\n      this.totalCooldownReduction += effectiveReduction;\r\n      this.totalCooldownReductionWasted += reduction - effectiveReduction;\r\n    }\r\n  }\r\n\r\n  get cooldownReduction(){\r\n    return this.totalCooldownReduction;\r\n  }\r\n\r\n  get cooldownReductionWasted(){\r\n    return this.totalCooldownReductionWasted;\r\n  }\r\n}\r\n\r\nexport default RunicPowerTracker;\r\n","import React from 'react';\r\n\r\nimport Analyzer from 'parser/core/Analyzer';\r\nimport Panel from 'interface/others/Panel';\r\nimport { formatPercentage } from 'common/format';\r\nimport { i18n } from '@lingui/core';\r\nimport { t } from '@lingui/macro';\r\nimport STATISTIC_ORDER from 'interface/others/STATISTIC_ORDER';\r\nimport Statistic from 'interface/statistics/Statistic';\r\nimport ResourceBreakdown from 'parser/shared/modules/resources/resourcetracker/ResourceBreakdown';\r\nimport BoringResourceValue from 'interface/statistics/components/BoringResourceValue';\r\nimport RESOURCE_TYPES from 'game/RESOURCE_TYPES';\r\n\r\nimport RunicPowerTracker from './RunicPowerTracker';\r\n\r\nclass RunicPowerDetails extends Analyzer {\r\n  static dependencies = {\r\n    runicPowerTracker: RunicPowerTracker,\r\n  };\r\n\r\n  get wastedPercent() {\r\n    return this.runicPowerTracker.wasted / (this.runicPowerTracker.wasted + this.runicPowerTracker.generated) || 0;\r\n  }\r\n\r\n  get efficiencySuggestionThresholds() {\r\n    return {\r\n      actual: 1 - this.wastedPercent,\r\n      isLessThan: {\r\n        minor: 0.95,\r\n        average: 0.90,\r\n        major: .85,\r\n      },\r\n      style: 'percentage',\r\n    };\r\n  }\r\n\r\n  get suggestionThresholds() {\r\n    return {\r\n      actual: this.wastedPercent,\r\n      isGreaterThan: {\r\n        minor: 0.05,\r\n        average: 0.1,\r\n        major: .15,\r\n      },\r\n      style: 'percentage',\r\n    };\r\n  }\r\n\r\n  suggestions(when) {\r\n    when(this.suggestionThresholds).addSuggestion((suggest, actual, recommended) => suggest(`You wasted ${formatPercentage(this.wastedPercent)}% of your Runic Power.`)\r\n      .icon('inv_sword_62')\r\n      .actual(i18n._(t('deathknight.blood.suggestions.runicPower.wasted')`${formatPercentage(actual)}% wasted`))\r\n      .recommended(`<${formatPercentage(recommended)}% is recommended`));\r\n  }\r\n\r\n  statistic() {\r\n    return (\r\n      <Statistic\r\n        position={STATISTIC_ORDER.CORE(3)}\r\n        size=\"small\"\r\n        tooltip={`${this.runicPowerTracker.wasted} out of ${this.runicPowerTracker.wasted + this.runicPowerTracker.generated} runic power wasted.`}\r\n      >\r\n        <BoringResourceValue\r\n          resource={RESOURCE_TYPES.RUNIC_POWER}\r\n          value={`${formatPercentage(this.wastedPercent)} %`}\r\n          label=\"Runic Power wasted\"\r\n        />\r\n      </Statistic>\r\n    );\r\n  }\r\n\r\n  tab() {\r\n    return {\r\n      title: 'Runic Power usage',\r\n      url: 'runic-power-usage',\r\n      render: () => (\r\n        <Panel>\r\n          <ResourceBreakdown\r\n            tracker={this.runicPowerTracker}\r\n            showSpenders\r\n          />\r\n        </Panel>\r\n      ),\r\n    };\r\n  }\r\n\r\n}\r\n\r\nexport default RunicPowerDetails;\r\n","import React from 'react';\r\n\r\nimport BaseChecklist from 'parser/shared/modules/features/Checklist/Module';\r\nimport CastEfficiency from 'parser/shared/modules/CastEfficiency';\r\nimport Combatants from 'parser/shared/modules/Combatants';\r\nimport PreparationRuleAnalyzer from 'parser/shared/modules/features/Checklist/PreparationRuleAnalyzer';\r\n\r\nimport AlwaysBeCasting from '../AlwaysBeCasting';\r\nimport Component from './Component';\r\n\r\nimport BoneShield from \"../BoneShield\";\r\nimport BloodPlagueUptime from \"../BloodPlagueUptime\";\r\nimport CrimsonScourge from \"../CrimsonScourge\";\r\nimport MarrowrendUsage from \"../MarrowrendUsage\";\r\nimport DeathsCaress from '../../core/DeathsCaress';\r\nimport BoneStorm from '../../talents/Bonestorm';\r\nimport MarkOfBloodUptime from '../../talents/MarkOfBlood';\r\n// import Ossuary from '../Ossuary';\r\nimport Consumption from '../../talents/Consumption';\r\nimport RunicPowerDetails from '../../runicpower/RunicPowerDetails';\r\nimport RuneTracker from '../../../../shared/RuneTracker';\r\n\r\nclass Checklist extends BaseChecklist {\r\n  static dependencies = {\r\n    combatants: Combatants,\r\n    castEfficiency: CastEfficiency,\r\n    alwaysBeCasting: AlwaysBeCasting,\r\n    preparationRuleAnalyzer: PreparationRuleAnalyzer,\r\n\r\n    bloodplagueUptime: BloodPlagueUptime,\r\n    boneShield: BoneShield,\r\n    // ossuary: Ossuary,\r\n    deathsCaress: DeathsCaress,\r\n    bonestorm: BoneStorm,\r\n    consumption: Consumption,\r\n    markOfBloodUptime: MarkOfBloodUptime,\r\n    crimsonScourge: CrimsonScourge,\r\n    marrowrendUsage: MarrowrendUsage,\r\n    runicPowerDetails: RunicPowerDetails,\r\n    runeTracker: RuneTracker,\r\n  };\r\n\r\n  render() {\r\n    return (\r\n      <Component\r\n        combatant={this.combatants.selected}\r\n        castEfficiency={this.castEfficiency}\r\n        thresholds={{\r\n          ...this.preparationRuleAnalyzer.thresholds,\r\n          crimsonScourge: this.crimsonScourge.efficiencySuggestionThresholds,\r\n          runicPower: this.runicPowerDetails.efficiencySuggestionThresholds,\r\n          runes: this.runeTracker.suggestionThresholdsEfficiency,\r\n          marrowrend: this.marrowrendUsage.suggestionThresholdsEfficiency,\r\n          deathsCaress: this.deathsCaress.averageCastSuggestionThresholds,\r\n          consumption: this.consumption.hitSuggestionThreshold,\r\n          bonestorm: this.bonestorm.suggestionThresholds,\r\n          bloodPlague: this.bloodplagueUptime.uptimeSuggestionThresholds,\r\n          markOfBlood: this.markOfBloodUptime.uptimeSuggestionThresholds,\r\n          boneShield: this.boneShield.uptimeSuggestionThresholds,\r\n          // ossuary: this.ossuary.uptimeSuggestionThresholds,\r\n        }}\r\n      />\r\n    );\r\n  }\r\n}\r\n\r\nexport default Checklist;\r\n","import React from 'react';\r\n\r\nimport SPELLS from 'common/SPELLS';\r\nimport SpellLink from 'common/SpellLink';\r\nimport Analyzer, { SELECTED_PLAYER } from 'parser/core/Analyzer';\r\nimport SpellUsable from 'parser/shared/modules/SpellUsable';\r\nimport Abilities from 'parser/core/modules/Abilities';\r\nimport { i18n } from '@lingui/core';\r\nimport { t } from '@lingui/macro';\r\nimport Events from 'parser/core/Events';\r\n\r\nconst ALLOWED_CASTS_DURING_DRW = [\r\n  SPELLS.DEATH_STRIKE.id,\r\n  SPELLS.HEART_STRIKE.id,\r\n  SPELLS.BLOOD_BOIL.id,\r\n  SPELLS.MARROWREND.id,\r\n  SPELLS.CONSUMPTION_TALENT.id, // todo => test if new consumption talent actually works with DRW\r\n];\r\n\r\nclass DancingRuneWeapon extends Analyzer {\r\n  static dependencies = {\r\n    spellUsable: SpellUsable,\r\n    abilities: Abilities,\r\n  };\r\n\r\n  castsDuringDRW = [];\r\n\r\n  constructor(options){\r\n    super(options);\r\n    this.addEventListener(Events.cast.by(SELECTED_PLAYER), this.onCast);\r\n  }\r\n\r\n  onCast(event) {\r\n    if (!this.selectedCombatant.hasBuff(SPELLS.DANCING_RUNE_WEAPON_BUFF.id)) {\r\n      return;\r\n    }\r\n\r\n    //push all casts during DRW that were on the GCD in array\r\n    if (event.ability.guid !== SPELLS.RAISE_ALLY.id && //probably usefull to rezz someone even if it's a personal DPS-loss\r\n      event.ability.guid !== SPELLS.DANCING_RUNE_WEAPON.id && //because you get the DRW buff before the cast event since BFA\r\n      this.abilities.getAbility(event.ability.guid) !== undefined &&\r\n      this.abilities.getAbility(event.ability.guid).gcd) {\r\n      this.castsDuringDRW.push(event.ability.guid);\r\n    }\r\n  }\r\n\r\n  get goodDRWCasts() {\r\n    return this.castsDuringDRW.filter((val, index) => ALLOWED_CASTS_DURING_DRW.includes(val));\r\n  }\r\n\r\n  get SuggestionThresholds() {\r\n    return {\r\n      actual: this.goodDRWCasts.length / this.castsDuringDRW.length,\r\n      isLessThan: {\r\n        minor: 1,\r\n        average: 0.9,\r\n        major: .8,\r\n      },\r\n      style: 'percentage',\r\n    };\r\n  }\r\n\r\n  spellLinks(id, index) {\r\n    if (id === SPELLS.CONSUMPTION_TALENT.id) {\r\n      return <React.Fragment key={id}>and (if in AoE)<SpellLink id={id} /></React.Fragment>;\r\n    } else if (index + 2 === ALLOWED_CASTS_DURING_DRW.length) {\r\n      return <React.Fragment key={id}><SpellLink id={id} /> </React.Fragment>;\r\n    } else {\r\n      return <React.Fragment key={id}><SpellLink id={id} />, </React.Fragment>;\r\n    }\r\n  }\r\n\r\n  get goodDRWSpells() {\r\n    return (\r\n      <div>\r\n        Try and prioritize {ALLOWED_CASTS_DURING_DRW.map((id, index) => this.spellLinks(id, index))}\r\n      </div>\r\n    );\r\n  }\r\n\r\n  suggestions(when) {\r\n    when(this.SuggestionThresholds)\r\n      .addSuggestion((suggest, actual, recommended) => suggest(<>Avoid casting spells during <SpellLink id={SPELLS.DANCING_RUNE_WEAPON.id} /> that don't benefit from the coppies such as <SpellLink id={SPELLS.BLOODDRINKER_TALENT.id} /> and <SpellLink id={SPELLS.DEATH_AND_DECAY.id} />. Check the cooldown-tab below for more detailed breakdown.{this.goodDRWSpells}</>)\r\n          .icon(SPELLS.DANCING_RUNE_WEAPON.icon)\r\n          .actual(i18n._(t('deathknight.blood.suggestions.dancingRuneWeapon.numberCasts')`${ this.goodDRWCasts.length } out of ${ this.castsDuringDRW.length} casts during DRW were good`))\r\n          .recommended(`${this.castsDuringDRW.length} recommended`));\r\n  }\r\n}\r\n\r\nexport default DancingRuneWeapon;\r\n","import React from 'react';\r\nimport Analyzer, { SELECTED_PLAYER } from 'parser/core/Analyzer';\r\nimport Abilities from 'parser/core/modules/Abilities';\r\nimport SPELLS from 'common/SPELLS';\r\nimport SpellLink from 'common/SpellLink';\r\nimport Events from 'parser/core/Events';\r\n\r\nclass InitialMarrowrendCast extends Analyzer {\r\n\r\n  static dependencies = {\r\n    abilities: Abilities,\r\n  };\r\n\r\n  firstMRCast = false;\r\n  firstMRCastWithoutDRW = false;\r\n\r\n  constructor(options){\r\n    super(options);\r\n    this.addEventListener(Events.cast.by(SELECTED_PLAYER).spell(SPELLS.MARROWREND), this.onCast);\r\n  }\r\n\r\n  onCast(event) {\r\n    if (this.firstMRCast) {\r\n      return;\r\n    }\r\n\r\n    this.firstMRCast = true;\r\n    if (!this.selectedCombatant.hasBuff(SPELLS.DANCING_RUNE_WEAPON_BUFF.id)) {\r\n      this.firstMRCastWithoutDRW = true;\r\n    }\r\n  }\r\n\r\n  get initialMRThresholds() {\r\n    return {\r\n      actual: this.firstMRCastWithoutDRW,\r\n      isEqual: true,\r\n      style: 'boolean',\r\n    };\r\n  }\r\n\r\n  suggestions(when) {\r\n    when(this.initialMRThresholds).isTrue().addSuggestion((suggest, actual, recommended) => suggest(<>Use your first <SpellLink id={SPELLS.MARROWREND.id} /> together with <SpellLink id={SPELLS.DANCING_RUNE_WEAPON.id} /> to build up stacks of <SpellLink id={SPELLS.BONE_SHIELD.id} /> faster without wasting as much runes. This will also increase your initial threat-genration as your burst DPS will increase significantly. Don't treat <SpellLink id={SPELLS.DANCING_RUNE_WEAPON.id} /> as a defensive CD unless you really need the parry and increased Runic Power generation defensively.</>)\r\n        .icon(SPELLS.DANCING_RUNE_WEAPON.icon));\r\n  }\r\n}\r\n\r\nexport default InitialMarrowrendCast;\r\n","import React from 'react';\r\n\r\nimport SelfHealTimingGraph from 'parser/shared/modules/features/SelfHealTimingGraph';\r\nimport SPELLS from 'common/SPELLS';\r\n\r\nclass DeathStrikeTiming extends SelfHealTimingGraph {\r\n\r\n  constructor(...args) {\r\n    super(...args);\r\n    this.selfHealSpell = SPELLS.DEATH_STRIKE_HEAL;\r\n    this.tabTitle = \"Death Strike Timing\";\r\n    this.tabURL = \"death-strike-timings\";\r\n  }\r\n\r\n  render() {\r\n    return (\r\n      <SelfHealTimingGraph />\r\n    );\r\n  } \r\n}\r\n\r\nexport default DeathStrikeTiming;\r\n","import CoreMitigationCheck from 'parser/shared/modules/MitigationCheck';\r\nimport SPELLS from 'common/SPELLS';\r\n\r\n\r\nclass MitigationCheck extends CoreMitigationCheck {\r\n  constructor(...args) {\r\n    super(...args);\r\n\r\n    this.buffCheckPhysical = [\r\n      SPELLS.BONE_SHIELD.id,\r\n      SPELLS.DANCING_RUNE_WEAPON_BUFF.id,\r\n    ];\r\n    this.buffCheckMagical = [\r\n      SPELLS.ANTI_MAGIC_SHELL.id,\r\n    ];\r\n    this.buffCheckPhysAndMag = [\r\n      SPELLS.BLOOD_SHIELD.id,\r\n      SPELLS.VAMPIRIC_BLOOD.id,\r\n      SPELLS.ICEBOUND_FORTITUDE.id,\r\n      SPELLS.TOMBSTONE_TALENT.id,\r\n    ];\r\n  }\r\n}\r\n\r\nexport default MitigationCheck;\r\n","import React from 'react';\r\nimport Analyzer, { SELECTED_PLAYER } from 'parser/core/Analyzer';\r\nimport SPELLS from 'common/SPELLS';\r\nimport { formatPercentage, formatNumber } from 'common/format';\r\nimport Statistic from 'interface/statistics/Statistic';\r\nimport BoringSpellValueText from 'interface/statistics/components/BoringSpellValueText';\r\nimport UptimeIcon from 'interface/icons/Uptime';\r\nimport STATISTIC_CATEGORY from 'interface/others/STATISTIC_CATEGORY';\r\nimport STATISTIC_ORDER from 'interface/others/STATISTIC_ORDER';\r\nimport Events from 'parser/core/Events';\r\n\r\nimport RunicPowerTracker from '../runicpower/RunicPowerTracker';\r\n\r\nclass RedThirst extends Analyzer {\r\n  static dependencies = {\r\n    runicPowerTracker: RunicPowerTracker,\r\n  };\r\n\r\n  casts = 0;\r\n\r\n  constructor(...args) {\r\n    super(...args);\r\n    this.active = this.selectedCombatant.hasTalent(SPELLS.RED_THIRST_TALENT.id);\r\n    this.addEventListener(Events.cast.by(SELECTED_PLAYER).spell(SPELLS.VAMPIRIC_BLOOD), this.onCast);\r\n  }\r\n\r\n  onCast(event) {\r\n    this.casts += 1;\r\n  }\r\n\r\n  get reduction(){\r\n    return this.runicPowerTracker.cooldownReduction / 1000;\r\n  }\r\n\r\n  get wastedReduction(){\r\n    return this.runicPowerTracker.cooldownReductionWasted / 1000;\r\n  }\r\n\r\n  get averageReduction(){\r\n    return (this.reduction / this.casts) || 0;\r\n  }\r\n\r\n  get wastedPercent(){\r\n    return this.wastedReduction / (this.wastedReduction + this.reduction);\r\n  }\r\n\r\n  statistic() {\r\n    return (\r\n      <Statistic\r\n        position={STATISTIC_ORDER.OPTIONAL(2)}\r\n        category={STATISTIC_CATEGORY.TALENTS}\r\n        size=\"flexible\"\r\n        tooltip={(\r\n          <>\r\n            {formatNumber(this.reduction)} sec total effective reduction and {formatNumber(this.wastedReduction)} sec ({formatPercentage(this.wastedPercent)}%) wasted reduction.\r\n          </>\r\n        )}\r\n      >\r\n        <BoringSpellValueText spell={SPELLS.RED_THIRST_TALENT}>\r\n          <>\r\n            <UptimeIcon /> {formatNumber(this.averageReduction)} sec <small>average reduction</small>\r\n          </>\r\n        </BoringSpellValueText>\r\n      </Statistic>\r\n    );\r\n  }\r\n}\r\n\r\nexport default RedThirst;\r\n","import React from 'react';\r\nimport Analyzer, { SELECTED_PLAYER } from 'parser/core/Analyzer';\r\nimport SPELLS from 'common/SPELLS';\r\nimport { formatNumber, formatPercentage } from 'common/format';\r\nimport Statistic from 'interface/statistics/Statistic';\r\nimport BoringSpellValueText from 'interface/statistics/components/BoringSpellValueText';\r\nimport STATISTIC_CATEGORY from 'interface/others/STATISTIC_CATEGORY';\r\nimport STATISTIC_ORDER from 'interface/others/STATISTIC_ORDER';\r\nimport calculateEffectiveDamage from 'parser/core/calculateEffectiveDamage';\r\nimport calculateEffectiveHealing from 'parser/core/calculateEffectiveHealing';\r\nimport Events from 'parser/core/Events';\r\n\r\nconst MAX_BUFF_STACKS = 5;\r\nconst PERCENT_BUFF = 0.08;\r\n\r\nclass Hemostasis extends Analyzer {\r\n  buffedDeathStrikes = 0;\r\n  unbuffedDeathStrikes = 0;\r\n  buffStack = 0;\r\n  usedBuffs = 0;\r\n  wastedBuffs = 0;\r\n  gainedBuffs = 0;\r\n  damage = 0;\r\n  heal = 0;\r\n\r\n  constructor(...args) {\r\n    super(...args);\r\n    this.active = this.selectedCombatant.hasTalent(SPELLS.HEMOSTASIS_TALENT.id);\r\n    this.addEventListener(Events.heal.by(SELECTED_PLAYER).spell(SPELLS.DEATH_STRIKE_HEAL), this.onHeal);\r\n    this.addEventListener(Events.damage.by(SELECTED_PLAYER).spell([SPELLS.DEATH_STRIKE, SPELLS.BLOOD_BOIL]), this.onDamage);\r\n  }\r\n\r\n  onHeal(event) {\r\n    if(this.buffStack > 0){\r\n      this.heal += calculateEffectiveHealing(event, PERCENT_BUFF * this.buffStack);\r\n    }\r\n  }\r\n\r\n  onDamage(event) {\r\n    const spellID = event.ability.guid;\r\n    if (spellID === SPELLS.DEATH_STRIKE.id) {\r\n      if(this.buffStack > 0){\r\n        this.buffedDeathStrikes += 1;\r\n        this.usedBuffs += this.buffStack\r\n        this.damage += calculateEffectiveDamage(event, PERCENT_BUFF * this.buffStack);\r\n        this.buffStack = 0;\r\n        return;\r\n      }\r\n      this.unbuffedDeathStrikes += 1;\r\n    }\r\n\r\n    if (spellID === SPELLS.BLOOD_BOIL.id) {\r\n      if (this.buffStack === MAX_BUFF_STACKS) {\r\n        this.wastedBuffs += 1;\r\n      } else {\r\n        this.buffStack += 1;\r\n        this.gainedBuffs += 1;\r\n      }\r\n    }\r\n  }\r\n\r\n  get averageIncrease() {\r\n    return this.usedBuffs / (this.buffedDeathStrikes + this.unbuffedDeathStrikes) * PERCENT_BUFF\r\n  }\r\n\r\n  statistic() {\r\n    return (\r\n      <Statistic\r\n        position={STATISTIC_ORDER.OPTIONAL(2)}\r\n        category={STATISTIC_CATEGORY.TALENTS}\r\n        size=\"flexible\"\r\n        tooltip={(\r\n          <>\r\n            Resulting in {formatNumber(this.damage)} additional damage and {formatNumber(this.heal)} additional healing.<br />\r\n            You gained {this.gainedBuffs} and wasted {this.wastedBuffs} stacks.\r\n          </>\r\n        )}\r\n      >\r\n        <BoringSpellValueText spell={SPELLS.HEMOSTASIS_TALENT}>\r\n          <>\r\n            {formatPercentage(this.averageIncrease)} % <small>average DS increase</small>\r\n          </>\r\n        </BoringSpellValueText>\r\n      </Statistic>\r\n    );\r\n  }\r\n}\r\n\r\nexport default Hemostasis;\r\n","import React from 'react';\r\nimport Analyzer from 'parser/core/Analyzer';\r\nimport SPELLS from 'common/SPELLS';\r\nimport TalentStatisticBox from 'interface/others/TalentStatisticBox';\r\nimport STATISTIC_ORDER from 'interface/others/STATISTIC_ORDER';\r\nimport { formatDuration, formatPercentage } from 'common/format';\r\n\r\nimport BoneShieldTimesByStacks from '../features/BoneShieldTimesByStacks';\r\n\r\nconst HP_PER_BONE_SHIELD_STACK = 0.01;\r\n\r\nclass FoulBulwark extends Analyzer {\r\n  static dependencies = {\r\n    boneShieldTimesByStacks: BoneShieldTimesByStacks,\r\n  };\r\n\r\n  constructor(...args) {\r\n    super(...args);\r\n    this.active = this.selectedCombatant.hasTalent(SPELLS.FOUL_BULWARK_TALENT.id);\r\n  }\r\n\r\n  get boneShieldTimesByStack() {\r\n    return this.boneShieldTimesByStacks.boneShieldTimesByStacks;\r\n  }\r\n\r\n  get averageFoulBullwark() {\r\n    return formatPercentage(this.boneShieldTimesByStacks.averageBoneShieldStacks * HP_PER_BONE_SHIELD_STACK);\r\n  }\r\n\r\n  statistic() {\r\n    return (\r\n      <TalentStatisticBox\r\n        talent={SPELLS.FOUL_BULWARK_TALENT.id}\r\n        position={STATISTIC_ORDER.OPTIONAL(3)}\r\n        value={`${this.averageFoulBullwark}%`}\r\n        label=\"average Foul Bulwark buff\"\r\n      >\r\n        <table className=\"table table-condensed\">\r\n          <thead>\r\n            <tr>\r\n              <th>HP-bonus</th>\r\n              <th>Time (s)</th>\r\n              <th>Time (%)</th>\r\n            </tr>\r\n          </thead>\r\n          <tbody>\r\n            {this.boneShieldTimesByStack.map((e, i) => (\r\n              <tr key={i}>\r\n                <th>{(i * HP_PER_BONE_SHIELD_STACK * 100).toFixed(0)}%</th>\r\n                <td>{formatDuration(e.reduce((a, b) => a + b, 0) / 1000)}</td>\r\n                <td>{formatPercentage(e.reduce((a, b) => a + b, 0) / this.owner.fightDuration)}%</td>\r\n              </tr>\r\n            ))}\r\n          </tbody>\r\n        </table>\r\n      </TalentStatisticBox>\r\n    );\r\n  }\r\n}\r\n\r\nexport default FoulBulwark;\r\n","import React from 'react';\r\nimport Analyzer, { SELECTED_PLAYER } from 'parser/core/Analyzer';\r\nimport SPELLS from 'common/SPELLS/index';\r\nimport TalentStatisticBox from 'interface/others/TalentStatisticBox';\r\nimport STATISTIC_ORDER from 'interface/others/STATISTIC_ORDER';\r\nimport RESOURCE_TYPES from 'game/RESOURCE_TYPES';\r\nimport Events from 'parser/core/Events';\r\n\r\nconst DEATHSTRIKE_COST = 40;\r\n\r\nclass Heartbreaker extends Analyzer {\r\n  rpGains = [];\r\n  hsCasts = 0;\r\n\r\n  constructor(...args) {\r\n    super(...args);\r\n    this.active = this.selectedCombatant.hasTalent(SPELLS.HEARTBREAKER_TALENT.id);\r\n    this.addEventListener(Events.cast.by(SELECTED_PLAYER).spell(SPELLS.HEART_STRIKE), this.onCast);\r\n    this.addEventListener(Events.energize.spell(SPELLS.HEARTBREAKER), this.onEnergize);\r\n  }\r\n\r\n  onCast(event) {\r\n    this.hsCasts += 1;\r\n  }\r\n\r\n  onEnergize(event) {\r\n    if (event.resourceChangeType !== RESOURCE_TYPES.RUNIC_POWER.id) {\r\n      return;\r\n    }\r\n    this.rpGains.push(event.resourceChange);\r\n  }\r\n\r\n  get totalRPGained() {\r\n    return this.rpGains.reduce((a, b) => a + b, 0);\r\n  }\r\n\r\n  get averageHearStrikeHits() {\r\n    return (this.rpGains.length / this.hsCasts).toFixed(2);\r\n  }\r\n\r\n  statistic() {\r\n    return (\r\n      <TalentStatisticBox\r\n        talent={SPELLS.HEARTBREAKER_TALENT.id}\r\n        position={STATISTIC_ORDER.OPTIONAL(1)}\r\n        value={this.totalRPGained}\r\n        label=\"Runic Power gained\"\r\n        tooltip={(\r\n          <>\r\n            Resulting in about {Math.floor(this.totalRPGained / DEATHSTRIKE_COST)} extra Death Strikes.<br />\r\n            Your Heart Strike hit on average {this.averageHearStrikeHits} targets.\r\n          </>\r\n        )}\r\n      />\r\n    );\r\n  }\r\n}\r\n\r\nexport default Heartbreaker;\r\n","import React from 'react';\r\nimport Analyzer, { SELECTED_PLAYER, SELECTED_PLAYER_PET } from 'parser/core/Analyzer';\r\nimport SPELLS from 'common/SPELLS/index';\r\nimport AbilityTracker from 'parser/shared/modules/AbilityTracker';\r\nimport Statistic from 'interface/statistics/Statistic';\r\nimport BoringSpellValueText from 'interface/statistics/components/BoringSpellValueText';\r\nimport STATISTIC_CATEGORY from 'interface/others/STATISTIC_CATEGORY';\r\nimport ItemHealingDone from 'interface/ItemHealingDone';\r\nimport STATISTIC_ORDER from 'interface/others/STATISTIC_ORDER';\r\nimport { formatThousands } from 'common/format';\r\nimport Events from 'parser/core/Events';\r\n\r\n//Worms last 15 sec. But sometimes lag and such makes them expire a little bit early.\r\nconst WORMLIFESPAN = 14900;\r\nclass Bloodworms extends Analyzer {\r\n  static dependencies = {\r\n    abilityTracker: AbilityTracker,\r\n  };\r\n\r\n  totalSummons=0;\r\n  totalHealing=0;\r\n  totalDamage=0;\r\n  poppedEarly=0;\r\n  wormID=0;\r\n\r\n  bloodworm = [];\r\n\r\n\r\n  constructor(...args) {\r\n    super(...args);\r\n    this.active = this.selectedCombatant.hasTalent(SPELLS.BLOODWORMS_TALENT.id);\r\n    this.addEventListener(Events.summon.by(SELECTED_PLAYER).spell(SPELLS.BLOODWORM), this.onSummon);\r\n    this.addEventListener(Events.damage.by(SELECTED_PLAYER_PET), this.onDamage);\r\n    this.addEventListener(Events.instakill.by(SELECTED_PLAYER_PET).spell(SPELLS.BLOODWORM_DEATH), this.onInstakill);\r\n    this.addEventListener(Events.heal.to(SELECTED_PLAYER).spell(SPELLS.BLOODWORM_DEATH), this.onHeal);\r\n  }\r\n\r\n  poppedWorms(bloodworm) {\r\n    return bloodworm.filter(e => e.killedTime - e.summonedTime <= WORMLIFESPAN).length;\r\n  }\r\n\r\n  onSummon(event) {\r\n    this.bloodworm.push({\r\n      uniqueID: event.targetInstance,\r\n      summonedTime: event.timestamp,\r\n    });\r\n    this.totalSummons+= 1;\r\n    this.wormID = event.targetID;\r\n  }\r\n\r\n  onDamage(event) {\r\n    if (event.sourceID !== this.wormID) {\r\n      return;\r\n    }\r\n    this.totalDamage += event.amount + (event.absorbed || 0);\r\n  }\r\n\r\n\r\n  onInstakill(event) {\r\n    let index = -1;\r\n    this.bloodworm.forEach((e, i) => {\r\n      if (e.uniqueID === event.targetInstance) {\r\n        index = i;\r\n      }\r\n    });\r\n\r\n    if (index === -1) {\r\n      return;\r\n    }\r\n    this.bloodworm[index].killedTime = event.timestamp;\r\n  }\r\n\r\n  onHeal(event) {\r\n    this.totalHealing+= (event.amount || 0) + (event.absorbed || 0);\r\n  }\r\n\r\n  statistic() {\r\n    return (\r\n      <Statistic\r\n        position={STATISTIC_ORDER.OPTIONAL(2)}\r\n        category={STATISTIC_CATEGORY.TALENTS}\r\n        size=\"flexible\"\r\n        tooltip={(\r\n          <>\r\n            <strong>Damage:</strong> {formatThousands(this.totalDamage)} / {this.owner.formatItemDamageDone(this.totalDamage)}<br />\r\n            <strong>Number of worms summoned:</strong> {this.totalSummons}<br />\r\n            <strong>Number of worms popped early:</strong> {this.poppedWorms(this.bloodworm)}\r\n          </>\r\n        )}\r\n      >\r\n        <BoringSpellValueText spell={SPELLS.BLOODWORMS_TALENT}>\r\n          <>\r\n            <ItemHealingDone amount={this.totalHealing} />\r\n          </>\r\n        </BoringSpellValueText>\r\n      </Statistic>\r\n    );\r\n  }\r\n}\r\n\r\nexport default Bloodworms;\r\n","import React from 'react';\r\nimport Analyzer, { SELECTED_PLAYER } from 'parser/core/Analyzer';\r\nimport SPELLS from 'common/SPELLS/index';\r\nimport SpellLink from 'common/SpellLink';\r\nimport { formatNumber, formatPercentage } from 'common/format';\r\nimport DamageTracker from 'parser/shared/modules/AbilityTracker';\r\nimport TalentStatisticBox from 'interface/others/TalentStatisticBox';\r\nimport STATISTIC_ORDER from 'interface/others/STATISTIC_ORDER';\r\nimport { TooltipElement } from 'common/Tooltip';\r\nimport { i18n } from '@lingui/core';\r\nimport { t } from '@lingui/macro';\r\nimport Events from 'parser/core/Events';\r\n\r\nconst RPPERCHARGE = 6;\r\nconst MAXCHARGES = 5;\r\n\r\nclass Tombstone extends Analyzer {\r\n  static dependencies = {\r\n    damageTracker: DamageTracker,\r\n  };\r\n\r\n  tombstone = [];\r\n  casts = 0;\r\n  rpGained = 0;\r\n  rpWasted = 0;\r\n  absorbSize = 0;\r\n  totalAbsorbed = 0;\r\n\r\n  constructor(...args) {\r\n    super(...args);\r\n    this.active = this.selectedCombatant.hasTalent(SPELLS.TOMBSTONE_TALENT.id);\r\n    this.addEventListener(Events.applybuff.to(SELECTED_PLAYER).spell(SPELLS.TOMBSTONE_TALENT), this.onApplyBuff);\r\n    this.addEventListener(Events.energize.to(SELECTED_PLAYER).spell(SPELLS.TOMBSTONE_TALENT), this.onEnergize);\r\n    this.addEventListener(Events.absorbed.to(SELECTED_PLAYER).spell(SPELLS.TOMBSTONE_TALENT), this.onAbsorb);\r\n    this.addEventListener(Events.removebuff.to(SELECTED_PLAYER).spell(SPELLS.TOMBSTONE_TALENT), this.onRemoveBuff);\r\n  }\r\n\r\n  get wastedCasts() {\r\n    return this.tombstone.filter(e => e.charges < MAXCHARGES).length;\r\n  }\r\n\r\n  onApplyBuff(event) {\r\n    this.casts += 1;\r\n    this.absorbSize = event.absorb;\r\n  }\r\n\r\n  onEnergize(event) {\r\n    this.rpGained = event.resourceChange;\r\n    this.rpWasted = event.waste;\r\n  }\r\n\r\n  onAbsorb(event) {\r\n    this.totalAbsorbed += event.amount;\r\n  }\r\n\r\n  onRemoveBuff(event) {\r\n    this.tombstone.push({\r\n      rpGained: this.rpGained,\r\n      rpWasted: this.rpWasted,\r\n      absorbSize: this.absorbSize,\r\n      totalAbsorbed: this.totalAbsorbed,\r\n      absorbedWasted: (this.absorbSize - this.totalAbsorbed),\r\n      charges: (this.rpGained / RPPERCHARGE),\r\n    });\r\n    this.totalAbsorbed = 0;\r\n  }\r\n\r\n  get suggestionThresholdsEfficiency() {\r\n    return {\r\n      actual: 1 - this.wastedCasts / this.casts,\r\n      isLessThan: {\r\n        minor: 0.95,\r\n        average: 0.9,\r\n        major: .8,\r\n      },\r\n      style: 'percentage',\r\n    };\r\n  }\r\n\r\n  suggestions(when) {\r\n    when(this.suggestionThresholdsEfficiency)\r\n      .addSuggestion((suggest, actual, recommended) => suggest(<>You casted {this.wastedCasts} <SpellLink id={SPELLS.TOMBSTONE_TALENT.id} /> with less than 5 charges causing a reduced absorb shield.</>)\r\n          .icon(SPELLS.TOMBSTONE_TALENT.icon)\r\n          .actual(i18n._(t('deathknight.blood.suggestions.tomestone.badCasts')`${formatPercentage(actual)}% bad Tombstone casts`))\r\n          .recommended(`<${formatPercentage(recommended)}% is recommended`));\r\n  }\r\n\r\n  statistic() {\r\n    return (\r\n      <TalentStatisticBox\r\n        talent={SPELLS.TOMBSTONE_TALENT.id}\r\n        position={STATISTIC_ORDER.OPTIONAL(3)}\r\n        value={this.wastedCasts}\r\n        label=\"Bad Casts\"\r\n        tooltip=\"Any cast without 5 charges is considered a wasted cast.\"\r\n      >\r\n        <table className=\"table table-condensed\">\r\n          <thead>\r\n            <tr>\r\n              <th>Charges</th>\r\n              <th>RP Wasted</th>\r\n              <th>Absorb Used (%)</th>\r\n            </tr>\r\n          </thead>\r\n          <tbody>\r\n            {Object.values(this.tombstone).map((e, i) => (\r\n              <tr key={i}>\r\n                <th>{this.tombstone[i].charges}</th>\r\n                <td>\r\n                  <TooltipElement content={<><strong>RP Generated:</strong> {this.tombstone[i].rpGained - this.tombstone[i].rpWasted}</>}>\r\n                    {this.tombstone[i].rpWasted}\r\n                  </TooltipElement>\r\n                </td>\r\n                <td>\r\n                  <TooltipElement\r\n                    content={(\r\n                      <>\r\n                        <strong>Damage Absorbed:</strong> {formatNumber(this.tombstone[i].totalAbsorbed)} <br />\r\n                        <strong>Absorb Shield: </strong> {formatNumber(this.tombstone[i].absorbSize)} <br />\r\n                        <strong>Healing: </strong> {this.owner.formatItemHealingDone(this.tombstone[i].totalAbsorbed)}\r\n                      </>\r\n                    )}\r\n                  >\r\n                    {formatPercentage(this.tombstone[i].totalAbsorbed / this.tombstone[i].absorbSize)}%\r\n                  </TooltipElement>\r\n                </td>\r\n              </tr>\r\n            ))}\r\n          </tbody>\r\n        </table>\r\n      </TalentStatisticBox>\r\n    );\r\n  }\r\n}\r\n\r\nexport default Tombstone;\r\n","import React from 'react';\r\nimport Analyzer from 'parser/core/Analyzer';\r\nimport SPELLS from 'common/SPELLS';\r\nimport { formatPercentage } from 'common/format';\r\nimport TalentStatisticBox from 'interface/others/TalentStatisticBox';\r\nimport STATISTIC_ORDER from 'interface/others/STATISTIC_ORDER';\r\n\r\nclass Voracious extends Analyzer {\r\n\r\n  constructor(...args) {\r\n    super(...args);\r\n    this.active = this.selectedCombatant.hasTalent(SPELLS.VORACIOUS_TALENT.id);\r\n  }\r\n\r\n  get uptime() {\r\n    return this.selectedCombatant.getBuffUptime(SPELLS.VORACIOUS.id) / this.owner.fightDuration;\r\n  }\r\n\r\n  get uptimeSuggestionThresholds() {\r\n    return {\r\n      actual: this.uptime,\r\n      isLessThan: {\r\n        minor: 0.95,\r\n        average: 0.9,\r\n        major: .8,\r\n      },\r\n      style: 'percentage',\r\n    };\r\n  }\r\n\r\n  statistic() {\r\n    return (\r\n\r\n      <TalentStatisticBox\r\n        talent={SPELLS.VORACIOUS_TALENT.id}\r\n        position={STATISTIC_ORDER.OPTIONAL(6)}\r\n        value={`${formatPercentage(this.uptime)} %`}\r\n        label=\"Voracious uptime\"\r\n      />\r\n    );\r\n  }\r\n}\r\n\r\nexport default Voracious;\r\n","import React from 'react';\r\nimport Analyzer, { SELECTED_PLAYER } from 'parser/core/Analyzer';\r\nimport SPELLS from 'common/SPELLS/index';\r\nimport calculateEffectiveDamage from 'parser/core/calculateEffectiveDamage';\r\nimport TalentStatisticBox from 'interface/others/TalentStatisticBox';\r\nimport STATISTIC_ORDER from 'interface/others/STATISTIC_ORDER';\r\nimport Events from 'parser/core/Events';\r\n\r\nclass RapidDecomposition extends Analyzer {\r\n\r\n  bpDamage = 0;\r\n  dndDamage = 0;\r\n  totalDamage = 0;\r\n\r\n  constructor(...args) {\r\n    super(...args);\r\n    this.active = this.selectedCombatant.hasTalent(SPELLS.RAPID_DECOMPOSITION_TALENT.id);\r\n    this.addEventListener(Events.damage.by(SELECTED_PLAYER).spell([SPELLS.BLOOD_PLAGUE, SPELLS.DEATH_AND_DECAY_DAMAGE_TICK]), this.onDamage);\r\n  }\r\n\r\n  onDamage(event) {\r\n    const spellId = event.ability.guid;\r\n    if (spellId === SPELLS.BLOOD_PLAGUE.id) {\r\n      this.bpDamage += calculateEffectiveDamage(event, 0.15);\r\n    }else {\r\n      this.dndDamage += calculateEffectiveDamage(event, 0.15);\r\n    }\r\n    this.totalDamage = this.bpDamage + this.dndDamage;\r\n  }\r\n\r\n  statistic() {\r\n    return (\r\n      <TalentStatisticBox\r\n        talent={SPELLS.RAPID_DECOMPOSITION_TALENT.id}\r\n        position={STATISTIC_ORDER.OPTIONAL(2)}\r\n        value={this.owner.formatItemDamageDone(this.totalDamage)}\r\n        tooltip={(\r\n          <>\r\n            <strong>Blood Plague:</strong> {this.owner.formatItemDamageDone(this.bpDamage)}<br />\r\n            <strong>Death And Decay:</strong> {this.owner.formatItemDamageDone(this.dndDamage)}\r\n          </>\r\n        )}\r\n      />\r\n    );\r\n  }\r\n}\r\n\r\nexport default RapidDecomposition;\r\n","import React from 'react';\r\nimport Analyzer, { SELECTED_PLAYER } from 'parser/core/Analyzer';\r\nimport SPELLS from 'common/SPELLS/index';\r\nimport { formatNumber } from \"common/format\";\r\nimport Statistic from 'interface/statistics/Statistic';\r\nimport BoringSpellValueText from 'interface/statistics/components/BoringSpellValueText';\r\nimport STATISTIC_CATEGORY from 'interface/others/STATISTIC_CATEGORY';\r\nimport ItemHealingDone from 'interface/ItemHealingDone';\r\nimport STATISTIC_ORDER from 'interface/others/STATISTIC_ORDER';\r\nimport Events from 'parser/core/Events';\r\n\r\nconst MINIMUM_ABSORB_THRESHOLD = 0.05;\r\n\r\nclass WillOfTheNecropolis extends Analyzer {\r\n  totalWotnAbsorbed = 0;\r\n  currentWotnAbsorbed = 0;\r\n  activated = 0;\r\n  spellDamageId = 0;\r\n  goodAbsorbCount = 0;\r\n  nextEvent = false;\r\n\r\n\r\n  constructor(...args) {\r\n    super(...args);\r\n    this.active = this.selectedCombatant.hasTalent(SPELLS.WILL_OF_THE_NECROPOLIS_TALENT.id);\r\n    this.addEventListener(Events.absorbed.by(SELECTED_PLAYER).spell(SPELLS.WILL_OF_THE_NECROPOLIS_TALENT), this.onAbsorbed);\r\n    this.addEventListener(Events.damage.to(SELECTED_PLAYER), this.onDamageTaken);\r\n  }\r\n\r\n  onAbsorbed(event) {\r\n    this.totalWotnAbsorbed += event.amount;\r\n    this.currentWotnAbsorbed = event.amount;\r\n    this.activated += 1;\r\n    this.spellDamageId = event.extraAbility.guid;\r\n    this.nextEvent = true;\r\n  }\r\n\r\n  onDamageTaken(event) {\r\n    const playerHealth = event.maxHitPoints;\r\n    const absorbToHealthPercent = this.currentWotnAbsorbed / playerHealth;\r\n    const spellId = event.ability.guid;\r\n    if (spellId !== this.spellDamageId || this.nextEvent === false) {\r\n      return;\r\n    }\r\n    this.nextEvent = false;\r\n    this.playerHealth = event.maxHitPoints;\r\n    if(absorbToHealthPercent > MINIMUM_ABSORB_THRESHOLD){\r\n      this.goodAbsorbCount += 1;\r\n    }\r\n  }\r\n\r\n  statistic() {\r\n    return (\r\n      <Statistic\r\n        position={STATISTIC_ORDER.OPTIONAL(2)}\r\n        category={STATISTIC_CATEGORY.TALENTS}\r\n        size=\"flexible\"\r\n        tooltip={(\r\n          <>\r\n            <strong>Total Damage Absorbed: </strong> {formatNumber(this.totalWotnAbsorbed)} <br />\r\n            <strong>Activated: </strong> {this.activated}<br />\r\n            <strong>Absorbed 5% Max Health or more count: </strong> {this.goodAbsorbCount}\r\n          </>\r\n        )}\r\n      >\r\n        <BoringSpellValueText spell={SPELLS.WILL_OF_THE_NECROPOLIS_TALENT}>\r\n          <>\r\n            <ItemHealingDone amount={this.totalWotnAbsorbed} />\r\n          </>\r\n        </BoringSpellValueText>\r\n      </Statistic>\r\n    );\r\n  }\r\n}\r\n\r\nexport default WillOfTheNecropolis;\r\n","import React from 'react';\r\n\r\nimport SPELLS from 'common/SPELLS';\r\n\r\nimport Analyzer, { Options, SELECTED_PLAYER } from 'parser/core/Analyzer';\r\nimport Events, { EnergizeEvent, HealEvent } from 'parser/core/Events';\r\n\r\nimport STATISTIC_ORDER from 'interface/others/STATISTIC_ORDER';\r\nimport Statistic from 'interface/statistics/Statistic';\r\nimport BoringSpellValueText from 'interface/statistics/components/BoringSpellValueText';\r\nimport STATISTIC_CATEGORY from 'interface/others/STATISTIC_CATEGORY';\r\nimport { formatNumber, formatPercentage } from 'common/format';\r\nimport RESOURCE_TYPES from 'game/RESOURCE_TYPES';\r\nimport { ThresholdStyle, When } from 'parser/core/ParseResults';\r\nimport { i18n } from '@lingui/core';\r\nimport { t } from '@lingui/macro';\r\n\r\nclass RelishInBlood extends Analyzer {\r\n\r\n  runicPowerGained: number = 0;\r\n  runicPowerWasted: number = 0;\r\n  healing: number = 0;\r\n  overhealing: number = 0;\r\n\r\n  constructor(options: Options) {\r\n    super(options);\r\n    this.active = this.selectedCombatant.hasTalent(SPELLS.RELISH_IN_BLOOD_TALENT.id);\r\n\r\n    this.addEventListener(Events.energize.spell(SPELLS.RELISH_IN_BLOOD), this._relishBuffed)\r\n    this.addEventListener(Events.heal.by(SELECTED_PLAYER).spell(SPELLS.RELISH_IN_BLOOD), this._onHeal);\r\n  }\r\n\r\n  _relishBuffed(event: EnergizeEvent) {\r\n    if (event.resourceChangeType !== RESOURCE_TYPES.RUNIC_POWER.id) {\r\n      return;\r\n    }\r\n\r\n    this.runicPowerGained += event.resourceChange\r\n    this.runicPowerWasted += event.waste\r\n  }\r\n\r\n  _onHeal(event: HealEvent) {\r\n    if (event.overheal) {\r\n      this.overhealing += event.overheal\r\n    }\r\n    this.healing += event.amount + event.absorb\r\n  }\r\n\r\n  get overhealPercentage() {\r\n    return this.overhealing / this.healing\r\n  }\r\n\r\n  get rpWastePercentage() {\r\n    return this.runicPowerWasted / this.runicPowerGained\r\n  }\r\n\r\n  get efficiencySuggestionThresholds() {\r\n    return {\r\n      actual: this.rpWastePercentage,\r\n      isGreaterThan: {\r\n        minor: 0,\r\n        average: .2,\r\n        major: .4,\r\n      },\r\n      style: ThresholdStyle.PERCENTAGE,\r\n    };\r\n  }\r\n\r\n  suggestions(when: When) {\r\n    when(this.efficiencySuggestionThresholds)\r\n      .addSuggestion((suggest, actual, recommended) => suggest(<span>Avoid being Runic Power capped at all times, you wasted {this.runicPowerWasted} PR by being RP capped.</span>)\r\n          .icon(SPELLS.RELISH_IN_BLOOD_TALENT.icon)\r\n          .actual(i18n._(t('deathknight.suggestions.hysteria.efficiency')`You wasted ${(formatPercentage(actual))}% of RP from ${SPELLS.RELISH_IN_BLOOD_TALENT.name} by being RP capped.`))\r\n          .recommended(`${formatPercentage(recommended)}% is recommended`));\r\n  }\r\n\r\n  statistic() {\r\n    return (\r\n      <Statistic\r\n        position={STATISTIC_ORDER.OPTIONAL(2)}\r\n        category={STATISTIC_CATEGORY.TALENTS}\r\n        size=\"flexible\"\r\n        tooltip={(\r\n          <>\r\n            <strong>RP wasted: </strong> {this.runicPowerWasted} ({formatPercentage(this.rpWastePercentage)} %)<br />\r\n            <strong>Healing: </strong> {formatNumber(this.healing)} <br />\r\n            <strong>Overhealing: </strong> {formatNumber(this.overhealing)} ({formatPercentage(this.overhealPercentage)} %) <br />\r\n          </>\r\n        )}\r\n      >\r\n        <BoringSpellValueText spell={SPELLS.RELISH_IN_BLOOD_TALENT}>\r\n          <>\r\n            {this.runicPowerGained} <small>RP gained</small>\r\n          </>\r\n        </BoringSpellValueText>\r\n      </Statistic>\r\n    );\r\n  }\r\n\r\n}\r\n\r\nexport default RelishInBlood;\r\n","import React from 'react';\r\nimport { Options } from 'parser/core/Analyzer';\r\nimport { RuneForgeChecker } from 'parser/deathknight/shared/runeforges/RuneForgeChecker'\r\n\r\nimport SUGGESTION_IMPORTANCE from 'parser/core/ISSUE_IMPORTANCE';\r\nimport SPELLS from 'common/SPELLS';\r\nimport SpellLink from 'common/SpellLink';\r\n\r\nclass BloodRuneForgeChecker extends RuneForgeChecker {\r\n\r\n  constructor(options: Options) {\r\n    super(options);\r\n\r\n    // Hysteria & FC need no suggestions for blood\r\n    this.runeForges = [{\r\n      forge: SPELLS.RUNE_OF_THE_STONESKIN_GARGOYLE,\r\n      importance: SUGGESTION_IMPORTANCE.MAJOR,\r\n      suggestion: <>\r\n        <SpellLink id={SPELLS.RUNE_OF_THE_STONESKIN_GARGOYLE.id} /> is a survivability runeforge at the cost of damage and healing. Use <SpellLink id={SPELLS.RUNE_OF_THE_FALLEN_CRUSADER.id} /> as there is no need for SSGs EHP increase right now.\r\n      </>\r\n    }, {\r\n      forge: SPELLS.RUNE_OF_RAZORICE,\r\n      importance: SUGGESTION_IMPORTANCE.MAJOR,\r\n      suggestion: <>\r\n        Don't use <SpellLink id={SPELLS.RUNE_OF_RAZORICE.id} /> as Blood Death Knight, use <SpellLink id={SPELLS.RUNE_OF_THE_FALLEN_CRUSADER.id} /> instead.\r\n      </>\r\n    }, {\r\n      forge: SPELLS.RUNE_OF_SANGUINATION,\r\n      importance: SUGGESTION_IMPORTANCE.MAJOR,\r\n      suggestion: <>\r\n        Don't use <SpellLink id={SPELLS.RUNE_OF_SANGUINATION.id} /> as Blood Death Knight, use <SpellLink id={SPELLS.RUNE_OF_THE_FALLEN_CRUSADER.id} /> instead.\r\n      </>\r\n    }, {\r\n      forge: SPELLS.RUNE_OF_APOCALYPSE,\r\n      importance: SUGGESTION_IMPORTANCE.MAJOR,\r\n      suggestion: <>\r\n        Don't use <SpellLink id={SPELLS.RUNE_OF_APOCALYPSE.id} /> as Blood Death Knight, use <SpellLink id={SPELLS.RUNE_OF_THE_FALLEN_CRUSADER.id} /> instead.\r\n      </>\r\n    }, {\r\n      forge: SPELLS.RUNE_OF_UNENDING_THIRST,\r\n      importance: SUGGESTION_IMPORTANCE.MAJOR,\r\n      suggestion: <>\r\n        Don't use <SpellLink id={SPELLS.RUNE_OF_UNENDING_THIRST.id} /> as Blood Death Knight, use <SpellLink id={SPELLS.RUNE_OF_THE_FALLEN_CRUSADER.id} /> instead.\r\n      </>\r\n    }, {\r\n      forge: SPELLS.RUNE_OF_SPELLWARDING,\r\n      importance: SUGGESTION_IMPORTANCE.MAJOR,\r\n      suggestion: <>\r\n        Don't use <SpellLink id={SPELLS.RUNE_OF_SPELLWARDING.id} /> as Blood Death Knight, use <SpellLink id={SPELLS.RUNE_OF_THE_FALLEN_CRUSADER.id} /> instead.\r\n      </>\r\n    }]\r\n  }\r\n}\r\n\r\nexport default BloodRuneForgeChecker","import React from 'react';\r\nimport Analyzer from 'parser/core/Analyzer';\r\nimport SPELLS from 'common/SPELLS';\r\nimport SUGGESTION_IMPORTANCE from 'parser/core/ISSUE_IMPORTANCE';\r\nimport { ThresholdStyle, When } from 'parser/core/ParseResults';\r\nimport { Enchant } from 'common/SPELLS/Spell';\r\n\r\nexport interface RuneForgeCheckItem {\r\n  forge: Enchant;\r\n  importance: SUGGESTION_IMPORTANCE;\r\n  suggestion: React.ReactNode;\r\n}\r\n\r\nexport class RuneForgeChecker extends Analyzer {\r\n\r\n  public runeForges: RuneForgeCheckItem[] = []\r\n\r\n  get activeSuggestion () {\r\n    return this.runeForges.find((runeForge, index) => this.selectedCombatant.hasWeaponEnchant(runeForge.forge) && runeForge.suggestion)\r\n  }\r\n\r\n  get showSuggestion() {\r\n    return {\r\n      actual: Boolean(this.activeSuggestion),\r\n      isEqual: true,\r\n      style: ThresholdStyle.BOOLEAN,\r\n    };\r\n  }\r\n\r\n  suggestions(when: When) {\r\n    when(this.showSuggestion)\r\n      .addSuggestion((suggest) => suggest(<span>{this.activeSuggestion?.suggestion}</span>)\r\n          .icon(SPELLS.RUNEFORGING.icon)\r\n          .staticImportance(this.activeSuggestion?.importance || SUGGESTION_IMPORTANCE.MINOR));\r\n  }\r\n}","import CoreCombatLogParser from 'parser/core/CombatLogParser';\r\n\r\nimport Abilities from './modules/Abilities';\r\nimport Channeling from './modules/core/Channeling';\r\nimport GlobalCooldown from './modules/core/GlobalCooldown';\r\n\r\n// Features\r\nimport AlwaysBeCasting from './modules/features/AlwaysBeCasting';\r\nimport CooldownThroughputTracker from './modules/features/CooldownThroughputTracker';\r\nimport BloodPlagueUptime from './modules/features/BloodPlagueUptime';\r\nimport CrimsonScourge from './modules/features/CrimsonScourge';\r\nimport BlooddrinkerTicks from './modules/features/BlooddrinkerTicks';\r\nimport Checklist from './modules/features/checklist/Module';\r\nimport MarrowrendUsage from './modules/features/MarrowrendUsage';\r\nimport BoneShield from './modules/features/BoneShield';\r\nimport DancingRuneWeapon from './modules/features/DancingRuneWeapon';\r\nimport InitialMarrowrendCast from './modules/features/InitialMarrowrendCast';\r\nimport DeathStrikeTiming from './modules/features/DeathStrikeTiming';\r\nimport BoneShieldTimesByStacks from './modules/features/BoneShieldTimesByStacks';\r\nimport DeathsCaress from './modules/core/DeathsCaress';\r\nimport MitigationCheck from './modules/features/MitigationCheck';\r\n// import Ossuary from './modules/features/Ossuary';\r\n\r\n// Resources\r\nimport RunicPowerDetails from './modules/runicpower/RunicPowerDetails';\r\nimport RunicPowerTracker from './modules/runicpower/RunicPowerTracker';\r\nimport RuneTracker from '../shared/RuneTracker';\r\nimport RuneDetails from '../shared/RuneDetails';\r\n\r\n// Talents\r\nimport RedThirst from './modules/talents/RedThirst';\r\nimport BoneStorm from './modules/talents/Bonestorm';\r\nimport MarkOfBlood from './modules/talents/MarkOfBlood';\r\nimport Hemostasis from './modules/talents/Hemostasis';\r\nimport FoulBulwark from './modules/talents/FoulBulwark';\r\nimport Heartbreaker from './modules/talents/Heartbreaker';\r\nimport Bloodworms from './modules/talents/Bloodworms';\r\nimport Tombstone from './modules/talents/Tombstone';\r\nimport Voracious from './modules/talents/Voracious';\r\nimport RapidDecomposition from './modules/talents/RapidDecomposition';\r\nimport WillOfTheNecropolis from './modules/talents/WillOfTheNecropolis';\r\nimport Consumption from './modules/talents/Consumption';\r\nimport RelishInBlood from './modules/talents/RelishInBlood';\r\n\r\n// Runes\r\nimport RuneForgeChecker from './modules/core/RuneForgeChecker';\r\nimport RuneOfTheFallenCrusader from '../shared/runeforges/RuneOfTheFallenCrusader';\r\nimport RuneOfHysteria from '../shared/runeforges/RuneOfHysteria';\r\n\r\nclass CombatLogParser extends CoreCombatLogParser {\r\n  static specModules = {\r\n    // Core Statistics\r\n    mitigationCheck: MitigationCheck,\r\n\r\n    // DeathKnight Core\r\n    abilities: Abilities,\r\n    channeling: Channeling,\r\n    globalCooldown: GlobalCooldown,\r\n\r\n    // Features\r\n    alwaysBeCasting: AlwaysBeCasting,\r\n    cooldownThroughputTracker: CooldownThroughputTracker,\r\n    crimsonScourge: CrimsonScourge,\r\n    dancingRuneWeapon: DancingRuneWeapon,\r\n    initialMarrowrendCast: InitialMarrowrendCast,\r\n    blooddrinkerTicks: BlooddrinkerTicks,\r\n    checklist: Checklist,\r\n    deathStrikeTiming: DeathStrikeTiming,\r\n    marrowrendUsage: MarrowrendUsage,\r\n    boneShield: BoneShield,\r\n    boneShieldTimesByStacks: BoneShieldTimesByStacks,\r\n    deathsCaress: DeathsCaress,\r\n\r\n    // DOT\r\n    bloodplagueUptime: BloodPlagueUptime,\r\n\r\n    // Resources\r\n    runicPowerTracker: RunicPowerTracker,\r\n    runicPowerDetails: RunicPowerDetails,\r\n    runeTracker: RuneTracker,\r\n    runeDetails: RuneDetails,\r\n\r\n    // Talents\r\n    redThirst: RedThirst,\r\n    boneStorm: BoneStorm,\r\n    markOfBlood: MarkOfBlood,\r\n    hemostasis: Hemostasis,\r\n    foulBulwark: FoulBulwark,\r\n    heartbreaker: Heartbreaker,\r\n    bloodworms: Bloodworms,\r\n    tombstone: Tombstone,\r\n    voracious: Voracious,\r\n    rapidDecomposition: RapidDecomposition,\r\n    willOfTheNecropolis: WillOfTheNecropolis,\r\n    // ossuary: Ossuary,\r\n    consumption: Consumption,\r\n    relishInBlood: RelishInBlood,\r\n\r\n    // Runes\r\n    runeForgeChecker: RuneForgeChecker,\r\n    runeOfTheFallenCrusader: RuneOfTheFallenCrusader,\r\n    runeOfHysteria: RuneOfHysteria\r\n  };\r\n}\r\n\r\nexport default CombatLogParser;\r\n","export default function calculateEffectiveDamage(event, increase) {\r\n  const raw = (event.amount || 0) + (event.absorbed || 0);\r\n  return raw - (raw / (1 + increase));\r\n}\r\n","import React from 'react';\r\n\r\n// https://thenounproject.com/term/duration/370713/\r\n// duration by Bohdan Burmich from the Noun Project\r\nconst Icon = ({ ...other }) => (\r\n  <svg xmlns=\"http://www.w3.org/2000/svg\" viewBox=\"10 10 80 80\" className=\"icon\" {...other}>\r\n    <path d=\"M50,86.4865c17.4361,0,31.6216-14.1855,31.6216-31.6216c0-16.6168-12.8865-30.2714-29.1892-31.5189v-4.9677h7.2973v-4.8649  H40.2703v4.8649h7.2973v4.9677c-16.3027,1.2475-29.1892,14.902-29.1892,31.5189C18.3784,72.3009,32.5639,86.4865,50,86.4865z M52.4324,28.2236c3.1101,0.2817,6.0664,1.0982,8.7798,2.356l-8.7798,15.2073V28.2236z M47.5676,28.2236v26.6412 c0,1.1008,0.7393,2.0647,1.8029,2.3497c0.209,0.0561,0.4205,0.0827,0.6295,0.0827c0.8533,0,1.6642-0.4504,2.1065-1.2162 l13.3146-23.0616c6.8507,4.8503,11.3357,12.8315,11.3357,21.8454c0,14.7537-12.0031,26.7567-26.7568,26.7567 s-26.7568-12.003-26.7568-26.7567C23.2432,40.9315,33.9501,29.4573,47.5676,28.2236z\" />\r\n  </svg>\r\n);\r\n\r\nexport default Icon;\r\n","/**\r\n * Velen's is a static 15% healing increase to the raw healing going out. If that increase turns out to be overhealing it is worthless, so my approach of reducing the healing gain by the overhealing really only gives you the gain in healing that actually did something. An implementation that ignores overhealing and acts like Velen's contributed 15% of the effective healing will be inaccurate if there was any overhealing.\r\n *\r\n * I'll try to explain this PoV with an example:\r\n * Normal spell heals for 1,000 raw\r\n * With Velen's this is 1,150 raw. So Velen's increased the heal by 150 raw healing, that healing is on top of the original 1,000 raw healing the spell normally does.\r\n * Then comes overhealing;\r\n * If the spell overheals for 50, then the spell will have healed for 1,100. At this point Velen's effectively contributes 100 healing.\r\n * If the spell overheals for 100, then the spell will have healed for 1,050. So velen's effectiveness is 50;\r\n * If the spell overheals for 150, then the spell will have healed for the original 1,000 and Velen's increase was completely wasted.\r\n * If the spell overheals for 200, then 50 healing of the original spell was already overhealing, and the increased healing from Velen's did nothing (0).\r\n *\r\n * If you ignore raw healing and look at the actual healing done you may see the last 950 healing and think 15% of that was contributed by Velen's, while in fact it was 0.\r\n */\r\n\r\nexport default function calculateEffectiveHealing(event, relativeHealIncrease) {\r\n  const amount = event.amount;\r\n  const absorbed = event.absorbed || 0;\r\n  const overheal = event.overheal || 0;\r\n  const raw = amount + absorbed + overheal;\r\n  const relativeHealingIncreaseFactor = 1 + relativeHealIncrease;\r\n  const healingIncrease = raw - raw / relativeHealingIncreaseFactor;\r\n  const effectiveHealing = healingIncrease - overheal;\r\n\r\n  return Math.max(0, effectiveHealing);\r\n}\r\n","import React from 'react';\r\nimport PropTypes from 'prop-types';\r\n\r\nimport SpellLink from 'common/SpellLink';\r\nimport SpellIcon from 'common/SpellIcon';\r\n\r\nimport STATISTIC_CATEGORY from './STATISTIC_CATEGORY';\r\nimport StatisticBox from './StatisticBox';\r\n\r\nexport { default as STATISTIC_ORDER } from './STATISTIC_ORDER';\r\n\r\n/**\r\n * @deprecated Use `interface/statistic/Statistic` instead.\r\n */\r\nconst TalentStatisticBox = ({ talent, icon, label, ...others }) => (\r\n  <StatisticBox\r\n    {...others}\r\n    icon={icon || <SpellIcon id={talent} />}\r\n    label={label || <SpellLink id={talent} icon={false} />}\r\n  />\r\n);\r\nTalentStatisticBox.propTypes = {\r\n  talent: PropTypes.number.isRequired,\r\n  /**\r\n   * Override the trait's icon.\r\n   */\r\n  icon: PropTypes.node,\r\n  /**\r\n   * Override the trait's label.\r\n   */\r\n  label: PropTypes.node,\r\n};\r\nTalentStatisticBox.defaultProps = {\r\n  category: STATISTIC_CATEGORY.TALENTS,\r\n};\r\n\r\nexport default TalentStatisticBox;\r\n","import { ApplyBuffEvent, ApplyBuffStackEvent, ApplyDebuffEvent, ApplyDebuffStackEvent, EventType, RemoveBuffEvent, RemoveBuffStackEvent, RemoveDebuffEvent, RemoveDebuffStackEvent } from 'parser/core/Events';\r\n\r\n/**\r\n * Returns the current stacks on a given event\r\n * @param event\r\n */\r\nexport function currentStacks(event: RemoveBuffEvent | RemoveDebuffEvent | ApplyBuffEvent | ApplyDebuffEvent | ApplyBuffStackEvent | RemoveBuffStackEvent | ApplyDebuffStackEvent | RemoveDebuffStackEvent) {\r\n  switch (event.type) {\r\n    case EventType.RemoveBuff:\r\n    case EventType.RemoveDebuff:\r\n      return 0;\r\n    case EventType.ApplyBuff:\r\n    case EventType.ApplyDebuff:\r\n      return 1;\r\n    case EventType.ApplyBuffStack:\r\n    case EventType.RemoveBuffStack:\r\n    case EventType.ApplyDebuffStack:\r\n    case EventType.RemoveDebuffStack:\r\n      return event.stack;\r\n  }\r\n  throw new Error(\"Invalid event type for currentStacks\");\r\n}\r\n","/**\r\n * Gets raw max casts of a spell over a period of time.\r\n * @param cooldown the cooldown time of the spell, in seconds\r\n * @param duration the duration of the time period to assess, in milliseconds\r\n * @param charges the number of charges the spell has\r\n */\r\nexport default function calculateMaxCasts(cooldown: number, duration: number, charges = 1) {\r\n  return (duration / 1000 / cooldown) + charges - 1;\r\n}\r\n","import React from 'react';\r\n\r\nimport RESOURCE_TYPES from 'game/RESOURCE_TYPES';\r\nimport SPELLS from 'common/SPELLS';\r\nimport { formatDuration, formatNumber, formatPercentage } from 'common/format';\r\nimport STATISTIC_ORDER from 'interface/others/STATISTIC_ORDER';\r\nimport Statistic from 'interface/statistics/Statistic';\r\n\r\nimport SpellUsable from 'parser/shared/modules/SpellUsable';\r\nimport CastEfficiency from 'parser/shared/modules/CastEfficiency';\r\nimport Abilities from 'parser/core/modules/Abilities';\r\nimport ResourceTracker from 'parser/shared/modules/resources/resourcetracker/ResourceTracker';\r\nimport Events, { EventType } from 'parser/core/Events';\r\nimport { SELECTED_PLAYER } from 'parser/core/Analyzer';\r\n\r\nimport { i18n } from '@lingui/core';\r\nimport { t } from '@lingui/macro';\r\nimport BoringResourceValue from 'interface/statistics/components/BoringResourceValue';\r\n\r\nconst MAX_RUNES = 6;\r\nconst RUNIC_CORRUPTION_INCREASE = 1; //Runic Corruption\r\nconst RUNE_IDS = [\r\n  SPELLS.RUNE_1, //-101\r\n  SPELLS.RUNE_2, //-102\r\n  SPELLS.RUNE_3, //-103\r\n];\r\n\r\n/*\r\n * Runes are tracked as 3 fake spells with 2 charges to simulate 3 runes charging at the same time.\r\n * aslong as spells always use the rune pair with the shortest cooldown remaining it should match\r\n * its in game functionality.\r\n */\r\nclass RuneTracker extends ResourceTracker {\r\n  static dependencies = {\r\n    ...ResourceTracker.dependencies,\r\n    spellUsable: SpellUsable,\r\n    castEfficiency: CastEfficiency,\r\n    abilities: Abilities,\r\n  };\r\n\r\n  runesReady = []; //{x, y} points of {time, runeCount} for the chart\r\n  _runesReadySum; //time spent at each rune. _runesReadySum[1] is time spent at one rune available.\r\n  _lastTimestamp; //used to find time since last rune change for the _runesReadySum\r\n  _fightend = false; //fightend, avoid wierd graph by not adding later runes\r\n\r\n  constructor(...args) {\r\n    super(...args);\r\n    this.resource = RESOURCE_TYPES.RUNES;\r\n    this._lastTimestamp = this.owner.fight.start_time;\r\n    this._runesReadySum = [MAX_RUNES + 1];\r\n    for (let i = 0; i <= MAX_RUNES; i += 1) {\r\n      this._runesReadySum[i] = 0;\r\n    }\r\n    this.addEventListener(Events.fightend, this.onFightend);\r\n    this.addEventListener(Events.applybuff.to(SELECTED_PLAYER).spell(SPELLS.RUNIC_CORRUPTION), this.onApplybuff);\r\n    this.addEventListener(Events.removebuff.to(SELECTED_PLAYER).spell(SPELLS.RUNIC_CORRUPTION), this.onRemovebuff);\r\n    this.addEventListener(Events.UpdateSpellUsable.spell(RUNE_IDS), this.onUpdateSpellUsable);\r\n  }\r\n\r\n  onFightend() { //add a last event for calculating uptimes and make the chart not end early.\r\n    const runesAvailable = this.runesAvailable;\r\n    this._fightend = true;\r\n\r\n    this.runesReady.push({ x: this.owner.fightDuration / 1000, y: runesAvailable });\r\n    this._runesReadySum[runesAvailable] += this.owner.fight.end_time - this._lastTimestamp;\r\n    this.addPassiveRuneRegeneration();\r\n  }\r\n\r\n  onCast(event) {\r\n    if (!event.classResources || event.prepull) {\r\n      return;\r\n    }\r\n    super.onCast(event);\r\n\r\n    event.classResources\r\n      .filter(resource => resource.type === this.resource.id)\r\n      .forEach(({ amount, cost }) => {\r\n        let runeCost = cost || 0;\r\n        //adjust for resource cost reduction\r\n        if (event.ability.guid === SPELLS.OBLITERATE_CAST.id && this.selectedCombatant.hasBuff(SPELLS.OBLITERATION_TALENT.id)) {\r\n          runeCost -= 1;\r\n        }\r\n        if (runeCost <= 0) {\r\n          return;\r\n        }\r\n        for (let i = 0; i < runeCost; i += 1) { //start rune cooldown\r\n          this.startCooldown(event);\r\n        }\r\n      });\r\n  }\r\n\r\n  onEnergize(event) { //add a charge to the rune with the longest remaining cooldown when a rune is refunded.\r\n    super.onEnergize(event);\r\n    if (event.resourceChangeType !== this.resource.id) {\r\n      return;\r\n    }\r\n    const amount = event.resourceChange;\r\n    for (let i = 0; i < amount; i += 1) {\r\n      this.addCharge();\r\n    }\r\n  }\r\n\r\n  onApplybuff(event) { //decrease cooldown when a buff that increases rune regeneration rate is applied.\r\n    const multiplier = 1 / (1 + RUNIC_CORRUPTION_INCREASE);\r\n    RUNE_IDS.forEach(spell => {\r\n      this.changeCooldown(spell.id, multiplier);\r\n    });\r\n  }\r\n\r\n  onRemovebuff(event) { //increase cooldown when a buff that increases rune regeneration rate fades.\r\n    const multiplier = 1 + RUNIC_CORRUPTION_INCREASE;\r\n    RUNE_IDS.forEach(spell => {\r\n      this.changeCooldown(spell.id, multiplier);\r\n    });\r\n  }\r\n\r\n  onUpdateSpellUsable(event) { //track when a rune comes off cooldown\r\n    let change = 0;\r\n    if (event.trigger === EventType.EndCooldown || event.trigger === EventType.RestoreCharge) { //gained a rune\r\n      change += 1;\r\n    } else if (event.trigger === EventType.BeginCooldown || event.trigger === EventType.AddCooldownCharge) { //spent a rune\r\n      change -= 1;\r\n    } else { //no change\r\n      return;\r\n    }\r\n\r\n    //time since last rune change was spent at current runes minus the change.\r\n    this._runesReadySum[this.runesAvailable - change] += event.timestamp - this._lastTimestamp;\r\n    this._lastTimestamp = event.timestamp;\r\n    //Adding two points to the rune chart, one at {time, lastRuneCount} and one at {time, newRuneCount} so the chart does not have diagonal lines.\r\n\r\n    if (this._fightend) {\r\n      return;\r\n    }\r\n\r\n    this.runesReady.push({ x: this.timeFromStart(event.timestamp), y: this.runesAvailable - change });\r\n    this.runesReady.push({ x: this.timeFromStart(event.timestamp), y: this.runesAvailable });\r\n  }\r\n\r\n  // add passive rune regeneration and RC/4p21blood\r\n  addPassiveRuneRegeneration() {\r\n    let passiveRunesGained = this.runesMaxCasts;\r\n    let passiveRunesWasted = this.runesWasted;\r\n    //add runic corruption gained (and subtract it from passive regn)\r\n    const runicCorruptionContribution = this.addPassiveAccelerator(SPELLS.RUNIC_CORRUPTION.id, passiveRunesGained, passiveRunesWasted, RUNIC_CORRUPTION_INCREASE);\r\n    passiveRunesGained *= 1 - runicCorruptionContribution;\r\n    passiveRunesWasted *= 1 - runicCorruptionContribution;\r\n    //add passive rune regn\r\n    this.initBuilderAbility(SPELLS.RUNE_1.id);\r\n    this.buildersObj[SPELLS.RUNE_1.id].generated += Math.round(passiveRunesGained);\r\n    this.buildersObj[SPELLS.RUNE_1.id].wasted += Math.round(passiveRunesWasted);\r\n  }\r\n\r\n  addPassiveAccelerator(spellId, gained, wasted, increase) { //used to add passive rune gain accelerators like Runic Corruption\r\n    //use uptime to get approximate contribution to passive regeneration\r\n    const uptime = this.selectedCombatant.getBuffUptime(spellId) / this.owner.fightDuration;\r\n    if (!(uptime > 0)) {\r\n      return 0;\r\n    }\r\n    this.initBuilderAbility(spellId);\r\n    const contribution = uptime * increase / (1 + increase);\r\n    const acceleratorGained = Math.round(gained * contribution);\r\n    this.buildersObj[spellId].generated += acceleratorGained;\r\n    const acceleratorWasted = Math.round(wasted * contribution);\r\n    this.buildersObj[spellId].wasted += acceleratorWasted;\r\n    return contribution;\r\n  }\r\n\r\n  changeCooldown(spellId, multiplier) { //increases or decreases rune cooldown\r\n    if (!this.spellUsable.isOnCooldown(spellId)) {\r\n      return;\r\n    }\r\n    const remainingCooldown = this.spellUsable.cooldownRemaining(spellId);\r\n    const newCooldown = remainingCooldown * multiplier;\r\n    const reduction = remainingCooldown - newCooldown;\r\n    this.spellUsable.reduceCooldown(spellId, reduction);\r\n  }\r\n\r\n  addCharge() {\r\n    const runeId = this.longestCooldown;\r\n    if (!this.spellUsable.isOnCooldown(runeId)) {\r\n      return;\r\n    }\r\n    const expectedCooldown = this.abilities.getExpectedCooldownDuration(runeId, this.spellUsable.cooldownTriggerEvent(runeId));\r\n    this.spellUsable.reduceCooldown(runeId, expectedCooldown);\r\n  }\r\n\r\n  startCooldown(event) {\r\n    const runeId = this.shortestCooldown;\r\n    this.spellUsable.beginCooldown(runeId, event);\r\n  }\r\n\r\n  get shortestCooldown() {\r\n    const runeOneCooldown = this.getCooldown(SPELLS.RUNE_1.id) || 0;\r\n    const runeTwoCooldown = this.getCooldown(SPELLS.RUNE_2.id) || 0;\r\n    const runeThreeCooldown = this.getCooldown(SPELLS.RUNE_3.id) || 0;\r\n    if (runeOneCooldown <= runeTwoCooldown && runeOneCooldown <= runeThreeCooldown) {\r\n      return SPELLS.RUNE_1.id;\r\n    } else if (runeTwoCooldown <= runeThreeCooldown) {\r\n      return SPELLS.RUNE_2.id;\r\n    } else {\r\n      return SPELLS.RUNE_3.id;\r\n    }\r\n  }\r\n\r\n  get longestCooldown() {\r\n    const runeOneCooldown = this.getCooldown(SPELLS.RUNE_1.id) || 0;\r\n    const runeTwoCooldown = this.getCooldown(SPELLS.RUNE_2.id) || 0;\r\n    const runeThreeCooldown = this.getCooldown(SPELLS.RUNE_3.id) || 0;\r\n    if (runeOneCooldown >= runeTwoCooldown && runeOneCooldown >= runeThreeCooldown) {\r\n      return SPELLS.RUNE_1.id;\r\n    } else if (runeTwoCooldown >= runeThreeCooldown) {\r\n      return SPELLS.RUNE_2.id;\r\n    } else {\r\n      return SPELLS.RUNE_3.id;\r\n    }\r\n  }\r\n\r\n  get runesAvailable() {\r\n    let chargesAvailable = 0;\r\n    RUNE_IDS.forEach(spell => {\r\n      chargesAvailable += this.spellUsable.chargesAvailable(spell.id);\r\n    });\r\n    return chargesAvailable;\r\n  }\r\n\r\n  getCooldown(spellId) {\r\n    if (!this.spellUsable.isOnCooldown(spellId)) {\r\n      return null;\r\n    }\r\n    const chargesOnCooldown = 2 - this.spellUsable.chargesAvailable(spellId);\r\n    const cooldownRemaining = this.spellUsable.cooldownRemaining(spellId);\r\n    const fullChargeCooldown = this.abilities.getExpectedCooldownDuration(spellId, this.spellUsable.cooldownTriggerEvent(spellId));\r\n    return (chargesOnCooldown - 1) * fullChargeCooldown + cooldownRemaining;\r\n  }\r\n\r\n  get runeEfficiency() {\r\n    const runeCastEfficiencies = [];\r\n    RUNE_IDS.forEach(spell => {\r\n      runeCastEfficiencies.push(this.castEfficiency.getCastEfficiencyForSpellId(spell.id).efficiency);\r\n    });\r\n    return runeCastEfficiencies.reduce((accumulator, currentValue) => accumulator + currentValue) / runeCastEfficiencies.length;\r\n  }\r\n\r\n  // total runes generated with passive regeneration\r\n  get runesMaxCasts() {\r\n    let totalCasts = 0;\r\n    for (const spender in this.spendersObj) { //add runes spent\r\n      totalCasts += this.spendersObj[spender].spent;\r\n    }\r\n    // subtract starting runes and add end runes\r\n    return totalCasts - MAX_RUNES + this.runesReady[this.runesReady.length - 1].y;\r\n  }\r\n\r\n  // total runes wasted with passive regeneration\r\n  get runesWasted() {\r\n    return this.runesMaxCasts * (1 - this.runeEfficiency);\r\n  }\r\n\r\n  get timeSpentAtRuneCount() {\r\n    const timeSpentAtRune = [];\r\n    this._runesReadySum.forEach((time) => {\r\n      timeSpentAtRune.push(time / this.owner.fightDuration);\r\n    });\r\n    return timeSpentAtRune;\r\n  }\r\n\r\n  timeFromStart(timestamp) {\r\n    return (timestamp - this.owner.fight.start_time) / 1000;\r\n  }\r\n\r\n  get suggestionThresholds() {\r\n    return {\r\n      actual: 1 - this.runeEfficiency,\r\n      isGreaterThan: {\r\n        minor: 0.05,\r\n        average: 0.1,\r\n        major: 0.2,\r\n      },\r\n      style: 'percentage',\r\n    };\r\n  }\r\n\r\n  get suggestionThresholdsEfficiency() {\r\n    return {\r\n      actual: this.runeEfficiency,\r\n      isLessThan: {\r\n        minor: 0.95,\r\n        average: 0.9,\r\n        major: 0.8,\r\n      },\r\n      style: 'percentage',\r\n    };\r\n  }\r\n\r\n  suggestions(when) {\r\n    when(this.suggestionThresholds).addSuggestion((suggest, actual, recommended) => suggest(<>You overcapped {formatPercentage(actual)}% of your runes. Try to always have at least 3 runes on cooldown.</>)\r\n      .icon(SPELLS.RUNE_1.icon)\r\n      .actual(i18n._(t('deathknight.shared.suggestions.runes.overcapped')`${formatPercentage(actual)}% runes overcapped`))\r\n      .recommended(`<${formatPercentage(recommended)}% is recommended`));\r\n  }\r\n\r\n  statistic() {\r\n    const timeSpentAtRuneCount = this.timeSpentAtRuneCount;\r\n    const badThreshold = 4;\r\n    return (\r\n      <Statistic\r\n        position={STATISTIC_ORDER.CORE(10)}\r\n        size=\"flexible\"\r\n        tooltip={(\r\n          <>\r\n            Number of runes wasted: {formatNumber(this.runesWasted)} <br />\r\n            These numbers only include runes wasted from passive regeneration. <br />\r\n            The table below shows the time spent at any given number of runes available.\r\n          </>\r\n        )}\r\n        dropdown={\r\n          <table className=\"table table-condensed\">\r\n            <thead>\r\n              <tr>\r\n                <th>Runes</th>\r\n                <th>Time (s)</th>\r\n                <th>Time (%)</th>\r\n              </tr>\r\n            </thead>\r\n            <tbody>\r\n              { //split into good and bad number of runes available\r\n                this._runesReadySum.filter((value, index) => index < badThreshold).map((value, index) => (\r\n                  <tr key={index}>\r\n                    <th>{index}</th>\r\n                    <td>{formatDuration(this._runesReadySum[index] / 1000)}</td>\r\n                    <td>{formatPercentage(timeSpentAtRuneCount[index])}%</td>\r\n                  </tr>\r\n                ))\r\n              }\r\n              {\r\n                this._runesReadySum.filter((value, index) => index >= badThreshold).map((value, index) => (\r\n                  <tr key={index + badThreshold}>\r\n                    <th style={{ color: 'red' }}>{index + badThreshold}</th>\r\n                    <td>{formatDuration(this._runesReadySum[index + badThreshold] / 1000)}</td>\r\n                    <td>{formatPercentage(timeSpentAtRuneCount[index + badThreshold])}%</td>\r\n                  </tr>\r\n                ))\r\n              }\r\n            </tbody>\r\n          </table>\r\n        }\r\n      >\r\n        <BoringResourceValue\r\n          resource={RESOURCE_TYPES.RUNES}\r\n          value={`${formatPercentage(1 - this.runeEfficiency)} %`}\r\n          label=\"Runes overcapped\"\r\n        />\r\n      </Statistic>\r\n    );\r\n  }\r\n}\r\n\r\nexport default RuneTracker;\r\n","import React from 'react';\r\n\r\nimport Analyzer, { SELECTED_PLAYER } from 'parser/core/Analyzer';\r\nimport SPELLS from 'common/SPELLS/index';\r\nimport SpellIcon from 'common/SpellIcon';\r\nimport { formatNumber, formatPercentage } from 'common/format';\r\n\r\nimport SpellLink from 'common/SpellLink';\r\nimport Enemies from 'parser/shared/modules/Enemies';\r\n\r\nimport { findByBossId } from 'raids';\r\nimport StatisticBox from 'interface/others/StatisticBox';\r\nimport HIT_TYPES from 'game/HIT_TYPES';\r\nimport MAGIC_SCHOOLS from 'game/MAGIC_SCHOOLS';\r\nimport Events from 'parser/core/Events';\r\n\r\nconst debug = false;\r\n\r\nclass MitigationCheck extends Analyzer {\r\n  static dependencies = {\r\n    enemies: Enemies,\r\n  };\r\n\r\n  checksPassedMap = new Map();\r\n  checksFailedMap = new Map();\r\n\r\n  checksPhysical = [];\r\n  checksMagical = [];\r\n\r\n  buffCheckPhysical = [];\r\n  buffCheckMagical = [];\r\n  buffCheckPhysAndMag = [];\r\n\r\n  debuffCheckPhysical = [];\r\n  debuffCheckMagical = [];\r\n  debuffCheckPhysAndMag = [];\r\n\r\n  constructor(...args) {\r\n    super(...args);\r\n    if (this.owner.boss == null) {\r\n      this.active = false;\r\n      return;\r\n    }\r\n    const boss = findByBossId(this.owner.boss.id);\r\n    if (\r\n      boss.fight.softMitigationChecks &&\r\n      boss.fight.softMitigationChecks.physical &&\r\n      boss.fight.softMitigationChecks.magical\r\n    ) {\r\n      this.checksPhysical = boss.fight.softMitigationChecks.physical;\r\n      this.checksMagical = boss.fight.softMitigationChecks.magical;\r\n      if (this.checksPhysical === undefined || this.checksMagical === undefined) {\r\n        this.checksPhysical = [];\r\n        this.checksMagical = [];\r\n      }\r\n    } else {\r\n      this.checksPhysical = [];\r\n      this.checksMagical = [];\r\n\r\n      this.buffCheckPhysical = [];\r\n      this.buffCheckMagical = [];\r\n      this.buffCheckPhysAndMag = [];\r\n\r\n      this.debuffCheckPhysical = [];\r\n      this.debuffCheckMagical = [];\r\n      this.debuffCheckPhysAndMag = [];\r\n    }\r\n    [...this.checksPhysical, ...this.checksMagical].forEach((e) => {\r\n      this.checksPassedMap.set(e, 0);\r\n      this.checksFailedMap.set(e, 0);\r\n    });\r\n    this.addEventListener(Events.damage.to(SELECTED_PLAYER), this.onDamageTaken);\r\n  }\r\n\r\n  onDamageTaken(event) {\r\n    const spell = event.ability.guid;\r\n    const hitType = event.ability.type;\r\n    let checks = [];\r\n    let buffCheck = [];\r\n    let debuffCheck = [];\r\n    if (hitType === MAGIC_SCHOOLS.ids.PHYSICAL) {\r\n      checks = this.checksPhysical;\r\n      buffCheck = [...this.buffCheckPhysical, ...this.buffCheckPhysAndMag];\r\n      debuffCheck = [...this.debuffCheckPhysical, ...this.debuffCheckPhysAndMag];\r\n    } else {\r\n      checks = this.checksMagical;\r\n      buffCheck = [...this.buffCheckMagical, ...this.buffCheckPhysAndMag];\r\n      debuffCheck = [...this.debuffCheckMagical, ...this.debuffCheckPhysAndMag];\r\n    }\r\n    if (checks.includes(spell) && !event.tick) {\r\n      debug && console.log(buffCheck);\r\n      debug && console.log(debuffCheck);\r\n      if (\r\n        buffCheck.some((e) => this.selectedCombatant.hasBuff(e)) ||\r\n        event.hitType === HIT_TYPES.IMMUNE\r\n      ) {\r\n        // pass checked if buff was up or the damage missed\r\n        this.checksPassedMap.set(spell, this.checksPassedMap.get(spell) + 1);\r\n      } else {\r\n        const enemy = this.enemies.getEntities()[event.sourceID];\r\n        //We want to get the source rather than the player's target, so no getEntity().\r\n        if (enemy && debuffCheck.some((e) => enemy.hasBuff(e, event.timestamp))) {\r\n          this.checksPassedMap.set(spell, this.checksPassedMap.get(spell) + 1);\r\n        } else {\r\n          this.checksFailedMap.set(spell, this.checksFailedMap.get(spell) + 1);\r\n        }\r\n      }\r\n    }\r\n  }\r\n\r\n  get tooltip() {\r\n    return [\r\n      ...this.buffCheckPhysical,\r\n      ...this.buffCheckMagical,\r\n      ...this.buffCheckPhysAndMag,\r\n      ...this.debuffCheckPhysical,\r\n      ...this.debuffCheckMagical,\r\n      ...this.debuffCheckPhysAndMag,\r\n    ].map((id) => <li key={id}>{SPELLS[id].name}</li>);\r\n  }\r\n\r\n  get physicalChecks() {\r\n    return this.checksPhysical.filter(\r\n      (spell) => this.checksPassedMap.get(spell) + this.checksFailedMap.get(spell) > 0,\r\n    );\r\n  }\r\n\r\n  get magicalChecks() {\r\n    return this.checksMagical.filter(\r\n      (spell) => this.checksPassedMap.get(spell) + this.checksFailedMap.get(spell) > 0,\r\n    );\r\n  }\r\n\r\n  statistic() {\r\n    const failSum = Array.from(this.checksFailedMap.values()).reduce(\r\n      (total, val) => total + val,\r\n      0,\r\n    );\r\n    const passSum = Array.from(this.checksPassedMap.values()).reduce(\r\n      (total, val) => total + val,\r\n      0,\r\n    );\r\n    if (failSum + passSum === 0) {\r\n      return null;\r\n    }\r\n    const buffCheck = [\r\n      ...this.buffCheckPhysical,\r\n      ...this.buffCheckMagical,\r\n      ...this.buffCheckPhysAndMag,\r\n    ];\r\n    let spellIconId;\r\n    if (buffCheck.length > 0) {\r\n      spellIconId = buffCheck[0];\r\n    } else {\r\n      spellIconId = SPELLS.SHIELD_BLOCK_BUFF.id;\r\n    }\r\n\r\n    const physicalTable =\r\n      this.physicalChecks.length > 0 ? (\r\n        <>\r\n          <thead>\r\n            <tr>\r\n              <th>Physical</th>\r\n              <th>Ability</th>\r\n              <th>Passed</th>\r\n              <th>Failed</th>\r\n            </tr>\r\n          </thead>\r\n          <tbody>\r\n            {this.physicalChecks.map((spell) => (\r\n              <tr key={spell}>\r\n                <td />\r\n                <th scope=\"row\">\r\n                  <SpellLink id={spell} style={{ height: '2.5em' }} />\r\n                </th>\r\n                <td>{formatNumber(this.checksPassedMap.get(spell))}</td>\r\n                <td>{formatNumber(this.checksFailedMap.get(spell))}</td>\r\n              </tr>\r\n            ))}\r\n          </tbody>\r\n        </>\r\n      ) : null;\r\n\r\n    const borderless = { borderTop: 'none' };\r\n    const magicalTable =\r\n      this.magicalChecks.length > 0 ? (\r\n        <>\r\n          <thead>\r\n            <tr>\r\n              <th style={borderless}>Magical</th>\r\n              <th style={borderless}>Ability</th>\r\n              <th style={borderless}>Passed</th>\r\n              <th style={borderless}>Failed</th>\r\n            </tr>\r\n          </thead>\r\n          <tbody>\r\n            {this.magicalChecks.map((spell) => (\r\n              <tr key={spell}>\r\n                <td />\r\n                <th scope=\"row\">\r\n                  <SpellLink id={spell} style={{ height: '2.5em' }} />\r\n                </th>\r\n                <td>{formatNumber(this.checksPassedMap.get(spell))}</td>\r\n                <td>{formatNumber(this.checksFailedMap.get(spell))}</td>\r\n              </tr>\r\n            ))}\r\n          </tbody>\r\n        </>\r\n      ) : null;\r\n\r\n    return (\r\n      <StatisticBox\r\n        icon={<SpellIcon id={spellIconId} />}\r\n        value={`${formatPercentage(passSum / (passSum + failSum))} %`}\r\n        label=\"Soft mitigation checks passed.\"\r\n        tooltip={\r\n          <>\r\n            Checks if one of the following buffs or debuffs were up during the mechanic:\r\n            <ul>{this.tooltip}</ul>\r\n          </>\r\n        }\r\n      >\r\n        <table className=\"table table-condensed\" style={{ fontWeight: 'bold' }}>\r\n          {physicalTable}\r\n          {magicalTable}\r\n        </table>\r\n      </StatisticBox>\r\n    );\r\n  }\r\n}\r\n\r\nexport default MitigationCheck;\r\n","import React from 'react';\r\n\r\nimport SPELLS from 'common/SPELLS';\r\n\r\nimport Analyzer, { Options, SELECTED_PLAYER } from 'parser/core/Analyzer';\r\nimport Events, { HealEvent } from 'parser/core/Events';\r\n\r\nimport STATISTIC_ORDER from 'interface/others/STATISTIC_ORDER';\r\nimport Statistic from 'interface/statistics/Statistic';\r\nimport BoringSpellValueText from 'interface/statistics/components/BoringSpellValueText';\r\nimport { formatNumber, formatPercentage } from 'common/format';\r\n\r\nconst UNHOLY_STRENGTH_STRENGTH = 0.15; // 15% Str buff while active\r\n\r\nclass RuneOfTheFallenCrusader extends Analyzer {\r\n\r\n  healing: number = 0;\r\n  overhealing: number = 0;\r\n\r\n  constructor(options: Options) {\r\n    super(options);\r\n\r\n    const active = this.selectedCombatant.hasWeaponEnchant(SPELLS.RUNE_OF_THE_FALLEN_CRUSADER)\r\n    this.active = active\r\n    if (!active) {\r\n      return;\r\n    }\r\n\r\n    this.addEventListener(Events.heal.to(SELECTED_PLAYER).spell(SPELLS.UNHOLY_STRENGTH_BUFF), this._onHeal);\r\n  }\r\n\r\n  _onHeal(event: HealEvent) {\r\n    if (event.overheal) {\r\n      this.overhealing += event.overheal\r\n    }\r\n    this.healing += event.amount + event.absorb\r\n  }\r\n\r\n  get overhealPercentage() {\r\n    return this.overhealing / this.healing\r\n  }\r\n\r\n  get uptime() {\r\n    return this.selectedCombatant.getBuffUptime(SPELLS.UNHOLY_STRENGTH_BUFF.id) / this.owner.fightDuration;\r\n  }\r\n\r\n  get averageStrength() {\r\n    return this.uptime * UNHOLY_STRENGTH_STRENGTH\r\n  }\r\n\r\n  statistic() {\r\n    return (\r\n      <Statistic\r\n        position={STATISTIC_ORDER.OPTIONAL(2)}\r\n        size=\"flexible\"\r\n        tooltip={(\r\n          <>\r\n            <strong>Uptime: </strong> {formatPercentage(this.uptime)}% <br />\r\n            <strong>Healing: </strong> {formatNumber(this.healing)} <br />\r\n            <strong>Overhealing: </strong> {formatNumber(this.overhealing)} ({formatPercentage(this.overhealPercentage)} %) <br />\r\n          </>\r\n        )}\r\n      >\r\n        <BoringSpellValueText spell={SPELLS.RUNE_OF_THE_FALLEN_CRUSADER}>\r\n          <>\r\n            {formatPercentage(this.averageStrength)} % <small>average Strength</small>\r\n          </>\r\n        </BoringSpellValueText>\r\n      </Statistic>\r\n    );\r\n  }\r\n\r\n}\r\n\r\nexport default RuneOfTheFallenCrusader;\r\n","import React from 'react';\r\n\r\nimport SPELLS from 'common/SPELLS';\r\n\r\nimport Analyzer, { Options } from 'parser/core/Analyzer';\r\nimport Events, { EnergizeEvent } from 'parser/core/Events';\r\n\r\nimport STATISTIC_ORDER from 'interface/others/STATISTIC_ORDER';\r\nimport Statistic from 'interface/statistics/Statistic';\r\nimport BoringSpellValueText from 'interface/statistics/components/BoringSpellValueText';\r\nimport { formatPercentage } from 'common/format';\r\n\r\nimport RESOURCE_TYPES from 'game/RESOURCE_TYPES';\r\n\r\nimport { ThresholdStyle, When } from 'parser/core/ParseResults';\r\nimport { i18n } from '@lingui/core';\r\nimport { t } from '@lingui/macro';\r\nimport SPECS from 'game/SPECS';\r\n\r\nconst RP_BUFF_BY_HYSTERIA = 0.2;\r\nconst DEATH_STRIKE_COST = 45;\r\n\r\n// Energize Events are not floats, making it difficult to track the exact amount of RP gained by Hysteria\r\n// But Energize Events round up if the RP gained was eg. 0.4 and the player had 50.7 RP\r\n// Tracking total RP gained during Hysteria and multiplying it by .2 works for now because fractions add up\r\n// this becomes inaccurate if other spells generate fractions of RP\r\n\r\nclass RuneOfHysteria extends Analyzer {\r\n\r\n  runicPowerGained: number = 0;\r\n  runicPowerWasted: number = 0;\r\n\r\n  constructor(options: Options) {\r\n    super(options);\r\n\r\n    const active = this.selectedCombatant.hasWeaponEnchant(SPELLS.RUNE_OF_HYSTERIA)\r\n    this.active = active\r\n    if (!active) {\r\n      return;\r\n    }\r\n\r\n    this.addEventListener(Events.energize, this._onEnergize)\r\n  }\r\n\r\n  _onEnergize(event: EnergizeEvent) {\r\n    const hysteriaUp = this.selectedCombatant.hasBuff(SPELLS.RUNE_OF_HYSTERIA_BUFF.id, event.timestamp);\r\n    if (!hysteriaUp || event.resourceChangeType !== RESOURCE_TYPES.RUNIC_POWER.id) {\r\n      return;\r\n    }\r\n\r\n    this.runicPowerGained += event.resourceChange;\r\n    this.runicPowerWasted += event.waste\r\n  }\r\n\r\n  get runicPowerGainedByHysteria() {\r\n    return this.runicPowerGained * RP_BUFF_BY_HYSTERIA\r\n  }\r\n\r\n  get runicPowerWastedDuringHysteria() {\r\n    return this.runicPowerWasted * RP_BUFF_BY_HYSTERIA\r\n  }\r\n\r\n  get potentialRunicPowerGainedByHysteria() {\r\n    return this.runicPowerGainedByHysteria + this.runicPowerWastedDuringHysteria\r\n  }\r\n\r\n  get wastedPercentage() {\r\n    return this.runicPowerWastedDuringHysteria / this.runicPowerGainedByHysteria\r\n  }\r\n\r\n  get potentiallyGainedDeathStrikes() {\r\n    return Math.floor(this.potentialRunicPowerGainedByHysteria / DEATH_STRIKE_COST)\r\n  }\r\n\r\n  get gainedDeathStrikes() {\r\n    return Math.floor(this.runicPowerGainedByHysteria / DEATH_STRIKE_COST)\r\n  }\r\n\r\n  get wastedDeathStrikes() {\r\n    return this.potentiallyGainedDeathStrikes - this.gainedDeathStrikes\r\n  }\r\n\r\n  get efficiencySuggestionThresholds() {\r\n    return {\r\n      actual: this.wastedPercentage,\r\n      isGreaterThan: {\r\n        minor: 0,\r\n        average: .2,\r\n        major: .4,\r\n      },\r\n      style: ThresholdStyle.PERCENTAGE,\r\n    };\r\n  }\r\n\r\n  suggestions(when: When) {\r\n    when(this.efficiencySuggestionThresholds)\r\n      .addSuggestion((suggest, actual, recommended) => suggest(<span>Avoid being Runic Power capped at all times, you wasted {this.runicPowerWastedDuringHysteria} PR of {SPELLS.RUNE_OF_HYSTERIA.name} by being RP capped.</span>)\r\n          .icon(SPELLS.RUNE_OF_HYSTERIA.icon)\r\n          .actual(i18n._(t('deathknight.suggestions.hysteria.efficiency')`You wasted ${(formatPercentage(actual))}% of RP from ${SPELLS.RUNE_OF_HYSTERIA.name} by being RP capped.`))\r\n          .recommended(`${formatPercentage(recommended)}% is recommended`));\r\n  }\r\n\r\n  statistic() {\r\n    let gainedSpell: React.ReactNode = <></>\r\n    let wastedSpell: React.ReactNode = <></>\r\n\r\n    if (this.selectedCombatant.spec === SPECS.BLOOD_DEATH_KNIGHT) {\r\n      gainedSpell = <>, resulting in {this.gainedDeathStrikes} additional {SPELLS.DEATH_STRIKE.name}</>\r\n      wastedSpell = <>, losing out on {this.wastedDeathStrikes} {SPELLS.DEATH_STRIKE.name}</>\r\n    }\r\n\r\n    return (\r\n      <Statistic\r\n        position={STATISTIC_ORDER.OPTIONAL(2)}\r\n        size=\"flexible\"\r\n        tooltip={(\r\n          <>\r\n            You gained {Math.floor(this.runicPowerGainedByHysteria)} RP by using {SPELLS.RUNE_OF_HYSTERIA.name}{gainedSpell}.<br />\r\n            {this.runicPowerWastedDuringHysteria > 1 && <>\r\n              You wasted {this.runicPowerWastedDuringHysteria} RP ({formatPercentage(this.wastedPercentage)} %) from Hysteria by being RP capped{wastedSpell}.\r\n            </>}\r\n          </>\r\n        )}\r\n      >\r\n        <BoringSpellValueText spell={SPELLS.RUNE_OF_HYSTERIA}>\r\n          <>\r\n            {Math.floor(this.runicPowerGainedByHysteria)} <small>RP gained</small>\r\n          </>\r\n        </BoringSpellValueText>\r\n      </Statistic>\r\n    );\r\n  }\r\n\r\n}\r\n\r\nexport default RuneOfHysteria;\r\n","import React from 'react';\r\nimport PropTypes from 'prop-types';\r\n\r\nimport SpellIcon from 'common/SpellIcon';\r\nimport SpellLink from 'common/SpellLink';\r\nimport { formatPercentage } from 'common/format';\r\nimport SPELLS from 'common/SPELLS';\r\nimport { TooltipElement } from 'common/Tooltip';\r\n\r\nimport ResourceBreakdown from 'parser/shared/modules/resources/resourcetracker/ResourceBreakdown';\r\n\r\n//Need to extend this class to change how passive rune regeneration is displayed.\r\n//The only new lines are 44, 49-54 and 78.\r\nclass RuneBreakdown extends ResourceBreakdown {\r\n  static propTypes = {\r\n    tracker: PropTypes.object.isRequired,\r\n    showSpenders: PropTypes.bool,\r\n  };\r\n\r\n  render() {\r\n    const { tracker, showSpenders } = this.props;\r\n    const resourceName = tracker.resource.name;\r\n    const generated = this.prepareGenerated(tracker.buildersObj);\r\n    const spent = this.prepareSpent(tracker.spendersObj);\r\n\r\n    let totalGenerated = tracker.generated;\r\n    let totalWasted = tracker.wasted;\r\n\r\n    let totalSpent = tracker.spent;\r\n    let totalCasts = tracker.spendersCasts;\r\n\r\n    // looks wrong but totals are only for the purpose of percentage, and if nothing was wasted, then 0/1 gives correct result 0% wasted, if it's not 0 it retains its original value\r\n    totalGenerated = (totalGenerated === 0) ? 1 : totalGenerated;\r\n    totalWasted = (totalWasted === 0) ? 1 : totalWasted;\r\n\r\n    totalSpent = (totalSpent === 0) ? 1 : totalSpent;\r\n    totalCasts = (totalCasts === 0) ? 1 : totalCasts;\r\n\r\n    return (\r\n      <div>\r\n        <table className=\"data-table\">\r\n          <thead>\r\n            <tr>\r\n              <th>Ability</th>\r\n              <th colSpan=\"2\"><TooltipElement content=\"Runes generated from passive regeneration and abilities that accelerate it are estimates.\">{resourceName} generated</TooltipElement></th>\r\n              <th colSpan=\"2\"><TooltipElement content=\"This is the amount of resources that were generated while you were already at cap.\">{resourceName} wasted</TooltipElement></th>\r\n            </tr>\r\n          </thead>\r\n          <tbody>\r\n            {generated && generated\r\n              .filter(ability => ability.abilityId === SPELLS.RUNE_1.id)\r\n              .map(ability => (\r\n                <tr key={ability.abilityId}>\r\n                  <td style={{ width: '30%' }}>\r\n                    <SpellIcon id={ability.abilityId} noLink />{' '}\r\n                    Passive Rune regeneration\r\n                  </td>\r\n                  <td style={{ width: 50, paddingRight: 5, textAlign: 'center' }}>\r\n                    <TooltipElement content={`${formatPercentage(ability.generated / totalGenerated)} %`}>{ability.generated}</TooltipElement>\r\n                  </td>\r\n                  <td style={{ width: '40%' }}>\r\n                    <div\r\n                      className=\"performance-bar\"\r\n                      style={{ width: `${(ability.generated / totalGenerated) * 100}%` }}\r\n                    />\r\n                  </td>\r\n                  <td style={{ width: 50, paddingRight: 5, textAlign: 'center' }}>\r\n                    <TooltipElement content={`${formatPercentage(ability.wasted / totalWasted)} %`}>{ability.wasted}</TooltipElement>\r\n                  </td>\r\n                  <td style={{ width: '30%' }}>\r\n                    <div\r\n                      className=\"performance-bar\"\r\n                      style={{ width: `${(ability.wasted / totalWasted) * 100}%` }}\r\n                    />\r\n                  </td>\r\n                </tr>\r\n              ))}\r\n            {generated && generated\r\n              .filter(ability => ability.abilityId !== SPELLS.RUNE_1.id)\r\n              .map(ability => (\r\n                <tr key={ability.abilityId}>\r\n                  <td style={{ width: '30%' }}>\r\n                    <SpellLink id={ability.abilityId} />\r\n                  </td>\r\n                  <td style={{ width: 50, paddingRight: 5, textAlign: 'center' }}>\r\n                    <TooltipElement content={`${formatPercentage(ability.generated / totalGenerated)} %`}>{ability.generated}</TooltipElement>\r\n                  </td>\r\n                  <td style={{ width: '40%' }}>\r\n                    <div\r\n                      className=\"performance-bar\"\r\n                      style={{ width: `${(ability.generated / totalGenerated) * 100}%` }}\r\n                    />\r\n                  </td>\r\n                  <td style={{ width: 50, paddingRight: 5, textAlign: 'center' }}>\r\n                    <TooltipElement content={`${formatPercentage(ability.wasted / totalWasted)} %`}>{ability.wasted}</TooltipElement>\r\n                  </td>\r\n                  <td style={{ width: '30%' }}>\r\n                    <div\r\n                      className=\"performance-bar\"\r\n                      style={{ width: `${(ability.wasted / totalWasted) * 100}%` }}\r\n                    />\r\n                  </td>\r\n                </tr>\r\n              ))}\r\n          </tbody>\r\n        </table>\r\n        {showSpenders && (\r\n          <table className=\"data-table\">\r\n            <thead>\r\n              <tr>\r\n                <th>Ability</th>\r\n                <th colSpan=\"2\">{resourceName} spent</th>\r\n                <th colSpan=\"2\">Casts</th>\r\n              </tr>\r\n            </thead>\r\n            <tbody>\r\n              {spent && spent\r\n                .map(ability => (\r\n                  <tr key={ability.abilityId}>\r\n                    <td style={{ width: '30%' }}>\r\n                      <SpellLink id={ability.abilityId} />\r\n                    </td>\r\n                    <td style={{ width: 50, paddingRight: 5, textAlign: 'center' }}>\r\n                      <TooltipElement content={`${formatPercentage(ability.spent / totalSpent)} %`}>{ability.spent}</TooltipElement>\r\n                    </td>\r\n                    <td style={{ width: '40%' }}>\r\n                      <div\r\n                        className=\"performance-bar\"\r\n                        style={{ width: `${(ability.spent / totalSpent) * 100}%` }}\r\n                      />\r\n                    </td>\r\n                    <td style={{ width: 50, paddingRight: 5, textAlign: 'center' }}>\r\n                      <TooltipElement content={`${formatPercentage(ability.casts / totalCasts)} %`}>{ability.casts}</TooltipElement>\r\n                    </td>\r\n                    <td style={{ width: '30%' }}>\r\n                      <div\r\n                        className=\"performance-bar\"\r\n                        style={{ width: `${(ability.casts / totalCasts) * 100}%` }}\r\n                      />\r\n                    </td>\r\n                  </tr>\r\n                ))}\r\n            </tbody>\r\n          </table>\r\n        )}\r\n      </div>\r\n    );\r\n  }\r\n}\r\n\r\nexport default RuneBreakdown;\r\n","import React from 'react';\r\nimport { AutoSizer } from 'react-virtualized';\r\n\r\nimport Analyzer from 'parser/core/Analyzer';\r\nimport Panel from 'interface/others/Panel';\r\nimport BaseChart, { formatTime } from 'interface/others/BaseChart';\r\n\r\nimport RuneBreakdown from './RuneBreakdown';\r\nimport RuneTracker from './RuneTracker';\r\n\r\n\r\nclass RuneDetails extends Analyzer {\r\n  static dependencies = {\r\n    runeTracker: RuneTracker,\r\n  };\r\n\r\n  tab() {\r\n    const data = this.runeTracker.runesReady;\r\n\r\n    const spec = {\r\n      data: {\r\n        name: 'runes',\r\n      },\r\n      mark: {\r\n        type: 'line',\r\n        color: 'rgb(196, 31, 59)',\r\n      },\r\n      encoding: {\r\n        x: {\r\n          field: 'x',\r\n          type: 'quantitative',\r\n          axis: {\r\n            labelExpr: formatTime('datum.value * 1000'),\r\n            grid: false,\r\n          },\r\n          title: null,\r\n        },\r\n        y: {\r\n          field: 'y',\r\n          type: 'quantitative',\r\n          title: '# of Runes',\r\n          axis: {\r\n            grid: false,\r\n            tickMinStep: 1,\r\n          },\r\n        },\r\n      },\r\n    };\r\n\r\n    return {\r\n      title: 'Rune usage',\r\n      url: 'rune-usage',\r\n      render: () => (\r\n        <Panel>\r\n          <AutoSizer disableHeight>\r\n            {({width}) => (\r\n              <BaseChart\r\n                width={width}\r\n                height={400}\r\n                spec={spec}\r\n                data={{ runes: data }}\r\n              />\r\n            )}\r\n          </AutoSizer>\r\n          <RuneBreakdown\r\n            tracker={this.runeTracker}\r\n            showSpenders\r\n          />\r\n        </Panel>\r\n      ),\r\n    };\r\n }\r\n\r\n}\r\n\r\nexport default RuneDetails;\r\n","import Analyzer, { Options, SELECTED_PLAYER } from 'parser/core/Analyzer';\r\nimport SpellIcon from 'common/SpellIcon';\r\nimport calculateMaxCasts from 'parser/core/calculateMaxCasts';\r\nimport Abilities from 'parser/core/modules/Abilities';\r\nimport SpellLink from 'common/SpellLink';\r\n\r\nimport StatisticBox, { STATISTIC_ORDER } from 'interface/others/StatisticBox';\r\nimport { formatNumber, formatPercentage } from 'common/format';\r\nimport Events, { CastEvent, DamageEvent } from 'parser/core/Events';\r\nimport { ThresholdStyle, When } from 'parser/core/ParseResults';\r\nimport Spell from 'common/SPELLS/Spell';\r\n\r\nimport React from 'react';\r\n\r\nimport { i18n } from '@lingui/core';\r\nimport { t } from '@lingui/macro';\r\n\r\n/*\r\n  Creates a suggestion for an AoE-Spell based on the amount of hits done and min. amount of hits possible\r\n*/\r\n\r\nclass AoESpellEfficiency extends Analyzer {\r\n  static dependencies = {\r\n    abilities: Abilities,\r\n  };\r\n  protected abilities!: Abilities;\r\n\r\n  ability!: Spell;\r\n  bonusDmg = 0;\r\n  casts: Array<{ timestamp: number, hits: number }> = [];\r\n\r\n  constructor(options: Options){\r\n    super(options);\r\n    this.addEventListener(Events.cast.by(SELECTED_PLAYER), this.onCast);\r\n    this.addEventListener(Events.damage.by(SELECTED_PLAYER), this.onDamage);\r\n  }\r\n\r\n  onCast(event: CastEvent) {\r\n    if(event.ability.guid !== this.ability.id) {\r\n      return;\r\n    }\r\n    this.casts.push({\r\n      timestamp: event.timestamp,\r\n      hits: 0,\r\n    });\r\n  }\r\n\r\n  onDamage(event: DamageEvent) {\r\n    if (event.ability.guid !== this.ability.id) {\r\n      return;\r\n    }\r\n\r\n    this.bonusDmg += event.amount + (event.absorbed || 0);\r\n    this.casts[this.casts.length - 1].hits += 1;\r\n  }\r\n\r\n  get maxCasts() {\r\n    const cooldown = this.abilities.getAbility(this.ability.id)?.cooldown ?? Infinity;\r\n    return Math.ceil(calculateMaxCasts(cooldown, this.owner.fightDuration));\r\n  }\r\n\r\n  get possibleHits() {\r\n    const cooldownS = this.abilities.getAbility(this.ability.id)?.cooldown;\r\n    if (cooldownS === undefined) {\r\n      return 0;\r\n    }\r\n    const cooldownMS = cooldownS * 1000;\r\n    let lastCast: number | null = null;\r\n    let missedCasts = 0;\r\n    let timeSum = 0;\r\n\r\n    this.casts.forEach(e => {\r\n      if (!lastCast) {\r\n        timeSum = e.timestamp - this.owner.fight.start_time;\r\n      } else {\r\n        timeSum += e.timestamp - lastCast - cooldownMS;\r\n      }\r\n      lastCast = e.timestamp;\r\n      missedCasts += Math.floor(timeSum / cooldownMS);\r\n      timeSum %= cooldownMS;\r\n      // reset the time sum if a cast hit more than one target (we have to assume this cast was at an optimal time)\r\n      if (e.hits > 1) {\r\n        timeSum = 0;\r\n      }\r\n    });\r\n\r\n    timeSum += this.owner.currentTimestamp - (lastCast || 0);\r\n    missedCasts += Math.floor(timeSum / cooldownMS);\r\n    timeSum %= cooldownMS;\r\n\r\n    return Math.max(this.totalHits + missedCasts, this.maxCasts);\r\n  }\r\n\r\n  get totalHits() {\r\n    return this.casts.reduce((a, b) => a + b.hits, 0);\r\n  }\r\n\r\n  get hitSuggestionThreshold() {\r\n    return {\r\n      actual: this.totalHits / this.possibleHits,\r\n      isLessThan: {\r\n        minor: 0.95,\r\n        average: 0.9,\r\n        major: .8,\r\n      },\r\n      style: ThresholdStyle.PERCENTAGE,\r\n    };\r\n  }\r\n\r\n  suggestions(when: When) {\r\n    when(this.hitSuggestionThreshold)\r\n      .addSuggestion((suggest) => suggest(<>It's benefitial to delay <SpellLink id={this.ability.id} /> to hit multiple targets, but don't delay it too long or you'll miss out on casts and possible hits.</>)\r\n          .icon(this.ability.icon)\r\n          .actual(i18n._(t('shared.suggestions.aoeSpells.efficiency')`${this.totalHits} total hits`))\r\n          .recommended(`${this.possibleHits} or more hits were possible`));\r\n  }\r\n\r\n  statistic() {\r\n    return (\r\n      <StatisticBox\r\n        position={STATISTIC_ORDER.CORE(5)}\r\n        icon={<SpellIcon id={this.ability.id} />}\r\n        value={`${formatNumber(this.bonusDmg / this.owner.fightDuration * 1000)} DPS`}\r\n        label=\"Damage contributed\"\r\n        tooltip={`${this.ability.name} added a total of ${formatNumber(this.bonusDmg)} damage (${formatPercentage(this.owner.getPercentageOfTotalDamageDone(this.bonusDmg))}%).`}\r\n      />\r\n    );\r\n  }\r\n}\r\n\r\nexport default AoESpellEfficiency;\r\n","import React from 'react';\r\nimport { AutoSizer } from 'react-virtualized';\r\n\r\nimport Analyzer, { SELECTED_PLAYER } from 'parser/core/Analyzer';\r\nimport Panel from 'interface/others/Panel';\r\nimport SPELLS from 'common/SPELLS';\r\nimport SpellLink from 'common/SpellLink';\r\n\r\nimport BaseChart, { formatTime } from 'interface/others/BaseChart';\r\nimport Events from 'parser/core/Events';\r\n\r\nconst DEATH_BUFFER = 200;\r\n\r\n/**\r\n * Goal is to remove pressure from healers by selfhealing more when really needed (eg. at low health) / improving tanks reactive selfhealing timings\r\n*/\r\nclass SelfHealTimingGraph extends Analyzer {\r\n  _hpEvents = [];\r\n  _deathEvents = [];\r\n  _selfhealTimestamps = [];\r\n\r\n\r\n  selfHealSpell = SPELLS.HEALTHSTONE;\r\n  tabTitle = \"Selheal Timing\";\r\n  tabURL = 'selfheal-timings';\r\n\r\n  constructor(options){\r\n    super(options);\r\n    this.addEventListener(Events.death.to(SELECTED_PLAYER), this.onDeath);\r\n    this.addEventListener(Events.damage.to(SELECTED_PLAYER), this.onDamageTaken);\r\n    this.addEventListener(Events.heal.to(SELECTED_PLAYER), this.onHealTaken);\r\n  }\r\n\r\n  onDeath(event) {\r\n    this._deathEvents.push(event);\r\n  }\r\n\r\n  onDamageTaken(event) {\r\n    this._hpEvents.push(event);\r\n  }\r\n\r\n  onHealTaken(event) {\r\n    this._hpEvents.push(event);\r\n\r\n    if (event.ability.guid === this.selfHealSpell.id && event.sourceID === event.targetID) {\r\n      this._selfhealTimestamps.push(event);\r\n    }\r\n  }\r\n\r\n  get plot() {\r\n    const _deaths = this._deathEvents.map(({ timestamp, ability }) => {\r\n      // find last HP event (within 200ms of death event, usually should be the same timestamp)\r\n      const lastHpIndex = this._hpEvents.findIndex(e => e.timestamp >= timestamp - DEATH_BUFFER);\r\n      // this event is usually with hitPoints already 0, so we need one event before that\r\n      // return if event doesn't exist or is actually the first event (on-pull death?)\r\n      if (lastHpIndex === -1 || lastHpIndex === 0) {\r\n        this.log('Didn\\'t find last HP event before death');\r\n        return undefined;\r\n      }\r\n      const { hitPoints, maxHitPoints } = this._hpEvents[lastHpIndex - 1];\r\n      const p = (hitPoints / maxHitPoints) || 0;\r\n      const percentage = Math.min(Math.round(p * 100), 100);\r\n      return {\r\n        x: timestamp - this.owner.fight.start_time,\r\n        percentage,\r\n        ability,\r\n      };\r\n    });\r\n\r\n    const _hp = this._hpEvents.filter(event => event.hitPoints !== undefined && event.maxHitPoints !== undefined)\r\n      .map(({ timestamp, hitPoints, maxHitPoints }) => {\r\n        const p = (hitPoints / maxHitPoints) || 0;\r\n        return {\r\n          x: timestamp - this.owner.fight.start_time,\r\n          y: Math.min(Math.round(p * 100), 100),\r\n        };\r\n      });\r\n\r\n    const _casts = this._selfhealTimestamps.map(event => {\r\n      const startingHP = event.hitPoints - (event.amount || 0) + (event.absorbed || 0) + (event.absorb || 0);\r\n      const p = (startingHP / event.maxHitPoints) || 0;\r\n      const percentage = Math.min(Math.round(p * 100), 100);\r\n      return {\r\n        x: event.timestamp - this.owner.fight.start_time,\r\n        y: percentage,\r\n        ability: event.ability,\r\n        amount: event.amount || 0,\r\n        overheal: event.overheal || 0,\r\n        hitPoints: startingHP,\r\n      };\r\n    });\r\n\r\n    const baseEncoding = {\r\n      x: {\r\n        field: 'x',\r\n        type: 'quantitative',\r\n        axis: {\r\n          labelExpr: formatTime('datum.value'),\r\n          grid: false,\r\n        },\r\n        title: null,\r\n        scale: { zero: true, nice: false },\r\n      },\r\n      y: {\r\n        field: 'y',\r\n        type: 'quantitative',\r\n        title: null,\r\n        axis: {\r\n          grid: false,\r\n        },\r\n      },\r\n    };\r\n\r\n    const spec = {\r\n      layer: [\r\n        {\r\n          data: {\r\n            name: 'hp',\r\n          },\r\n          mark: {\r\n            type: 'area',\r\n            line: {\r\n              interpolate: 'linear',\r\n              color: '#fab700',\r\n              strokeWidth: 1,\r\n            },\r\n            color: 'rgba(250, 183, 0, 0.15)',\r\n          },\r\n          encoding: baseEncoding,\r\n        },\r\n        {\r\n          data: {\r\n            name: 'casts',\r\n          },\r\n          mark: {\r\n            type: 'point',\r\n            size: 60,\r\n            color: 'white',\r\n            filled: true,\r\n          },\r\n          encoding: {\r\n            ...baseEncoding,\r\n            tooltip: [\r\n              { field: 'ability.name', type: 'nominal', title: 'Ability' },\r\n              { field: 'hitPoints', type: 'quantitative', title: 'Hit Points', format: '.3~s' },\r\n              { field: 'amount', type: 'quantitative', title: 'Healing', format: '.3~s' },\r\n              { field: 'overheal', type: 'quantitative', title: 'Overhealing', format: '.3~s' },\r\n            ],\r\n          },\r\n        },\r\n        {\r\n          data: {\r\n            name: 'deaths',\r\n          },\r\n          mark: {\r\n            type: 'rule',\r\n            color: 'red',\r\n            strokeWidth: 2,\r\n          },\r\n          encoding: {\r\n            x: baseEncoding.x,\r\n            tooltip: [\r\n              { field: 'ability.name', type: 'nominal', title: 'Killing Ability' },\r\n              { field: 'percentage', type: 'quantitative', title: 'HP % When Hit' },\r\n            ],\r\n          },\r\n        },\r\n      ],\r\n    };\r\n    const data = {\r\n      hp: [{x: 0, y: 100}].concat(_hp),\r\n      casts: _casts,\r\n      deaths: _deaths,\r\n    };\r\n\r\n    return (\r\n      <div className=\"graph-container\" style={{\r\n        width: '100%',\r\n        minHeight: 200,\r\n      }}>\r\n        <AutoSizer>\r\n          {({ width, height }) => (\r\n            <BaseChart width={width} height={height} spec={spec} data={data} />\r\n          )}\r\n        </AutoSizer>\r\n      </div>\r\n    );\r\n  }\r\n\r\n  tab() {\r\n    return {\r\n      title: this.tabTitle,\r\n      url: this.tabURL,\r\n      render: () => (\r\n        <Panel\r\n          title={this.tabTitle}\r\n          explanation={(\r\n            <>\r\n              This plot shows you your <SpellLink id={this.selfHealSpell.id} /> casts relative to your Health Points to help you improve your <SpellLink id={this.selfHealSpell.id} /> timings.<br />\r\n              Improving those timings by selfhealing at low health and the correct time will remove a lot of pressure from your healers.\r\n            </>\r\n          )}\r\n        >\r\n          {this.plot}\r\n        </Panel>\r\n      ),\r\n    };\r\n  }\r\n}\r\n\r\nexport default SelfHealTimingGraph;\r\n"],"sourceRoot":""}