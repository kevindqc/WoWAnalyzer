{"version":3,"sources":["parser/warlock/destruction/modules/core/SpellUsable.js","parser/warlock/destruction/modules/features/Abilities.js","parser/warlock/destruction/modules/features/AlwaysBeCasting.js","parser/warlock/destruction/modules/features/CooldownThroughputTracker.js","parser/warlock/destruction/modules/features/ImmolateUptime.js","parser/warlock/destruction/modules/features/Havoc.js","parser/warlock/destruction/modules/features/RainOfFire.js","parser/warlock/destruction/modules/features/Backdraft.js","parser/warlock/destruction/modules/soulshards/SoulShardTracker.js","parser/warlock/destruction/modules/soulshards/SoulShardDetails.js","parser/warlock/destruction/modules/talents/Eradication.js","parser/warlock/destruction/modules/features/Checklist/Component.js","parser/warlock/destruction/modules/features/Checklist/Module.js","parser/warlock/destruction/modules/talents/Flashover.js","parser/warlock/destruction/modules/talents/SoulFire.js","parser/warlock/destruction/modules/talents/ReverseEntropy.js","parser/warlock/destruction/modules/talents/InternalCombustion.js","parser/warlock/destruction/modules/talents/Shadowburn.js","parser/warlock/destruction/modules/talents/Inferno.js","parser/warlock/destruction/modules/talents/FireAndBrimstone.js","parser/warlock/destruction/modules/talents/Cataclysm.js","parser/warlock/destruction/modules/talents/RoaringBlaze.js","parser/warlock/destruction/modules/talents/SoulConduit.js","parser/warlock/destruction/modules/talents/ChannelDemonfire.js","parser/warlock/destruction/CombatLogParser.ts","interface/icons/Uptime.js"],"names":["SpellUsable","args","hasSB","hasSF","shadowburnedEnemies","selectedCombatant","hasTalent","SPELLS","SHADOWBURN_TALENT","id","SOUL_FIRE_TALENT","addEventListener","Events","SpendResource","by","SELECTED_PLAYER","onSpendResource","applydebuff","spell","_handleShadowburn","refreshdebuff","removedebuff","onRemoveDebuff","event","this","isOnCooldown","shardsSpent","resourceChange","reduceCooldown","target","encodeTargetString","targetID","targetInstance","start","timestamp","expectedEnd","ability","guid","endCooldown","CoreSpellUsable","FEL_CELERITY_REDUCTION_SEC","1","2","3","4","5","6","7","8","9","10","11","12","13","14","15","Abilities","combatant","CHAOS_BOLT","category","SPELL_CATEGORIES","ROTATIONAL","gcd","base","CHANNEL_DEMONFIRE_TALENT","cooldown","haste","enabled","castEfficiency","suggestion","recommendedEfficiency","CONFLAGRATE","charges","CORRUPTION_CAST","buffSpellId","CORRUPTION_DEBUFF","IMMOLATE","IMMOLATE_DEBUFF","INCINERATE","HAVOC","RAIN_OF_FIRE_CAST","ROTATIONAL_AOE","CATACLYSM_TALENT","SUMMON_INFERNAL","COOLDOWNS","DARK_SOUL_INSTABILITY_TALENT","UNENDING_RESOLVE","DEFENSIVE","importance","ISSUE_IMPORTANCE","MINOR","averageIssueEfficiency","majorIssueEfficiency","DARK_PACT_TALENT","UTILITY","BURNING_RUSH_TALENT","DRAIN_LIFE","MORTAL_COIL_TALENT","DEMONIC_CIRCLE_SUMMON","DEMONIC_CIRCLE_TELEPORT","SOULSTONE","DEMONIC_GATEWAY_CAST","GRIMOIRE_OF_SACRIFICE_TALENT","BANISH","CREATE_HEALTHSTONE","CREATE_SOULWELL","SUBJUGATE_DEMON","EYE_OF_KILROGG","FEAR_CAST","CURSE_OF_TONGUES","CURSE_OF_WEAKNESS","CURSE_OF_EXHAUSTION","HEALTH_FUNNEL_CAST","SUMMON_IMP","SUMMON_VOIDWALKER","SUMMON_SUCCUBUS","SUMMON_FELHUNTER","SHADOWFURY","DARKFURY_TALENT","FEL_DOMINATION","hasConduitBySpellID","FEL_CELERITY","conduitRankBySpellID","UNENDING_BREATH","HOWL_OF_TERROR_TALENT","CoreAbilities","AlwaysBeCasting","when","suggestionThresholds","addSuggestion","suggest","actual","recommended","SpellLink","DEMONIC_CIRCLE","icon","i18n","_","formatPercentage","Statistic","position","STATISTIC_ORDER","CORE","tooltip","activeTimePercentage","downtimePercentage","className","Gauge","value","isGreaterThan","minor","average","major","style","CoreAlwaysBeCasting","CooldownThroughputTracker","CoreCooldownThroughputTracker","cooldownSpells","summary","BUILT_IN_SUMMARY_TYPES","DAMAGE","castCooldowns","duration","ImmolateUptime","history","enemies","getDebuffHistory","StatisticBar","wide","SpellIcon","uptime","padding","UptimeBar","uptimeHistory","owner","fight","start_time","end","end_time","height","getBuffUptime","fightDuration","isLessThan","Analyzer","dependencies","Enemies","Havoc","damage","onDamage","enemy","getEntity","hasBuff","amount","absorbed","size","formatThousands","BoringSpellValueText","formatNumber","dps","getPercentageOfTotalDamageDone","RainOfFire","casts","cast","onRainCast","RAIN_OF_FIRE_DAMAGE","onRainDamage","current","concat","map","targetsHit","length","push","_expectedRoFduration","periods","lastTickTimestamp","filtered","filter","timeSinceLastTick","includes","possibleCurrentTickCast","find","closest","expectedTick","_getAveragePeriod","delta","Math","abs","sort","cast1","cast2","reduce","total","averageTargetsHit","toFixed","Haste","Backdraft","_maxStacks","_stacksPerApplication","_currentStacks","_expectedBuffEnd","wastedStacks","FLASHOVER_TALENT","onConflagrateCast","removebuffstack","BACKDRAFT","onBackdraftRemoveStack","removebuff","onBackdraftRemove","DAMAGE_GENERATORS","hitType","HIT_TYPES","CRIT","SoulShardTracker","lastInfernalSummon","lastInfernalTick","immolateCrits","rainOfFireHits","hasInferno","resource","Object","assign","RESOURCE_TYPES","SOUL_SHARDS","name","INFERNO_TALENT","any","onEvent","fightend","onFightend","EventFilter","resourceChangeType","spellId","processInvisibleEnergize","shouldProcessCastEvent","eventResource","getResource","missingFragments","distribution","_getRandomFragmentDistribution","actualImmolate","min","immolate","actualRain","rainOfFire","currentTimestamp","_hasInfernal","_infernalTicked","INFERNAL_AWAKENING","spent","generated","gain","waste","beforeBuilder","eventEmitter","fabricateEvent","type","undefined","totalFragments","denominator","i","round","ResourceTracker","SoulShardDetails","fragmentsWasted","soulShardTracker","wasted","shardsWasted","title","url","render","Panel","Warning","marginLeft","marginRight","ResourceBreakdown","tracker","showSpenders","Eradication","_buffedCB","_totalCB","bonusDmg","queue","active","ERADICATION_TALENT","onTravelSpellCast","ERADICATION_DEBUFF","calculateEffectiveDamage","_handleTravelSpellDamage","castIndex","findIndex","queuedCast","splice","STATISTIC_CATEGORY","TALENTS","Uptime","CBpercentage","Tooltip","content","DestructionWarlockChecklist","thresholds","shardTracker","AbilityRequirement","props","GenericCastEfficiencyRequirement","getCastEfficiencyForSpellId","Rule","description","Requirement","wastedBackdraft","soulShards","valueTooltip","eradication","downtime","PreparationRule","Checklist","Component","combatants","selected","preparationRuleAnalyzer","immolateUptime","backdraft","soulShardDetails","alwaysBeCasting","BaseChecklist","Combatants","CastEfficiency","PreparationRuleAnalyzer","Flashover","bonusStacks","onConflagrateDamage","to","onBackdraftRemoveBuffStack","onBackdraftRemoveBuff","MAX_STACKS","SoulFire","fragments","getGeneratedBySpell","chaosBolt","abilityTracker","getAbility","avg","damageEffective","damageAbsorbed","estimatedDamage","floor","formatItemDamageDone","AbilityTracker","ReverseEntropy","REVERSE_ENTROPY_TALENT","REVERSE_ENTROPY_BUFF","InternalCombustion","INTERNAL_COMBUSTION_TALENT","INTERNAL_COMBUSTION_DAMAGE","onInternalCombustionDamage","Shadowburn","onShadowburnDamage","Inferno","rofDamage","rofCast","estimatedRofDamage","averageRainOfFireDamage","estimatedChaosBoltDamage","averageChaosBoltDamage","FireAndBrimstone","_primaryTargets","bonusFragments","FIRE_AND_BRIMSTONE_TALENT","onIncinerateCast","onIncinerateDamage","primaryTargetEventIndex","primary","isEqual","staticImportance","MAJOR","Cataclysm","_castTimestamp","_currentCastCount","onCataclysmCast","onCataclysmDamage","onFinished","RoaringBlaze","ROARING_BLAZE_TALENT","ROARING_BLAZE_DAMAGE","onRoaringBlazeDamage","SoulConduit","SOUL_CONDUIT_TALENT","generatedShards","SOUL_CONDUIT_SHARD_GEN","totalSpent","max","findMax","k","n","binomialPMF","ChannelDemonfire","CHANNEL_DEMONFIRE_DAMAGE","onCDFdamage","CombatLogParser","CoreCombatLogParser","specModules","abilities","cooldownThroughputTracker","havoc","checklist","spellUsable","grimoireOfSacrificeNormalizer","GrimoireOfSacrificeNormalizer","flashover","soulFire","reverseEntropy","internalCombustion","shadowburn","inferno","fireAndBrimstone","cataclysm","roaringBlaze","grimoireOfSacrifice","GrimoireOfSacrifice","soulConduit","channelDemonfire","arcaneTorrent","ArcaneTorrent","Icon","other","xmlns","viewBox","d"],"mappings":"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","file":"static/js/DestructionWarlock.be71e08a.chunk.js","sourcesContent":["import CoreSpellUsable from 'parser/shared/modules/SpellUsable';\r\nimport SPELLS from 'common/SPELLS';\r\nimport { encodeTargetString } from 'parser/shared/modules/EnemyInstances';\r\nimport Events from 'parser/core/Events';\r\nimport { SELECTED_PLAYER } from 'parser/core/Analyzer';\r\n\r\n/*\r\n  Soul Fire (Tier 15 Destruction talent):\r\n    Burns the enemy's soul, dealing X Fire damage. Cooldown is reduced by 2 sec for every Soul Shard you spend.\r\n */\r\n\r\nconst SHADOWBURN_DEBUFF_DURATION = 5000;\r\nconst BUFFER = 50;\r\nconst debug = false;\r\nconst REDUCTION_MS_PER_SHARD = 2000;\r\n\r\nclass SpellUsable extends CoreSpellUsable {\r\n  hasSB = false;\r\n  hasSF = false;\r\n\r\n  shadowburnedEnemies = {\r\n    /*\r\n    [targetString]: {\r\n      start: timestamp,\r\n      expectedEnd: timestamp\r\n    }\r\n     */\r\n  };\r\n\r\n  constructor(...args) {\r\n    super(...args);\r\n    this.hasSB = this.selectedCombatant.hasTalent(SPELLS.SHADOWBURN_TALENT.id);\r\n    this.hasSF = this.selectedCombatant.hasTalent(SPELLS.SOUL_FIRE_TALENT.id);\r\n    this.addEventListener(Events.SpendResource.by(SELECTED_PLAYER), this.onSpendResource);\r\n    this.addEventListener(Events.applydebuff.by(SELECTED_PLAYER).spell(SPELLS.SHADOWBURN_TALENT), this._handleShadowburn);\r\n    this.addEventListener(Events.refreshdebuff.by(SELECTED_PLAYER).spell(SPELLS.SHADOWBURN_TALENT), this._handleShadowburn);\r\n    this.addEventListener(Events.removedebuff.by(SELECTED_PLAYER), this.onRemoveDebuff);\r\n  }\r\n\r\n  onSpendResource(event) {\r\n    if (!this.hasSF) {\r\n      return;\r\n    }\r\n    if (this.isOnCooldown(SPELLS.SOUL_FIRE_TALENT.id)) {\r\n      // event.resourceChange is in multiples of 10 (2 shards = 20)\r\n      const shardsSpent = event.resourceChange / 10;\r\n      this.reduceCooldown(SPELLS.SOUL_FIRE_TALENT.id, shardsSpent * REDUCTION_MS_PER_SHARD);\r\n    }\r\n  }\r\n\r\n  _handleShadowburn(event) {\r\n    if (!this.hasSB) {\r\n      return;\r\n    }\r\n    const target = encodeTargetString(event.targetID, event.targetInstance);\r\n    this.shadowburnedEnemies[target] = {\r\n      start: event.timestamp,\r\n      expectedEnd: event.timestamp + SHADOWBURN_DEBUFF_DURATION,\r\n    };\r\n  }\r\n\r\n  onRemoveDebuff(event) {\r\n    if (!this.hasSB) {\r\n      return;\r\n    }\r\n    if (event.ability.guid !== SPELLS.SHADOWBURN_TALENT.id) {\r\n      return;\r\n    }\r\n    const target = encodeTargetString(event.targetID, event.targetInstance);\r\n    if (!this.shadowburnedEnemies[target]) {\r\n      debug && this.log(`Shadowburn debuff remove on untracked enemy: ${target}`);\r\n      return;\r\n    }\r\n    // the Shadowburn debuff sometimes expires earlier than in full 5 seconds (e.g. on bosses), so we're checking for even earlier expiration\r\n    const diedEarlier = this.shadowburnedEnemies[target].start <= event.timestamp && event.timestamp <= this.shadowburnedEnemies[target].expectedEnd - BUFFER;\r\n    if (diedEarlier && this.isOnCooldown(SPELLS.SHADOWBURN_TALENT.id)) {\r\n      debug && this.log(`Shadowburned enemy died (${target}), cooldown reset.`);\r\n      this.endCooldown(SPELLS.SHADOWBURN_TALENT.id);\r\n    }\r\n  }\r\n}\r\n\r\nexport default SpellUsable;\r\n","import CoreAbilities from 'parser/core/modules/Abilities';\r\n\r\nimport SPELLS from 'common/SPELLS';\r\nimport ISSUE_IMPORTANCE from 'parser/core/ISSUE_IMPORTANCE';\r\n\r\nconst FEL_CELERITY_REDUCTION_SEC = {\r\n  1: 48,\r\n  2: 51,\r\n  3: 54,\r\n  4: 57,\r\n  5: 60,\r\n  6: 63,\r\n  7: 66,\r\n  8: 69,\r\n  9: 72,\r\n  10: 75,\r\n  11: 78,\r\n  12: 81,\r\n  13: 84,\r\n  14: 87,\r\n  15: 90,\r\n};\r\n\r\nclass Abilities extends CoreAbilities {\r\n  spellbook() {\r\n    const combatant = this.selectedCombatant;\r\n    return [\r\n      // Rotational spells\r\n      {\r\n        spell: SPELLS.CHAOS_BOLT,\r\n        category: Abilities.SPELL_CATEGORIES.ROTATIONAL,\r\n        gcd: {\r\n          base: 1500,\r\n        },\r\n      },\r\n      {\r\n        spell: SPELLS.CHANNEL_DEMONFIRE_TALENT,\r\n        category: Abilities.SPELL_CATEGORIES.ROTATIONAL,\r\n        cooldown: haste => 25 / (1 + haste),\r\n        enabled: combatant.hasTalent(SPELLS.CHANNEL_DEMONFIRE_TALENT.id),\r\n        gcd: {\r\n          base: 1500,\r\n        },\r\n        castEfficiency: {\r\n          suggestion: true,\r\n          recommendedEfficiency: 0.95,\r\n        },\r\n      },\r\n      {\r\n        spell: SPELLS.CONFLAGRATE,\r\n        category: Abilities.SPELL_CATEGORIES.ROTATIONAL,\r\n        cooldown: haste => 13 / (1 + haste),\r\n        charges: 2,\r\n        gcd: {\r\n          base: 1500,\r\n        },\r\n        castEfficiency: {\r\n          suggestion: true,\r\n          recommendedEfficiency: 0.95,\r\n        },\r\n      },\r\n      {\r\n        spell: SPELLS.CORRUPTION_CAST,\r\n        category: Abilities.SPELL_CATEGORIES.ROTATIONAL,\r\n        gcd: {\r\n          base: 1500,\r\n        },\r\n        buffSpellId: SPELLS.CORRUPTION_DEBUFF.id,\r\n      },\r\n      {\r\n        spell: SPELLS.SOUL_FIRE_TALENT,\r\n        category: Abilities.SPELL_CATEGORIES.ROTATIONAL,\r\n        enabled: combatant.hasTalent(SPELLS.SOUL_FIRE_TALENT.id),\r\n        cooldown: 45, // TODO: further shortened via spending soul shards\r\n        castEfficiency: {\r\n          suggestion: true,\r\n          recommendedEfficiency: 0.9,\r\n        },\r\n      },\r\n      {\r\n        spell: SPELLS.SHADOWBURN_TALENT,\r\n        category: Abilities.SPELL_CATEGORIES.ROTATIONAL,\r\n        cooldown: haste => 12 / (1 + haste),\r\n        charges: 2,\r\n        enabled: combatant.hasTalent(SPELLS.SHADOWBURN_TALENT.id),\r\n        gcd: {\r\n          base: 1500,\r\n        },\r\n        castEfficiency: {\r\n          suggestion: true,\r\n          recommendedEfficiency: 0.9,\r\n        },\r\n        buffSpellId: SPELLS.SHADOWBURN_TALENT.id,\r\n      },\r\n      {\r\n        spell: SPELLS.IMMOLATE,\r\n        category: Abilities.SPELL_CATEGORIES.ROTATIONAL,\r\n        gcd: {\r\n          base: 1500,\r\n        },\r\n        buffSpellId: SPELLS.IMMOLATE_DEBUFF.id,\r\n      },\r\n      {\r\n        spell: SPELLS.INCINERATE,\r\n        category: Abilities.SPELL_CATEGORIES.ROTATIONAL,\r\n        gcd: {\r\n          base: 1500,\r\n        },\r\n      },\r\n      {\r\n        spell: SPELLS.HAVOC,\r\n        category: Abilities.SPELL_CATEGORIES.ROTATIONAL,\r\n        cooldown: 30,\r\n        gcd: {\r\n          base: 1500,\r\n        },\r\n        castEfficiency: {\r\n          suggestion: false,\r\n        },\r\n        buffSpellId: SPELLS.HAVOC.id,\r\n      },\r\n      {\r\n        spell: SPELLS.RAIN_OF_FIRE_CAST,\r\n        category: Abilities.SPELL_CATEGORIES.ROTATIONAL_AOE,\r\n        gcd: {\r\n          base: 1500,\r\n        },\r\n      },\r\n      {\r\n        spell: SPELLS.CATACLYSM_TALENT,\r\n        category: Abilities.SPELL_CATEGORIES.ROTATIONAL_AOE,\r\n        cooldown: 30,\r\n        enabled: combatant.hasTalent(SPELLS.CATACLYSM_TALENT.id),\r\n        castEfficiency: {\r\n          suggestion: false,\r\n        },\r\n      },\r\n\r\n      // Cooldowns\r\n      {\r\n        spell: SPELLS.SUMMON_INFERNAL,\r\n        category: Abilities.SPELL_CATEGORIES.COOLDOWNS,\r\n        cooldown: 180,\r\n        gcd: {\r\n          base: 1500,\r\n        },\r\n      },\r\n      {\r\n        spell: SPELLS.DARK_SOUL_INSTABILITY_TALENT,\r\n        category: Abilities.SPELL_CATEGORIES.COOLDOWNS,\r\n        cooldown: 120,\r\n        gcd: {\r\n          base: 1500,\r\n        },\r\n        enabled: combatant.hasTalent(SPELLS.DARK_SOUL_INSTABILITY_TALENT.id),\r\n        castEfficiency: {\r\n          suggestion: true,\r\n          recommendedEfficiency: 0.9,\r\n        },\r\n        buffSpellId: SPELLS.DARK_SOUL_INSTABILITY_TALENT.id,\r\n      },\r\n\r\n      // Defensive\r\n      {\r\n        spell: SPELLS.UNENDING_RESOLVE,\r\n        buffSpellId: SPELLS.UNENDING_RESOLVE.id,\r\n        category: Abilities.SPELL_CATEGORIES.DEFENSIVE,\r\n        cooldown: 180,\r\n        gcd: null,\r\n        castEfficiency: {\r\n          suggestion: true,\r\n          importance: ISSUE_IMPORTANCE.MINOR,\r\n          recommendedEfficiency: 0.33,\r\n          averageIssueEfficiency: 0.20,\r\n          majorIssueEfficiency: 0.10,\r\n        },\r\n      },\r\n      {\r\n        spell: SPELLS.DARK_PACT_TALENT,\r\n        category: Abilities.SPELL_CATEGORIES.UTILITY,\r\n        cooldown: 60,\r\n        gcd: null,\r\n        enabled: combatant.hasTalent(SPELLS.DARK_PACT_TALENT.id),\r\n        castEfficiency: {\r\n          suggestion: true,\r\n          importance: ISSUE_IMPORTANCE.MINOR,\r\n          recommendedEfficiency: 0.33,\r\n          averageIssueEfficiency: 0.20,\r\n          majorIssueEfficiency: 0.10,\r\n        },\r\n        buffSpellId: SPELLS.DARK_PACT_TALENT.id,\r\n      },\r\n\r\n      // Utility\r\n      {\r\n        spell: SPELLS.BURNING_RUSH_TALENT,\r\n        category: Abilities.SPELL_CATEGORIES.UTILITY,\r\n        enabled: combatant.hasTalent(SPELLS.BURNING_RUSH_TALENT.id),\r\n        gcd: {\r\n          base: 1500,\r\n        },\r\n        buffSpellId: SPELLS.BURNING_RUSH_TALENT.id,\r\n      },\r\n      {\r\n        spell: SPELLS.DRAIN_LIFE,\r\n        category: Abilities.SPELL_CATEGORIES.UTILITY,\r\n        gcd: {\r\n          base: 1500,\r\n        },\r\n      },\r\n      {\r\n        spell: SPELLS.MORTAL_COIL_TALENT,\r\n        category: Abilities.SPELL_CATEGORIES.UTILITY,\r\n        cooldown: 45,\r\n        enabled: combatant.hasTalent(SPELLS.MORTAL_COIL_TALENT.id),\r\n        gcd: {\r\n          base: 1500,\r\n        },\r\n      },\r\n      {\r\n        spell: SPELLS.DEMONIC_CIRCLE_SUMMON,\r\n        category: Abilities.SPELL_CATEGORIES.UTILITY,\r\n        gcd: {\r\n          base: 1500,\r\n        },\r\n        cooldown: 10,\r\n        castEfficiency: {\r\n          suggestion: false,\r\n        },\r\n      },\r\n      {\r\n        spell: SPELLS.DEMONIC_CIRCLE_TELEPORT,\r\n        category: Abilities.SPELL_CATEGORIES.UTILITY,\r\n        cooldown: 30,\r\n        gcd: {\r\n          base: 1500,\r\n        },\r\n        castEfficiency: {\r\n          suggestion: false,\r\n        },\r\n      },\r\n      {\r\n        spell: SPELLS.SOULSTONE,\r\n        category: Abilities.SPELL_CATEGORIES.UTILITY,\r\n        gcd: {\r\n          base: 1500,\r\n        },\r\n      },\r\n      {\r\n        spell: SPELLS.DEMONIC_GATEWAY_CAST,\r\n        category: Abilities.SPELL_CATEGORIES.UTILITY,\r\n        cooldown: 10,\r\n        gcd: {\r\n          base: 1500,\r\n        },\r\n      },\r\n      {\r\n        spell: SPELLS.GRIMOIRE_OF_SACRIFICE_TALENT,\r\n        category: Abilities.SPELL_CATEGORIES.UTILITY,\r\n        cooldown: 30,\r\n        enabled: combatant.hasTalent(SPELLS.GRIMOIRE_OF_SACRIFICE_TALENT.id),\r\n        gcd: {\r\n          base: 1500,\r\n        },\r\n      },\r\n      {\r\n        spell: SPELLS.BANISH,\r\n        category: Abilities.SPELL_CATEGORIES.UTILITY,\r\n        gcd: {\r\n          base: 1500,\r\n        },\r\n      },\r\n      {\r\n        spell: SPELLS.CREATE_HEALTHSTONE,\r\n        category: Abilities.SPELL_CATEGORIES.UTILITY,\r\n        gcd: {\r\n          base: 1500,\r\n        },\r\n      },\r\n      {\r\n        spell: SPELLS.CREATE_SOULWELL,\r\n        category: Abilities.SPELL_CATEGORIES.UTILITY,\r\n        cooldown: 120,\r\n        gcd: {\r\n          base: 1500,\r\n        },\r\n      },\r\n      {\r\n        spell: SPELLS.SUBJUGATE_DEMON,\r\n        category: Abilities.SPELL_CATEGORIES.UTILITY,\r\n        gcd: {\r\n          base: 1500,\r\n        },\r\n      },\r\n      {\r\n        spell: SPELLS.EYE_OF_KILROGG,\r\n        category: Abilities.SPELL_CATEGORIES.UTILITY,\r\n        gcd: {\r\n          base: 1500,\r\n        },\r\n      },\r\n      {\r\n        spell: SPELLS.FEAR_CAST,\r\n        category: Abilities.SPELL_CATEGORIES.UTILITY,\r\n        gcd: {\r\n          base: 1500,\r\n        },\r\n      },\r\n      {\r\n        spell: SPELLS.CURSE_OF_TONGUES,\r\n        category: Abilities.SPELL_CATEGORIES.UTILITY,\r\n        gcd: {\r\n          base: 1500,\r\n        },\r\n      },\r\n      {\r\n        spell: SPELLS.CURSE_OF_WEAKNESS,\r\n        category: Abilities.SPELL_CATEGORIES.UTILITY,\r\n        gcd: {\r\n          base: 1500,\r\n        },\r\n      },\r\n      {\r\n        spell: SPELLS.CURSE_OF_EXHAUSTION,\r\n        category: Abilities.SPELL_CATEGORIES.UTILITY,\r\n        gcd: {\r\n          base: 1500,\r\n        },\r\n      },\r\n      {\r\n        spell: SPELLS.HEALTH_FUNNEL_CAST,\r\n        category: Abilities.SPELL_CATEGORIES.UTILITY,\r\n        gcd: {\r\n          base: 1500,\r\n        },\r\n      },\r\n      {\r\n        spell: [\r\n          SPELLS.SUMMON_IMP,\r\n          SPELLS.SUMMON_VOIDWALKER,\r\n          SPELLS.SUMMON_SUCCUBUS,\r\n          SPELLS.SUMMON_FELHUNTER,\r\n        ],\r\n        category: Abilities.SPELL_CATEGORIES.UTILITY,\r\n        gcd: {\r\n          base: 1500,\r\n        },\r\n      },\r\n      {\r\n        spell: SPELLS.SHADOWFURY,\r\n        category: Abilities.SPELL_CATEGORIES.UTILITY,\r\n        cooldown: combatant.hasTalent(SPELLS.DARKFURY_TALENT.id) ? 45 : 60,\r\n        gcd: {\r\n          base: 1500,\r\n        },\r\n      },\r\n      {\r\n        spell: SPELLS.FEL_DOMINATION,\r\n        category: Abilities.SPELL_CATEGORIES.UTILITY,\r\n        cooldown: combatant.hasConduitBySpellID(SPELLS.FEL_CELERITY.id) ? 180 - FEL_CELERITY_REDUCTION_SEC[combatant.conduitRankBySpellID(SPELLS.FEL_CELERITY.id)] : 180,\r\n        gcd: {\r\n          base: 1500,\r\n        },\r\n      },\r\n      {\r\n        spell: SPELLS.UNENDING_BREATH,\r\n        category: Abilities.SPELL_CATEGORIES.UTILITY,\r\n        gcd: {\r\n          base: 1500,\r\n        },\r\n      },\r\n      {\r\n        spell: SPELLS.HOWL_OF_TERROR_TALENT,\r\n        category: Abilities.SPELL_CATEGORIES.UTILITY,\r\n        enabled: combatant.hasTalent(SPELLS.HOWL_OF_TERROR_TALENT.id),\r\n        cooldown: 40,\r\n        gcd: {\r\n          base: 1500,\r\n        },\r\n      },\r\n    ];\r\n  }\r\n}\r\n\r\nexport default Abilities;\r\n","import React from 'react';\r\n\r\nimport CoreAlwaysBeCasting from 'parser/shared/modules/AlwaysBeCasting';\r\n\r\nimport SPELLS from 'common/SPELLS';\r\nimport { formatPercentage } from 'common/format';\r\nimport SpellLink from 'common/SpellLink';\r\n\r\nimport Statistic from 'interface/statistics/Statistic';\r\nimport Gauge from 'interface/statistics/components/Gauge';\r\nimport STATISTIC_ORDER from 'interface/others/STATISTIC_ORDER';\r\n\r\nimport { i18n } from '@lingui/core';\r\nimport { t } from '@lingui/macro';\r\n\r\nclass AlwaysBeCasting extends CoreAlwaysBeCasting {\r\n  get suggestionThresholds() {\r\n    return {\r\n      actual: this.downtimePercentage,\r\n      isGreaterThan: {\r\n        minor: 0.2,\r\n        average: 0.35,\r\n        major: 0.4,\r\n      },\r\n      style: 'percentage',\r\n    };\r\n  }\r\n\r\n  suggestions(when) {\r\n    when(this.suggestionThresholds)\r\n      .addSuggestion((suggest, actual, recommended) => suggest(<>Your downtime can be improved. Try to Always Be Casting (ABC), try to reduce the delay between casting spells. When you know you'll be moving, try to save <SpellLink id={SPELLS.CONFLAGRATE.id} /> or <SpellLink id={SPELLS.SHADOWBURN_TALENT.id} /> charges. Make good use of your <SpellLink id={SPELLS.DEMONIC_CIRCLE.id} /> or <SpellLink id={SPELLS.BURNING_RUSH_TALENT.id} /> when you can.</>)\r\n        .icon('spell_mage_altertime')\r\n        .actual(i18n._(t('warlock.destruction.suggestions.alwaysBeCasting.downtime')`${formatPercentage(actual)}% downtime`))\r\n        .recommended(`<${formatPercentage(recommended)}% is recommended`));\r\n  }\r\n\r\n  statistic() {\r\n    return (\r\n      <Statistic\r\n        position={STATISTIC_ORDER.CORE(2)}\r\n        tooltip={(\r\n          <>\r\n            Downtime is available time not used to cast anything (including not having your GCD rolling). This can be caused by delays between casting spells, latency, cast interrupting or just simply not casting anything (e.g. due to movement/stunned).<br />\r\n            <ul>\r\n              <li>You spent <strong>{formatPercentage(this.activeTimePercentage)}%</strong> of your time casting something.</li>\r\n              <li>You spent <strong>{formatPercentage(this.downtimePercentage)}%</strong> of your time casting nothing at all.</li>\r\n            </ul>\r\n          </>\r\n        )}\r\n      >\r\n        <div className=\"pad\">\r\n          <label>Active time</label>\r\n          <Gauge value={this.activeTimePercentage} />\r\n        </div>\r\n      </Statistic>\r\n    );\r\n  }\r\n}\r\n\r\nexport default AlwaysBeCasting;\r\n","import CoreCooldownThroughputTracker, { BUILT_IN_SUMMARY_TYPES } from 'parser/shared/modules/CooldownThroughputTracker';\r\n\r\nimport SPELLS from 'common/SPELLS';\r\n\r\nclass CooldownThroughputTracker extends CoreCooldownThroughputTracker {\r\n  static cooldownSpells = [\r\n    ...CoreCooldownThroughputTracker.cooldownSpells,\r\n    {\r\n      spell: SPELLS.DARK_SOUL_INSTABILITY_TALENT,\r\n      summary: [\r\n        BUILT_IN_SUMMARY_TYPES.DAMAGE,\r\n      ],\r\n    },\r\n  ];\r\n\r\n  static castCooldowns = [\r\n    ...CoreCooldownThroughputTracker.castCooldowns,\r\n    {\r\n      spell: SPELLS.HAVOC,\r\n      duration: 10,\r\n      summary: [\r\n        BUILT_IN_SUMMARY_TYPES.DAMAGE,\r\n      ],\r\n    },\r\n    {\r\n      spell: SPELLS.SUMMON_INFERNAL,\r\n      duration: 30,\r\n      summary: [\r\n        BUILT_IN_SUMMARY_TYPES.DAMAGE,\r\n      ],\r\n    },\r\n  ];\r\n}\r\n\r\nexport default CooldownThroughputTracker;\r\n","import React from 'react';\r\n\r\nimport Analyzer from 'parser/core/Analyzer';\r\nimport Enemies from 'parser/shared/modules/Enemies';\r\n\r\nimport SPELLS from 'common/SPELLS';\r\nimport SpellIcon from 'common/SpellIcon';\r\nimport SpellLink from 'common/SpellLink';\r\nimport { formatPercentage } from 'common/format';\r\n\r\nimport StatisticBar from 'interface/statistics/StatisticBar';\r\nimport UptimeBar from 'interface/statistics/components/UptimeBar';\r\nimport STATISTIC_ORDER from 'interface/others/STATISTIC_ORDER';\r\n\r\nimport { i18n } from '@lingui/core';\r\nimport { t } from '@lingui/macro';\r\n\r\nclass ImmolateUptime extends Analyzer {\r\n  get uptime() {\r\n    return this.enemies.getBuffUptime(SPELLS.IMMOLATE_DEBUFF.id) / this.owner.fightDuration;\r\n  }\r\n\r\n  get suggestionThresholds() {\r\n    return {\r\n      actual: this.uptime,\r\n      isLessThan: {\r\n        minor: 0.9,\r\n        average: 0.85,\r\n        major: 0.75,\r\n      },\r\n      style: 'percentage',\r\n    };\r\n  }\r\n\r\n  static dependencies = {\r\n    enemies: Enemies,\r\n  };\r\n\r\n  suggestions(when) {\r\n    when(this.suggestionThresholds)\r\n      .addSuggestion((suggest, actual, recommended) => suggest(<>Your <SpellLink id={SPELLS.IMMOLATE_DEBUFF.id} /> uptime can be improved. Try to pay more attention to it as it provides a significant amount of Soul Shard Fragments over the fight and is also a big portion of your total damage.</>)\r\n        .icon(SPELLS.IMMOLATE_DEBUFF.icon)\r\n        .actual(i18n._(t('warlock.destruction.suggestions.immolate.uptime')`${formatPercentage(actual)}% Immolate uptime`))\r\n        .recommended(`>${formatPercentage(recommended)}% is recommended`));\r\n  }\r\n\r\n  statistic() {\r\n    const history = this.enemies.getDebuffHistory(SPELLS.IMMOLATE_DEBUFF.id);\r\n    return (\r\n      <StatisticBar\r\n        wide\r\n        position={STATISTIC_ORDER.CORE(1)}\r\n      >\r\n        <div className=\"flex\">\r\n          <div className=\"flex-sub icon\">\r\n            <SpellIcon id={SPELLS.IMMOLATE.id} />\r\n          </div>\r\n          <div className=\"flex-sub value\">\r\n            {formatPercentage(this.uptime, 0)} % <small>uptime</small>\r\n          </div>\r\n          <div className=\"flex-main chart\" style={{ padding: 15 }}>\r\n            <UptimeBar\r\n              uptimeHistory={history}\r\n              start={this.owner.fight.start_time}\r\n              end={this.owner.fight.end_time}\r\n              style={{ height: '100%' }}\r\n            />\r\n          </div>\r\n        </div>\r\n      </StatisticBar>\r\n    );\r\n  }\r\n}\r\n\r\nexport default ImmolateUptime;\r\n","import React from 'react';\r\n\r\nimport Analyzer, { SELECTED_PLAYER } from 'parser/core/Analyzer';\r\nimport Enemies from 'parser/shared/modules/Enemies';\r\nimport Events from 'parser/core/Events';\r\n\r\nimport SPELLS from 'common/SPELLS';\r\nimport { formatThousands, formatNumber, formatPercentage } from 'common/format';\r\n\r\nimport Statistic from 'interface/statistics/Statistic';\r\nimport BoringSpellValueText from 'interface/statistics/components/BoringSpellValueText';\r\nimport STATISTIC_ORDER from 'interface/others/STATISTIC_ORDER';\r\n\r\nclass Havoc extends Analyzer {\r\n  get dps() {\r\n    return this.damage / this.owner.fightDuration * 1000;\r\n  }\r\n\r\n  static dependencies = {\r\n    enemies: Enemies,\r\n  };\r\n  damage = 0;\r\n\r\n  constructor(...args) {\r\n    super(...args);\r\n    this.addEventListener(Events.damage.by(SELECTED_PLAYER), this.onDamage);\r\n  }\r\n\r\n  onDamage(event) {\r\n    const enemy = this.enemies.getEntity(event);\r\n    if (!enemy || !enemy.hasBuff(SPELLS.HAVOC.id, event.timestamp)) {\r\n      return;\r\n    }\r\n\r\n    this.damage += event.amount + (event.absorbed || 0);\r\n  }\r\n\r\n  // TODO: this could perhaps be reworked somehow to be more accurate but not sure how yet. Take it as a Havoc v1.0\r\n  statistic() {\r\n    if (this.damage === 0) {\r\n      return null;\r\n    }\r\n\r\n    return (\r\n      <Statistic\r\n        position={STATISTIC_ORDER.CORE(5)}\r\n        size=\"small\"\r\n        tooltip={(\r\n          <>\r\n            You cleaved {formatThousands(this.damage)} damage to targets afflicted by your Havoc.<br /><br />\r\n\r\n            Note: This number is probably higher than it should be, as it also counts the damage you did directly to the Havoc target (not just the cleaved damage).\r\n          </>\r\n        )}\r\n      >\r\n        <BoringSpellValueText spell={SPELLS.HAVOC}>\r\n          {formatNumber(this.dps)} DPS <small>{formatPercentage(this.owner.getPercentageOfTotalDamageDone(this.damage))} % of total</small>\r\n        </BoringSpellValueText>\r\n      </Statistic>\r\n    );\r\n  }\r\n}\r\n\r\nexport default Havoc;\r\n","import React from 'react';\r\n\r\nimport Analyzer, { SELECTED_PLAYER } from 'parser/core/Analyzer';\r\nimport Events from 'parser/core/Events';\r\nimport { encodeTargetString } from 'parser/shared/modules/EnemyInstances';\r\nimport Haste from 'parser/shared/modules/Haste';\r\n\r\nimport SPELLS from 'common/SPELLS';\r\n\r\nimport Statistic from 'interface/statistics/Statistic';\r\nimport BoringSpellValueText from 'interface/statistics/components/BoringSpellValueText';\r\nimport STATISTIC_ORDER from 'interface/others/STATISTIC_ORDER';\r\n\r\nconst BUFFER = 100;\r\nconst BASE_ROF_DURATION = 8000;\r\nconst debug = false;\r\n\r\n// Tries to estimate \"effectiveness\" of Rain of Fires - counting average targets hit by each RoF (unique targets hit)\r\nclass RainOfFire extends Analyzer {\r\n  get _expectedRoFduration() {\r\n    return BASE_ROF_DURATION / (1 + this.haste.current);\r\n  }\r\n\r\n  get averageTargetsHit() {\r\n    // first, maps the casts to the targets hit, resulting in array of array of strings\r\n    // [].concat(...array) just flattens it into single array of strings\r\n    const allTargetsHit = [].concat(...this.casts.map(cast => cast.targetsHit));\r\n    return (allTargetsHit.length / this.casts.length) || 0;\r\n  }\r\n\r\n  static dependencies = {\r\n    haste: Haste,\r\n  };\r\n  casts = [\r\n    /*\r\n      {\r\n        timestamp: number,\r\n        expectedEnd: number,\r\n        targetsHit: [string...],\r\n        periods: [number...],\r\n        lastTickTimestamp: number,\r\n      }\r\n     */\r\n  ];\r\n\r\n  constructor(...args) {\r\n    super(...args);\r\n    this.addEventListener(Events.cast.by(SELECTED_PLAYER).spell(SPELLS.RAIN_OF_FIRE_CAST), this.onRainCast);\r\n    this.addEventListener(Events.damage.by(SELECTED_PLAYER).spell(SPELLS.RAIN_OF_FIRE_DAMAGE), this.onRainDamage);\r\n  }\r\n\r\n  onRainCast(event) {\r\n    this.casts.push({\r\n      timestamp: event.timestamp,\r\n      expectedEnd: event.timestamp + this._expectedRoFduration,\r\n      targetsHit: [],\r\n      periods: [],\r\n      lastTickTimestamp: null,\r\n    });\r\n  }\r\n\r\n  onRainDamage(event) {\r\n    // filter ROF that should be still active\r\n    const filtered = this.casts.filter(cast => event.timestamp <= cast.expectedEnd + BUFFER);\r\n    const target = encodeTargetString(event.targetID, event.targetInstance);\r\n    if (filtered.length === 0) {\r\n      debug && this.log('Something weird happened, ROF damage without any ongoing casts', event);\r\n    } else if (filtered.length === 1) {\r\n      // single active ROF, attribute the targets hit to it\r\n      const cast = filtered[0];\r\n      const timeSinceLastTick = event.timestamp - (cast.lastTickTimestamp || cast.timestamp);\r\n      // damage events usually arrive at the same timestamp but there is a small window for lag\r\n      if (timeSinceLastTick > BUFFER) {\r\n        cast.periods.push(timeSinceLastTick);\r\n        cast.lastTickTimestamp = event.timestamp;\r\n      }\r\n      // mark target as hit by this ROF\r\n      if (!cast.targetsHit.includes(target)) {\r\n        cast.targetsHit.push(target);\r\n      }\r\n    } else {\r\n      // multiple ROFs active\r\n      // if any cast's last tick is within 100ms of current timestamp, it's probably still the same tick\r\n      const possibleCurrentTickCast = filtered.find(cast => event.timestamp <= cast.lastTickTimestamp + BUFFER);\r\n      if (possibleCurrentTickCast) {\r\n        if (!possibleCurrentTickCast.targetsHit.includes(target)) {\r\n          possibleCurrentTickCast.targetsHit.push(target);\r\n        }\r\n      } else {\r\n        // it's a \"fresh\" damage tick (first of them)\r\n        // need to find out which cast in `filtered` it \"belongs to\"\r\n        const sortedByDelta = filtered.map(cast => {\r\n          // for each filtered ROF, get timestamp of next expected tick and get time difference from it and current timestamp\r\n          const expectedTick = (cast.lastTickTimestamp || cast.timestamp) + this._getAveragePeriod(cast);\r\n          const delta = Math.abs(expectedTick - event.timestamp);\r\n          return {\r\n            cast,\r\n            delta,\r\n            expectedTick,\r\n          };\r\n        }).sort((cast1, cast2) => cast1.delta - cast2.delta); // sort ascending, cast with lowest difference is in [0]\r\n        const closest = sortedByDelta[0].cast;\r\n        const timeSinceLastTick = event.timestamp - (closest.lastTickTimestamp || closest.timestamp);\r\n        closest.periods.push(timeSinceLastTick);\r\n        closest.lastTickTimestamp = event.timestamp;\r\n        if (!closest.targetsHit.includes(target)) {\r\n          closest.targetsHit.push(target);\r\n        }\r\n      }\r\n    }\r\n  }\r\n\r\n  _getAveragePeriod(cast) {\r\n    // gets average period of cast of Rain of Fire, or estimates one from the duration of Rain of Fire (it should always tick 8 times)\r\n    if (cast.periods.length > 0) {\r\n      return (cast.periods.reduce((total, current) => total + current, 0) / cast.periods.length) || 0;\r\n    }\r\n    return (cast.expectedEnd - cast.timestamp) / 8;\r\n  }\r\n\r\n  statistic() {\r\n    // there's no point in showing the statistic on single target fight with no ROF casts\r\n    if (this.casts.length === 0) {\r\n      return null;\r\n    }\r\n    return (\r\n      <Statistic\r\n        position={STATISTIC_ORDER.CORE(6)}\r\n        size=\"small\"\r\n        tooltip=\"There's a possibility of a mistake in assigning targets hit to individual casts, when there are multiple Rains of Fire overlapping.\"\r\n      >\r\n        <BoringSpellValueText spell={SPELLS.RAIN_OF_FIRE_CAST}>\r\n          {this.averageTargetsHit.toFixed(2)} <small>average targets hit</small>\r\n        </BoringSpellValueText>\r\n      </Statistic>\r\n    );\r\n  }\r\n}\r\n\r\nexport default RainOfFire;\r\n","import React from 'react';\r\n\r\nimport Analyzer, { SELECTED_PLAYER } from 'parser/core/Analyzer';\r\nimport Events from 'parser/core/Events';\r\n\r\nimport SPELLS from 'common/SPELLS';\r\nimport SpellLink from 'common/SpellLink';\r\n\r\nimport Statistic from 'interface/statistics/Statistic';\r\nimport BoringSpellValueText from 'interface/statistics/components/BoringSpellValueText';\r\nimport STATISTIC_ORDER from 'interface/others/STATISTIC_ORDER';\r\n\r\nimport { i18n } from '@lingui/core';\r\nimport { t } from '@lingui/macro';\r\n\r\nconst debug = false;\r\n\r\nconst BUFF_DURATION = 10000;\r\n// haven't yet found out if it's exactly 10 second delay between application and removal of the buff (or is it few ms earlier), might need to tweak with that to be accurate\r\nconst REMOVEBUFF_TOLERANCE = 20;\r\n\r\nclass Backdraft extends Analyzer {\r\n  get suggestionThresholds() {\r\n    const wastedStacksPerMinute = this.wastedStacks / this.owner.fightDuration * 1000 * 60;\r\n    return {\r\n      actual: wastedStacksPerMinute,\r\n      isGreaterThan: {\r\n        minor: 1,\r\n        average: 1.5,\r\n        major: 2,\r\n      },\r\n      style: 'number',\r\n    };\r\n  }\r\n\r\n  _maxStacks = 2;\r\n  _stacksPerApplication = 1;\r\n  _currentStacks = 0;\r\n  _expectedBuffEnd = 0;\r\n  wastedStacks = 0;\r\n\r\n  constructor(...args) {\r\n    super(...args);\r\n    this._maxStacks = this.selectedCombatant.hasTalent(SPELLS.FLASHOVER_TALENT.id) ? 4 : 2;\r\n    this._stacksPerApplication = this.selectedCombatant.hasTalent(SPELLS.FLASHOVER_TALENT.id) ? 2 : 1;\r\n\r\n    this.addEventListener(Events.cast.by(SELECTED_PLAYER).spell(SPELLS.CONFLAGRATE), this.onConflagrateCast);\r\n    this.addEventListener(Events.removebuffstack.by(SELECTED_PLAYER).spell(SPELLS.BACKDRAFT), this.onBackdraftRemoveStack);\r\n    this.addEventListener(Events.removebuff.by(SELECTED_PLAYER).spell(SPELLS.BACKDRAFT), this.onBackdraftRemove);\r\n  }\r\n\r\n  onConflagrateCast(event) {\r\n    this._currentStacks += this._stacksPerApplication;\r\n    if (this._currentStacks > this._maxStacks) {\r\n      debug && console.log('backdraft stack waste at ', event.timestamp);\r\n      this.wastedStacks += this._currentStacks - this._maxStacks;\r\n      this._currentStacks = this._maxStacks;\r\n    }\r\n    this._expectedBuffEnd = event.timestamp + BUFF_DURATION;\r\n  }\r\n\r\n  onBackdraftRemoveStack() {\r\n    this._currentStacks -= 1;\r\n  }\r\n\r\n  onBackdraftRemove(event) {\r\n    if (event.timestamp >= this._expectedBuffEnd - REMOVEBUFF_TOLERANCE) {\r\n      // if the buff expired when it \"should\", we wasted some stacks\r\n      debug && console.log('backdraft stack waste at ', event.timestamp);\r\n      this.wastedStacks += this._currentStacks;\r\n    }\r\n    this._currentStacks = 0;\r\n  }\r\n\r\n  suggestions(when) {\r\n    when(this.suggestionThresholds)\r\n      .addSuggestion((suggest, actual, recommended) => suggest(<>You should use your <SpellLink id={SPELLS.BACKDRAFT.id} /> stacks more. You have wasted {this.wastedStacks} stacks this fight.</>)\r\n        .icon(SPELLS.BACKDRAFT.icon)\r\n        .actual(i18n._(t('warlock.destruction.suggestions.backdraft.wastedPerMinute')`${actual.toFixed(2)} wasted Backdraft stacks per minute`))\r\n        .recommended(`< ${recommended} is recommended`));\r\n  }\r\n\r\n  statistic() {\r\n    return (\r\n      <Statistic\r\n        size=\"small\"\r\n        position={STATISTIC_ORDER.CORE(4)}\r\n      >\r\n        <BoringSpellValueText spell={SPELLS.BACKDRAFT}>\r\n          {this.wastedStacks} <small>Wasted procs</small>\r\n        </BoringSpellValueText>\r\n      </Statistic>\r\n    );\r\n  }\r\n}\r\n\r\nexport default Backdraft;\r\n","import ResourceTracker from 'parser/shared/modules/resources/resourcetracker/ResourceTracker';\r\nimport HIT_TYPES from 'game/HIT_TYPES';\r\nimport Enemies from 'parser/shared/modules/Enemies';\r\nimport EventFilter, { SELECTED_PLAYER } from 'parser/core/EventFilter';\r\n\r\nimport SPELLS from 'common/SPELLS';\r\nimport RESOURCE_TYPES from 'game/RESOURCE_TYPES';\r\nimport Events from 'parser/core/Events';\r\n\r\nconst debug = false;\r\n\r\nconst DAMAGE_GENERATORS = {\r\n  [SPELLS.IMMOLATE_DEBUFF.id]: () => 1, // has 50% chance of additional fragment on crit\r\n  [SPELLS.CONFLAGRATE.id]: () => 5,\r\n  [SPELLS.SHADOWBURN_TALENT.id]: () => 3,\r\n  [SPELLS.INCINERATE.id]: event => (event.hitType === HIT_TYPES.CRIT) ? 1 : 0,\r\n};\r\n\r\nconst IMMO_PROB = 0.5;\r\nconst ROF_PROB = 0.2;\r\nconst INFERNAL_DURATION = 30000;\r\nconst INFERNAL_FRAGMENT_TICK_PERIOD = 500;\r\nconst FULL_SHARD_GAINED_EVENT_TYPE = 'fullshardgained';\r\n\r\nclass SoulShardTracker extends ResourceTracker {\r\n  static get fullshardgained() {\r\n    return new EventFilter(FULL_SHARD_GAINED_EVENT_TYPE);\r\n  }\r\n\r\n  static dependencies = {\r\n    ...ResourceTracker.dependencies,\r\n    enemies: Enemies,\r\n  };\r\n  lastInfernalSummon = null;\r\n  lastInfernalTick = null;\r\n  immolateCrits = 0;\r\n  rainOfFireHits = 0;\r\n  hasInferno = false;\r\n\r\n  constructor(...args) {\r\n    super(...args);\r\n    // a copy of the object since I don't want to change it in the Events tab, only in the Resource tab\r\n    this.resource = Object.assign({}, RESOURCE_TYPES.SOUL_SHARDS);\r\n    this.resource.name = 'Soul Shard Fragments';\r\n    this.current = 30;\r\n    this.hasInferno = this.selectedCombatant.hasTalent(SPELLS.INFERNO_TALENT.id);\r\n    this.addEventListener(Events.damage.by(SELECTED_PLAYER), this.onDamage);\r\n    this.addEventListener(Events.any, this.onEvent);\r\n    this.addEventListener(Events.fightend, this.onFightend);\r\n  }\r\n\r\n  // this accounts for Soul Conduit and possibly Feretory of Souls (they grant whole Soul Shards and appear as energize events, but their resourceChange field is in values 0 - 5 and we want 0 - 50\r\n  onEnergize(event) {\r\n    if (event.resourceChangeType !== this.resource.id) {\r\n      return;\r\n    }\r\n    if (event.resourceChange < 10) {\r\n      event.resourceChange = event.resourceChange * 10;\r\n    }\r\n    super.onEnergize(event);\r\n  }\r\n\r\n  onCast(event) {\r\n    const spellId = event.ability.guid;\r\n    if (spellId === SPELLS.SOUL_FIRE_TALENT.id) {\r\n      this.processInvisibleEnergize(spellId, 4);\r\n    } else if (spellId === SPELLS.INCINERATE.id) {\r\n      // Incinerate generates 2 fragments on cast (and another one if it crits, handled further down)\r\n      this.processInvisibleEnergize(spellId, 2);\r\n    } else if (this.shouldProcessCastEvent(event)) {\r\n      const eventResource = this.getResource(event);\r\n      // eventResource.amount has correct amount of fragments *before* the cast\r\n      // if this is larger than the fragments currently tracked, then some random fragment generation must have happened since last cast till this cast\r\n      debug && console.log(`Fragments from event before cast: ${eventResource.amount}, currently tracked fragments: ${this.current}`);\r\n      // before processing the spender, synchronize fragments to account for random procs\r\n      if (eventResource.amount > this.current) {\r\n        const missingFragments = eventResource.amount - this.current;\r\n        debug && console.log(`Missing ${missingFragments} fragments, Immolate critted ${this.immolateCrits}x, Rain of Fire hit ${this.rainOfFireHits}x`);\r\n        if (!this.hasInferno) {\r\n          // if we're not running Inferno, there's no other way to get random fragments than Immolate\r\n          // ... or it's some kind of Infernal shenanigan again, we can't account more fragments than there were events possibly causing them\r\n          debug && console.log(`Adding ${Math.min(missingFragments, this.immolateCrits)} fragments to Immolate`);\r\n          this.processInvisibleEnergize(SPELLS.IMMOLATE_DEBUFF.id, Math.min(missingFragments, this.immolateCrits));\r\n        } else {\r\n          const distribution = this._getRandomFragmentDistribution(this.immolateCrits, this.rainOfFireHits, missingFragments);\r\n          const actualImmolate = Math.min(distribution.immolate, this.immolateCrits);\r\n          const actualRain = Math.min(distribution.rainOfFire, this.rainOfFireHits);\r\n          debug && console.log(`Adding ${actualImmolate} to Immolate, ${actualRain} to Rain of Fire`);\r\n          if (actualImmolate > 0) {\r\n            // so we don't get \"empty\" energizes, meaning 0 generated, 0 wasted but still 1 cast\r\n            this.processInvisibleEnergize(SPELLS.IMMOLATE_DEBUFF.id, actualImmolate);\r\n          }\r\n          if (actualRain > 0) {\r\n            this.processInvisibleEnergize(SPELLS.RAIN_OF_FIRE_DAMAGE.id, actualRain);\r\n          }\r\n        }\r\n      }\r\n      // reset the counters\r\n      this.immolateCrits = 0;\r\n      this.rainOfFireHits = 0;\r\n      // actually process the spender with super.on_by_player_cast()\r\n    }\r\n\r\n    super.onCast(event);\r\n  }\r\n\r\n  onEvent(event) {\r\n    // after summoning Infernal (after Infernal Awakening), it generates 1 fragment every 0.5 seconds for 30 seconds\r\n    // theoretically accurate, practically it messes up the fragment generation a lot\r\n    // (but it's a lot worse without it, so I decided to go with the lesser of two evils since this way of generating fragments isn't tied to any kind of event)\r\n    const timestamp = (event && event.timestamp) || this.owner.currentTimestamp;\r\n    if (this._hasInfernal(timestamp) && this._infernalTicked(timestamp)) {\r\n      this.processInvisibleEnergize(SPELLS.SUMMON_INFERNAL.id, 1);\r\n      this.lastInfernalTick = timestamp;\r\n    }\r\n  }\r\n\r\n  onDamage(event) {\r\n    const spellId = event.ability.guid;\r\n    if (spellId === SPELLS.INFERNAL_AWAKENING.id) {\r\n      this.lastInfernalSummon = event.timestamp;\r\n      this.lastInfernalTick = event.timestamp;\r\n    }\r\n\r\n    if (DAMAGE_GENERATORS[spellId] && DAMAGE_GENERATORS[spellId](event) > 0) {\r\n      this.processInvisibleEnergize(spellId, DAMAGE_GENERATORS[spellId](event));\r\n    }\r\n\r\n    if (spellId === SPELLS.IMMOLATE_DEBUFF.id && event.hitType === HIT_TYPES.CRIT) {\r\n      this.immolateCrits += 1;\r\n    } else if (this.hasInferno && spellId === SPELLS.RAIN_OF_FIRE_DAMAGE.id) {\r\n      this.rainOfFireHits += 1;\r\n    }\r\n  }\r\n\r\n  onFightend() {\r\n    // after the fight has finished, try to redistribute the missing fragments\r\n    const missingFragments = this.spent - this.generated;\r\n    if (missingFragments <= 0) {\r\n      return;\r\n    }\r\n    const distribution = this._getRandomFragmentDistribution(this.immolateCrits, this.rainOfFireHits, missingFragments);\r\n    debug && console.log(`At the end of fight, missing ${missingFragments} fragments, redistributed ${distribution.immolate} to Immolate, ${distribution.rainOfFire} to Rain of Fire`);\r\n    // with all the other balancing, it shouldn't probably be possible to give more shards than is the maximum\r\n    this.processInvisibleEnergize(SPELLS.IMMOLATE_DEBUFF.id, distribution.immolate);\r\n    if (this.hasInferno) {\r\n      // makes no sense to even show this if the player doesn't have Inferno\r\n      this.processInvisibleEnergize(SPELLS.RAIN_OF_FIRE_DAMAGE.id, distribution.rainOfFire);\r\n    }\r\n  }\r\n\r\n  _applyBuilder(spellId, resource, gain, waste) {\r\n    const beforeBuilder = this.current % 10;\r\n    super._applyBuilder(spellId, resource, gain, waste);\r\n    const afterBuilder = this.current % 10;\r\n    // for trait Chaos Shards we need to know when we generated a full Shard\r\n    // can be either to full shard (39 => 40, beforebuilder = 9, afterBuilder = 0)\r\n    // or over full shard (39 => 41, before = 9, after = 1)\r\n    // but not something like 34 => 39, before = 4, after = 9\r\n    // also, Chaos Shards can't proc off itself\r\n    if (beforeBuilder > afterBuilder) {\r\n      this.eventEmitter.fabricateEvent({\r\n        timestamp: this.owner.currentTimestamp,\r\n        type: FULL_SHARD_GAINED_EVENT_TYPE,\r\n        current: this.current,\r\n      });\r\n    }\r\n  }\r\n\r\n  _hasInfernal(timestamp) {\r\n    return (this.lastInfernalSummon !== undefined) && (timestamp < this.lastInfernalSummon + INFERNAL_DURATION);\r\n  }\r\n\r\n  _infernalTicked(timestamp) {\r\n    return (this.lastInfernalTick !== undefined) && (timestamp > this.lastInfernalTick + INFERNAL_FRAGMENT_TICK_PERIOD);\r\n  }\r\n\r\n  _getRandomFragmentDistribution(immolateCrits, rainOfFireHits, totalFragments) {\r\n    /*\r\n        This function tries to \"distribute\" totalFragments into 2 possible sources:\r\n          - Immolate crits\r\n          - Rain of Fire hits (with the Inferno talent)\r\n\r\n        A little background info to make things clear:\r\n          - Immolate crits have a 50% chance to generate an extra fragment\r\n          - when the player has the Inferno talent, Rain of Fire hits have a 20% chance to generate a fragment\r\n          - both the number of crits/hits, and the probability itself increase the probability of a certain fragment belonging to one of the sources\r\n\r\n        With variables named:\r\n          - Pi, Pr = probabilities for the fragment generation (for Immolate and Rain of Fire respectively)\r\n          - ni, nr = amount of events capable of generating the fragments (immolateCrits and rainOfFireHits)\r\n          - i, r = estimated amount of fragments from each source\r\n          - T = total number of fragments we're trying to distribute (totalFragments)\r\n\r\n        We can make 2 equations that should reasonably accurately distribute the fragments:\r\n        1) the estimated fragments should have the same ratio as the \"statistically expected\" ones\r\n            (Pi * ni) / (Pr * nr) = i / r\r\n        2) estimated fragments from both sources sum up to the total fragments generated\r\n            i + r = T\r\n\r\n        If we substitute r = T - i, and solve for i, we get:\r\n          i = (Pi * ni * T) / (Pi * ni + Pr * nr)\r\n          r = T - i\r\n     */\r\n    const denominator = (IMMO_PROB * immolateCrits + ROF_PROB * rainOfFireHits) || 1; // to avoid division by zero, if immolateCrits is 0, then 0 / 1 is still 0\r\n    const i = Math.round((IMMO_PROB * immolateCrits * totalFragments) / denominator);\r\n    const r = totalFragments - i;\r\n    // known caveat - presumably Summon Infernal can mess up the shard tracking so that this function gets called with 0 Immolate crits and 0 Rain of Fire hits, but nonzero fragments\r\n    // this results in them being accounted to Rain of Fire (which is caught outside of the function though)\r\n    return {\r\n      immolate: i,\r\n      rainOfFire: r,\r\n    };\r\n  }\r\n}\r\n\r\nexport default SoulShardTracker;\r\n","import React from 'react';\r\n\r\nimport Analyzer from 'parser/core/Analyzer';\r\nimport ResourceBreakdown from 'parser/shared/modules/resources/resourcetracker/ResourceBreakdown';\r\n\r\nimport SPELLS from 'common/SPELLS';\r\n\r\nimport Panel from 'interface/others/Panel';\r\nimport Warning from 'interface/Alert/Warning';\r\nimport STATISTIC_ORDER from 'interface/others/STATISTIC_ORDER';\r\nimport Statistic from 'interface/statistics/Statistic';\r\nimport BoringSpellValueText from 'interface/statistics/components/BoringSpellValueText';\r\n\r\nimport { i18n } from '@lingui/core';\r\nimport { t } from '@lingui/macro';\r\n\r\nimport 'parser/warlock/shared/modules/soulshards/SoulShardDetails.css';\r\nimport SoulShardTracker from './SoulShardTracker';\r\n\r\nclass SoulShardDetails extends Analyzer {\r\n  get suggestionThresholds() {\r\n    const fragmentsWasted = this.soulShardTracker.wasted;\r\n    const fragmentsWastedPerMinute = (fragmentsWasted / this.owner.fightDuration) * 1000 * 60;\r\n\r\n    // Shards wasted for Destro are much more strict because the shard generation in Destro is much more reliable and less random, so there should be almost no wasted shards (if so, it's your own fault, not RNG)\r\n    return {\r\n      actual: fragmentsWastedPerMinute,\r\n      isGreaterThan: {\r\n        minor: 1, // 1 fragment per minute (1 shard in 10 minutes)\r\n        average: 3, // 3 fragments per minute (3 shards in 10 minutes)\r\n        major: 5, // 5 fragments per minute (5 shards in 10 minutes)\r\n      },\r\n      style: 'number',\r\n    };\r\n  }\r\n\r\n  static dependencies = {\r\n    soulShardTracker: SoulShardTracker,\r\n  };\r\n\r\n  suggestions(when) {\r\n    const fragmentsWasted = this.soulShardTracker.wasted;\r\n    when(this.suggestionThresholds)\r\n      .addSuggestion((suggest, actual, recommended) => suggest('You are wasting Soul Shards. Try to use them and not let them cap and go to waste unless you\\'re preparing for bursting adds etc.')\r\n        .icon(SPELLS.SOUL_SHARDS.icon)\r\n        .actual(i18n._(t('warlock.destruction.suggestions.soulShard.wastedPerMinute')`${fragmentsWasted} Soul Shard Fragments wasted (${actual.toFixed(2)} per minute)`))\r\n        .recommended(`< ${recommended} Soul Shard Fragments per minute wasted are recommended`));\r\n  }\r\n\r\n  statistic() {\r\n    const shardsWasted = this.soulShardTracker.wasted;\r\n    return (\r\n      <Statistic\r\n        position={STATISTIC_ORDER.CORE(3)}\r\n        size=\"flexible\"\r\n        tooltip={(<>In order for Focus Magic to compete with the other talents on that row, you need to ensure you are getting as much uptime out of the buff as possible. Therefore, if you forget to put the buff on another player or if they player you gave it to is not getting crits very often, then you might need to consider giving the buff to someone else. Ideally, you should aim to trade buffs with another mage who has also taken Focus Magic so you both get the full benefit.</>)}\r\n      >\r\n        <BoringSpellValueText spell={SPELLS.SOUL_SHARDS}>\r\n          {shardsWasted} <small>Wasted Soul Shards</small>\r\n        </BoringSpellValueText>\r\n      </Statistic>\r\n    );\r\n  }\r\n\r\n  tab() {\r\n    return {\r\n      title: 'Soul Shard usage',\r\n      url: 'soul-shards',\r\n      render: () => (\r\n        <Panel>\r\n          <Warning style={{ marginLeft: 0, marginRight: 0 }}>\r\n            Due to the technical limitations and randomness of Immolate{(this.selectedCombatant.hasTalent(SPELLS.INFERNO_TALENT.id)) ? ' and Rain of Fire with Inferno talent' : ''}, we can't accurately determine the amount of generated Soul Shard Fragments, but we tried to estimate the amount of random fragments and count them in. <br />\r\n            Summon Infernal also has a very inconsistent shard generation which might mess up the tracking as well. Take this tab with a grain of salt.\r\n          </Warning>\r\n          <ResourceBreakdown\r\n            tracker={this.soulShardTracker}\r\n            showSpenders\r\n          />\r\n        </Panel>\r\n      ),\r\n    };\r\n  }\r\n}\r\n\r\nexport default SoulShardDetails;\r\n","import React from 'react';\r\n\r\nimport Analyzer, { SELECTED_PLAYER } from 'parser/core/Analyzer';\r\nimport Enemies from 'parser/shared/modules/Enemies';\r\nimport Events from 'parser/core/Events';\r\nimport calculateEffectiveDamage from 'parser/core/calculateEffectiveDamage';\r\n\r\nimport SPELLS from 'common/SPELLS';\r\nimport SpellLink from 'common/SpellLink';\r\nimport { formatPercentage, formatThousands, formatNumber } from 'common/format';\r\nimport { TooltipElement } from 'common/Tooltip';\r\n\r\nimport Statistic from 'interface/statistics/Statistic';\r\nimport BoringSpellValueText from 'interface/statistics/components/BoringSpellValueText';\r\nimport UptimeIcon from 'interface/icons/Uptime';\r\nimport STATISTIC_CATEGORY from 'interface/others/STATISTIC_CATEGORY';\r\n\r\nimport { i18n } from '@lingui/core';\r\nimport { t } from '@lingui/macro';\r\n\r\nconst MAX_TRAVEL_TIME = 3000; // Chaos Bolt being the slowest, takes around 2 seconds to land from max range, added a second to account for maybe target movement?\r\nconst ERADICATION_DAMAGE_BONUS = 0.1;\r\nconst debug = false;\r\n\r\n/*\r\n  Eradication - Chaos Bolt increases the damage you deal to the target by 10% for 7 sec\r\n */\r\nclass Eradication extends Analyzer {\r\n  get uptime() {\r\n    return this.enemies.getBuffUptime(SPELLS.ERADICATION_DEBUFF.id) / this.owner.fightDuration;\r\n  }\r\n\r\n  get CBpercentage() {\r\n    return (this._buffedCB / this._totalCB) || 0;\r\n  }\r\n\r\n  get suggestionThresholds() {\r\n    return {\r\n      actual: this.uptime,\r\n      isLessThan: {\r\n        minor: 0.7,\r\n        average: 0.65,\r\n        major: 0.55,\r\n      },\r\n      style: 'percentage',\r\n    };\r\n  }\r\n\r\n  get dps() {\r\n    return this.bonusDmg / this.owner.fightDuration * 1000;\r\n  }\r\n\r\n  static dependencies = {\r\n    enemies: Enemies,\r\n  };\r\n  _buffedCB = 0;\r\n  _totalCB = 0;\r\n  bonusDmg = 0;\r\n  // queues spells CAST with target having Eradication (except DoTs)\r\n  queue = [\r\n    /*\r\n    {\r\n      timestamp\r\n      spellId\r\n      targetID\r\n      targetInstance\r\n    }\r\n     */\r\n  ];\r\n\r\n  constructor(...args) {\r\n    super(...args);\r\n    this.active = this.selectedCombatant.hasTalent(SPELLS.ERADICATION_TALENT.id);\r\n    this.addEventListener(Events.cast.by(SELECTED_PLAYER).spell([SPELLS.INCINERATE, SPELLS.CHAOS_BOLT]), this.onTravelSpellCast);\r\n    this.addEventListener(Events.damage.by(SELECTED_PLAYER), this.onDamage);\r\n  }\r\n\r\n  onTravelSpellCast(event) {\r\n    const spellId = event.ability.guid;\r\n    const enemy = this.enemies.getEntity(event);\r\n    if (!enemy || !enemy.hasBuff(SPELLS.ERADICATION_DEBUFF.id, event.timestamp)) {\r\n      return;\r\n    }\r\n    this.queue.push({\r\n      timestamp: event.timestamp,\r\n      spellId: spellId,\r\n      targetID: event.targetID,\r\n      targetInstance: event.targetInstance,\r\n    });\r\n    debug && console.log('Pushed a buffed cast into queue', JSON.parse(JSON.stringify(this.queue)));\r\n  }\r\n\r\n  onDamage(event) {\r\n    const spellId = event.ability.guid;\r\n    if (spellId === SPELLS.INCINERATE.id || spellId === SPELLS.CHAOS_BOLT.id) {\r\n      this._handleTravelSpellDamage(event);\r\n      return;\r\n    }\r\n\r\n    const enemy = this.enemies.getEntity(event);\r\n    if (!enemy || !enemy.hasBuff(SPELLS.ERADICATION_DEBUFF.id, event.timestamp)) {\r\n      return;\r\n    }\r\n\r\n    this.bonusDmg += calculateEffectiveDamage(event, ERADICATION_DAMAGE_BONUS);\r\n  }\r\n\r\n  _handleTravelSpellDamage(event) {\r\n    if (event.ability.guid === SPELLS.CHAOS_BOLT.id) {\r\n      this._totalCB += 1;\r\n    }\r\n    // first filter out old casts (could happen if player would cast something on a target and BEFORE it hits, it would die - then it couldn't be paired)\r\n    this.queue = this.queue.filter(cast => cast.timestamp > (event.timestamp - MAX_TRAVEL_TIME));\r\n    // try pairing damage event with casts in this.queue\r\n    const castIndex = this.queue.findIndex(queuedCast => queuedCast.targetID === event.targetID\r\n      && queuedCast.targetInstance === event.targetInstance\r\n      && queuedCast.spellId === event.ability.guid);\r\n    if (castIndex === -1) {\r\n      debug && console.log(`(${this.owner.formatTimestamp(event.timestamp, 3)}) Encountered damage event with no buffed cast associated, queue:`, JSON.parse(JSON.stringify(this.queue)), 'event', event);\r\n      return;\r\n    }\r\n\r\n    debug && console.log('Paired damage event', event, 'with queued cast', JSON.parse(JSON.stringify(this.queue[castIndex])));\r\n    if (event.ability.guid === SPELLS.CHAOS_BOLT.id) {\r\n      this._buffedCB += 1;\r\n    }\r\n    this.bonusDmg += calculateEffectiveDamage(event, ERADICATION_DAMAGE_BONUS);\r\n    this.queue.splice(castIndex, 1);\r\n  }\r\n\r\n  suggestions(when) {\r\n    when(this.suggestionThresholds)\r\n      .addSuggestion((suggest, actual, recommended) => suggest(<>Your uptime on the <SpellLink id={SPELLS.ERADICATION_DEBUFF.id} /> debuff could be improved. You should try to spread out your <SpellLink id={SPELLS.CHAOS_BOLT.id} /> casts more for higher uptime.<br /><small><em>NOTE:</em> Uptime may vary based on the encounter.</small></>)\r\n        .icon(SPELLS.ERADICATION_TALENT.icon)\r\n        .actual(i18n._(t('warlock.destruction.suggestions.eradication.uptime')`${formatPercentage(actual)}% Eradication uptime`))\r\n        .recommended(`>${formatPercentage(recommended)}% is recommended`));\r\n  }\r\n\r\n  statistic() {\r\n    return (\r\n      <Statistic\r\n        category={STATISTIC_CATEGORY.TALENTS}\r\n        size=\"flexible\"\r\n        tooltip={`Bonus damage: ${formatThousands(this.bonusDmg)}`}\r\n      >\r\n        <BoringSpellValueText spell={SPELLS.ERADICATION_TALENT}>\r\n          {formatNumber(this.dps)} DPS <small>{formatPercentage(this.owner.getPercentageOfTotalDamageDone(this.bonusDmg))} % of total</small> <br />\r\n          <UptimeIcon /> {formatPercentage(this.uptime, 0)} % <small>uptime</small> <br />\r\n          {formatPercentage(this.CBpercentage, 0)} %\r\n          <TooltipElement content={`${this._buffedCB} / ${this._totalCB} Chaos Bolts`}>\r\n            <small>buffed Chaos Bolts <sup>*</sup></small>\r\n          </TooltipElement>\r\n        </BoringSpellValueText>\r\n      </Statistic>\r\n    );\r\n  }\r\n}\r\n\r\nexport default Eradication;\r\n","import React from 'react';\r\nimport PropTypes from 'prop-types';\r\n\r\nimport SpellLink from 'common/SpellLink';\r\nimport SPELLS from 'common/SPELLS';\r\n\r\nimport Checklist from 'parser/shared/modules/features/Checklist';\r\nimport Rule from 'parser/shared/modules/features/Checklist/Rule';\r\nimport Requirement from 'parser/shared/modules/features/Checklist/Requirement';\r\nimport PreparationRule from 'parser/shared/modules/features/Checklist/PreparationRule';\r\nimport GenericCastEfficiencyRequirement from 'parser/shared/modules/features/Checklist/GenericCastEfficiencyRequirement';\r\n\r\nconst DestructionWarlockChecklist = ({ combatant, castEfficiency, thresholds, shardTracker }) => {\r\n  const AbilityRequirement = props => (\r\n    <GenericCastEfficiencyRequirement\r\n      castEfficiency={castEfficiency.getCastEfficiencyForSpellId(props.spell)}\r\n      {...props}\r\n    />\r\n  );\r\n  AbilityRequirement.propTypes = {\r\n    spell: PropTypes.number.isRequired,\r\n  };\r\n\r\n  return (\r\n    <Checklist>\r\n      <Rule\r\n        name=\"Use your core spells\"\r\n        description={(\r\n          <>\r\n            Destruction Warlocks have a simple rotation core. Maintain your <SpellLink id={SPELLS.IMMOLATE.id} /> on all enemies if possible, don't waste your <SpellLink id={SPELLS.CONFLAGRATE.id} /> and <SpellLink id={SPELLS.BACKDRAFT.id} /> stacks. Use <SpellLink id={SPELLS.HAVOC.id} /> whenever there's something else to cleave.\r\n          </>\r\n        )}\r\n      >\r\n        <Requirement\r\n          name={<><SpellLink id={SPELLS.IMMOLATE.id} /> uptime</>}\r\n          thresholds={thresholds.immolate}\r\n        />\r\n        <AbilityRequirement spell={SPELLS.CONFLAGRATE.id} />\r\n        <Requirement\r\n          name={<>Wasted <SpellLink id={SPELLS.BACKDRAFT.id} /> stacks per minute</>}\r\n          thresholds={thresholds.wastedBackdraft}\r\n        />\r\n      </Rule>\r\n      <Rule\r\n        name=\"Don't cap your Soul Shard Fragments\"\r\n        description=\"Soul Shards are your most important resource and since you are in control of their generation, it's very important to plan your rotation and not let them cap.\"\r\n      >\r\n        <Requirement\r\n          name=\"Wasted fragments per minute\"\r\n          thresholds={thresholds.soulShards}\r\n          valueTooltip={`You wasted ${shardTracker.wasted} fragments.`}\r\n        />\r\n      </Rule>\r\n      <Rule\r\n        name=\"Use your cooldowns and talents\"\r\n        description=\"Be mindful of your talent choices and use them when it's appropriate. It's okay to hold on a cooldown for a little bit when the encounter requires it (burn phases or priority targets), but generally speaking you should use them as much as you can.\"\r\n      >\r\n        {combatant.hasTalent(SPELLS.ERADICATION_TALENT.id) && (\r\n          <Requirement\r\n            name={<><SpellLink id={SPELLS.ERADICATION_TALENT.id} /> uptime</>}\r\n            thresholds={thresholds.eradication}\r\n          />\r\n        )}\r\n        {combatant.hasTalent(SPELLS.SHADOWBURN_TALENT.id) && <AbilityRequirement spell={SPELLS.SHADOWBURN_TALENT.id} />}\r\n        {combatant.hasTalent(SPELLS.CATACLYSM_TALENT.id) && <AbilityRequirement spell={SPELLS.CATACLYSM_TALENT.id} />}\r\n        {combatant.hasTalent(SPELLS.CHANNEL_DEMONFIRE_TALENT.id) && <AbilityRequirement spell={SPELLS.CHANNEL_DEMONFIRE_TALENT.id} />}\r\n        {combatant.hasTalent(SPELLS.SOUL_FIRE_TALENT.id) && <AbilityRequirement spell={SPELLS.SOUL_FIRE_TALENT.id} />}\r\n        <AbilityRequirement spell={SPELLS.SUMMON_INFERNAL.id} />\r\n        {combatant.hasTalent(SPELLS.DARK_SOUL_INSTABILITY_TALENT.id) && <AbilityRequirement spell={SPELLS.DARK_SOUL_INSTABILITY_TALENT.id} />}\r\n      </Rule>\r\n      <Rule\r\n        name=\"Use your utility and defensive spells\"\r\n        description={(\r\n          <>\r\n            Use other spells in your toolkit to your advantage. For example, you can try to minimize necessary movement by using <SpellLink id={SPELLS.DEMONIC_GATEWAY_CAST.id} icon />, <SpellLink id={SPELLS.DEMONIC_CIRCLE.id} icon />, <SpellLink id={SPELLS.BURNING_RUSH_TALENT.id} icon /> or mitigate incoming damage with <SpellLink id={SPELLS.UNENDING_RESOLVE.id} icon />/<SpellLink id={SPELLS.DARK_PACT_TALENT.id} icon />.<br />\r\n            While you shouldn't cast these defensives on cooldown, be aware of them and use them whenever effective. Not using them at all indicates you might not be aware of them or not using them optimally.\r\n          </>\r\n        )}\r\n      >\r\n        <AbilityRequirement spell={SPELLS.DEMONIC_CIRCLE_TELEPORT.id} />\r\n        {combatant.hasTalent(SPELLS.DARK_PACT_TALENT.id) && <AbilityRequirement spell={SPELLS.DARK_PACT_TALENT.id} />}\r\n        <AbilityRequirement spell={SPELLS.UNENDING_RESOLVE.id} />\r\n      </Rule>\r\n      <Rule\r\n        name=\"Always be casting\"\r\n        description={(\r\n          <>\r\n            You should try to avoid doing nothing during the fight. When you have to move, try to save some <SpellLink id={SPELLS.CONFLAGRATE.id} /> charges or try to utilize <SpellLink id={SPELLS.DEMONIC_CIRCLE.id} icon>Teleport</SpellLink> or <SpellLink id={SPELLS.DEMONIC_GATEWAY_CAST.id} icon>Gateway</SpellLink> to reduce the movement even further.\r\n          </>\r\n        )}\r\n      >\r\n        <Requirement name=\"Downtime\" thresholds={thresholds.downtime} />\r\n      </Rule>\r\n      <PreparationRule thresholds={thresholds} />\r\n    </Checklist>\r\n  );\r\n};\r\n\r\nDestructionWarlockChecklist.propTypes = {\r\n  castEfficiency: PropTypes.object.isRequired,\r\n  combatant: PropTypes.shape({\r\n    hasTalent: PropTypes.func.isRequired,\r\n  }).isRequired,\r\n  thresholds: PropTypes.object.isRequired,\r\n  shardTracker: PropTypes.object.isRequired,\r\n};\r\n\r\nexport default DestructionWarlockChecklist;\r\n","import React from 'react';\r\n\r\nimport BaseChecklist from 'parser/shared/modules/features/Checklist/Module';\r\nimport CastEfficiency from 'parser/shared/modules/CastEfficiency';\r\nimport Combatants from 'parser/shared/modules/Combatants';\r\nimport PreparationRuleAnalyzer from 'parser/shared/modules/features/Checklist/PreparationRuleAnalyzer';\r\n\r\nimport AlwaysBeCasting from '../AlwaysBeCasting';\r\nimport ImmolateUptime from '../ImmolateUptime';\r\nimport Backdraft from '../Backdraft';\r\nimport SoulShardDetails from '../../soulshards/SoulShardDetails';\r\nimport SoulShardTracker from '../../soulshards/SoulShardTracker';\r\nimport Eradication from '../../talents/Eradication';\r\n\r\nimport Component from './Component';\r\n\r\nclass Checklist extends BaseChecklist {\r\n  static dependencies = {\r\n    combatants: Combatants,\r\n    castEfficiency: CastEfficiency,\r\n    alwaysBeCasting: AlwaysBeCasting,\r\n    preparationRuleAnalyzer: PreparationRuleAnalyzer,\r\n\r\n    immolateUptime: ImmolateUptime,\r\n    backdraft: Backdraft,\r\n    soulShardDetails: SoulShardDetails,\r\n    soulShardTracker: SoulShardTracker,\r\n    eradication: Eradication,\r\n  };\r\n\r\n  render() {\r\n    return (\r\n      <Component\r\n        castEfficiency={this.castEfficiency}\r\n        combatant={this.combatants.selected}\r\n        thresholds={{\r\n          ...this.preparationRuleAnalyzer.thresholds,\r\n          immolate: this.immolateUptime.suggestionThresholds,\r\n          wastedBackdraft: this.backdraft.suggestionThresholds,\r\n          eradication: this.eradication.suggestionThresholds,\r\n          soulShards: this.soulShardDetails.suggestionThresholds,\r\n          downtime: this.alwaysBeCasting.suggestionThresholds,\r\n        }}\r\n        shardTracker={this.soulShardTracker}\r\n      />\r\n    );\r\n  }\r\n}\r\n\r\nexport default Checklist;\r\n","import React from 'react';\r\n\r\nimport Analyzer, { SELECTED_PLAYER } from 'parser/core/Analyzer';\r\nimport Events from 'parser/core/Events';\r\nimport calculateEffectiveDamage from 'parser/core/calculateEffectiveDamage';\r\n\r\nimport SPELLS from 'common/SPELLS';\r\nimport { formatThousands, formatNumber, formatPercentage } from 'common/format';\r\nimport Tooltip from 'common/Tooltip';\r\n\r\nimport Statistic from 'interface/statistics/Statistic';\r\nimport BoringSpellValueText from 'interface/statistics/components/BoringSpellValueText';\r\nimport STATISTIC_CATEGORY from 'interface/others/STATISTIC_CATEGORY';\r\n\r\nconst DAMAGE_BONUS = 0.25;\r\nconst MAX_STACKS = 4;\r\nconst STACKS_PER_CAST = 2;\r\nconst debug = false;\r\n\r\nclass Flashover extends Analyzer {\r\n  get dps() {\r\n    return this.damage / this.owner.fightDuration * 1000;\r\n  }\r\n\r\n  _currentStacks = 0;\r\n  bonusStacks = 0;\r\n  wastedStacks = 0;\r\n  damage = 0;\r\n\r\n  constructor(...args) {\r\n    super(...args);\r\n    this.active = this.selectedCombatant.hasTalent(SPELLS.FLASHOVER_TALENT.id);\r\n    this.addEventListener(Events.damage.by(SELECTED_PLAYER).spell(SPELLS.CONFLAGRATE), this.onConflagrateDamage);\r\n    this.addEventListener(Events.cast.by(SELECTED_PLAYER).spell(SPELLS.CONFLAGRATE), this.onConflagrateCast);\r\n    this.addEventListener(Events.removebuffstack.to(SELECTED_PLAYER).spell(SPELLS.BACKDRAFT), this.onBackdraftRemoveBuffStack);\r\n    this.addEventListener(Events.removebuff.to(SELECTED_PLAYER).spell(SPELLS.BACKDRAFT), this.onBackdraftRemoveBuff);\r\n  }\r\n\r\n  onConflagrateDamage(event) {\r\n    this.damage += calculateEffectiveDamage(event, DAMAGE_BONUS);\r\n  }\r\n\r\n  onConflagrateCast() {\r\n    if (this._currentStacks <= MAX_STACKS - STACKS_PER_CAST) {\r\n      // We don't waste the base Backdraft stack, nor the bonus one\r\n      this._currentStacks += STACKS_PER_CAST;\r\n      this.bonusStacks += 1;\r\n    } else {\r\n      // Conflagrate grants 2 stacks with Flashover, we can attribute 1 to the base Conflagrate and 1 to the Flashover, in this case the Flashover one would get wasted\r\n      debug && this.log('WASTE');\r\n      this._currentStacks = MAX_STACKS;\r\n      this.wastedStacks += 1;\r\n    }\r\n    debug && this.log(`Stacks after conflag cast: ${this._currentStacks}`);\r\n  }\r\n\r\n  onBackdraftRemoveBuffStack() {\r\n    this._currentStacks -= 1;\r\n    debug && this.log(`Remove buff stack, current: ${this._currentStacks}`);\r\n  }\r\n\r\n  onBackdraftRemoveBuff() {\r\n    this._currentStacks = 0;\r\n    debug && this.log(`Remove buff, current: ${this._currentStacks}`);\r\n  }\r\n\r\n  statistic() {\r\n    return (\r\n      <Statistic\r\n        category={STATISTIC_CATEGORY.TALENTS}\r\n        size=\"flexible\"\r\n        tooltip={`${formatThousands(this.damage)} bonus damage`}\r\n      >\r\n        <BoringSpellValueText spell={SPELLS.FLASHOVER_TALENT}>\r\n          {formatNumber(this.dps)} DPS <small>{formatPercentage(this.owner.getPercentageOfTotalDamageDone(this.damage))} % of total</small> <br />\r\n          {this.bonusStacks} <small>bonus Backdraft stacks</small> <br />\r\n          {this.wastedStacks}\r\n          <Tooltip content=\"Conflagrate on 3 or 4 stacks of Backdraft\">\r\n            <small style={{ marginLeft: 7 }}>wasted Backdraft stacks <sup>*</sup></small>\r\n          </Tooltip>\r\n        </BoringSpellValueText>\r\n      </Statistic>\r\n    );\r\n  }\r\n}\r\n\r\nexport default Flashover;\r\n","import React from 'react';\r\n\r\nimport Analyzer from 'parser/core/Analyzer';\r\nimport AbilityTracker from 'parser/shared/modules/AbilityTracker';\r\n\r\nimport SPELLS from 'common/SPELLS';\r\nimport { formatThousands, formatNumber, formatPercentage } from 'common/format';\r\n\r\nimport Statistic from 'interface/statistics/Statistic';\r\nimport BoringSpellValueText from 'interface/statistics/components/BoringSpellValueText';\r\nimport STATISTIC_CATEGORY from 'interface/others/STATISTIC_CATEGORY';\r\n\r\nimport SoulShardTracker from '../soulshards/SoulShardTracker';\r\n\r\nconst FRAGMENTS_PER_CHAOS_BOLT = 20;\r\n\r\nclass SoulFire extends Analyzer {\r\n  static dependencies = {\r\n    abilityTracker: AbilityTracker,\r\n    soulShardTracker: SoulShardTracker,\r\n  };\r\n\r\n  constructor(...args) {\r\n    super(...args);\r\n    this.active = this.selectedCombatant.hasTalent(SPELLS.SOUL_FIRE_TALENT.id);\r\n  }\r\n\r\n  statistic() {\r\n    const fragments = this.soulShardTracker.getGeneratedBySpell(SPELLS.SOUL_FIRE_TALENT.id);\r\n\r\n    const chaosBolt = this.abilityTracker.getAbility(SPELLS.CHAOS_BOLT.id);\r\n    const avg = ((chaosBolt.damageEffective + chaosBolt.damageAbsorbed) / chaosBolt.casts) || 0;\r\n    const estimatedDamage = Math.floor(fragments / FRAGMENTS_PER_CHAOS_BOLT) * avg;\r\n\r\n    const spell = this.abilityTracker.getAbility(SPELLS.SOUL_FIRE_TALENT.id);\r\n    const damage = spell.damageEffective + spell.damageAbsorbed;\r\n    const dps = damage / this.owner.fightDuration * 1000;\r\n\r\n    return (\r\n      <Statistic\r\n        category={STATISTIC_CATEGORY.TALENTS}\r\n        size=\"flexible\"\r\n        tooltip={(\r\n          <>\r\n            {formatThousands(damage)} damage<br /><br />\r\n\r\n            If fragments generated with Soul Fire were used on Chaos Bolts, they would deal an estimated {formatThousands(estimatedDamage)} damage ({this.owner.formatItemDamageDone(estimatedDamage)}).\r\n            This is estimated using average Chaos Bolt damage over the fight.\r\n          </>\r\n        )}\r\n      >\r\n        <BoringSpellValueText spell={SPELLS.SOUL_FIRE_TALENT}>\r\n          {formatNumber(dps)} DPS <small>{formatPercentage(this.owner.getPercentageOfTotalDamageDone(damage))} % of total</small> <br />\r\n          {fragments} <small>generated Fragments</small>\r\n        </BoringSpellValueText>\r\n      </Statistic>\r\n    );\r\n  }\r\n}\r\n\r\nexport default SoulFire;\r\n","import React from 'react';\r\n\r\nimport Analyzer from 'parser/core/Analyzer';\r\n\r\nimport SPELLS from 'common/SPELLS';\r\nimport { formatPercentage } from 'common/format';\r\n\r\nimport Statistic from 'interface/statistics/Statistic';\r\nimport BoringSpellValueText from 'interface/statistics/components/BoringSpellValueText';\r\nimport UptimeIcon from 'interface/icons/Uptime';\r\nimport STATISTIC_CATEGORY from 'interface/others/STATISTIC_CATEGORY';\r\n\r\nclass ReverseEntropy extends Analyzer {\r\n  get uptime() {\r\n    return this.selectedCombatant.getBuffUptime(SPELLS.REVERSE_ENTROPY_BUFF.id) / this.owner.fightDuration;\r\n  }\r\n\r\n  constructor(...args) {\r\n    super(...args);\r\n    this.active = this.selectedCombatant.hasTalent(SPELLS.REVERSE_ENTROPY_TALENT.id);\r\n  }\r\n\r\n  statistic() {\r\n    return (\r\n      <Statistic\r\n        category={STATISTIC_CATEGORY.TALENTS}\r\n        size=\"small\"\r\n      >\r\n        <BoringSpellValueText spell={SPELLS.REVERSE_ENTROPY_TALENT}>\r\n          <UptimeIcon /> {formatPercentage(this.uptime, 0)} % <small>uptime</small>\r\n        </BoringSpellValueText>\r\n      </Statistic>\r\n    );\r\n  }\r\n}\r\n\r\nexport default ReverseEntropy;\r\n","import React from 'react';\r\n\r\nimport Analyzer, { SELECTED_PLAYER } from 'parser/core/Analyzer';\r\nimport Events from 'parser/core/Events';\r\n\r\nimport SPELLS from 'common/SPELLS';\r\nimport { formatThousands, formatNumber, formatPercentage } from 'common/format';\r\n\r\nimport Statistic from 'interface/statistics/Statistic';\r\nimport BoringSpellValueText from 'interface/statistics/components/BoringSpellValueText';\r\nimport STATISTIC_CATEGORY from 'interface/others/STATISTIC_CATEGORY';\r\n\r\n/*\r\n  Internal Combustion (Tier 30 Destruction talent):\r\n    Chaos Bolt consumes up to 5 sec of Immolate's damage over time effect on your target, instantly dealing that much damage.\r\n */\r\nclass InternalCombustion extends Analyzer {\r\n  get dps() {\r\n    return this.damage / this.owner.fightDuration * 1000;\r\n  }\r\n\r\n  damage = 0;\r\n\r\n  constructor(...args) {\r\n    super(...args);\r\n    this.active = this.selectedCombatant.hasTalent(SPELLS.INTERNAL_COMBUSTION_TALENT.id);\r\n    this.addEventListener(Events.damage.by(SELECTED_PLAYER).spell(SPELLS.INTERNAL_COMBUSTION_DAMAGE), this.onInternalCombustionDamage);\r\n  }\r\n\r\n  onInternalCombustionDamage(event) {\r\n    this.damage += (event.amount || 0) + (event.absorbed || 0);\r\n  }\r\n\r\n  statistic() {\r\n    return (\r\n      <Statistic\r\n        category={STATISTIC_CATEGORY.TALENTS}\r\n        size=\"small\"\r\n        tooltip={`${formatThousands(this.damage)} damage`}\r\n      >\r\n        <BoringSpellValueText spell={SPELLS.INTERNAL_COMBUSTION_TALENT}>\r\n          {formatNumber(this.dps)} DPS <small>{formatPercentage(this.owner.getPercentageOfTotalDamageDone(this.damage))} % of total</small>\r\n        </BoringSpellValueText>\r\n      </Statistic>\r\n    );\r\n  }\r\n}\r\n\r\nexport default InternalCombustion;\r\n","import React from 'react';\r\n\r\nimport Analyzer, { SELECTED_PLAYER } from 'parser/core/Analyzer';\r\nimport AbilityTracker from 'parser/shared/modules/AbilityTracker';\r\nimport Events from 'parser/core/Events';\r\n\r\nimport SPELLS from 'common/SPELLS';\r\nimport { formatThousands, formatNumber, formatPercentage } from 'common/format';\r\n\r\nimport Statistic from 'interface/statistics/Statistic';\r\nimport BoringSpellValueText from 'interface/statistics/components/BoringSpellValueText';\r\nimport STATISTIC_CATEGORY from 'interface/others/STATISTIC_CATEGORY';\r\n\r\nimport SoulShardTracker from '../soulshards/SoulShardTracker';\r\n\r\n/*\r\n  Shadowburn (Tier 30 Destruction talent):\r\n    Blasts a target for X Shadowflame damage. If the target dies within 5 sec and yields experience or honor, Shadowburn's cooldown is reset.\r\n    Generates 3 Soul Shard Fragments.\r\n */\r\nconst FRAGMENTS_PER_CHAOS_BOLT = 20;\r\n\r\nclass Shadowburn extends Analyzer {\r\n  get dps() {\r\n    return this.damage / this.owner.fightDuration * 1000;\r\n  }\r\n\r\n  static dependencies = {\r\n    soulShardTracker: SoulShardTracker,\r\n    abilityTracker: AbilityTracker,\r\n  };\r\n  damage = 0;\r\n\r\n  constructor(...args) {\r\n    super(...args);\r\n    this.active = this.selectedCombatant.hasTalent(SPELLS.SHADOWBURN_TALENT.id);\r\n    this.addEventListener(Events.damage.by(SELECTED_PLAYER).spell(SPELLS.SHADOWBURN_TALENT), this.onShadowburnDamage);\r\n  }\r\n\r\n  onShadowburnDamage(event) {\r\n    this.damage += (event.amount || 0) + (event.absorbed || 0);\r\n  }\r\n\r\n  statistic() {\r\n    const spell = this.abilityTracker.getAbility(SPELLS.CHAOS_BOLT.id);\r\n    const avg = ((spell.damageEffective + spell.damageAbsorbed) / spell.casts) || 0;\r\n    const fragments = this.soulShardTracker.getGeneratedBySpell(SPELLS.SHADOWBURN_TALENT.id);\r\n    const estimatedDamage = Math.floor(fragments / FRAGMENTS_PER_CHAOS_BOLT) * avg;\r\n    return (\r\n      <Statistic\r\n        category={STATISTIC_CATEGORY.TALENTS}\r\n        size=\"flexible\"\r\n        tooltip={(\r\n          <>\r\n            {formatThousands(this.damage)} damage<br /><br />\r\n\r\n            If fragments generated with Shadowburn were used on Chaos Bolts, they would deal an estimated {formatThousands(estimatedDamage)} damage ({this.owner.formatItemDamageDone(estimatedDamage)}).\r\n            This is estimated using average Chaos Bolt damage over the fight.\r\n          </>\r\n        )}\r\n      >\r\n        <BoringSpellValueText spell={SPELLS.SHADOWBURN_TALENT}>\r\n          {formatNumber(this.dps)} DPS <small>{formatPercentage(this.owner.getPercentageOfTotalDamageDone(this.damage))} % of total</small> <br />\r\n          {fragments} <small>generated Fragments</small>\r\n        </BoringSpellValueText>\r\n      </Statistic>\r\n    );\r\n  }\r\n}\r\n\r\nexport default Shadowburn;\r\n","import React from 'react';\r\n\r\nimport Analyzer from 'parser/core/Analyzer';\r\nimport AbilityTracker from 'parser/shared/modules/AbilityTracker';\r\n\r\nimport SPELLS from 'common/SPELLS';\r\nimport { formatThousands } from 'common/format';\r\n\r\nimport Statistic from 'interface/statistics/Statistic';\r\nimport BoringSpellValueText from 'interface/statistics/components/BoringSpellValueText';\r\nimport STATISTIC_CATEGORY from 'interface/others/STATISTIC_CATEGORY';\r\n\r\nimport RainOfFire from '../features/RainOfFire';\r\nimport SoulShardTracker from '../soulshards/SoulShardTracker';\r\n\r\nconst FRAGMENTS_PER_CHAOS_BOLT = 20;\r\nconst FRAGMENTS_PER_RAIN_OF_FIRE = 30;\r\n\r\n/*\r\n    Inferno (Tier 60 Destruction talent):\r\n      Rain of Fire damage has a 20% chance to generate a Soul Shard Fragment.\r\n */\r\nclass Inferno extends Analyzer {\r\n  get averageRainOfFireDamage() {\r\n    // Rain of Fire has different spellId for cast and damage but AbilityTracker picks up both of them\r\n    const rofDamage = this.abilityTracker.getAbility(SPELLS.RAIN_OF_FIRE_DAMAGE.id);\r\n    const rofCast = this.abilityTracker.getAbility(SPELLS.RAIN_OF_FIRE_CAST.id);\r\n    return ((rofDamage.damageEffective + rofDamage.damageAbsorbed) / rofCast.casts) || 0;\r\n  }\r\n\r\n  get averageChaosBoltDamage() {\r\n    const chaosBolt = this.abilityTracker.getAbility(SPELLS.CHAOS_BOLT.id);\r\n    return ((chaosBolt.damageEffective + chaosBolt.damageAbsorbed) / chaosBolt.casts) || 0;\r\n  }\r\n\r\n  static dependencies = {\r\n    rainOfFire: RainOfFire,\r\n    soulShardTracker: SoulShardTracker,\r\n    abilityTracker: AbilityTracker,\r\n  };\r\n\r\n  constructor(...args) {\r\n    super(...args);\r\n    this.active = this.selectedCombatant.hasTalent(SPELLS.INFERNO_TALENT.id);\r\n  }\r\n\r\n  statistic() {\r\n    // ESTIMATED fragments from Rain of Fire, see comments in SoulShardTracker._getRandomFragmentDistribution()\r\n    const fragments = this.soulShardTracker.getGeneratedBySpell(SPELLS.RAIN_OF_FIRE_DAMAGE.id);\r\n    const estimatedRofDamage = Math.floor(fragments / FRAGMENTS_PER_RAIN_OF_FIRE) * this.averageRainOfFireDamage;\r\n    const estimatedChaosBoltDamage = Math.floor(fragments / FRAGMENTS_PER_CHAOS_BOLT) * this.averageChaosBoltDamage;\r\n    return (\r\n      <Statistic\r\n        category={STATISTIC_CATEGORY.TALENTS}\r\n        size=\"small\"\r\n        tooltip={(\r\n          <>\r\n            While majority of sources of Soul Shard Fragments are certain, chance based sources (Inferno and Immolate crits) make tracking the fragments 100% correctly impossible (Fragment generation is NOT in logs).<br /><br />\r\n\r\n            If you used all these bonus fragments on Chaos Bolts, they would do {formatThousands(estimatedChaosBoltDamage)} damage ({this.owner.formatItemDamageDone(estimatedChaosBoltDamage)}).<br />\r\n            If you used them on Rain of Fires, they would do {formatThousands(estimatedRofDamage)} damage ({this.owner.formatItemDamageDone(estimatedRofDamage)}) <strong>assuming an average of {this.rainOfFire.averageTargetsHit.toFixed(2)} targets</strong>.<br />\r\n            Both of these estimates are based on average damage of respective spells during the fight.\r\n          </>\r\n        )}\r\n      >\r\n        <BoringSpellValueText spell={SPELLS.INFERNO_TALENT}>\r\n          {fragments} <small><strong>estimated</strong> bonus Fragments</small>\r\n        </BoringSpellValueText>\r\n      </Statistic>\r\n    );\r\n  }\r\n}\r\n\r\nexport default Inferno;\r\n","import React from 'react';\r\n\r\nimport Analyzer, { SELECTED_PLAYER } from 'parser/core/Analyzer';\r\nimport Events from 'parser/core/Events';\r\nimport ISSUE_IMPORTANCE from 'parser/core/ISSUE_IMPORTANCE';\r\n\r\nimport SpellLink from 'common/SpellLink';\r\nimport { formatThousands, formatNumber, formatPercentage } from 'common/format';\r\nimport SPELLS from 'common/SPELLS';\r\n\r\nimport HIT_TYPES from 'game/HIT_TYPES';\r\n\r\nimport Statistic from 'interface/statistics/Statistic';\r\nimport BoringSpellValueText from 'interface/statistics/components/BoringSpellValueText';\r\nimport STATISTIC_CATEGORY from 'interface/others/STATISTIC_CATEGORY';\r\n\r\nconst debug = false;\r\n\r\nclass FireAndBrimstone extends Analyzer {\r\n  get dps() {\r\n    return this.bonusDmg / this.owner.fightDuration * 1000;\r\n  }\r\n\r\n  _primaryTargets = [];\r\n  bonusFragments = 0;\r\n  bonusDmg = 0;\r\n\r\n  constructor(...args) {\r\n    super(...args);\r\n    this.active = this.selectedCombatant.hasTalent(SPELLS.FIRE_AND_BRIMSTONE_TALENT.id);\r\n    this.addEventListener(Events.cast.by(SELECTED_PLAYER).spell(SPELLS.INCINERATE), this.onIncinerateCast);\r\n    this.addEventListener(Events.damage.by(SELECTED_PLAYER).spell(SPELLS.INCINERATE), this.onIncinerateDamage);\r\n  }\r\n\r\n  onIncinerateCast(event) {\r\n    debug && this.log(`Storing Incinerate cast on ${event.targetID}, ${event.targetInstance}`);\r\n    this._primaryTargets.push({\r\n      timestamp: event.timestamp,\r\n      targetID: event.targetID,\r\n      targetInstance: event.targetInstance,\r\n    });\r\n  }\r\n\r\n  onIncinerateDamage(event) {\r\n    // should find FIRST (oldest) Incinerate cast, so even though you can fire multiple Incinerates before the first hits, this should pair the events correctly even if they have the same ID and instance\r\n    const primaryTargetEventIndex = this._primaryTargets.findIndex(primary => primary.targetID === event.targetID && primary.targetInstance === event.targetInstance);\r\n    if (primaryTargetEventIndex !== -1) {\r\n      debug && this.log(`Found Incinerate cast on ${event.targetID}, ${event.targetInstance}`);\r\n      // it's a Incinerate damage on primary target, delete the event so it doesn't interfere with another casts\r\n      this._primaryTargets.splice(primaryTargetEventIndex, 1);\r\n      return;\r\n    }\r\n    debug && this.log(`Incinerate CLEAVE on ${event.targetID}, ${event.targetInstance}`);\r\n    // should be cleaved damage\r\n    this.bonusFragments += (event.hitType === HIT_TYPES.CRIT) ? 2 : 1;\r\n    this.bonusDmg += event.amount + (event.absorbed || 0);\r\n    debug && this.log(`Current bonus fragments: ${this.bonusFragments}`);\r\n  }\r\n\r\n  suggestions(when) {\r\n    // this is incorrect in certain situations with pre-casted Incinerates, but there's very little I can do about it\r\n    // example: pre-cast Incinerate -> *combat starts* -> hard cast Incinerate -> first Incinerate lands -> second Incinerate lands\r\n    // but because the second Incinerate \"technically\" doesn't have a cast event to pair with, it's incorrectly recognized as cleaved\r\n    when(this.bonusFragments).isEqual(0)\r\n      .addSuggestion(suggest => suggest(<>Your <SpellLink id={SPELLS.FIRE_AND_BRIMSTONE_TALENT.id} icon /> talent didn't contribute any bonus fragments. When there are no adds to cleave onto, this talent is useless and you should switch to a different talent.</>)\r\n        .icon(SPELLS.FIRE_AND_BRIMSTONE_TALENT.icon)\r\n        .actual('No bonus Soul Shard Fragments generated')\r\n        .recommended('Different talent is recommended')\r\n        .staticImportance(ISSUE_IMPORTANCE.MAJOR));\r\n  }\r\n\r\n  statistic() {\r\n    return (\r\n      <Statistic\r\n        category={STATISTIC_CATEGORY.TALENTS}\r\n        size=\"flexible\"\r\n        tooltip={`${formatThousands(this.bonusDmg)} bonus cleaved damage`}\r\n      >\r\n        <BoringSpellValueText spell={SPELLS.FIRE_AND_BRIMSTONE_TALENT}>\r\n          {this.bonusFragments} <small>bonus Soul Shard Fragments</small> <br />\r\n          {formatNumber(this.dps)} DPS <small>{formatPercentage(this.owner.getPercentageOfTotalDamageDone(this.bonusDmg))} % of total</small>\r\n        </BoringSpellValueText>\r\n      </Statistic>\r\n    );\r\n  }\r\n}\r\n\r\nexport default FireAndBrimstone;\r\n","import React from 'react';\r\n\r\nimport Analyzer, { SELECTED_PLAYER } from 'parser/core/Analyzer';\r\nimport AbilityTracker from 'parser/shared/modules/AbilityTracker';\r\nimport Events from 'parser/core/Events';\r\n\r\nimport SPELLS from 'common/SPELLS';\r\nimport { formatThousands, formatNumber, formatPercentage } from 'common/format';\r\n\r\nimport Statistic from 'interface/statistics/Statistic';\r\nimport BoringSpellValueText from 'interface/statistics/components/BoringSpellValueText';\r\nimport STATISTIC_CATEGORY from 'interface/others/STATISTIC_CATEGORY';\r\n\r\nconst BUFFER = 100;\r\nconst debug = false;\r\n\r\nclass Cataclysm extends Analyzer {\r\n  static dependencies = {\r\n    abilityTracker: AbilityTracker,\r\n  };\r\n\r\n  _castTimestamp = null;\r\n  _currentCastCount = 0;\r\n  casts = [];\r\n\r\n  constructor(...args) {\r\n    super(...args);\r\n    this.active = this.selectedCombatant.hasTalent(SPELLS.CATACLYSM_TALENT.id);\r\n    this.addEventListener(Events.cast.by(SELECTED_PLAYER).spell(SPELLS.CATACLYSM_TALENT), this.onCataclysmCast);\r\n    this.addEventListener(Events.damage.by(SELECTED_PLAYER).spell(SPELLS.CATACLYSM_TALENT), this.onCataclysmDamage);\r\n    this.addEventListener(Events.fightend, this.onFinished);\r\n  }\r\n\r\n  onCataclysmCast(event) {\r\n    if (this._castTimestamp !== null) {\r\n      // we've casted Cataclysm at least once, so we should add the current (at this time the previous) cast first before resetting the counter\r\n      this.casts.push(this._currentCastCount);\r\n    }\r\n    this._castTimestamp = event.timestamp;\r\n    this._currentCastCount = 0;\r\n  }\r\n\r\n  onCataclysmDamage(event) {\r\n    if (event.timestamp <= this._castTimestamp + BUFFER) {\r\n      this._currentCastCount += 1;\r\n    } else {\r\n      debug && this.log('Cataclysm damage outside of the 100ms buffer after cast');\r\n    }\r\n  }\r\n\r\n  onFinished() {\r\n    // on each cast, the previous one is saved, so the \"results\" of the last Cataclysm cast in fight aren't saved, so do it on fight end\r\n    this.casts.push(this._currentCastCount);\r\n  }\r\n\r\n  statistic() {\r\n    const spell = this.abilityTracker.getAbility(SPELLS.CATACLYSM_TALENT.id);\r\n    const damage = spell.damageEffective + spell.damageAbsorbed;\r\n    const dps = damage / this.owner.fightDuration * 1000;\r\n    const averageTargetsHit = (this.casts.reduce((total, current) => total + current, 0) / spell.casts) || 0;\r\n    debug && this.log('Casts array at fight end: ', JSON.parse(JSON.stringify(this.casts)));\r\n\r\n    return (\r\n      <Statistic\r\n        category={STATISTIC_CATEGORY.TALENTS}\r\n        size=\"flexible\"\r\n        tooltip={`${formatThousands(damage)} damage`}\r\n      >\r\n        <BoringSpellValueText spell={SPELLS.CATACLYSM_TALENT}>\r\n          {formatNumber(dps)} DPS <small>{formatPercentage(this.owner.getPercentageOfTotalDamageDone(damage))} % of total</small> <br />\r\n          {averageTargetsHit.toFixed(2)} <small>average targets hit</small>\r\n        </BoringSpellValueText>\r\n      </Statistic>\r\n    );\r\n  }\r\n}\r\n\r\nexport default Cataclysm;\r\n","import React from 'react';\r\n\r\nimport Analyzer, { SELECTED_PLAYER } from 'parser/core/Analyzer';\r\nimport Events from 'parser/core/Events';\r\n\r\nimport SPELLS from 'common/SPELLS';\r\nimport { formatThousands, formatNumber, formatPercentage } from 'common/format';\r\n\r\nimport Statistic from 'interface/statistics/Statistic';\r\nimport BoringSpellValueText from 'interface/statistics/components/BoringSpellValueText';\r\nimport STATISTIC_CATEGORY from 'interface/others/STATISTIC_CATEGORY';\r\n\r\n/*\r\n  Roaring Blaze (Tier 90 Destruction talent):\r\n    Conflagrate burns the target for an additional (48% of Spell power) Fire damage over 6 sec.\r\n */\r\nclass RoaringBlaze extends Analyzer {\r\n  get dps() {\r\n    return this.damage / this.owner.fightDuration * 1000;\r\n  }\r\n\r\n  damage = 0;\r\n\r\n  constructor(...args) {\r\n    super(...args);\r\n    this.active = this.selectedCombatant.hasTalent(SPELLS.ROARING_BLAZE_TALENT.id);\r\n    this.addEventListener(Events.damage.by(SELECTED_PLAYER).spell(SPELLS.ROARING_BLAZE_DAMAGE), this.onRoaringBlazeDamage);\r\n  }\r\n\r\n  onRoaringBlazeDamage(event) {\r\n    this.damage += (event.amount || 0) + (event.absorbed || 0);\r\n  }\r\n\r\n  statistic() {\r\n    return (\r\n      <Statistic\r\n        category={STATISTIC_CATEGORY.TALENTS}\r\n        size=\"small\"\r\n        tooltip={`${formatThousands(this.damage)} damage`}\r\n      >\r\n        <BoringSpellValueText spell={SPELLS.ROARING_BLAZE_TALENT}>\r\n          {formatNumber(this.dps)} DPS <small>{formatPercentage(this.owner.getPercentageOfTotalDamageDone(this.damage))} % of total</small>\r\n        </BoringSpellValueText>\r\n      </Statistic>\r\n    );\r\n  }\r\n}\r\n\r\nexport default RoaringBlaze;\r\n","import React from 'react';\r\n\r\nimport Analyzer from 'parser/core/Analyzer';\r\nimport AbilityTracker from 'parser/shared/modules/AbilityTracker';\r\n\r\nimport SPELLS from 'common/SPELLS';\r\nimport { formatPercentage, formatThousands } from 'common/format';\r\n\r\nimport Statistic from 'interface/statistics/Statistic';\r\nimport BoringSpellValueText from 'interface/statistics/components/BoringSpellValueText';\r\nimport STATISTIC_CATEGORY from 'interface/others/STATISTIC_CATEGORY';\r\nimport { findMax, binomialPMF } from 'parser/shared/modules/helpers/Probability';\r\n\r\nimport SoulShardTracker from '../soulshards/SoulShardTracker';\r\n\r\nconst FRAGMENTS_PER_SHARD = 10;\r\nconst SC_PROC_CHANCE = 0.15;\r\n\r\nclass SoulConduit extends Analyzer {\r\n  get averageChaosBoltDamage() {\r\n    const chaosBolt = this.abilityTracker.getAbility(SPELLS.CHAOS_BOLT.id);\r\n    return ((chaosBolt.damageEffective + chaosBolt.damageAbsorbed) / chaosBolt.casts) || 0;\r\n  }\r\n\r\n  static dependencies = {\r\n    soulShardTracker: SoulShardTracker,\r\n    abilityTracker: AbilityTracker,\r\n  };\r\n\r\n  constructor(...args) {\r\n    super(...args);\r\n    this.active = this.selectedCombatant.hasTalent(SPELLS.SOUL_CONDUIT_TALENT.id);\r\n  }\r\n\r\n  statistic() {\r\n    const generatedShards = this.soulShardTracker.getGeneratedBySpell(SPELLS.SOUL_CONDUIT_SHARD_GEN.id) / FRAGMENTS_PER_SHARD;\r\n    const estimatedDamage = Math.floor(generatedShards / 2) * this.averageChaosBoltDamage; // Chaos Bolt costs 2 shards to cast\r\n    const totalSpent = this.soulShardTracker.spent / FRAGMENTS_PER_SHARD; // Destruction Soul Shard Tracker tracks fragments (10 fragments per shard)\r\n    // find number of Shards we were MOST LIKELY to get in the fight\r\n    const { max } = findMax(totalSpent, (k, n) => binomialPMF(k, n, SC_PROC_CHANCE));\r\n    return (\r\n      <Statistic\r\n        category={STATISTIC_CATEGORY.TALENTS}\r\n        size=\"small\"\r\n        tooltip={(\r\n          <>\r\n            You gained {generatedShards} Shards from this talent, {max > 0 ? <>which is <strong>{formatPercentage(generatedShards / max)}%</strong> of Shards you were most likely to get in this fight ({max} Shards)</> : ', while you were most likely to not get any Shards'}.<br />\r\n            Estimated damage: {formatThousands(estimatedDamage)} ({this.owner.formatItemDamageDone(estimatedDamage)}).<br /><br />\r\n\r\n            This result is estimated by multiplying average Chaos Bolt damage by potential casts you would get from these bonus Shards.\r\n          </>\r\n        )}\r\n      >\r\n        <BoringSpellValueText spell={SPELLS.SOUL_CONDUIT_TALENT}>\r\n          {generatedShards} <small>generated Shards</small>\r\n        </BoringSpellValueText>\r\n      </Statistic>\r\n    );\r\n  }\r\n}\r\n\r\nexport default SoulConduit;\r\n","import React from 'react';\r\n\r\nimport Analyzer, { SELECTED_PLAYER } from 'parser/core/Analyzer';\r\nimport Events from 'parser/core/Events';\r\nimport Enemies from 'parser/shared/modules/Enemies';\r\n\r\nimport SPELLS from 'common/SPELLS';\r\nimport { formatThousands, formatNumber, formatPercentage } from 'common/format';\r\n\r\nimport Statistic from 'interface/statistics/Statistic';\r\nimport BoringSpellValueText from 'interface/statistics/components/BoringSpellValueText';\r\nimport STATISTIC_CATEGORY from 'interface/others/STATISTIC_CATEGORY';\r\n\r\nclass ChannelDemonfire extends Analyzer {\r\n  get dps() {\r\n    return this.damage / this.owner.fightDuration * 1000;\r\n  }\r\n\r\n  static dependencies = {\r\n    enemies: Enemies,\r\n  };\r\n  damage = 0;\r\n\r\n  constructor(...args) {\r\n    super(...args);\r\n    this.active = this.selectedCombatant.hasTalent(SPELLS.CHANNEL_DEMONFIRE_TALENT.id);\r\n    this.addEventListener(Events.damage.by(SELECTED_PLAYER).spell(SPELLS.CHANNEL_DEMONFIRE_DAMAGE), this.onCDFdamage);\r\n  }\r\n\r\n  onCDFdamage(event) {\r\n    this.damage += event.amount + (event.absorbed || 0);\r\n  }\r\n\r\n  statistic() {\r\n    return (\r\n      <Statistic\r\n        category={STATISTIC_CATEGORY.TALENTS}\r\n        size=\"small\"\r\n        tooltip={`${formatThousands(this.damage)} damage`}\r\n      >\r\n        <BoringSpellValueText spell={SPELLS.CHANNEL_DEMONFIRE_TALENT}>\r\n          {formatNumber(this.dps)} DPS <small>{formatPercentage(this.owner.getPercentageOfTotalDamageDone(this.damage))} % of total</small>\r\n        </BoringSpellValueText>\r\n      </Statistic>\r\n    );\r\n  }\r\n}\r\n\r\nexport default ChannelDemonfire;\r\n","import CoreCombatLogParser from 'parser/core/CombatLogParser';\r\nimport ArcaneTorrent from 'parser/shared/modules/racials/bloodelf/ArcaneTorrent';\r\n\r\nimport SpellUsable from './modules/core/SpellUsable';\r\n\r\nimport Abilities from './modules/features/Abilities';\r\nimport AlwaysBeCasting from './modules/features/AlwaysBeCasting';\r\nimport CooldownThroughputTracker from './modules/features/CooldownThroughputTracker';\r\nimport ImmolateUptime from './modules/features/ImmolateUptime';\r\nimport Havoc from './modules/features/Havoc';\r\nimport RainOfFire from './modules/features/RainOfFire';\r\nimport Checklist from './modules/features/Checklist/Module';\r\nimport Backdraft from './modules/features/Backdraft';\r\n\r\nimport SoulShardTracker from './modules/soulshards/SoulShardTracker';\r\nimport SoulShardDetails from './modules/soulshards/SoulShardDetails';\r\n\r\nimport GrimoireOfSacrificeNormalizer from '../shared/modules/talents/normalizers/GrimoireOfSacrificeNormalizer';\r\n\r\nimport Flashover from './modules/talents/Flashover';\r\nimport Eradication from './modules/talents/Eradication';\r\nimport SoulFire from './modules/talents/SoulFire';\r\nimport ReverseEntropy from './modules/talents/ReverseEntropy';\r\nimport InternalCombustion from './modules/talents/InternalCombustion';\r\nimport Shadowburn from './modules/talents/Shadowburn';\r\nimport Inferno from './modules/talents/Inferno';\r\nimport FireAndBrimstone from './modules/talents/FireAndBrimstone';\r\nimport Cataclysm from './modules/talents/Cataclysm';\r\nimport RoaringBlaze from './modules/talents/RoaringBlaze';\r\nimport GrimoireOfSacrifice from '../shared/modules/talents/GrimoireOfSacrifice';\r\nimport SoulConduit from './modules/talents/SoulConduit';\r\nimport ChannelDemonfire from './modules/talents/ChannelDemonfire';\r\n\r\nclass CombatLogParser extends CoreCombatLogParser {\r\n  static specModules = {\r\n    // Features\r\n    abilities: Abilities,\r\n    alwaysBeCasting: AlwaysBeCasting,\r\n    cooldownThroughputTracker: CooldownThroughputTracker,\r\n\r\n    // DoTs\r\n    immolateUptime: ImmolateUptime,\r\n\r\n    // Core\r\n    havoc: Havoc,\r\n    backdraft: Backdraft,\r\n    rainOfFire: RainOfFire,\r\n    checklist: Checklist,\r\n    soulShardTracker: SoulShardTracker,\r\n    soulShardDetails: SoulShardDetails,\r\n    spellUsable: SpellUsable,\r\n\r\n    grimoireOfSacrificeNormalizer: GrimoireOfSacrificeNormalizer,\r\n\r\n    // Talents\r\n    flashover: Flashover,\r\n    eradication: Eradication,\r\n    soulFire: SoulFire,\r\n    reverseEntropy: ReverseEntropy,\r\n    internalCombustion: InternalCombustion,\r\n    shadowburn: Shadowburn,\r\n    inferno: Inferno,\r\n    fireAndBrimstone: FireAndBrimstone,\r\n    cataclysm: Cataclysm,\r\n    roaringBlaze: RoaringBlaze,\r\n    grimoireOfSacrifice: GrimoireOfSacrifice,\r\n    soulConduit: SoulConduit,\r\n    channelDemonfire: ChannelDemonfire,\r\n\r\n    // There's no throughput benefit from casting Arcane Torrent on cooldown\r\n    arcaneTorrent: [ArcaneTorrent, { castEfficiency: null }] as const,\r\n  };\r\n}\r\n\r\nexport default CombatLogParser;\r\n","import React from 'react';\r\n\r\n// https://thenounproject.com/term/duration/370713/\r\n// duration by Bohdan Burmich from the Noun Project\r\nconst Icon = ({ ...other }) => (\r\n  <svg xmlns=\"http://www.w3.org/2000/svg\" viewBox=\"10 10 80 80\" className=\"icon\" {...other}>\r\n    <path d=\"M50,86.4865c17.4361,0,31.6216-14.1855,31.6216-31.6216c0-16.6168-12.8865-30.2714-29.1892-31.5189v-4.9677h7.2973v-4.8649  H40.2703v4.8649h7.2973v4.9677c-16.3027,1.2475-29.1892,14.902-29.1892,31.5189C18.3784,72.3009,32.5639,86.4865,50,86.4865z M52.4324,28.2236c3.1101,0.2817,6.0664,1.0982,8.7798,2.356l-8.7798,15.2073V28.2236z M47.5676,28.2236v26.6412 c0,1.1008,0.7393,2.0647,1.8029,2.3497c0.209,0.0561,0.4205,0.0827,0.6295,0.0827c0.8533,0,1.6642-0.4504,2.1065-1.2162 l13.3146-23.0616c6.8507,4.8503,11.3357,12.8315,11.3357,21.8454c0,14.7537-12.0031,26.7567-26.7568,26.7567 s-26.7568-12.003-26.7568-26.7567C23.2432,40.9315,33.9501,29.4573,47.5676,28.2236z\" />\r\n  </svg>\r\n);\r\n\r\nexport default Icon;\r\n"],"sourceRoot":""}