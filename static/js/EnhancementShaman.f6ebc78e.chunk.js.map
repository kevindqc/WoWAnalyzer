{"version":3,"sources":["parser/shaman/enhancement/constants.tsx","parser/shaman/enhancement/modules/Abilities.tsx","parser/shaman/enhancement/modules/features/CooldownThroughputTracker.tsx","parser/shaman/enhancement/modules/features/AlwaysBeCasting.tsx","parser/shaman/enhancement/modules/checklist/Component.tsx","parser/shaman/enhancement/modules/core/WindfuryTotem.tsx","parser/shaman/enhancement/modules/checklist/Module.tsx","parser/shaman/enhancement/modules/Buffs.tsx","parser/shaman/enhancement/modules/core/Stormbringer.tsx","parser/shaman/enhancement/modules/talents/LashingFlames.tsx","parser/shaman/enhancement/modules/talents/HotHand.tsx","parser/shaman/enhancement/modules/talents/ForcefulWinds.tsx","parser/shaman/enhancement/modules/talents/Hailstorm.tsx","parser/shaman/enhancement/modules/talents/NaturesGuardian.tsx","parser/shaman/enhancement/modules/talents/CrashingStorm.tsx","parser/shaman/enhancement/modules/talents/Sundering.tsx","parser/shaman/enhancement/modules/talents/Stormkeeper.tsx","parser/shaman/enhancement/modules/talents/EarthenSpike.tsx","parser/shaman/enhancement/modules/talents/Stormflurry.tsx","parser/shaman/enhancement/modules/talents/IceStrike.tsx","parser/shaman/enhancement/modules/talents/FireNova.tsx","parser/shaman/enhancement/modules/talents/ElementalAssault.tsx","parser/shaman/enhancement/modules/core/FeralSpirit.tsx","parser/shaman/enhancement/modules/core/Interval.ts","parser/shaman/enhancement/modules/core/Intervals.ts","parser/shaman/enhancement/modules/core/MaelstromWeapon.tsx","parser/shaman/enhancement/CombatLogParser.tsx","interface/others/AverageTargetsHit.js"],"names":["STORMSTRIKE_CAST_SPELLS","SPELLS","STORMSTRIKE_CAST","WINDSTRIKE_CAST","STORMSTRIKE_DAMAGE_SPELLS","STORMSTRIKE_DAMAGE","STORMSTRIKE_DAMAGE_OFFHAND","WINDSTRIKE_DAMAGE","WINDSTRIKE_DAMAGE_OFFHAND","Abilities","combatant","this","selectedCombatant","spell","ASCENDANCE_TALENT_ENHANCEMENT","category","SPELL_CATEGORIES","COOLDOWNS","cooldown","gcd","base","enabled","hasTalent","id","damageSpellIds","ASCENDANCE_INITIAL_DAMAGE","castEfficiency","suggestion","recommendedEfficiency","FERAL_SPIRIT","buffSpellId","ELEMENTAL_SPIRITS_BUFF_MOLTEN_WEAPON","ELEMENTAL_SPIRITS_BUFF_ICY_EDGE","ELEMENTAL_SPIRITS_BUFF_CRACKLING_SURGE","ELEMENTAL_SPIRITS_TALENT","EARTH_ELEMENTAL","EARTHEN_SPIKE_TALENT","CHAIN_LIGHTNING","ROTATIONAL_AOE","ELEMENTAL_BLAST_TALENT","ROTATIONAL","WIND_SHEAR","OTHERS","undefined","name","FLAME_SHOCK","FROST_SHOCK","haste","LAVA_LASH","CRASH_LIGHTNING","LIGHTNING_BOLT","STORMKEEPER_TALENT_ENHANCEMENT","FERAL_LUNGE_TALENT","UTILITY","WINDFURY_TOTEM","SPIRIT_WALK","GHOST_WOLF","CAPACITOR_TOTEM","EARTHBIND_TOTEM","TREMOR_TOTEM","WIND_RUSH_TOTEM_TALENT","PURGE","HEX","CLEANSE_SPIRIT","ASTRAL_SHIFT","DEFENSIVE","isDefensive","SUNDERING_TALENT","FIRE_NOVA_TALENT","ICE_STRIKE_TALENT","LIGHTNING_SHIELD","REINCARNATION","BLOODLUST","HEROISM","isUndetectable","HEALING_STREAM_TOTEM_CAST","static","healSpellIds","HEALING_STREAM_TOTEM_HEAL","CHAIN_HEAL","HEALING_SURGE","CoreAbilities","CooldownThroughputTracker","CoreCooldownThroughputTracker","cooldownSpells","summary","BUILT_IN_SUMMARY_TYPES","DAMAGE","BERSERKING","BLOOD_FURY_SPELL_AND_PHYSICAL","AlwaysBeCasting","position","STATISTIC_ORDER","CORE","when","boss","owner","totalTimeWasted","fightDuration","isGreaterThan","addSuggestion","suggest","actual","recommended","SpellLink","icon","i18n","_","formatPercentage","regular","major","fight","disableDowntimeSuggestion","suggestionThresholds","downtimePercentage","minor","average","style","ThresholdStyle","PERCENTAGE","CoreAlwaysBeCasting","EnhancementShamanChecklist","thresholds","AbilityRequirement","props","GenericCastEfficiencyRequirement","isMaxCasts","getCastEfficiencyForSpellId","Rule","description","Requirement","alwaysBeCasting","href","target","rel","WINDFURY_TOTEM_BUFF","windfuryTotemUptime","PreparationRule","WindfuryTotem","Statistic","BoringSpellValueText","Uptime","uptime","uptimeThreshold","getBuffUptime","isLessThan","Analyzer","Checklist","combatants","preparationRuleAnalyzer","windfuryTotem","Component","selected","BaseChecklist","dependencies","Combatants","CastEfficiency","PreparationRuleAnalyzer","Buffs","spellId","timelineHighlight","STORMBRINGER_BUFF","Object","keys","BLOODLUST_BUFFS","map","item","Number","HOT_HAND_BUFF","HOT_HAND_TALENT","HAILSTORM_BUFF","HAILSTORM_TALENT","triggeredBySpellId","CoreBuffs","Stormbringer","options","spellUsable","damageGained","addEventListener","Events","applybuff","by","SELECTED_PLAYER","onStormbringerApplied","cast","onStormstrikeUseWithStormbringerBuff","damage","onStrikeDamage","event","isOnCooldown","endCooldown","hasBuff","calculateEffectiveDamage","OPTIONAL","size","STATISTIC_CATEGORY","GENERAL","STORMBRINGER","ItemDamageDone","amount","SpellUsable","LashingFlames","enemies","buffedFlameShockDmg","active","LASHING_FLAMES_TALENT","onFlameShockDamage","enemy","getEntity","LASHING_FLAMES_DEBUFF","timestamp","TALENTS","tooltip","formatThousands","getPercentageOfTotalDamageDone","Enemies","HOT_HAND","HotHand","buffedLavaLashDamage","onLavaLashDamage","FORCEFUL_WINDS","ForcefulWinds","FORCEFUL_WINDS_TALENT","WINDFURY_ATTACK","onDamage","buff","getBuff","FORCEFUL_WINDS_BUFF","stacks","HAILSTORM","Hailstorm","casts","hits","currentStacks","lostStacks","totalStacksGained","overcappedStacks","currentMaelstromWeaponStacks","applybuffstack","MAELSTROM_WEAPON_BUFF","onMaelstromWeaponStackApply","forEach","onSpellWithCastTimeCast","onFrostShockCast","onFrostShockDamage","removebuff","onHailstormRemove","removebuffstack","onHailstormStackRemove","stack","maelstromWeaponStacksConsumed","Math","min","hailstormStacksGained","formatNumber","approximate","AverageTargetsHit","NaturesGuardian","healthGained","procCount","NATURES_GUARDIAN_TALENT","heal","NATURES_GUARDIAN_HEAL","onNaturesGuardianHeal","ItemHealingDone","CrashingStorm","CRASHING_STORM_TALENT","CRASHING_STORM_DAMAGE","absorbed","Sundering","onCast","AFFECTED_SPELLS","LIGHTNING_BOLT_OVERLOAD","CHAIN_LIGHTNING_OVERLOAD","Stormkeeper","damageDoneByBuffedCasts","affectedSpell","onSpellDamage","damagePercent","EARTHEN_SPIKE","EarthenSpike","onEarthenSpikeDamage","onAnyDamage","buffedSchools","includes","ability","type","MAGIC_SCHOOLS","ids","PHYSICAL","NATURE","MAIN_HAND_DAMAGES","STORMFLURRY","Stormflurry","eventHistory","abilityTracker","extraHits","extraDamage","STORMFLURRY_TALENT","onStormstrikeDamage","last","length","guid","totalStormstrikeCasts","getAbility","EventHistory","AbilityTracker","IceStrike","cooldownReduced","onIceStrikeDamage","cooldownRemaining","shockCooldownReducedInSeconds","FireNova","fireNovaDamage","onFireNovaCast","FIRE_NOVA_DAMAGE","onFireNovaDamage","ELEMENTAL_ASSAULT","ElementalAssault","maelstromWeaponGained","maelstromWeaponWasted","ELEMENTAL_ASSAULT_TALENT","maelstromWeaponBuff","ResourceGenerated","wasted","resourceType","FeralSpirit","onFeralSpiritCast","expectedMaelstromGained","Interval","startTime","endTime","Intervals","intervals","isLastIntervalInProgress","push","end","reduce","acc","interval","duration","ended","MAELSTROM_WEAPON_SPENDERS","MaelstromWeapon","stacksGained","stacksUsed","stacksExpired","cappedIntervals","gainFirstStack","gainSubsequentStack","removeAllStacks","spendStacks","castMaelstromWeaponSpender","startInterval","endInterval","stopHavingMaxStacks","reachMaxStacks","MAELSTROM_WEAPON","timePercentageSpentWithCappedStacks","totalDuration","CombatLogParser","CoreCombatLogParser","specModules","ankhNormalizer","AnkhNormalizer","astralShift","AstralShift","stormbringer","feralSpirit","abilities","buffs","checklist","cooldownThroughputTracker","flameShock","FlameShock","maelstromWeapon","lashingFlames","forcefulWinds","elementalBlast","ElementalBlast","stormflurry","hotHand","iceStrike","spiritWolf","SpiritWolf","earthShield","EarthShield","staticCharge","StaticCharge","elementalAssault","hailstorm","fireNova","naturesGuardian","crashingStorm","stormkeeper","sundering","earthenSpike","unique","averageHits","toFixed","defaultProps"],"mappings":"wLAEaA,EAA0B,CACrCC,IAAOC,iBACPD,IAAOE,iBAGIC,EAA4B,CACvCH,IAAOI,mBACPJ,IAAOK,2BACPL,IAAOM,kBACPN,IAAOO,2BCgTMC,E,0KAnTX,IAAMC,EAAYC,KAAKC,kBACvB,MAAO,CACL,CACEC,MAAOZ,IAAOa,8BACdC,SAAUN,EAAUO,iBAAiBC,UACrCC,SAAU,IACVC,IAAK,CACHC,KAAM,MAERC,QAASX,EAAUY,UAAUrB,IAAOa,8BAA8BS,IAClEC,eAAgB,CAACvB,IAAOwB,0BAA0BF,IAClDG,eAAgB,CACdC,YAAY,EACZC,sBAAuB,IAG3B,CACEf,MAAOZ,IAAO4B,aACdC,YAAa,CAEX7B,IAAO8B,qCAAqCR,GAC5CtB,IAAO+B,gCAAgCT,GACvCtB,IAAOgC,uCAAuCV,IAEhDR,SAAUN,EAAUO,iBAAiBC,UACrCC,SAAUR,EAAUY,UAAUrB,IAAOiC,0BAA4B,GAAK,IACtEf,IAAK,CACHC,KAAM,MAERM,eAAgB,CACdC,YAAY,IAGhB,CACEd,MAAOZ,IAAOkC,gBACdpB,SAAUN,EAAUO,iBAAiBC,UACrCC,SAAU,IACVC,IAAK,CACHC,KAAM,MAERM,eAAgB,CACdC,YAAY,IAGhB,CACEd,MAAOZ,IAAOmC,qBACdrB,SAAUN,EAAUO,iBAAiBC,UACrCI,QAASX,EAAUY,UAAUrB,IAAOmC,qBAAqBb,IACzDL,SAAU,GACVC,IAAK,CACHC,KAAM,MAERM,eAAgB,CACdC,YAAY,IAGhB,CACEd,MAAOZ,IAAOoC,gBACdtB,SAAUN,EAAUO,iBAAiBsB,eACrCnB,IAAK,CACHC,KAAM,OAGV,CACEP,MAAOZ,IAAOsC,uBACdxB,SAAUN,EAAUO,iBAAiBwB,WACrCnB,QAASX,EAAUY,UAAUrB,IAAOsC,uBAAuBhB,IAC3DL,SAAU,GACVC,IAAK,CACHC,KAAM,MAERM,eAAgB,CACdC,YAAY,EACZC,sBAAuB,KAG3B,CACEf,MAAOZ,IAAOwC,WACd1B,SAAUN,EAAUO,iBAAiB0B,OACrCxB,SAAU,GACVC,SAAKwB,GAEP,CACEC,KAAK,GAAD,OAAK3C,IAAO4C,YAAYD,KAAxB,cAAkC3C,IAAO6C,YAAYF,MACzD/B,MAAO,CAACZ,IAAO6C,YAAa7C,IAAO4C,aACnC9B,SAAUN,EAAUO,iBAAiBwB,WACrCtB,SAAU,SAAA6B,GAAK,OAAI,GAAK,EAAIA,IAC5B5B,IAAK,CACHC,KAAM,OAGV,CACEP,MAAOb,EACPe,SAAUN,EAAUO,iBAAiBwB,WACrCtB,SAAU,SAAA6B,GAAK,OAAI,KAAO,EAAIA,IAC9B5B,IAAK,CACHC,KAAM,OAGV,CACEP,MAAOZ,IAAO+C,UACdjC,SAAUN,EAAUO,iBAAiBwB,WACrCrB,IAAK,CACHC,KAAM,MAERF,SAAU,SAAA6B,GAAK,OAAI,IAAM,EAAIA,KAE/B,CACElC,MAAOZ,IAAOgD,gBACdlC,SAAUN,EAAUO,iBAAiBwB,WACrCrB,IAAK,CACHC,KAAM,MAERF,SAAU,SAAA6B,GAAK,OAAI,GAAK,EAAIA,KAE9B,CACElC,MAAOZ,IAAOiD,eACdnC,SAAUN,EAAUO,iBAAiBwB,WACrCrB,IAAK,CACHC,KAAM,OAGV,CACEP,MAAOZ,IAAOkD,+BACdpC,SAAUN,EAAUO,iBAAiBC,UACrCC,SAAU,GACVC,IAAK,CACHC,KAAM,MAERC,QAASX,EAAUY,UAAUrB,IAAOkD,+BAA+B5B,IACnEG,eAAgB,CACdC,YAAY,EACZC,sBAAuB,KAG3B,CACEf,MAAOZ,IAAOmD,mBACd/B,QAASX,EAAUY,UAAUrB,IAAOmD,oBACpCrC,SAAUN,EAAUO,iBAAiBqC,QACrCnC,SAAU,GACVC,IAAK,CACHC,KAAM,OAGV,CACEP,MAAOZ,IAAOqD,eACdvC,SAAUN,EAAUO,iBAAiBwB,WACrCrB,IAAK,CACHC,KAAM,KAERM,eAAgB,CACdC,YAAY,EACZC,sBAAuB,IAG3B,CACEf,MAAOZ,IAAOsD,YACdxC,SAAUN,EAAUO,iBAAiBqC,QACrCnC,SAAU,GACVC,SAAKwB,GAEP,CACE9B,MAAOZ,IAAOuD,WACdzC,SAAUN,EAAUO,iBAAiBqC,QACrClC,IAAK,CACHC,KAAM,OAGV,CACEP,MAAOZ,IAAOwD,gBACd1C,SAAUN,EAAUO,iBAAiBqC,QACrClC,IAAK,CACHC,KAAM,MAERF,SAAU,IAEZ,CACEL,MAAOZ,IAAOyD,gBACd3C,SAAUN,EAAUO,iBAAiBqC,QACrClC,IAAK,CACHC,KAAM,MAERF,SAAU,IAEZ,CACEL,MAAOZ,IAAO0D,aACd5C,SAAUN,EAAUO,iBAAiBqC,QACrClC,IAAK,CACHC,KAAM,MAERF,SAAU,IAEZ,CACEL,MAAOZ,IAAO2D,uBACd7C,SAAUN,EAAUO,iBAAiBqC,QACrChC,QAASX,EAAUY,UAAUrB,IAAO2D,wBACpCzC,IAAK,CACHC,KAAM,MAERF,SAAU,KAEZ,CACEL,MAAOZ,IAAO4D,MACd9C,SAAUN,EAAUO,iBAAiBqC,QACrClC,IAAK,CACHC,KAAM,OAGV,CACEP,MAAOZ,IAAO6D,IACd/C,SAAUN,EAAUO,iBAAiBqC,QACrCnC,SAAU,GACVC,IAAK,CACHC,KAAM,OAGV,CACEP,MAAOZ,IAAO8D,eACdhD,SAAUN,EAAUO,iBAAiBqC,QACrCnC,SAAU,EACVC,IAAK,CACHC,KAAM,OAGV,CACEP,MAAOZ,IAAO+D,aACdlC,YAAa7B,IAAO+D,aAAazC,GACjCL,SAAU,GACVH,SAAUN,EAAUO,iBAAiBiD,UACrCC,aAAa,GAEf,CACErD,MAAOZ,IAAOkE,iBACdpD,SAAUN,EAAUO,iBAAiBwB,WACrCrB,IAAK,CACHC,KAAM,MAERC,QAASX,EAAUY,UAAUrB,IAAOkE,iBAAiB5C,IACrDL,SAAU,IAEZ,CACEL,MAAOZ,IAAOmE,iBACdrD,SAAUN,EAAUO,iBAAiBsB,eACrCnB,IAAK,CACHC,KAAM,MAERC,QAASX,EAAUY,UAAUrB,IAAOmE,iBAAiB7C,IACrDL,SAAU,SAAA6B,GAAK,OAAI,IAAM,EAAIA,KAE/B,CACElC,MAAOZ,IAAOoE,kBACdtD,SAAUN,EAAUO,iBAAiBwB,WACrCrB,IAAK,CACHC,KAAM,MAERC,QAASX,EAAUY,UAAUrB,IAAOoE,kBAAkB9C,IACtDL,SAAU,SAAA6B,GAAK,OAAI,IAAM,EAAIA,KAE/B,CACElC,MAAOZ,IAAOqE,iBACdvD,SAAUN,EAAUO,iBAAiB0B,OACrCvB,IAAK,CACHC,KAAM,MAERM,eAAgB,CACdC,YAAY,EACZC,sBAAuB,IAG3B,CACEf,MAAOZ,IAAOsE,cACdxD,SAAUN,EAAUO,iBAAiBiD,UACrC9C,SAAKwB,GAEP,CACE9B,MAAO,CAACZ,IAAOuE,UAAWvE,IAAOwE,SACjC1D,SAAUN,EAAUO,iBAAiBC,UACrCE,SAAKwB,EACL+B,gBAAgB,GAElB,CACE7D,MAAOZ,IAAO0E,0BACd5D,SAAUN,EAAUO,iBAAiB0B,OACrCvB,IAAK,CACHyD,OAAQ,KAEV1D,SAAU,GACV2D,aAAc,CAAC5E,IAAO6E,0BAA0BvD,KAElD,CACEV,MAAOZ,IAAO8E,WACdhE,SAAUN,EAAUO,iBAAiB0B,OACrCvB,IAAK,CACHC,KAAM,OAGV,CACEP,MAAOZ,IAAO+E,cACd7D,IAAK,CACHC,KAAM,MAERL,SAAUN,EAAUO,iBAAiB0B,a,GA/SrBuC,K,oCCHlBC,E,4HAAkCC,KAAlCD,EACGE,e,sBACFD,IAA8BC,gB,CACjC,CACEvE,MAAOZ,IAAOa,8BACduE,QAAS,CACPC,IAAuBC,SAG3B,CACE1E,MAAOZ,IAAOuF,WACdH,QAAS,CACPC,IAAuBC,SAG3B,CACE1E,MAAOZ,IAAOwF,8BACdJ,QAAS,CACPC,IAAuBC,WAMhBL,Q,kECoBAQ,E,4MAnCbC,SAAWC,IAAgBC,KAAK,G,0DAcpBC,GACV,IAAMC,EAAOpF,KAAKqF,MAAMD,KAGxBD,EAF2BnF,KAAKsF,gBAAkBtF,KAAKqF,MAAME,eAEpCC,cAAc,IACpCC,eAAc,SAACC,EAASC,EAAQC,GAAlB,OAAkCF,EAAQ,wNAA6L,kBAACG,EAAA,EAAD,CAAWjF,GAAItB,IAAO4C,YAAYtB,KAA/N,KAAuO,kBAACiF,EAAA,EAAD,CAAWjF,GAAItB,IAAO6C,YAAYvB,KAAzQ,gBAA4R,kBAACiF,EAAA,EAAD,CAAWjF,GAAItB,IAAOiD,eAAe3B,KAAjU,IAAwU,kBAACiF,EAAA,EAAD,CAAWjF,GAAItB,IAAOoC,gBAAgBd,OACpakF,KAAK,wBACLH,OAAOI,OAAKC,EAAE,iGAA+DC,YAAiBN,OAC9FC,YAH8C,WAG9BK,YAAiBL,GAHa,qBAI9CM,QAAQN,EAAc,KAAMO,MAAMP,EAAc,OAEhDR,GAASA,EAAKgB,MAAMC,2BACvBlB,EAAKnF,KAAKsG,sBACPb,eAAc,SAACC,EAASC,EAAQC,GAAlB,OAAkCF,EAAQ,wNAA6L,kBAACG,EAAA,EAAD,CAAWjF,GAAItB,IAAO4C,YAAYtB,KAA/N,KAAuO,kBAACiF,EAAA,EAAD,CAAWjF,GAAItB,IAAO6C,YAAYvB,KAAzQ,gBAA4R,kBAACiF,EAAA,EAAD,CAAWjF,GAAItB,IAAOiD,eAAe3B,KAAjU,IAAwU,kBAACiF,EAAA,EAAD,CAAWjF,GAAItB,IAAOoC,gBAAgBd,OACpakF,KAAK,wBACLH,OAAOI,OAAKC,EAAE,iGAA+DC,YAAiBN,OAC9FC,YAH8C,WAG9BK,YAAiBL,GAHa,0B,2CAxBrD,MAAO,CACLD,OAAQ3F,KAAKuG,mBACbf,cAAe,CACbgB,MAAO,KACPC,QAAS,KACTN,MAAO,MAETO,MAAOC,IAAeC,gB,GAXEC,K,wFCwEfC,EAxEoB,SAAC,GAAoD,IAAlD/F,EAAiD,EAAjDA,eAAgBhB,EAAiC,EAAjCA,UAAWgH,EAAsB,EAAtBA,WACzDC,EAAqB,SAACC,GAAD,OACzB,kBAACC,EAAA,EAAD,eACEC,YAAU,EACVpG,eAAgBA,EAAeqG,4BAA4BH,EAAM/G,QAC7D+G,KAQR,OACE,kBAAC,IAAD,KACE,kBAACI,EAAA,EAAD,CACEpF,KAAK,oBACLqF,YAAa,kKAA6H,kBAACzB,EAAA,EAAD,CAAWjF,GAAItB,IAAO4C,YAAYtB,KAA/J,KAAuK,kBAACiF,EAAA,EAAD,CAAWjF,GAAItB,IAAO6C,YAAYvB,KAAzM,mBAA+N,kBAACiF,EAAA,EAAD,CAAWjF,GAAItB,IAAOiD,eAAe3B,KAApQ,IAA2Q,kBAACiF,EAAA,EAAD,CAAWjF,GAAItB,IAAOoC,gBAAgBd,OAE9T,kBAAC2G,EAAA,EAAD,CAAatF,KAAK,WAAW8E,WAAYA,EAAWS,mBAEtD,kBAACH,EAAA,EAAD,CACEpF,KAAK,oDACLqF,YACE,yIACqG,IACnG,uBAAGG,KAAK,0FAA0FC,OAAO,SAASC,IAAI,uBAAtH,gBAIJ,kBAACX,EAAD,CAAoB9G,MAAOZ,IAAO4B,aAAaN,KAC/C,kBAACoG,EAAD,CAAoB9G,MAAOZ,IAAOkC,gBAAgBZ,KACjDb,EAAUY,UAAUrB,IAAOa,8BAA8BS,KAC1D,kBAACoG,EAAD,CAAoB9G,MAAOZ,IAAOa,8BAA8BS,KAC/Db,EAAUY,UAAUrB,IAAOkD,+BAA+B5B,KAC3D,kBAACoG,EAAD,CAAoB9G,MAAOZ,IAAOkD,+BAA+B5B,KAChEb,EAAUY,UAAUrB,IAAOmC,qBAAqBb,KACjD,kBAACoG,EAAD,CAAoB9G,MAAOZ,IAAOmC,qBAAqBb,KACtDb,EAAUY,UAAUrB,IAAOkE,iBAAiB5C,KAC7C,kBAACoG,EAAD,CAAoB9G,MAAOZ,IAAOkE,iBAAiB5C,MAErD,kBAACyG,EAAA,EAAD,CACEpF,KAAK,kCACLqF,YACE,6EACwC,kBAACzB,EAAA,EAAD,CAAWjF,GAAItB,IAAOsI,oBAAoBhH,OAIpF,kBAAC2G,EAAA,EAAD,CAAatF,KAAO,oCAAE,kBAAC4D,EAAA,EAAD,CAAWjF,GAAItB,IAAOsI,oBAAoBhH,KAA5C,WAA+DmG,WAAYA,EAAWc,uBAU5G,kBAACC,EAAA,EAAD,CAAiBf,WAAYA,M,mCCNpBgB,E,0KA/BX,OACE,kBAACC,EAAA,EAAD,CAAWhD,SAAUC,IAAgBC,QACnC,kBAAC+C,EAAA,EAAD,CAAsB/H,MAAOZ,IAAOqD,gBAClC,oCACE,kBAACuF,EAAA,EAAD,MADF,IACkBjC,YAAiBjG,KAAKmI,QADxC,IACkD,IAChD,8C,kCAOEhD,GACVA,EAAKnF,KAAKoI,iBAAiB3C,eAAc,SAACC,EAASC,EAAQC,GAAlB,OAAkCF,EACzE,4CACO,kBAACG,EAAA,EAAD,CAAWjF,GAAItB,IAAOsI,oBAAoBhH,KADjD,8DAE+C,IAC7C,kBAACiF,EAAA,EAAD,CAAWjF,GAAItB,IAAOqD,eAAe/B,KAHvC,8EAOCkF,KAAKxG,IAAOsI,oBAAoB9B,MAChCH,OACC,oCACE,kBAACE,EAAA,EAAD,CAAWjF,GAAItB,IAAOsI,oBAAoBhH,KAD5C,mBACmEqF,YAAiBN,GADpF,mBAIDC,YAdwE,uBAc5CK,YAAiBL,GAd2B,W,6BAjC3E,OACE5F,KAAKC,kBAAkBoI,cAAc/I,IAAOsI,oBAAoBhH,IAChEZ,KAAKqF,MAAME,gB,sCAKb,MAAO,CACLI,OAAQ3F,KAAKmI,OACbG,WAAY,CAEV9B,MAAO,IACPC,QAAS,IACTN,MAAO,IAETO,MAAOC,IAAeC,gB,GAjBA2B,KCGtBC,E,4MAYMC,gB,IACA1H,oB,IACA2H,6B,IACAlB,qB,IACAmB,mB,yDAMR,OACE,kBAACC,EAAD,CACE7I,UAAWC,KAAKyI,WAAWI,SAC3B9H,eAAgBf,KAAKe,eACrBgG,WAAU,2BACL/G,KAAK0I,wBAAwB3B,YADxB,IAGRS,gBAAiBxH,KAAKwH,gBAAgBlB,qBACtCuB,oBAAqB7H,KAAK2I,cAAcP,wB,GA9B1BU,KAAlBN,EACGO,aAAe,CACpBN,WAAYO,IACZjI,eAAgBkI,IAChBP,wBAAyBQ,IACzB1B,gBAAiBzC,EACjB4D,cAAeZ,GAkCJS,Q,SCDAW,E,sKA/CX,IAAMpJ,EAAYC,KAAKC,kBAEvB,MAAO,CACL,CACEmJ,QAAS9J,IAAOa,8BAA8BS,GAC9CyI,mBAAmB,GAErB,CACED,QAAS9J,IAAOgK,kBAAkB1I,GAClCyI,mBAAmB,GAErB,CACED,QAAS9J,IAAOuF,WAAWjE,GAC3ByI,mBAAmB,GAErB,CACED,QAAS9J,IAAOwF,8BAA8BlE,GAC9CyI,mBAAmB,GAErB,CACED,QAASG,OAAOC,KAAKC,KAAiBC,KAAI,SAAAC,GAAI,OAAIC,OAAOD,MACzDN,mBAAmB,GAErB,CACED,QAAS9J,IAAOuK,cAAcjJ,GAC9BF,QAASX,EAAUY,UAAUrB,IAAOwK,gBAAgBlJ,IACpDyI,mBAAmB,GAErB,CACED,QAAS9J,IAAOyK,eAAenJ,GAC/BF,QAASX,EAAUY,UAAUrB,IAAO0K,iBAAiBpJ,IACrDyI,mBAAmB,GAErB,CACED,QAAS9J,IAAOkD,+BAA+B5B,GAC/CqJ,mBAAoB3K,IAAOkD,+BAA+B5B,GAC1DyI,mBAAmB,GAErB,CACED,QAAS9J,IAAOsI,oBAAoBhH,GACpCqJ,mBAAoB3K,IAAOqD,eAAe/B,GAC1CyI,mBAAmB,Q,UA3CPa,G,qDCWdC,G,kDASJ,WAAYC,GAAmB,IAAD,8BAC5B,cAAMA,IALEC,iBAIoB,IAFpBC,aAAuB,EAK/B,EAAKC,iBACHC,IAAOC,UAAUC,GAAGC,KACjBzK,MAAMZ,IAAOgK,mBAChB,EAAKsB,uBAGP,EAAKL,iBACHC,IAAOK,KAAKH,GAAGC,KACZzK,MAAMb,GACT,EAAKyL,sCAGP,EAAKP,iBACHC,IAAOO,OAAOL,GAAGC,KACdzK,MAAMT,GACT,EAAKuL,gBAlBqB,E,kEAsBRC,GAChBjL,KAAKqK,YAAYa,aAAa5L,IAAOC,iBAAiBqB,KACxDZ,KAAKqK,YAAYc,YAAY7L,IAAOC,iBAAiBqB,IAGnDZ,KAAKqK,YAAYa,aAAa5L,IAAOE,gBAAgBoB,KACvDZ,KAAKqK,YAAYc,YAAY7L,IAAOE,gBAAgBoB,M,2DAInBqK,GAC9BjL,KAAKC,kBAAkBmL,QAAQ9L,IAAOgK,kBAAkB1I,M,qCAKhDqK,GACRjL,KAAKC,kBAAkBmL,QAAQ9L,IAAOgK,kBAAkB1I,MAI7DZ,KAAKsK,cAAgBe,YAAyBJ,EAtDb,Q,kCA0DjC,OACE,kBAACjD,EAAA,EAAD,CACEhD,SAAUC,IAAgBqG,WAC1BC,KAAK,QACLnL,SAAUoL,IAAmBC,SAE7B,kBAACxD,EAAA,EAAD,CACE/H,MAAOZ,IAAOoM,cAEd,oCACE,kBAACC,GAAA,EAAD,CAAgBC,OAAQ5L,KAAKsK,sB,GAlEd/B,KAArB4B,GACGpB,aAAe,CACpBsB,YAAawB,KAwEF1B,U,UChET2B,G,kDASJ,WAAY1B,GAAmB,IAAD,8BAC5B,cAAMA,IALE2B,aAIoB,IAFpBC,oBAA8B,EAKtC,EAAKC,OAAS,EAAKhM,kBAAkBU,UAAUrB,IAAO4M,sBAAsBtL,IAE5E,EAAK2J,iBACHC,IAAOO,OAAOL,GAAGC,KACdzK,MAAMZ,IAAO4C,aAChB,EAAKiK,oBARqB,E,+DA4BXlB,GACjB,IAAMmB,EAAQpM,KAAK+L,QAAQM,UAAUpB,GAEhCmB,GAAUA,EAAMhB,QAAQ9L,IAAOgN,sBAAsB1L,GAAIqK,EAAMsB,aAIpEvM,KAAKgM,qBAAuBX,YAAyBJ,EApD5B,M,kCAuDf9F,GACVA,EAAKnF,KAAKoI,iBAAiB3C,eAAc,SAACC,EAASC,EAAQC,GAAlB,OAAkCF,EAEvE,4CACO,kBAACG,EAAA,EAAD,CAAWjF,GAAItB,IAAO4M,sBAAsBtL,KADnD,+BAEK,kBAACiF,EAAA,EAAD,CAAWjF,GAAItB,IAAOgN,sBAAsB1L,KAFjD,4BAEgF,kBAACiF,EAAA,EAAD,CAAWjF,GAAItB,IAAO4C,YAAYtB,KAFlH,kIAIkD,kBAACiF,EAAA,EAAD,CAAWjF,GAAItB,IAAO+C,UAAUzB,KAJlF,YAKO,kBAACiF,EAAA,EAAD,CAAWjF,GAAItB,IAAOgN,sBAAsB1L,KALnD,yBASCkF,KAAKxG,IAAO4M,sBAAsBpG,MAClCH,OAAO,oCAAE,kBAACE,EAAA,EAAD,CAAWjF,GAAItB,IAAOgN,sBAAsB1L,KAA9C,mBAAqEqF,YAAiBN,GAAtF,mBACPC,YAbsE,uBAa1CK,YAAiBL,GAbyB,W,kCAkB3E,OACE,kBAACoC,EAAA,EAAD,CACEhD,SAAUC,IAAgBqG,WAC1BC,KAAK,WACLnL,SAAUoL,IAAmBgB,QAC7BC,QACE,kEAC8BC,YAAgB1M,KAAKgM,qBADnD,8BACoG/F,YAAiBjG,KAAKqF,MAAMsH,+BAA+B3M,KAAKgM,sBADpK,OAC8L,+BAIhM,kBAAC/D,EAAA,EAAD,CAAsB/H,MAAOZ,IAAO4M,uBAClC,oCACE,oCAAE,kBAAChE,EAAA,EAAD,MAAF,IAAkBjC,YAAiBjG,KAAKmI,QAAxC,KAAkD,0CAClD,6BACA,kBAACwD,GAAA,EAAD,CAAgBC,OAAQ5L,KAAKgM,sBAAuB,kC,6BA3D5D,OAAOhM,KAAK+L,QAAQ1D,cAAc/I,IAAOgN,sBAAsB1L,IAAMZ,KAAKqF,MAAME,gB,sCAIhF,MAAO,CACLI,OAAQ3F,KAAKmI,OACbG,WAAY,CACV9B,MAAO,IACPC,QAAS,IACTN,MAAO,KAETO,MAAOC,IAAeC,gB,GAjCA2B,KAAtBuD,GACG/C,aAAe,CACpBgD,QAASa,MAuFEd,UCtGTe,GACM,EAoDGC,G,kDArCb,WAAY1C,GAAmB,IAAD,8BAC5B,cAAMA,IAHE2C,qBAA+B,EAKvC,EAAKd,OAAS,EAAKhM,kBAAkBU,UAAUrB,IAAOwK,gBAAgBlJ,IAEtE,EAAK2J,iBACHC,IAAOO,OAAOL,GAAGC,KACdzK,MAAMZ,IAAO+C,WAChB,EAAK2K,kBARqB,E,6DAYb/B,GACVjL,KAAKC,kBAAkBmL,QAAQ9L,IAAOuK,cAAcjJ,MAIzDZ,KAAK+M,sBAAwB1B,YAAyBJ,EAAO4B,O,kCAI7D,OACE,kBAAC7E,EAAA,EAAD,CACEhD,SAAUC,IAAgBqG,WAC1BC,KAAK,WACLnL,SAAUoL,IAAmBgB,SAE7B,kBAACvE,EAAA,EAAD,CAAsB/H,MAAOZ,IAAOwK,iBAClC,oCACE,kBAAC6B,GAAA,EAAD,CAAgBC,OAAQ5L,KAAK+M,uBAAwB,oC,GAjC3CxE,KCZhB0E,GACgB,GAmDPC,G,kDAzCb,WAAY9C,GAAmB,IAAD,8BAC5B,cAAMA,IAHEE,aAAuB,EAK/B,EAAK2B,OAAS,EAAKhM,kBAAkBU,UAAUrB,IAAO6N,sBAAsBvM,IAE5E,EAAK2J,iBACHC,IAAOO,OAAOL,GAAGC,KACdzK,MAAMZ,IAAO8N,iBAChB,EAAKC,UARqB,E,qDAYrBpC,GACP,IAAMqC,EAAYtN,KAAKC,kBAAkBsN,QAAQjO,IAAOkO,oBAAoB5M,IAC5E,GAAK0M,EAAL,CAGA,IAAMG,EAASH,EAAKG,QAAU,EAC9BzN,KAAKsK,cAAgBe,YACnBJ,EACAwC,EAASR,O,kCAKX,OACE,kBAACjF,EAAA,EAAD,CACEhD,SAAUC,IAAgBqG,WAC1BC,KAAK,WACLnL,SAAUoL,IAAmBgB,SAE7B,kBAACvE,EAAA,EAAD,CAAsB/H,MAAOZ,IAAO6N,uBAClC,oCACE,kBAACxB,GAAA,EAAD,CAAgBC,OAAQ5L,KAAKsK,eAAgB,oC,GApC7B/B,K,wCCLtBmF,GACgB,IAkKPC,G,kDAxIb,WAAYvD,GAAmB,IAAD,8BAC5B,cAAMA,IAZEwD,MAAgB,EAWI,EAVpBC,KAAe,EAUK,EATpB9C,OAAiB,EASG,EARpB+C,cAAwB,EAQJ,EAPpBC,WAAqB,EAOD,EANpBC,kBAA4B,EAMR,EALpBC,iBAA2B,EAKP,EAJpBC,6BAAuC,EAInB,EAFpB3B,UAAoB,EAK5B,EAAKN,OAAS,EAAKhM,kBAAkBU,UAAUrB,IAAO0K,iBAAiBpJ,IAEvE,EAAK2J,iBACHC,IAAO2D,eAAezD,GAAGC,KAAiBzK,MAAMZ,IAAO8O,uBACvD,EAAKC,6BAGgC,CACrC/O,IAAO8E,WACP9E,IAAOoC,gBACPpC,IAAO+E,cACP/E,IAAOiD,gBAGa+L,SAAQ,SAAApO,GAC5B,EAAKqK,iBACHC,IAAOK,KAAKH,GAAGC,KAAiBzK,MAAMA,GACtC,EAAKqO,4BAIT,EAAKhE,iBACHC,IAAOK,KAAKH,GAAGC,KACZzK,MAAMZ,IAAO6C,aAChB,EAAKqM,kBAGP,EAAKjE,iBACHC,IAAOO,OAAOL,GAAGC,KACdzK,MAAMZ,IAAO6C,aAChB,EAAKsM,oBAGP,EAAKlE,iBACHC,IAAOkE,WAAWhE,GAAGC,KAAiBzK,MAAMZ,IAAOyK,gBACnD,EAAK4E,mBAGP,EAAKpE,iBACHC,IAAOoE,gBAAgBlE,GAAGC,KAAiBzK,MAAMZ,IAAOyK,gBACxD,EAAK8E,wBA3CqB,E,wEA+CF5D,GAC1BjL,KAAKkO,6BAA+BjD,EAAM6D,Q,gDAI1C,IAAMC,EAAgCC,KAAKC,IAzEO,EA2EhDjP,KAAKkO,8BAEPlO,KAAKkO,8BAAgCa,EAErC,IAAMG,EAAwBF,KAAKC,IACjCF,EAlFa,EAmFA/O,KAAK8N,eAEpB9N,KAAK8N,eAAiBoB,EACtBlP,KAAKgO,mBAAqBkB,EAC1BlP,KAAKiO,kBAAoBc,EAAgCG,I,yCAIpDlP,KAAKC,kBAAkBmL,QAAQ9L,IAAOyK,eAAenJ,MAI1DZ,KAAK8N,eA9FoC,EA+FzC9N,KAAK8N,cAAgB9N,KAAK8N,cAAgB,EAAI,EAAI9N,KAAK8N,cAEvD9N,KAAK4N,OAAS,K,yCAGG3C,GACZjL,KAAKC,kBAAkBmL,QAAQ9L,IAAOyK,eAAenJ,MAI1DZ,KAAK6N,MAAQ,EAEb7N,KAAK+K,QAAUM,YAAyBJ,EA3GC,EA2GMyC,O,6CAG1BzC,GAEM,IAAvBjL,KAAK8N,gBAIT9N,KAAK+N,YAAe/N,KAAK8N,cAAgB7C,EAAM6D,MAC/C9O,KAAK8N,cAAgB7C,EAAM6D,S,0CAKA,IAAvB9O,KAAK8N,gBAIT9N,KAAK+N,YAAc/N,KAAK8N,cACxB9N,KAAK8N,cAAgB,K,kCAIrB,OACE,kBAAC9F,EAAA,EAAD,CACEhD,SAAUC,IAAgBqG,WAC1BC,KAAK,WACLnL,SAAUoL,IAAmBgB,QAC7BC,QACE,4BACE,sCAAQ0C,YAAanP,KAAKgO,mBAA1B,cAAkDmB,YAAanP,KAAKgO,kBAAoBhO,KAAKiO,kBAA7F,0CAAgJjO,KAAKiO,iBAArJ,aACA,sCAAQkB,YAAanP,KAAKgO,kBAAoBhO,KAAK+N,YAAnD,cAAoEoB,YAAanP,KAAKgO,mBAAtF,yBAAyHhO,KAAK+N,WAA9H,mCAIJ,kBAAC9F,EAAA,EAAD,CAAsB/H,MAAOZ,IAAO0K,kBAClC,oCACE,kBAAC2B,GAAA,EAAD,CAAgBC,OAAQ5L,KAAK+K,OAAQqE,aAAW,IAAG,6BACnD,kBAACC,GAAA,EAAD,CAAmBzB,MAAO5N,KAAK4N,MAAOC,KAAM7N,KAAK6N,OAAQ,6BACzD,oCACG5H,aAAkBjG,KAAKgO,kBAAoBhO,KAAK+N,aAAe/N,KAAKgO,kBAAoBhO,KAAKiO,mBAAoB,KAClH,sD,GA3IU1F,K,UC0BT+G,G,kDAnCb,WAAYlF,GAAmB,IAAD,8BAC5B,cAAMA,IAJEmF,aAAuB,EAGH,EAFpBC,UAAoB,EAK5B,EAAKvD,OAAS,EAAKhM,kBAAkBU,UAAUrB,IAAOmQ,wBAAwB7O,IAE9E,EAAK2J,iBACHC,IAAOkF,KAAKhF,GAAGC,KACZzK,MAAMZ,IAAOqQ,uBAChB,EAAKC,uBARqB,E,kEAYR3E,GACpBjL,KAAKwP,WAAa,EAClBxP,KAAKuP,cAAgBtE,EAAMW,S,kCAK3B,OACE,kBAAC5D,EAAA,EAAD,CACEhD,SAAUC,IAAgBqG,SAAS,KACnCC,KAAK,QACLnL,SAAUoL,IAAmBgB,SAE7B,kBAACvE,EAAA,EAAD,CAAsB/H,MAAOZ,IAAOmQ,yBAClC,oCACE,kBAACI,GAAA,EAAD,CAAiBjE,OAAQ5L,KAAKuP,sB,GA/BZhH,KCuCfuH,G,kDAjCb,WAAY1F,GAAmB,IAAD,8BAC5B,cAAMA,IAHEE,aAAuB,EAK/B,EAAK2B,OAAS,EAAKhM,kBAAkBU,UAAUrB,IAAOyQ,sBAAsBnP,IAE5E,EAAK2J,iBACHC,IAAOO,OAAOL,GAAGC,KACdzK,MAAMZ,IAAO0Q,uBAChB,EAAK3C,UARqB,E,qDAYrBpC,GACPjL,KAAKsK,cAAgBW,EAAMW,QAAUX,EAAMgF,UAAY,K,kCAIvD,OACE,kBAACjI,EAAA,EAAD,CACEhD,SAAUC,IAAgBqG,WAC1BC,KAAK,WACLnL,SAAUoL,IAAmBgB,SAE7B,kBAACvE,EAAA,EAAD,CAAsB/H,MAAOZ,IAAOyQ,uBAClC,oCACE,kBAACpE,GAAA,EAAD,CAAgBC,OAAQ5L,KAAKsK,sB,GA5Bb/B,KCiDb2H,G,kDA7Cb,WAAY9F,GAAmB,IAAD,8BAC5B,cAAMA,IALEE,aAAuB,EAIH,EAHpBsD,MAAgB,EAGI,EAFpBC,KAAe,EAKvB,EAAK5B,OAAS,EAAKhM,kBAAkBU,UAAUrB,IAAOkE,iBAAiB5C,IAEvE,EAAK2J,iBACHC,IAAOK,KAAKH,GAAGC,KACZzK,MAAMZ,IAAOkE,kBAChB,EAAK2M,QAGP,EAAK5F,iBACHC,IAAOO,OAAOL,GAAGC,KACdzK,MAAMZ,IAAOkE,kBAChB,EAAK6J,UAdqB,E,qDAkBrBpC,GACPjL,KAAK6N,MAAQ,EACb7N,KAAKsK,cAAgBW,EAAMW,QAAUX,EAAMgF,UAAY,K,6BAGlDhF,GACLjL,KAAK4N,OAAS,I,kCAId,OACE,kBAAC5F,EAAA,EAAD,CACEhD,SAAUC,IAAgBqG,WAC1BC,KAAK,WACLnL,SAAUoL,IAAmBgB,SAE7B,kBAACvE,EAAA,EAAD,CAAsB/H,MAAOZ,IAAOkE,kBAClC,oCACE,kBAACmI,GAAA,EAAD,CAAgBC,OAAQ5L,KAAKsK,eAAgB,6BAC7C,kBAAC+E,GAAA,EAAD,CAAmBzB,MAAO5N,KAAK4N,MAAOC,KAAM7N,KAAK6N,c,GA1CrCtF,KCPlB6H,GAAkB,CACtB9Q,IAAO+Q,wBACP/Q,IAAOiD,eACPjD,IAAOgR,yBACPhR,IAAOoC,iBA6DM6O,G,kDAhDb,WAAYnG,GAAmB,IAAD,8BAC5B,cAAMA,IAHEoG,wBAAkC,EAK1C,EAAKvE,OAAS,EAAKhM,kBAAkBU,UAAUrB,IAAOkD,+BAA+B5B,IAErFwP,GAAgB9B,SAAQ,SAAAmC,GACtB,EAAKlG,iBACHC,IAAOO,OAAOL,GAAGC,KACdzK,MAAMuQ,GACT,EAAKC,kBATmB,E,0DAsBhBzF,GACPjL,KAAKC,kBAAkBmL,QAAQ9L,IAAOkD,+BAA+B5B,MAI1EZ,KAAKwQ,yBAA2BvF,EAAMW,U,kCAItC,OACE,kBAAC5D,EAAA,EAAD,CACEhD,SAAUC,IAAgBqG,WAC1BlL,SAAUoL,IAAmBgB,QAC7BjB,KAAK,WACLkB,QAAO,mCAA8B0C,YAAanP,KAAKwQ,yBAAhD,oBAAoFvK,YAAiBjG,KAAK2Q,eAA1G,sBAEP,kBAAC1I,EAAA,EAAD,CAAsB/H,MAAOZ,IAAOkD,gCAClC,oCACE,kBAACmJ,GAAA,EAAD,CAAgBC,OAAQ5L,KAAKwQ,0BAA2B,kC,oCAzBhE,OAAOxQ,KAAKqF,MAAMsH,+BAA+B3M,KAAKwQ,2B,sCAItD,OAAOxQ,KAAKwQ,yBAA2BxQ,KAAKqF,MAAME,cAAgB,S,GAtB5CgD,K,UCZpBqI,GACM,GAWNC,G,kDASJ,WAAYzG,GAAmB,IAAD,8BAC5B,cAAMA,IALE2B,aAIoB,IAFpBzB,aAAuB,EAK/B,EAAK2B,OAAS,EAAKhM,kBAAkBU,UAAUrB,IAAOmC,qBAAqBb,IAE3E,EAAK2J,iBACHC,IAAOO,OAAOL,GAAGC,KACdzK,MAAMZ,IAAOmC,sBAChB,EAAKqP,sBAGP,EAAKvG,iBACHC,IAAOO,OAAOL,GAAGC,KACjB,EAAKoG,aAbqB,E,iEAwBT9F,GACnBjL,KAAKsK,cAAgBW,EAAMW,QAAUX,EAAMgF,UAAY,K,kCAG7ChF,GACV,IAAMmB,EAAQpM,KAAK+L,QAAQM,UAAUpB,GAChCmB,GAIAA,EAAMhB,QAAQ9L,IAAOmC,qBAAqBb,KAI1CZ,KAAKgR,cAAcC,SAAShG,EAAMiG,QAAQC,QAI/CnR,KAAKsK,cAAgBe,YAAyBJ,EAAO2F,O,kCAIrD,OACE,kBAAC5I,EAAA,EAAD,CACEhD,SAAUC,IAAgBqG,WAC1BC,KAAK,WACLnL,SAAUoL,IAAmBgB,SAE7B,kBAACvE,EAAA,EAAD,CAAsB/H,MAAOZ,IAAOmC,sBAClC,oCACE,kBAACkK,GAAA,EAAD,CAAgBC,OAAQ5L,KAAKsK,oB,oCApCrC,MAAO,CACL8G,KAAcC,IAAIC,SAClBF,KAAcC,IAAIE,Y,GA7BGhJ,KAArBsI,GACG9H,aAAe,CACpBgD,QAASa,MAqEEiE,U,+BClFTW,GAAoB,CACxBlS,IAAOI,mBAAmBkB,GAC1BtB,IAAOM,kBAAkBgB,IAGrB6Q,GACI,IAUJC,G,kDAWJ,WAAYtH,GAAmB,IAAD,8BAC5B,cAAMA,IAPEuH,kBAMoB,IALpBC,oBAKoB,IAHpBC,UAAoB,EAGA,EAFpBC,YAAsB,EAK9B,EAAK7F,OAAS,EAAKhM,kBAAkBU,UAAUrB,IAAOyS,mBAAmBnR,IAEzE,EAAK2J,iBACHC,IAAOO,OAAOL,GAAGC,KACdzK,MAAMT,GACT,EAAKuS,qBARqB,E,gEAsBV/G,GACFjL,KAAK2R,aAAaM,KAAK,EAAGR,GAAoBjH,IAAOO,OAAOL,GAAGC,KAAiBzK,MAAMT,IACzFyS,SAITV,GAAkBP,SAAShG,EAAMiG,QAAQiB,QAC3CnS,KAAK6R,WAAa,GAGpB7R,KAAK8R,aAAe7G,EAAMW,QAAUX,EAAMgF,UAAY,M,kCAItD,OACE,kBAACjI,EAAA,EAAD,CACEhD,SAAUC,IAAgBqG,WAC1BlL,SAAUoL,IAAmBgB,QAC7BjB,KAAK,WACLkB,QAAO,kBAAazM,KAAK6R,UAAlB,6BAAgD7R,KAAKC,kBAAkBU,UAAUrB,IAAOa,+BAAxC,iBAAhD,mBAAsJ8F,YAAiBjG,KAAK6R,UAAY7R,KAAKoS,uBAA7L,QAEP,kBAACnK,EAAA,EAAD,CAAsB/H,MAAOZ,IAAOyS,oBAClC,oCACE,kBAACpG,GAAA,EAAD,CAAgBC,OAAQ5L,KAAK8R,cAAe,kC,4CAjCzB,IAAD,OACtBlE,EAAQ,EAMZ,OAJAvO,EAAwBiP,SAAQ,SAAApO,GAC9B0N,GAAS,EAAKgE,eAAeS,WAAWnS,EAAMU,IAAIgN,OAAS,KAGtDA,M,GA9BerF,KAApBmJ,GACG3I,aAAe,CACpB4I,aAAcW,KACdV,eAAgBW,MA6DLb,UC1ETc,G,kDASJ,WAAYpI,GAAmB,IAAD,8BAC5B,cAAMA,IANEC,iBAKoB,IAHpBuD,MAAgB,EAGI,EAFpB6E,gBAA0B,EAKlC,EAAKxG,OAAS,EAAKhM,kBAAkBU,UAAUrB,IAAOoE,kBAAkB9C,IAExE,EAAK2J,iBACHC,IAAOO,OAAOL,GAAGC,KACdzK,MAAMZ,IAAOoE,mBAChB,EAAKgP,mBARqB,E,gEAa5B1S,KAAK4N,OAAS,EAEV5N,KAAKqK,YAAYa,aAAa5L,IAAO4C,YAAYtB,MACnDZ,KAAKyS,iBAAmBzS,KAAKqK,YAAYsI,kBAAkBrT,IAAO4C,YAAYtB,IAC9EZ,KAAKqK,YAAYc,YAAY7L,IAAO4C,YAAYtB,O,kCAKlD,IAAMgS,EAAgC5S,KAAKyS,gBAAkB,IAE7D,OACE,kBAACzK,EAAA,EAAD,CACEhD,SAAUC,IAAgBqG,WAC1BC,KAAK,WACLnL,SAAUoL,IAAmBgB,QAC7BC,QAAO,8BAAyBzM,KAAK4N,MAA9B,2DAAsFuB,YAAayD,GAAnG,cAEP,kBAAC3K,EAAA,EAAD,CAAsB/H,MAAOZ,IAAOoE,mBAClC,oCACGyL,YAAayD,EAAgC5S,KAAK4N,OADrD,KAC8D,wE,GA1ChDrF,KAAlBiK,GACGzJ,aAAe,CACpBsB,YAAawB,KAgDF2G,UCFAK,G,kDA7Cb,WAAYzI,GAAmB,IAAD,8BAC5B,cAAMA,IALEwD,MAAgB,EAII,EAHpBC,KAAe,EAGK,EAFpBiF,eAAyB,EAKjC,EAAK7G,OAAS,EAAKhM,kBAAkBU,UAAUrB,IAAOmE,iBAAiB7C,IAEvE,EAAK2J,iBACHC,IAAOK,KAAKH,GAAGC,KACZzK,MAAMZ,IAAOmE,kBAChB,EAAKsP,gBAGP,EAAKxI,iBACHC,IAAOO,OAAOL,GAAGC,KACdzK,MAAMZ,IAAO0T,kBAChB,EAAKC,kBAdqB,E,6DAmB5BjT,KAAK4N,OAAS,I,uCAGC3C,GACfjL,KAAK6N,MAAQ,EACb7N,KAAK8S,gBAAkB7H,EAAMW,QAAUX,EAAMgF,UAAY,K,kCAIzD,OACE,kBAACjI,EAAA,EAAD,CACEhD,SAAUC,IAAgBqG,WAC1BC,KAAK,WACLnL,SAAUoL,IAAmBgB,SAE7B,kBAACvE,EAAA,EAAD,CAAsB/H,MAAOZ,IAAOmE,kBAClC,oCACE,kBAACkI,GAAA,EAAD,CAAgBC,OAAQ5L,KAAK8S,iBAAkB,6BAC/C,kBAACzD,GAAA,EAAD,CAAmBzB,MAAO5N,KAAK4N,MAAOC,KAAM7N,KAAK6N,c,GA1CtCtF,K,UCLjB2K,GACM,IAGN1B,GAAoB,CACxBlS,IAAOI,mBAAmBkB,GAC1BtB,IAAOM,kBAAkBgB,IA2DZuS,G,kDA5Cb,WAAY/I,GAAmB,IAAD,8BAC5B,cAAMA,IALEE,aAAuB,EAIH,EAHpB8I,sBAAgC,EAGZ,EAFpBC,sBAAgC,EAKxC,EAAKpH,OAAS,EAAKhM,kBAAkBU,UAAUrB,IAAOgU,yBAAyB1S,IAE/E,EAAK2J,iBACHC,IAAOO,OAAOL,GAAGC,KACdzK,MAAMT,GACT,EAAKuS,qBARqB,E,gEAYV/G,GAClBjL,KAAKsK,cAAgBe,YAAyBJ,EAAOiI,IAGjD1B,GAAkBP,SAAShG,EAAMiG,QAAQiB,QAC3CnS,KAAKoT,uBAAyB,GAGhC,IAAMG,EAAsBvT,KAAKC,kBAAkBsN,QAAQjO,IAAO8O,sBAAsBxN,IACpD,MAAb,OAAnB2S,QAAmB,IAAnBA,OAAA,EAAAA,EAAqB9F,UACvBzN,KAAKqT,uBAAyB,K,kCAKhC,OACE,kBAACrL,EAAA,EAAD,CACEhD,SAAUC,IAAgBqG,WAC1BlL,SAAUoL,IAAmBgB,QAC7BjB,KAAK,YAEL,kBAACtD,EAAA,EAAD,CAAsB/H,MAAOZ,IAAOgU,0BAClC,oCACE,kBAAC3H,GAAA,EAAD,CAAgBC,OAAQ5L,KAAKsK,eAAgB,6BAC7C,kBAACkJ,GAAA,EAAD,CAAmB5H,OAAQ5L,KAAKoT,sBAAuBK,OAAQzT,KAAKqT,sBAAuBK,aAAcpU,IAAO8O,wBAAyB,oC,GAzCtH7F,KCnBzBrH,GAC2B,EAD3BA,GAE4B,IAF5BA,GAGgC,EAHhCA,GAIkC,KA8CzByS,G,kDAxCb,WAAYvJ,GAAmB,IAAD,8BAC5B,cAAMA,IAHEgJ,sBAAgC,EAKxC,EAAK7I,iBACHC,IAAOK,KAAKH,GAAGC,KACZzK,MAAMZ,IAAO4B,cAChB,EAAK0S,mBANqB,E,8DAUZ3I,GAChB,IAAM4I,EACJ3S,GACAA,IACCA,GAAoDA,IAEvDlB,KAAKoT,uBAAyBS,I,kCAI9B,OACE,kBAAC7L,EAAA,EAAD,CACEhD,SAAUC,IAAgBqG,WAC1BC,KAAK,WACLnL,SAAUoL,IAAmBC,SAE7B,kBAACxD,EAAA,EAAD,CAAsB/H,MAAOZ,IAAO4B,cAClC,oCACE,kBAACsS,GAAA,EAAD,CACE5H,OAAQ5L,KAAKoT,sBACbM,aAAcpU,IAAO8O,sBACrBgB,aAAW,W,GAlCC7G,K,UChBbuL,GAAb,WAIE,WAAYvH,GAAoB,yBAHtBwH,eAGqB,OAFrBC,aAA8BhS,EAGtChC,KAAK+T,UAAYxH,EALrB,gDAuBMA,GACFvM,KAAKgU,QAAUzH,IAxBnB,+BASI,YAAqBvK,IAAjBhC,KAAKgU,QAKA,EAEFhU,KAAKgU,QAAUhU,KAAK+T,YAhB/B,4BAoBI,YAAwB/R,IAAjBhC,KAAKgU,YApBhB,KCEaC,GAAb,WAGE,aAAe,yBAFLC,eAEI,EACZlU,KAAKkU,UAAY,GAJrB,0DAoBgB3H,GACRvM,KAAKmU,0BAQTnU,KAAKkU,UAAUE,KAAK,IAAIN,GAASvH,MA7BrC,kCAgCcA,GACLvM,KAAKmU,0BAQVnU,KAAKkU,UAAUlU,KAAKkU,UAAUhC,OAAS,GAAGmC,IAAI9H,KAzClD,oCAQI,OAAOvM,KAAKkU,UAAUI,QAAO,SAACC,EAAKC,GAAN,OAAmBD,EAAMC,EAASC,WAAU,KAR7E,+CAYI,IAAMvC,EAASlS,KAAKkU,UAAUhC,OAC9B,OAAe,IAAXA,IAIIlS,KAAKkU,UAAUhC,EAAS,GAAGwC,UAjBvC,KCYMC,GAAqC,CACzCrV,IAAO8E,WACP9E,IAAOoC,gBACPpC,IAAO+E,cACP/E,IAAOiD,gBAyIMqS,G,kDA5Hb,WAAYxK,GAAmB,IAAD,8BAC5B,cAAMA,IATEyK,aAAe,EAQK,EAPpBC,WAAa,EAOO,EANpBC,cAAgB,EAMI,EAJpBjH,cAAgB,EAII,EAFpBkH,qBAEoB,EAG5B,EAAKA,gBAAkB,IAAIf,GAE3B,EAAK1J,iBACHC,IAAOC,UAAUC,GAAGC,KAAiBzK,MAAMZ,IAAO8O,uBAClD,EAAK6G,gBAGP,EAAK1K,iBACHC,IAAO2D,eAAezD,GAAGC,KAAiBzK,MAAMZ,IAAO8O,uBACvD,EAAK8G,qBAGP,EAAK3K,iBACHC,IAAOkE,WAAWhE,GAAGC,KAAiBzK,MAAMZ,IAAO8O,uBACnD,EAAK+G,iBAIP,EAAK5K,iBACHC,IAAOoE,gBAAgBlE,GAAGC,KAAiBzK,MAAMZ,IAAO8O,uBACxD,EAAKgH,aAGP,EAAK7K,iBACHC,IAAOK,KAAKH,GAAGC,KAAiBzK,MAAMyU,IACtC,EAAKU,4BA5BqB,E,2DAoCf9I,GACbvM,KAAKgV,gBAAgBM,cAAc/I,K,0CAGjBA,GAClBvM,KAAKgV,gBAAgBO,YAAYhJ,K,iDAIRtB,GACzB,IAAM6J,EAAa9F,KAAKC,IACtBjP,KAAK8N,cAjEuB,GAqEX,IAAfgH,IAIJ9U,KAAK8U,YAAcA,EA1EJ,KA4EX9U,KAAK8N,eACP9N,KAAKwV,oBAAoBvK,EAAMsB,WAGjCvM,KAAK8N,eAAiBgH,K,qCAGT7J,GACbjL,KAAK8N,cAAgB,EACrB9N,KAAK6U,cAAgB,I,0CAGH5J,GACdjL,KAAK8N,cAAgB,IAAM7C,EAAM6D,QAKrC9O,KAAK8N,cAAgB7C,EAAM6D,MAC3B9O,KAAK6U,cAAgB,EA/FN,KAiGX7U,KAAK8N,eACP9N,KAAKyV,eAAexK,EAAMsB,c,sCAIdtB,GACa,IAAvBjL,KAAK8N,gBAvGM,KA4GX9N,KAAK8N,eACP9N,KAAKwV,oBAAoBvK,EAAMsB,WAGjCvM,KAAK+U,eAAiB/U,KAAK8N,cAC3B9N,KAAK8N,cAAgB,K,kCAGX7C,GACNjL,KAAK8N,cAAkB7C,EAAM6D,MArHlB,KAwHX9O,KAAK8N,eACP9N,KAAKwV,oBAAoBvK,EAAMsB,WAGjCvM,KAAK8N,cAAgB7C,EAAM6D,Q,kCAI3B,OAAO,kBAAC9G,EAAA,EAAD,CACLhD,SAAUC,IAAgBC,OAC1BqG,KAAK,WACLkB,QAAS,kDACKzM,KAAK6U,aADV,qCAC0D7U,KAAK8U,aAGxE,kBAAC7M,EAAA,EAAD,CAAsB/H,MAAOZ,IAAOoW,kBAClC,kBAACxN,EAAA,EAAD,MADF,IACkBjC,YAAiBjG,KAAK2V,qCADxC,KAC+E,2DAAuC,6BACnH1P,YAAiBjG,KAAK8U,WAAa9U,KAAK6U,cAF3C,KAE2D,qD,0DArF7D,OAAO7U,KAAKgV,gBAAgBY,cAAgB5V,KAAKqF,MAAME,kB,GA1C7BgD,KCYxBsN,G,4HAAwBC,KAAxBD,GACGE,YAAc,CAEnBC,eAAgBC,IAChBC,YAAaC,IAQbC,aAAcjM,GACdkM,YAAa1C,GAGbnM,gBAAiBzC,EACjBuR,UAAWxW,EACXyW,MAAOpN,EACPqN,UAAWhO,EACXiO,0BAA2BlS,EAC3BmS,WAAYC,KACZhO,cAAeZ,EACf6O,gBAAiBhC,GAGjBiC,cAAe/K,GACfgL,cAAe5J,GACf6J,eAAgBC,KAChBC,YAAavF,GACbwF,QAASpK,GACTqK,UAAW3E,GACX4E,WAAYC,KACZC,YAAaC,KACbC,aAAcC,KACdC,iBAAkBvE,GAClBwE,UAAWhK,GACXiK,SAAU/E,GACVgF,gBAAiBvI,GACjBwI,cAAehI,GACfiI,YAAaxH,GACbyH,UAAW9H,GAEX+H,aAAcpH,IASHgF,c,iCCxFf,oBAGMxG,EAAoB,SAAApI,GAAU,IAC1B2G,EAAqC3G,EAArC2G,MAAOC,EAA8B5G,EAA9B4G,KAAMqK,EAAwBjR,EAAxBiR,OAAQ9I,EAAgBnI,EAAhBmI,YACvB+I,EAAetK,EAAOD,GAAU,EACtC,OACE,oCACGwB,GAAe,SAAK+I,EAAYC,QAAQ,GAD3C,IAC+C,mCAASF,EAAS,qBAAuB,UAAzC,IAAqDA,EAAS,GAAqB,IAAhBC,EAAoB,MAAQ,OAA/F,eAYpC9I,MAEfA,EAAkBgJ,aAAe,CAC/BjJ,aAAa,EACb8I,QAAQ","file":"static/js/EnhancementShaman.f6ebc78e.chunk.js","sourcesContent":["import SPELLS from 'common/SPELLS/shaman';\r\n\r\nexport const STORMSTRIKE_CAST_SPELLS = [\r\n  SPELLS.STORMSTRIKE_CAST,\r\n  SPELLS.WINDSTRIKE_CAST,\r\n];\r\n\r\nexport const STORMSTRIKE_DAMAGE_SPELLS = [\r\n  SPELLS.STORMSTRIKE_DAMAGE,\r\n  SPELLS.STORMSTRIKE_DAMAGE_OFFHAND,\r\n  SPELLS.WINDSTRIKE_DAMAGE,\r\n  SPELLS.WINDSTRIKE_DAMAGE_OFFHAND,\r\n];\r\n\r\nexport const STORMSTRIKE_COEFFICIENT = 1.074; // 107.4%\r\n","import SPELLS from 'common/SPELLS';\r\nimport CoreAbilities from 'parser/core/modules/Abilities';\r\nimport { SpellbookAbility } from 'parser/core/modules/Ability';\r\n\r\nimport { STORMSTRIKE_CAST_SPELLS } from '../constants';\r\n\r\nclass Abilities extends CoreAbilities {\r\n  spellbook(): SpellbookAbility[] {\r\n    const combatant = this.selectedCombatant;\r\n    return [\r\n      {\r\n        spell: SPELLS.ASCENDANCE_TALENT_ENHANCEMENT,\r\n        category: Abilities.SPELL_CATEGORIES.COOLDOWNS,\r\n        cooldown: 180,\r\n        gcd: {\r\n          base: 1500,\r\n        },\r\n        enabled: combatant.hasTalent(SPELLS.ASCENDANCE_TALENT_ENHANCEMENT.id),\r\n        damageSpellIds: [SPELLS.ASCENDANCE_INITIAL_DAMAGE.id],\r\n        castEfficiency: {\r\n          suggestion: true,\r\n          recommendedEfficiency: 1.0,\r\n        },\r\n      },\r\n      {\r\n        spell: SPELLS.FERAL_SPIRIT,\r\n        buffSpellId: [ //Feral Spirit isn't an actual buff, so we can only show the Elemental\r\n          // Spirits buffs\r\n          SPELLS.ELEMENTAL_SPIRITS_BUFF_MOLTEN_WEAPON.id,\r\n          SPELLS.ELEMENTAL_SPIRITS_BUFF_ICY_EDGE.id,\r\n          SPELLS.ELEMENTAL_SPIRITS_BUFF_CRACKLING_SURGE.id,\r\n        ],\r\n        category: Abilities.SPELL_CATEGORIES.COOLDOWNS,\r\n        cooldown: combatant.hasTalent(SPELLS.ELEMENTAL_SPIRITS_TALENT) ? 90 : 120,\r\n        gcd: {\r\n          base: 1500,\r\n        },\r\n        castEfficiency: {\r\n          suggestion: true,\r\n        },\r\n      },\r\n      {\r\n        spell: SPELLS.EARTH_ELEMENTAL,\r\n        category: Abilities.SPELL_CATEGORIES.COOLDOWNS,\r\n        cooldown: 300,\r\n        gcd: {\r\n          base: 1500,\r\n        },\r\n        castEfficiency: {\r\n          suggestion: false,\r\n        },\r\n      },\r\n      {\r\n        spell: SPELLS.EARTHEN_SPIKE_TALENT,\r\n        category: Abilities.SPELL_CATEGORIES.COOLDOWNS,\r\n        enabled: combatant.hasTalent(SPELLS.EARTHEN_SPIKE_TALENT.id),\r\n        cooldown: 20,\r\n        gcd: {\r\n          base: 1500,\r\n        },\r\n        castEfficiency: {\r\n          suggestion: true,\r\n        },\r\n      },\r\n      {\r\n        spell: SPELLS.CHAIN_LIGHTNING,\r\n        category: Abilities.SPELL_CATEGORIES.ROTATIONAL_AOE,\r\n        gcd: {\r\n          base: 1500,\r\n        },\r\n      },\r\n      {\r\n        spell: SPELLS.ELEMENTAL_BLAST_TALENT,\r\n        category: Abilities.SPELL_CATEGORIES.ROTATIONAL,\r\n        enabled: combatant.hasTalent(SPELLS.ELEMENTAL_BLAST_TALENT.id),\r\n        cooldown: 12,\r\n        gcd: {\r\n          base: 1500,\r\n        },\r\n        castEfficiency: {\r\n          suggestion: true,\r\n          recommendedEfficiency: 0.6,\r\n        },\r\n      },\r\n      {\r\n        spell: SPELLS.WIND_SHEAR,\r\n        category: Abilities.SPELL_CATEGORIES.OTHERS,\r\n        cooldown: 12,\r\n        gcd: undefined,\r\n      },\r\n      {\r\n        name: `${SPELLS.FLAME_SHOCK.name} / ${SPELLS.FROST_SHOCK.name}`,\r\n        spell: [SPELLS.FROST_SHOCK, SPELLS.FLAME_SHOCK],\r\n        category: Abilities.SPELL_CATEGORIES.ROTATIONAL,\r\n        cooldown: haste => 6 / (1 + haste),\r\n        gcd: {\r\n          base: 1500,\r\n        },\r\n      },\r\n      {\r\n        spell: STORMSTRIKE_CAST_SPELLS,\r\n        category: Abilities.SPELL_CATEGORIES.ROTATIONAL,\r\n        cooldown: haste => 7.5 / (1 + haste),\r\n        gcd: {\r\n          base: 1500,\r\n        },\r\n      },\r\n      {\r\n        spell: SPELLS.LAVA_LASH,\r\n        category: Abilities.SPELL_CATEGORIES.ROTATIONAL,\r\n        gcd: {\r\n          base: 1500,\r\n        },\r\n        cooldown: haste => 12 / (1 + haste),\r\n      },\r\n      {\r\n        spell: SPELLS.CRASH_LIGHTNING,\r\n        category: Abilities.SPELL_CATEGORIES.ROTATIONAL,\r\n        gcd: {\r\n          base: 1500,\r\n        },\r\n        cooldown: haste => 9 / (1 + haste),\r\n      },\r\n      {\r\n        spell: SPELLS.LIGHTNING_BOLT,\r\n        category: Abilities.SPELL_CATEGORIES.ROTATIONAL,\r\n        gcd: {\r\n          base: 1500,\r\n        },\r\n      },\r\n      {\r\n        spell: SPELLS.STORMKEEPER_TALENT_ENHANCEMENT,\r\n        category: Abilities.SPELL_CATEGORIES.COOLDOWNS,\r\n        cooldown: 60,\r\n        gcd: {\r\n          base: 1500,\r\n        },\r\n        enabled: combatant.hasTalent(SPELLS.STORMKEEPER_TALENT_ENHANCEMENT.id),\r\n        castEfficiency: {\r\n          suggestion: true,\r\n          recommendedEfficiency: 0.9,\r\n        },\r\n      },\r\n      {\r\n        spell: SPELLS.FERAL_LUNGE_TALENT,\r\n        enabled: combatant.hasTalent(SPELLS.FERAL_LUNGE_TALENT),\r\n        category: Abilities.SPELL_CATEGORIES.UTILITY,\r\n        cooldown: 30,\r\n        gcd: {\r\n          base: 1500,\r\n        },\r\n      },\r\n      {\r\n        spell: SPELLS.WINDFURY_TOTEM,\r\n        category: Abilities.SPELL_CATEGORIES.ROTATIONAL,\r\n        gcd: {\r\n          base: 1000,\r\n        },\r\n        castEfficiency: {\r\n          suggestion: true,\r\n          recommendedEfficiency: 1,\r\n        },\r\n      },\r\n      {\r\n        spell: SPELLS.SPIRIT_WALK,\r\n        category: Abilities.SPELL_CATEGORIES.UTILITY,\r\n        cooldown: 60,\r\n        gcd: undefined,\r\n      },\r\n      {\r\n        spell: SPELLS.GHOST_WOLF,\r\n        category: Abilities.SPELL_CATEGORIES.UTILITY,\r\n        gcd: {\r\n          base: 1500,\r\n        },\r\n      },\r\n      {\r\n        spell: SPELLS.CAPACITOR_TOTEM,\r\n        category: Abilities.SPELL_CATEGORIES.UTILITY,\r\n        gcd: {\r\n          base: 1500,\r\n        },\r\n        cooldown: 60,\r\n      },\r\n      {\r\n        spell: SPELLS.EARTHBIND_TOTEM,\r\n        category: Abilities.SPELL_CATEGORIES.UTILITY,\r\n        gcd: {\r\n          base: 1500,\r\n        },\r\n        cooldown: 30,\r\n      },\r\n      {\r\n        spell: SPELLS.TREMOR_TOTEM,\r\n        category: Abilities.SPELL_CATEGORIES.UTILITY,\r\n        gcd: {\r\n          base: 1500,\r\n        },\r\n        cooldown: 60,\r\n      },\r\n      {\r\n        spell: SPELLS.WIND_RUSH_TOTEM_TALENT,\r\n        category: Abilities.SPELL_CATEGORIES.UTILITY,\r\n        enabled: combatant.hasTalent(SPELLS.WIND_RUSH_TOTEM_TALENT),\r\n        gcd: {\r\n          base: 1500,\r\n        },\r\n        cooldown: 120,\r\n      },\r\n      {\r\n        spell: SPELLS.PURGE,\r\n        category: Abilities.SPELL_CATEGORIES.UTILITY,\r\n        gcd: {\r\n          base: 1500,\r\n        },\r\n      },\r\n      {\r\n        spell: SPELLS.HEX,\r\n        category: Abilities.SPELL_CATEGORIES.UTILITY,\r\n        cooldown: 20,\r\n        gcd: {\r\n          base: 1500,\r\n        },\r\n      },\r\n      {\r\n        spell: SPELLS.CLEANSE_SPIRIT,\r\n        category: Abilities.SPELL_CATEGORIES.UTILITY,\r\n        cooldown: 8,\r\n        gcd: {\r\n          base: 1500,\r\n        },\r\n      },\r\n      {\r\n        spell: SPELLS.ASTRAL_SHIFT,\r\n        buffSpellId: SPELLS.ASTRAL_SHIFT.id,\r\n        cooldown: 90,\r\n        category: Abilities.SPELL_CATEGORIES.DEFENSIVE,\r\n        isDefensive: true,\r\n      },\r\n      {\r\n        spell: SPELLS.SUNDERING_TALENT,\r\n        category: Abilities.SPELL_CATEGORIES.ROTATIONAL,\r\n        gcd: {\r\n          base: 1500,\r\n        },\r\n        enabled: combatant.hasTalent(SPELLS.SUNDERING_TALENT.id),\r\n        cooldown: 40,\r\n      },\r\n      {\r\n        spell: SPELLS.FIRE_NOVA_TALENT,\r\n        category: Abilities.SPELL_CATEGORIES.ROTATIONAL_AOE,\r\n        gcd: {\r\n          base: 1500,\r\n        },\r\n        enabled: combatant.hasTalent(SPELLS.FIRE_NOVA_TALENT.id),\r\n        cooldown: haste => 15 / (1 + haste),\r\n      },\r\n      {\r\n        spell: SPELLS.ICE_STRIKE_TALENT,\r\n        category: Abilities.SPELL_CATEGORIES.ROTATIONAL,\r\n        gcd: {\r\n          base: 1500,\r\n        },\r\n        enabled: combatant.hasTalent(SPELLS.ICE_STRIKE_TALENT.id),\r\n        cooldown: haste => 15 / (1 + haste),\r\n      },\r\n      {\r\n        spell: SPELLS.LIGHTNING_SHIELD,\r\n        category: Abilities.SPELL_CATEGORIES.OTHERS,\r\n        gcd: {\r\n          base: 1500,\r\n        },\r\n        castEfficiency: {\r\n          suggestion: true,\r\n          recommendedEfficiency: 0,\r\n        },\r\n      },\r\n      {\r\n        spell: SPELLS.REINCARNATION,\r\n        category: Abilities.SPELL_CATEGORIES.DEFENSIVE,\r\n        gcd: undefined,\r\n      },\r\n      {\r\n        spell: [SPELLS.BLOODLUST, SPELLS.HEROISM],\r\n        category: Abilities.SPELL_CATEGORIES.COOLDOWNS,\r\n        gcd: undefined,\r\n        isUndetectable: true,\r\n      },\r\n      {\r\n        spell: SPELLS.HEALING_STREAM_TOTEM_CAST,\r\n        category: Abilities.SPELL_CATEGORIES.OTHERS,\r\n        gcd: {\r\n          static: 1000,\r\n        },\r\n        cooldown: 30,\r\n        healSpellIds: [SPELLS.HEALING_STREAM_TOTEM_HEAL.id],\r\n      },\r\n      {\r\n        spell: SPELLS.CHAIN_HEAL,\r\n        category: Abilities.SPELL_CATEGORIES.OTHERS,\r\n        gcd: {\r\n          base: 1500,\r\n        },\r\n      },\r\n      {\r\n        spell: SPELLS.HEALING_SURGE,\r\n        gcd: {\r\n          base: 1500,\r\n        },\r\n        category: Abilities.SPELL_CATEGORIES.OTHERS,\r\n      },\r\n    ];\r\n  }\r\n}\r\n\r\nexport default Abilities;\r\n","import SPELLS from 'common/SPELLS';\r\nimport CoreCooldownThroughputTracker, { BUILT_IN_SUMMARY_TYPES } from 'parser/shared/modules/CooldownThroughputTracker';\r\n\r\nclass CooldownThroughputTracker extends CoreCooldownThroughputTracker {\r\n  static cooldownSpells = [\r\n    ...CoreCooldownThroughputTracker.cooldownSpells,\r\n    {\r\n      spell: SPELLS.ASCENDANCE_TALENT_ENHANCEMENT,\r\n      summary: [\r\n        BUILT_IN_SUMMARY_TYPES.DAMAGE,\r\n      ],\r\n    },\r\n    {\r\n      spell: SPELLS.BERSERKING,\r\n      summary: [\r\n        BUILT_IN_SUMMARY_TYPES.DAMAGE,\r\n      ],\r\n    },\r\n    {\r\n      spell: SPELLS.BLOOD_FURY_SPELL_AND_PHYSICAL,\r\n      summary: [\r\n        BUILT_IN_SUMMARY_TYPES.DAMAGE,\r\n      ],\r\n    },\r\n  ];\r\n}\r\n\r\nexport default CooldownThroughputTracker;\r\n","import React from 'react';\r\n\r\nimport CoreAlwaysBeCasting from 'parser/shared/modules/AlwaysBeCasting';\r\nimport { ThresholdStyle, When } from 'parser/core/ParseResults';\r\nimport SPELLS from 'common/SPELLS';\r\nimport { formatPercentage } from 'common/format';\r\nimport { STATISTIC_ORDER } from 'interface/others/StatisticBox';\r\nimport SpellLink from 'common/SpellLink';\r\nimport { i18n } from '@lingui/core';\r\nimport { t } from '@lingui/macro';\r\n\r\nclass AlwaysBeCasting extends CoreAlwaysBeCasting {\r\n  position = STATISTIC_ORDER.CORE(1);\r\n\r\n  get suggestionThresholds() {\r\n    return {\r\n      actual: this.downtimePercentage,\r\n      isGreaterThan: {\r\n        minor: 0.125,\r\n        average: 0.175,\r\n        major: 0.225,\r\n      },\r\n      style: ThresholdStyle.PERCENTAGE,\r\n    };\r\n  }\r\n\r\n  suggestions(when: When) {\r\n    const boss = this.owner.boss;\r\n    const deadTimePercentage = this.totalTimeWasted / this.owner.fightDuration;\r\n\r\n    when(deadTimePercentage).isGreaterThan(0.2)\r\n      .addSuggestion((suggest, actual, recommended) => suggest(<span>Your downtime can be improved. Try to Always Be Casting (ABC), try to reduce the delay between casting spells. Even if you have to move, try casting something instant with range like <SpellLink id={SPELLS.FLAME_SHOCK.id} />, <SpellLink id={SPELLS.FROST_SHOCK.id} />, or instant <SpellLink id={SPELLS.LIGHTNING_BOLT.id} />/<SpellLink id={SPELLS.CHAIN_LIGHTNING.id} /></span>)\r\n        .icon('spell_mage_altertime')\r\n        .actual(i18n._(t('shaman.enhancement.suggestions.alwaysBeCasting.downtime')`${formatPercentage(actual)}% downtime`))\r\n        .recommended(`<${formatPercentage(recommended)}% is recommended`)\r\n        .regular(recommended + 0.15).major(recommended + 0.2));\r\n\r\n    if (!boss || !boss.fight.disableDowntimeSuggestion) {\r\n      when(this.suggestionThresholds)\r\n        .addSuggestion((suggest, actual, recommended) => suggest(<span>Your downtime can be improved. Try to Always Be Casting (ABC), try to reduce the delay between casting spells. Even if you have to move, try casting something instant with range like <SpellLink id={SPELLS.FLAME_SHOCK.id} />, <SpellLink id={SPELLS.FROST_SHOCK.id} />, or instant <SpellLink id={SPELLS.LIGHTNING_BOLT.id} />/<SpellLink id={SPELLS.CHAIN_LIGHTNING.id} /></span>)\r\n          .icon('spell_mage_altertime')\r\n          .actual(i18n._(t('shaman.enhancement.suggestions.alwaysBeCasting.downtime')`${formatPercentage(actual)}% downtime`))\r\n          .recommended(`<${formatPercentage(recommended)}% is recommended`));\r\n    }\r\n  }\r\n}\r\n\r\nexport default AlwaysBeCasting;\r\n","import React from 'react';\r\nimport PropTypes from 'prop-types';\r\n\r\nimport Checklist from 'parser/shared/modules/features/Checklist';\r\nimport PreparationRule from 'parser/shared/modules/features/Checklist/PreparationRule';\r\nimport Rule from 'parser/shared/modules/features/Checklist/Rule';\r\nimport Requirement from 'parser/shared/modules/features/Checklist/Requirement';\r\nimport SPELLS from 'common/SPELLS';\r\nimport SpellLink from 'common/SpellLink';\r\nimport GenericCastEfficiencyRequirement from 'parser/shared/modules/features/Checklist/GenericCastEfficiencyRequirement';\r\n\r\nconst EnhancementShamanChecklist = ({ castEfficiency, combatant, thresholds }: any) => {\r\n  const AbilityRequirement = (props: any) => (\r\n    <GenericCastEfficiencyRequirement\r\n      isMaxCasts\r\n      castEfficiency={castEfficiency.getCastEfficiencyForSpellId(props.spell)}\r\n      {...props}\r\n    />\r\n  );\r\n\r\n  AbilityRequirement.propTypes = {\r\n    spell: PropTypes.number.isRequired,\r\n  };\r\n\r\n  return (\r\n    <Checklist>\r\n      <Rule\r\n        name=\"Always be casting\"\r\n        description={<>You should try to avoid doing nothing during the fight. If you have to move, try casting something instant with range like <SpellLink id={SPELLS.FLAME_SHOCK.id} />, <SpellLink id={SPELLS.FROST_SHOCK.id} />, or an instant <SpellLink id={SPELLS.LIGHTNING_BOLT.id} />/<SpellLink id={SPELLS.CHAIN_LIGHTNING.id} /></>}\r\n      >\r\n        <Requirement name=\"Downtime\" thresholds={thresholds.alwaysBeCasting} />\r\n      </Rule>\r\n      <Rule\r\n        name=\"Use your offensive cooldowns as often as possible\"\r\n        description={(\r\n          <>\r\n            You should aim to use your offensive cooldowns as often as you can to maximize your damage output.{' '}\r\n            <a href=\"https://www.wowhead.com/enhancement-shaman-rotation-guide#offensive-defensive-cooldowns\" target=\"_blank\" rel=\"noopener noreferrer\">More info.</a>\r\n          </>\r\n        )}\r\n      >\r\n        <AbilityRequirement spell={SPELLS.FERAL_SPIRIT.id} />\r\n        <AbilityRequirement spell={SPELLS.EARTH_ELEMENTAL.id} />\r\n        {combatant.hasTalent(SPELLS.ASCENDANCE_TALENT_ENHANCEMENT.id) &&\r\n        <AbilityRequirement spell={SPELLS.ASCENDANCE_TALENT_ENHANCEMENT.id} />}\r\n        {combatant.hasTalent(SPELLS.STORMKEEPER_TALENT_ENHANCEMENT.id) &&\r\n        <AbilityRequirement spell={SPELLS.STORMKEEPER_TALENT_ENHANCEMENT.id} />}\r\n        {combatant.hasTalent(SPELLS.EARTHEN_SPIKE_TALENT.id) &&\r\n        <AbilityRequirement spell={SPELLS.EARTHEN_SPIKE_TALENT.id} />}\r\n        {combatant.hasTalent(SPELLS.SUNDERING_TALENT.id) &&\r\n        <AbilityRequirement spell={SPELLS.SUNDERING_TALENT.id} />}\r\n      </Rule>\r\n      <Rule\r\n        name=\"Keep your Windfury Totem active\"\r\n        description={\r\n          <>\r\n            You should aim to have 100% uptime on <SpellLink id={SPELLS.WINDFURY_TOTEM_BUFF.id} />\r\n          </>\r\n        }\r\n      >\r\n        <Requirement name={(<><SpellLink id={SPELLS.WINDFURY_TOTEM_BUFF.id} /> uptime</>)} thresholds={thresholds.windfuryTotemUptime} />\r\n      </Rule>\r\n\r\n      {/* <Rule\r\n        name=\"Maintain your buffs\"\r\n        description={\"You should maintain your buffs in order to passively increase your damage done to targets without refreshing them to early.\"}\r\n      >\r\n        <Requirement name={<> <SpellLink id={SPELLS.LIGHTNING_SHIELD.id} /> uptime</>} thresholds={thresholds.lightningShieldUptime} />\r\n        TODO: ADD LASHING FLAMES UPTIME IF TALENTED\r\n      </Rule> */}\r\n      <PreparationRule thresholds={thresholds} />\r\n    </Checklist>\r\n  );\r\n};\r\n\r\nEnhancementShamanChecklist.propTypes = {\r\n  castEfficiency: PropTypes.object.isRequired,\r\n  combatant: PropTypes.shape({\r\n    hasTalent: PropTypes.func.isRequired,\r\n  }).isRequired,\r\n  thresholds: PropTypes.object.isRequired,\r\n};\r\n\r\nexport default EnhancementShamanChecklist;\r\n","import React from 'react';\r\nimport SPELLS from 'common/SPELLS';\r\nimport Analyzer from 'parser/core/Analyzer';\r\nimport UptimeIcon from 'interface/icons/Uptime';\r\nimport BoringSpellValueText from 'interface/statistics/components/BoringSpellValueText';\r\nimport Statistic from 'interface/statistics/Statistic';\r\nimport { STATISTIC_ORDER } from 'interface/others/StatisticBox';\r\nimport { formatPercentage } from 'common/format';\r\nimport SpellLink from 'common/SpellLink';\r\nimport { ThresholdStyle, When } from 'parser/core/ParseResults';\r\n\r\nclass WindfuryTotem extends Analyzer {\r\n  get uptime() {\r\n    return (\r\n      this.selectedCombatant.getBuffUptime(SPELLS.WINDFURY_TOTEM_BUFF.id) /\r\n      this.owner.fightDuration\r\n    );\r\n  }\r\n\r\n  get uptimeThreshold() {\r\n    return {\r\n      actual: this.uptime,\r\n      isLessThan: {\r\n        // To be adjusted once we know how much dps Windfury Totem contributes\r\n        minor: 0.99,\r\n        average: 0.95,\r\n        major: 0.9,\r\n      },\r\n      style: ThresholdStyle.PERCENTAGE,\r\n    };\r\n  }\r\n\r\n  statistic() {\r\n    return (\r\n      <Statistic position={STATISTIC_ORDER.CORE()}>\r\n        <BoringSpellValueText spell={SPELLS.WINDFURY_TOTEM}>\r\n          <>\r\n            <UptimeIcon /> {formatPercentage(this.uptime)}%{' '}\r\n            <small>uptime</small>\r\n          </>\r\n        </BoringSpellValueText>\r\n      </Statistic>\r\n    );\r\n  }\r\n\r\n  suggestions(when: When) {\r\n    when(this.uptimeThreshold).addSuggestion((suggest, actual, recommended) => suggest(\r\n      <>\r\n        Your <SpellLink id={SPELLS.WINDFURY_TOTEM_BUFF.id} /> uptime can be\r\n        improved. Make sure it's always active. Cast{' '}\r\n        <SpellLink id={SPELLS.WINDFURY_TOTEM.id} /> if the buff is about to\r\n        fall off or if all other spells are on cooldown.\r\n      </>,\r\n    )\r\n      .icon(SPELLS.WINDFURY_TOTEM_BUFF.icon)\r\n      .actual(\r\n        <>\r\n          <SpellLink id={SPELLS.WINDFURY_TOTEM_BUFF.id} /> was active for {formatPercentage(actual)}% of the fight\r\n        </>,\r\n      )\r\n      .recommended(`recommended: ${formatPercentage(recommended)}%`));\r\n  }\r\n}\r\n\r\nexport default WindfuryTotem;\r\n","import React from 'react';\r\n\r\nimport BaseChecklist from 'parser/shared/modules/features/Checklist/Module';\r\nimport CastEfficiency from 'parser/shared/modules/CastEfficiency';\r\nimport Combatants from 'parser/shared/modules/Combatants';\r\nimport PreparationRuleAnalyzer from 'parser/shared/modules/features/Checklist/PreparationRuleAnalyzer';\r\n\r\nimport Component from './Component';\r\nimport AlwaysBeCasting from '../features/AlwaysBeCasting';\r\nimport WindfuryTotem from '../core/WindfuryTotem';\r\n// import Flametongue from '../core/Flametongue';\r\n// import Hailstorm from '../talents/Hailstorm';\r\n// import FlametongueRefresh from '../core/FlametongueRefresh';\r\n\r\nclass Checklist extends BaseChecklist {\r\n  static dependencies = {\r\n    combatants: Combatants,\r\n    castEfficiency: CastEfficiency,\r\n    preparationRuleAnalyzer: PreparationRuleAnalyzer,\r\n    alwaysBeCasting: AlwaysBeCasting,\r\n    windfuryTotem: WindfuryTotem,\r\n    // flametongue: Flametongue,\r\n    // flametongueRefresh: FlametongueRefresh,\r\n    // hailstorm: Hailstorm,\r\n  };\r\n\r\n  protected combatants!: Combatants;\r\n  protected castEfficiency!: CastEfficiency;\r\n  protected preparationRuleAnalyzer!: PreparationRuleAnalyzer;\r\n  protected alwaysBeCasting!: AlwaysBeCasting;\r\n  protected windfuryTotem!: WindfuryTotem;\r\n  // protected flametongue!: Flametongue;\r\n  // protected flametongueRefresh!: FlametongueRefresh;\r\n  //protected hailstorm!: Hailstorm;\r\n\r\n  render() {\r\n    return (\r\n      <Component\r\n        combatant={this.combatants.selected}\r\n        castEfficiency={this.castEfficiency}\r\n        thresholds={{\r\n          ...this.preparationRuleAnalyzer.thresholds,\r\n\r\n          alwaysBeCasting: this.alwaysBeCasting.suggestionThresholds,\r\n          windfuryTotemUptime: this.windfuryTotem.uptimeThreshold,\r\n          // Buffs uptime and refreshes\r\n          // flametongueUptime: this.flametongue.flametongueUptimeThreshold,\r\n          // flametongueEarlyRefreshes: this.flametongueRefresh.flametongueEarlyRefreshThreshold,\r\n        }}\r\n      />\r\n    );\r\n  }\r\n}\r\n\r\nexport default Checklist;\r\n","import SPELLS from 'common/SPELLS';\r\nimport BLOODLUST_BUFFS from 'game/BLOODLUST_BUFFS';\r\nimport CoreBuffs from 'parser/core/modules/Buffs';\r\n\r\nclass Buffs extends CoreBuffs {\r\n  buffs() {\r\n    const combatant = this.selectedCombatant;\r\n\r\n    return [\r\n      {\r\n        spellId: SPELLS.ASCENDANCE_TALENT_ENHANCEMENT.id,\r\n        timelineHighlight: true,\r\n      },\r\n      {\r\n        spellId: SPELLS.STORMBRINGER_BUFF.id,\r\n        timelineHighlight: true,\r\n      },\r\n      {\r\n        spellId: SPELLS.BERSERKING.id,\r\n        timelineHighlight: true,\r\n      },\r\n      {\r\n        spellId: SPELLS.BLOOD_FURY_SPELL_AND_PHYSICAL.id,\r\n        timelineHighlight: true,\r\n      },\r\n      {\r\n        spellId: Object.keys(BLOODLUST_BUFFS).map(item => Number(item)),\r\n        timelineHighlight: true,\r\n      },\r\n      {\r\n        spellId: SPELLS.HOT_HAND_BUFF.id,\r\n        enabled: combatant.hasTalent(SPELLS.HOT_HAND_TALENT.id),\r\n        timelineHighlight: true,\r\n      },\r\n      {\r\n        spellId: SPELLS.HAILSTORM_BUFF.id,\r\n        enabled: combatant.hasTalent(SPELLS.HAILSTORM_TALENT.id),\r\n        timelineHighlight: true,\r\n      },\r\n      {\r\n        spellId: SPELLS.STORMKEEPER_TALENT_ENHANCEMENT.id,\r\n        triggeredBySpellId: SPELLS.STORMKEEPER_TALENT_ENHANCEMENT.id,\r\n        timelineHighlight: true,\r\n      },\r\n      {\r\n        spellId: SPELLS.WINDFURY_TOTEM_BUFF.id,\r\n        triggeredBySpellId: SPELLS.WINDFURY_TOTEM.id,\r\n        timelineHighlight: true,\r\n      },\r\n    ];\r\n  }\r\n}\r\n\r\nexport default Buffs;\r\n","import Analyzer, { Options, SELECTED_PLAYER } from 'parser/core/Analyzer';\r\nimport Events, { ApplyBuffEvent, CastEvent, DamageEvent } from 'parser/core/Events';\r\nimport SPELLS from 'common/SPELLS/shaman';\r\nimport SpellUsable from 'parser/shared/modules/SpellUsable';\r\nimport React from 'react';\r\nimport calculateEffectiveDamage from 'parser/core/calculateEffectiveDamage';\r\nimport Statistic from 'interface/statistics/Statistic';\r\nimport STATISTIC_CATEGORY from 'interface/others/STATISTIC_CATEGORY';\r\nimport STATISTIC_ORDER from 'interface/others/STATISTIC_ORDER';\r\nimport ItemDamageDone from 'interface/ItemDamageDone';\r\nimport BoringSpellValueText from 'interface/statistics/components/BoringSpellValueText';\r\nimport { STORMSTRIKE_CAST_SPELLS, STORMSTRIKE_DAMAGE_SPELLS } from 'parser/shaman/enhancement/constants';\r\n\r\nconst STORMBRINGER_DAMAGE_MODIFIER = 0.25;\r\n\r\nclass Stormbringer extends Analyzer {\r\n  static dependencies = {\r\n    spellUsable: SpellUsable,\r\n  };\r\n\r\n  protected spellUsable!: SpellUsable;\r\n\r\n  protected damageGained: number = 0;\r\n\r\n  constructor(options: Options) {\r\n    super(options);\r\n\r\n    this.addEventListener(\r\n      Events.applybuff.by(SELECTED_PLAYER)\r\n        .spell(SPELLS.STORMBRINGER_BUFF),\r\n      this.onStormbringerApplied,\r\n    );\r\n\r\n    this.addEventListener(\r\n      Events.cast.by(SELECTED_PLAYER)\r\n        .spell(STORMSTRIKE_CAST_SPELLS),\r\n      this.onStormstrikeUseWithStormbringerBuff,\r\n    );\r\n\r\n    this.addEventListener(\r\n      Events.damage.by(SELECTED_PLAYER)\r\n        .spell(STORMSTRIKE_DAMAGE_SPELLS),\r\n      this.onStrikeDamage,\r\n    );\r\n  }\r\n\r\n  onStormbringerApplied(event: ApplyBuffEvent) {\r\n    if (this.spellUsable.isOnCooldown(SPELLS.STORMSTRIKE_CAST.id)) {\r\n      this.spellUsable.endCooldown(SPELLS.STORMSTRIKE_CAST.id);\r\n    }\r\n\r\n    if (this.spellUsable.isOnCooldown(SPELLS.WINDSTRIKE_CAST.id)) {\r\n      this.spellUsable.endCooldown(SPELLS.WINDSTRIKE_CAST.id);\r\n    }\r\n  }\r\n\r\n  onStormstrikeUseWithStormbringerBuff(event: CastEvent) {\r\n    if (!this.selectedCombatant.hasBuff(SPELLS.STORMBRINGER_BUFF.id)) {\r\n      return;\r\n    }\r\n  }\r\n\r\n  onStrikeDamage(event: DamageEvent) {\r\n    if (!this.selectedCombatant.hasBuff(SPELLS.STORMBRINGER_BUFF.id)) {\r\n      return;\r\n    }\r\n\r\n    this.damageGained += calculateEffectiveDamage(event, STORMBRINGER_DAMAGE_MODIFIER);\r\n  }\r\n\r\n  statistic() {\r\n    return (\r\n      <Statistic\r\n        position={STATISTIC_ORDER.OPTIONAL()}\r\n        size=\"small\"\r\n        category={STATISTIC_CATEGORY.GENERAL}\r\n      >\r\n        <BoringSpellValueText\r\n          spell={SPELLS.STORMBRINGER}\r\n        >\r\n          <>\r\n            <ItemDamageDone amount={this.damageGained} />\r\n          </>\r\n        </BoringSpellValueText>\r\n      </Statistic>\r\n    );\r\n  }\r\n}\r\n\r\nexport default Stormbringer;\r\n","import React from 'react';\r\n\r\nimport SPELLS from 'common/SPELLS';\r\nimport UptimeIcon from 'interface/icons/Uptime';\r\nimport Enemies from 'parser/shared/modules/Enemies';\r\nimport { formatPercentage, formatThousands } from 'common/format';\r\nimport calculateEffectiveDamage from 'parser/core/calculateEffectiveDamage';\r\nimport Analyzer, { Options, SELECTED_PLAYER } from 'parser/core/Analyzer';\r\nimport Events, { DamageEvent } from 'parser/core/Events';\r\nimport { STATISTIC_ORDER } from 'interface/others/StatisticBox';\r\nimport STATISTIC_CATEGORY from 'interface/others/STATISTIC_CATEGORY';\r\nimport ItemDamageDone from 'interface/ItemDamageDone';\r\nimport Statistic from 'interface/statistics/Statistic';\r\nimport BoringSpellValueText from 'interface/statistics/components/BoringSpellValueText';\r\nimport { ThresholdStyle, When } from 'parser/core/ParseResults';\r\nimport SpellLink from 'common/SpellLink';\r\n\r\nconst LASHING_FLAMES_BONUS = 1;\r\n\r\n/**\r\n * Lava Lash now increases the damage of Flame Shock on its target by 100% for 12 sec.\r\n *\r\n * Example Log:\r\n *\r\n */\r\nclass LashingFlames extends Analyzer {\r\n  static dependencies = {\r\n    enemies: Enemies,\r\n  };\r\n\r\n  protected enemies!: Enemies;\r\n\r\n  protected buffedFlameShockDmg: number = 0;\r\n\r\n  constructor(options: Options) {\r\n    super(options);\r\n\r\n    this.active = this.selectedCombatant.hasTalent(SPELLS.LASHING_FLAMES_TALENT.id);\r\n\r\n    this.addEventListener(\r\n      Events.damage.by(SELECTED_PLAYER)\r\n        .spell(SPELLS.FLAME_SHOCK),\r\n      this.onFlameShockDamage,\r\n    );\r\n  }\r\n\r\n  get uptime() {\r\n    return this.enemies.getBuffUptime(SPELLS.LASHING_FLAMES_DEBUFF.id) / this.owner.fightDuration;\r\n  }\r\n\r\n  get uptimeThreshold() {\r\n    return {\r\n      actual: this.uptime,\r\n      isLessThan: {\r\n        minor: 0.99,\r\n        average: 0.95,\r\n        major: 0.85,\r\n      },\r\n      style: ThresholdStyle.PERCENTAGE,\r\n    };\r\n  }\r\n\r\n  onFlameShockDamage(event: DamageEvent) {\r\n    const enemy = this.enemies.getEntity(event);\r\n\r\n    if (!enemy || !enemy.hasBuff(SPELLS.LASHING_FLAMES_DEBUFF.id, event.timestamp)) {\r\n      return;\r\n    }\r\n\r\n    this.buffedFlameShockDmg += calculateEffectiveDamage(event, LASHING_FLAMES_BONUS);\r\n  }\r\n\r\n  suggestions(when: When) {\r\n    when(this.uptimeThreshold).addSuggestion((suggest, actual, recommended) => suggest(\r\n      (\r\n        <>\r\n          Your <SpellLink id={SPELLS.LASHING_FLAMES_TALENT.id} /> uptime can be improved.\r\n          As <SpellLink id={SPELLS.LASHING_FLAMES_DEBUFF.id} /> increases the damage of <SpellLink id={SPELLS.FLAME_SHOCK.id} /> on its target,{` `}\r\n          try to maintain 100% uptime for maximum damage increase.\r\n          To achieve this, you can strike the target with <SpellLink id={SPELLS.LAVA_LASH.id} />{` `}\r\n          when <SpellLink id={SPELLS.LASHING_FLAMES_DEBUFF.id} /> is about to expire.\r\n        </>\r\n      ),\r\n      )\r\n        .icon(SPELLS.LASHING_FLAMES_TALENT.icon)\r\n        .actual(<><SpellLink id={SPELLS.LASHING_FLAMES_DEBUFF.id} /> was active for {formatPercentage(actual)}% of the fight</>)\r\n        .recommended(`recommended: ${formatPercentage(recommended)}%`),\r\n    );\r\n  }\r\n\r\n  statistic() {\r\n    return (\r\n      <Statistic\r\n        position={STATISTIC_ORDER.OPTIONAL()}\r\n        size=\"flexible\"\r\n        category={STATISTIC_CATEGORY.TALENTS}\r\n        tooltip={(\r\n          <>\r\n            Lashing Flames contributed {formatThousands(this.buffedFlameShockDmg)} total Flame Shock damage ({formatPercentage(this.owner.getPercentageOfTotalDamageDone(this.buffedFlameShockDmg))} %).<br />\r\n          </>\r\n        )}\r\n      >\r\n        <BoringSpellValueText spell={SPELLS.LASHING_FLAMES_TALENT}>\r\n          <>\r\n            <><UptimeIcon /> {formatPercentage(this.uptime)}% <small>uptime</small></>\r\n            <br />\r\n            <ItemDamageDone amount={this.buffedFlameShockDmg} /><br />\r\n          </>\r\n        </BoringSpellValueText>\r\n      </Statistic>\r\n    );\r\n  }\r\n}\r\n\r\nexport default LashingFlames;\r\n","import React from 'react';\r\n\r\nimport SPELLS from 'common/SPELLS/index';\r\nimport Analyzer, { Options, SELECTED_PLAYER } from 'parser/core/Analyzer';\r\nimport Statistic from 'interface/statistics/Statistic';\r\nimport STATISTIC_CATEGORY from 'interface/others/STATISTIC_CATEGORY';\r\nimport STATISTIC_ORDER from 'interface/others/STATISTIC_ORDER';\r\nimport calculateEffectiveDamage from 'parser/core/calculateEffectiveDamage';\r\nimport Events, { DamageEvent } from 'parser/core/Events';\r\nimport BoringSpellValueText from 'interface/statistics/components/BoringSpellValueText';\r\nimport ItemDamageDone from 'interface/ItemDamageDone';\r\n\r\nconst HOT_HAND = {\r\n  INCREASE: 1.0,\r\n};\r\n\r\n/**\r\n * Melee auto-attacks with Flametongue Weapon active have a 5% chance to\r\n * reduce the cooldown of Lava Lash by 75% and increase the damage of\r\n * Lava Lash by 100% for 8 sec.\r\n *\r\n * Example Log:\r\n *\r\n */\r\nclass HotHand extends Analyzer {\r\n\r\n  protected buffedLavaLashDamage: number = 0;\r\n\r\n  constructor(options: Options) {\r\n    super(options);\r\n\r\n    this.active = this.selectedCombatant.hasTalent(SPELLS.HOT_HAND_TALENT.id);\r\n\r\n    this.addEventListener(\r\n      Events.damage.by(SELECTED_PLAYER)\r\n        .spell(SPELLS.LAVA_LASH),\r\n      this.onLavaLashDamage,\r\n    );\r\n  }\r\n\r\n  onLavaLashDamage(event: DamageEvent) {\r\n    if (!this.selectedCombatant.hasBuff(SPELLS.HOT_HAND_BUFF.id)) {\r\n      return;\r\n    }\r\n\r\n    this.buffedLavaLashDamage += calculateEffectiveDamage(event, HOT_HAND.INCREASE);\r\n  }\r\n\r\n  statistic() {\r\n    return (\r\n      <Statistic\r\n        position={STATISTIC_ORDER.OPTIONAL()}\r\n        size=\"flexible\"\r\n        category={STATISTIC_CATEGORY.TALENTS}\r\n      >\r\n        <BoringSpellValueText spell={SPELLS.HOT_HAND_TALENT}>\r\n          <>\r\n            <ItemDamageDone amount={this.buffedLavaLashDamage} /><br />\r\n          </>\r\n        </BoringSpellValueText>\r\n      </Statistic>\r\n    );\r\n  }\r\n}\r\n\r\nexport default HotHand;\r\n","import React from 'react';\r\n\r\nimport SPELLS from 'common/SPELLS/index';\r\nimport Analyzer, { Options, SELECTED_PLAYER } from 'parser/core/Analyzer';\r\nimport Statistic from 'interface/statistics/Statistic';\r\nimport STATISTIC_CATEGORY from 'interface/others/STATISTIC_CATEGORY';\r\nimport STATISTIC_ORDER from 'interface/others/STATISTIC_ORDER';\r\nimport calculateEffectiveDamage from 'parser/core/calculateEffectiveDamage';\r\nimport Events, { DamageEvent } from 'parser/core/Events';\r\nimport BoringSpellValueText from 'interface/statistics/components/BoringSpellValueText';\r\nimport ItemDamageDone from 'interface/ItemDamageDone';\r\n\r\nconst FORCEFUL_WINDS = {\r\n  INCREASE_PER_STACK: .5,\r\n};\r\n\r\n/**\r\n * Windfury causes each successive Windfury attack within 15 sec to\r\n * increase the damage of Windfury by 50%, stacking up to 5 times.\r\n */\r\nclass ForcefulWinds extends Analyzer {\r\n  protected damageGained: number = 0;\r\n\r\n  constructor(options: Options) {\r\n    super(options);\r\n\r\n    this.active = this.selectedCombatant.hasTalent(SPELLS.FORCEFUL_WINDS_TALENT.id);\r\n\r\n    this.addEventListener(\r\n      Events.damage.by(SELECTED_PLAYER)\r\n        .spell(SPELLS.WINDFURY_ATTACK),\r\n      this.onDamage,\r\n    );\r\n  }\r\n\r\n  onDamage(event: DamageEvent) {\r\n    const buff: any = this.selectedCombatant.getBuff(SPELLS.FORCEFUL_WINDS_BUFF.id);\r\n    if (!buff) {\r\n      return;\r\n    }\r\n    const stacks = buff.stacks || 0;\r\n    this.damageGained += calculateEffectiveDamage(\r\n      event,\r\n      stacks * FORCEFUL_WINDS.INCREASE_PER_STACK,\r\n    );\r\n  }\r\n\r\n  statistic() {\r\n    return (\r\n      <Statistic\r\n        position={STATISTIC_ORDER.OPTIONAL()}\r\n        size=\"flexible\"\r\n        category={STATISTIC_CATEGORY.TALENTS}\r\n      >\r\n        <BoringSpellValueText spell={SPELLS.FORCEFUL_WINDS_TALENT}>\r\n          <>\r\n            <ItemDamageDone amount={this.damageGained} /><br />\r\n          </>\r\n        </BoringSpellValueText>\r\n      </Statistic>\r\n    );\r\n  }\r\n}\r\n\r\nexport default ForcefulWinds;\r\n","import React from 'react';\r\n\r\nimport SPELLS from 'common/SPELLS/index';\r\nimport Analyzer, { Options, SELECTED_PLAYER } from 'parser/core/Analyzer';\r\nimport Statistic from 'interface/statistics/Statistic';\r\nimport STATISTIC_ORDER from 'interface/others/STATISTIC_ORDER';\r\nimport STATISTIC_CATEGORY from 'interface/others/STATISTIC_CATEGORY';\r\nimport Events, { ApplyBuffStackEvent, DamageEvent, RemoveBuffStackEvent } from 'parser/core/Events';\r\nimport BoringSpellValueText from 'interface/statistics/components/BoringSpellValueText';\r\nimport ItemDamageDone from 'interface/ItemDamageDone';\r\nimport AverageTargetsHit from 'interface/others/AverageTargetsHit';\r\nimport calculateEffectiveDamage from 'parser/core/calculateEffectiveDamage';\r\nimport { formatNumber, formatPercentage } from 'common/format';\r\nimport Spell from 'common/SPELLS/Spell';\r\n\r\nconst HAILSTORM = {\r\n  INCREASE_PER_STACK: .35,\r\n};\r\n\r\nconst MAX_STACKS = 5;\r\nconst STACKS_CONSUMED_PER_FROST_SHOCK_CAST = 5;\r\nconst MAX_MAELSTROM_WEAPON_STACKS_CONSUMED_PER_CAST = 5;\r\n\r\n/**\r\n * Each stack of Maelstrom Weapon consumed increases the damage of your next\r\n * Frost Shock by 35%, and causes your next Frost Shock to hit 1 additional\r\n * target per Maelstrom Weapon stack consumed.\r\n *\r\n * Example Log:\r\n */\r\nclass Hailstorm extends Analyzer {\r\n  protected casts: number = 0;\r\n  protected hits: number = 0;\r\n  protected damage: number = 0;\r\n  protected currentStacks: number = 0;\r\n  protected lostStacks: number = 0;\r\n  protected totalStacksGained: number = 0;\r\n  protected overcappedStacks: number = 0;\r\n  protected currentMaelstromWeaponStacks: number = 0;\r\n\r\n  protected timestamp: number = 0;\r\n\r\n  constructor(options: Options) {\r\n    super(options);\r\n\r\n    this.active = this.selectedCombatant.hasTalent(SPELLS.HAILSTORM_TALENT.id);\r\n\r\n    this.addEventListener(\r\n      Events.applybuffstack.by(SELECTED_PLAYER).spell(SPELLS.MAELSTROM_WEAPON_BUFF),\r\n      this.onMaelstromWeaponStackApply,\r\n    );\r\n\r\n    const SPELLS_WITH_CAST_TIME: Spell[] = [\r\n      SPELLS.CHAIN_HEAL,\r\n      SPELLS.CHAIN_LIGHTNING,\r\n      SPELLS.HEALING_SURGE,\r\n      SPELLS.LIGHTNING_BOLT,\r\n    ];\r\n\r\n    SPELLS_WITH_CAST_TIME.forEach(spell => {\r\n      this.addEventListener(\r\n        Events.cast.by(SELECTED_PLAYER).spell(spell),\r\n        this.onSpellWithCastTimeCast,\r\n      );\r\n    });\r\n\r\n    this.addEventListener(\r\n      Events.cast.by(SELECTED_PLAYER)\r\n        .spell(SPELLS.FROST_SHOCK),\r\n      this.onFrostShockCast,\r\n    );\r\n\r\n    this.addEventListener(\r\n      Events.damage.by(SELECTED_PLAYER)\r\n        .spell(SPELLS.FROST_SHOCK),\r\n      this.onFrostShockDamage,\r\n    );\r\n\r\n    this.addEventListener(\r\n      Events.removebuff.by(SELECTED_PLAYER).spell(SPELLS.HAILSTORM_BUFF),\r\n      this.onHailstormRemove,\r\n    );\r\n\r\n    this.addEventListener(\r\n      Events.removebuffstack.by(SELECTED_PLAYER).spell(SPELLS.HAILSTORM_BUFF),\r\n      this.onHailstormStackRemove,\r\n    );\r\n  }\r\n\r\n  onMaelstromWeaponStackApply(event: ApplyBuffStackEvent) {\r\n    this.currentMaelstromWeaponStacks = event.stack;\r\n  }\r\n\r\n  onSpellWithCastTimeCast() {\r\n    const maelstromWeaponStacksConsumed = Math.min(\r\n      MAX_MAELSTROM_WEAPON_STACKS_CONSUMED_PER_CAST,\r\n      this.currentMaelstromWeaponStacks,\r\n    );\r\n    this.currentMaelstromWeaponStacks -= maelstromWeaponStacksConsumed;\r\n\r\n    const hailstormStacksGained = Math.min(\r\n      maelstromWeaponStacksConsumed,\r\n      MAX_STACKS - this.currentStacks,\r\n    );\r\n    this.currentStacks += hailstormStacksGained;\r\n    this.totalStacksGained += hailstormStacksGained;\r\n    this.overcappedStacks += maelstromWeaponStacksConsumed - hailstormStacksGained;\r\n  }\r\n\r\n  onFrostShockCast() {\r\n    if (!this.selectedCombatant.hasBuff(SPELLS.HAILSTORM_BUFF.id)) {\r\n      return;\r\n    }\r\n\r\n    this.currentStacks -= STACKS_CONSUMED_PER_FROST_SHOCK_CAST;\r\n    this.currentStacks = this.currentStacks < 0 ? 0 : this.currentStacks;\r\n\r\n    this.casts += 1;\r\n  }\r\n\r\n  onFrostShockDamage(event: DamageEvent) {\r\n    if (!this.selectedCombatant.hasBuff(SPELLS.HAILSTORM_BUFF.id)) {\r\n      return;\r\n    }\r\n\r\n    this.hits += 1;\r\n    // TODO: hailstorm buff stacks are buggy right now, so assume that they're correctly using 5 stacks\r\n    this.damage += calculateEffectiveDamage(event, HAILSTORM.INCREASE_PER_STACK * STACKS_CONSUMED_PER_FROST_SHOCK_CAST);\r\n  }\r\n\r\n  onHailstormStackRemove(event: RemoveBuffStackEvent) {\r\n    // if hailstorm removal is due to consumption by frost shock, they are not considered as lost\r\n    if (this.currentStacks === 0) {\r\n      return;\r\n    }\r\n\r\n    this.lostStacks += (this.currentStacks - event.stack);\r\n    this.currentStacks = event.stack;\r\n  }\r\n\r\n  onHailstormRemove() {\r\n    // if hailstorm removal is due to consumption by frost shock, they are not considered as lost\r\n    if (this.currentStacks === 0) {\r\n      return;\r\n    }\r\n\r\n    this.lostStacks += this.currentStacks;\r\n    this.currentStacks = 0;\r\n  }\r\n\r\n  statistic() {\r\n    return (\r\n      <Statistic\r\n        position={STATISTIC_ORDER.OPTIONAL()}\r\n        size=\"flexible\"\r\n        category={STATISTIC_CATEGORY.TALENTS}\r\n        tooltip={(\r\n          <ul>\r\n            <li>{`${formatNumber(this.totalStacksGained)} / ${formatNumber(this.totalStacksGained + this.overcappedStacks)} stacks gained: you overcapped ${this.overcappedStacks} stacks.`}</li>\r\n            <li>{`${formatNumber(this.totalStacksGained - this.lostStacks)} / ${formatNumber(this.totalStacksGained)} stacks used: ${this.lostStacks} stacks lost due to timeout.`}</li>\r\n          </ul>\r\n        )}\r\n      >\r\n        <BoringSpellValueText spell={SPELLS.HAILSTORM_TALENT}>\r\n          <>\r\n            <ItemDamageDone amount={this.damage} approximate /><br />\r\n            <AverageTargetsHit casts={this.casts} hits={this.hits} /><br />\r\n            <>\r\n              {formatPercentage((this.totalStacksGained - this.lostStacks) / (this.totalStacksGained + this.overcappedStacks))}{'% '}\r\n              <small>stacks used</small>\r\n            </>\r\n          </>\r\n        </BoringSpellValueText>\r\n      </Statistic>\r\n    );\r\n  }\r\n}\r\n\r\nexport default Hailstorm;\r\n","import React from 'react';\r\n\r\nimport SPELLS from 'common/SPELLS/index';\r\nimport Analyzer, { Options, SELECTED_PLAYER } from 'parser/core/Analyzer';\r\nimport Events, { HealEvent } from 'parser/core/Events';\r\nimport BoringSpellValueText from 'interface/statistics/components/BoringSpellValueText';\r\nimport Statistic from 'interface/statistics/Statistic';\r\nimport STATISTIC_CATEGORY from 'interface/others/STATISTIC_CATEGORY';\r\nimport STATISTIC_ORDER from 'interface/others/STATISTIC_ORDER';\r\nimport ItemHealingDone from 'interface/ItemHealingDone';\r\n\r\n/**\r\n * When your health is brought below 35%, you instantly heal for 20% of your maximum health.\r\n * Cannot occur more than once every 45 sec.\r\n *\r\n * Example log:\r\n */\r\nclass NaturesGuardian extends Analyzer {\r\n  protected healthGained: number = 0;\r\n  protected procCount: number = 0;\r\n\r\n  constructor(options: Options) {\r\n    super(options);\r\n\r\n    this.active = this.selectedCombatant.hasTalent(SPELLS.NATURES_GUARDIAN_TALENT.id);\r\n\r\n    this.addEventListener(\r\n      Events.heal.by(SELECTED_PLAYER)\r\n        .spell(SPELLS.NATURES_GUARDIAN_HEAL),\r\n      this.onNaturesGuardianHeal,\r\n    );\r\n  }\r\n\r\n  onNaturesGuardianHeal(event: HealEvent) {\r\n    this.procCount += 1;\r\n    this.healthGained += event.amount;\r\n  }\r\n\r\n  // TODO: add proc count to statistics\r\n  statistic() {\r\n    return (\r\n      <Statistic\r\n        position={STATISTIC_ORDER.OPTIONAL(999)}\r\n        size=\"small\"\r\n        category={STATISTIC_CATEGORY.TALENTS}\r\n      >\r\n        <BoringSpellValueText spell={SPELLS.NATURES_GUARDIAN_TALENT}>\r\n          <>\r\n            <ItemHealingDone amount={this.healthGained} />\r\n          </>\r\n        </BoringSpellValueText>\r\n      </Statistic>\r\n    );\r\n  }\r\n}\r\n\r\nexport default NaturesGuardian;\r\n","import React from 'react';\r\n\r\nimport SPELLS from 'common/SPELLS/index';\r\nimport Analyzer, { Options, SELECTED_PLAYER } from 'parser/core/Analyzer';\r\nimport Statistic from 'interface/statistics/Statistic';\r\nimport STATISTIC_CATEGORY from 'interface/others/STATISTIC_CATEGORY';\r\nimport STATISTIC_ORDER from 'interface/others/STATISTIC_ORDER';\r\nimport Events, { DamageEvent } from 'parser/core/Events';\r\nimport BoringSpellValueText from 'interface/statistics/components/BoringSpellValueText';\r\nimport ItemDamageDone from 'interface/ItemDamageDone';\r\n\r\n/**\r\n * Crash Lightning also electrifies the ground, leaving an electrical\r\n * field behind which damages enemies within it for\r\n * [7 * (2.688% of Attack power)] Nature damage over 6 sec.\r\n *\r\n * Example Log:\r\n *\r\n */\r\n\r\nclass CrashingStorm extends Analyzer {\r\n  protected damageGained: number = 0;\r\n\r\n  constructor(options: Options) {\r\n    super(options);\r\n\r\n    this.active = this.selectedCombatant.hasTalent(SPELLS.CRASHING_STORM_TALENT.id);\r\n\r\n    this.addEventListener(\r\n      Events.damage.by(SELECTED_PLAYER)\r\n        .spell(SPELLS.CRASHING_STORM_DAMAGE),\r\n      this.onDamage,\r\n    );\r\n  }\r\n\r\n  onDamage(event: DamageEvent) {\r\n    this.damageGained += event.amount + (event.absorbed || 0);\r\n  }\r\n\r\n  statistic() {\r\n    return (\r\n      <Statistic\r\n        position={STATISTIC_ORDER.OPTIONAL()}\r\n        size=\"flexible\"\r\n        category={STATISTIC_CATEGORY.TALENTS}\r\n      >\r\n        <BoringSpellValueText spell={SPELLS.CRASHING_STORM_TALENT}>\r\n          <>\r\n            <ItemDamageDone amount={this.damageGained} />\r\n          </>\r\n        </BoringSpellValueText>\r\n      </Statistic>\r\n    );\r\n  }\r\n}\r\n\r\nexport default CrashingStorm;\r\n","import React from 'react';\r\n\r\nimport SPELLS from 'common/SPELLS/index';\r\nimport Analyzer, { Options, SELECTED_PLAYER } from 'parser/core/Analyzer';\r\nimport Statistic from 'interface/statistics/Statistic';\r\nimport STATISTIC_CATEGORY from 'interface/others/STATISTIC_CATEGORY';\r\nimport STATISTIC_ORDER from 'interface/others/STATISTIC_ORDER';\r\nimport Events, { CastEvent, DamageEvent } from 'parser/core/Events';\r\nimport BoringSpellValueText from 'interface/statistics/components/BoringSpellValueText';\r\nimport ItemDamageDone from 'interface/ItemDamageDone';\r\nimport AverageTargetsHit from 'interface/others/AverageTargetsHit';\r\n\r\n/**\r\n * Shatters a line of earth in front of you with your main hand weapon,\r\n * causing (187.2% of Attack power) Flamestrike damage\r\n * and Incapacitating any enemy hit for 2 sec.\r\n *\r\n * Example Log:\r\n */\r\nclass Sundering extends Analyzer {\r\n  protected damageGained: number = 0;\r\n  protected casts: number = 0;\r\n  protected hits: number = 0;\r\n\r\n  constructor(options: Options) {\r\n    super(options);\r\n\r\n    this.active = this.selectedCombatant.hasTalent(SPELLS.SUNDERING_TALENT.id);\r\n\r\n    this.addEventListener(\r\n      Events.cast.by(SELECTED_PLAYER)\r\n        .spell(SPELLS.SUNDERING_TALENT),\r\n      this.onCast,\r\n    );\r\n\r\n    this.addEventListener(\r\n      Events.damage.by(SELECTED_PLAYER)\r\n        .spell(SPELLS.SUNDERING_TALENT),\r\n      this.onDamage,\r\n    );\r\n  }\r\n\r\n  onDamage(event: DamageEvent) {\r\n    this.hits += 1;\r\n    this.damageGained += event.amount + (event.absorbed || 0);\r\n  }\r\n\r\n  onCast(event: CastEvent) {\r\n    this.casts += 1;\r\n  }\r\n\r\n  statistic() {\r\n    return (\r\n      <Statistic\r\n        position={STATISTIC_ORDER.OPTIONAL()}\r\n        size=\"flexible\"\r\n        category={STATISTIC_CATEGORY.TALENTS}\r\n      >\r\n        <BoringSpellValueText spell={SPELLS.SUNDERING_TALENT}>\r\n          <>\r\n            <ItemDamageDone amount={this.damageGained} /><br />\r\n            <AverageTargetsHit casts={this.casts} hits={this.hits} />\r\n          </>\r\n        </BoringSpellValueText>\r\n      </Statistic>\r\n    );\r\n  }\r\n}\r\n\r\nexport default Sundering;\r\n","import React from 'react';\r\n\r\nimport SPELLS from 'common/SPELLS/index';\r\nimport Analyzer, { Options, SELECTED_PLAYER } from 'parser/core/Analyzer';\r\nimport Events, { DamageEvent } from 'parser/core/Events';\r\nimport { formatNumber, formatPercentage } from 'common/format';\r\nimport Statistic from 'interface/statistics/Statistic';\r\nimport STATISTIC_CATEGORY from 'interface/others/STATISTIC_CATEGORY';\r\nimport STATISTIC_ORDER from 'interface/others/STATISTIC_ORDER';\r\nimport BoringSpellValueText from 'interface/statistics/components/BoringSpellValueText';\r\nimport ItemDamageDone from 'interface/ItemDamageDone';\r\n\r\nconst AFFECTED_SPELLS = [\r\n  SPELLS.LIGHTNING_BOLT_OVERLOAD,\r\n  SPELLS.LIGHTNING_BOLT,\r\n  SPELLS.CHAIN_LIGHTNING_OVERLOAD,\r\n  SPELLS.CHAIN_LIGHTNING,\r\n];\r\n\r\n/**\r\n * Charge yourself with lightning, causing your next 2 Lightning Bolts\r\n * or Chain Lightnings to deal 150% more damage and be instant cast.\r\n *\r\n * Example Log:\r\n *\r\n */\r\nclass Stormkeeper extends Analyzer {\r\n  protected damageDoneByBuffedCasts: number = 0;\r\n\r\n  constructor(options: Options) {\r\n    super(options);\r\n\r\n    this.active = this.selectedCombatant.hasTalent(SPELLS.STORMKEEPER_TALENT_ENHANCEMENT.id);\r\n\r\n    AFFECTED_SPELLS.forEach(affectedSpell => {\r\n      this.addEventListener(\r\n        Events.damage.by(SELECTED_PLAYER)\r\n          .spell(affectedSpell),\r\n        this.onSpellDamage,\r\n      );\r\n    });\r\n  }\r\n\r\n  get damagePercent() {\r\n    return this.owner.getPercentageOfTotalDamageDone(this.damageDoneByBuffedCasts);\r\n  }\r\n\r\n  get damagePerSecond() {\r\n    return this.damageDoneByBuffedCasts / (this.owner.fightDuration / 1000);\r\n  }\r\n\r\n  onSpellDamage(event: DamageEvent) {\r\n    if (!this.selectedCombatant.hasBuff(SPELLS.STORMKEEPER_TALENT_ENHANCEMENT.id)) {\r\n      return;\r\n    }\r\n\r\n    this.damageDoneByBuffedCasts += event.amount;\r\n  }\r\n\r\n  statistic() {\r\n    return (\r\n      <Statistic\r\n        position={STATISTIC_ORDER.OPTIONAL()}\r\n        category={STATISTIC_CATEGORY.TALENTS}\r\n        size=\"flexible\"\r\n        tooltip={`Buffed casts contributed ${formatNumber(this.damageDoneByBuffedCasts)} damage (${formatPercentage(this.damagePercent)}% of your damage)`}\r\n      >\r\n        <BoringSpellValueText spell={SPELLS.STORMKEEPER_TALENT_ENHANCEMENT}>\r\n          <>\r\n            <ItemDamageDone amount={this.damageDoneByBuffedCasts} /><br />\r\n          </>\r\n        </BoringSpellValueText>\r\n      </Statistic>\r\n    );\r\n  }\r\n}\r\n\r\nexport default Stormkeeper;\r\n","import React from 'react';\r\n\r\nimport SPELLS from 'common/SPELLS/index';\r\nimport Analyzer, { Options, SELECTED_PLAYER } from 'parser/core/Analyzer';\r\nimport calculateEffectiveDamage from 'parser/core/calculateEffectiveDamage';\r\nimport MAGIC_SCHOOLS from 'game/MAGIC_SCHOOLS';\r\nimport Enemies from 'parser/shared/modules/Enemies';\r\nimport Events, { DamageEvent } from 'parser/core/Events';\r\nimport Statistic from 'interface/statistics/Statistic';\r\nimport STATISTIC_CATEGORY from 'interface/others/STATISTIC_CATEGORY';\r\nimport STATISTIC_ORDER from 'interface/others/STATISTIC_ORDER';\r\nimport BoringSpellValueText from 'interface/statistics/components/BoringSpellValueText';\r\nimport ItemDamageDone from 'interface/ItemDamageDone';\r\n\r\nconst EARTHEN_SPIKE = {\r\n  INCREASE: 0.2,\r\n};\r\n\r\n/**\r\n * Summons an Earthen Spike under an enemy, dealing (108% of Attack power)\r\n * Physical damage and increasing Physical and Nature damage you deal\r\n * to the target by 20% for 10 sec.\r\n *\r\n * Example Log:\r\n *\r\n */\r\nclass EarthenSpike extends Analyzer {\r\n  static dependencies = {\r\n    enemies: Enemies,\r\n  };\r\n\r\n  protected enemies!: Enemies;\r\n\r\n  protected damageGained: number = 0;\r\n\r\n  constructor(options: Options) {\r\n    super(options);\r\n\r\n    this.active = this.selectedCombatant.hasTalent(SPELLS.EARTHEN_SPIKE_TALENT.id);\r\n\r\n    this.addEventListener(\r\n      Events.damage.by(SELECTED_PLAYER)\r\n        .spell(SPELLS.EARTHEN_SPIKE_TALENT),\r\n      this.onEarthenSpikeDamage,\r\n    );\r\n\r\n    this.addEventListener(\r\n      Events.damage.by(SELECTED_PLAYER),\r\n      this.onAnyDamage,\r\n    );\r\n  }\r\n\r\n  get buffedSchools() {\r\n    return [\r\n      MAGIC_SCHOOLS.ids.PHYSICAL,\r\n      MAGIC_SCHOOLS.ids.NATURE,\r\n    ];\r\n  }\r\n\r\n  onEarthenSpikeDamage(event: DamageEvent) {\r\n    this.damageGained += event.amount + (event.absorbed || 0);\r\n  }\r\n\r\n  onAnyDamage(event: DamageEvent) {\r\n    const enemy = this.enemies.getEntity(event);\r\n    if (!enemy) {\r\n      return;\r\n    }\r\n\r\n    if (!enemy.hasBuff(SPELLS.EARTHEN_SPIKE_TALENT.id)) {\r\n      return;\r\n    }\r\n\r\n    if (!this.buffedSchools.includes(event.ability.type)) {\r\n      return;\r\n    }\r\n\r\n    this.damageGained += calculateEffectiveDamage(event, EARTHEN_SPIKE.INCREASE);\r\n  }\r\n\r\n  statistic() {\r\n    return (\r\n      <Statistic\r\n        position={STATISTIC_ORDER.OPTIONAL()}\r\n        size=\"flexible\"\r\n        category={STATISTIC_CATEGORY.TALENTS}\r\n      >\r\n        <BoringSpellValueText spell={SPELLS.EARTHEN_SPIKE_TALENT}>\r\n          <>\r\n            <ItemDamageDone amount={this.damageGained} />\r\n          </>\r\n        </BoringSpellValueText>\r\n      </Statistic>\r\n    );\r\n  }\r\n}\r\n\r\nexport default EarthenSpike;\r\n","import React from 'react';\r\n\r\nimport SPELLS from 'common/SPELLS/index';\r\nimport Analyzer, { Options, SELECTED_PLAYER } from 'parser/core/Analyzer';\r\nimport Events, { DamageEvent } from 'parser/core/Events';\r\nimport Statistic from 'interface/statistics/Statistic';\r\nimport STATISTIC_CATEGORY from 'interface/others/STATISTIC_CATEGORY';\r\nimport STATISTIC_ORDER from 'interface/others/STATISTIC_ORDER';\r\nimport BoringSpellValueText from 'interface/statistics/components/BoringSpellValueText';\r\nimport ItemDamageDone from 'interface/ItemDamageDone';\r\nimport { formatPercentage } from 'common/format';\r\nimport { STORMSTRIKE_CAST_SPELLS, STORMSTRIKE_DAMAGE_SPELLS } from 'parser/shaman/enhancement/constants';\r\nimport EventHistory from 'parser/shared/modules/EventHistory';\r\nimport AbilityTracker from 'parser/shared/modules/AbilityTracker';\r\n\r\nconst MAIN_HAND_DAMAGES = [\r\n  SPELLS.STORMSTRIKE_DAMAGE.id,\r\n  SPELLS.WINDSTRIKE_DAMAGE.id,\r\n];\r\n\r\nconst STORMFLURRY = {\r\n  WINDOW: 400,\r\n};\r\n\r\n/**\r\n * Stormstrike has a 25% chance to strike the target an additional time for\r\n * 40% of normal damage. This effect can chain off of itself.\r\n *\r\n * Example Log:\r\n *\r\n */\r\nclass Stormflurry extends Analyzer {\r\n  static dependencies = {\r\n    eventHistory: EventHistory,\r\n    abilityTracker: AbilityTracker,\r\n  };\r\n  protected eventHistory!: EventHistory;\r\n  protected abilityTracker!: AbilityTracker;\r\n\r\n  protected extraHits: number = 0;\r\n  protected extraDamage: number = 0;\r\n\r\n  constructor(options: Options) {\r\n    super(options);\r\n\r\n    this.active = this.selectedCombatant.hasTalent(SPELLS.STORMFLURRY_TALENT.id);\r\n\r\n    this.addEventListener(\r\n      Events.damage.by(SELECTED_PLAYER)\r\n        .spell(STORMSTRIKE_DAMAGE_SPELLS),\r\n      this.onStormstrikeDamage,\r\n    );\r\n  }\r\n\r\n  get totalStormstrikeCasts() {\r\n    let casts = 0;\r\n\r\n    STORMSTRIKE_CAST_SPELLS.forEach(spell => {\r\n      casts += this.abilityTracker.getAbility(spell.id).casts || 0;\r\n    });\r\n\r\n    return casts;\r\n  }\r\n\r\n  onStormstrikeDamage(event: DamageEvent): void {\r\n    const lastDmg = this.eventHistory.last(1, STORMFLURRY.WINDOW, Events.damage.by(SELECTED_PLAYER).spell(STORMSTRIKE_DAMAGE_SPELLS));\r\n    if (!lastDmg.length) {\r\n      return;\r\n    }\r\n\r\n    if (MAIN_HAND_DAMAGES.includes(event.ability.guid)) {\r\n      this.extraHits += 1;\r\n    }\r\n\r\n    this.extraDamage += event.amount + (event.absorbed || 0);\r\n  }\r\n\r\n  statistic() {\r\n    return (\r\n      <Statistic\r\n        position={STATISTIC_ORDER.OPTIONAL()}\r\n        category={STATISTIC_CATEGORY.TALENTS}\r\n        size=\"flexible\"\r\n        tooltip={`You had ${this.extraHits} extra Stormstrike${this.selectedCombatant.hasTalent(SPELLS.ASCENDANCE_TALENT_ENHANCEMENT) ? `/Windstrike` : ``} hits (+${formatPercentage(this.extraHits / this.totalStormstrikeCasts)}%).`}\r\n      >\r\n        <BoringSpellValueText spell={SPELLS.STORMFLURRY_TALENT}>\r\n          <>\r\n            <ItemDamageDone amount={this.extraDamage} /><br />\r\n          </>\r\n        </BoringSpellValueText>\r\n      </Statistic>\r\n    );\r\n  }\r\n}\r\n\r\nexport default Stormflurry;\r\n","import React from 'react';\r\n\r\nimport SPELLS from 'common/SPELLS/index';\r\nimport Analyzer, { Options, SELECTED_PLAYER } from 'parser/core/Analyzer';\r\nimport Statistic from 'interface/statistics/Statistic';\r\nimport STATISTIC_ORDER from 'interface/others/STATISTIC_ORDER';\r\nimport STATISTIC_CATEGORY from 'interface/others/STATISTIC_CATEGORY';\r\nimport Events from 'parser/core/Events';\r\nimport BoringSpellValueText from 'interface/statistics/components/BoringSpellValueText';\r\nimport { formatNumber } from 'common/format';\r\nimport SpellUsable from 'parser/shared/modules/SpellUsable';\r\n\r\n/**\r\n * Strike your target with an icy blade, dealing (65% of Attack power)\r\n * Frost damage and snaring them by 50% for 6 sec.\r\n *\r\n * Successful Ice Strikes reset the cooldown of your Flame Shock and\r\n * Frost Shock spells.\r\n *\r\n * Example Log:\r\n */\r\nclass IceStrike extends Analyzer {\r\n  static dependencies = {\r\n    spellUsable: SpellUsable,\r\n  };\r\n  protected spellUsable!: SpellUsable;\r\n\r\n  protected casts: number = 0;\r\n  protected cooldownReduced: number = 0;\r\n\r\n  constructor(options: Options) {\r\n    super(options);\r\n\r\n    this.active = this.selectedCombatant.hasTalent(SPELLS.ICE_STRIKE_TALENT.id);\r\n\r\n    this.addEventListener(\r\n      Events.damage.by(SELECTED_PLAYER)\r\n        .spell(SPELLS.ICE_STRIKE_TALENT),\r\n      this.onIceStrikeDamage,\r\n    );\r\n  }\r\n\r\n  onIceStrikeDamage() {\r\n    this.casts += 1;\r\n\r\n    if (this.spellUsable.isOnCooldown(SPELLS.FLAME_SHOCK.id)) {\r\n      this.cooldownReduced += this.spellUsable.cooldownRemaining(SPELLS.FLAME_SHOCK.id);\r\n      this.spellUsable.endCooldown(SPELLS.FLAME_SHOCK.id);\r\n    }\r\n  }\r\n\r\n  statistic() {\r\n    const shockCooldownReducedInSeconds = this.cooldownReduced / 1000.0;\r\n\r\n    return (\r\n      <Statistic\r\n        position={STATISTIC_ORDER.OPTIONAL()}\r\n        size=\"flexible\"\r\n        category={STATISTIC_CATEGORY.TALENTS}\r\n        tooltip={`You cast Ice Strike ${this.casts} times, for a total shock cooldown reduction of ${formatNumber(shockCooldownReducedInSeconds)} seconds.`}\r\n      >\r\n        <BoringSpellValueText spell={SPELLS.ICE_STRIKE_TALENT}>\r\n          <>\r\n            {formatNumber(shockCooldownReducedInSeconds / this.casts)}s <small> avg. Shock Cooldown Reduction</small>\r\n          </>\r\n        </BoringSpellValueText>\r\n      </Statistic>\r\n    );\r\n  }\r\n}\r\n\r\nexport default IceStrike;\r\n","import React from 'react';\r\n\r\nimport SPELLS from 'common/SPELLS/index';\r\nimport Analyzer, { Options, SELECTED_PLAYER } from 'parser/core/Analyzer';\r\nimport Statistic from 'interface/statistics/Statistic';\r\nimport STATISTIC_ORDER from 'interface/others/STATISTIC_ORDER';\r\nimport STATISTIC_CATEGORY from 'interface/others/STATISTIC_CATEGORY';\r\nimport Events, { DamageEvent } from 'parser/core/Events';\r\nimport BoringSpellValueText from 'interface/statistics/components/BoringSpellValueText';\r\nimport ItemDamageDone from 'interface/ItemDamageDone';\r\nimport AverageTargetsHit from 'interface/others/AverageTargetsHit';\r\n\r\n/**\r\n * Erupt a burst of fiery damage from all targets affected by your Flame Shock,\r\n * dealing (25% of Attack power) Fire damage to up to 6 targets within 8 yds of\r\n * your Flame Shock targets.\r\n *\r\n * Example Log:\r\n */\r\nclass FireNova extends Analyzer {\r\n  protected casts: number = 0;\r\n  protected hits: number = 0;\r\n  protected fireNovaDamage: number = 0;\r\n\r\n  constructor(options: Options) {\r\n    super(options);\r\n\r\n    this.active = this.selectedCombatant.hasTalent(SPELLS.FIRE_NOVA_TALENT.id);\r\n\r\n    this.addEventListener(\r\n      Events.cast.by(SELECTED_PLAYER)\r\n        .spell(SPELLS.FIRE_NOVA_TALENT),\r\n      this.onFireNovaCast,\r\n    );\r\n\r\n    this.addEventListener(\r\n      Events.damage.by(SELECTED_PLAYER)\r\n        .spell(SPELLS.FIRE_NOVA_DAMAGE),\r\n      this.onFireNovaDamage,\r\n    );\r\n  }\r\n\r\n  onFireNovaCast() {\r\n    this.casts += 1;\r\n  }\r\n\r\n  onFireNovaDamage(event: DamageEvent) {\r\n    this.hits += 1;\r\n    this.fireNovaDamage += event.amount + (event.absorbed || 0);\r\n  }\r\n\r\n  statistic() {\r\n    return (\r\n      <Statistic\r\n        position={STATISTIC_ORDER.OPTIONAL()}\r\n        size=\"flexible\"\r\n        category={STATISTIC_CATEGORY.TALENTS}\r\n      >\r\n        <BoringSpellValueText spell={SPELLS.FIRE_NOVA_TALENT}>\r\n          <>\r\n            <ItemDamageDone amount={this.fireNovaDamage} /><br />\r\n            <AverageTargetsHit casts={this.casts} hits={this.hits} />\r\n          </>\r\n        </BoringSpellValueText>\r\n      </Statistic>\r\n    );\r\n  }\r\n}\r\n\r\nexport default FireNova;\r\n","import React from 'react';\r\n\r\nimport SPELLS from 'common/SPELLS/index';\r\nimport Analyzer, { Options, SELECTED_PLAYER } from 'parser/core/Analyzer';\r\nimport Events, { DamageEvent } from 'parser/core/Events';\r\nimport Statistic from 'interface/statistics/Statistic';\r\nimport STATISTIC_CATEGORY from 'interface/others/STATISTIC_CATEGORY';\r\nimport STATISTIC_ORDER from 'interface/others/STATISTIC_ORDER';\r\nimport BoringSpellValueText from 'interface/statistics/components/BoringSpellValueText';\r\nimport ItemDamageDone from 'interface/ItemDamageDone';\r\nimport { STORMSTRIKE_DAMAGE_SPELLS } from 'parser/shaman/enhancement/constants';\r\nimport ResourceGenerated from 'interface/others/ResourceGenerated';\r\nimport calculateEffectiveDamage from 'parser/core/calculateEffectiveDamage';\r\n\r\nconst ELEMENTAL_ASSAULT = {\r\n  INCREASE: .15,\r\n};\r\n\r\nconst MAIN_HAND_DAMAGES = [\r\n  SPELLS.STORMSTRIKE_DAMAGE.id,\r\n  SPELLS.WINDSTRIKE_DAMAGE.id,\r\n];\r\n\r\n/**\r\n * Stormstrike damage is increased by 15%, and Stormstrike\r\n * now generates 1 stack of Maelstrom Weapon.\r\n *\r\n * Example Log:\r\n *\r\n */\r\nclass ElementalAssault extends Analyzer {\r\n  protected damageGained: number = 0;\r\n  protected maelstromWeaponGained: number = 0;\r\n  protected maelstromWeaponWasted: number = 0;\r\n\r\n  constructor(options: Options) {\r\n    super(options);\r\n\r\n    this.active = this.selectedCombatant.hasTalent(SPELLS.ELEMENTAL_ASSAULT_TALENT.id);\r\n\r\n    this.addEventListener(\r\n      Events.damage.by(SELECTED_PLAYER)\r\n        .spell(STORMSTRIKE_DAMAGE_SPELLS),\r\n      this.onStormstrikeDamage,\r\n    );\r\n  }\r\n\r\n  onStormstrikeDamage(event: DamageEvent): void {\r\n    this.damageGained += calculateEffectiveDamage(event, ELEMENTAL_ASSAULT.INCREASE);\r\n\r\n    // Use main-hand to determine gained maelstrom weapon stacks, which should catch MW gained from Stormflurry also\r\n    if (MAIN_HAND_DAMAGES.includes(event.ability.guid)) {\r\n      this.maelstromWeaponGained += 1;\r\n    }\r\n\r\n    const maelstromWeaponBuff = this.selectedCombatant.getBuff(SPELLS.MAELSTROM_WEAPON_BUFF.id);\r\n    if (maelstromWeaponBuff?.stacks === 10) {\r\n      this.maelstromWeaponWasted += 1;\r\n    }\r\n  }\r\n\r\n  statistic() {\r\n    return (\r\n      <Statistic\r\n        position={STATISTIC_ORDER.OPTIONAL()}\r\n        category={STATISTIC_CATEGORY.TALENTS}\r\n        size=\"flexible\"\r\n      >\r\n        <BoringSpellValueText spell={SPELLS.ELEMENTAL_ASSAULT_TALENT}>\r\n          <>\r\n            <ItemDamageDone amount={this.damageGained} /><br />\r\n            <ResourceGenerated amount={this.maelstromWeaponGained} wasted={this.maelstromWeaponWasted} resourceType={SPELLS.MAELSTROM_WEAPON_BUFF} /><br />\r\n          </>\r\n        </BoringSpellValueText>\r\n      </Statistic>\r\n    );\r\n  }\r\n}\r\n\r\nexport default ElementalAssault;\r\n","import React from 'react';\r\n\r\nimport SPELLS from 'common/SPELLS';\r\nimport Analyzer, { Options, SELECTED_PLAYER } from 'parser/core/Analyzer';\r\nimport { STATISTIC_ORDER } from 'interface/others/StatisticBox';\r\nimport Events, { CastEvent } from 'parser/core/Events';\r\nimport STATISTIC_CATEGORY from 'interface/others/STATISTIC_CATEGORY';\r\nimport Statistic from 'interface/statistics/Statistic';\r\nimport BoringSpellValueText from 'interface/statistics/components/BoringSpellValueText';\r\nimport ResourceGenerated from 'interface/others/ResourceGenerated';\r\n\r\nconst FERAL_SPIRIT = {\r\n  INITIAL_MAELSTROM_WEAPON_GAIN: 1,\r\n  MAELSTROM_WEAPON_GAIN_INTERVAL: 3000,\r\n  MAELSTROM_WEAPON_GAIN_PER_INTERVAL: 1,\r\n  MAELSTROM_WEAPON_GAIN_TOTAL_DURATION: 15000,\r\n};\r\n\r\nclass FeralSpirit extends Analyzer {\r\n  protected maelstromWeaponGained: number = 0;\r\n\r\n  constructor(options: Options) {\r\n    super(options);\r\n\r\n    this.addEventListener(\r\n      Events.cast.by(SELECTED_PLAYER)\r\n        .spell(SPELLS.FERAL_SPIRIT),\r\n      this.onFeralSpiritCast,\r\n    );\r\n  }\r\n\r\n  onFeralSpiritCast(event: CastEvent): void {\r\n    const expectedMaelstromGained =\r\n      FERAL_SPIRIT.INITIAL_MAELSTROM_WEAPON_GAIN +\r\n      FERAL_SPIRIT.MAELSTROM_WEAPON_GAIN_PER_INTERVAL *\r\n      (FERAL_SPIRIT.MAELSTROM_WEAPON_GAIN_TOTAL_DURATION / FERAL_SPIRIT.MAELSTROM_WEAPON_GAIN_INTERVAL);\r\n\r\n    this.maelstromWeaponGained += expectedMaelstromGained;\r\n  }\r\n\r\n  statistic() {\r\n    return (\r\n      <Statistic\r\n        position={STATISTIC_ORDER.OPTIONAL()}\r\n        size=\"flexible\"\r\n        category={STATISTIC_CATEGORY.GENERAL}\r\n      >\r\n        <BoringSpellValueText spell={SPELLS.FERAL_SPIRIT}>\r\n          <>\r\n            <ResourceGenerated\r\n              amount={this.maelstromWeaponGained}\r\n              resourceType={SPELLS.MAELSTROM_WEAPON_BUFF}\r\n              approximate\r\n            />\r\n          </>\r\n        </BoringSpellValueText>\r\n      </Statistic>\r\n    );\r\n  }\r\n}\r\n\r\nexport default FeralSpirit;\r\n","const debug = false;\r\n\r\nexport class Interval {\r\n  protected startTime: number;\r\n  protected endTime: number | undefined = undefined;\r\n\r\n  constructor(timestamp: number) {\r\n    this.startTime = timestamp;\r\n  }\r\n\r\n  get duration(): number {\r\n    if (this.endTime === undefined) {\r\n      debug &&\r\n      console.error(\r\n        'Cannot calculate duration of an Interval with no endTime.',\r\n      );\r\n      return 0;\r\n    }\r\n    return this.endTime - this.startTime;\r\n  }\r\n\r\n  get ended(): boolean {\r\n    return this.endTime !== undefined;\r\n  }\r\n\r\n  end(timestamp: number) {\r\n    this.endTime = timestamp;\r\n  }\r\n}\r\n","import { Interval } from './Interval';\r\n\r\nconst debug = false;\r\n\r\nexport class Intervals {\r\n  protected intervals: Interval[];\r\n\r\n  constructor() {\r\n    this.intervals = [];\r\n  }\r\n\r\n  get totalDuration() {\r\n    return this.intervals.reduce((acc, interval) => acc + interval.duration, 0);\r\n  }\r\n\r\n  private get isLastIntervalInProgress() {\r\n    const length = this.intervals.length;\r\n    if (length === 0) {\r\n      return false;\r\n    }\r\n\r\n    return !this.intervals[length - 1].ended;\r\n  }\r\n\r\n  startInterval(timestamp: number) {\r\n    if (this.isLastIntervalInProgress) {\r\n      debug &&\r\n      console.error(\r\n        'Intervals: cannot start a new interval because one is already in progress.',\r\n      );\r\n      return;\r\n    }\r\n\r\n    this.intervals.push(new Interval(timestamp));\r\n  }\r\n\r\n  endInterval(timestamp: number) {\r\n    if (!this.isLastIntervalInProgress) {\r\n      debug &&\r\n      console.error(\r\n        'Intervals: cannot end an interval because none are in progress.',\r\n      );\r\n      return;\r\n    }\r\n\r\n    this.intervals[this.intervals.length - 1].end(timestamp);\r\n  }\r\n}\r\n","import React from 'react';\r\n\r\nimport Analyzer, { Options, SELECTED_PLAYER } from 'parser/core/Analyzer';\r\nimport Events, { ApplyBuffEvent, ApplyBuffStackEvent, CastEvent, RemoveBuffEvent, RemoveBuffStackEvent } from 'parser/core/Events';\r\nimport SPELLS from 'common/SPELLS/index';\r\nimport UptimeIcon from 'interface/icons/Uptime';\r\nimport Spell from 'common/SPELLS/Spell';\r\nimport Statistic from 'interface/statistics/Statistic';\r\nimport STATISTIC_ORDER from 'interface/others/STATISTIC_ORDER';\r\nimport BoringSpellValueText from 'interface/statistics/components/BoringSpellValueText';\r\nimport { formatPercentage } from 'common/format';\r\n\r\nimport { Intervals } from './Intervals';\r\n\r\nconst MAX_STACKS = 10;\r\nconst MAX_STACKS_SPENT_PER_CAST = 5;\r\nconst MAELSTROM_WEAPON_SPENDERS: Spell[] = [\r\n  SPELLS.CHAIN_HEAL,\r\n  SPELLS.CHAIN_LIGHTNING,\r\n  SPELLS.HEALING_SURGE,\r\n  SPELLS.LIGHTNING_BOLT,\r\n];\r\nconst debug = false;\r\n\r\nclass MaelstromWeapon extends Analyzer {\r\n  protected stacksGained = 0;\r\n  protected stacksUsed = 0;\r\n  protected stacksExpired = 0;\r\n\r\n  protected currentStacks = 0;\r\n\r\n  protected cappedIntervals: Intervals;\r\n\r\n  constructor(options: Options) {\r\n    super(options);\r\n\r\n    this.cappedIntervals = new Intervals();\r\n\r\n    this.addEventListener(\r\n      Events.applybuff.by(SELECTED_PLAYER).spell(SPELLS.MAELSTROM_WEAPON_BUFF),\r\n      this.gainFirstStack,\r\n    );\r\n\r\n    this.addEventListener(\r\n      Events.applybuffstack.by(SELECTED_PLAYER).spell(SPELLS.MAELSTROM_WEAPON_BUFF),\r\n      this.gainSubsequentStack,\r\n    );\r\n\r\n    this.addEventListener(\r\n      Events.removebuff.by(SELECTED_PLAYER).spell(SPELLS.MAELSTROM_WEAPON_BUFF),\r\n      this.removeAllStacks,\r\n    );\r\n\r\n    // This only occurs when player casts a spender, because in case stacks expire, 'removebuff' event occurs.\r\n    this.addEventListener(\r\n      Events.removebuffstack.by(SELECTED_PLAYER).spell(SPELLS.MAELSTROM_WEAPON_BUFF),\r\n      this.spendStacks,\r\n    );\r\n\r\n    this.addEventListener(\r\n      Events.cast.by(SELECTED_PLAYER).spell(MAELSTROM_WEAPON_SPENDERS),\r\n      this.castMaelstromWeaponSpender,\r\n    );\r\n  }\r\n\r\n  get timePercentageSpentWithCappedStacks() {\r\n    return this.cappedIntervals.totalDuration / this.owner.fightDuration;\r\n  }\r\n\r\n  reachMaxStacks(timestamp: number) {\r\n    this.cappedIntervals.startInterval(timestamp);\r\n  }\r\n\r\n  stopHavingMaxStacks(timestamp: number) {\r\n    this.cappedIntervals.endInterval(timestamp);\r\n  }\r\n\r\n  // this method is a helper for determining if removebuff event corresponds to stack expiration or spending\r\n  castMaelstromWeaponSpender(event: CastEvent) {\r\n    const stacksUsed = Math.min(\r\n      this.currentStacks,\r\n      MAX_STACKS_SPENT_PER_CAST,\r\n    );\r\n\r\n    if (stacksUsed === 0) {\r\n      return;\r\n    }\r\n\r\n    this.stacksUsed += stacksUsed;\r\n\r\n    if (this.currentStacks === MAX_STACKS) {\r\n      this.stopHavingMaxStacks(event.timestamp);\r\n    }\r\n\r\n    this.currentStacks -= stacksUsed;\r\n  }\r\n\r\n  gainFirstStack(event: ApplyBuffEvent) {\r\n    this.currentStacks = 1;\r\n    this.stacksGained += 1;\r\n  }\r\n\r\n  gainSubsequentStack(event: ApplyBuffStackEvent) {\r\n    if (this.currentStacks + 1 !== event.stack) {\r\n      debug && console.error('Maelstrom Weapon analyzer: stack mismatch in applybuffstack');\r\n      return;\r\n    }\r\n\r\n    this.currentStacks = event.stack;\r\n    this.stacksGained += 1;\r\n\r\n    if (this.currentStacks === MAX_STACKS) {\r\n      this.reachMaxStacks(event.timestamp);\r\n    }\r\n  }\r\n\r\n  removeAllStacks(event: RemoveBuffEvent) {\r\n    if (this.currentStacks === 0) {\r\n      // stacks were spend on a spender spell\r\n      return;\r\n    }\r\n\r\n    if (this.currentStacks === MAX_STACKS) {\r\n      this.stopHavingMaxStacks(event.timestamp);\r\n    }\r\n\r\n    this.stacksExpired += this.currentStacks;\r\n    this.currentStacks = 0;\r\n  }\r\n\r\n  spendStacks(event: RemoveBuffStackEvent) {\r\n    if (this.currentStacks !== event.stack) {\r\n      debug && console.error('Maelstrom Weapon analyzer: stack mismatch in spendStacks');\r\n    }\r\n    if (this.currentStacks === MAX_STACKS) {\r\n      this.stopHavingMaxStacks(event.timestamp);\r\n    }\r\n\r\n    this.currentStacks = event.stack;\r\n  }\r\n\r\n  statistic() {\r\n    return <Statistic\r\n      position={STATISTIC_ORDER.CORE()}\r\n      size=\"flexible\"\r\n      tooltip={<>\r\n        You gained {this.stacksGained} Maelstrom Weapon stacks and used {this.stacksUsed}\r\n      </>}\r\n    >\r\n      <BoringSpellValueText spell={SPELLS.MAELSTROM_WEAPON}>\r\n        <UptimeIcon /> {formatPercentage(this.timePercentageSpentWithCappedStacks)}% <small>of fight with max stacks</small><br />\r\n        {formatPercentage(this.stacksUsed / this.stacksGained)}% <small>of stacks used</small>\r\n      </BoringSpellValueText>\r\n    </Statistic>;\r\n  }\r\n}\r\n\r\nexport default MaelstromWeapon;\r\n","import CoreCombatLogParser from 'parser/core/CombatLogParser';\r\n\r\nimport Abilities from './modules/Abilities';\r\n// Shared Shaman\r\nimport AnkhNormalizer from '../shared/normalizers/AnkhNormalizer';\r\nimport AstralShift from '../shared/spells/AstralShift';\r\n// Features\r\nimport CooldownThroughputTracker from './modules/features/CooldownThroughputTracker';\r\nimport AlwaysBeCasting from './modules/features/AlwaysBeCasting';\r\nimport Checklist from './modules/checklist/Module';\r\nimport Buffs from './modules/Buffs';\r\n// Enhancement Core\r\nimport Stormbringer from './modules/core/Stormbringer';\r\n// Talents\r\nimport LashingFlames from './modules/talents/LashingFlames';\r\nimport HotHand from './modules/talents/HotHand';\r\nimport ForcefulWinds from './modules/talents/ForcefulWinds';\r\nimport SpiritWolf from '../shared/talents/SpiritWolf';\r\nimport EarthShield from '../shared/talents/EarthShield';\r\nimport StaticCharge from '../shared/talents/StaticCharge';\r\nimport Hailstorm from './modules/talents/Hailstorm';\r\nimport NaturesGuardian from './modules/talents/NaturesGuardian';\r\nimport CrashingStorm from './modules/talents/CrashingStorm';\r\nimport Sundering from './modules/talents/Sundering';\r\nimport Stormkeeper from './modules/talents/Stormkeeper';\r\nimport EarthenSpike from './modules/talents/EarthenSpike';\r\nimport ElementalBlast from '../shared/talents/ElementalBlast';\r\nimport Stormflurry from './modules/talents/Stormflurry';\r\nimport IceStrike from './modules/talents/IceStrike';\r\nimport FireNova from './modules/talents/FireNova';\r\nimport ElementalAssault from './modules/talents/ElementalAssault';\r\nimport FeralSpirit from './modules/core/FeralSpirit';\r\nimport FlameShock from '../shared/spells/FlameShock';\r\nimport WindfuryTotem from './modules/core/WindfuryTotem';\r\nimport MaelstromWeapon from './modules/core/MaelstromWeapon';\r\n\r\nclass CombatLogParser extends CoreCombatLogParser {\r\n  static specModules = {\r\n    // Shaman Shared\r\n    ankhNormalizer: AnkhNormalizer,\r\n    astralShift: AstralShift,\r\n\r\n    // Resources\r\n\r\n    // maelstromTracker: MaelstromTracker,\r\n    // maelstromDetails: MaelstromDetails,\r\n\r\n    // Shaman Core\r\n    stormbringer: Stormbringer,\r\n    feralSpirit: FeralSpirit,\r\n\r\n    // Features\r\n    alwaysBeCasting: AlwaysBeCasting,\r\n    abilities: Abilities,\r\n    buffs: Buffs,\r\n    checklist: Checklist,\r\n    cooldownThroughputTracker: CooldownThroughputTracker,\r\n    flameShock: FlameShock,\r\n    windfuryTotem: WindfuryTotem,\r\n    maelstromWeapon: MaelstromWeapon,\r\n\r\n    // Talents\r\n    lashingFlames: LashingFlames,\r\n    forcefulWinds: ForcefulWinds,\r\n    elementalBlast: ElementalBlast,\r\n    stormflurry: Stormflurry,\r\n    hotHand: HotHand,\r\n    iceStrike: IceStrike,\r\n    spiritWolf: SpiritWolf,\r\n    earthShield: EarthShield,\r\n    staticCharge: StaticCharge,\r\n    elementalAssault: ElementalAssault,\r\n    hailstorm: Hailstorm,\r\n    fireNova: FireNova,\r\n    naturesGuardian: NaturesGuardian,\r\n    crashingStorm: CrashingStorm,\r\n    stormkeeper: Stormkeeper,\r\n    sundering: Sundering,\r\n    //elementalSpirits: ElementalSpirits,\r\n    earthenSpike: EarthenSpike,\r\n    //ascendance: Ascendance,\r\n\r\n    // covenants\r\n    //chainHarvest: ChainHarvest,\r\n    //vesperTotem: VesperTotem,\r\n  };\r\n}\r\n\r\nexport default CombatLogParser;\r\n","import React from 'react';\r\nimport PropTypes from 'prop-types';\r\n\r\nconst AverageTargetsHit = props => {\r\n  const { casts, hits, unique, approximate } = props;\r\n  const averageHits = (hits / casts) || 0;\r\n  return (\r\n    <>\r\n      {approximate && '≈'}{averageHits.toFixed(1)} <small> {unique ? 'unique targets hit' : 'average'} {unique ? '' : averageHits === 1 ? 'hit' : 'hits'} per cast</small>\r\n    </>\r\n  );\r\n};\r\n\r\nAverageTargetsHit.propTypes = {\r\n  casts: PropTypes.number.isRequired,\r\n  hits: PropTypes.number.isRequired,\r\n  unique: PropTypes.bool,\r\n  approximate: PropTypes.bool,\r\n};\r\n\r\nexport default AverageTargetsHit;\r\n\r\nAverageTargetsHit.defaultProps = {\r\n  approximate: false,\r\n  unique: false,\r\n};\r\n\r\n"],"sourceRoot":""}